TAG,REVIEW
0,The test plan covers possible test cases and also covers edge cases.
0,Multiple diagrams visualizing and explaining the changes that need to be done to the system.
0,The design is well thought of. They propose 2 solutions and the final design chosen by them.
1,"The team has added details about UI testing. 
For automated testing, more information could have been provided on which parameters need to be tested in accordance to the changes they plan to implement."
1,"The team has provided a usecase diagram which is laid out well.
Although a flowchart would have been great to understand the flow of the functionality"
0,"Yes, the design appears simple and is explained well"
0,"Yes, the team has laid out a plan well which seems to fit the current design"
0,Overall explanation of the changes that need to be made are made pretty clear
0,The changes are well explained and sufficiently detailed.
0,The design is clearly described and explained in sufficient details. It is simple to follow.
0,Yes. The test plan is elaborative and should help in testing the features after the code part is complete.
0,"Yes, the visualization help in understanding the approach of the solution."
0,"Yes, it is complete, sound and appropriate."
0,"Yes, the explanation is elaborative and complete."
0,The team have carefully thought out their test plan. They have covered a lot of context of the system and have figured out how the system should act in those scenarios. The tests are very detailed and will really test the functionality of the cake questions.
0,The design appears to be sound and I don't see any major issues. The team have explained the problem statement in great detail and I think they have a proper idea of the work to be done. They have also completely figured what which files would they change.
0,The authors have explained the changes to be made in great detail. The explanation has been very nicely written while providing a lot of details about the system and the way it should ideally behave. The team have written the problem statement well and seem to have a great understanding of the way to approach the project.
0,"There are various test case scenarios that the team will cover in the testing phase. They have thoroughly thought out the cases and have even posted an open question regarding the self-review. The answer depends on instructors, though I think that self-review contribution should be equal if enabled.  This can be later clarified and modified as the project proceeds."
0,"The team has used a UML diagram, a DB design and even screenshots to explain their project clearly yet succinctly. This helps in easy understanding of the project."
0,"The design is simple and it seems easy enough to implement. Several view changes, creating a new model and editing a controller to add the model changes are clearly stated and it shows clarity with the team."
0,"The team has worked very well on this project design. They have added sections for different probable solutions, DB design, and future test plans as well. The chosen Solution A shows their implementation in a clear concise way."
0,The authors have made detailed explanations for the changes proposed to the system. These changes seem logical and satisfactory to me.
0,Team has given good number of test cases taht they are going to test the functionality. testing from different perspective is been done. They will be writing test cases and manually testing the functionality also.
0,"They have proposed two solutions for the problem and both of them does not look complex, but looking at the solution, solution A looks more simple to me. They have given screenshots of screens also that they are going to change, which makes it easy to understand"
0,"Yes design looks good, they have not made any changes in page for round 2 submission. It is same as before but they have covered everything"
0,They addressed every aspect of the features that are to be tested.
0,They have used plenty of diagrams.
0,The use of diagrams makes it easier to understand the system.
0,They have included plenty of diagrams to make the user understand their work.
0,They have a dedicated section for code changes and explained them pretty well.
0,"Yes, mainly while deciding on one of the proposed approaches, they have gone with a far subtler approach of only removing a user session id check as against the other flow of introducing a new self review altogether."
0,"Yes they proposed multiple solutions, shown two approaches and justified one. Good job overall. They've extended the cake model from scored question model, which seems right."
1,"Design include manual the test plan in detail but short with the automated or Rspec test cases. They should include where the test cases will be added and what test cases will be added in order to ensure that the functionality is working as expected. Line ""We will be adding unit / integration tests to all the files we modify."" should be removed from the doc as it doesn't add any significance, instead test cases or meticulous test plan with Rspec should be included."
0,"Design appear to be sound, as the team has considered two approaches and selected by one by considering the pros and cons of both. New question type is being added by extending the models scored, choice, question."
1,"The changes are explained properly. They have given the details of the approach in detail but the UI details are missing. Team could add the UI details more specifically, like why the existing star component is efficient. Though i think it can be replaced by a slider. 
Also, the UI details for the instructor are missing, how these changes will impact the user experience for the instructor. Kindly include it."
1,"Yes, decent test plan doc when it come to UI testing. However, rspec files haven't been explained in detail at all, no test cases mentioned as well."
0,"Yes, it does. For example, for enabling the teammate to self review, they are proposing a simple change to remove the session id user check, which was fairly simple. They are proposing other solutions as well alongwith, which is good."
1,"Yes, currently there's no check on the total contribution maintained by teammates. They would tally it up to 100, but a major question is whether the scope would require them to not let the user do this, or just warn. I see this as an open question, and they should've clarified this by now."
1,Automatic tests are not localized yet.
1,"Design appear to be sound but the database design is kinda complex to understand, but it includes all the details."
0,Yes they kinda have explained it how to do but they now need to localize those boundaries.
1,"The testing section needs to be added as they have written in the document. So, that is something that needs to be done."
0,The team has used a lot of diagrams and UML to explain their working which is really useful and easy for the reader to follow through the whole document.
0,The team did well on explanations. The design sounds perfectly sound and the appropriate patterns have been suggested. I think they have done a proper job.
0,"Yes, the changes and the thoughts have been put out clearly that are to be done by the team."
0,The diagrams put down in the document are completely relevant and provide a very good understanding of the project
1,"The changes proposed look great as per explanation.
A little more information about where the code changes are going to be made would have been helpful to understand the team's plan."
0,The changes are specific and well thought of.
0,The design document covers all necessary components required and is well structured
0,The document looks complete and well written. It is structured well and is easy to understand
0,"The design proposed looks sound and DRY. As this is an initial analysis, names of methods to be implemented/edited should not be expected at this point."
0,The changes proposed look good and if implemented well could result in a working feature. They have proposed 2 solutions and deduced which one is better.
0,They have made the document to encompass the entire functionality requested in the feature. It is thoroughly made with detailed analysis.
0,The UML diagrams is the most comprehensive diagrams I have ever seen.
0,all part is completed and meaningful
0,The design part includes all of the functionality required.
0,The design doc is very detail and meaningful.
0,"1. ER Diagrams
2. UML"
0,"1. No
2. No
3. Yes
4. It might because of database hits.
5. No."
0,The explanation is quite expansive and clear to why the solution proposed is going to work.
0,"Yes, it touches on all the functionalities."
0,It's a complete document for an initial document.
0,The design appears to be sound. The authors have properly identified where exactly the modifications would need to be made. The code would not become smelly if they write code in an independent fashion. It does seem that there might be some gem which might be able to help them on the UI side and maybe handle the cake issue on the backend as well. I think the design is sound and has been worked upon enough.
1,"The team have given a lot of effort in making the design doc extremely good. The explanation for their different approach has been well-defined. However, I feel that some explanations are verbose and could have been written more simply for example, in the proposed solution section. They already have a diagram to support their statements so could have written a bit less."
0,The design doc is well made and includes everything that is required in a design doc. The functionality is well explained with enough details.
0,"The design doc is extremely complete and includes everything. They have also explicitly mentioned a lot of tests along with the context in which they might be required. The statement has been explained well, the diagrams support their approach and testing plan is thorough."
0,"Team has made a very easy to understand UML Diagram and a DB Design diagram as well. Shows that they have understood their project well and are good at projecting relevant information to others.
Everything seems to be in order."
0,The team has explained everything very neatly and coherently.
0,"The design doc shows the current problems, the team's proposed solutions and code changes, UML diagrams and test plans."
0,Right now the doc seems complete and the team will update their test plan section and code changes section as the project progresses.
0,UML diagram is suggestive enough and provide information on how the program flow will work.
0,Author has provided with details on what changes are required and at which place these changes will be implemented.
0,Design document looks complete and author has added all the required details.
0,Visual aids are used properly
0,Design appears to be sound
0,Adequate explanation
0,Complete functionality
0,Design doc appears to be complete
1,"The UML diagram is too high-level yes, for instance, the instructor adds a question and sets its type while designing the rubric, which would be 'CAKE' in this case. The UML doesn't include this flow, nor does it provide any detail as to if this can be done. Trivial, but an arrow has been tagged incorrectly, Team A (a specific team) should be connected to the student. Also, UML don't include if-else blocks the way you've put, or do they? DB snapshot helps."
1,"Code changes aren't explicitly mentioned, too early to review on those lines, as we only the concerned files at this point. The files mentioned are only the relevant ones, and they have included the correct schema segments as well. Response time would be increased as now you'll be querying the db to get the past contributions, before displaying the questionnaire. Ensure this query is optimized."
1,"In the documentation they've mentioned adding in the CAKE type as a star rated question, could this be more intuitive? A 5-star rating doesn't let me distribute them evenly, say between two members. Could I rather put in a percentage number directly? Not sure how if this can be done, but try show the previous rated contributions as well with the member names? More details needed on how a warning would be displayed on the UI as well."
0,"They've pretty much covered everything, the proposed solutions were detailed. They've stated two approaches and justified the choice as well. Test plan covers edge cases like self-review check enabled/disabled."
1,"UML and ER diagrams are given but UML should include multiple reviews for team members as the fraction of the cake type question will be shared across multiple reviews. ER is given for the tables but how the exactly the database will be used here is not explained in the doc? How the fraction will be calculated what all tables, fields will be used?"
0,Team has done a good job identifying the files to be modified and the decision to follow the consistent Solution A.
1,"Changes proposed are good but team should add few more details:
1. In the solutions, stars are proposed for the question type but i don't think that's the best way to do it, this will does not give the liberty to have any fraction for the question. A slider from 1 to 100 would be a better option or a number input. 
2. Will there be any info icon to for the reviewer to know that s/he has to consider the fraction based on the other team members, as if by mistake reviewer submit 100% for one team member then it will not be possible to provide any fraction to another team mate. 
3. This change is not only for the reviewer but also for the instructor. None of the details are mentioned about the Instructor flow"
1,UI details are missing. It would be great to include the UI changes for the instructor and reviewers that how the cake question type will look like? I could see details about Stars but i think this will does not give the liberty to have any fraction for the question. A slider from 1 to 100 would be a better option.
1,"The authors have given quite good explanation of proposed code changes. However, it lacks the explanation of how can I distribute the ratings evenly between more than one member. The previous ratings also cannot be accessed."
1,"The design takes care of most of the functionalities. The team has tried to address maximum of the corner cases. However, the test plan could have been explained better. The authors have not explained well, which parts of new code will be tested and in what manner."
0,"The team has done a good job while creating the documentation. They have explained the approach well, as well as the test plan has been properly justified. The documentation is quite detailed."
0,"The team has completed the doc pretty well. All the sections are covered. The test plan, proposed code changes and the UML diagrams are aptly explained to justify the given problem definition."
0,The uml diagram do follow the principles and it is quite informative.
0,It was adequate to follow what all things to they have planned to change.
0,Yes the proposed design does include the know-hows of the functionality required and how to achieve it.
0,Yes they have included most of it as far as I know and the content is also quite intuitive.
0,"Yes, the authors have used relation diagrams to explain the functionalities and the dependencies which explain the problem very well."
0,"No, it seems that the plan proposed is correctly done by the authors."
0,The authors have mentioned proposed changes and they are explained properly.
0,Yes the team has incorporated all the functionalities mentioned in the google doc.
0,The design doc seems to be completed properly and not much needs to be changed.
1,There are no comments
1,more tests are needed
1,read me file not available
1,admin credentials not available
1,Test cases are provides but the presented project does not provide those functionalities.
1,"As the project is not implemented completely and I can not do anything besides view and edit profile. Hence, I can not check for edge cases."
1,"No it does not work. The team was supposed to complete the admin, librarian and student functionalities. However, all the three are still incomplete. The admin credentials provided in the README file does not work. Hence, I was not able to review admin functionalities.
 
In the case of librarian, the following functionalities are missing -
- The librarian sign up form only takes email and password and creates user profile of a student (I don't know why). The librarian has student fields - eg education level, max book allowance etc instead of library to which he is assigned. 
- Librarian authorization by admin is not provided
- He can not add / remove / modify books from library
- He can not see list of checked out books and borrowing history
- He can not view book hold requests and approve special book requests.
 
It is the same thing with student module, he can not do anything besides edit profile, view books and libraries but he can add a new library which is not acceptable."
1,"The project is incomplete, but it consist of basic relationships. It should have the following mapping - the library has many reservations."
1,"The team did not submit their changes throughout the project, the changes were mainly made during the deadline period of the submissions. However, they did commit few changes in round 2."
1,No. They have not tested any models
1,"1 Not able to login as admin
2 No book checkout functionality.
3 Dont know
4 Not able to login as admin"
1,"The admin is still not able to sign in. The team has implemented book search functionality, however they have not updated it on heroku. There is now image for book cover"
1,"No. The team has not used extensively the github for collaboration. they did push some commits in round 2. They have created project board, however there is very little usage."
1,Max no of days a book can be issued in a library can be changed to negative.
1,Student can't issue book.
1,"Admin details provided are incorrect. Unable to login.
Book issue/return/Hold request not working.
No libraries can be added.
sign up form is incomplete for students/librarian."
0,Good number of  changes made  for round 2
1,"NO many issues are there in final submission, as mentioned above books functionalities are not working."
1,Many basic features are not working and a proper testing should have be done before submitting final version.
1,"Admin Facing issue while creating a new book.View all books not working as well. Checkout books view, hold request view,  over due fines not working."
1,Although i see commits for the project during round 1 and round 2. I think it should be more frequent as each functionality can be pushed via a new commit.
1,Code quality is okay a better job at testing should also be done. No extra features are implemented.
1,Some of them is fixed. Admin can't log in.
1,Most of the validations are not working. Secondary show pages are not working.
1,"No, not enough commits throughout the project"
1,Only some of the show pages are working. *
1,"The UI was intuitive and all the implemened functionalities were easy to find.
The team did not keep pushing throughout the project period. The whole project was submitted as 1 commit and only a README update after that.
Though there was only 1 commit since the creation of the repo, it looked like the team was recently active in creating Issues for the repo."
1,"There was no preconfigured admin account and no admin features developed. As a result of which, the admin functionalities could not be reviewed.
The code abides by the accepted Ruby and Rails coding practices in terms of file names and general naming within the code."
1,The admin functionalities do not exist yet.
1,find just upload two days ago
1,"the librarian account cannot edit their profile, while student account can edit their account
can not add books, view books, only can view the libraries"
1,can not find the admin account information
1,All the commits on github were done on Oct 2. This generally is not a good practice. I would suggest you to push your changes to github right from the beginning of your project for ease of collaboration and version control.
1,No features were developed for the admin.
1,"At present, there is no functionality about the admin."
1,"There are 6 commits in total and thus, the team does not really push changes throughtout the project period."
1,There is not a single module which is completely developed and thus it is not possible to event comment on thorough testing
1,"Admin functionality has not been implemented. Thus, I can not provide any feedback for this module"
1,"Student was able to add a library, which should not have been allowed for extra credit. View books link and edit profile links were visible on the UI but clicking on them redirected to an error page."
1,No tests are in place.
1,"Interface is easy to use. I like that you have implemented dynamic web pages to resize according to the browser window size. However, there are certain links (View all books & Libraries) which are broken or result in error."
1,Admin login details not provided. Unable to test admin functionalities
1,"Only 6 commits are made so far, not much work is done."
1,"None of the model is working, no books can be viewed as link is broken, admin is not implemented, both uses can only view and add libraries. Student should not be allowed to add library"
1,"Improvements in the UI can be made. Much of the functionality is left yet to be deployed. Sign in , sign up and log out pages are working. First commit on github was just 4 hrs before deadline."
1,Not any of the model or controller was tested except signup.
1,Couldn't find the readme.md file
1,Not found the admin login and details.
0,"Yes. The code is clear and readable.
One method only handle one task.
The naming of models/functions are clear and easy to figure out.
Overall the code quality is great"
1,"All functionalities working well and the UI is clean but there are few problems.
According to requirements, admin account cannot be deleted. However, the ""cancel"" button still appears on the admin profile page. Also I believe that admin's password should not be able to be changed. 
Cannot find students with overdue when I log in with librarian/admin."
0,I think all relationships in their project were implemented very well.
0,Yes the team has been making changes throughout the project. Even in round two they still pushing codes.
1,Delete of users fails even in normal case
1,"Books added by admin do not reflect in student account. No quantity is being asked at time of book creation when done through admin.
Hold request not created when book quantity is less than 0. Only flash message displayed.
Overdue fines not implemented.
Deleting users or books fails."
0,"Db design done well.
Good use of abstraction by managing return and checkout using action field in the Transaction table."
0,Changes done for round 2.
1,"Long methods used, especially in books_controller"
1,No RSpec file present.
0,The code is well-written with well-defined functions and has clean project structure.
0,The commits are consistent throughout the project period and work seems properly divided into teammates.
1,"Controllers and views are written nicely. Function calls are not that much coupled and depend on other functions. Gem devise is used appropriately.
Though the authors should consider adding logic into models rather than controllers, as stated by MVC architecture."
1,Could not find any test files.
0,UI is easy to interact with.
0,Sure.
1,"The readme file gives good instruction on how to use the application. The website is user-friendly, but I wish there can be more ""back"" link."
1,May need more tests for specific functions.
0,"The UI is simple and clear, which is easy to use."
1,"The application works great!
 
Seems like the admin can not update his/her name in the profile."
1,The new design will be short and concise since only added classes. The disgn strategy make sence.
1,lack of UI test description
1,"There are no figures that would describe what the user interface should look like once it is done. That being said, its not strictly necessary because it is fairly easy to imagine without it."
1,The design is neat and serves the problem statement.
1,The team have drawn a use case diagram which explains the schematics of the approach and it does provide a nice way to visualize the various actors and their primary functionalities in the system. It would have been better if they could have drawn a simple diagram or flowchart to explain their steps rather than provide more textual description.
1,The design seems to be very simple and the approach has been clearly illustrated. The team have explained the steps properly and I don't think there are any issues with their approach.
1,The design appears to be sound and this is very nicely supported by some great writeup by the team. They explain in great detail what they will do to complete the steps and how they will approach the problem.
1,"The authors have very nicely explained the changes both at a low level like which variable would be added, which files would be modified and also included high-level details as to what scenarios will be required for which user, etc. The explanation was lucid and easy to understand."
1,"The team hasn't improved on visual aids. As mentioned in the previous review, uml diagrams, like sequence diagram would have helped well."
1,Very well explained. Better visual aids could have helped more.
1,"There is only a use case diagram, and no screenshot in the design doc, therefore, this doc is no clear and easy enough to understand. it would be better if they add more details."
1,"Their design appeared to be sound and followed appropriate principles and patterns. However, it looks like the solutions and explanations are too simple, they should provide more detailed explanations."
1,"Yes, the authors explained all the changes, but I do not think the explanations are adequate, they should write more details in the design doc."
1,"Yes, they include test plan, but a little shallow.
First, they should improve their UI testing part, which will help reviewers to find whether their functions work.
Second, they can split their Rspec test into view test and controllers. Or they can classify Rspec test with different functions, which will looks more clear."
1,"Yes, their user case diagram help us understand the work flow of their function.
However, if they can use a UML diagram to show us how they will change the related controller and view."
1,"Yes, their design appear to be sound. Although They have not mentioned anything about principles and pattern.
I think they can improve their design after they finished the project."
1,the URL image looks like simple
1,"yes, they have clearly problem statement, implementation with design strategy but lack of design pattern; test plan is good, but need more description with the UI test."
1,a little hard to understand
1,"I like the way the test plan has been mentioned. It's concise and clear. It wasn't clear on how will they test this line:
There should be no link for the ""Supplementary Review Questionnaire"" for team members or reviewers if the instructor disables this section in Assignment Creation Page."
1,"The team has not used the visualization tool in a good sense, they have used only one use case diagram but that is a very high level. More efforts could be put in there to add more visual diagrams."
1,"The design is simple however, it's still undergoing, more stuff would clearly explain the design that the team is trying to implement. For example in below steps:2. add another file for a supplemental questionnaire and save them to the database.3. add a method to get the corresponding supplemental questionnaire and to add questions into the existed questionnaire.They could mention what will the file contains and also what will the method name be and the input and output."
1,"Yes, the design for creating a supplementary review questionnaire raises seems pretty clear. More stuff could be added in the wiki documentation to make it more elaborate."
1,"The authors did explain the changes that they are proposing but it is a very high-level view, more details could have been added in the various sections."
1,"> The design does include a test plan The basic functionalities testing have been mentioned covering most part. However, there could be more scenarios missing.
> However, the edge cases have not been mentioned enough. They had added ""to be continued"" in the first phase of documentation but haven't done any changes since then."
1,"> They have added a use case diagram which appears to be a little too simple and not explained enough.
> I would have appreciated if more diagrams could have been added supporting the proposed changes and how they would help."
1,"> The design does appear to be simple.
> The changes proposed seems minimal and enough to cover all the requirements.
> However, the exact number of changes and classes to be tweaked has not been mentioned, which doesn't help in verifying if there could be more optimal solutions."
1,"> The design appears to be vague and doesn't talk alot from technical perspective.
> Would have appreciated if more details were added.
> Nothing has been mentioned about the patterns that they are using."
1,"> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed.
> The explanation is a bit vague and needs to be improved.
> Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done.> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed. > The explanation is a bit vague and needs to be improved. > Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done."
1,The Use Case diagram wasn't extraordinarily helpful. It basically just summarized what was said in the above section. It may be more helpful to have a diagram that walks through how to do these things from login from each user's perspective.
1,"Under ""Design Strategy"" it may be helpful to specify who is creating the questionnaire when it says ""there should be a checkbox when creating the whole questionnaire"". Make it explicit who it is that is doing the actions."
1,"Would just be nice to have better diagrams in the ""Use Case"" section as mentioned in the above comment."
1,"The class diagram though helpful, is very abstract."
1,The proposed design seems fine. I would like the team to consider if the new class that they plan to introduce can be made more generic instead of SupplementalReviewQuestionnaire so that it can be used in the future for something else as well.
1,"The UML diagram is very helpful. I would like the team to add code level changes as well. While the class name is mentioned, detailed mention of methods/ their behaviour would help."
1,"Though pretty high level, the document is good enough to give an initial idea about the project and how the team plans to proceed with the implementation. Good job team!"
1,The section for Files to be added/removed doesnt list the files that the project plans to edit or create newly. I think it has been missed by mistake by the team. Please update this section before the next round of review. All the best!
1,"there is no UML diagrams, or mockups screens, which is a problem need to concern."
1,Their design strategy write about the Modifications in the User Interface is showed and the user cases looks decent and simple to understand.Test plan contains the most test cases also include the edge cases.
1,"From the doc, I konw that the team should add a new subclass of Questionnaire called, say, SupplementalReviewQuestionnaire, and do the “View” function for a rubric should display answers submitted for the SupplementalReviewQuestionnaire as well as the ReviewQuestionnaire. I can see the work they have done on the wiki pages which coverd enough about their project."
1,The authors have attached a UML diagram which graphically shows how the new system would like from the view of different actors however the diagram doesn't much elaborate upon the functionality and hence could have included the low-level steps mentioned in text form.
1,"The design by the team appears to have been carefully thought out.
The authors will be adding methods and variables to apt class only.
The functionality isn't so complex and wholesome that they might require a Ruby gem.
The new design may increase the response time of the system if the file is not properly fetched from the database but that can be verified only after feature is developed."
1,"The authors have given proper and clear explanations for the problem and their approach to solving it. They have laid out a step by step plan and mentioned what classes they will add, what variable will be defined where. They have mentioned a test plan as well."
1,"The design doc is complete. The team have clearly defined the project purpose, their approach to solving it, both at a high-level and low-level. The testing plan also seems complete for now. I am sure the team will come to know about other edge cases and will add it as the project progresses."
1,"Visual aids could have been a little better. The textual explanation is great. Converting it to some UML diagram, may be a sequence diagram would have been excellent."
1,"Design looks good. Once a new Supplementary Review Questionnaire is created, I hope you will provide a redirection to the primary questionnaire from where you opted to create new Supplementary one."
1,"They did draw a use case diagram, however, they should draw a data flow diagram to show the data flow of that new function."
1,"It looks like their design is pretty good. they should add a new function about subclasses of Questionnaire and they wrote the detailed steps in part ""How we will do this:"", it is clear and correct."
1,"I think their only use case diagram seems a little unnecessary. As the diagram provides not enough information. 
Besides, they may need a UML diagram in their design document. For they change a lot of things in controller."
1,"No, all methods they planned to add seem correct. 
As they plan to add some new functions, the new design may potentially increase the response time of the system.
Beside, I think they should spend more effort on the Design Strategy part. This part seems a little messy."
1,"No important part is missing. But I think their project design part should include more details.
Besides, their UI testing part seems not finishes. They can finish this part latter."
1,"the use case URL is too high-level description, need more details"
1,"the modified files not included;
not show design pattern;
new design may potentially increase the response time of the system (add additional questions)"
1,"can clearly understand that this project's aim is to solve the proble which students can not ask questions unrelated with topics.
they proposed solution is add more ungrade review questions, which is a good idea."
1,"should have a more precise problem statement;
lack dexcription about UI test;
should show the files need to be modified."
1,"almost every part is included, but lack of precise dexcription, all high-level description."
1,"Visual aids - UML diagrams are used properly. However, more diagrams could have been added here.  The current diagram is just one showing high level view."
1,"1. add a variable in the questionnaire class.
2. add another file for a supplemental questionnaire and save them to the database.
3. add a method to get the corresponding supplemental questionnaire and to add questions into the existed questionnaire.
4. we should add another method to show the supplemental questionnaire in the review page.
 
Yes, the above steps mentioned that they are adding methods and variables. The design looks good as of now. - more comments can be made once they implement the changes."
1,"Yes, all the below functionality has been taken care of in the design document. Supplementary Review Questions to the current Review Questions seems fine."
1,The design document is almost complete but more diagrams could have been added here to better explain the stuff.
1,"> Just one use case diagram has been added which is very high-level.
> Please add more diagrams or mockups of screens etc."
1,"> The ""files which are modified"" section is blank. Please add the name of the files which you might be tweaking.
> New design seems to be fine however more description is needed to understand if it would make the code smelly or not.
> Design seems to be straightforward.
> I don't see any claims for the performance improvement.
> I don't see the design needs more effort however definitely add more details."
1,"> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed.
> The explanation is a bit vague and needs to be improved. 
> Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done."
1,"> Yes the design seems complete and includes all the requirements.
> However, the description could be more elaborate."
1,"> The design has problem statements, proposed changes mentioned however a lot of things can be improved.
> More explanation should be added.
> Please add more diagrams for easier understanding.
> Please add classes that you might be tweaking."
0,The existing flow charts are very easy to understand. It would be better if the team can include a UML diagram explaining the whole structure of the files that this project associated with
0,"> The explanation looks very adequate. They have given a pretty elaborate design detail.
> The file changes description could be expanded."
1,The team has not mentioned anything about the testing or the test plan.
1,- The team hasn't included a test plan but it must be included given the fact that the plan includes to modify core components such as user controller
1,"The team gave a high level understanding of what they want to add and in which location. 
But could not get what they want to add in terms of code perspective. Is it the controller/view/model they want to add or just the code tweaking etc. Not able to comment on it as it needs some more clarity."
1,There are no tests for models. The tests for controllers are the ones generated automatically by scaffold probably.
1,"The only edge case mentioned here that I can test is whether or not an admin can delete his/her own account. The answer is no.
Other than that there's no way to test because of the incomplete functions that are mentioned in previous question."
1,"1. Bookmark link shows 'The page doesn't work'.
2. Admin can't approve librarian. The link shows 'The page can't be found'.
3. After admin create librarian, the credentials still can't be used to log in.
4. Added a book as admin and signed in again as student. The book is not in 'View all books'
 
Others: GoogleOath2 doesn't work. Students are not supposed to need admin's approval. All librarian related functions can't be tested since there's no available ways for me to log in as one. Can't test checking out regular book either because a book can't be added."
1,"No. For the bookmarks model, it has 'belongs_to' relationships with student and book, but there are no corresponding 'has_many' relationships in book and student. Hold_record, librarian_approval_list and student_checkout_list should 'belongs_to' student and/or book instead of 'has_one'. The links to bookmark a book/approve librarian don't work. I wonder if that has anything to do with it."
0,"Yes. The team kept committing almost everyday throughout the time of this project, including round 2."
0,The code is very readable.
1,"Same user can be signed up with same email and password as graduate and undergraduate
This can create a problem while borrowing books, on maximum number of books borrowed.
on viewing books,
This blooming-headland-78968.herokuapp.com page can’t be found
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/books
 




HTTP ERROR 404




error page is shown
Librarian approval isn't working:
This blooming-headland-78968.herokuapp.com page can’t be found
 
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/admins/librarian/approvals"
1,"Able to login to admin page, with
Library Management System
         


Home(current)
   
Sign out
              eab@v.com


 
Welcome Admin
*
can also login as student or librarian without logging in, by just modifying the url
*while trying to edit admin profile,
This blooming-headland-78968.herokuapp.com page can’t be found
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/admins/14
 




HTTP ERROR 404




the error message is shown"
0,the changes were committed and documented properly. The readme file was updated a couple of times that has reflected most recent changes
0,"Yes, and using Rspec"
1,"(1) It brokes if I click checked out books as a student.
(2) the hold request is still pending.
(3)No it can't.
(4) it brokes.
(5)If a student already has a book request, the same book request will be denied."
1,"I still can not  upload book image. Or maybe it just can not show up?
After I approve a librarian, I can not login as a librarian or using existed librarian account."
0,They did.
0,Good Profile Management.
1,"It is possible to register two librarians with same email id. When the admin approves their request, no measures taken to remove the second request."
1,"One good thing is they are doing the admin's approval for both students and librarians. But the basic functionalities such as view books is not working for normal student user. Also the list of librarian approval list is not showing up. There is the code for controller but there seems a problem with the routing or the helper paths. Please verify.  Also the github repo and deployed repo seems different. So at the time of writing this review folowing flaws were observed.
Also, in first round, one UI suggestion was given. Sign out button is shown if no one is logged in."
0,Yes. The schema shows that the relationships are managed correctly as well as the functionality are working fine.
1,"As an Admin, I failed to view all books, librarians and some other features. When signing up, the password is shown explicitly and without confirmation. Totally, many functionalities have some faults. If more time and patience are devoted, there will be a great improvement..."
1,"Indeed, it is said that a user can log in using GoogleOauth2, however, I think there is some error when I try this way."
1,"1. Admin cannot view all books.
2. Admin cannot view all librarians..
3.Librarian cannot view and edit the library he belongs to.
4. Librarian can add books to libraries he does not belongs to.
5. Librarian can edit book info. which doer not belongs to his library.
6. Admin cannot approve librarian requests.
 7. Students cannot borrow and bookmark books."
0,this system handle the 1-to-n and n-to-n relationships properly
0,"yes, they keep on submitting their changes"
1,Though there are Rspec tests for a controller and a model.These are not thoroughly tested in the controller.Not all the methods are tested.
1,"As the view pages are not working,the changes are difficult to capture.For example,the view books,View Hold pages,View student Checkout list are throwing a 404 error already.So,can't check for the changes after a student is deleted."
1,"The view pages,For example the View Books,View student Checkout List is throwing errors when tried opening when logged in as an Admin.The search functionality is not working properly.Error on the 'Back' link at many instances.Ex:After Adding a librarian"
1,"Signing in with Google has been tried implementing,but the link leads to a 400 error"
1,"1/2: I don't know. The checkout list redirects me to a page not found. 3: The admin can be over-edited but not deleted. The functionality seems to be there in the controllers, but I can't figure out any URLs to make it happen. 4: Can't view books so can't check them out. I'm rating this a 2 since I can't check basically any edge-cases."
1,"I could not test this program properly in the first round due to having a private repo and basically no way to verify anything. The team seems to have no actual validations in place other than the presence of a field, so most functionality is broken or can be circumvented in some way. Theres not even a uniqueness validation. Basically anything that is solved by validation (uniqueness, formatting, etc etc etc) is broken. Student sign up requires admin approval and can literally just be fields of ........... . Additionally, I can go to /books/new and add a new book with all ............. for the fields (except for quantity which has to be a number). The skeleton of the project is there but it seems like any form of verification/validation that ensures proper functionality is missing. After adding a book, the home page is blank with literally zero links to go anywhere else (as a student). The admins password is also stored in plain text, displayed on the page, and can be viewed by users going to /admins/1. It can then be edited."
1,"Librarian also can be created with non-unique email
Book with non-unique ISBN can be created
Multiple students with the same email can be added, this creates a problem while log in. Only the first entry of the studdent can log in."
1,"1) What will happen if the admin tries to delete book that is issued?

Cannot test this because of Student(3) in above text area.

(2) Can Admin account be deleted?

The admin account cannot be deleted

(3) What will happen if an admin tries to delete a student who has multiple pending book requests, will the reservations be deleted? 
 

Cannot test this because of Student(3) in above text area."
1,"The following functionalities have been found incosistant:

Admin

Multiple Students with the same email can be added. ""unique validation"" for email is not set only presence is checked.

Back link on student checkout list is broken
 When I click on view hold request, it throws error: ""No page for url:....""
Admin can see passwords of student and librarian while editing them


Librarian


When a librarian clicks on view checkout history, it throws the error message: ""We are sorry, something went wrong""
Book cannot be deleted.
Edit book link takes on new book page


Student


Can view admins/libraries page and hence inheriting those rights
No books can be viewed from student section but are visible from admins log in. (I dont know why is this error)
Because of (2), cannot test further features like checkout, bookmark, request, etc"
1,"In the models of different entities, I found out belongs_to relationship but no many to one or one to many relationships has been established."
0,"Yes, the team has made a great job with the use of GitHub projects. They have committed regularly to the project. I can see changes after round 1 but before the deadline of round 2."
0,"Yes, the team does a good job in writing clean and readable code. For example, in the books controller, they have different methods for different functionalities like increase_count, decrease-count, add_to_hold, add_to_cart, etc."
0,"yes, they have tested the bookmarks_controller_test and the bookmark_test model."
1,"1,2,4) Checkout could not be performed so these actions could not be tested
3) No the admin account cannot be deleted"
1,"Database is empty
update student not working
librarian update not working
""View Hold requests"" from admin: page could not be found
Libraries are not showing the list of books - option could have been added
Show books page stops working if all the books from a particular library are deleted by deleting the library itself even if new books are added
2 students can have same e-mail id which is not possible
View libraries under student not showing libraries although from admin it can be seen that there are libraries
View books also not working inspite of the fact that a book has been added just prior to that by the admin to the lone library"
0,"Yes, the relationship looks correct"
1,Yes the team had commit changes for round 2 but hasn't contributed all through
1,"There is a link to login through google outh but that isn't working.
 
Yes the code is clean
1) function calls are there2) the namings are appropriate3) code looks good"
1,"The UI can be modified to include only the functionalities that can be implemented by the current user.
The functions in UI are well organised
edit functionality should be implemented such that, the fields are auto-populated. and the user is able to edit the book fields. 
Ideally in controller, the edit page in the view gets called, with the record fetched from the database.
Editing books can be redirected to from the books show view page."
1,"The website works only for admin login, the user who signs up is automatically signed in as admin.
 The validations are provided for all attributes.
The foreign key relation needs to be implemented.
Unique key of attribute can also be added
The book controller the increase and decrease book count are consistent in model and controller."
1,"The corner cases are mostly like against null values.
The users when signs in, they should be able to sign  up as student or librarian.
That way the next time, the user signs in, the type of user is stored in table
The admin should be auto configured.
one should not be able to sign up as admin, this leads to data privacy issues and malicious attacks"
1,"the admin cannot edit his profile.
all the users must be able to edit their profiles,
some functionalities like
-View Student Checkout List-View Librarian Approval List
are failing while the student/ librarian logs in.
These functionalities can be hidden from the home page if it cannot be implemented by for certain users."
0,"There is a commit almost everyday.
Also utilized Github project board to some extent."
1,"The UI looks clean and intuitive.
Sign out button is shown even when the user has not sign in.
Some options which should not accessed by other than admins are visible to normal users. Though they do work for students and profiles, it would be good to not show the features that they cannot perform."
0,Code looks clean with appropriate comments.
0,very clear and detailed. Quite sure what to click on if I  want to take specific actions.
0,"Yes, you can see it from their git commit."
0,The admin model is doing good.
0,"Yes,the team has been pushing the changes throughout the project"
0,"Yes,the team has tested atleast one."
1,"There are sign up,login and signout set up,However can get to the application by clicking on home button,without a login"
1,"No README. Nav bar doesn't work, can't find where to log in, where to sign up, etc. No back buttons on pages to return to previous page."
0,"Yes, the team kept pushing their changes throughout the project period."
1,"There is no distinction yet created between models, so I suggest do that as early as possible. Still many functionalities are yet to be implemented for all models.
More validations need to be performed. For e.g adding a book doesn't check if the ISBN is unique.
End to end flow of many functionalities remaining i.e Checkout , bookmarks, return and hold for students."
1,"The root page of User Interface takes you to a page where all operations can be performed irrespective of it being a librarian, student or admin. In the Sign Up page, it does not specify whether one is signing up as an admin, librarian or student. Every new sign up is redirected to the root page which is logically wrong considering different users and their rights/operations."
0,I can see regular commits and issues created for every stage of the application. It also follows good Ruby practices.
1,very simple UI but should have been a bit more organized. Work has been done throughout.
1,Not a thorough test has been done but the models are working with some glitches. Access is not restricted so anyone can get in with the links
0,The reason of doing code changes in StudentTeams controller is not justified properly in the document.
0,I think it's better to describe the problem first in your Problem Statement part.
0,There are 42 commits. They kept on pushing changes of codes throughout the period.
0,"yes, but majority in last 3 days."
1,"Kindly display proper error messages. use flash notice.
student is able to create a book. kindly check at the back which kind of user is trying to do changes to the database.
Librarian sign up failure it says library must exist. It'd be good idea to have a drop-down option to select a library rather than keeping a text field."
1,"first commit is just a week earlier from project submission , after that commits are in progress"
1,There are just some tests that are automatically generated. It would be better to write some tests about models and controllers to tests validations and actions.
1,"No, nothing in the test files. Nothing is working."
0,UI is intuitive
1,"When student got signed up and logged in page written HI appeared nothing else
when sign up for librarian I was giving library and it didn't sign up saying library doesn't exist.. 
so I went to admin and created librarian and choose from drop down provided still I couldn't sign up the librarian and was not able to see anything regarding that"
1,The backend has not been integrated to the UI completely.
0,The applicaton is deployed on Heroku. The user interface is easy to understand and use.
1,"there is no any content in README file.
I cannot sign up any role including student, librarian or admin. Each of them I need to choose my university to sign up, however, there is no university they made.
Even if I cannot sign up and login, I still could go to index page of three roles by clicking the ""Home"" button from the sign up page which I cannot sign up."
1,"The home page is impresive, but can't really do anything, admin can only create student, but university requiered........No description in README"
1,"Admin can not log in.
Student can not log in.
Librarian can not log in."
0,UI is good !!
1,"UI was good, but focus more on testing."
1,"The admin can't log in. So, I can't test other things that admin should do."
1,I cannot log in or sign up.
0,"Yes, controllers only take data from models and send to views."
0,code is nicely structured
1,"the credentials provided on GitHub didn't work. Anyways, I signed up as an admin and have reviewed accordingly. But we are supposed to have only one admin with fixed credentials."
1,"I cannot login into admin using ID password given in read me file
admin@system.edu
password - password 
 
i created new profile then i was able too.. I am not sure are we supposed to sign up for admin. i think it should be preconfigured at once.
cannot see dit button in admin profile to edit it 
 
 
Coding looks good, but team have created unnecessary controllers and not able to manage them. logic in controller looks fine,"
0,Very accordance to the standards of semantics and formats.
0,They didn't test any models.
0,Tested only if the page appears or not.
0,Rspec tests were found for books model and borrowing history controller.
1,application is not tested properly. Lots of links are failing and application is going to inconsistent state.
1,"team has tested all the modules. but all the modules have one or the other small bugs needed to be foxed, so i don't think they have tested any of the modules thoroughly."
1,It is hard to find which model they thoroughly tested.
1,"1) book issue doesn't work
2) same as 1
3) no
4) same as 1(doesn't work)"
0,Edge cases are aptly taken cases of.
0,Could not find any edge case violation.
0,edge cases are tested properly
1,many of the basic functionality is missing to test edge case
1,"Some of the edge cases i was able to test like deleting admin - cannot do it, README.md file does not contain that much of information about edge cases or project. Students cannot access librarian data or admin data. Rest of the edge cases i was not able to test. If admin tries to delete student with book issued, it is crashing the application. Some of the exception cases has been handled."
1,"(1) The admin can successfully delete. The book was removed, along with the checkout records related to the book.
(2) Actually, admin cannot delete any students from system, because clicking the destroy button only leads to system's crash, and the list of students remains.
(3) No.
(4) Again, no students can be deleted due to malfunction.
(5) I want to see what will happen to the books and librarians and related checkout histories, when a library is deleted.
To my surprise, nothing happens to books. But all librarians along with all checkout and request records are gone as expected."
0,"The admin can log in now, and the admin can deal with multiple tasks that are related about books and libraries."
1,"1) Student's request book button doesnt work.
2) No association between books and library means that even though you delete library book persists!
3) Student cannot view all books.
4) NO checkout, no return, no overdues for students
5) while editing a student from admin, Admin must know the password of user!!
6) student cannot view his library if you delete and re-assign the library to student again.
7) Approval request of librarian doesn't work
8) Librarian cannot add books.
9) Checked out page for librarian doesnt work
10) Borrowing history page for librarian doesn't work
11) Manage hold request page doesn't work for librarian
12) Manage Overdue doesn't work for librarian.
13) Librarian has the power to move his library to another university!!"
1,"1. Admin functionalities working properly except few.
2. 
1. admin is not able to create librarian. application getting into inconsistent state on hitting approve librarian.
2. I am able to create librarian without name which is not expected.
3. After creation of new student by admin student session  should not start. After creating student I am redirected to student page where as I should be redirected to admin page and session should be preserved.
4. why admin is allowed to create new borrowing history ?
5. why admin is allowed to create new hold request ?
6. In Student Navigation home and back links not working properly"
1,"cannot return an issued book.
Cannot approve a librarian or special book hold request."
1,"yes, system is working as expected, librarian is getting approved by admin, admin is able to perform operations of librarians and student. Book history is not there in admin role. In Student i tried to search book with its title but i was not able find and hence was not able to check it out, return or bookmark it. Some of the things were fixed after review 1."
1,"Solved problems which originally showed up in first round:
1. Admin can now create student and librarian accounts.
2. Admin can now add new books.
3. Librarian can successfully sign up now, but there are some issues on the appove action of requests for librarians, which will be mentioned below.
4. Librarian can now add books and remove books. But the bug is that he/she can add books to other libraries.
5. Librarian can only edit and remove books of his/her own library now.
6. Admin can view the list of checked out books and librarian can view the list of checked out books, overdue students and hold requests now.
7. Books can be created and the cover photo can e uploaded now.
8. All validations are in place now including the uniqueness of ISBN.
9. Students can successfully check out, return, request for and cancel requests for books now. And they are not eligible to check out special collections now.
10. Bookmark features are in place now.
 
Unsolved problems:
1. Maybe a user can edit his/her profile now, but the thing is that the ""edit profile"" button is not clickable because of the failure of the dropdown list mentioned in additional comments.
2. Admin cannot view the lists of overdue students.
3. Firstly, no matter a user tries to sign up as a librarian on his/her own, or a librarian account is created by admin, this new account should be approved by admin. However, when I click on the approve button, the system crashes.
The thing is that, even though the system' crash, the request for signing up as a librarian is indeed approved. So weird!
4. Librarian has the ability to add book to other libraries, which he/she wouldn't be allowed to.
5. Librarian cannot view books of other libraries, which he/she would be allowed to.
6. There is no maximum checkout limit now.
7. Upon a book is returned, what happens to the next student in waitlist is that, his/her request for this book has been removed, but the book still remains available, rather than checked out by this student.
8. Because of the environment of this app is still development, I cannot use my facebook account to log in, although given that there is a social sign in button.
9. The main problem of books is that, no matter what library I chose when I created the book, it will always automatically be associated to Hunt Library, even when I delete this library. This may be because there is no relationship between Library and Book."
0,They handle associations very well. The associations between different models are detailed.
0,Mappings table exist for all kinds of relationships.
0,"Yes, the relationships are being handled properly. Books are being associated with their respective libraries and the same regarding students and universities."
0,"Yes team has maintained necessary relations in models. 1 to n relation for library and book , university and libraries is maintained. Librarian and library and all relations are maintained in models."
0,"Yes, team has been committing their changes throughout the project"
0,Did better in round 2
0,Yes i team has made changes throughout the project
0,"Yes, changes are visible in round 2 and are consistent as well."
0,"Yes, the team continued to commit changes post Round 1."
0,yes they did!
0,They kept on submitting their changes throughout the project. And they still commit a lot changes in the round 2.
0,"The main problem in first round was that, the backend and frontend were not connected well. This time they made many commits throughout the period including fixing this issue and many other modifications."
0,Could not find any issues with the code submitted. The code is quite modular in nature.
1,I'm able to edit the URL to visit non-accessible pages.
0,Nicely implement important methods inside the model and not inside controllers.
1,"Code written looks good to me. There is lot of commented or dead code which can be removed, team may have saved it for future use i guess. for some of the things we dont have to create separate controllers which may make code less DRY. Logic seems pretty straight forward to me. Naming conventions are used in good manner, although we can improve in some of the cases. MVC structure is been followed."
0,The test plan is very clearly laid out and contains sufficient test cases.
0,Yes. I like the fact that the controllers to be changed are parts of the diagram.
0,"Yes, the team was using the UI testing to checking the functionality, another recommendation would be doing some automatic testing to make sure it will work correctly in future updates"
0,"Yes, the wiki properly listed the design patterns"
0,"Yes, the proposed implementation is very clear and possible files are listed and implementing methods are indicated"
0,"Very well out lined test plan! This is what I wanted to see, detailed steps (actions) to be taken by each role. Having this listed in words helps implementation in great deal based on my experience, I am glad this team did this."
0,The design looks agile... a little question is that is revoking public access by student a part of the project? If it's a check box they it could be unchecked in the future right?
1,"Yes, they've included a future testing plan which includes manual testing. However, they haven't proposed any RSpec automated testing plans"
0,Great utilisation of the use-case diagram to demonstrate the functionalities of the system.
0,"Yes, the design is simple and easy to follow. I particularly like the fact that they have mentioned the design pattern they're going to follow - Delegation pattern"
0,"Yes, the design appears to be sound to me. They have done a good job with implementation details. I just think renaming it to ""Implementation Plan"" would be more appropriate."
0,"Yes. Other than the test plan, I think everything else is quite elaborate."
0,"Yes. It's neat, elaborative."
0,Neat and understandable visualization.
0,"Yes, they are following the principals and it is sound."
0,- A well laid out test plan is provided. They have provided proper steps for each type of user.
1,"- They have mentioned the design pattern i.e. Delegation design pattern but I do not see any proper reasoning for using this particular design pattern. An explanation of why this pattern would be useful here. Writing ""code reuse by inheritance"" is a very generic statement."
1,- They did mention that they will refactor the code as the code is already implemented. They do not provide details related to the changes they will be making and have just explained what is already done.
1,They have put in a test plan. They have not given details about rspec tests but the UI Tests are sufficiently detailed.
0,They have followed appropriate design principles. They have made use of good design and explained it in sufficient details.
0,"Along with tables, the team has also added a user model flowchart to the design document. This really helps others understand what their project does."
0,"The design has been well thought out and they address each scenario to develop. They have also specified the design pattern using - Delegate pattern, which I think is the correct choice for this project."
0,"The changes have been adequately explained. The wiki documentation page will undoubtedly be updated as the project progresses. For now, this much seems enough."
0,Good amount of details of testing have been provided. Most of it is going to be manual testing from various perspective. They have not mentioned abut writtng any new test cases.
0,"No design is not that complex, they are going to add checkbox on the screen and rest of the manipulations will be doing on basis of that. not much is going on which can make it complex."
0,"Yes they have given good amount of information about the changes they are going to do, just a better and more formal visualisation would be good."
0,They have provided the UML diagrams to describe their plan of work. Which is quite easy to understand.
1,"Yes, the design doesn't appear to be complex as understood from the UML diagram. Could have provided a clearer written explanation."
1,They have mentioned the use of delegation design pattern in their project. It would also be more understandable if they said where exactly are they employing it in their work.
1,They didn't include a test plan.
0,The visualization is helpful.
0,Yes it was well written.
0,The design is simple to implement and understand
1,"The team explained the changes made in the previous implementation of this project, they do not explain in detail the changes that they will be making on top."
1,More visual aids can be added in the writeup to better explain the flow of the project.
0,"The write up explains the design of the students could read through some sample reviews, in a very clear format. It's simple and elegant."
0,The writeup clearly explains what has been proposed as part of the design changes. It's to the point.
1,Test Plan is too verbose. Trivial areas can be trimmed off.
0,The visualization used was good enough to give a decent overview of the where is the problem focussed on.
0,"Yeah, the design appears to be simple although testing is lengthy. It could be cut short to what was required rather than explaining all the steps. Problem Statement is clear and concise."
1,A delegation pattern is said to be used in this design. But no explanation was given as to why is it a good fit.
1,"The code design is clear and DRY, one thing that missing explanation is that how the team gonna making changes to the db"
0,The explanation of the proposed approach to the project is very clear and easy to understand
0,"Yes, the design corresponds to the project requirements"
0,"Looks complete, they even mentioned that the project needs to care about removing the consent to share as well."
0,The use-case diagram explains their approach effectively
0,"1) No, I don't think there are any issues with the location of the proposed changes
2) Too early for me to say as it depends on how the team goes about whatever they've proposed
3) No, its not complicated
4) No, the response time should be the same
5) The document is good enough"
0,"Yes, the document addresses all the functionalities listed in the design document"
1,The proposed testing plan should've included RSPec and SimpleCov too
0,UMLs are present. They are clear and elaborate.
0,"1. The author is on the right way.
2. Don't think so.
3. No.
4. Maybe because of the database interaction."
0,I believe the proposed solution should satisfy the requirements.
0,Covers most component of a proper document.
1,"- Use case diagrams are a good addition. They are easy to understand and make it easy for the reviewer/reader to understand.
- If they are really sure about the delegation design pattern I would love to see some explanations in the form of a UML diagram to support their approach."
1,"- Reading the doc it looks like all they have to do is code refactoring. If that is the case then they should have mentioned the problem areas in the previous code and their solution to it.
- They mentioned that they are going to use the delegation design pattern but I do not see anything which justifies the use of this specific design pattern."
0,- Very well written wiki. They have written it well to make a reviewer understands what they are trying to achieve.
1,- The doc is very detailed except for the part they are supposed to do. They covered the part which is already done but didn't talk a lot about the change which they are going to do.
0,"The diagrams are neat, easy to understand and portray the essence of the project. So no complaints there."
0,"Various changes are done to the bookmarks functionality and the team has also written sufficient test cases to test these changes. Apart from this, various typos in comments were fixed."
0,The write is very well-written. The screencast links and snippets helped a lot to understand the project. The steps mentioned in the testing plan were easy to follow.
0,"I was only allowed to add a valid bookmark. All validations worked fine. It would be good to show the user what validations are required for each field.
Average was also being calculated properly."
0,The build has been passed. There are no conflicts with the base branch.
0,11 commits were performed during the 2nd round. Almost every day someone worked on the project which is great.
0,the code is ready to be deployed onto the production server. there are no concerns corresponding to the project.
0,the writeup is pretty good. the work done is explained very clearly along with the screenshots and in which methods changes were made.
0,the projects work as intended. all the bugs were fixed and validations have been made. everything is clearly mentioned.
0,"yes, the build passed in Travis CI."
0,"yes, 11 commits were made during the 2nd round."
0,the code is well commented. almost all the methods were commented which explains the functionality of the method. The DRY principle is followed. all method names make sense which explains the functionality of the method.
0,"Yes, made one commit"
0,"Yes, the authors were missing test cases before the first round but now there are lots of tests. `"
1,I suggest adding comments to the testing code. It's difficult to tell why some code is needed.
0,The code is in a good shape and can be merged with the beta branch of production.
1,Lot's of code added with very little explanation of what the snippets are supposed to do. This should be addressed as this makes the wiki unreadable.
0,The requirements are met. They have incorporated my comments from the 1st review.
0,Build is passing and there are no conflicts.
0,New code was added constantly.
0,The code is well written and follows Ruby style guide. The code is DRY
1,"1) Add some negative test 
2) add tests where new bookmarks are added and it get reflected in other pages"
0,"1) writeup is clear and concise.
2) More screenshots in writeup can be added to show what was before and what is now which is fixed in this work"
0,"They added TDD approach to add bookmark test
From UI it works as intended"
0,Yes this expertiza project build passes the Travis CI.
0,"Yes, new commits are added. where refactoring and work on comments are done"
1,"1) Code follows Ruby and Dry principle 
2) add comments in test written (as why to include this test and all)"
0,Bookmark might be think as a great code the depolyed onto the server.
0,The writeup is updated and It's really better than I have seen in the first around. Which has a lot of improvement.
0,Almost include all the scenarios i can think about.
1,"In Nov 6th I saw they add test cases commit in the github website, but in the commit they have some test cases which are failed."
0,No confilt and all checks has passed.
0,"there  are some commits during the 2nd round, and the code has changed only a little bit."
1,"little lack of the comments in the code, but during the testing part is okay."
0,"No, I think it is a good starting place for a future team to pick up, but I do not think it is ready to be deployed. There's still some problems which I mentioned above need to be fixed."
1,"Yes, they did add some new test cases, however, the coverage is decreased.
In the test plan, this team showed the code about running the test, but they do not add any code of Rspec. Also, about the test video, it showed that I need a permit to log in that google drive to check, so I actually cannot see the video.
I think they did not do the enough test."
0,"Yes, the build pass in Travis CI."
1,"Most parts are well done!
But still, they need to add more detailed explanation of code on the wiki page, and there's no code of Rspec part."
0,"Based on the explanation of the current problems and what they wish to improve upon, the proposed changes seem logical and are coherently described."
0,"The document is well-drafted and has all the appropriate sections including File Changes, UML Diagram, DB Changes and Future Test plans."
0,The doc seems to be complete. They can update the doc with their test results during the later stages of the project.
1,UML diagram should be more descriptive and provide program flow as well. UML diagram does not follow conventions.
1,"Design seems to be almost completed, I just  have one doubt how a student will make a review private if the review was submitted earlier as public. This part is not clearly stated in design."
0,"Explanation is clear and easy to follow, author has mentioned what changes are required and where it should be implemented."
0,Yes design incorporate what is required to be implemented in this project.
1,Most of the things are covered in the document only a bit more effort in UML and scenario where a student submitted a public review and want to make it private should also be added with details.
1,"Create a view where the student can see a list of sample reviews of the assignment and have a detailed view of each.
this functionality of user can be added to UML"
1,"In our approach, we will modify the code to work on the reports that already existing in the assignments.
modify could be elaborated"
1,"the 
Future Testing Plan
needn't explain the whole flow of the testing proposed
Rather can include only those steps that are relevant to the project 
For eg:
 

Log in
Click on Manage->Assignments
Displays a list of Assignment

is redundant, 
It can be reduced to 

Click on Manage->Assignments"
0,design is complete
1,"Though the authors talk about the designs,they donot specify as to which methods they plan to add,in what class etc.So, that can be explained better."
1,"The author has tried explaining the changes that he proposes with diagrams and flowcharts.But,it could have been a little more briefly explained"
0,"Yes,the design includes the functionalities required as part of 'to be done'."
1,"Though the design document talks about what the project is about and what are all the functionalities are to be included,the methods to realise these functionalities are not talked about"
0,The visual aids are helpful in understanding the functionality required.
0,Yes. It explains in details the functionality required.
0,Nicely done.
1,"They design is already aiming towards fixing old code, so it would be expected to improve the code smells. But again, I don't have the details in the document regarding those changes so can't comment appropriately(-1)"
1,The actual change that they proposed has not been mentioned in the document much.
1,"The approach they are using is changing/refactoring the preexisting solution, So the design document should have also talked more about the problems in the solution code in detail and the changes they plan to implement. The code is probably already implemented in delegation pattern which they plan to refactor, so essentially they are not implementing any pattern as such."
1,"Missing parts mentioned earlier, existing document is very good and descriptive, but incomplete."
0,"Visual aids are very well created and they look great. However, more diagrams could be added here to explain in a better way. ""File:UseCase.png"" is created in a nice way."
0,"As per the design, everything seems good and the changes are placed at right places. The steps are clearly explained."
1,"The design incorporates the functionality - ""If the students could read through some sample reviews, they would gain a better understanding of how to write reviews. This project aims to do just that"". This functionality is very well designed on wiki."
1,"The design document is almost complete, just adding a few more diagrams could have been better. The steps are clearly mentioned."
0,The only diagram given was informative.
1,A few of the points mentioned in the Project Description were not given in the Wiki Page such as also showing ratings along with reviews.
0,Test Plan was well written and adequate.
0,"Last commit was done on 9 October, no changes in round 2."
0,The system handles 1-n relationships as well as n-n relationships correctly. There is no problem related to any of these relationships.
0,"In general, the team kept on submitting their changes throughout the project and made a lot of commits which is a very good practice.
In round 2, the team constantly committed changes as well (16 commits)."
0,I went thoroughly through the library model and controller and can say that it is tested correctly.
1,"- I tried deleting the user having multiple hold request. The user got deleted however, the hold request is still reflected in the database and serves no purpose to the admin once the owner of the request is deleted. Hence the user should also have been deleted.
- Also, the admin in the system, is able to delete the books issued by students which practically should not be possible until the user returns the book back. Till then, the admin should  not be able to do the deletion process."
1,"- The admin, while changing the status of a librarian, from unverified to verified is made to type the password of the librarian. However, as per the requirements, the admin is not expected to know the password of the users but just the basic editable details like name, university, library etc. In other words, there is no need to re-enter password of the librarian for just updating some fields.
- Also I don't think there is a double authentication required just for editing the user profile. If a user has signed in, he is the correct user in the first place. Or for that matter, even if an impersonator would have signed in with the correct user details, authenticating again would  not prevent him/her to change the user credentials. Hence, I feel that putting in the password again for changing credentials would not serve any purpose."
0,-The team did push the changes on git as and when required but I couldn't see much changes pushed after the first review mainly because most of the functionalities were working even during the previous review.
0,No such issue found when skimming through the code on Git
0,Seems to just be the generated testing.
0,"The team has tested at least, one model and one controller."
1,"1) The book is still deleted if it is issued by some student.
2) If a student is deleted still the count of book is not increased so other students cannot get the book.
3) Admin account cannot be deleted.
4) If an admin tries to delete a student with a pending book, the student is deleted and the book count is not increased."
0,"Yes, the team did submit their changes throughout the project"
1,"(1) When a book is deleted, the hold request on it is not deleted. 
A student creates a hold request for a book, and then Admin deletes that book.
However the hold request for that book doesn't disappear, which means the hold request isn't deleted.
(2) When a user is deleted, the borrowing relationship is not deleted.
A student borrows a book, and then Admin deletes that student.
However Admin can still see the borrowing relationship in the checkout list page.
(3) Because their models doesn't have dependent :destroy validations, so destroy operations will cause a bug or even make the system crash.
So almost all tests for edge cases that destroy one of a relationship pair will not pass."
1,"(1)The attribute Published for book doesn't mean the publish date but the Press which published this book.
You can see this on the library website of our school (library.ncsu.edu)
(2)We cannot see the image of a book.
Only creating a book with an image, we can see this image. For existing books, we cannot see their images.
(3) Admin cannot borrow a book.
 (4) Admin cannot bookmark a book.
Admin can do anything student/librarian can do as written in the documentation.
My suggestion is that we can create two entries for admin to borrow books or bookmark books. As you use User model, it's much easier to add these abilities to Admin role.
(5) Admin cannot approve a unverified librarian.
When we sign up a new Librarian, this account is unverified.
Then we login as Admin and edit this new account(librarian), we want to change its status from unverified to verified.
However when we click update, error notice comes up saying that ""password can't be blank"". This is because the password is lost when we edit an account.
The point is that Admin doesn't know the new librarian's password, so Admin cannot update(approve) this librarian.
My suggestion is that you can make an entry for approving librarians other than editing a librarian status attribute.
Then Admin can click a Botton for approving librarian, and the codes will help us to modified the librarian's status from unverified to verified.
 
 (6) No notice for making a hold request
The document require us to inform a student whether this book is unavailable or this student is at max borrowing limit when he/she wants to create a hold request.
As written that ""Inform the student that the book is unavailable or max limit reached.""
However your system only tell the student that ""You can not order this book. Please raise a hold request by clicking""
Student doesn't know what's going on.
My suggestion is that you could add more if closures in borrow method to react to different situations, and then render different notices.
 (7) Admin cannot approve a hold request for special book.
Admin can do anything as librarian can.
(8)Student cannot see their profile.
When we click  ""view profile"", we directly go into the edit page.
 (9) student cannot borrow a same book twice.
A student has the ability to borrow a same book twice if this book is available and this student doesn't reach his/her max borrowing limit.
(10) Not properly creation of hold request.
In the document, student create a hold request only if he/she cannot borrow this book.
However when we login as a student, we can create a hold request for the book that we can borrow..
The point is that if we can borrow this book, why do we need to create a hold request for it?
 (11) student cannot borrow a book after returning two books.
Create a new student, email: test@ncsu.edu name:test, education level: bachelor, then login.
We can borrow at most two books. After borrowing two books, we return them all.
However, when we want to borrow other available books, the system says ""Sorry we cann't process this order now""
The question is that now this student have no checkout books(he/she returned them all) and he/she wants to borrow another book but gets denied.
My opinion is that may there's some bug in returning module, when a student returns a book, he/she will have a ability to borrow more books."
0,"Yes, they keep on committing."
0,"The code is beautiful and easy to understand.
I have read almost all model and controller codes, and find it's enjoyable."
0,"Test cases are executed thoroughly.
Student cannot register using same email -id. No two books can be given same ISBN number."
1,"System works smoothly. Authors fixed broken links.
Still there is one problem, while updating verified for librarian, the page says you must enter the password. (Password field cannot be blank.) And Admin is forced to change the password of librarian (Even though this changed password doesn't update the password from Devise Authentication, Admin remains in false idea that he have changed the password.)"
0,"A book cannot present in two libraries at any given instance, satisfying 1-n constraint for book and library.
While a student can order a book from different libraries, satisfying n-n relation."
0,"The team committed changes distributed throughout the project.
In round two, they rectified their errors and committed those changes on the Github."
1,"The following features are still buggy:
1. Admin isn't able to update his profile as model error says current password cannot be blank but there is no password field in the form.
2. Admin is allowed to return books issued by other students which should not be allowed
3. Admin is allowed to delete hold requests of other students which should not be allowed
4. To approve a librarian, admin needs the librarian's password as the approve functionality is built inside edit librarian page.
5. Admin isn't able to edit student profile as, again, admin needs student's password to make any change
6. Book model has incorrect validations due to which if you enter text in published date , the error reads Published Date cannot be blank
7. Admin isn't allowed to checkout books but he should be allowed as he can do whatever a student can do
8. When there were no books in the system, trying to add books gives error for some ISBNs (not of length 13)
9. No email received for book checkout
10. Book count doesn't decrease when book is checkedout
11. Unable to checkout a book once returned by same user
12. Unable to create librarian using admin account (some pluralize error)
13. Unable to test a lot of features as cannot use librarian account (cannot create from admin account and cannot approve librarian account once from admin account)"
0,Yes the student model and controller is thoroughly tested. Almost all the functionalities of the student are working
0,"yes, the system handles the 1-to-n and n-n relationships properly. The library-book relation is 1-n, The university-library relation is 1-n, The university-student relation is 1-n, The library-librarian relation is 1-n"
0,"Yes, they kept on submitting changes throughout the project. Also yes, this team did commit changes in round 2. Mainly, the project of this group was done before round one, but, they added additional functionalities and fixed a few errors that were there in the first round."
0,"The code quality is reasonably good. One method only handles one task, There is no bad naming."
1,"All contributors have committed frequently throughout the duration of development of the project.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit.
Instead of using one or two words, use a couple more words describing the exact change made."
1,"The university model and controller have been tested thoroughly.
Suggestions:
Consider adding more thorough testing to the university model."
1,"The UI is easy to use and navigate through. The README is also informative with all functionalities mentioned for each user type.
Suggestions:
1. Add screenshots to make the README more intuitive about navigating through the app."
0,Good ruby & rails coding practices have been followed.
0,The back button worked
1,The changes made to git have been thoroughly pushed on git however I would recommend that the commit names be specific and not general. For instance replace 'bug fixx' with something that was actually fixed. This would not only help to keep track but also make it easier to refer the log files.
1,Usage of Bookmark.create! Using banged create should be thought of again as banged methods are dangerous.
0,No new method added. Only basic modifications are done. The changes are self-explanatory.
0,The model 'book' has been checked and tested thoroughly with all possible test cases.
1,"No, some edge cases have not been handled. Admin is able to delete books which are checked out, delete libraries that has books checkedout. 
Admin account cannot be deleted, expected."
1,The write-up is not clear.
1,"-The User Interface has made sure that the elements are placed correctly on the web page however I would suggest to make use of some better color templates to make it look much more professional as well as enhance the user experience (something like blue and white or black and whilte)
- You can also display the name of the user in the top right of the navigation bar when logged in.
- ""Hello user_name"" is unnecessarily big in size and is occupying more pixels even when not needed.
-Also the login and signup could be improved by scaling it down since both username and password would not exceed 20 characters in most cases."
1,"-The code looks like it follows some ""good ruby on rails"" practices however, I would also recommend that you add some useful comments in your code which would not only make the code much more intuitive for the new user but also make it faster for you to add new features as and when required.
- Since some functionalities are common among users, using helper method would be an efficient way of reusing stuff rather than rewriting those lines of code."
1,No mention of the design pattern used (not sure if it's applicable). The write is not well written it took a while to understand the problem and statement.
1,The wirte-up is not well structured. It explained the problem. But the approach is not mentioned.
0,Beautiful UI that is extremely easy to navigate.
1,while the static code changes seem to be appropriate. the Travis build fails. please look into it
0,Seems to.
0,The interface is easy to use.
0,The code does follow good RoR coding practice.
1,comments are not provided for the changes made in the code and for some methods.
0,The interface is awesome! well done.
1,When adding a book the fine tab sends an error that fine cannot be empty though I entered it which doesn't let me add a book.
1,there are no comments provided for some methods. please comment your code
0,The UI uses many JS codes and looks soooo beautiful
1,the build didn't pass. the team needs to look into Travis CI log
0,"Wonderful ruby code, easily to read and understand, and learned a lot from your code!! Thanks"
0,the documentation is good enough to understand what the project does. functionalities are clearly mentioned and the feature is quite understandable.
0,The team has 95 commits
0,"It looks like at least one model and controller have tests, though I'm not familiar enough with rails to know how much is generated."
0,Not clear from the writeup
1,Just having the icons next to the book names does not give me a good idea of what they do.
0,"According to the code breakdown, only 4% of the project is written in Ruby. Everything else seems to follow good coding practices. The code follows MVC and a RESTful interface."
1,I tried making bookmarks and used the url of the current page but it wasn't accepted. Maybe the ip address made it fail. I noticed bookmarks with same name can be created. When I changed my score of a bookmark to 0 the average shows '-' instead of '0'. It doesn't do this for numbers 1-5.
0,1. Everyone seems to have participated equally in the project contribution and committed the code after every change maintaining the integritiy.
1,There wasn't a test plan and I didn't notice any new tests added.
0,1. The application seems to be bug free.
1,I noticed in the average_based_on_rubric method there is a magic number 5.
1,"1. The user interface is very beautifuly designed. Tab navigation is very handy and easy to use.
2. Icons are used in place of the show, edit, delete. Which makes GUI very interactive.
3. Each functionality is properly divided on each page.
 
1. The logout button should be placed distinctively
2. You can't see who is logged in, while using the application"
0,"1. Followed the good Ruby practices, such as use of ! while calling a method, used blocks for loops etc.
2. Models are used efficiently to validate data and to set up some default values such as max books allowed, overdue fine etc.
3. Models are also used to increment or decrement available number of books."
1,"Not able to create new libraries. Shows a validation error, even though the values have been entered. Shows that the fines should be numeric when it is numeric. Not able to see newly created student and librarian accounts as well."
1,Yes commits have been made but the commit messages aren't informative.
0,"Yes, the model for books has been well tested and works well."
0,It's a good looking UI which is intuitive and looks clean.
1,The commit messages of commits aren't explanatory.
1,The write up clearly explains what they did but how they did it is difficult to tell from the write up. The instructions on how to log in and navigate to the correct page helped.
1,The test plan could also cover how will they ensure that they have written all test cases for their code.
0,Their approach seems to be pretty simple and clear.
1,"The organization of current implementation, problem statement and improvement seems good. The goal of conveying what the problem is, what the approach would be and what the desired outcome should be is clearly conveyed. The methods to be added should be named better. More details on the anticipated code changes could be included."
1,Expected results and current implementation has been the focus of the team and these sections have been written well. However the actual implementation plan and testing plan needs to be mentioned better.
0,"Yes, well explained."
1,"The author's proposal of changes is well described and depicted through UML flowcharts and UI mockups. The problem statement is described in a simple manner and its easy to follow. Not sure how the ""toggleable column"" to show the ratings and average rating would work on the UI, I think this is not shown in the mockup."
1,The test plan could have been more descriptive and more test cases could have been included.
1,"It appears so. Most of the problems to be solved that are described in the problem statement have corresponding solutions in the proposed approach. However, The test plan could have been more descriptive and more test cases could have been included."
1,"The design appears to be sound. Design description could probably have included more data about the design patterns and the flow controller in the controller because functions themselves are not descriptive.
-The design doc is pretty well explained. The project purpose is listed in an easy to understand way, and changes proposed for views and controllers look comprehensive.
-The spec test cases could have been defined in more depth. 
- Not sure how summary of reviews is fetched, apparently it already exists. Could have dwelled upon this a little more to give a glimpse of the design."
1,"The authors have adequately explained the changes that would be made to the system. However, the test plan should have been more descriptive covering all the steps to cover edge cases."
1,"Their current test plan looks very shallow. They only test on the links to the functionality related to get whether a reviewer added a file/link or not. There are much more to test, including possible edge cases."
1,"Specfic files are still left to do. But they have listed what to improve to the view pages, but only including part of in their diagram."
1,"Yes,  their design did have the test plan, however, it is too simple to implement.
They should mention more detailed test cases in the design doc."
1,It is simple and easy to read. But it looks like the doc is too simple to explain their whole design of this project. It would be better if there are more detailed solutions.
1,"Yes, changes are explained adequately, however, I think it is too simple, they should mention more detailed solutions and test plans."
1,"the design does include a test plan. but automated testing and coverage of testing could've been explained with more details. ""The coverage of Coveralls bot will be filled after our finish all our work"", didn't exactly understand what this statement means in coverage."
0,the UML flow chart diagram and screenshots describe all the changes to be made to the system.
1,"the design document appears to be decent following all the principles and appropriate patterns. but has few necessary sections like ""code changes"" which don't provide any information."
1,"The design doc included the test plan.
This team localized specific files to do the test plan and they will really test the functionalities."
1,"Yes, there's a good test plan. They showed what they will do in their test in detail.
issue#1384

Login as an instructor
Edit the course settings of other stuff
Recording a video to show how the homepage change"
1,The diagram is meaningful. add some explanation may be good
1,The test plan section is really impressive. They have complete test section including all cases with really details explanation.
1,"Yes, they have test plan.
More info of your each test plan is needed. The test plan is too short for each case. And bound case if you have any."
1,Plans for UI testing have been mentioned for most issues. I would suggest to think more about edge cases for each issue and add some Rspec tests.
1,"Yes, a detailed test plan is included. Although the issues were fixed last year, they lack tests and hence the team has appropriately included a list of tests to be carried out."
1,Diagram of UML is good. But I want to see a user diagram which demonstrate your functions and relations in the flow.
0,The design is straightforward to be understood. I can totally understand what they have written in the writeup. Good job.
1,"Yes, the design includes a test plan for each issue and these tests really test the functionalities pretty well."
1,"Yes, the design does include a Test Plan however, it does not provide any details of the test plans. Please add all the test cases and a little description. The test plan section can be significantly improved."
1,"As I had stated in the last review, I still feel the visual aids used are quite high-level which does not provide any low level details of the functionalities. For instance what do you mean by ""Visualize the result""? Please add more details to the diagram."
1,Test plan looks okay. They have given steps for manual testing only and have not mentioned about any new test cases that they will be adding
1,"The team has identified the controller they need to make changes to. However, what changes and how they will try to accomplish them are not stated. Please provide what changes will you make in which controller."
1,"Test Plan has been improved and now includes automated Rspec testing along with the TravisCI.
However, the Rspec testing is abstract at this point and ""We will add a Rspec test in each controller which tests our new methods, such as have_file_added and have_link_added."" is too vague. They have identified an edge case that assignmentID exists, but I think this is already being verified in the code base."
1,"Yes, they have provided flowcharts for each issue which are pretty self-explanatory. Just that they have wrongly labelled a flowchart as a use case diagram."
1,Ample diagrams and flow charts have been used to convey design the changes done and design strategy respectively.
1,"Screenshots have been added for Round 2, but their size is simply too big and distracting to focus on the content written above and below the same. Please resize the screenshots and include more explanations to convey better.
Also, the diagrams contain too little information to be of much value, same depiction could be achieved using the text. Please include more information in the diagram to make good impact.For example - ""Show"" in #1384 does not have significance on its own, you might want to replace it with ""Show the icon on homepage"" or something similar. Same goes for the diagram for #1430"
1,"Yes, they have clearly listed all files to be modified among the first three issues.
 
Since the last three issues only need supplementary tests, there is nothing to be modified so far."
1,"The authors don't detail any proposition for code changes or testing. It is all pretty abstract at this stage with no mention of controllers or methods to be added. Code-Level specifics including proposed files to be changed and methods to be implemented is required.
Design Pattern to be implemented needs to be decided.
Test Plan has been improved and now includes automated Rspec testing along with the TravisCI."
1,"Team has given visualisation of all of the 3 issues they are going to solve, flow chart are giving enough descriptions but they could have been better."
1,"The code changes are vague at this point, with only a mention of adding methods, but not which controller."
1,"Yes, their document is simple and clear. From their document, I could tell they have completed most part of the project."
1,"1) The design looks reasonable and does follow appropriate principles
2) However, no design pattern was used"
0,The design is simple.
1,"Yes, the project involves fixing minor issues from previous years implementation and the design looks simple."
1,Their design method can be easily understood from the diagrams.
1,"Use cases for #1384 and #1354 could also be included.
The team has mentioned ""what"" they have done to fix an issue, more details on ""how"" they are fixing the issues would be helpful. Example: ""During changing the assignment, first we ask which course an assignment is a part of, and then list only those courses that the instructor or TA has access to. So the TA and the instructor can only deal with the courses they related to, but not the irrelevant courses."" How are you checking whether a TA is part of a course and how are you determining whether he/she has access to the same?"
1,Solution to most of the issues seems pretty clear and good. They have given flow chart to all the issues so they are easier to understand.
1,"It is well designed.
The team gave a high-level overview of the changes that they will be making, also they used appropriate principles and appropriate patterns."
1,It appears so. Most of the problems to be solved that are described in the problem statement  have corresponding solutions in the proposed approach. The test plan could have been more descriptive and more test cases could have been included.
1,"The design document has become very unorganized to follow through efficiently, post changes made by the team for round 2. Request them to structure it in the way it was for round 1. I would suggest to include more details on the design strategy.
The results seem to be incomplete. I am not able to understand what the team wanted to achieve by looking at the screenshots."
1,There are 3 issues in this project and a separate design strategy has been made for all of them which seems reasonable.
1,"design document looks good, its easy to understand, although they have given alot of details which are not required for a design document. But good thing is they have mentioned about all issues in assignment , related all of them from expertiza github and gave solution/ approach to solve all of them, which makes it easy to understand and not get confused."
1,"They have adequately explained the changes to be made to the system. For each section, they explained their approach step by step."
1,The images are too big and the ext between subsequent image is really small.So it makes hard to read the doc and if we are already making video about showing our implementation why show images?
0,Explanations are good.
1,"The changes to be made, to the best of their knowledge, has been explained properly I feel."
1,"Yes, the authors have adequately explained all aspects of the implementation/testing that needs to be carried out."
0,The changes proposed by the authors are thoughtful and well put through.
1,Changes being done to Controller should be more descriptive. The proposed changes are bullet listed and do not explain the functionality in detail.
1,"All are helpful and useful to take a clear look at the correspondant content.
One advice is that, because the main reason of showing the current view is to compare with their expected view after implementing, it would be better to place the figure of current view right next to the figure of view after improvement."
1,"They just mentioned what to do with the current view pages, including adding a toggleable column, and another column of additional file or link, and applying other improvements.
But no applicable strategies on how to modify which codes have been specfied. So they still have a lot of statements to write so far."
1,"They did draw the diagrams for each issue, but there are some suggests.
1. For issue #1430, the diagram they draw is not so necessary.
2.  issue #1430 should not just have use cases diagram, but also need the data flow diagram."
1,"The requirement of this project is mainly on adding a new feature of feedback to instructor interface. And the wiki comprehensively overed the description and strategy on how to implement the features of ""average ratings"".
Besides, they decided to implement an additional feature of ""a table of all ratings"" to this section. Thus, their documentation actually exceeds the requirement."
1,Yes the visual aids are properly done and self-explanatory.
1,"As mentioned above, their design strategy seems to be kind of shallow, and did not cover how to implement on specific files or codes. However, the documentation is comprehensive in general."
1,The flowcharts and the use case diagram are very descriptive and helpful. The overall quality is pretty good.
1,All diagrams appear to be useful and helpful for understanding the correspondant functionalities. And they have created diagrams for each issues to be done.
0,"Yes, also they have put in a lot of thought in coming up with a scoring system which was commendable."
0,The proposed code changes were explained visually which was very unique and easy to understand
1,"Most parts are pretty good, they have all the parts including problem statements, project design, code change, and test plan.
The thing I think they could do better on test part,
e.g. they should write more detailed steps about the manual test."
0,"Yes, they have identified all their tasks and come up with proposed changes."
1,"The new design of this group is very good.thy
1. they give correct proposed solutions to fix the bug, and the new design looks good."
1,the diagram is clear but need to scale bigger.
1,"1.on method add to a wrong class
2.there is no prove that the code will be ""smelly""
3.design part is good for me.
4.it will not increase the response time.
5.yes, the test plan and code changes is need to improve."
1,"The project design is well explained, but the project design diagram is too small to read.the code changes part is not clear."
0,all part included in the design doc
1,"Design is overall good however in issue#1430 does TA's list where they will perform lookup will contain only present course TA is the instructor of or it will have list of course  the person has TAed.Because it might give unnecessary access to the TA of there past course.
Also in issue 1384 instead of having a boolean variable for every icon they can also have bitmask where every bit represents whether to show the icon or not."
1,"All the designs appear to be complete and appropriate. I can see from the flow charts, which clearly show the logic of all designs for first three issues, and designs for adding test for the other three issues."
1,The designs that the authors have proposed seem pretty good and adequate enough for the functionality. There do not seem to be any errors.
0,The design appears to be well defined and looks like good research is done to come to the conclusion of using this approach. The document explaining the way to derive the formula is very interesting and I appreciate the team for the efforts.
1,The test plan should include automated testing as well as manual testing. The test plan provided is not sufficient it just gives list of scenarios. Include the test files which will be modified and also different scenarios for testing.
1,"Design seems okay, could use little more details. It would be help to mention what they want to change in which code flow."
0,Well completed. All sections included.
1,"This team gives the proposed solutions and diagrams for each issue, however, they did not describe each issue clear and detailed.
Also, they should give the data flow diagram of the issue, not just the use cases diagram."
0,"Yes, the design appears to be simple and the code change flow diagram is helpful in understanding the solution."
1,"1) Looks like they've identified the class they need to make changes to.
2) The design doesn't look smelly.
3) They have incorporated gems that make the code simpler.
4) I think the design could increase the response time of the system.
5) Sufficient effort has been put to identify the changes. More clarity will be achieved when they start implementing those changes."
1,"Yes the changes the authors gave are easy to follow,but sorry for nitpicking but there is a grammar mistake I think in Problem Statement section where the line "" Firstly, a TA can unassign an assignment from the course which him don't belong to"" I don't there is word ""unassign"" and it should be he instead of him."
1,The overall design looks good and follows all the appropriate principles but does not mention anything about the design patterns to be used for the implementation. Please mention the design pattern which they are following already or you are planning to implement.
1,"Explanations are very crisp and to the point, however more details on the first three issues could be included, with respect to the Problem statement, Propose solution and the implementation."
1,"Rest of the document is okay but I feel, the Test Plan section could be improved significantly. Only 2 lines have been written about the unit tests. You could include all the details regarding the test cases. For instance, when you say ""We will add a Rspec test in each controller which tests our new methods, such as have_file_added and have_link_added."", add details regarding what these tests will plan to validate?"
1,They have provided a flow chart through which they are trying to explain what all changes to make and where exactly they should make them but in one glance it is not easily understandable.
0,The design appears to be sound
1,The changes that the authors have proposed are readable and understandable. The explanations are very descriptive and adequate.
0,"Yes, the design includes the test plan and it seems quite necessary."
0,"Yes, the diagrams in the document describes the intended changes clearly."
0,"According to their explanation, the design seems simple but practical."
0,"Yes, the design is sound and follows appropriate principles."
1,"The tests are shallow, and hopefully the team will incorporate the RSpec testing too, once development has begun. (or already done so, if development has begun)"
1,"Proposed solution should be more descriptive, they should also mention in proposed solution what changes will be done in which class or file."
1,"The diagrams such as code changes flow and the use case give a very very high level view, as compared to what is needed. I feel a detailed technical understanding of how the project will be designed is not being shown in the figures/diagrams."
0,"From the look of it, yes the design does appear to be as simple as possible, since specifications for the same on the code changes flow or in the write up have been specified."
1,"Yes, the design of this project incorporates all the required functionality.
They mentioned three issues and give the proposed solutions to each one."
1,The changes proposed by the author are pretty much the changes recommended in the project document. Nothing different was evident from it. I would recommend you to add more low level details regarding the changes you're proposing.
1,"More details could be included on how the team actually plans to implement the solutions. Lots of step by step details are included for the manual testing part, which makes it clear for the reviewer to expect such kind of test cases. Appreciate the flow diagrams as well, although in issue #1430, I believe that whether the TA has access or not must be checked before he/she is allowed to make changes to the assignment (the action should be a click on a button perhaps, instead of remove assignment from course, as that is what we want to restrict) . Perhaps some rephrasing would help."
1,There are 3 issues in this project and they have made a point to cover them all in each section.
1,"Yes, according to the project requirement, all three issues along with other three from the PR of last group have been added into their wiki page."
0,"Yes, the necessary changes that will be incorporated have been mentioned, including things like formula being used, and the team also has narrowed down the files that are to be changed/involved moving forward."
1,Document mentions three issues that need to be fixed in this project. First issue language is little confusing and could be explained in better words. Rest of the problem statement is easy to understand.
0,"Yes, the design does seem to be solid and uses the right methods/files involved for designing the project."
1,"This team did very well and has a great design doc.
The manual test description is very clear to understand.
Just add more details about descriptions of issues and modify the diagrams."
0,Yes. they have adequate visual aids
0,The design document is simple
1,The team has made no changes compared to last submission. They have not implemented the suggestion given earlier.
1,"The team has made good use of visual aids. They has used 2 diagrams, one is the flow diagram and the other depicts how they plan to implement the changes. I feel the other diagram is a little high-level and does not provide much details regarding the changes. For instance what do you mean by ""Visualize the result""? Please add more details to the diagram."
1,"More cases need to be considered to find the problem in issue 1354, I think there might exist some more scenarios where an assignment could be dropped automatically."
1,"The documentation is very comprehensive. It covers all six issues in thei tasks, three of which are to fix bugs and implement those funtionalities, and the other three come from the last group requiring furthur tests. The design pattern and test plan of each issue have been fully included."
1,"The authors don't detail any proposition for code changes or testing. It is all pretty abstract at this stage with no mention of controllers or methods to be added. 
What is toggable? Do you mean toggleable?"
1,They have derived a formula that they will use but have not talk about how will they implement it.
1,"The explanation is easy to follow however, the wiki needs to be re-organized.
The tasks are not highlighted and detailed description is starting just right after.
The easy language coupled with the Flowchart and project design is enough to understand the task description as well as the proposed solution."
1,"As far as I can understand there are only 2 major task:
1 Combine author feedback data with review data
2 Create an interactive visualization
The problem statement is mentioned on the wiki, however detailed description on each part and organization is not done properly."
0,The code changes flow diagram shows the files they plan to change and their work order. And the use case diagram describes what student and instructor can do.
1,"Code-Level specifics including proposed files to be changed and methods to be implemented is required.
Design Pattern to be implemented needs to be decided.
Test Plan is vague and details only the use of Travis CI."
1,"The code changes flow diagram shows the files they plan to change. But they can add more details about how they plan to do the work. 
For example, ""Display the composite score on the “View Scores” page."" is the result. It would be better if they write specifically how they plan to display the composite score."
1,They have a code change flow diagram that shows what files they plan to change. But they didn't write how to change the files and what method they plan to change or add. It would be better if they write more details about how they plan to change the code.
1,"1) The diagrams are good and really helpful
2) Each diagram does follow the conventions and essential comments are also provided
3) The Project Design diagram could be separate to a general one and specific ones for each part"
0,"The design appear to be sound, following appropriate principles and using appropriate patterns. The design document contains Problem Statement and Overview, Code Changes Flow, Use case, Current Process, New Process and Test Plan."
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Problem Statement and Overview, Code Changes Flow, Use case, Current Process, New Process and Test Plan."
1,There is no mention of how the test plan will be carried out. Appropriate mention of patterns along with screenshots of the system could be more useful to understand.
0,Yes the visual aids are used effectively.
0,Yes the design is simple and clear.
0,Yes the design is sound and appropriate.
1,"1) They have not mentioned about methods' modifications
2) The new design looks good and does not seem to make code ""smelly""
3) The design is simple and clear
4) Since there are new features add to the system, the response time could increase a little
5) Generally the design is good, just minor improvements needed"
0,detailed The test plans are described in good way in documentation.
0,"Yes, it is as simple and easy to understand."
0,the design is good and followed all pattern.
0,"yes, the UML diagram and other figures clearly describe the changes to be made to the system"
0,"yes, the design appear to be as simple as possible"
1,"1) Changes they proposed are mess
2) For the front-end, the description is not elegant and hard to catch the point
3) For the back-end, only few files mentioned that may need to be modified
4) It would be better if they could describe changes generally then separate to front-end and back-end"
0,"Yes, multiple models and controllers"
0,"(1) The book can be deleted
(2) Books aren't automatically checked out for other students
(3) No it can't
(4) The admin can delete such a student, the reservations aren't updated"
1,"Cannot add librarian
Book count is not implemented"
0,"Yes, changes were committed regularly"
0,Code is readable with enough comments
0,Yes tests have been thorough for most controllers and models.
0,"yes, the authors adequately explained the changes to be made to the system"
1,Student is deleted and books issued then student is deleted but book never gets available.
0,Everything is working fine. A few problems like after checkout of the book when i click back it goes to books home page but thats a very minute change. Rest all are implemented perfectly.
0,All good practices are followed .
1,"Admin can delete a student who has books checked out.
When we sign up with google oauth, and admin deletes this user, I am unable to login again using oauth.
Admin account cannot be deleted."
0,"Yes, the visualizations are properly inserted with suitable content."
0,"Yes, it is as simple as it can be."
1,"1) They covered all the functionality required in the document
2) They also take previous implementation of this project as an example
3) It would be better if there could be a work follow showing the current implementation"
0,"Yes, the design is good and they have followed all patterns."
0,"Yes, the mapping has been maintained."
0,"Yes, the team has committed changes in round 2."
0,"Proper coding conducts have been followed.
Code looks clean and readable."
1,I don't find any specific tests apart from the auto generated code.
1,"Some of the observations are:
If the user is book is deleted then that book is removed from the checked out list of the users.
If the same book is available in different libraries then the book can be checkout only once, not sure why the user cannot checkout the book in the other library.
Multiple copies of the same book are being assigned to many users. Not able to see the quantity of books available actually to see the count getting reduced or increased.So, even though when we delete the user, we will not know what is happening with the book.
Forgot password is not working for some reason. The page not working error is displayed."
1,"The test plan is exhaustive, but the plan is very abstract and can include some details here"
1,"The team has implemented the feedback properly. Some of the functionality naming is not done properly in UI perspective last time but it is perfect now.But when the user logs in, we are directly take to the edit profile link forcefully and even though if we change nothing, we have to click on the save profile etc. which has not yet been implemented. But overall the basic functionalities work well."
0,"All the 1-n and n-n relationships are handled properly by the team. We can see that a library can have many books, users can borrow many books, many books can be bookmarked etc. All these can be seen in the migrations as well as models folder."
0,The team worked everyday on the project and kept pushing their changes onto git.There is a clear clarity about the work progress and work division among the team members.
1,"Code is readable and understandable by the users.
There are some parts of the code where we can find the lengthy methods continuously checking various conditions which can be avoided.
SOLID principles can be followed by seeing that one method will handle only one action.
For example, in the contains controller, we can see that the the name doesn't suggest the proper functionalities related to that controller.Maybe this can be avoided.
Including the comments will help the reviewers understand what is going on."
0,Yes the team has done the testing of model and controller
1,"1. Checkout Request was raised by the student for one of the book but Librarian was not able to see the request.
2. Librarian was allowed to checkout the books
3. Search by date functionality - If a student puts any date - all the books show up, the search by date functionality is not working.
4. Admin was able to delete the student with Book checked out.
5. Error Flash when a librarian tries to delete the book - Student cannot edit books!"
0,Yes the explanations are adequate
1,"I feel the design flawed for calculating the self score
 
In the Document following is mentioned
""The self score is an indicator of how much you know your work. Basically, self score of 1 means that the
Average Ratings matches with the Self Review Rating. It is worth noting that Self Score will be out of 1.
The lowest Self score can go is 0. This will happen when one of the score (either the Average Rating by
Peers or Self Review Rating) is 0 and other one is Maximum.""
 
The bold part is what concerns me, formula is self score = 1 - (avg - self) / max rating.
Since it is mentioned that either avg or self ratings can be 0, let's consider the scenario where only avg is 0 this means  the self score actually increases.
If only self is 0 then self score is 0 only when avg rating = max rating. 
 
Hence i urge the team to look closely into the formula if what they want to achieve is mentioned properly 
 
Moreover I feel diving by avg rating will be a better choice as it'll be a wider distribution"
0,"Yes, the system does handle the associations properly. A library is allowed to have multiple books."
0,"Yes, the team did keep on committing their changes to the repository. Also, changes made during the round were kept on committing."
1,"Did a complete test, and authorizations have been properly dealt with. However, a student was able to visit the page of editing something but he/she was not able to destroy it. I think visiting that page should be blocked as well."
1,"1) Almost everything was covered in this design doc
2) I think a design pattern could be used here to help implementation
3) The methods may need to be modified should be more detailed"
0,"Admin cannot delete library, book, user, librerian"
1,"I do not see test details in their readme.md file.
Only auto-tests in the test folder."
1,"The UML diagrams do not explain properly about the design, they need to add use case diagram which explains the design in detail. The visual aids do not provide enough details. The code change flows helps a little for better understanding."
1,"Hold request not yet implemented correctly.
Book not assigned to user who has request a unavailable book when a book is returned.
Book count can be negative number in library.
ISBN validation not added."
1,"This system has improved a lot from the first round. They added many function including librarians. Checkout book and return good. 
Student dependent destroy implemented.
Hold request not yet correctly implemented. Admin cannot approve a book request.
Admin create users not yet implemented."
0,"Necessary relationships added.
Admin cannot delete a university, and destroy dependent objects.
admin cannot delete a library, and destroy dependent objects."
1,The author explained the flow of changes and also the files to be changed But did not involve what changes are to be made. The explanation or the plan for implementation looks promising and is well planned.
0,"The group made 174 commits throughout the entire working period.
Everyone committed to the repository.
They work through round 1 and round 2."
0,"Code is clean and readable. No redundant code.
A method implement only one function."
0,The design document incorporates all the required sections. It covers all the functionalities as well.
1,I cannot find their tests.
1,"1. The routings confused me, I can login after I sign up as a librarian, and can edit my profile, but after submit, it shows me to wait for admin's approval.
2. Admin cannot add books, it shows ""something went wrong"" page.
3. Admin cannot add new students.
4. Admin cannot add new librarians.
5. Librarian cannot view book history.
6. Librarian can add books that not belongs to his library."
1,"I cannot find clear relationship between some models, such as librarian and library, book history and books."
0,"yes, they keep on submitting their changes."
1,They didn't test any model.
1,"Yes, they thoroughly tested at least one model and one controller. But not all tests are meaningful."
1,"Some methods are too long, such as show_lib_book method in contains_controller.rb, and I cannot find some important methods such as add bookmark or methods related to book histories.do not ex"
1,- No model tested. Controller scaffold generated test cases are present.
1,"Seems like not enoguh test where performed as some features were not working by the time of this review.
Email duplication is not allowed. This feature was tested."
1,They only test the controller. But they seem not test the model at all.
1,"(1) What will happen if the admin tries to delete book that is issued?
The admin can delete the book successfully. However, when a student try to see his checkout list or hold request, the page will go wrong.
 
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The other student will still wait for the book. As the checked out record seem still here.
 
(3) Can Admin account be deleted?
No, admin account cannot be deleted.
 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
As the ""Viewing hold request"" are broken, I cannot test this edge case."
1,"I checked there books controller, I can see functions for return, borrow, cancel request but unfortunately I cannot see these functionalities implemented on the deployed application."
1,"The team took some edge cases into consideration. For example, the admin can't be deleted. However, most of the edge cases I can think of are related to checkout functions. So I can't test these cases."
1,"The admin's function that ""View Checked out Books"", ""View Borrowing History"", ""View Hold Request"" seems not work.
As a admin, when I want to new a book, I should choose which library it belongs to, rather than ""add book to library"" separately.
As a librarian, the function ""View Checked out Books"" and ""View Borrowing History"" doesn't work as well."
1,"They treated the library-book relationship as n-to-n. It means they think a book can belong to many libraries, and a library can have many book. So I think this is a small bug they should reconsider it."
0,"Yes, they kept on submitting their changes throughout the project, and they still commit changes and polish their functions in round 2."
1,"Checkout feauture not working. Can't test this case.
Checkout feauture not working. Can't test this case.
Checkout feauture not working. Can't test this case.
No, admin cannot be deleted."
1,"1. admin cant delete a issued book
2. not able to find the student which issued book in the user list in admin section
3. can't create a waitlist for a book if all books are issue this functionality is not implemented.
4. Admin account can't be deleted
5. cant test 4th use case because newly created student are not appearing in user section in admin"
1,"1) Only one copy of a book can be created.
2) When a book is checked out, the user can't be deleted - edge case satisfied,
3) Also, an issued book can't be deleted. - edge case satisfied"
1,"There is an entrance for Google login, however when I choose my account, the notice will show ""User was not found"". So the extra credit seems not work.
 
The code quality is good. One method only handle one task. There isn'y any too-long function. And all functions are named well."
1,"(1) What will happen if the admin tries to delete book that is issued?

I wasn't able to issue a book from student's log in, so cannot test this functionality

(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?

I wasn't able to issue a book from student's log in, so cannot test this functionality

(3) Can Admin account be deleted?

No admin cannot be deleted

(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?

I wasn't able to successfully place hold request for  a book from student's log in, so cannot test this functionality"
1,"Books cannot be deleted.
the student is just deleted.
admin account cannot be deleted.
Other edge cases are handled well."
1,I couldn't see the thorough testing of any single model or controller. More unit testing could have been added for taking care of special cases.
1,"The team did make great progress in this week. However, not all functions works correctly.The search function didn't work. The cover of the book can't be displayed correctly sometimes. Students have no attributes to decide their education level. The checkout request of non-special books is rejected,as well as the bookmark request. The book history can't be accessed.  Since I can't check out books, I can't test all the  functions related to it."
1,"1) Admin was able to delete a book that was already issued. However, as a student, there doesn't seem to be any functionality available to see their checked out books. As an admin, the record for this book was deleted from checked out books list.
2) Deleting a user who had issued books and other used waiting for the same book does not assign these books to the waiting students. They still appear under hold.
3) Admin can't be deleted.
4) Deleting users who have pending book requests also deleted the requests."
1,"- Admin account was not working but that I am guessing is not their fault.
- Cannot checkout book"
0,"Most of the functionalities works as it is supposed to be.
 
Improvements:
> Search functionality seems to be working now. However, there could still be some improvement like not making it case sensitive or ""contains"" search.
> Back button has been added mostly but I could still spot some places where it was missing. For example the ""show bookmarks"" page.
> Missing features have been added. For example: bookmarks etc.
 
Issues:
> Negative book counts. This was highlighted in the first review however team hasn't yet fixed this."
1,"No validations when creating library: accepts negative overdue fines.
New Librarian not listed in approval list. 
Creating a user is not intuitive nor easy from the admin page.
New books don't show in the index view of books. List of books is not complete.
Search book feauture doesn't work: error view.
Student cannot shoose level.
Cannot checkout books!
Student cannot visualize hold requests."
1,"I can create books without linking them to any library.
I could not see any db relationship mapping table.
Books count keeps decreasing to negative. This seems bizarre.
I could link same book to multiple libraries. Also, for the count part, I could select values like -5 and -0 and it still submitted."
1,"Working features
1.Admin can add new book
2. student can request a special book
3.student can bookmark a book
4.student can checkout a book
5.student can return a book
6. admin gets a approval request for signup of new librarian.
Non working feaures
1, admin not able to see checkout history of a book
2. book search functionality not working for admin
3.Librarian is able to see books from other libraries which belongs to other University
4. Search book functionality is not working for librarian
5. librarian not able to see history of a book
6. Librarian can edit libraries from other universities which should not be possible 
7. Student can see libraries which are from other universities which is unexpected
8. student can checkout books from libraries which belongs to other universities
10. not able to see new user in show all user option in admin account
11. student has duplicate entries for each book he/she checkout ie. for every transaction getting a record in overdue fine section which is unexpected for books which are checked out and returned there should not be any entry for overdue fine. overdue fine should be calculated only for checked out books which are not returned.
12. not able to see any overdue."
0,Yes. This team continued submitting their changes through out the project and specially after the 2nd round. I see over 170 commits which shows the amount of work done!
1,"Most of the basic functionalities need to be implemented. I am documenting some of them here:

Librarian


Librarian can sign up. When I try to sign in, it says Librarian is not yet approved(correctly as specified in the requirements). But the librarian is not reflected in the admin's approval list, so a new librarian can never login.
I tried to check back in the librarian controller from GitHub repo, that is when I found out that the librarian controller is empty.
So none of the librarian functionalities can be tested.


Admin


A book can be successfully created and updated but cannot be deleted. It throws the error: ""We are sorry something went wrong""
No way to see new librarians signed up.
Checkout history of the book cannot be seen. Clicking on it throws the error: ""The change you wanted was rejected""
A new librarian cannot be added even from create user in admin's section
No other functionalities are implemented


Student


A student can successfully bookmark his books but cannot checkout or request.
On clicking checkout or request, it throws error: ""The change you wanted was rejected"""
0,"Code quality appears to be fine. 
> Methods haven't been cluttered with loads of tasks and are specific to the one they are supposed to perform.
> Naming conventions have been taken care of and the code readability is good.
> Methods are usually short and properly commented."
1,"when a book is deleted, the message "" Book was successfully destroyed"" appears on the page, but the information of the book still on the book list. It's a bit confusing."
1,"They didn't handle the association between books and libraries.  A book should belong to library and a library should have many books. And a university should has many libraries. 
But they have some other associations in their models which are good."
1,"They defines many 1-to-n relationships well in their models. But I have not found the relationship between books and libraries. In this design, we have to make sure that books can't be created before libraries."
0,"Yes, the commits are frequent and incremental"
1,- There is a mapping done but uses string instead of references. It's a good practice to use references if a column value points to another table id.
1,"On deleting the library, corresponding books of that library do not get deleted. Also, librarians should get deleted. There is no library attached to show for librarian"
1,"Some releationships have been established properly, however book class, for example, doesn't have relation to Library."
1,Code would be more readable if there were more comments
0,Yes enough github commits.
1,Admin has been implemented in a great way.Except for the edit.
0,Very nice UI.
1,"Yes, the team keep pushing throughout the project duration. They didn't commit changes in this round 2 period."
1,Admin not able to edit his profile.
1,"Yeah, they did commit changes in round 2. The Project has significant improvement over the previous iteration at least from the first glance. Although Commit messages are not very clear"
0,"Yes, the team was very organised and worked consistently on the project pushing code day by day from the moment they started delivering small chunks of functionalities."
1,"The team did not implement the extra credit functionalities.Also, very basic test cases can be found for controllers. Models are not tested but the files are created.Some of the test case scenarios can be the following after testing the UI:
- Login functionality for different users.
-Forgot password functionality and reset instructions to mail.
- After clicking on cancel account, try logging in.
-search functionality without entering any filter criteria.
-redirection to home/ back button testing in various scenarios.
-admin approval of librarian account"
1,"Yes, the code is written consistently and nice. But some methods like show, edit, destroy in main controllers like librarian, admin and student are blank"
1,"The functionalities in the UI are designed very well. The readme file gives the clear understanding of what to expect and what is yet to come. Pretty clear.
Some observations regarding the UI are:
-The moment the link is opened, the user is restricted to login until then no functionality is shown. Instead, a good UI page welcoming the user can be designed and give a user basic understanding of what the website is and what to expect would always give a good look and feel and this will be useful for general users who just want to surf the site.
-After signing up, displaying a good dashboard showing different options the users can make use of will be really nice. Restricting the user to definitely edit profile is like leaving no choice to the user.
-If the user by mistakenly clicks on edit profile and wants to go back, there is no home button. He has to click on save profile which is when he is taken back to dashboard. Having a home button there or cancel update button would be nice. The cancel account button is quite confusing whether it is cancel update/delete account which can be improved.
-If we click on cancel account, we are still able to login and after logging in no options are displayed. Not sure what is happening.
Overall the functionalities are easy to understand and working fine but UI can be more user captivating and user friendly."
1,"Code quality looks Ok. Methods are simple and short.
Didn't use rspec framework."
1,"I can access admin page using link of a home page for admin via librarian account.
No feature to login using google/facebook account"
1,"A lot of controllers defined and are highly decoupled. I think those controllers, models which can be merged should be merged and the functionality can be given through using policy gems, etc."
0,"-Comments in the files can be included for developer understanding.
-appropriate naming of file. For example, there is a file called static_pages_controller and going in we can see functionality of pending approval lists for admin.
- We follow DRY (Don't repeat yourself approach). In the registration controller.rb, we can see redundancy in sign_up_params. If appropriate, can be corrected.
-We can follow the SOLID principles while adding methods in the controllers, by taking care that one method does only one function - single responsibility principle.
-Also, keeping more logic in controllers instead of views.
Since, most of the code is scaffold-ed, it is perfectly according to the standard."
1,No Github repo
0,Github repositories seem to be updated regularly by multiple users throughout the project period.
1,The GITHB repo is private
1,"The testing has been done. However, all the functions have not been tested. Most of the functionalities of the librarian are not a part of the test case written. Like the admin can destroy the books etc. Also, attaching few of the links which are showing error, once the test cases are written, these links should work properly or else easily identifiable."
1,"There are quite a few commits and the commit messages also signify what feature/bug fix is being pushed. However, peer review and pull requests were not used in the team. There are no pull requests created in the Github project, which can be improved moving along. One good thing that I found was the use of Github Project in the repository, however, not extensively used but still is a positive aspect."
1,"It is not very clear how simple the team is making the design. 
As the team has not mentioned what method they plan to edit/add and where in the code"
1,There are just some tests that are automatically generated. It would be better if they write some tests about controller and model to test some validations and actions.
0,"The User Interface has been beautified with HTML and CSS and is very intuitive, showing all the fields correctly in place where it is supposed to be. The home page button is available to easily navigate, also the services available to the student is shown clearly."
1,"Since I can't see the code, I can't answer all these questions. Maybe you have not reached this step."
0,"Yes, their design appears to be to the point and seems to follow a lucid logical approach."
1,"At least, validation fields have note been tested. They accept various invalid values."
1,"The code is well maintained and the business logic is kept separate from the Views and Models. This brings the good practice implementation in the code. The code has been well intended. However, more comments could have been put in place to make the code more easily readable to other users."
0,yes the design is simple and clear.
1,"1. No, The Student model has all functionalities to be yet developed.
No Checkout, return, hold functionality added. The link only shows the list of books. The student can permanently destroy a book from the libratry(This needs to be fixed). No functionality for calculating overdue fines.
2. Librarian Model is almost complete but as end to end flow from student to a database update is not complete. We cannot fully test if a book is actually added in the hold list. The databases are populated in different views, but that is not sufficient to guarantee a particular function works as no end to end implementation. No functionality to view overdue fines of a particular student."
1,No extra-credit features implemented. It does not seem from the code on git that the team has implement tests.
1,No module has been tested.
0,No Third party signup
1,They start to push and commit 7 days ago. there are two weeks between they did no work on the hw.
1,No self test. Only auto generated tests written.
1,"- No repo link provided.
- Read me only has credentials"
0,"The outlook is good. Very neat framework, coded front-end layout. Clear buttons for linking to main pages and function pages."
1,"Although the user interface is intuitive, it is difficult to navigate and view as there is no border or margin spacing and it sticks to the left o0f the screen. I suggest to add some CSS and improve the UI by adding margins and padding appropriately."
1,"It is well defined where to implement the next operation. The UI looks clean. sign_out button is displayed on every page, which is kind of convenient for the whole test process."
0,"i can not login using their pre-config admin username and password, so cannot create librarian role and test profile changing function."
0,Yes they plan to make adequate changes in the system
0,- The changes are listed out very well. They know exactly what files need to be worked on which is definitely a good thing.
0,"Yes, you can see it from git commit."
0,Their stusent model is doing good.
1,"I believe you guys did a good job, so please provide the link to github next time."
0,good interface.
1,"many functionalities are missing.
student is able to add new books, which means that testing is not done properly."
1,The author just mentioned about the classes to be changed but did not explain in detail about the code changes in specific. The author has selected the correct methods to be modified. The new design is not complicated but requires addition of more details explaining the code and not only the classes to be changed. I cannot comment on the code smells because the document does not include anything about the code to be modified.
1,"Each view directory only has a show.html.erb file and no other files are present which is not a good ruby practice. The new, edit, index files are not present in any of the view directories. The scaffolding is not done properly."
0,Good interface.
0,good coding practices followed.
0,"Yes. Overall, the doc is comprehensive."
1,"Yes, all functions are easy to find, except some function have not finished.
Besides, I think the function of add new books seems strange, as I can only add counts. I cannot add a new book for the library I want as an admin. That seems a small bug."
1,This team tested several controller thoroughly but not any model. They can polish their test afterwards.
1,"Yes, the user interface is easy to use. And I can find some the instructions from the README as well. However, there may be some function they have not done, so I cannot find the entrance. I think they can point the functions they haven't finished in the README as well."
1,"I cannot find how to create students and librarian accounts as an admin. There is no such link on admin's dashboard. I cannot find any instruction in README as well. I cannot see the borrowing history of a book as an admin or as a librarian. I cannot see the students who have overdue books as well. And the function of viewing checked out books and books in hold request is missing.
I cannot borrow books as I want, as I cannot find the book I just add as an admin."
1,"1. The team did push their changes but mostly during the latter part of the project period. They could have started a little earlier.
2. Most of the changes appear to be within a week from the deadline. But I can surely see continuous commits since then."
1,"1. None of the extra credit features were implemented. A student can create book by changing the URL. (HINT: Try exploring the ""before_action""  filters for implementing this.)
2. Thorough testing is not provided. Most of the code was the default that one gets using ""Devise"" etc.
3. The signup integration with LinkedIn, Facebook etc. can be done using Rails OmniAuth. The team can try exploring that."
1,"The user interface looks intuitive enough however I did find some things can be fixed.
1) Some of the pages, I couldn't find a back button. For example: When you click on show books for an individual book, I couldn't find an option to go back. I could always use the browser back button, but this won't be consistent with the application overall.
2) The search functionality could be merged with the books view instead of having a separate module for it.
3) Also, the search functionality seems to be broken. I kept getting ""something went wrong"" error message."
1,"The UML diagram which shows the flow of their changes looks good but is a bit unclear as it is hard to understand as which issue would be resolved in what file. Also, there does not seem a need for the use case diagram as the user actions are simple thus writing in words would have been enough too but it is good you did extra."
0,"Overall the code looked good. 
1) The indentations were properly made.
2) Instead of ""for"", the team has mostly used ""each"" which is more readable and better practice.
3) Redundancy has been mostly avoided.
4) The team has followed the ""Fat models, skinny controllers"" guidelines."
1,"There is only mention of the files in which they would make the changes, but they failed to mention what exactly would they do in those files. Thus, can not check for points  1 and 2."
1,The changes which author provided seems good and are explained well. They have mentioned the files in which they would implement their changes but it is not clear that in which file they would make what changes.
0,"Yes, the design incorporates all the functionalities mentioned in the document"
0,The screenshots and diagrams in the document are instructive.
0,"Yes, their design document have incorporated all of the functionality required."
0,Very complete and wholesome document.
1,"In the Use case section of the wiki, more specifics would've definitely helped in understanding the big picture. The current diagram does give a brief high-level design but things like the self-review has to be done before the user can view the other work, and the formula being used to calculate the overall grades could have been mentioned, to help the user understand the overall flow much much better.
As for the code-changes flow, more specifics in regards to what happens on the arrow when traversing from one method to another, would've helped in understanding the overall idea, and the technical changes proposed."
1,"Well one major change would be the way the overall score will be calculated, from just the peer review to now also include the self review. Though the ""New Process"" heading does give a link to a google doc, explaining the formula that would be used, this still does not make things clear, as to what methods are going to be used to achieve the same, in what class are these going to be used, and also what global (if any) variables will be introduced. Also, the code changes flow section does not seem to be specific enough to understand what the significance of the arrows mean in this case."
1,"Yes, the wiki does cover all aspects of the design that is to be changed, and includes all the functionalities that are to be achieved. One of the requirements was also to avoid the use of global variables in the code, and I feel that the new instances or instance variables that will be introduced can also be mentioned in the document. This would definitely showcase how that specific requirement is also being fulfilled. Maybe this could be incorporated in the ""Code changes flow"", wherein, instead of just arrows pointing to the data flow, it can also show the variables being introduced."
1,"More details on the UI would've been nice. By this I mean, more insights as to how exactly would the design be achieved from a user's stand point? Would the others work be disabled or not shown to the student, until the self review is completed? If so, then how is this going to be achieved on the UI? A wire frame for the same, with more technical implementation changes would've helped in understanding the end to end picture of what exactly is going through the authors mind, when designing the project. 
But otherwise, on a high level, the overall picture seems to be clear from my point of view."
1,The visual aids have been used accurately to provide better understanding of the problem. They can add something related to the solution of the problem.
1,"As I have mentioned above, the changes can be made in test plan and they can add the files they are planning to change or any file they will add."
0,"They have a code changes flow that shows the files they plan to modify and the relationship between those files. The diagram is clear and helpful to understand the project. 
And the use case diagram shows how self-reviewing is created and performed."
0,They have a code changes flow diagram to show how they plan to change the code and what files will be modified. I think they found the right files and right class to change or add code.
1,"It seems that they just repeated the requirement in the given document and didn't explain their plan in detail. It would be better if they add explanations to each point of problems to explain how they plan to change the code to achieve the goal. But the code changes flow diagram is clear and shows that they have their plan of work.
And they design a formula to calculate the composite score. The formula is reasonable and in detail."
0,The design incorporates all of the functionality required in the given document. The functionality required includes three main points that are all described in their design document.
0,"The design document is complete. It includes the problem description, their plan of work, some visual aids helps better understand the project, test plan, and their plan of the formula."
0,Their diagram is necessary and helpful. It follow the conventions and provide enough details.
1,"Their introduction of requirement and the method to accomplish function is great. But their test plan is synoptic. I think they should add more detail. For example, they could list the test cases."
1,Code flow diagram is tough as a reader to understand without any context.
1,"Code changes flow is a little hard to understand at first. I would suggest to put some explanation on how and what should be changed in the code file. Also, how they propose to change the files is not mentioned."
0,Yes They have incorporated all the changes.
0,Diagrams are good and quite easy to understand.
0,The code can be deployed to production; with the caveat of verifying the code coverage.
0,The writeup is very exhaustive and covers all possible sections needed to understand and review the feature. Good job team!
0,The functioning of the project did not change after refactoring.
0,TravisCI build was successful. The branch can be merged without any conflicts.
0,Looks good to be merged.
0,The write up is pretty detailed. The changes in the code are explained well with snippets of the code changes.
0,The features work as they are supposed to and the spec tests pass.
0,"Build passes Travis CI.
No conflicts with the base branch"
0,It follows good coding styles and practices.
0,"- Yes as most changes are refactoring related and the tests execute correctly after the changes; it is ready to be deployed
- The code must be once deployed on test server and the review_mapping_helper must be tested manually before deploying"
0,"- The document is well written explaining the changes
- The team added screenshots of tests implemented"
0,- The build is passing
0,- Yes new code was commited in 2nd round
0,- The code is well written and is readable
0,The writeup very well explains how is the refactoring being done.
0,"Travis CI and CodeClimate Checks have passed:
 
 
All checks have passed
1 successful check
 
continuous-integration/travis-ci/pr — The Travis CI build passed
Details
This branch has no conflicts with the base branch
Only those with write access to this repository can merge pull requests."
0,Last commit was made on 5th November.  The commits were continuously during round 2 of the project timelines.
0,The refactoring is done very carefully. The method changes follows the DRY principles.
0,"Yes, the code is ready to be deployed."
0,"The writeup is well written. It shows a comparison of before and after of the code which is refactored. 
The flowchart and images help us verify the approach used to refactor by the team."
0,"Yes, the project passes all the Travis CI build test cases."
0,"Yes, a few commits were added in round 2."
0,The program follows the DRY principles and it was very important for them to do so as it was a refactoring project.
0,"Since the team has only done refactoring of existing code, they did not need to write new tests. Their refactored code was successfully able to pass all rubocop tests. Also all the travis builds have passed successfully. The coverage decreases by 6.2%."
0,Yes the pull request passes the travis Ci with 24.302% coverage.
0,"Yes, this code is ready to be deployed onto the production server, the changes are good enough, the refactoring is done correctly and the project works pretty well. This is a good starting place for a future team to pick up."
0,"The writeup is pretty good, there is no lack of explanation, no lack of functionality. I could understand the writeup very easily as well as the functioning. The functioning and the working of the project is explained precisely and concisely."
0,"Yes, the features work as they are supposed to. The refactoring is done correctly."
0,"Yes, the build did pass Travis CI. No conflicts to be resolved."
0,Yes there is 1 commit. This commit changes the file app/helpers/review_mapping_helper.rb.
0,The write up has been significantly upgraded and looks much better now. They have added video link and screenshots which improve the quality of the wiki.
0,The features are working as described in the requirements.
1,Test cases are added. But coverage seems to be falling due to new helpers not being tested (app/helpers/review_mapping_helper.rb)
0,The build passed and there are no merge conflicts
0,The team regularly added new commits.
0,The code is coherent now. There is good improvement to enhance the code quality compared to the 1st round.
0,"I had no issues with the writeup in the first round either, theirs is one of the best ones I have seen."
0,They covered the tests in the first round itself. They have also included a video describing the same.
0,"All the tests are building successfully, and their test plan looks promising. So the code can be deployed to the production server."
0,The writeup is very illustratively written. Clears everything about their task and how did they complete it.
0,"The task was to refactor the controller. Since the Travis CI is passed, every functionality is working."
0,Team had committed all the required tests in the previous commit only.
0,The Travis Build has passed successfully. And there are no conflicts with the existing expertiza project
0,"Yes, one commit can be seen on the GitHub. This commit has added various comments to the existing code."
0,"Yes, the authors have added more comments to the code."
1,"The test plan shows more results than implementation ad design of the tests, should include them before showing the results. It mentions that changes were made to the existing RSpec tests but doesn't mention any examples of such test cases and I see only one file changed in the repository so how and where are the test cases changed."
0,The writeup is great.
1,Writeup is good. Doesn't provide test case details only displays results upon running them though.
1,Most of the code is not commented. Can be improved.
0,All changes seem to be good and suggestive of their respective functionalities.
0,The best documentation I have come across. It is detailed and covers all things that are required to understand the project.
0,"The quality of the explaining issue is good.
The explanations are concise and clear to the point.
Also the method of explaining new formula in Doc is quite good."
0,The wiki page is very well documented. Has supporting screenshots for reference. Good job team.
0,The features work smoothly.
0,All test cases work as they're supposed to.
1,1) The flow of their approach to solve issue is clearly explained but  the testing Plan and how what are the final result that will be outcome of this changes should be explained in more detailed way.
0,"1. Functions are not long.
2. Function names are mostly within the proscribed length limit.
3. The authors have considered cognitive complexity, cyclomatic complexity of the code and have made right changes."
0,The comments have been provided for most of the methods and describe their functionality.
0,Variable names and method names are according to their use and needs.
0,"The test plan contains pre-conditions, edge cases, invalid input values."
0,"Yes, the write up is very clear. Diagrams are also present to explain the design. Screenshots were also made available in the write up."
0,- The code doesn't seem to be deployed as the project is refactor only
0,- Yes the team has included test plan and implemented tests as per the plan
0,- There are comments indicating the function the method is performing
0,- The variables are approprioately named
0,"- The test plan looks complete
- The team has tested all the methods"
0,- Very clear to understand and defines the functionality correctly
0,Test cases have been passed.
0,Cyclomatic complexity has been followed very well. DRY principle and Ruby Style Guides are followed.
0,"Comments like this - # checks the submission state within each round and assigns team colour, properly explains what needs to be done."
0,Test plan has been properly explained in the write-up and yes they have been executed as well.
0,The writeup is very well. The refactoring has been done carefully. The principles are followed while making the changes.
0,Writeup is very carefully written and includes images to explain the changes being made.
0,"As this is a refactoring project, no new test cases were required to be written."
0,"Yes, the code added/deleted follows most of the above ruby principles.
For example, huge blocks of code have been modularized and distributed in different methods"
0,"Yes, the code is well commented and the comment properly explains what each function does."
0,"Yes, the names of the methods accurately depict the function they perform. For example: obtain_team_colour and check_submission_state."
0,No new tests were required to be written for this project. They executed the same rspec file and have checked whether the application is working.
0,"Yes, the authors have explained why refactoring is required for that particular file and they have identified the issues and worked on it."
0,The writeup clearly explains the changes in blocks of codes by giving both before and after version.
1,"While there is no link for testing from user interface, pulling their github repo and rebuilding the expertiza into vcl I was able to test the functionality. I would suggest the authors to setup a VCL instance."
1,"The code refactoring of certain methods like get_review_team() does not include comments detailing the functionality. Suggest commenting the code
get_awarded_review_score: The new variable TeamID is confusing with another variable team_id. I would suggest using some other variable name. In case the var name is localized, include a comment to differentiate."
1,"The code refactoring of certain methods like get_review_team() does not include comments detailing the functionality. Suggest commenting the code
Also suggest add a line of comment for new variables created and their functionality."
1,"get_awarded_review_score: The new variable TeamID is confusing with another variable team_id. I would suggest using some other variable name. In case the var name is localized, include a comment to differentiate."
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes.The code embedded using pre tag in the expertiza wiki runs over the page and is not  visible. I would also suggest setting the flowchart image to center of the page. I would suggest to combine the refactoring changes for same reason eg: Abc complexity, into one group as this would simplify the reviewing process even more."
1,"The write-up details all important aspects of the project. however, there are certain problems with structuring. The Code and flowchart both are flowing out of screen. Also I would suggest rearranging the refactoring changes into categories of similar problems:for instance abc complexity. The authors have also included certain unnecessary sections like the Travis-Ci build testing which is redundant. The screenshots for Rubocop testing can be aligned in a better way to include side by side sections for code and results"
0,"Yes, the features work as intended. The work is refactored."
0,"Yes, the authors have converted all the cases discussed in Test Plan into automated tests. I don't find any tests that failed or are missing."
0,"No, The functions are not too long, the code does not need to be extracted into seperate methods. The comments are descriptive enough. The code follows the Ruby Style Guide and is DRY."
0,"Yes, there are comments for each method, and they are descriptive enough to tell what the method does, and how it does it."
0,Team presented documentation with proper diagrams.
0,Problem explanation is given for the problem and proposed solution. Various diagrams and flow chart makes it easy to understand the problem.
0,"Yes they have considered all the functionalities mentioned in the problem statement and came up with justifying solution to this problem,"
0,Documentation looks good to me.
0,The diagrams are good and follow the conventions.
1,"All of the system design things are explained in the flowcharts and uml diagrams. But, more textual description to describe would be better for the reader."
0,The cases described in the Test Plan are all working.
0,"The code looks clean. As it was a refactor story, DRYness is ensured."
0,The comments look good.
1,The design seems to incorporate everything. But they should list the issue and provide the solutions accordingly for that.
1,"Testing Plan, project design and how they target the issues mentioned in the doc should be described in more detail."
1,"Authors could have included a gist of formula proposed so that reader has the option to choose between reading the entire document, currently readers have to read the document to understand what's going on."
0,It is explained in exhaustive details.
0,They have added tests and provided screenshots for each as well.
1,"I see comments for new code which was added, maybe they could be more descriptive but they describe the functionality well enough."
1,"In my opinion, get_team_color and obtain_team_color mean almost the same thing, so maybe obtain_team_color could be better named to reflect its functionality, or maybe rename both. Other than this issue, the code seems good."
0,There are sufficient tests with all the edge cases covered.
0,UMLs and flowcharts are given in the design which are always welcome. This helps in understanding the design in a better way
0,The problem statement and the procedure followed is explained in sufficient detail. There are a good number of screenshots provided as well.
1,"Though the design incorporates the formula and how to deal with calculating the score based on the self review as well, it does not include any details of the view aspects of the issues given"
1,As stated before the design document doesnot include the details for UI or the front end part of any issues hence i feel the document is still incomplete
0,All tests pass.
1,"Code follows the suggestions from code climate. Which makes it more Ruby way and follows the guidelines.
There are some mwthods having long names, for example get_css_style_for_calibration_report. This could be renamed as get_css_for_calibration_report
another example get_each_review_and_feedback_response_map"
0,They've added comments for each method. They are descriptive and concise.
0,Variables and method names are suggestive of functionality.
0,Test plan looks thorough and covers different cases.
0,"1. Yes, the writeup is clear about the changes made and reasons for changes."
0,"Yes, the writeup has various snapshots and also a video included, which makes it easy to understand for the reader."
1,"The coverage decreased. Yes, the team did the testing on Robocop. They added test cases for the review_mapping_helper.rb."
0,The write up is concise and is self-explanatory. I found it easy to understand.
0,"Yes, the solution was clearly explained and very easy to understand"
1,"Great! another team which specifically mentioned what design pattern they are going to use! While comparing to the previous they did not mention which specific file (object/class) they're referring to, but I'll give them a pass"
0,"The project is simple and concise. The code changes are explained logically and the flowchart does a great job of showing the design. Overall, it is simple enough to be easily implemented."
1,"They have included the test plan and have explained the test strategy for each individual scenario. If given the explanation as to which functionalities they are trying testing, that would have been even better."
0,"The proposed changes look good.
The changes right now do not look smelly. Though the code to improve upon last sem's code would be worked upon while the project is ongoing and it will be checked later on.
The checks look sound enough. No need for new gems, I think.
The expectation is that since they are improving on last sem's code, the response time will same or less.
The design has been well thought out and seems appropriate enough."
0,Yes. The team keep on submitting changes throughout the project. There are 84 commits and the most recent commits was in round 2.
1,No test cases added. This also causes test case coverage to reduce.
1,Code commenting is missing. But the code is written cleanly making it readable.
1,"Coding is really clean and good refactoring. Coding standards have been followed. Some code commenting is needed.
Build seems to be failing due to some code not implemented yet. Test coverage seems to reduce, so some new testcases need to be written for the parts that are working."
1,There is no explicit test plan section. But the write up has good details about how to test the functionality they implemented. Some screenshots would make it perfect.
1,"Write Up should have some code snippets explaining the functionalities added. Without this, it becomes tough for the doc to remain coherent. The Functionality and Testing part is explained in good details. Some screenshots would greatly improve the overall doc."
0,Yes the feature work correctly
1,1) Refactoring need to be done in average_grade function.
1,"In the form for adding bookmarks, when user enters invalid url then it flashes notice then it is invalid.
Functionality is fine but instead after invalid form message user should be provided original form to edit the url which is not shown here.
It will me much more intutive."
1,No. test cases for issue related to bookmark page back-link.
1,"The writeup well explained issue, solution and how one can check/verify the solution with steps.
But it does not include the screenshot and test section.
Also, discuss the way you come up to the  solution."
0,"The documentation should have:
-> what's the issue
-> way to resolve this issue
-> solution
-> what was before and what is now (use screenshots to show that)
-> corresponding test cases"
0,"The test cases have been extensively written,ensuring all the scenarios are covered as long as the functionality is concerned"
1,"There are very less number of visual diagrams included.To explain the design,t is suggestive to include  UML or such visualization"
1,"Th design appears simple as the requirement is broken into pieces and resolved,but the design could haven been explained using UML diagrams or flow charts for better understanding"
1,"The design appear to be good,but here are few points that can be improved:usage of design pattern and visualisation"
1,"The test plan is a little thin, with just a description of the base test case. No other tests cases are included."
1,"No UML diagrams are used to describe the flow. However, UI screenshots are relevant and helpful."
0,"Yes, it appears so."
1,"It includes UI based testing which is shallow testing, but test plans for specs should have been added."
0,"They have added screen shots and thus, all the issues can be understood from it. For implementation they have made use of mock views which makes us easy to understand."
0,"Yes, the authors have explained the changes and in few cases they have even explained how to implement the changes along with the the files required to be modified."
1,"as it is UI improvement project, there might not be any rspec test. but yes they can write some capybara test cases to test what they have modified."
0,"as it is more on the side of the UI improvement, I think they do not need to show any diagrams to depict the flow."
0,yes the design is very clear and simple. the layout of the table and screenshot of the pages makes it easier to understand.
0,"yes the proposed design looks sound and complete as per the problem statement. 
it did address all the aspects of the problem definition."
0,"yes, changes to be made are well described by them. I can clearly understand what they are trying to do to improve the UI design."
0,It does a fair job of describing the changes made to the system
0,Yes the design looks impressive
0,"yes, the design appear ti be sound , following appropriate principles and using appropriate patterns"
0,The design includes appropriate test plan to test each of the test scenarios.
1,The documentation does not include a UML flow diagram to describe a project flow.
0,"Yes, the design follows a simple logical flow."
0,The design is simple and follows appropriate design principles.
0,The authors have explained it reasonably well.
1,"The test plan includes the steps to test the application flow. 
Nothing was mentioned about the tests the team will be writing to cover the bugs they are going to solve.
May be some of the tests can include:
- checking whether the anonymized names are getting generated or not.
-Placement of checkbox or the space adjustment for different features etc.
 
-"
1,"The team included the snapshots of the issues that are expected to be solved.
Apart from these there are no visual aids for the reviewers to understand the classes/ entities involved or the flow diagram.
May be a few of them can be included if felt appropriate by the team."
1,"The motive of the team is pretty clear about what needs to be fixed and is clearly mentioned in the wiki page.
But there is not much discussion in code point of view on the wiki page so not able to comment on the design patterns/principles that the team is anticipating to follow.
May be the code snippets of the issues where the team expects to make changes will give an idea about the work that the team will do and will be easy to give suggestions.
And since, the project is all about bug fixing, there can't be much design patterns involved as the team will fix the bugs on the existing code."
1,"The team listed the files that will be modified.
Also, mentioned in few places the code variables which will be corrected.
Apart from these nothing much was discussed.
May be a few code snippets of the areas where the anticipated changes might take place will give more clarity for the reviewers since the project exclusively deals with only issues and not new enhancements."
1,"manual test is good, but lack of automated tests"
1,"no URL image included, just text description"
1,"looks like simple, can fully understand what they are going to do, but no URL images included"
1,no design pattern included in wiki page
0,"yes, text with an image is good"
1,The test plan is basically program flow. Although a few more edge cases could have been included.
1,"It would have been even better if the test plan can be explained as a flowchart, it would be easy to understand and comprehend"
0,"Yeah, the description is as simple."
1,"Document Organization is hard. Traversing the document is a bit hard
."
0,"Yeah, Explanation was clearly given for whatever stated."
1,Test plan cab be improved. Right now test plan is very abstract and does not indicate the components of code which are going to be impacted by the proposed code change
1,No use of class diagram and UML diagrams. It will improve the readability of document and will help to understand the flow of proposed work in better way.
0,"yes, the design appear to be sound, following appropriate principles and using appropriate patterns"
0,"Yes, the authors adequately explained the changes to be made to the system"
0,Yes it includes.
0,The changes are clearly.
0,Yes it is simple and easy to understand.
0,Yes the design appear to be sound.
0,Yes they adequately explained the changes.
1,"Yes, it includes a test plan. But they have just mentioned the steps needed to test the plan. They could focus on the corner cases which may not be discovered easily and test the system on that. Explanation on these should have been provided."
0,Yes. The design can be understood easily. The explanation provided for their approach is clearly expressed. They seem to have a clear idea of what they have to do with the project.
0,"Yes, they have explained their approach neatly. In addition to that, they have added the table to further illustrate the design. They have studied the code base and have suggested relevant changes in the appropriate files."
0,"Yes, the changes are well explained. They have used screenshots and tables to juxtapose the given problem and how their solution solves it."
1,"Yes, their test plans are included. But only some step by manually to check whether their function works.
I think they should also include their Rspec test cases.
They can also list some screenshoot for their manually testing expected output."
0,All their diagrams are clear and describe their design properly.
0,"Yes, the design is simple and clear. And all sentences are easy to understand."
0,"Yes, their design document includes appropriate principles and using appropriate patters."
1,"Yes, they have explained a lot about their changes. 
But I think they can perform better if they include more details about how they will change the related controller and view.
They can include more details about their test plan as well. Which has already mentioned in the test plan review answer."
1,They did not make use of UML diagram but they did make use of mock view of their implementation which looks easy to understand.
0,Design appears to be appropriate.
0,It was easy to understand from their writeup about what needs to be done and how they are going to do that.
0,"Yes, it describes the complete functionalities along with which files need to be modified and a brief description of their implementation strategy."
0,I think their writeup is complete as it consist of all required fields.
0,the project does not need any visual aids as it is mainly focused on the User interface improvement. layout of the table is also given for their proposed solution. which i believe is good.
1,Changes proposed by the authors are good but not descriptive enough for every one to understand the proposed changes thoroughly. they did said which files they are going to update but did not said why that file and that method in particular.
0,Problem statement stats things that needs to be done. and their design document stats both of these problems and proposed solution.
0,I believe from the problem statement that they are covering almost every aspects of the requirement.
1,Issue-based functionality not given.
1,"UML Diagrams have not been used to explain the issue, however snapshots of the issues have been attached in the document."
0,The proposed changes look good to me and would address both the issues accurately.
0,The authors have described both the issues assigned and the proposed solution in detail along with the design document.
0,The design document incorporates all of the functionality required.
1,The authors should have included UML diagrams to explain the flow.
1,"Well, the team has not depicted any UML diagrams or the flowcharts for the reviewers to understand the flow which when include will be nice apart from the screenshots which were already available in the final projects document.
 
But whatever is included, does the job."
0,"Upon studying the expected outcomes and the teams anticipated changes, I feel the project is a set of issues which needs fixing without any drastic addition of changes/files. So, I don't think there will be some issues until I go through the changes done by the team toward the end of the project."
0,"Yes, the team clearly mentioned the problems with the feature and even the code files and the locations where the changes are expected.
Looks like the team has done the basic ground work. The design incorporated all the expected functionalities."
1,Everything is pretty clear but can include some more information about the code snippets and the locations where the changes are expected as the team seemed to be pretty clear about what is to be done.
1,"no URL images, which make me hard to understand. so I need to read all the text dexcription for a long time to fully understand what they try to do with these issues."
1,"in their design strategy, "" In the _review_report.html.erb file, replace the ""team_reviewed_link_name"" with randomly generated team names.""
this may cause the code ""smelly"", maybe they should just use a anonymous or else signal, use the exist random name is not necessary."
1,"almost good, but lack of design pattern and image description (like URL)"
1,A more interactive explanation could have provided.
0,Their procedure was well explained.
0,Test Plan is also clear.
1,More pictorial representation will be good.
0,Design looks good to me.
1,More pictorial representations can be used to present information properly. Please add more flow charts and UML diagrams.
0,Yes documentation address all the required changes mentioned in the problem statement.
0,Document looks good to me.
0,It is drawn in good quality! good job
0,I think the author had made a good plan of it.
0,It is in good explaination.
0,Yes it incorporate all the functionality required.
0,They have completed all the parts in design doc.
1,No high-level diagrams used. Though the text is intuitive it would have been better if they could have added some basic UML diagram like a use case or activity diagram
0,"They are adding changes to the relevant files. Also, they are doing some refactoring as well by removing the duplicate header lines. The design looks simple to implement and easy to understand."
1,They have suggested good changes to improve the user experience and effective utilization of the web page space. While the first three points in the description seem easy to understand the last one seems a bit insignificant. They could have provided more explanation on it.
1,"Yes. They have given good screenshots of the current situation of the page and how they can improve it. Also, they provided a four-point implementation plan for the functionalities. The last point ""Get rid of Review Round 1"" is a bit unclear. They could probably shed more light on it. I think the existing one looks better."
1,Only UML diagrams are missing. The rest of everything is covered.
1,They only use some mockups of screen. But I think as their task is up to 10. Table may be necessary for them list all tasks and solutions clearly.
1,"They gave out several solutions for a task, and said that they will see which is better. I think they should give more effort to compare the results after they finish the whole document.
And in the summary page, the design strategy part, there is a typo ""conmment"". They may mean ""comment""."
0,I think all their explanations are easy to understand.
0,"Yes, they analyze five tasks for main page and five tasks for summary page. They also listed design strategy for all the tasks."
1,"The project purpose, project design and test plan are all stated. But I think their test plan should include more details about Rspec test.
Beside, they combine the project statement and project design together. If they splits them up, it will be more clear."
0,"Yes, the code looks like ready to be deployed when merged. The checks are passing and functionalities are also working properly when tested from front end and rspec."
0,"Yes, the system works perfectly when tested from the UI. I appreciate the how to test section in the documentation which helped me a lot to easily test the functionality. I got an email when I added myself as a participant from CSV file."
0,The build passed the Travis CI. All checks have passed and there are no conflicts.
0,"Yes, a lot of changes have been made during round 2. Almost 40-50 commits have been done during round 2. Looks like a lot of efforts have been given."
0,The code is written nicely. Standard naming convention and Ruby style guidelines are followed. It would have made the code much more readable.
0,"Yes, I think the code is ready to be deployed onto the production server. No the project need not to be done from scratch."
0,Yes the feature seems to be working as per the description.
0,Yes the team has added one test case and updated the other. The new test case cover pretty much for the work team did
0,Yes the build pass in Travis CI. No there were no conflict that must be resolved.
0,The team has come updated the code and implemented the feedback provide in the 1st round.
0,Yes I can see new commits . The team have updated test cases in 2nd round
0,"Yes, the code is ready to be deployed onto the production server, the code also contains comments which explain the flow really well."
0,The writeup is really good and each step to be followed while reviewing explains well. The writeup could have explained a little bit more on the test cases as what test cases are doing exactly.
0,Yes the system operation from the UI works as expected. The project does not require any refactor or fixing. The issue is fixed and the features work as intended.
0,"Yes, the team has added the test cases and the code coverage increased. The newly added test covers a large range of the project. lets us look at a scenario where we add the headers for the CSV file, what is the error it displays or it does not import the CSV file at all because the values in the fields make it invalid."
0,I checked the pull request and the Travis CI build passes. There were no conflicts for the pull request.
0,"Yes, there was a new code committed during the 2nd review."
0,The code is written well which follows good naming and does not contain complicated functions. The code looks dry and also contains comments.
0,I think the code can bed deployed on the server after adding some tests cases for csv upload and mail check functionality.
0,"The write is pretty verbose and clearly states the reason behind the project, and the test plan."
0,Yes the system works as it is supposed to work.
0,The test cases cover the functionality.
0,The pull request passed successfully. And there are no conflicts
0,They have committed new changes in the 2nd round
0,They have added new comments. There are no coding guidelines violation.
0,Absolutely. This code looks good and can be deployed. All the test cases were passed in the build so it can be deployed.
0,One of best writeup among all the reviews. They have covered all the necessary details in the wiki doc.
0,Yes it works as intended. Team has given all the necessary steps to test in the test plan and it really helped.
0,Test cases have been added. Coverage decreased but as far as i know coverage is not accurate always.
0,Build passed and there aren't any conflicts.
0,There is significant amount of work which has been done in round 2. I can see many commits for round 2.
0,There aren't enough code changes to judge on the code quality or design principles. But comments has been added properly. Over all code is good.
0,I think it might be ok to be deployed.
0,it's pretty good written
0,yes it worked
0,yes they added the new test
0,yes they passed it
0,yes the new code was updated
0,Well done !
0,"Yes, I think some part of their code is ready to be deployed onto the production server."
0,I checked their wiki page. The writeup is good.
0,"Yes, everything works."
0,"In the first round, there were only manually tests. But this time they added rspec test and passed the build."
0,Their build passed the Travis CI.
0,There are many commits after the 1st round. I see they were trying to pass the build in Travis CI. And they did. Great work.
0,The code is well written.
0,I got an email when I tested by adding a participant to an assignment
0,changes done are self-explanatory.
0,No new method implemented. And the changes done are self-explanatory.
0,Just adding an if condition resolved the issue. No other variables or methods added.
0,The task seemed to be complicated but apparently a simple if statement resolved the issue. The identification of the root cause of the problem is praiseworthy.
0,"I tested by adding a participant to an Assignment. Then I got the email in the entered email address. So, the functionality seems to be working."
1,Test plan is not mentioned. Testing is not done. Can't evaluate this section.
0,"The team did not have any method to implement. The if condition which they have added, doesn't require comment as it is intuitive by reading."
1,"As such, the team did not have to change or add a lot of code. Code which is added is fine and readable. Variable names are also good and understandable. But, I would like to give a small suggestion. In file ""app/models/assignment_participant.rb"" on line no 203, the variable name is ""attributes"" which should have been more descriptive name (like ""student_attributes""). Maybe ""student_attributes"" can be wrong, but I couldn't understand what attributes they are by looking at the code."
0,"Yes, the ""Brief Introduction"" and ""Problem Statement"" sections are well written and they explain what problems authors have tried to solve. I could understand the scenario in which students were not getting e-mails.
They have also mentioned what is the outcome of their work (i.e. e-mails are now getting sent upon account creation using anyway)"
1,"The authors have not included about any Unit test, functional test or automated test in the plan. However I believe that the user will include those in next round."
1,"I didn't find any comments for the changes made. Also, I feel that since the changes were made in between the functions and were already explanatory, comments may not be needed."
1,"Write up is good. But I feel that there are lot of unnecessary screenshots in the write up. Instead of it, if it would have have Change Flow graph, it could be better. Like wise, author'c could paste the code and explain in the wiki.
Moreover I cannot see Author's name in the wiki"
1,"I couldn't find any test plan. Moreover, I was able to see that some test failed on pull request."
1,"The link provided does not work(The site cannot be reached), so I was unable to test but their screenshots give good clarity. They did not cover some of the edge cases. what if the CSV file has an invalid email id. what if the student already has an account but with different mail id."
1,No tests added. I think adding automated tests will help test the feature better. It gives an idea of what test cases we have to implement.
1,The code added by them is very small. The code has been written well and it follows the ruby style guide. Adding comments for the lines will improve the readability.
1,There are no comments for the code. The code looks easy to understand but having the comments gives more clarity as you have added a few lines. Each line can have a short comment which gives more clarity.
1,The naming of the variables and classes looks good. The pull request failed the Travis build. I cannot see any additional tests written.
1,"They have mentioned steps to test the feature. The steps give good clarity but the link provided for testing the feature does not respond. They did not cover all the cases, what if the CSV file has an invalid email id. Does it import the CSV or it gives an error."
1,"The authors did not explain any reason for doing what they did. They did not describe any design pattern or principles if they have used it. As their implementation includes modifying the existing methods it may not involve implementing a new design pattern. For their feature, they could have used a composite design pattern, if possible."
1,"The writeup explains the problem clearly but they could have explained a little bit about the present implementation and they could have explained their intentions more clearly. Yes, I can understand what the project does."
1,No new test case have been written. Could have aded a test case for csv upload and mocked mail behaviour or added mail check in existing test scenarios.
0,The method names and variable names looks fine. There were no major changes in the existing code.
0,The wiki page is pretty explanatory with images to shows details.
1,"Bug is fixed and it's working. I couldn't think of any edge case here, so looks good. 
Automated test cases is also one of the requirement for the project and no work has been done upon it. Please write automated test cases for this."
1,"There is no test plan in the wiki doc. Also, no changes in any rspec file for the test cases."
0,"Code looks good, by looking at the changes which is really really less. It's difficult to give the feedback on these points."
1,"There aren't any new methods in this project. Also the work would have been be very less as few requirements of the project itself has not been considered, may be team could have added comments for the already existing methods."
1,There's no test plan for the implementation. Only the screenshots for the proofs are attached in the wiki doc.
1,"Writeup explain why the changes has been done in a particular way. There are only 10 lines and i think it has been explained properly in the wiki doc. Since it's a bug fix, design principles were already followed so it's difficult to comment on the design pattern for this particular change. 
 
Also the wiki doc or problem statement in it doesn't mention the requirement of writing the automated test cases which i think is one of the requirement when i checked in this sheet. https://docs.google.com/document/d/1V8pYxo_qMC9xzJcl8CSjxOXNofGh5LZOnExVVU5SnAE/edit#heading=h.j8j7gyh0phok"
1,Writeup is fairly decent for the bug but writing test cases was one of the project requirement as there's not enough development work in this project. So team should have spent enough time on writing test cases and plan.
1,"I've tested the code as given in the wiki page for assignment - Final project (and design doc), and faced the issue below: 
The following errors were encountered during import.Other records may have been added. A second submission will not duplicate these records.

Mysql2::Error: Incorrect string value: '\xEF\xBB\xBFRam' for column 'handle' at row 1: INSERT INTO `participants` (`type`, `user_id`, `parent_id`, `handle`) VALUES ('AssignmentParticipant', 7625, 834, 'Ram')

I did receive an email, but don't see the participant in the list of participants, as expected."
1,"Though what exactly has to be tested has been clearly shown with screenshots, the RSpec file that is used to run the automated tests is not present in the document. Maybe adding that will help in running these test cases to check for consistency in the code, and also coverage?"
1,"Comments are missing, and I believe would help in understanding what each method call is doing and why existing code has been changed."
0,"The naming convention seems to be alright, as whatever has been refactored has been done with existing code, thus making the author not liable for names being used."
1,"Though a Test Plan section is not present, the manner in which the project has to be explained is clearly written with screenshots. Pre conditions, such as the csv file and sample data is also being shown, which helps in testing. The only issue is the RSpec file used for testing the application is missing in the document, which would've helped. Also, mentions such as what happens when anything other than an email is passed, and what is the exception handling being used could've been mentioned as well."
1,"The author clearly shows screenshots of the code changes after pull, showing the code has from what it previously was. The problem is also explained briefly before digging into code changes. But a more descriptive explanation of why such changes had been done to those specific files would've helped in the reviewer understanding the code, and the approach taken to solve the issue. Like for instance, why a line has been commented out in the mailer.rb and not removed completely? So, in the writeup instead of just mentioning file changed: <<file name>> , more description in regards to the same would've been nice."
1,"The scope of the project is understood from the document, and how to test it on a high level is also clearly shown with screenshots. My only issue is the specifics. Code changes and why code has been changed the way it has, can be more explicitly shown, which will help later down the line, when the code is merged into production. Also, maybe explain on the line you have mentioned in the document below: 
""Issues were found in some parts of code as highlighted by the snippets shown below""
What issues were found and how were they fixed? That would definitely make the document more specific to the issue being solved."
1,"1. There are bugs in a critical feature. 
2. Some features are not implemented."
1,The code has only one of the following characteristics: (i) is DRY (ii) follows Ruby style guide (iii) is commented (iv) does not contain long methods
1,"(1) some of the functions are too long;
(2) more comments are needed, because you have trouble following the code;
(3) the code does not follow the Ruby Style Guide
(4) some code that is not DRY."
1,"1. There is no comments for each method.
2. They do not explain clearly what the method does."
1,"1. The write up is less than passable.
2. Less than half of code changes are explained
3. Very little explanation is given for the approach they used."
1,"1. There is no test plan in their writeup.
2. They do not explain how and why the do the work the way they did.
3. They do not have a video to show their test."
1,"1. The writeup indicate the functionality the work is related to.
2. I cannot understant clearly how they did the work."
1,"No comment here. Eventhough the code is clearly, but I think it will be better if they write some comment here. Well done !"
0,The naming is good :)
1,I can not see the test plan here. But the screenshoots seem pretty good.
0,Yes they have written the wiki correctly and so detailed.
0,The write up is clearly enough
1,"Their link is broken. I can't test it manually. But I checked their wiki page, it looks like the email feature is working."
1,They did a manual test. I can't find their test code.
0,"Before methods, they have comments."
0,Their naming looks good.
0,The code is readable and well-commented. No DRY problems were found.
0,The team did a lot of commits. But it seems most of them were for passing Travis build test.
0,The code passes all Travis build test and there are no conflicts with the base branch. Lots of commits were done to pass the build test. May be could have been achieved in less no of commits.
0,Many new test cases were added. Some old ones were also modified. Don't know why there is a blank line in spec/models/user_spec.rb line 35 and in config/routes.rb in line 6. It can probably be removed. The coverage was found to be decreased by 2.6%
0,I got the email for account creation and csv upload worked perfectly well.
0,The writeup is very well written. It was very easy to understand because of screencast video and how to test the changes section
0,"Yes, they explained the work they did on their wiki page. They provided a log of screenshots. More comments and explanations would be great."
0,It work wonderfully. Good job!
0,The  funcitons seems good to me.
1,"No test code. Also, the failed the ""Participant#email sends an email to the participant"" test case"
0,Detailed test plan included
0,"Document contains the relevant diagrams such as flow chart, execution flow, etc. to clearly describe the intended change"
0,The proposed design is to-the-point and accurate.
0,Document contains the appropriate software principles and patterns.
0,The changes are appropraitely descibed and mentioned in the document.
0,They have added the flow diagram for different functionalities/cases.
0,Yes the design is simple and easy to understand.
0,They have used the existing function/made to changed to the existing one which will help to dry code.
0,Yes the team has explained what changes are needed to be made in the system.
0,"Yes, test plans are thoroughly"
0,The design appears very simple and clear in flow charts
1,"Did not list any design principles or patterns, but the proposed solution was very clear and easy to understand"
0,"The team listed the proposed solution and the files that likely to be changed, which is good"
0,"Yes, the test plan is clear to understand."
0,Visualisation is clear and easy to understand.
0,"Yes, the design is complete and sound."
0,"The author created four test plan for the four issues. Any issues test plan is explianed by the author. For example, the author stated two cases of the wrong anonymized."
0,The flowchart is easy to understand and precisely explain the design.
0,The design appear to be simple since the author added the flowchart. which explain the problems they have and the possible solution to it.
0,The design appear to be sound while looking through the Proposed Solution. The author give solution to the wrong anonymizing of the team naming and the anonymized view for student.
0,"The most impressive part of the document, a very detailed test plan."
0,The diagrams are really neat and are very effective in enhancing the reader's understanding the proposed solution.
0,The document presents the design in a way that makes things really clear to the reader.
0,No problems with the design.
0,Every change proposed has an explanation to support it.
0,there are visual aid present for each case and it is well described
0,Yes the design is simple and easy to read
0,The design is well documented and consist all the section with well description
0,yes the do
0,Yes they include the test plan.
0,Yes the figures are clearly described.
0,It appear to be simple and easy to understand.
0,It is sound and appropriate.
0,The authors adequately explained the changes
1,"The test plan seems comprehensive. However, the authors have mentioned edge cases at 3 places viz Anonymised view for students, Impersonating students using anonymised names and anonymizing team names which shows that those functionalities will be thoroughly tested for functionalities."
0,The authors have used visualizations which explains the changes that are required in the system . The flowcharts are clear and lucid which makes the solution easy to grasp. It would have been better if more flowcharts were included to cover other portions of the project .
0,"The design appear simple. In places where OO concepts are required, the author has done a good attempt to paste the code which would be extended which shows the clarity of thought in designing ."
1,"The design seems well thought-out, but still vague in some areas. While they talk about where they plan on implementing changes code-wise, they don't refer to it file-wise."
1,The team gives detailed steps on UI test. They also need to get the Rspec included.
1,The visualization is good. But the second graph seems a little bit unnecessary to me.
0,The design is as simple as possible.
0,"Yes, it is well designed"
0,"Their design include the test plan and there are five test cases in it, which thoroughly test the system including corner cases."
0,The design is simple enough to highlight it's point. But it's not too simple and I could get the system structure and the relationship of different table.
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contians  Introduction, Problem Statement, Proposed Solution and Test Plan."
0,The design document includes the test plan. The test plan includes all the part they should design. And the plan includes several cases related to their design problem.
0,The figures shows the design flow related to anonymized view clearly.
0,The design appear to be as simple as possible. There is nothing in their document that is unrelated to the project.
0,"The design follows appropriate principles and using appropriate patterns. But it would be better if they write more details about the ""Anonymizing Team Names"" section."
1,"They can write more details about the ""Wrong Anonymized Names"" section. They can list which files to be modified and what method they plan to add."
1,"1) They well explained how to test from UI with different roles
2) There is no plan about automotive tests like RSpec"
0,"1) The diagram does comprehensively describe how their design works
2) It is easy to understand and really helpful"
0,"1) The design is simple and clear
2) It is easy for reader to follow
3) Diagrams also elegant enough"
0,They have added flow diagrams to explain the flow.
0,The methods given in the wiki looks fine.
0,Yes the team has clearly explained the requirements and details of the improvements.
1,"They have added the necessary details. Just one thing, more details about the anonymised view functions can be added."
0,"The proposed changes are clearly stated along with the code, flow chart and pseudocode, which is very good and easy to understand"
0,"Yes, the design is perfectly corresponding to the functionality requirements"
1,"Everything is pretty completed except for the User flowchart and design part, the flowcharts are stated in above sections so its good, so the team should do a UML diagram to explain the whole structure for easy understanding"
0,All the necessary visual aids are present.
0,The explanation is not hard to follow.
0,The design is complete.
0,"The flow chart added in the wiki, which look concise and simple, and excatly tells the reader about their design strategy."
0,They give the solution of the each issue and they all make sence. The solution they make is just precisly fixing the problem.
0,"Their design strategy write about the Impersonating Student Using Anonymized Names,Anonymized View For Students, Anonymizing Team Names and wrong anonymizing names. Their flow chart looks concise and percise.Test plan contains the most test cases also include the edge cases."
0,"From the doc, I konw that the team should fix the bug of Students cannot switch into and out of anonymized view, allow impersonation of anonymous usernames , fix some things are not anonymized and Team names are also not anonymized. So i can see the author list all the problem in the wiki doc and describe their way in solving it."
0,"The design doc is quite comprehensive, since it's include the design strategy, test plan, user cases and etc."
0,The changes proposed are detailed and the explanation is to the point. They have mentioned the files that they will change and also what changes will they amke
0,The design document is well made and include everything
0,Yes the UML is clearly and easy to follow.
0,No problems. It's all done.
0,It is written in gooe explaination
0,Yes it incorporate all the parts.
0,Well done . It's in good completion.
0,The authors have made use of flowcharts to explain the expected output of the functionality. This helps the user in grasping the information without having the need to read through the text. These flowcharts convey accurate information without overloading it with details or even does not give a too high level design.
0,The authors have explained their solutions in concise manner ensuring that it will be understood by newbie. The code snippet along with the flowchart attached points to the exact grey area and the solution gives clear view of the changes that needs to be done and how it should be done. This would ensure that the design document can be implemented by a new developer who is not familiar to the system.
1,"The authors have incorporated all the functionality that have been mentioned as a part of design document . The descriptions in the problem statement are crisp, however, these descriptions can further be improved to include the importance of the functionality to the users and the potential effects or in conveniences faced.Eg in Anonymised team name section, the authors can mention about the reason why anonymizing is required and how it not implementing it can breach privacy."
1,"Excellent work is done in explaining the solution. The purpose of the project is clear.However, there are a few areas which can be improvised like test plan should have been more elaborate like including the testing details and edge cases that will be taken care of, the problem statement should including the inconveniences caused and potential effects along with existing inconsistencies."
0,"I believe that the explanation is quite good, albeit a little confusing if you aren't familiar with what the ""anonymous"" feature of expertiza already is."
0,It seems to intend to implement complete functionality.
1,"The visual aids are good. From my personal perspective, the second graph are not necessary."
0,Design appears to be sound so far
1,"The Wrong Anonymous View solution is not specific enough. The Anonymizing Team Name solution are not adequate enough, it is a little bit too hard to understand the solution."
0,"Yes, they did get all functionalities included."
1,"Test plan are not complete. Besides, it will be better if they can imply the files need to be changed."
0,"Their diagram is helpful, follow the conventions and provide enough details."
0,"(1) They added methods to correct classes.
(2) I don't think the new design may potentially make the code ""smelly"".
(3) The new design is simple enough.
(4)I don't think the new design will add load to the system.
(5)Their design is good enough."
0,"Their explanation is clear and high quality. I'm shocked that they have accomplished their function, list the code and almost completed the test case."
1,"1) Overall is very good, each part has been explained in details
2) It would be better to have a diagram for the whole solution
3) Anonymizing Team Names could have more explaination"
1,It mentions they will have automated tests but don't say how. I'm curious how they plan on automating testing for checking if a user spent more than 3 minutes looking at something.
0,"Yes, the test plan is presented and the UI testing was very clear and could test the whole project"
0,The test plan is very thorough but a little vague.
0,"Yes, they do have test plans."
0,yes they are planning to test the functionality that they are planning to implement. they have decided to create test suite using rspec.
1,"The test plan says, they need to add test cases to the previous code{Too vague}
Test to verify information is correctly displayed to user{info taken from database and displayed. you don't test rails}
To check if onFocus/onblur is working/popup is working --> Might not be possible to automate"
0,Good extensive test plan.
0,The test plan is complete.
1,"The design does include a test plan. But it lists the scenarios or cases for which the tests will have to be implemented. They could at least specify the rpsec files which their codes would be affecting as they have identified the controllers which they would be modifying.  
For example; they said they would be modifying the response_controller.rb and the response_times_controller.rb. Hence any modification in these files would require handling of the corresponding/new test cases for the functions in it. Like the response_controller_spec.rb is a test file which they will need to modify."
1,"Yes, there is a test design plan.
The team just mentioned about the high level tests they would like to perform.That includes:
- Tests to validate the previous teams code but not sure what they want to test in that. May be mentioning of the functionalities would give a clear picture.
-Also, team can include the tests that can check whether time is getting recorded on expertiza page/ when on external links as there is no mention about it.
- Also, the time out message which appears after 5 min of inactivity can be tested. 
May be more detailed test plan can be expected at the end of project supposedly."
1,"Yes, there's one thing on coverage though: it's about the test lines of codes with respect to the new code, doesn't necessarily mean that it'd increase on tons of new lines of code. The files with rspec tests could have been specified along with the descriptions of the tests."
0,"Yes, the design doc includes a test plan, the authors plan rspec tests and manual UI testing, and yes they really test all the functionalities."
0,"Yes, the wiki document provided a test plan which explaining the features that they are testing and seems to be testing properly."
1,They do have a test plan section but haven't mentioned what tests will they be writing.
0,"Yes, the diagrams in their design describes the intended changes clearly."
0,The visual aids help communicate the ideas very clearly and I get a greater understanding of the changes to be made.
0,"The flow chart is very clear and easy to understand, another recommendation would be to include a UML diagram for readers to understand the whole project easily"
0,yes the visual aid is plus point to understand the flow of the project. They are descriptive enough to get the knowledge of basic flow.
0,The flow chart displays the logic in a understandable way.
1,"The database visualization is simply derived from E1791 and is trivial.
For the instructor behavior diagram the step to click on a particular student is missing. Also see the reports section in expertiza.  
They said that the problem with E1791 was ""Currently, if a student has an external link open as well as the Expertiza page, time is being tracked for both."" However, if you look at their flowchart: the same problem persists."
0,Very well constructed complex flow chart explains great deal.
0,The workflow diagrams in this document are really helpful in understanding what they are implementing.
0,"The team has implemented 2 flowcharts, one from the student's perspective of how the individual times are calculated and saved, and the other from the instructor's perspective of how s(he) can view the total time spent on a review. Both these flowcharts are very self-explanatory. They properly describe the working of the system and I cannot find anything wrong with it."
0,"The flowchart clearly indicates the flow the reviewer is supposed to test.
Also, the flow chart incorporates the changes that are going to take place.
The snapshots also indicate the changes that are going to take place in the UI ( such as a clickable link for the popup)."
0,"A very thorough diagram, pretty helpful in understanding the flow. Promising flow, good research behind."
0,"Yes, the authors have made use of flowcharts which are understandable and clearly describe the functionality and the changes that need to be made to the system and are necessary."
0,They have added UML diagram which explains the flow of their work.
0,The team has used enough visual aids and figures to explain the working which is easy to follow for the reader and explains the work better.
0,"yes, according to their explanation about the design, it is simple but practical."
0,I think the design is simple and the plan is clear and easy to understand.
0,"The flow chart is very clear and easy to understand, and the proposed solution is very easy to understand and follow"
0,yes design is very neat and clean. Also it is very simple to understand for even those people who does not have experience of expertiza.
0,Yes there are no unnecessary steps.
1,"Their design implementation and visualization is heavily derived from E1791, the project which they are extending their work on. The code level changes are extremely simple to understand. 
[I am a little dubious about the code level changes as I think you may need a different approach][There is reports tab for graphs][Creating a new model might not be necessary]
Also they don't mention certain intricate details: it is mentioned that they are creating a new controller to handle popups, however no mention about how they are going to connect the mvc architecture. 
They said that the problem with E1791 was ""Currently, if a student has an external link open as well as the Expertiza page, time is being tracked for both."" However, if you look at their flowchart: the same problem persists."
0,The design is simple and well built.
0,Yes it is easy to understand and simple.
0,I personally find their design really modular and having less interdependency. They have broken down the main problem into 3 subproblems and have explained the proposed solution for each. The solution also contains the possible files that can be modified.
0,"They've demarcated the changes well enough, and stated exactly how well they'll proceed with every change. The problem statement itself is demanding enough, and that makes the implementation complicated as well."
0,"Yes, the design is quiet simple and with minimum complications and easy to understand. The authors have made use of flowcharts which helps a lot"
0,They have provided the Use Case diagram which helps understand their work
0,Yes the design appears to be simple and well explained.
0,"Yes, their design is sound and follows appropriate principles."
0,I really like the design and especially appreciate the table showing proposed database changes.
0,The design corresponds to the project description and the design pattern was well stated.
0,"yes, the design is complete enough to handle all the issues that has been given in the problem statement."
0,"Code-Level specifics including proposed files to be changed and methods to be implemented was not present in last review, now it is done. Design Pattern to be implemented has also been decided."
0,The design appears sound and clear.
0,Yes the design seems sound.
0,"Yes, they have used design patterns in their implementation. I think that they have correctly identified to use the strategy pattern as the outcome will depend on the type of link that they click on/stay on (youtube, download link) and so on."
1,"The design proposed by the team seems reasonable.
There is a mention about the strategy design pattern going to be used in the project and since not much discussion was there regarding the code in a deep perspective not sure what kind of principles/patterns the team is going to implement."
0,"Yes, pretty elaborate documentation. Including previous/other projects under current implementation was a good point."
0,"Yes, the design appears to be sound, following appropriate principles and using appropriate patterns. The design looks to be correct and understandable."
0,The document looks detailed and contains ample amount of information to understand their work.
0,"Yes, the design appears to be good and sound. It follows all the principles and appropriate patterns."
0,"Yes, the difference between the system before and after their changes is very clearly defined."
1,"The team listed the list of files that possibly to be changed, but it would be better if the team can list the plan of how to change these files would be greate"
0,yes all the changes have been proposed correctly. it if easy to understand all the code changes and Why those changes in particular.
0,Yes they have adequately explained their proposed course of action
1,"Well, the team has mentioned about the anticipated changes. 
They have mentioned about the files that will be added/ modified as well as the new model that is gonna be reused.
There are a bunch of files that are listed on the wiki page but not sure what files are for what functionality and what are reusable files.
May be a detailed split up of files functionality wise and anticipated changes listing in that manner may give more clarity about the new changes that are gonna come up, to the reviewers."
0,"Yes, all the changes have been explained really well. I could easily visualize the problem and its solution too."
1,"Yes, except for the downloaded files. They haven't exactly addressed how they are gonna go about the downloaded tine counter increment when the student is on an expertiza page."
0,"Yes, the authors have adequately explained the changes to be made to the system. They have made use of flowcharts which clearly explain the functionality."
1,"They have mentioned the files to be changed, but not mentioned or gave a sample of what they are going to change in each file. I suggest giving 1-2 files for sample, it'll help understand what they are trying to acheive."
0,"Yes, the authors have explained the changes properly and easy to understand."
0,Their diagrams are accurate and informative. I can easily understand their steps of the implementation.
0,The diagrams are great! I especially like the sample page changes.
0,"Flow chart is perfect to understand the problem statement and suggested solution. It looks very useful to the reader. no, they are not too high-level."
0,The flow chart is great. It easily conveys the logic of tracking the time.
1,"They have detailed flow diagrams for each and every type of user, however there is no UML to show as to who can do what. They have also not mentioned a path to resume time. If a user goes to another link for more than 5 minutes that time is save. At a later state on resuming the start time is updated, deleting previous record."
0,"Again, the best visual aids I have seen, out of all the reviews I did. No issues here."
0,The flow chart is very helpful in understanding the functionality.
0,"They've added 2 flowcharts, one from the reviewer perspective and one from the instructor perspective. Both are self-explanatory and seem correct."
1,"The flowchart gives the idea of the complete flow which is really informative for the reviewers at a glace.
The teams anticipated changes are also included in it which is really nice.
The snapshot of the existing situation and where the changes will be taking place has been clearly depicted.
May be if the code files where the changes will take place, if they are mentioned/a short code snippets explaining the problem would be great for the reviewers to understand the functionality and know more about expertiza."
0,"The flowchart, screenshots are adequate enough to explain all the details associated with the functioning. All the diagrams are necessary. The diagrams follow all the conventions and provide enough details."
0,UML diagrams present
0,The team has used flowcharts to show their workflow and also their plans. The visual aids are properly made which helps in understanding the project better.
0,The design proposed are carefully thought out and I think they provide an effective way to implementing those designs.
0,"Design proposed by the team looks good enough as of now. they have decided to add controller for pop-ups and that is really good approach. 
From the explanation present in document, proposed change does not looks that much complicated."
0,The testing will be difficult for this project. They have done a good job coming up with a plan.
1,The authors don't detail any proposition for code changes or testing. It is all pretty abstract at this stage with no mention of controllers or methods to be added.
0,Design is very well built. Doesn't show any flaws.
1,"I just have one doubt; whether an entirely new controller will be really needed to handle only the pop-ups. Unless it's going to handle more functionalities, I think that function can be integrated with the controller that currently handles the amount of time spent on looking at the expertiza page and external links. The other changes seem sensible."
1,"According to the team's proposal, the anticipated code changes are to add a new controller to handle pop up. Not sure to what extent that will be needed. It will be safe to see if we can add a new method in the existing controller and create a new view and manage with it.
Also,since the code for logging the start and end time is already implemented by the other team and they are reusing it, I am clear as to why do we need a new model?"
0,"The design look pretty good. There are no methods being added to the wrong class, the new design doesn't see smelly, the new designs are simple enough and do not need gems. The design does not seem to potentially increase the response time pf the system, the efforts given seem good enough."
0,Detailed proposed solution
0,The authors have proposed design changes which have been shown by a figure in the document.
0,Their explanations are detailed and easy to understand.
0,I think everything is perfectly explained.
0,The explanation is easy to follow and written in a lucid language. The tasks are highlighted with detailed description below them. The easy language coupled with the Flowchart is enough to understand the task description as well as the proposed solution.
0,Very clearly explained. Best reading today!
0,I found the explanations really lucid. They decomposed their entire problem into 3 parts and talked about the current scenario and the proposed solution for all these 3 parts. The explanation was very easy to follow and the  changes proposed also seemed sensible.
0,The changes that the authors have proposed seem good enough. The overall quality of the explanation is very understandable and expressive. They have used flowcharts to explain their functioning which is quiet helpful. The anticipated code changes section also looks fine.
0,Detailed explanation
0,Yes the authors have proposed changes.
0,"Yes, the design document of this team incorporates all needed functionalities."
0,I think this solution tackles the given problem very well. I especially like the solution of a timeout timer which times out if the user is idle.
0,"yes, the design document stats all the things that have been requested in the problem statement."
0,"Yes, they have a good idea on what they will do."
1,"Based on my understanding the functionalities to be implemented in the project are:
Track time spent on Review page: Mentioned
Track time for external links and downloaded files: Mentioned
Track time for externally hosted submission: Not mentioned
Show time on review report page: Mentioned"
0,Yes it explains the functionality well.
0,"Yes. By reading the Google doc and their wiki page, I can see that they have systematically broken down their main problem into 3 subparts and explained briefly, the current status, and the work to be done, for each of these subparts. It is in sync with the problem statement mentioned in the Final Projects Google Doc."
0,"The expectations out this project according to my understanding are:
- Make the user more user friendly
-Write the appropriate test missed in the previous work along with the tests for the work going to be done.
The team is building upon the existing one. Most of the functionality is being reused. But the team mentioned about:
The issues they are going to resolve and the tests they are going to write for the existing work and also for their fixes which is the requirement of the project.
Everything seemed to be simple and clear."
0,"Yes, the design does incorporate all the functionality required."
0,Complete functionality
0,Yes all the features and functionalities are incorporated in the document as mentioned
0,Very complete and wholesome.
0,This design document is incredibly thorough and descriptive. Great work!
1,i just want to add one thing to the cases team is going to take care of. What if the reviewer opens some external link and then start their own work instead of actually reviewing. will the proposed design handle such cases.
0,It is complete. Includes all sections.
1,The design plan should be more concrete.
1,"The project purpose, statement, design and the test plan, have all been properly explained. There is just one edge case that I'll like them to consider; that if a reviewer opens the Expertiza page, opens an external link at the side, and works on his own work on a completely different window, the time for the external link will keep ticking. It is definitely an edge case, but I'll like if they even take this into consideration."
0,"The design doc is complete. The authors have added the test plan, anticipated code, purpose, project design etc."
0,Design doc is detailed
0,The wiki page is very well written and organized properly which is easy to follow.
0,Code is production ready
0,Contains all the relevant information
0,system operations are working as expected
0,UI test cases are included
0,YEs
1,"I cannot say for certain since I have not tested their UI operations. But on the basis of the code that I saw during their commits, I can say that all the changes made, seem to follow the modular and compact structure of the original code. And hence if the UI is working properly, it can be ready to be deployed onto the production server."
0,The write up is very well-written. It is nicely formatted and all the sections are nicely supported using screenshots and embedded codes.
1,"I'm sorry but I am unable to access the link that they have provided (http://152.46.16.57:8080/). I'm receiving a ""This site can't be reached"" error, so I cannot test the UI operations."
0,"Yes, their build passed in Travis CI. No problem with that at all."
0,"Yes, 1 new commit was made during the 2nd round."
0,"Even during the first round, I had mentioned, their naming convention and coding style are good. There seems to be no violations of standard Ruby coding constructs."
1,"I wish they explained the code more, they kind of just display it and go ""This is this and that is that"" without any reasoning as to why things are the way they are."
1,I feel like RSpec tests could have been written for this project - but I understand why they weren't.
0,There were 2 commits.
0,Code is readable.
0,The wiki page covers all the points. It tells about the problems and identifies the issue. They explain which files have been modified and this is supplemented by a youtube video which helps graphically understand the before and after scenario.
1,"Unfortunately, I cannot test the project manually as the link to the deployment: http://152.46.16.57:8080/ is not running.
Although the team has supplemented a video I would have loved to test this manually."
0,Al the test cases for Travis CI build have passed.
0,Only Comments have been added in the commits for round 2.
0,"Most of the code is written in html. The variable names in the html files are fairly relevant. For example info, warning, etc. Most of it is html code, so not all of the ruby principles need to be checked.
No new ruby methods have been added"
0,I guess it can be deployed because it looks good to me.
0,It is in good written.
0,It works fine.
0,They passed it.
0,Yes they added new code.
0,Well done ! Keep going and make it better next time
0,I think so.
0,Really good and clear writeup.
0,"Yes, it works."
0,"Yes, they did."
0,"Yes, it did."
0,"Yes, it was."
0,Looks good to me. They do not have bad code style and DRY problems etc.
0,"The writeup is well written and is easy to understand,"
0,"Yes, it works as intended. Everything seems fine when I test manually."
0,"Their test coverage decreased. In 2nd round, they didn't add any test, so the coverage remained same as round 1."
0,"Yes, they pass in Travis CI."
0,Yes they add new commits in 2nd round about comments.
0,Their code follows DRY principle and is clean enough to follow.
0,"Yes, it's ready to be merged."
0,The document is good.
0,"yes, their new features worked since the first submission"
1,no. there's no test. the coverage decreased.
0,"Yes, they passed the build in Travis CI."
0,Their code is good.
0,"Yes, I thinks it is ready to be merged as they have fixed previous bugs and the code is easy to follow for future students."
0,"Yes they eased out the ""Purpose and Scope"" section of write up which was previously confusing as been pointed out in my previous review and they added some background as to what is score report. So overall it is now easy to follow."
0,Yes everything works as expected.
1,They did not added any test cases in this submission and coverage did not increase. I understand this was UI change functionality but still they could have compared the flow that does both views of score report and review report are rendering from same template.
0,Yes all checks were passed.
0,"Yes, they did commit and add necessary comments suggested on previous review."
0,Yes they have improved code by adding more comments to it.
1,"No, automated tests are missing"
0,PR does not contain any method
0,"Yeah, It contains the required info."
0,"WorkYes, the write is quite self-explanatory and describes what the PR is trying to achieve. Work is majorly related to UI, so no standard design principle can be applied here."
0,Nicely written and documents all the relevant info.
0,Yes all the functionalities work pretty well as expected.
0,The got some UI testing for their project
0,"1. no;  2. no, their code is for views,  no method involved 3. more comments would be helpful, but their code still understandable, cuz most of the code is for the layout of the pages;  4. yes their code follows the Ruby Style Guide;  5. code seem DRY"
1,I would recommend adding more code for helping following their changes
0,the names are all reasonable and understandable
0,"The test section is understandable. Since the team only changes the layout of several views, there is not much pre-conditions needed, their testing section is enough to follow"
0,"The writeup is clear and easy to follow, I totally understand what the issue is and what they have done for their project. I would recommend adjusting the size of the screenshot on the writeup page to make fit the browser."
1,"Yes, the review report function works as intended. But the problem statement also says that they have to build a functionality for users to search between reviews. I do not know whether this is a mandatory or an optional functionality but either way, I do not see that implemented in the write-up nor in the video."
0,"As far as I know, UI is generally not tested by any testing tool. The test plan of this group describes a sequence of tests to test the UI which I think is good enough to check that their functionality is actually working properly."
0,"They have made changes mainly in the .html file. Hence all the components that they have added like the warnings, the tabular format and the supporting css functions, all seem necessary. No function is too long and the code follows standard HTML style."
0,"All the variable names like scores_round_, max_score_round are intuitive and short. I cannot see any change that uses wrong naming conventions. In fact, they have followed the standard html code construct everywhere."
0,"They have modified only the UI of the application. They have made changes in the .haml and .css files and hence their test plan includes a sequence of steps to test the UI. I followed those, they are pretty clear, and the UI seems to be working very fine."
0,"Yes, the score report and the review report have been combined to give the same basic UI to both these functionalities. Because of its consistency, they chose the student UI to be the base template. They write up is really detailed and the screenshots make it easier to understand the before and after scenarios."
0,"Yes, the write-up was the first thing that I read and I could immediately identify the current scenario and the expected scenario. Screenshots made it easier to understand what they did. The write up was neatly written and in detail."
0,"Yes, the test plan works."
0,"Since the problems are fixing view, the tests are UI test and are complete enough."
0,"Yes, the team added comments that are necessary."
0,"Yes, the test plan look complete enough."
0,"Yes, the explaination is clear."
0,I can easily understand how the team fix the problems.
0,Seems to work from what I can see.
0,"As far as I can tell, there would be no additional test plans or edge cases. Its just a simple view update."
0,"Yes, the said functionality is working."
0,"Yes, the variable names in the html files are fairly relevant. For example info, warning, etc"
0,"Yes, the writeup clearly suggests what and where the issue was and changed code blocks are appropriately added."
0,The features work correctly.
0,Yes they discussed them in the test plan.
0,All well done
0,Yes they indluede the test plan part.
0,"Their writeup explain very clearly, good job !"
0,Writeup is very clearly and easy to follow. I can understand what the projects does and how the project does what it does.
0,Works well.
0,I think they have.
0,The coding style looks good to me.
0,"Yes, there are."
0,Looks good to me.
0,"Yes, looks good to me."
0,"Yes, they does."
0,Really clear writeup.
0,All the features work as before. There's no bug in all manually tests I have done.
0,"Because they didn't change the layout of the view, they converted the view file from haml file to erb file. So they only did UI test for this part."
0,"(1) No function is too long.
(2) No method needs to be split into two methods.
(3) Comments are enough in this scenario.
(4) The code follows Ruby Style Guide, it's clean and easy to understand.
(5) All the codes are DRY."
0,Because they only need to do is to change haml file to erb file. There's no need for them to add additional comments.
0,"The names of variables, methods and class names look fine to me. They all follow the principle of naming!"
0,"Because they only changed the layout of the view, so they test for what they have changed using UI testing."
0,"Yes, they explain what the problem is here and how to deal with that problem. The write-up is easy to understand."
0,The writeup is well done. It explained the work very well and it is very easy for me to understand what they have changed in this issue.
0,"Yes, the new layout of review report looks more beautiful than before. And I need to say again that, they only change the layout of the view so there may not any edge cases."
0,"They only test from UI testing. But they explained why they chose these. As they only change the layout of the view, so the automated test may not works or them."
0,"(1) Their function doesn't need to change the function
(2) Their function needs no separate methods; 
(3) The comments of scss style seem practical for the code;
(4) Yes, all code follows the Ruby Style Guide
(5) No, all code is DRY."
0,"As they only changed the view and scss files, and they didn't change any methods in controller. So they didn't add comments for methods. But they actually add comments for the new scss style. Good."
0,"Yes, all their methods look reasonable."
0,"Yes, they explained why they choose UI Testing and give"
0,"Yes, they explain how and why they did the work in wiki. And they used DRY principles during their coding process."
0,"Yes, their wiki document seems clear and adequate. I can know why they finished this function and coding process."
1,"I did not find any test cases related to the Test Plan. It may be because all their changes are related to UI. So they need to include tests that compare view from student login's view ""review view"" and review report ""review view"""
1,"They have solved some bugs like ""checkbox question not showing"" but did not put any comments that can help understand the changes done to solve the issue. They even converted haml to erb file ""team_users_popup.html"" but did not put any comments or why it was needed."
1,The changes are not commented thoroughly.
0,Yes the names are very easy to follow
1,"Overall, they have included all the necessary steps in the test plan to test the changes easily. There is one scenario which could be included in ""Test UI for Student Login"" section which shows reviews which are given by the student to particular team :-

Click ""Other's Work""
Click ""View""

Then they could compare that view with the view they changed for review report."
1,"Overall, the write up includes all the necessary sections which are easy to follow. Only, there are few things which are hard to follow in ""Purpose and Scope"" section:-

It has one line ""score report and review report use different code so UI is non-orthogonal"". Now they have given overview of what ""review report"" is in that section but ""score report"" term has no background in that section.
The section at the end discuss about scope of their work that their ""functionality will help user to search through all reviews for specific problem they are focusing on"". It does not mention how this can be achieved by their functionality."
0,Yes they have explained all the things related to the work adequately in write up.
0,"Yes, the test plan is there with a scenario."
0,"Yes, their test plan is very specific, they will really test the functionalities."
0,The document includes a well defined test plan using Rspec covering possible test cases.
0,"Yes, they included a test plan in the second round with a cursory overview of how they'll be using RSpec tests"
0,The test plan specifications are quite reasonable and cover pretty much all the scenarios.
0,"In the previous review, the team was missing test plan. Now, they have come up with an extensive test plan which looks great."
0,"Yes, the team has done a very good job of describing the test plan thoroughly."
0,"> Test plan has been provided in the the design.
> RSpec test details have been mentioned for the scenarios.
> I would also suggest adding some negative test cases.
> The mentioned tests will test the functionalities properly."
0,"As compared to the previous version, they have added a solid Test Plan and have also mentioned the plausible files affected. This time they have identified the cases in which testing will be required and described it in detail."
1,There is an elaborate test plan for Rspecs. UI testing plan is missing.
1,"Yes, the team explained the scenarios where the bugs exist and the test cases they are going to cover for each of the issue very clearly.
Looks like the test cases will cover the bugs they are going to fix.
But since, there is a new addition of column to the model, test cases for that needs to be written carefully without breakage of code. 
Otherwise, everything is fine."
0,Enough test cases are written under the test plan to test the given functionality.
0,"Yes, the sequence diagram is describing the proposed changes."
1,Maybe it would be better if you add more diagrams in your 'Design - The Gruby Details' part.
0,UML diagram/Sequence diagram describes the flow of the project appropriately.
0,I love the way they've used the sequence diagram to illustrate the entire process.
1,"There is no class diagram in the wiki document, however the sequence diagram is quite helpful in understanding."
0,The sequence diagram presented in the documentation properly explains the approach.
0,Th sequence diagram provided very clearly explains the flow of control throughout the life cycle of the feature that the team will be working upon.
1,> A sequence diagram is added however it has not been explained. Without the explanation its a little hard to follow through at first.
0,"Like before, they have kept the same sequence diagram (which is good because I had given it 5 stars in the first review too.) It is really self-explanatory. It covers the cycle right from creating a conference type assignment to sending the link to authors and letting them add co-authors. It covers the entire functionality needed."
1,The team has done a good job on depicting flows in the sequence diagram. The DB interactions could also have been graphically explained.
1,"The wiki page is mostly theory which in fact conveys the point the team is intending.
There is a sequence diagram indicating the flow which is kind of hard to follow. May be a better diagram can be given like use case etc for clear understanding of the reviewers at a glance.
Also, the diagram states the flow and not the changes to be made to the system."
0,"Only sequence diagram is described as part of visualization, however, the sequence diagram is very descriptive."
0,"Yes, they use a sequence diagram to show their logic, it's simple and easy to understand."
0,"Yes, the design is simple."
0,The design appears to be simple and logical.
1,"Yes, the design appears to be to the point and logical. However, as mentioned in the first round, I think big changes like ""bypassing approval from instructor"" should be decomposed into smaller ones"
1,- The design seems to be bit complex as the team plans to bypass instructor approval to add new co-authors on the assignment
0,Yes the design appears to be simple. They have properly explained the  changes to be done and also the files associated for the same are specified.
0,The design is simple and straight forward.
0,"Yes, the proposed plan is simple and very clearly explains the changes that the team plans on doing."
0,"> Yes the design seems to be simple.
> The changes considered seems to be minimal and most optimal.
> Also it has been explained very well in the documentation which is appreciated."
0,They do have many nested conditions but this is a part of the problem statement itself. I feel that this is the best that they can modularize it without making the code too complicated.
1,The design is fairly simple. The flow where co authors already have an account is missing from the sequence diagram.
1,"Looks like the issues are a bit intricate. Take time to understand the requirement itself.
Since, it is needs thorough understanding of the account creation, instructor activities, then author activities etc. the changes proposed may touch several files in Expertiza.
Also, there is an addition of column to a model which means there will be migrations involved. So, design will not be simple I suppose.
Better test cases should be written for a fine work."
0,"The explanation is given in steps it is easy to understand. Also, the explanation is reasonable and comprehensive and easy for the reader to follow. The design appears to be simple."
0,The design appears to be sound and follows appropriate design principles.
0,The design appears fine.
1,They did not write what their design pattern is.
0,"Yes, the design doc seems to be sound and follows appropriate principles and patterns to describe how the team will be addressing each of the issues."
0,Yes the design appears to be sound and seems to follow appropriate principles.
0,Well constructed design.
1,"Yes, the design appears to be sound. However, no specific patterns have been used as such."
1,"> The design does appear to be sound and detailed enough to cover all the requirements.
> However it seems to follow the principles and patterns but nothing has been explicitly mentioned about it in the documentation."
0,"Yes, their design seems to be good. A good description of the problem statement and the proposed solution. The design proposed appears sound."
1,"The design seems okay. However, like I pointed out in the previous review, a new co author will be assigned as a student which doesn't seem right to me. Maybe the team has spoken with the mentor and decided to go this way. It is also possible that the team has been instructed not to create a new role. I have rated accordingly."
1,"The design is clear. There is no code snippet included which highlights the location the team is anticipating the changes.
Cannot comment on the design patterns/principles followed by the team as nothing of that sort is discussed on the wiki page.
But anyway the changes proposed seems reasonable."
0,The design is decent.
0,"Yes, they adequately explained the changes to be made to the system."
0,"Yes, file names are there to be going to change."
0,The authors have explained the changes made to the project reasonably well.
0,"Yes, I think the changes proposed by the authors are well thought of and adequately explained."
0,- The doc adequately explains the changes planned by the team
0,"yes, the proposed changes to the system are adequately explained."
0,Very well explained. I see no issues.
0,"Yes, the authors have done a really good job of trying to explain the flow and the changes that will be required to incorporate it in the existing system."
1,"> The proposed changes are pretty well explained.
> I would have appreciated a bit more explanation to the sequence diagram.
> Also the files to be changed could also add a section for what exactly needs to be tweaked in that class for covering the required functionalities. However, the explanations are overall good."
0,"Yes, at first glance the problem statement itself seemed complicated. But they have broken down the problem into 3 subparts and have explained each individually. They have given an overview of the changes required for each of these parts which makes the flow of the system clear for me."
1,"The changes have been explained in sufficient detail. The file changes section mentions coauthor, that could be rewritten as coauthor (role = student) as the team is essentially just creating new students and not coauthors (this role does not exist)."
1,"Yes, the team has clearly stated the changes they are going to make. 
The requirements they are going to work on and the test cases they will be covering is also stated.
The new additions to the model or the fixing to be done in the existing code files is also explicitly stated.
May be including the code snippets where the appropriate changes are anticipated would give a more clear idea.
Otherwise the intention of the team can be clearly seen."
0,"Yes, the authors have adequately explained the changes made to the system. The author have explained thoroughly about search functionality, database changes and test plan."
0,"Yes the code passes travis test,comments are provided where they are needed and code is dry enough to pass for production ready code.So i would recommend."
0,Yes the project works well.
1,The team has added test cases although the test coverage has decreased.
0,Yes thepull request has passed Travis CI build test.
0,Yes during 1 st round I found that there are not enough comments for the code written but that has been improved. So the code written is of good quality.
0,"Yes, as majority of the changes are done in the views of the pages, no major changes are made in any functionalities. So, can be deployed."
0,Writeup is well detailed and precise.
0,The system works as intended.
1,Test coverage decreased to 24.297%.
0,Travis CI passed all the tests and no conflicts need to be resolved.
1,"Last commit was made on Oct 20th and then directly on Nov 8.
Commits are made to Master instead of Beta branch."
1,"My biggest concern with the code is the decrease in the overall code coverage of the project. There are no automated test cases, so in future if something new comes up which is dependent on this functionality, there will be no way to check if the existing functionality works correctly or not."
0,The functionality works as intended
0,The write up is good and can be understood easily. They have listed everything properly and in orderly manner.
1,The team added a single test case and has suggested to check the functionality in the UI. The code coverage has decreased by 6.2% and as only one test case was added there is no significant improvement in the code coverage.
0,Yes the travis CI for the project passes and there are no conflicts.
1,only 1 commit that too was made after round two.
0,The code is very well written and follows all ruby standards. There were no problems in first round itself.
0,The code is ready to be pushed onto the production server.
0,The writeup is well written and explains all the aspects of the issue in detail.
0,All the features are working as intended.
0,The new pull request is passing in the Travis CI with no failures.
1,No new commits were made during the 2nd round of review.
0,"The code is well written, adhering to all good coding practices."
1,Not sure about it's functionalities working as going through the steps didn't help me. The writeup might needs to change a bit.
1,"On following the link, it does not work correctly for step3. On clicking view submissions, it does not work correctly for it."
0,"Yes, new code was committed during the second round."
0,"Yes, it follows DRY principles."
1,Ready to be merged but Travis CI not passing
1,Travis CI was passing but now it failed
0,"1) Yes, there issue is related to UX, and after resolving issues, it works as intended."
1,"1)they pushed new test case into new commit
2) but the overall code coverage is not increased
3) overall it decrease by 6.2% but after adding new commit it increases the code coverage. (before 13.2%   and     6.2% after)"
0,1) yes this one is an exoertiza project and it passes the Travis CI
0,"1) Yes, new code commits are added.
2) they added new test cases which is related to view assignment name on top or on content page"
1,"- Too many commented lines of code in the PRs. This PR needs refactoring before being merged to avoid the future task of refactoring.
- I am not too confident about adding another column like use_dropdown_instead I suggested in my previous review to get rid of DB changes as another column dropdown is already available. They also didn't explain the need to have this redundant column.
- The name with postfix instead is confusing as it suggests that there is another column like do_this for which they have do_this_instead
- Also, the column name should be a noun"
0,"- It works fine.
- Just a small suggestion, in the show header issue they can do some string formatting to make it more visually pleasing. Eg: instead of show new2 they can camelize and add spacing `New 2`"
1,"- Test cases were added but according to the PR, the coverage decreased. Also, they don't have any mention of coverage on their wiki page."
1,"- The last commit build didn't pass but before that, it was passing. I have given them 3 points as I am not sure whether failing of building necessarily their fault as the test cases running during the build is randomized."
0,The write up is very good and easy to understand
1,Fix Issue #1312: Assignments with “Use dropdown instead” cannot be saved is not working
1,All of the checks have been failed but there are no conflicts with merge request
1,There is only one new commit
1,Code follows almost all standards but does not include documentation and commented code is not removed so deducting 2 stars
1,"I don't think this code is ready to be deployed on to the production server. Because there is many error in Travis CI, their code may not be compatible with the repository."
0,"The architecture of their wiki page is clear and easy-reading. In the first round, I recommended more instruction of design pattern, and they did make corresponding improvements."
0,Yes. It work as intended.
1,"They have only one automated test. The rest of test was completed through UI. It should increase the coverage. But in their pull request page, their coverage decreased."
1,No. The build didn't pass in Travis CI. All check were failed.
1,No. There wasn't any new code committed during the second round.
0,"I didn't see any problem in the first round, neither in the second round."
0,"Yes, the code is good to be merged"
0,The write up is thoroughly
0,The UI works fine
0,Test cases added
0,Yes it passed
0,The code is good and dry
0,Yes the authors feature work well.
1,No they have not written any test cases
0,The code is perfect just there no comments explaining the code.
1,Comments are not there for each method just the issue they fixed is there on comment not what logic they used or what they did there is describe.
0,the variable name are well written and method names are also self explanatory.
0,"Yes, the test plan looks alright."
0,"Yes, the writeup is written very well and they have explained why they did what they did."
0,The code is sufficiently commented.
1,"The build passes completely on Travis CI and codeclimate.
Code coverage decreased to 28.97%."
0,Test plan is very robust.
0,Most of methods are self explanatory. However keeping comments would be good.
0,Yes the names are intuitive and easy to understand.
0,The changes were in the UI so the test cases were not present.
0,the document is very well formatted and clear. Everything is easy to understand.
0,Write up was very good and I was able to understand all the stuff.
0,The features work as intended.
1,Functional test cases are missing in the writeup.
0,The code meets all the above five requirements.
1,Comments have not been added to the methods.
1,"The build is passing , however the test coverage has decreased to 26%.
The variable and methods have been named aptly and are suggestive of the functionality."
1,The writeup does not include the Test Plan. The test cases for the functional testing are missing.
0,"The writeup describes the issues and its fix in a great detail, along with a snapshot of each. This is by far the best writeup I came across."
0,The writeup covers the issue and its fix in full details.Reading the document made the issue and its fix more easy to understand.
0,Edge cases handled perfectly
0,Test plan discussed
0,Code written nicely
0,Comments for each method mentioned
0,Naming is intuituve
1,Does not include a Test Plan section but includes a Testing UI section
0,"Yes, it explains everything briefly"
0,Well explained
0,methods are concise. just add test for DB changes
0,Yes the write up is descriptive and well formatted.
1,"- The screencast was of only one issue.
- The files associated with the test case shown on screencast not present in the pull request."
1,"- It needs more comments on what the line is doing.
- Added new column in the table which should have been the last resort for an app already running on production. There is a column dropdown that has a boolean value as well. They should've tried to use that field only and try to fix the issue of why it was not working. Instead, they added on to the code.
- If there was a reason which they faced while using the same column they can write that in the wiki for future reviews."
1,"- Changes not big enough and thus not a lot of scopes to add methods or variables.
- No comments except for the issue number which doesn't necessarily tell me about the code itself."
1,"- Test coverage decreased according to the pull request
- `use_dropdown_instead` variable name sounds weird as it suggests that there is a counter variable with the name `use_another_thing`."
1,"- I saw a test case running on the screencast but the associated files have not been added in the pull request.
- Only one bug has test case which was shown on the screencast."
0,"- Very well written. They have added links to the actual issue on the expertiza which helped me understand the issue better.
- Added screenshots which makes it easy to understand."
0,"- Well written writeup
- I liked that they added links to the main issue on expertiza page as well.
- Added screenshots and explained their approach well."
1,"For most part functionalities work just fine, but when i clicked view submission for new4 the website crashed.
 
I am not sure if this is an existing issue or something induced by the team"
1,I cannot see any test case being included in the committed code
0,Team has done a good job of including the comments and all comments are very descriptive
0,Most of the code added uses preexisting variables and ruby coding standards are followed
0,The write has just about all of the details required
0,Their test works correctly in any situations.
1,They didn't write any code about automated tests.
0,"The variables, methods, and class names in the newly-added code in the pull request is clear and good."
0,"Their test plan is complete. They have considered every pre-condition, edge cases, invalid inpiut values, and other possibilities."
1,They clearly explain how and why their job were done. But they didn't mention anything about design pribnciples or patterns in their wiki page. Maybe they should add some descript sentences about it.
0,They clearly describe their fuction and their solution.
0,Works good
1,Not test cases wrote
0,Names are good
0,Good enough
0,"the author shows us the Behavior Diagram for Instructor/TA Diagram, which we can clearly know how to track time of the tagging data."
0,"The design is simple and clear, form the approach, the author propose to use `updated_at` in `answer_tags` model for each user to calculate gaps between each tagging action."
0,The design make sence. From their approach I think the solution is doable and also tries to solve the problem.
1,"The authors have done an excellent work of using visual aids for describing the proposed system . It helps in getting a clearer view of the proposed system behaviour. The flow chart however, does not mention about the the changes that will be made to the system. This could have been done using UML diagramd"
0,The authors have lucidly explained the changes that needs to be done in the project. The ease of explanation as well as abstracting details to give a higher level view makes it easier to understand what authors wants to convey. The design is simple for layman to understanding.also intuitive and use of examples provide a better illustration of the information to be potrayed
0,The authors have well explained the proposed set of changes along with how they are planning to implement that as well as what files would be potentially modified.
1,The design was very vague. They could've added more details as to how the db looks like and what changes are they making to the schema.
0,They mentioned the files they will be changed.
0,The design is very crisp and well detailed. It is explained simply making it easier to follow.
0,The design is sound and provided in good detail. It makes use of the required patterns wherein all the top level sections are all present.
1,"As stated earlier they have explained the changes but the exact implementation is little confusing. They have written that they will be using ""update_at"", but how they are creating the matrices in step 2 is not explained clearly."
0,"Yes, they have included the necessary functionalities in the test plan to test."
1,The diagrams proposed does not cover the changes in detail and is not easy to follow. It would be great if they also provided the graph/metrics about the tagging details. The diagram does not cover the important part of how it will clock the time and flow of saving the time in database is not clear. Both the diagrams proposed just cover how they will show report to the instructor/TA.
1,"The overall design is good. But it lacks in some ways:

The design proposed in the diagram does not mention clearly about how they will clock the time between two successive tags. They just mentioned in their approach that they will be using 'updated_at' field in answers_tag model to calculate gaps but did not divulge any further that how they will use that to calculate time to tag as according to me ""updated_at"" would only contain value when user has already tagged the answer and is now updating the same answer.
On what basis they will decide the ""threshold"" of useful or not useful tag. Also, in the diagram they are displaying the tagging report. They have not mentioned much about the details of what that report would contain apart from tagging time. What will be the metrics for line-chart. How they will display the tagging information as they are using line-chart will it contain information of individual students or all at once. Because the instructor may wanted both the type of graphs for overall insights to assess individual student and to assess quality of whole class whether to evaluate the tagging process does really help generate useful information or not."
1,"The test covers basic functionality but it does not cover the edge cases like what if a user opens the tagging report and then goes to another tab what will happen then. Also, test like what if I just open the tagging page they wander around without doing any tagging and close the window, etc. They really have to think about different scenarios to add to the test plan."
1,"No the flow chart they gave does not show a way for how to get reliable tags according to the metric, they just showed for the chart displaying the time taken for review."
0,Yes the design appears to be simple. but it is not compartmentalized or should be in bullet points for better readability.
1,"No, the design does not appear sound. They first said there have to be metrics to decide if tags are reliable or not but how they will calculate what will be the metric what parameters they are at least considering. I suggest parameters like the time between successive reviews, time spent on the current tab. Also there main emphasis to decide if the metric is reliable or not is ""time"" that still does not fully solved th problem whether the tagger is write or not which is the ultimate problem. I suggest to look at this article https://roamanalytics.com/2018/07/26/on-the-viability-of-crowdsourcing-nlp-annotations-in-healthcare/ Here they used Expectation Maximization algorithm to decide whether the given tag is written or not."
0,They can also get UI test included.
0,The visualization is good. They can add some texts to explain the graph.
0,It is well designed.
1,It just simply explained what they want to do. It can be better if the team can illustrate how these approaches will implement the requirement step by step.
0,Thet indeedly include the test plan.
0,Yes they clearly explain the figures.
0,yes it is very easy and simple to understand.
0,Yes it appear to be sound.
0,Yes. The team added a 'Behavior for Instructor/TA diagram' to show how the feature works and the relationship among different parts. The diagram is clear and helpful for people who is not working on this project to understand the function or relationship among different parts quickly. The quality of the diagram is great.
0,"Since the design pattern is not applicable on this project. According to the diagrams and proposed approach, the design is simple and clear. The team describe the logic clearly through the diagram and the proposed approach."
0,The authors adequately explained the changes. Good job!
0,"The team mentioned in the 'Proposed Approach' that ""This specific project does not require a design pattern, since it only requires using same type of class in generating same type of objects."""
0,They did a good job explaining why rspec will not work in this case.
0,The one visualization is clear.
0,"Yes, there are no unnecessary plans."
1,"Under the test plan, it mentions that the graphing feature cannot be tested with RSpec because it requires visual analysis and too many preqrequisites. However, there is very little in the ways of how to do the UI tests. It simply states to test manually, but it doesn't go through the flows of how to test."
1,"Yes, the general design appears like it will work. However, there isn't much explanation outside of the given requirements that details how the design will work. There should be a uml or a list of what classes should be changed. The requirements document simply has suggestions from the teaching staff."
1,"I think the authors have done an alright job of explaining what changes the system needs. There are a few elements of the design that seem up in the air, rather than concretely defined (we  propose to use `updated_at` in `answer_tags`). Nevertheless, the general picture of what must be done is there."
0,The behavior diagram in the write-up looks quite intuitive.
0,The design looks simple and the team has done good job explaining it in the write-up.
0,Since no design principles are required but the proposed changes look sound.
0,The changes have been adequately explained by the team in the write-up.
1,There is just one diagram which gives a brief on the proposed flow. There are no screenshots and mockups. No use of UML or ER diagrams to give the reader any details.
1,"There is no class outline as to where the changes would go. They have very briefly described what they are planning to do with no apparent thought put in the document. As of date, this document is unclear about their design."
1,The descriptions are very brief with a complete cursory view of the topic at hand. A lot more details should have been put into making this document.
1,The requirements are mentioned in the doc. But there is no real analysis done for the issues at hand. There is no detail regarding how the existing system works and what they are planning to do to implement the requested change.
1,Not enough visual aids and the test plan was incomplete. Also there is little to no details about how they are planning to execute the approach that they stated.
0,The design clearly explains the required functionality and give details of the implementation approach.
1,"The design document is very verbose and included just one flow chart diagram and it also mentions high-level details and does not involve different entities that could trigger the flow. Moreover, other than the only diagram they did not even used bullet points that will be lot easy to follow and be less verbose."
1,"Overall, the design proposed is good and nicely structured. But, there are certain gaps that I would like to mention

The design does not much say that what approach/metrics they will use to track time. They just told they will add new fields to track the time but did not disclose further about the number of fields or will they use any existing library functions to track time like ""Time.now"" class or will implement their own class to track time with different helper methods.
Also, what if user clicks on new tab in middle of tagging activity. According to flow diagram this situation cannot be handled as it may happen that user spends less than 3 minutes actually tagging but overall spend more time in viewing other tabs. You could track if user moves to other tab by tracking the focus of the window. Refer link https://stackoverflow.com/questions/10338704/javascript-to-detect-if-user-changes-tab
Also there is nothing mentioned on the reason behind keeping the threshold for 3 minutes."
0,Yes they have taken into account all the necessary functionalities.
0,They have covered all the necessary sections.
0,The visual aids are good and they explain the proposed solution succinctly.
1,"There are some design decision which I think might make code smelly like the loop in the flowchart to check if is any tag tagged is done in javascript frontend or they check it using querying because that would put a load on the server and will make website slower.
Also in testing they said about gaming the timer like the opening website and doing other work in a different tab. This can be done by checking if the user is in the tab or in another tab.
I found a nice StackOverflow link which might help you https://stackoverflow.com/questions/23690666/check-if-my-website-is-open-in-another-tab
This data might ensure that the user is paying attention to tagging and not using other tab or spending time on other websites."
0,the proposed changes are easy to follow.
0,"Yes, they incorporated all functionality required."
0,"Yes, the design doc contains all the required aspects."
1,"It just simply explained what they want to do, without illustrating how this approach will complete the requirement."
0,"Yes, they get all the functionality included."
1,The syntax can be arranged better to make it easier to read. There shouldn't be any introduction on expertiza. It is better to have UI test.
0,The UML diagrams is easy to understand and good explaination.
0,They made a good plan of changes and modified .
0,It is in good explaination
0,Yes they incorporate all the parts.
0,They completed all the parts in design doc.
0,The proposed approach is provided to explain how the team will work on this project. The description and explanation are in details which is clear and helpful for others who is not working on this project. If the team could provide more information about which file/where they will work on will be more helpful. Overall the quality of the proposed change is great.
0,Yes. The design contains all the functionality that is required in the document.
0,The flow chart is great and easy to see the logic of what they will do.
1,More effort should be expended on the design. The explanations were vague. I don't have a good understanding for how it will be implemented.
1,The explanations were vague. I don't have a good understanding for how it will be implemented.
1,From the flowchart explaining the logic of how times will be saved I don't understand how it works. It seems it only checks if things were tagged once at the top then there is a loop at the bottom that resets the timer without checking on whether or not things were tagged.
0,Diagrams looks good to me.
0,"The explanations are good, clear and adequate."
0,Looks good.
1,A lot of the wiki page was just copied from the requirements document. It would be good to add more detail on top of this to give the reader a better understanding of the project goals.
1,"The doc is off to a good start since it talks about purpose and a testing plan, but it doesn't have a section that thoroughly talks about the design. It needs a section that talks about what changes to classes should be made."
0,"Their flowchart is good. It is very well drawn, very intuitive."
1,The team looks to have identified the problem and the solution but failed to articulate it in a better way. It would be helpful if you could articulate the thought process behind the solution.
1,"Just one paragraph has been written regarding implementation of all the functionalities. It would have been better it this was better organized. Also there is no mention for how these functionalities will be implemented, just a vague description is given. Please mention any design principles or some logic for it."
1,"The design document can be improved significantly. The project purpose has been copied from the project description document, the design can also be improved by including detailed plan behind the solution. A detailed plan can also be given regarding the Test Plan."
1,"I think the image for showing what files need to be changed is unnecessary, you can juest type it, and maybe you can add some visual aids along with your ""Design - The Gruby Details"" part."
0,The sequence diagram is added.
0,UML diagrams describes the flow well.
0,Excellent use of the sequence diagram to explain the flow!
0,- The team has used sequence diagrams to explain the flow of their new implementations which make understanding easier
1,The aids provide good amount of information. I am not sure in a sequence diagram if we can work from right to left. The communication between coAuthor and controller is from right to left. Please check.
0,The sequence diagram included helps to understand the flow clearly.
1,"> Sequence diagram has been added as a visual aid and is detailed enough.
> I would have appreciated some use cases, database design or class diagram too.
> The only diagram added seems to follow the conventions."
0,"They have provided a sequence diagram. It sequentially describes the flow of the system, and it easily helped me understand the functionality that they are going to implement. The diagram is really good and self-explanatory."
1,"The given diagrams make sense, however no UML diagram has been provided for the DB and the relevant tables."
1,"-The team came up with a sequence diagram. It indicates the flow between different entities. But it is pretty difficult to understand what the entities are.
-May be a better UML diagram can be included next time like the use case diagram for more clear understanding of the reviewers.
- Including of pictorial depictions makes it easy to understand."
1,"There's a sequence diagram alone, but is pretty detailed. However, a diagram related to the DB design should also be included."
0,A sequence diagram has been provided which is useful and is easier to understand.
1,I think they did not specified what design pattern they would use.
0,The new design seems fine.
0,The proposed changes should fix the issue
0,"1) I think they have mentioned the appropriate controllers for the proposed changes 
2) To early to judge
3) The new design doesn't seem complicated but the project is vast enough to make things complicated so the team should be careful
4) No, I don't think the new design will increase the response time
5) Not needed"
1,"- I see that the proposed solution allows adding student bypassing approval from Instructor
- This seems bit unsecured as the instructor may have no control on whom the author adds as a co-author, checks must be in place to verify if the co-author added belongs to same course"
0,The design and implementation plan looks fine.
0,The design does not look like it will make the code smelly. It is well thought especially the part where co-authors' emails will be recorded so that only the intended people can join the assignment.
1,"1) The classes mentioned for changes seems to be appropriate. However, I would have appreciated more text describing the change and the need for it.
2) I don't believe the new design would make the code ""smelly""
3) Design doesn't look complicated
4) The new design would server the functionalities required but I don't see the reason behind any performance improvement yet.
5) A bit more granular detail on the changes proposed to each file would be appreciated."
0,"A good thing is that they are thoughtfully adding new methods in the appropriate existing controllers and views, unlike what the previous team had done. I feel that the methods that they have suggested (which are not a lot), seem just enough for the functionality to be implemented without making the code too complicated."
1,"The proposed changes plan to add coauthors as a student which is probably because all the student methods are supposed to be used. Instead, a new subclass that inherits from student can be created and used for the proposed changes."
1,No designs have been proposed by the authors.
0,They clearly stated what files need to be modified.
0,Proposed the changes with good explanations.
0,The authors have explained the proposed changes covering all the issues that need to fixed.
0,"The changes proposed by the team are well thought of. I think some big changes like ""bypassing approval from instructor"" should be decomposed into smaller ones"
0,"- The changes proposed are explained efficiently
- Some features such as creating account if the user is not yet registered, seems to be implemented already and I believe should not be included in the scope"
0,Thre was adequate explanation on what changes the team wants to do.
1,"The explanations were pretty clear for the most part. However, there was some repetition which can be avoided."
1,"The authors have given an in-depth explanation of the proposed solution right from the files to be changed to the sequence of actions. Each file to be modified has a corresponding elaborate explanation. Though, they have not mentioned any test file that will have to be modified/at least affected, in this process."
1,"Most of the changes proposed seem fine.
However, when a coauthor doesn't have an account, he will be redirected to /users/request_new?role=Student according to the wiki, the role for coauthors should be different than a student."
1,"-The team listed down what needs to be done and where they will be changing based on the tabular column of their wiki page.
-But Not sure whether this base functionality exists and the team is building upon it or is it a complete new enhancement.
-The wiki page is of complete theory which makes it difficult to grasp quickly what the project is about."
0,The existing changes are explained in a decent manner.
1,The authors did not seem to have proposed many solutions as they could not be understood very well.
0,"I think that this code is ready to be deployed onto the production server for the OSS project
I do not have any concerns about the project.
The project need not be redone from scratch using a different approach or picked by a different team. As it is a refactoring project & the team has already done all of the work required."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
Test plan has been thoroughly covered with all the screenshots.
Before & after code has also been added with the required explanation and need of the changes done."
0,"The Build passed in Travis CI.
There are no conflicts that need to be resolved."
0,"- Most code is same functionality refactored and as all the tests are executing, it is ready to me deployed on the production"
0,- Yes the changes work as supposed to
0,- The build is passing in Travis CI
0,- Code follows many good coding principles
0,Good to deploy.
0,The writeup is descriptive.
0,Tests are added and covered with the code changes.
0,Build passed.
1,Some methods are too big. example peer_review_strategy
1,The code can be deployed on the server after the team has added more test cases. Overall I think the code is really written well . There is no need to do the project from the scratch.
0,The pull request passed and there were no commits
1,"No, they could have added more test cases. Otherwise they have handled edge cases in the code"
1,Some functions could be sub divided into smaller functions. They have moved the functions to helper class. Apart from that they could have also modularised the functions to further increase the code readability and maintenance.
1,"Overall, I think the code is not ready to be deployed to production server.
They refactored the code in a good way and is successfully able to pass the travis build as well as all rspec tests. The methods have been organized to provide better understanding.
Besides my concern for the lack of comments indicating the changes regarding variable names, everything is good. There are case: e.g in Review mapping controller where even the wiki does not mention the variable names changed. This creates a big problem in transition.
 
Hence, I don't think it is ready."
0,the code is  well written
0,"yes, the existing code works well"
0,yes the travis CI has passed
1,tests are not modified to reflect the changes made.
0,yes the refactoring is comprehensive
0,No code was committed during the 2nd round as there were no changes required post the 1st round
1,"Yes, the team has tested the two new controllers and the existing controller
No, the code coverage decreased by 6.1%
The tests thoroughly covered the range of the project"
0,They have improved the writeup significantly post the first review. A descriptive test plan has been added and the overall writeup is very informative and lucid
0,"Yes. Since it's a refactoring project that has been tested exhaustively, I think it is ready to be deployed onto production"
0,"Yes, this is an expertiza refactoring project and the Travis CI build is passing."
1,"This is a refactoring project and the link provided for the deployed application is not working. However, they have very well explained in the wiki the changes they have made and have also added appropriate screenshots. But I am still not sure about the functionality as I am not able to test it."
0,I found the writeup very helpful and informative. All appropriate screenshots were added. Good job team.
0,Includes detailed test plan.
0,"Yes, the wiki page has a design section that includes both RSpec tests and Manual UI tests. The RSpec tests state what scenarios will be covered by the tests. These cover multiple, deep paths through the system, such as non-zero weighted scores and zero weighted scores. The UI tests check the same scenarios, but give instructions on how to do it. They do a good job of giving these steps in a concise way."
0,"Yes, they write their test plan. And it seems like it will cover most of edge cases."
0,"Yes, they have added test plan mentioning new test cases they are going to write and how they are planning to do manual testing too."
0,The test plan describes both the automatic test cases in Rspec and the manual testing instructions in detail for the four issues recognized.
0,An elaborate testing plan for Rspecs and manual testing has been provided. Tests don't seem shallow.
1,The team has documented the test plan. It involves manual testing as well rpsec testing . However the team could have elaborated some more on the implementation of the rspec testing and which features would be tested in each of the stated files.
0,The test plan is good and it does cover all the cases.
0,Yes it does include the test plan
0,The test plan is really good. Giving specific steps on how to test the project.
0,The design document includes their test plan. There are tests with RSpec and manual testing. The test plan covers the functionalities they plan to add.
1,"The figure show the flow of ""review update and notify reviewer"" clearly.  But it seems that there should be a line between the ""Author"" and ""Review"" since the author can see reviews related to the work."
0,The visualization is good and understandable.
0,"The team has explained the flow adequately using a flow diagram. Also, there are some UI snapshots for one of the functionalities (Email preferences - again don't know why this is being done) that shows how will the app look after the changes are made."
0,"The uml diagram aptly describes the impact of user actions on different entities involved: assignment, email and review."
0,It's a fairly okay work
0,"Yeah, they have added the mock UI screen of expertiza pf how their changes are going to get reflected in expertiza, which is a good thing and they have also added flow chart to explain how sending email notification functionality will work when there are new submissions."
0,"Yes, their graph is easy to understand."
0,They have used diagrams appropriately.
0,"Yes, it is as simple as possible"
0,Yes. The design is as simple as possible.
0,Yes they have kept it as simple as possible
0,The design is simple and clear and the approach is proper.
0,"The proposed design appears relatively simple. The team has explained the new code changes required to generalize the review versioning, which involved adding new functionalities and testing the associated features with the rspec testing tool."
0,"Yes, the design appears to be simple as it clearly mentions the flow if user actions and how it impacts the entities: Assignment, Submission, review and email."
0,Yes it looks good
1,"Not very simple. In order to make it more clear to others, they provide much information about their issues, plans, tests, designs and so on.
My suggestion is that maybe you can make it a little simpler though it is good enough."
0,"The design seems very simple, they are only modifying files directly associated with the functionality they need to implement. There doesn't seem to be another way to implement this that makes it more simple."
0,The design given in the document looks simple and clear.
0,Their design is reasonable and follows appropriate principles and patterns.
1,Yes they have not localized the changes to be made but it is a good design
1,"It could just be the project itself, but I don't quite get how the score calculation and the email parts of this project correlate with one another. Regardless, their approach seems solid. The reason I gave this a four rather than a five was due to the fact that they didn't list any of the existing specific functions that needed modification, only the files they were located in. I believe some pseudo code or pointing out existing code would have been a great resource for reviewers."
0,Yes the design is good and understandable.
0,"The team has done quite a good task in making the documentation. All the aspects have been covered pretty well. The sections for problem statement, proposed code changes and test plan have been drafted well."
0,"Yes, the proposed solution section contains the strategy to rectify the problems and is well backed up by UML diagram which explains the entity relationships."
0,Yes fairly good
0,"* NOT RELATED TO REVIEW: DISCLAIMER: I have reviewed this Page in review 1 and when prof started review 2 mistakenly i started to review this page again, so i think because of that i was not able to see my review 1 comments to compare too for review 2 also, i think it is because of the issue came in review 1 last day. Piazza issue @445 .  Just wanted to mention that i have review this page 2 times**
* REVIEW ANWER* 
Yes, Design appears good to me Requirement is not that complicated and team is making changes using the completely appropriate files. Although i am not sure if they are following any particular design patterns been discussed. Design remains the same after review 1."
0,"Yes, their doc is very clear and easy to understand. 
They have everything and their logic is clear."
0,They have given use case diagrams to help understand the system.
1,Some explanations are not detailed enough. It is better to be specific to which function to be modified.
0,They have explained every change with best possible clarity.
0,The code changes as well as the visual changes required in the application have been appropriately stated by the authors in the documentation with the help of use case diagrams and test plan.
0,The team has segregated functionalities and tagged files to be changed with each functionality. This makes it easy to understand what's going to happen where.
0,"The authors have adequately explained the interface, quality portability and performance requirements. The proposed solution covers all the issues recognized."
0,Yes it looks adequate
0,"Yes, they explained every proposal changes they plan to make."
1,"Yes, the authors have thoroughly explained the problem, what the solution must be, and how they will implement it. They walk through each feature that must be added, and detail what files will need to be changed. However, a few features don't mention what files will be updated (i.e. Sending an email when the submission parameters don’t change). These should have the files mentioned in them."
0,All the diagrams are well given and they do follow the semantics.
1,"There could be more visual aids, honestly. They describe a lot of stuff thoroughly about the existing design but having visual indicators would be helpful to those less familiar with Expertiza."
0,"UML diagrams are good, precise and easy to understand. All conventions were followed."
0,UML exists in the doc for the new requirement and there's no UML required for the bug fixes.
1,"The use case diagram seems fine.
UML diagram for db and relevant tables is missing."
0,Photo of the issue and one Uml diagram has been added
0,They explained their plan well and clear. They wrote about how they would change or add code and what files they would change.
1,Some explanations are not detailed enough. It is better to be specific to which file and which method need to be changed.
0,Particular sections are been created for each change which makes it easier to see and understand
1,"It was easy to follow and understand. The explanations were adequate and to the point. They want to test the functionality by writing test cases once to see if it is working correctly or not, which is good. However, what if it is not working correctly, what will be the solution? or what will be the course of action? This has not been mentioned.  In general, when we submit a review in expertiza, it can't be updated. if authors plan to create update button, How will the review reopen? what are the steps associated to reopen a review? What are the files associated? has not been mentioned in the document. I would suggest to add up those two things in the document which will make it more precise and robust."
0,The proposed changes seem fine. The changes proposed for the email functionality can be removed.
0,It proposes changes in weighted and unweighted scores which seems reasonable.
0,The overall quality of explanation was decent.
0,I thought the write up does a good job of explaining the problem and solutions. The diagram of the system from the point of the user was very useful.
0,Adequate Explanation
0,"The design document incorporate all of the functionality required. The functionality required includes zero-weighted scores problem, non-zero weighted scores problem, and review update problem. They are all included in the design document."
0,"Yes, they get all functionality included."
0,Yes it does include most of the functionality required
0,"Yes. Team has covered all the required functionalities in the design and requirement section of the doc. Also, i could see few additional functionalities which is not part of the project based on the project description. So glad to see that they have taken additional functionalities to contribute more."
0,"Yes, all interface, performance, portability, quality requirements are covered."
0,Very  clearly explained
0,"Yes, Team has incorporated all the important details like what files needed to be changed, optimising the solution, test plan. I would also like to appreciate teams efforts in explaining the problem in greater details. Flow charts helped to understand the problem. Team has mentioned about test cases that they will write newly to test the functionalities."
0,"Yes, the design document details solutions for sending emails for updated linked documents, score displays, and updating a review."
0,Complete Functionality
0,"Their design document includes problem statements, their plan of work, and their test plan. The test plan includes test in RSpec and manual testing. Their design document is organized and includes all the things required."
1,"It is better to have team members included. By the way, there shouldn't be any introduction about expertiza."
0,It seems to be pretty complete. Covers all the aspects.
0,The document is complete. Everything is proper. I have added my suggestions above.
0,"Doc is really good. Requirements, design and test plan is explained in detail, even the performance have been given an importance for the project."
0,"Overall, it was decent."
0,"No, i don't think team has missed any part, but team could have given a little better explanation in changes that needed to be done in the files. Rest, looks like team has put real efforts in creating the design document."
0,"The wiki has a section for purpose and testing plan. The proposed solution section acts as the design section, as file changes are discussed here. I think the document is quite thorough. I like how it broke up the design based off of each piece of functionality that needs to be added."
0,Design doc is complete
1,lack of files to be modified
0,Good use of UML and Design Diagrams.
0,UML Diagrams were informative.
1,"very detailed URL diagram;
but seems the use case diagram is unnecessary, since the data flow diagram already include all these steps."
1,Proposed solution is very abstract and difficult to gain detailed information about how this solution is going to get implemented.
1,Core snippet. Files which are going to be changes are the way you are planning to implement the solution is missing. Otherwise everything looks good to me.
0,"brief and concise description, can fully understand what they are going to do."
0,I think so. It does.
1,"need to add files which need to be modified and added;
test plan should include more details."
1,"Cannot test many edge cases as there's no way to checkout the books. UX is not good as it's really difficult to find actions. 
Admin account cannot be deleted"
1,"Missing Functionalities:
Books: Image is not there
Admin: 
View special book borrow request  Throwing error
Cannot manage student and librarian accounts
Cannot edit the profile of his/her account
 
Librarian:
Couldn't test hold request module as book cannot be checked out. 
Student:
No action to checkout books"
0,There are regular commits throughout the project duration
0,Code Quality is good. UI couldn't have been be little better
1,"Few edge cases pass,for example Admin account cannot be deleted,can only be edited . But, few others don't. Like,When a student that has issued books is tried deleting,it throws an error"
1,"Have tried fixing the issues from round one. But,When the admin adds books,the published date is considered as a string,which could have been handled properly,as published date is required in the search as well.Also,the special borrow request view page throws an error in Admin's"
1,"1. Admin can delete the books which are checked out by students. 
2. Student can perform the approval of librarian and editing other students.
3. Student is not shown the option to edit their profile.
4. A single student can request the same book multiple times increase the count to n."
1,"Most of the major problems were fixed, however, some of the functionalities are still not working as it was expected to be:
1. Book Search by date functionality have not been developed.
2. Librarian was able to perform some functions before the admin's approval.
3. Student is able to approve a librarian by visiting - http://iwolflib.herokuapp.com/librarianrequest"
0,Yes the team kept committing their changes throughout the project phase. Also the round 2.
1,"Most of the features were taken care of , however, Authorizations have not been properly dealt with. Student is able to perform admin's and librarian's functions if they have the URL with them.
Facebook or gmail logic has not been implemented"
1,"I was not able to find tests related to the book_mark model. Although there were tests for bookmark_controller, they don't cover the edge cases of what happens if that particular book is deleted."
1,"1) Because there is no association, even if the book is already checked out, it doesn't stop the admin from deleting the book and it still exists in user return management
2) I was not able to check out some books even if they are not in special collection and have enough count and do belong to the library which is in the same university the student is in.
4) Reservations are not deleted, the is_returned status has not changed and is still false.
3) No, but the password can be changed."
1,"1) The UI is a bit hard to navigate 
2) When the user-created is a  librarian, I am not seeing the library option in the UI or at least the Education Level doesn't go away
3) A student is not supposed to update his education level.
4) I was not able to see any option to select a library when logged in as a librarian. 
5) /book_requests is not working.
6) Normal Book borrows/bookmarks are working fine.
7) Admin is able to see the borrow option and bookmarks option, which was intended for students."
1,"1) There were very few associations mentioned, i.e. librarian belongs to the library. 
2) Associations between bookmarks & books, library-books, book-history - books can also be specified."
1,"I think there are a lot of controllers defined, they can be cut short by enforcing policies or restrictions in the same controller or view itself. And not very DRY"
1,"Library relationship
Book history relationship not clear"
1,"No. The team has implemeneted tests for book requests model and controller, however they are not thorough and only check the success for ideal conditions."
1,"1 The book history for that book is deleted.
2 Student cannot be destroyed no matter what (regardless of book issue status)
3 No
4 Admin account email should not be allowed to be changed (currently it does)"
1,"The book hold request functionality is working. However, admin cannot view the list of book hold requests. There is a new section for special book borrow requests instead of having it as general book hold requests. The link in reference is not working as expected. The books section has clear guidelines for everyone as to which is a special book. The links are shown to admins and librarians(should not) for requesting as well although the task fails as it is unauthorized by action. Librarians can exist without Library."
1,"The book to library relation is undefined
The library to university relation is undefined"
1,"The team did use github for collaboration purposes, however they have not created any issues, nor do they have a project board. Also the commits are quite sparse with the commit details vague and only major functionalities committed."
1,"1 No the code does not follows the standards. There are separate functions for individual tasks most of the time, however in the scenario of returning the book, All tasks of book return, creating entry in history table and checking for existing hold request and issuing the book if request exists is all done in the same fns
2 Yes, A lot of fns such as (for bookmark)mark_book, unmark_book are named in ways which take a little bit time to understand
3 The book return method is really long and follows a complex flow structure"
0,Yes they have test thoroughly.
1,A student with book request/borrowed can still be deleted
1,Something went wrong when I clicked the View Special Book Borrow Requests and View Hold Requests.
0,Yes they have the right relationship
0,Yes they are keeping commit
1,"Login model and controllers seem to be tested properly. Functionalities for registration, editing profile and logout working fine. But clicking on back button it redirects to login page so session is not handled"
1,"There's no separate login page for admin/librarian/student. But other pages looks pretty neat and clean, though styling has not been done but i think that's something which can be considered later once the functionalities are required."
0,Team has very actively pushed changes throughout the project period.
1,"UI is simple to use, but due to lack of formatting, I am facing issues in understanding which link belongs to which record. Kindly change the formatting to bring a better impact on the user."
0,Team has tested one model and  one controller
1,"User interface is interactive,however the UI can be made more clearer look wise and adding labels"
1,"Code follows good Ruby and Rails coding practices,But the naming could have been done better"
1,"Github changes were regularly made.
 
However, I do not see many UI functionalities for the librarian. Like creation of books is not visible in the options shown on the UI."
1,"Functionalities can be checked in the test case - like - All Borrowed Books can be again borrow, hence giving a negative number. This can be easily detected in the test casees. Hence, testing can help in getting the model and controller function correctly."
0,The code written follows the Practice of MVC. All the logic is separated in controllers. Rails coding standards have been followed.
0,There are regular commits to the repository.
0,The test cases are covered as part of development and cover basic functionalities.
0,"yes, they are keep working on the project 2."
0,Github page includes commits at each an every stage whether it was a functionality implementation or a bug fix. Nice work.
0,The code has been implemented in accordance with the standards and the team has also done testing of at least 1 controller. Kudos.
1,"Most part is good
there are some suggestions: 
1. Add the ""back"" button on the all page.
2. Some buttons and information are duplicated. for example, there are a lot of ""new_user"" button on the user management page."
1,"It deserves further work. The project is obviously still ongoing, and most of the tests are still failing, so it is still premature."
0,"After I pointed out that there lacks the interior logic behind why they implemented as what they did, they made an update to the wiki page, which now contain the depicted project scope explaining precisely how the program works and what is the logic behind it. Thus the documentation now is complete and detailed."
1,"I have to say that, although they made further updates including refactoring, the commits mostly failed. But it is OK if they continue working on this project as their final project. Just keep on doing this job."
0,Ignore.
0,The project is already merged.
0,Write up is good and everything can be understood. They have developed the documentation which is comprehensive and understandable.
0,Yes the build is successful after following the steps described in document.
0,Yes the commits were added after round 1.
0,They have followed all the guidelines properly.
1,"One PR is already merged and the other PR is having some issues. But since the team is having constant interaction with ""jdm"", I hope they will be resolved and it will be merged soon. If they are not able to do it, I suggest team to take these issues to the final project and complete those steps along with the subsequent steps of the project."
1,"The writeup is well written. The team has added many things in round 2. The description of the steps have been made less technical and more understandable to the first time reader. It would have been better if they had explained why they had to create 2 pull requests instead of 1. This is the only thing I couldn't understand. Else, everything is very clear from the documentation. Scope written and flawchart drawn are very usefull to understand the project and their work. Also, a section explaining what exactly webassembly is and how does it work would have made project topic much clearer and interesting."
1,"The system operation cannot be tested from UI because this is a Mozilla Project. Their project was to fix/modify/add code such that WebAssembly programs can be compiled asynchronously. One of their PRs is merged there are positive comments on the PR which is not yet merged. This shows that the features are working as expected. However, the PR maintainer ""jdm"" made some changes in their code and it caused 14 test cases to behave unexpected. I suggest the team to review it ASAP and find the reason why those tests are not passing."
1,"Most of the variable names and method names are readable but I suggested the team to change a few variable names like ""maybe_url"" which they have not changed. I feel this must have been their code's requirement to have such variable names. Other than that, variable names and methods are pretty straight-forward."
1,"The writeup is good overall however it would have been much more helpful if the team had included what exactly is WebAssembly and how it is useful in browser engines. Due to this, it was a bit difficult to understand exactly what they were trying to do. Also, the team could have worked more on explaining the code they wrote. It is not possible to understand the code by just looking at it. Other than that, it's proper."
1,The team has already written code to solve the initial steps partially. This code has been tested and already merged into Servo so it will definitely be correct. The new code that they are working on is currently not working properly since all checks and tests are failing.
0,"According to their Servo project page, it seems their steps don't require external tests to be added from their side. The Servo team has predefined test cases to check whether new code works or not. Since their tests pass, their code should have the correct behaviour."
0,The team has regularly committed changes.
0,The writeup explains the issue and the reason for solving the issue has also been mentioned. The writeup explains the functionality well.
0,They have provided steps to check the functionality and it works as expected. The project may not require any refactoring. The goal of this project was to support compiling WebAssembly programs asynchronously and this goal has been achieved.
0,They did not add any new tests but they have tested the servo implementation against the servo provided automated test suite.
0,"This not an expertiza project, so ignoring this question."
0,There was a new code committed during the 2nd round.
0,The code was written well and they added meaningful comments so it was easy to follow the code. The code had no bad names or long functions in the previous round as well.
0,"Because their pull request has passed the test and already been merged, eveything works fine. And they have made a contribution to this open-source prototype web browser."
0,Just run test-tidy is everything needed.
0,Everything they wrote was in normal length and followed the normal standards of the whole project.
1,"Maybe implicity is one feature of the servo project, so they did not write down any comments inside the whole block of codes they added. But I still recommand to add some comments as a special reminder in some cases."
0,"Yes, all the function names are very natural and easy to understand. All the names are accordance to the normal principle."
0,"No additional tests needed this time, and they have thoroughly run test-tidy."
0,"As mentioned in their wiki page, all their work focused on the implementation, and they have made statements clearly about what they have done and their changes to the codes."
1,"So the task involved is ""support asynchronous WebAssembly compilation"". On the wiki page, there lacks the explanation about how they realise that goal by creating the new structure and methods, which is precisely, the logic behind it."
1,"No long methods.
More comments are needed to explain the functionality."
1,NO comments and no description.
0,Variable names are understandable.
0,"As discussed above, there are no test plans included. Rather some standard tests of Mozilla and a command to build servo is run to test if everything is working fine."
1,"Definitely more comments are needed to make the code more understandable and readable. Otherwise, the code is written using proper functions that are small and task-specific. The language is Rust and not Ruby. So, can't judge based on Ruby Style Guide."
1,"The newly added code is written by following standard practices. The authors did not have to create a lot of new methods or variables. But I suggest changing names of variables ""maybeurl"" and ""maybeSourceMapUrl"" on line 868 of file ""components/script/script_runtime.rs"". This names are not good as per as what I feel. why a ""maybe"" in variable names?"
0,"The test plan is not implemented but the authors have run two commands (""./mach test-tidy"" and ""./mach build -d"") that, as per authors, executed successfully. It means that the code is correct and the changes are passing standard tests and the code is able to get built successfully."
1,Comments are needed which explain what the code does. Other things follow the style guidelines. The methods are short and should be doing what they do.
1,The authors have commented any of the code they added. This makes it harder to understand what the function or that block of code does.
1,"The authors have properly attached screenshots of the exact changes made in the files along with a brief description of how they added the code. Since the Moz projects don't include writing a brand new file, the aspect of design pattern cannot be commented upon. It would be good if the authors explained the parameters and stuff."
1,"The page is well-written explaining what their project is and how it integrates with the whole of Servo browser engine. They could have simplified the terms so anyone could understand what is web assembly compilation in browsers and why exactly asynchronous compilation is needed. Other than that, I feel they have included necessary details and linked to their project page for more details."
1,"Missing deployment link, project is not expertiza"
1,It doesn't have comments inline but the variables are pretty self explanatory
0,"There are no design patterns required in this work, it's a implementation of something outside of expertiza"
0,I have an understanding of what it does.
1,I was unable to test the features by following their steps. I am assuming the feature works well based on the test plan and looking at the code.
1,No tests are added and the existing tests fail. I think for your case if the existing test cases pass that should be good enough.
1,The implementation section shows details of the steps as to why it was implemented. They could have provided more description for each step and what the step was doing.
1,Make the writeup more descriptive and add each step and explanation for the step. I could understand what the project was doing but not completely. Add the existing system which improves the understanding.
1,"Can't test manually, application is not hosted on the server. No link provided."
1,There are no test cases written for the implementation.
1,"The repository definitely needs more comments as I had trouble following the code. However, the function naming convention and size are good as they are."
1,No comments are added to the code. The comments are added especially for the unsafe block that they have included.
1,"The pull request is failing and the test coverage has not increased.Within the code, the naming convention seems fine. Although they have written code in unsafe block and allowed unsafe code inside the implemented struct. They have not added any comments as to why this was implemented. Allowing unsafe code will skip any all the checks that would normally happen and allow you to directly access the memory, thus, making the code poor. Had their been a reasoning of why that was implemented, it would have been better as a reviewer to judge there code, but without enough information in wiki and in code comments, it is difficult to apprehend poor code decision choice."
1,"The wiki seems good and explains the background and motivation of the task. However, the implementation is left for the user to figure out by providing the screenshots. It should rather have been explained about what approach was used and the reasoning behind it."
1,"The design document also includes test plan as part of design document,Though it explains scenarios of test cases,they could have been a little explicitly mentioned than being vague"
1,yes there exists UML and such diagrams in the documentation that explain the overview of the proposed changes.The naming could have been a little more relavent
1,"The design provided is simple and easy to understand. Although,there are no methods mentioned for the suggested design,including them would have added to the ease"
1,"They have added two charts, used case diagram and data flow diagram, into the documentation. Both are necessary for comprehending. However, there needs to be more charts showing UI of related funtionalities."
1,"The diagrams included shows the proposed working of the system and flow of logic. However, the authors have described the changes to be made to the system in the documentation which eliminates the need for visual representation."
1,"The design appears to be sound and logical. However, the authors should have written more about the design principles that will be followed and if they were planning to use any design pattern. The design is quite intuitive as well."
1,"yes, design include the test plan? Are the tests shallow or they will really test the functionalities but test plans can be more detailed and informative,"
1,"yes, the design appear to be sound, following appropriate principles and using appropriate patterns. but test plans can be more detailed and can point the files which are going to be changed."
0,"Yes, the design includes a test plan which covers the different types of tests they will be carrying out."
1,"They explained the changes to be made to the system clearly, but it would be better if they could give more screenshot to help understand."
0,"Yes, it passed in the last commit."
0,Build is passing.
0,The pull request has passed.
0,Yes build is passing
0,yes the travis CI passes and there is no conflict with the base branch.
0,"Yes, the Build passes and there are no conflicts"
0,"Yes, it can be deployed. Yes, this is a good starting point for the future team to pick up."
0,Yes it is
0,Good to go.
1,"I think the code they have written is good enough compared to the rest of the code. However, the add_reviews method is very long and if they can separate out some portions of it to make it more modular it would be better."
1,"I think it is a good starting place for future team. I think so because the overall code coverage has decreased. My biggest concern is that, the team has not added any test cases. Overall the code looks good. I can't say much because the instance is not running in vcl."
1,I am not sure if the project has to be done from scratch or not but the UI just crashed so i don't think it must be deployed in production
0,The writeup is clear and complete.
0,The writeup is the best part of the whole project. It is pretty much detailed and well-written
0,It is well written and have improved previous problems
0,Very good write up.
0,Write up is clean.The problem statements and solutions have been suggested with screenshots etc.
1,"The write up was not extensive. It only had screenshots of what they've done. No design, implementation, test plan sections. No description of problem statement or tasks. I have given this comment in the previous round as well."
0,"In the previous review the introduction to the problem was not clear, but now they have changed it and it more understandable for first time users."
0,The write-up is written very well and is detailed
1,"1) They have create a wiki page for their writeup
2) The writeup is not well explained, instead of explain everything in words or work-plan follow, they use a lot of screenshots
3) The code comes with enough logic explanation but no reason for why they do it in this way
4) The size of screenshots need to be adjust"
1,The system from what is mentioned by following the steps as mentioned in the wiki page fails at step 5. There is some error in grades view
1,I think the server stopped. Unable to test it on the UI
1,Can't test as the instance in the vcl was not running.
1,Coverage decreased.
1,"From the commits log, it seems they reverted the tests as TRAVIS CI was failing. The test coverage was reduced from 29 percent to 16 percent by factor of 13 percent."
1,yes but the coverage decreased
1,"The team added has test cases,the coverage has decreased. So,there are not many newly added test cases,so considerable amount of test cases have to be written"
1,No new test cases were added as previously the test case for the functionality was already written. They didn't add a single test case for the project.
1,"The coverage has decreased but this might just be an issue with travis, as this has been reported by the TA.
The team has modified a test case but i don't see any test case being added"
1,"1) They have modified existing tests to suit their implementation
2) It seems they delete more Rspec test than add new ones, also the coverage drops
3) I could not figure out their test's relationship with their implementation since there is no comments at all"
1,"Yes, some new code was committed and TRAVIS CI failed for many cases, finally it worked"
0,The code is great.
1,"Overall the code has been written with ruby conventions.But,there could have been comments included in the code for easy understanding"
1,"1) No bad names for variables and methods 
2) There is no method too long and the code is DRY enough
3) There should be more comments about test part"
1,No comments in their test.
1,The code does not contain comments at all.
1,"No, there are no comments and it made the code difficult to understand."
1,"comments missing in the code, but the documentation covers that."
1,There has not been comments written explicitly when the methods have changed
1,They did not add comments which explained the code. They have some code that has been commented out left in the pull request in the spec/models/vm_question_response_spec.rb file.
1,There are no comments in the code.
1,"1) Though it only fixes bugs with few codes, there should be some comment to help read
2) The comment could be telling what it does and its approvement compared with previous code"
1,There are no comments for the code added but since the team explained the changes in the wiki page we can understand but it is pretty hard without it. May be the team can add comments next time.
1,Comments haven't been added properly throughout the code. Can be improved.
1,"Some of the parts like test plan and introduction were difficult to follow through. Rest all, was properly structured and explained."
1,"Most of the things are explained but i think it can be better as "" what exactly was the problem and what you did to solve it"" ."
1,"Unfortunately,though there have been several changes made in the existing repo,there have not been sufficient comments put as to why has the changes been made"
1,Everything is well formatted. Documentation is easy to follow. It was a little tough to understand at the start. I would suggest to to change the introduction because I had to read it 5 times just to understand the what the problem was.
1,"The team has stated what was the problem and what they had fixed. They provided the snapshots of the situation before and after the fix which is really nice. The code changes were explained along with the main logic of the code. All the relevant code files and their github link has been provided. 
 It would be nice if the user can be guided how to test it."
1,They have a section called Tests other than Test Plan which did the same thing. The tests section could have been more detailed making reviewers could easily understand the major steps of the test.
1,"Code testing seems to be good. But, they should try to explain and cover some corner or edge cases."
1,The write up does nit include test plan section but does mention the work done. I also think there should be a ending section including the result and various commands to run the environment.
1,"There has been a test plan . Though there are testcases written to test,there are few redundant code lines that exist in response_spec"
1,No test plan but they did add tests as i can tell from their pull request.
1,They have tested their code properly. There are no edge cases or invalid inputs for the test plan. I think it is not required as a part of test.
1,"1) They have modified the test files to test their implementation
2) The test is not enough, it does not consider potential edge/fail situation but only succeed situation"
1,"Yes, I can understand the functionality related to the work. However, more specific details about the test procedures and test results should be included."
0,The writeup is good enough
1,"Need to add more information in the writeup. Such as design, implementation and test case related."
1,Write up is a little hard to follow at first. I think some of the sentences such as one in the introduction should be changed so that it becomes easier to understand.
1,"1) I could barely understand what they did from the writeup
2) The writeup is not adequate enough but give many words and pictures
3) The size of picture is too big to be shown on the screen"
1,Need more clarity in comments and then everything is good.
1,Works well according to the tests described.
0,The update works as expected.Suggestion would be to make he look and feel better
0,The team has done a good job in completing the features and they work as expected in all cases that i could think of
1,"1) The cases seems to be working, but because the details were not clearly mentioned in the Wiki, it was tough to get it working.
2) Please add more details or maybe a video to your wiki so that anyone can easily login to the system and follow the instructions to test the features."
0,All the features work properly.
0,Everything is working well.
1,The test code follows exactly the conventions of Ruby. It is more understandable if any comments about the method tested are written.
1,1) more comments are needed.
1,The functions are not too long and also the code follows the ruby style.But the code needs more comments
0,Good code
0,Everything in this section is proper and requires no modification according to me.
1,Its hard to follow the code since it is not commented well enough.
1,The variables and method names are consistent in the code. Some variables like f_back doesn't seem well fitting.
1,"The build is passed but,the code coverage is reduced"
1,Change some of the variable names such as f_back. It is hard to follow
1,"The team has not changed too much of code which is a good thing, whatever code has been added by them follows coding standards and variable names are intuitive, and standard.
 
The only suggestion i would have is, instead of participant = Participant.find_by(id: feedback.reviewee_id) they could have used reviewee= Participant.find_by(id: feedback.reviewee_id)
participant seems a bit generic"
1,"1) Generally, it is good since it's only a bug fix project, not much implementatoin
2) Some variables names could be improved like 'vm', hard to know what it means
3) Could be some comment for the code to help understand"
1,Class names and variables are used but variables name can be better.
1,The tests section is too concise. It is better that more details are give in this section corresponding to every test in the test file.
0,there has been tests written by the authors.It covers considerable number of test cases
1,They seem to have added tests. Just check why the coverage is decreasing.
0,They have covered all the test cases and everything is working fine.
1,"I can see all tests being passed in the pull request. However the test plan does not discuss on in depth test plan, that might probably because of the less complexity of functionality"
1,"1) They have modified tests to fit their implementation
2) The tests is not enough, it only considers succeed cases, more situations should be considered"
1,They are missing a few implementations but overall its all good.
0,They clearly stated which controllers or models need to be modified and give their proposed solutions step by step as well.
1,They don't really fully explain why they chose their proposed solution.
0,The design plan is well organized and easy to understand.
1,The team has given a high level overview for most of the requirements. A few details explanations can help the reader understand the project better.
1,Some sections need more information to be added e.g test plan and proposed solutions should be more detailed.
0,The authors do a good job of explaining the new functionality that needs to be added (automatic mentor assigning upon team forming and notifications). They did a good job of explaining why this is needed.
0,It's good enough
0,The overall quality of explanations is good. They've clearly explained what neet to be done in the next couple of weeks.
0,"The solution thet proposed generally follow the chain of responsibility and the work flow, as they state their design clearly, I think their proposed design is good."
0,No such problems so far.
0,The design seems ok to me.
0,The design seams good to me. The use of Chain of Responsibility is a good practice.
1,"Again, the team has not really described a lot of things in detail. No actual changes which will have to be made are specified, so cannot comment on whether the changes will make the code smelly."
1,No in-depth details of the design pattern have been included in the wiki page. I suggest the team to include more details.
1,"The design pattern diagram was useful, but it didn't help me understand how this pattern fit in with the project. The wiki says that there are ""multiple handlers with responses"", but I'm not sure what exactly this means regarding the project. It would be helpful to connect the pattern more to an in depth description of the applicable functionality. The code modified section lists what files will be changed, but not which methods. It should give more details about what the changes will be. This would let the reader understand how the design works with the code. For instance, what method will be called when the team reaches 50%? Since the new design is event driven, response time shouldn't be slow (polling isn't required to check the team's size constantly). Similarly, it doesn't look like any class changes will make the code smelly, but is hard to tell without details about changes to the classes/methods. I think the project is  supposed to focus only on assignments without topics. However, the project description states ""Assignments with or without a topic could be assigned with mentors automatically""."
1,The team provided the model or controller file that need to be modified which is clear and helpful. However the modifications are lack of details and explanation so it's not able to check the questions above.
0,There's a diagram for the whole process and help me to understand what they are going to do in this project.
0,"The visual diagram is very clear and helpful. There is one diagram with explanation used for 'Design Pattern', which clearly shows the chain of responsibility in design pattern. The other one is used to explain the work flow which is also clear to others to show the structure of the function."
1,"The UI screenshots, flowchart, and chain of responsibility diagram were all helpful in understanding the design. I would add a UML to help the reader better understand the intended code changes better. Since there are no UI changes, no new UI mockups are needed."
0,"Yes, uml diagrams and flowcharts are included."
0,"Yes, the team has made use of UML diagrams to make the user understand the flow of the changes that the team will be making."
0,"The diagrams are quite good, help to understand the design."
1,"They're okay, but could be better. Some of it, such as the design pattern section, is really nice."
0,I can easily understand work flow by work flow diagram.
0,"They added a screenshot to state their issue, which help me understanding their issue quicker, and they also added a work flow chart to show their proposed solution, all in details."
1,They have a workflow diagram included in their wiki. But the instructor part doesn't follow the convention.
0,"Yes, I can see from their wiki page that they use  Chain of Responsibility as the design pattern, and they have considered all the functionality they need to realize by showing the work flow chart."
0,It seems to.
0,"Yes, all the requirements are covered."
0,"Yes, the design document incorporates a good portion of the requirements."
0,"Yes, it pretty much covers all the sections."
0,"Yes, the wiki covers that a mentor should be automatically assigned to a team at a threshold, that the mentor should be emailed when this happens, and that team members should possibly be notified as well."
0,"Yes, it has complete functionality"
0,The team didn't miss important part in the document.
1,I think it has all the sections but some of them need to be fleshed out a bit.
0,All part is included and comprehensive.
1,More work in all of the sections is needed to give more clarity on the design.
1,"The test section says that new Rspec and UI tests will be added, but there are no tests provided. These should be added to the wiki. Apart from this, the design, testing, and purpose sections all exist. I would just add a test plan that checks if mentors are assigned once a team has filled up halfway."
0,"The project purpose, the project design, and the testing plan are included."
1,"Yes, the design includes the 'Test Plan' section. The section basically provide the direction what the team is going to do on this project but may need more details or explanation. More details may need to be provided for Rspec Test and UI test respectively."
1,"There is a test section, but it doesn't have many details. It just says that the team needs to update old RSpec tests, add new ones, and do UI testing. However, there are no lists of RSpec tests that need to be added. There are no UI tests either. It is important to have UI tests beforehand so that you can validate that you are creating the correct product."
1,The test plan does not give a step by step plan of UI/manual testing. I would recommend the team to add this.
0,"Yes, they state their design pattern by showing a picture, which appeared to be as simple as possible."
1,It is simple and easy to read. However it seems a little bit too simple. So the readers may not understand their proposed solution from the wiki.
0,"The design portion looks very simple and lean, with the files to be modified listed in a individual section, again something other teams should have done but did not do. This makes checking them much easier for future submissions."
0,Design looks simple and appropriate.
0,design appear to be as simple
1,There's no design in the document. Hard to say that whether it is simple or complex. Design pattern has been explained but how does it help in this project should be explained in the document.
1,"The design details must be added. Right now, I think the design document lacks in conveying what changes the team is going to work on."
0,The team is only modifying the files they absolutely need to. They are not adding additional complexity to achieve far-edge cases. I like the simple list of features they plan to add.
0,"The design doc included the test plan. They localized specific files to do the test plan,  they will really test the functionalities."
1,"I feel that the test plan could be a bit more in depth than just a brief overview, but it at least covers the general of what needs to be done."
1,The test plan section is not explained well. The team can do a better job here.
1,"Test plan is not explained enough in the document. There are absolutely no details for the UI testing and Rspec testing, what all test cases will be executed, how one can ensure that the project has been completed successfully."
0,"Yes, they use Chain of Responsibility as the design pattern, which is sound and appropriate to deal with the function they wanted to realize."
0,"The design looks completed, and this is the only team so far that has a solid understanding of what specific design pattern they're going to use. I am glad they made a separate section about it and did a great deal of visualization, it really helped reader to understand what they are trying to do."
0,"Design appears to be sound,"
0,Design doc have appropriate principles and patterns
1,"There's no design as such explained in the project. Rather the expected results are given in the proposed solution. Please include how will you guys approach to solve these issues. Also, why that would be the best way to do that."
1,"The wiki page stayed the same as last time. They could have made some more improvements. Like, explain in detail about their test plan."
1,The explanations is a little bit too simple. It can be more specific.
1,"Only the files are mentioned where the changes need to be made but haven't explained why these files should be changed, what changes will be done in these files."
1,The authors need to work more on explaining the design strategy in more depth and elaborate on the test plan section.
1,The team listed the files in controller and models that might be modified during this project which is clear. More details or explanation may be helpful if how they are going to modify the code or what will be added/deleted about the code could be provided.
0,"This work contains more visualization compared with other works I've reviewed so far. One thing to add is since the files (controllers, models and views) are already listed, one could make a graph on how data is interacted within these components, which would make understanding the design even easier."
1,They have a workflow diagram included in their wiki. But the instructor part doesn't follow the convention.
0,Doc has appropriate diagrams and describes the changes proposed
0,"Yes, the team has made use of visual aids to help the user better understand the design."
1,"1) book should have a 1-to-n relationship with book requests.
2) librarian should have an n-to-1 relationship with library and university.
3) library should have an n-to-1 relationship with university and an n-to-1 relationship with librarians."
1,"-Student is not able to edit personal information such as university, education level.
-The image of book seems can not be shown properly.
-some book doesn't have the checkout box to be selected to checkout.
-I failed to log in as admin using the email and password given on github page."
0,"Pull request has been made since round 1, so I think it is good."
0,No conflicts are present. The latest commit has passed Travis CI build
0,yes the pull request passed the Travis CI build.
1,"All tests are passing. 
However, schema.rb was committed and wasn't reverted."
0,"Yes, the build passed in Travis CI. So there is no conflict to resolve."
0,I think it's ready to be deployed.
1,Not sure. The test coverage has decreased.
0,"Of course, it is good enough./"
0,It can be merged.
0,yes I think the code is ready to be deployed. everything looks fine and it passed the Travis CI build as well.
0,"Project can be deployed. 
Next team can pick up from here."
0,"I think they have done a good job enough to be merged into production server, because their code is clear and follows Ruby Style."
0,"Although all their changes seem easy to understand, but I think they still need some comments between their code."
0,"They updated more test plan, which is good. Really good write up."
0,It is elaborate and complete.
0,I think it is clearly and easy understandable.
1,Same comment as last time. Providing navigation to test the changes shall help understand better.
0,"the writeup is very well written. the work done is clearly explained, the problem, tasks, approach, deployment, and tests are explicitly mentioned."
0,The wiki is written in great detail and is contained.
0,"The writeup is easy to follow, I can understand their work."
0,"Their writeup is well-organized and beautiful. I like their code part in their writeup, as it is clear to see what they changed for their functions."
1,"UI works fine, except could test all the functionality in the given time frame."
0,UI is perfect fit the style of other part.
0,Works as expected.
0,the project works as intended. all the features work as they are supposed to be.
0,"Task1: working as expected. Institution names appear in alphabetical order.
Task2: working as expected. New institution can be created
Task3: working as expected. Institute is displayed against instructors."
0,"Everything works fine to me, I check manually all the functionalities they implemented."
0,"Yes, their function works as intended."
0,The wiki page has plenty of details about the task and how they approached their solution. Good job on the documentation.
1,Very good job on the documentation. It covers most of the aspects of the project. Would love to see the test plan and edge cases included.
0,the tests are well written.
0,"The code follows the style guidelines, contains method of appropriate length and properly named variables."
0,Code looks good.
0,The project itself was to write tests. No explicit test plan section
0,Writeup is detailed and nicely done.
0,Write up is clear and adequate
1,"the test cases cover most edge cases,
however this method handles duplicated edge cases



 


context 'and due_at value not nil' do"
0,the test-plan is not explicitly mentioned since the project is on testing.
1,"the code is well organised and contexts and it are covered appropriately
 but in topic name class



 


describe "".topic_name"" do


 
 
 context 'when topic name empty' do


 
 
 it ""return -"" do


 
 
 expect(student_task.topic_name).to eq(""-"")


 
 
 end


 
 
 end


 
 
 context 'when topic name empty' do


 
 
 it ""return topic name"" do


 
 
 



two different scenarios are provided for the same context"
1,"- even though most test_cases are easy to comprehend, some comments could be added to specify the function tested by each method
- Also the test_method names can be more descriptive, elaborating on what the particular operation is performed on
-"
1,"the method names are specified however the function and implementation details can be more broadly specified since. 
The method names can follow to the ruby naming practices, by inserting  '_'  between any 2 words within the method name.
For example, the method 
 

complete? can be changed to task_complete? or  stage_deadline_complete? 
Get_due_date_data can be changed to get_due_date_timeline since it returns the time_line specifically"
0,"the project is based on improving the testcases and adding more testcases.
Each test-case has appropriately handled the edge cases"
1,"the wiki page has details about the methods that have been added , however adding the functionality of each method, even though there are many atleast 2 lines about each test-case could have been added.
 The names of the functions are generic and could have been more specific."
1,"the listing of test-cases are provided however, the function that each test-case performs is not written. hence it's hard to follow the same"
0,The code works well. There was no feature or edge cases because it was test case.
0,"Everything looks good. They followed the ruby style guide with proper indentation, which makes it easier to read. The code is DRY. Functions are small and tidy."
1,Each and every function doesn't have a comment. It is tough for a reader to understand why this method was added. I would suggest writing comments for those functions which are tough to understand.
1,"They have created variable named ""participant3"", ""response2"", but i can't find use of it in the code, so I would suggest removing the unused variables."
1,"They have tested pre conditions, but have not tested invalid input values and edge cases."
1,"It was clear to understand what they were trying to accomplish. They haven't used any design patterns, because they were writing test cases. There was no explanation of what Student_task.rb does, so it is tough for a reader to understand. I would suggest writing a short write-up on what student_task.rb does."
1,"Write up was good, I think there should be short description of what student_task.rb does and how it works on the project."
0,All the tests pass. There are no new features added.
0,All the tests pass correctly.
0,The test examples are all concise and easy to follow.
0,Yes. It describes each test case well in the .rspec file.
0,Yes. The writeup clearly lists the methods they intended to test and in the .rspec file each example is descriptive of what it's testing. It's easy to understand why each example exists.
0,"Yes. It is about increasing the test coverage of student_task.rb, and the writeup lists all the methods they wanted to test. They did it by inspecting the coverage report and adding test examples to increase coverage"
1,"As preemptively mentioned in the documentation, the test for reviews_given? does not work. Rest is fine."
0,The write up is quite informative and and has adequate descriptions related to all the documentation sections.
1,Edge cases are missing in the test plan.
1,"Although they have added tests for various student tasks, but there are no comments associated with the test cases."
0,Yes they have covered all the test cases.
0,All the unit test cases related to the student tasks are passed.
0,"The code follows all the good practices and did not have any problems during the first review and they haven't made any changes after that, so it is ok."
0,"Yes, new code was committed during the 2nd round."
0,"Yes, the project build passed in the Travis CI."
0,"Yes, the writeup looks good with the test plans written along with the code provided for each section."
0,"Yes, it seems it can be deployed from the first review. However, now the deployment and the video link both are not working so the work could not be verified."
0,This project is mainly related to writing the test cases. They have covered good number and ways of scenarios to be tested. i do not have any critics.
0,"Yes, team has made commits after review 1. They have worked on the changes i pointed out in first review. Good Job to team."
0,"Yes, build pass in Travis CI and there were no merge conflicts."
0,This Project was to write test cases. Coverage has increased to 92% from 31%.  This is a really good improvement made by team. Team has considered it from very beginning how the test coverage can be improved and they ave achieved it
0,"The project was to write the test cases and team has done good job. I have looked into the test cases, they have tried to cover many scenarios in the testing like  different stages of assignment, review deadlines, project deadlines."
0,"Yes, these test cases make total sense to me and i think they can be put easily in production server."
0,"I'm not the best at writing RSpec tests, but it looks good to me."
0,One new commit was added to update/revise some comments.
0,"I am hesitant to say this covers all scenarios as there could always be some bizarre edge-case I can't think of due to the nature of expertiza, but as far as I can say the tests seem to be exhaustive."
0,"The writeup is really very good. They seem to improve after first  round. They have explained their project, work and implementation in a good manner"
1,I think they should increase few test cases so that the overall test coverage would increase
0,- The build is passing meaning that the new test cases added didn't break the build.
0,- The test cases mentioned in the wiki are working fine.
0,- I think the writeup is sufficient. They have added enough information for me to understand what were they doing and what did they achieve. I also liked the fact that they added information about possible fail scenario were they might get issues.
0,- Written test cases works fine.
0,- Do not need them. Their task unit test cases themselves.
1,- Convention in `describe` not used in many places. They have used '.' in many places for instance method when they were supposed to use `#` with them.
1,"- Problems in naming convention in the `decribe` block. Should us '#' instead of '.' for instance variables.
- Increase in code coverage in the screenshot attached but the PR shows otherwise may wanna understand how they defer."
0,- They have described steps to setup and possible caveats.
1,"- Very well explained but I am already using and working on the app but a new user may not grasp it so quickly. Adding more details about student tasks apart from their method name would really be helpful.
Example: xyz(): used to create a user"
0,"Yes, the build passes and there is no merge conflict."
1,"The team added new tests. However, the coverage decreased. It makes no sense because they only added testing codes and nothing else."
0,"Yes, the tests cover all scenarios."
0,The write-up was already well-written.
0,"It only adds new tests, so it shouldn't affect the main functionalities. The tests are well-written and easy-to-read."
0,"No, I think the code is well written by following proper ruby coding standards."
0,yes a new commit was added during 2nd round.
0,Yes the Travis CI passes.
0,"Addition of new test cases led a decrease in code coverage. Code coverage was decreased by 3.3%. Well overall, the test didn't increase the code coverage."
0,Yes they have covered all the scenarios including empty or no data.
0,The wiki page is very well documented and can be understood easily.
1,"I think the code looks good. My only concern is that it decreases the code coverage for entire project. Though the change in code coverage is not significant, it is important to understand the factor that is triggering a decline in code coverage. It is important because the same issue might prevail in other projects as well."
1,"the method names are specified however the function and implementation details can be more broadly specified since.
The method names can follow to the ruby naming practices, by inserting '_' between any 2 words within the method name.
For example, the method complete?
can be changed to task_complete? or stage_deadline_complete?
Get_due_date_data can be changed to get_due_date_timeline since it returns the time_line specifically"
0,"although new commits were not made , the existing code is complete and requires very little change"
0,"yes the build has passed in Travis CI, before the 2nd round."
0,"the UI need nit be tested
The tests added"
1,"The write up can be more concise, the code snippets can be taken from git diff"
0,"yes, the code is ready to be deployed"
1,timeline_list can be renamed timeline since timeline implies multiple events?
0,PR already merged
0,Conflicts are resolved and PR's merged
0,Detailed write up
0,"No concerns were reported in the first round, the same code exists now as well."
0,Yes there are commits after 1st round of reviews.
0,Yes the build is successful.
0,"Yes new test cases were added, but the coverage dropped after this PR."
0,"It is a testing project, and the test cases are pretty exhaustive. Good job!"
0,The team has added all the missing elements that were reported in the last review.
1,"Given that this is a project to add test cases, the measurable output should be an increase in test coverage, but it has surprisingly dropped. I however dont think it is because of their code, but rather some issues with coverall (as some other teams too have reported issues with a drop in coverage despite adding new cases). So my only concern would to verify if the code coverage has increased for real. If yes, I think the code is ready to be released to prod."
0,No improvements were suggested in round 1.
1,"There are few test case contexts which could have been merged into one. eg. context 'when topic name empty'
There are two contexts with same description which is not self explanatory and could have been combined into one context. 
 
Comments are required as it was hard to go through the code."
1,"It was hard to understand the need of the project from the writeup. Also, the problem statement is not clearly mentioned. However, it states what things they implemented and where they implemented."
0,"Its RSpec testing, so though there are not comments, the way the tests are written are intuitive enough to understand."
1,"Judging from looking at their pull request, video, etc, yes. However, there isn't enough documentation to the tests in the wiki. I have to go very far out of my way to find this stuff when it would be much easier to just view it from the wiki itself."
1,The wiki should have gone through the added test cases.
0,i pulled their code and tested it manually and test cases are working perfectly fine and team has done very good coverage of test cases.
0,yes they have converted all of them in test cases.
0,yes team has commented the test cases and give good description about what they are going to do and also name explains that too.
0,Yes they have increased coverage to 90% which team has considered as target from way beginning in test plan also. the have given good description to test cases and they are self explaining
1,"Yes, team has explained well about what test cases they are going to write, and why they decided to write those test cases. Though they have not used design pattern. And it would be nice if team can explain about test cases. because some test cases are hard to follow and in order to understand it you will have to understand the background of it. 
Example hyperlinks? what does current stage means?"
1,"Wiki page can be improved.,it would be nice if they can give project description and problem statement before sharing the test plan. Indentation can be improved, Team has used etc etc word alot that can be improved. They have give all teh details in references, team members and mentor that i like."
0,Edge cases are working
0,All the tests pass
0,"1) functions are of correct length
2) the test cases are in their proper files
3) no comments made
4) the code is in proper format
5) no"
1,No there aren't comments for methods
0,The test naming is done very nicely
0,Yes it is clear to follow what they did
0,Yes the write-up is pretty well written and explains the working
1,Test coverage decrease.
0,I think the test which submit last round is good enough.
0,The team has thoroughly tested the added functionalities. I see test cases for all the issues they have covered.
1,no new test cases were added and coverage didn't increase. but the old tests pretty much covers the project.
1,"The team has added extensive tests and seem through.
The coverage, from what I can see, has decreased."
1,"They add test cases for the code they changed. The coverage decreased.
There's no new added tests, so the coverage remains same as round 1."
1,"Yes, they have added test cases but the coverage doesn't increase. With their wiki, I think their tests they added have already covered the most common situation of their function."
0,I see only two commits.
0,"Yes, there are some new change has been made in 2nd round."
1,No new commits have been made during 2nd round. The last one was made on Oct 29th. Must be because the functionality is complete.
1,no new code was committed during the 2nd round.
0,There were 2 commit made after the 1st round.
1,There's no commit in 2rd round.
0,"Yes, they have new code committed after the first round submission."
1,I found a few places where the redundant code was present. Functions could have been cut to a smaller line of codes.
0,It looks good.
1,"Since the first round itself, there weren't any coding issues. All is fine. There were no comments, at all, but it's fine as the code and variable names are self explanatory."
0,"the code is well written. it has meaningful method names, following the DRY principle. but could've added more comments."
1,The code is written well but lacks comments.
0,Comments are present everywhere.
0,They did a good job on this part.
0,"Nope, but the code is kind of self-explanatory."
1,could've added more comments to clearly explain the functionality of the methods.
0,"There is only one method added and no, it does not have comments. However, the method is just a few lines of code and simple enough to understand so I think it's understandable to leave out comments."
1,No comments have been made for the committed code.
0,Yes they have comments for their code which is helpful to understand what they were trying to do.
0,"No, there are no comments. But for each task, they've only add a few lines of code, and they are easy to read. So I'll say no comment is fine."
0,Test plan looks complete and comprehensive.
0,Of course Test has cover every part they done.
0,Authors have considered all cases.
0,the test looks complete enough. tests for each of the tasks are included. all the possibilities were considered. test plan could've been more descriptive.
0,Yes. The tasks of this project are about some specific scenarios. The tests cover all of them.
0,The test plan section is just called test but has all the required information for test plan. The required tests have been mentioned in the testing plan.
0,Yes they have testing for all three tasks.
0,"No, there's no test plan in their wiki. But they've provided many Rspec test code in their wiki. Those code are easy to read."
0,"Good writting, really clear writeup."
0,It is clearly enough for me to understand it
1,"Please add link to your pull request. https://github.com/expertiza/expertiza/pull/1506 
Also please provide navigation for each task the reviewers should take to check. Shall really help. Rest all looks good to me."
0,the writeup briefly explains the functionality of the work. it pretty much explains what the project does and how the tasks have been implemented.
0,Yes. It's concise and descriptive of the project.
0,"The document has been written very well. From explaining the problem, how to solve it and how to test it, the document has everything."
1,the write has adequately detailed the project and the code is added. I would recommend not to include the instruction to Expertiza as it is redundant.
1,It would be better if they could add more comments in their wiki. Even though the code they wrote is easy to read.
0,Writeup explains everything in detail.
0,"excellent display in youtube, I can totoally understand what they done."
0,"The purpose of the work, how it is achieved is clearly stated."
0,"the writeup is very well documented. clearly explains the author's work. the problem statement, tasks, tests, project videos, and deployment are clearly mentioned."
0,"Yes. It's easy to read and explains the work clearly. It also includes the goal, the solution, the result, and the tests for each task. There are no specific design patterns that they needed to use to fix the features."
0,The wiki page is very well written with detailed explanation of whta needs to be done and how the team has done it.
0,Yes the writeup is well organized. Also the videos they provided are helpful for understanding what they have done for their project. I would recommend adding more something like  flow charts on their page so that reviewer can quickly follow them.
0,"Yes, in the wiki, they provide details about what they did, what the problem is."
0,Nicely written documentation
0,Code is production-ready
0,added code followed all the necessary coding standard
0,Features are working as expected
0,RSpec test cases added
0,"The writeup is very well written and provides a good introduction and explanation to the controller, the issues and their solutions.
The code snippets help in following the written part even more.
The Testing section also gives a good insight into the testing of the quiz_questionnaires_controller_spec.rb with RSpec and includes link to the YouTube video and a screenshot of the successful Travis CI build."
0,"I think that this code is ready to be deployed onto the production server as there were small refactoring changes made to the quiz_questionnaires_controller.rb which were tested against the pre-written tests.
I do not think that the project should be redone from scratch.
I strongly think that this project is a good starting place for a future team to pick up from."
1,"The team did not add any new tests as it was a refactoring project and hence made use of the existing tests to test their project as shown by them in the YouTube video.
The code coverage after the latest commit had decreased by 3.3% to 27.162%."
0,"The new code was well written and nicely refactored without actually changing the existing logic.
The code did not have any bad names, long functions or redundant code. There were no DRY problems as well.
The code followed the Ruby style conventions and was very readable and easy to follow.
The addition of comments to the refactored code in the 2nd round helped in understanding the changes made by the team and gave an insight into their thought process."
0,"The Travis CI build passed successfully and cleared all the checks after the latest commit, which was expected as the latest and the only commit made after the initial review only involved addition of comments to 1 file.
I could not find any conflict with the base branch that needed resolving."
0,It is working as expected. The refactor things have not affected the functionality of the code. Good job.
0,The code is good enough for deployment because it adheres to the ruby principles and passes most test cases and it is just for refactoring.
0,Test cases were good and coverage has increased and the test cases were executed in an automated way. More test cases could have been performed but it was good.
0,The pull request passed the build for Travis CI and no conflicts were present.
0,The code has been improved a lot and refactoring is done in a good way.
0,Ready to deploy.
0,Yes test cases are added.
0,Passed.
0,"Yes, the new code is committed."
0,"The team has made the required changes and also modified the existing specs to incorporate the changes. The tests also pass after the changes. So yes, the code can be deployed to production."
0,"Yes, the write up is very well written and has relevant screenshots added where necessary."
0,"The team did not add new test cases. However, they modified the existing specs to incorporate their refactoring changes.
No, the test coverage did not increase."
0,"The provided link does not work. Also, as it is a refactoring project, the features work as they are supposed to. The team has included a screenshot for the same."
0,"Yes, the build passes in Travis CI. There are no conflicts with the base branch which need to be resolved."
0,"The last commit was 9 days ago. So no, it seems like the team did not commit any new code during the 2nd round."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
They also added a section on the current implementation, which includes the functionality as well as its drawbacks & solutions. This is a great addition and very useful for readers."
0,"The UI works as intended.
The features work exactly like they are supposed to. (this being a refactoring project)"
1,"The team did not add any new test cases.
Existing test cases were refactored to match the other refactoring changes made in the project. 
The code coverage did not increase, it decreased by -3.3% to 27.162%
There are no newly added test cases, so it does not affect the tests covered range of the project."
0,i did test to best of my knowledge and the way i did in review 1 and i donot see any issues. It would be better if in wiki page they can give better detailing of how to test thoroughly.
0,"Team has not added the new test cases as they are just refactoring the code, but they did run the Rspec file and made all the test cases pass. and after my manual testing also i didnt find any issues."
0,"last commit show is of 6 days ago, so i don't think team has made any changes after review 1."
0,The write up is well written.
0,The code is ready to be merged.
1,test cases added but the coverage has decreased.
0,The system works as it is supposed to work.
0,"Yes, the build has passed."
0,The code is written well.
0,"The write-up is pretty thorough. It explains the problem statement, current implementation, what improvements were made, and shows the tests pass."
1,"The deployment link was down, so I could not test the application. In the video, the project seems to work as intended. The project is a refactoring project, and nothing appears broken in the video."
1,"Test cases were not added. However, quiz_questionnaire_controller_spec.rb was updated so that the current user was stubbed to be a student. This was needed since only students can edit. Coverage decreased by 3.3%."
0,The pull request passes the Travis CI build. All conflicts from previous commits were fixed.
0,"There was only commit during round 1, which was adding comments."
0,The writeup is very good at explaining the functionalities and the work that has been done. So there is no issue in the write-up.
1,The deployment link has stopped working but I have checked it in the first review and was working well.
1,Yes the team has added test cases but the coverage has decreased by 3% as per the travis CI.
0,"Yes, the build has passed in the Travis CI."
0,The code was perfect during the first review and therefore there weren't much changes to be made and looks good. The authors did not need to change anything further.
0,Working as expected.
0,"The PR itself was about refactoring the existing code, so the added followed all the coding standards and conventions."
0,Test plan covers all the required cases.
0,Nicely written and documents the relevant info.
0,I tried running the test myself and all the tests passed as expected. The features work perfectly.
1,"All the new if-else conditional blocks are commented nicely, which help in understanding the flow in an even better way.
The rest of the changes, although minor should also be commented to help the reader understand the purpose of the changes."
0,Questionaire is working as expected so no changes in the functionality detected even after the refactoring.
0,Every test is specified in rspec and executed . Thus automated tests are performed.
0,More comments could be added as to changes in the previous methods and the main functionality of the implemented method.
0,Yes everything was mentioned as the problem statement provided the details. The changes were well documented and
0,Yes feature is working.
1,"Tests are updated but in the write-up, the test plan is not mentioning why the tests are written in this way."
1,some methods names are not self-explanatory like update_truefalse.
0,"variables, methods, and class names are explaining the cause well."
1,Should include why you have changed the code with the code changes that you have included.
0,"Yes, I can understand what has been done."
0,"Yes, the team has modified Rpecs to accommodate their changes."
0,The team has followed good coding practices.
1,"Although self-explanatory, the team can do a better job at writing comments for the new methods created."
0,The names are intuitive and describe the functionality that the methods perform.
0,"Yes, the team has mentioned about the changes they made to the existing Rspecs to accommodate their changes. They've also included a video for the same."
0,"Yes, the team has done a great job of explaining all the changes."
0,The write up is very well written.
0,The feature has been implemented properly and the the functionality is working as intended.
1,"Though there have been few comments added,they could have been more descriptive and clearly written"
0,Test plan has been included in the writeup and it has been written considering enough conditions and cases
0,The write up has been drafted neatly and it is easy to follow
0,The functionality have been clearly and adequately explained in the writeup
1,The authors have not created any test plan. They have only demonstrated test cases passing using the existing RSpec file and no changes are made to it.
1,"There have been no comments added by the authors.
All the new functions added have been added without any comments."
0,Reasonable and meaningful names have been given to the newly added functions.
1,"The write up does not include any test plan.
The authors have not added any test cases apart from the existing ones in the RSpec file.
The testing videos shows only the old existing test cases passing, and no new test cases  to cover the newly added functions have been added"
1,"They did fix some problems that I mentioned in last review, that is good.
Suggestion:
1. The test video needs a permit and the viewer cannot see it.
2. Please paste the Rspec code to the wiki page, and give the comments."
1,There is not any comments in each method and there is not any comment during the changes.
1,"1. There is no comments for the methods.
2. They do not explain clearly what do each method do."
1,"this team changed a little files and do not have comment.
e.g.
1. there is a new function average_based_on_rubric, and there is no any comment.
2. like this line: validates_format_of :url, :multiline => true, :with => /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/, they tried to set the limitation of url, however, they did not give any explanation and makes the reviewer be hard to understand."
1,"The modified code doesn't have comments in some files, which is pretty difficult for the readers to understand. May be a two liner about why a particular method is added or why some of the lines are removes would be useful.
Also, if the comment includes a hint for the user about the flow of code like before this which file we can look at, might be useful to understand the flow.
Big chunk of code has been removed and the same has been added and modified. Not sure what happened may be github issue."
1,"The wiki pages wrote about the precise procedure to what to do about the bookmark, that is great but There were too many words instead of the code changing and also I cannot see the video in the middle.
The wiki pages do not explain the way you fix the problem."
1,"1. Their writeup only shows the functionality of Bookmark.
2. There is no test plan, no statement about how they modified the code.
3. They did not explain how and why they do the work.
4. The link to the audio is broken."
1,"1. They wrote a lot about what to do of the bookmark functionality, however, there is nothing about the solution and how they fix these issues. 
2. I cannot watch the video in which there's a video link on the wiki page.
3. Please add the code part to show what files you changed and the details about the code.
4. please add the test part like the Rspec test."
0,"Yes, all the functionalities are there."
0,"Yes, the design doc seems to have incorporated all the functionalities of the conference/journal assignments from the requirements doc."
1,"- The document incorporates all the functionality
- It is unclear whether the feature is already implemented and the team is improving on it or the it is to be implemented from start"
0,"Yes, the design incorporates all of the functionality required."
0,"Yes, the design seems to incorporate most of the required functionality."
0,"> The design statement looks pretty detailed out and includes all the functionalities required.
> The sequence diagram gives a good understanding of what needs to be achieved."
1,"Overall the main functionality has been described properly.
The Google doc talks about two more things which were not covered in the Wiki Page:
1. A generalized review code has to be implemented/modified to let reviewers bid on papers (just like our normal project selection.)
2. What if a co-author clicks on 2 different links and becomes a part of two different conferences? The Google doc says that a team should be responsible for only one assignment. So a way to handle such a scenario should be thought of.
These topics are not mentioned in the Future Scope either. And hence I'm putting this problem down here."
0,All functionalities have been understood and a plan for implementing the same has been shared.
0,"The tasks to be accomplished section indicates the motto of the project.
The design lists all the steps needed to accomplish the tasks like the checking flow, what needs to be created etc."
1,They don't have a test plan and database design. Should add how they are gonna test the functionality and what will be the DB changes as part of this project.
0,Yes the design incorporates all the functionalities mentioned in the google doc.
1,Your design doc is missing test plan.
1,A test plan is missing.
1,The document is missing the test plan that would be implemented to validate each fix.
1,They forgot to mention the Test Plan!
1,"- Test plan must be included as the team intendes to add multiple features which may modify core features such as user signup
- Test plan may include tests for new features as well as tests for existing features if the are modified in some cases"
1,"The testing plan is missing. I know it is difficult to come up with test cases right now, but write few one-liners on ideas for implementing testing. Rest all looks good to me."
1,"Except for the test plan, everything else is included and is well documented."
1,"> Project description, purpose, design and changes proposed have been very well defined.
> However, testing plan needs to be included.
> Some use case diagram could have also been added. However, sequence diagram serves most of the purpose."
1,"I feel that they should have added at least the testing files which would be affected/which they would modify, corresponding to the controllers that they are planning to edit. For example, as they are planning to bypass admin approval for creating accounts, this will definitely affect the existing test case and they will have to develop new ones especially to handle the conference author & co-author case."
1,"Most of the aspects are covered. However, there is no testing plan. The team needs to add a UI and Rspec testing plan."
1,"-The intention of the team is reached to the reviewer but with a lot of effort. 
-The wiki page can be improved by adding pictorial diagrams and also code snippets where the team thinks changes to take place.
-Pretty confusing when we read for the first time like what needs to happen when the admin creates a link for the author and should the co authors be validated etc. Needed to refer the projects doc.
-Can include the important reference links that the team is referring to so that it will help the reviewers while doing the review."
1,The design doc should have been written a little more elaboratively as to describe the plan of work and what are the things they are exactly working on in brief.
0,All the feature works well .
0,Normal features work fine. Corner cases are hard to test manually.
0,"All the three tasks are working as expected. Universities are in sorted order, I am able to add new instructor with new university(Auburn), universities are listed in list of users page."
0,the features work as intended. all the three tasks work as they are intended to be.
0,Yes. The features all work correctly and there's no errors when I test.
1,"Task1: Alphabetically listing university names: Working fine.
Task2: Adding a new institution during creation of an instructor profile: Manage Users page doesn't load, request timed out
Task3: Listing of instructors should show their institutions on the same line: Manage Users page doesn't load, request timed out"
0,Yes all the features work pretty well as expected.  The institutions are listing alphabetically. A new institution can be added when creating instructor profile. Related institutions would be on the same line when I list the instructors.
0,"Yes, I checked the wiki page add see the work they need to do. They've successfully finished their job. They've handled all three issues."
1,"On a whole it's a nice code.
Functions are not too long. Need not require separate methods. Some comments might help, but not essential to understand. follows ruby style guide. smell free."
1,more comments are needed. though for some methods the method name itself is self-explanatory adding comments could've made things easier to understand and more clear.
0,It follows common Ruby style well and no functions are hard to read.
1,"The methods look fine and have separated logic as expected.
However, it is possible to refactor instructor_id method in user model."
0,"1. not too long;  2. no code needs to be extracted in to separate methods  3. although their code and the comment is readable enough, i think more comments would be helpful absolutely;  4. they followed the ruby style guide;  5. code seems DRY to me"
0,"(1) No, no functions are too long.
(2) Yes, in User controller, two create methods have some duplicated code
(3) No
(4) Yes, their code are following the ruby style guide
(5) No"
0,Variable names are relevant.
0,"Yeah, the variables, methods and class names they used is all reasonable."
1,Test coverage has decreased a little. Naming conventions are all simple and understandable.
1,pull request is not given so cannot comment on the build pass/failure. the variable method and class names are appropriate.
0,"The naming is clear and descriptive. The test coverage decreased, but every team I have reviewed so far has decreased coverage, even with the teams that only added new tests and no other codes, so I think it's not their problem."
1,"No pull request has been created in spite of making the required changes and committing them.
The variable/method names in the commits look fine."
1,"The team didn't provide the URL of the pull request, so i couldn't check the build pass and coverage. Most of the names are reasonable."
0,"The variables, methods and class names meet the code standard."
0,"Yes, they have."
0,Tests have been added for every task.
0,all the test cases for each task have been converted into automated tests.
0,The tests all passed.
1,"The test plan has sufficiently well covering tests and these tests have been implemented as it can been seen in the provided videos.
However, these tests don't seem to have been committed as the code for some of the tests is missing in the pull request."
0,They got a detailed description of the testing.
0,"No, all test case passed."
0,"The code is clean and DRY.
The only problem is that they can add more tests to it."
0,Their code seems good in the first submission. All the methods and names are in Ruby style. They have already did a great job. So they don't need to change them in this round.
1,"There is a link given in the document to another document which gives the details of Gale-Shapely (supposedly algorithm in question to implement). It would have been helpful if a gist of the document was mentioned in the wiki.
Team could have included a flow chart or a diagram explaining different domains and their responsibilities for all of the proposed changes.
Initially it was hard to comprehend what exactly their changes are going to be as the changes proposed are embedded in the problem statement and challenges"
0,Visuals are abundant here and they are all related and elaborate
0,I am not sure if the feature is complex from the inside as from the out it looks fairly simple. But the solution seems complicated
0,The design seems to be spot on
1,"Basic tests are mentioned. However, tests are shallow, could have included more edge cases and descriptive tests that are going to be written in RSpec."
0,"The UML diagrams for models are good. The inclusion of relationship between bidding and team, participant and response is well-explained through the use of diagram"
0,"Yes, it appears simple and easy to understand."
0,"The authors have done a good job of explaining all the changes that are required for the project. A detailed plan of changes is described. The functional requirements, bidding algorithm are clear, UML diagrams are helpful."
1,"The changes to the system with respect to code are not much described. However, on the high level the inclusion of budding algorithm, functional  & non-functional requirements is good and clear."
0,"The design appears to be very straight forward with every detail laid out int he design document.
The possible issues and the pitfalls have also been highlighted by the team."
0,"The design doc is very well explained.
Project purpose is explained in detail as well as in a fun and practical manner."
0,"The authors have very nicely explained all the changes that need to be made and a detailed plan of the changes that are going to make.
It included the algorithm they plan to implement as well as the functional & non-functional requirements of the project."
1,"Yes, the team has provided some diagrams which help to understand the system better.
However, a flowchart would have been a good addition to consolidate all the ideas laid out"
0,"Although the process seems complicated, the team has broken down the steps and explained them well"
0,The team seems to have learnt well what changes are required and what needs to be done
1,"The test plan is not detailed enough. It should mention the functions/files that will be tested. Also, if a new service is being introduced, it needs to be tested independently, with its unit tests as well as integration tests for the entire application. The test plan doesnt cover this."
1,"As in the previous review, the diagrams are very intuitive for the existing system. No visual representation exists to explain the proposed logic."
0,The logic is fairly simple and appropriate for the problem at hand.
1,I dont remember seeing a mention of external Flask service in the earlier draft. Just not sure if this service needs to be an external application in itself deployed on an independent server. Creating a new application can raise a lot of potential issues for maintenance. Can this logic not be embedded into existing expertiza application? Does the logic of matching qualify to be an independent service? I hope you have taken into consideration all these factors. https://webmasters.stackexchange.com/questions/49832/what-qualifies-as-a-rest-web-service Here is a link that might be helpful in deciding.
1,The testing does not cover all the functionality and include automated test plan for the implementation. Explain in detail about the tests. The existing test section does not test the bidding part in all dimensions.
1,"No, they did not use any UML diagrams to explain the solution or the changes to be made. Use a class diagram showing internal changes to be made to the system."
1,Their design gives us the basic details about the problem and how the problem can be solved but does not explain about the internal implementation of the exact code changes required. The design requires improvement and it does not contain about the design patterns.
1,- Why do you need a separate infrastructure of the flask? Shouldn't this be part of the existing Expertiza code base? Why add more complexity?
1,"- Yes, they explained the part very well and have now mentioned the file names as well which needs changing. As I raised an issue regarding creating a separate flask based infrastructure I think they can add more details as to why it is needed and cannot be done in the current code base which is written in rails."
1,"The test plan looks decent as of now however I would suggest that you also add the exact steps in testing from the UI.
Moreover, include edge cases encountered (during the implementation) and also make a note of how these cases are being handled by the altered code."
1,"There are no class or UML diagrams involved and as mentioned earlier, this would be by far the only thing that goes missing in the document. 
Pictorial stuff should be added to the document to make it easy for the user to visualize what exactly is happening in the system.
Also include a flow chart that gives  a bigger picture of the implementation and specifically under the approach section."
1,"The test plan can be elaborated to include how they plan to test in addition to what they plan to test. 
For example,

Testing that the color-coding feature is working and appropriate.

Testing the color-coding feature is understandable, but can include how they plan to conduct test to check if color-coding feature is working or not
Also the testing for ""appropriateness"" is abstract"
1,"The writer has included  2 diagrams along with the below lines
""The Mathematical formulation is itself wrong in E1856 and E1928 and they have used the below shown diagram to represent the relationship"".
Though this serves as visual aid, it's misleading as the process the diagram describes is wrong"
1,"In the topic,
Approach for matching students with topics
the variables used

both the variables are different but in the lines that follow
""calculate k, p|, and p|. The goal is for each topic to be assigned to either p| and p| students""
The 2 variables appear similar. 
Either the variable names can to be changed in picture or appropriate documentation should be present
Further these variables must be defined before use"
0,yes they have explained well
0,Visualization is included in the writeup for explaining the problem statement and is used perfectly. I feel they could have included some for the later part of the writeup like the test plan section as well.
0,The explanations made by the authors are in great detail including mathematical equations as well when appropriate. I think they have done a good job overall.
0,The design is simple and is easy to understand .
0,"Yes, the design pattern is sound and appropriate."
0,Yes it include the test plan.
0,Yes it does.
0,"Yes , the author deeply explained the changes."
0,"Test plan includes what different kind of test they are going to perform.
Also some test with UI is good to add"
0,"Yes, the design pattern is appropriate"
1,"Diagrams have been added to explain the relation between reviewer and reviews, which is good.
However, additionally, a flow diagram would have really helped to understand their thought and approach."
1,"Not much has been written about where related code is in the project or where changes are going to be made. 
It is not clear what the team plans on doing. Method addition/modification, file names are missing. hence its difficult to judge"
1,"The issues in current implementation have been explained very well. Although not much is written about their plan and what changes they are going to bring in.
It would be great if the team identified parts of code related to the present implementation and at least build around what they plan to change and where"
1,The document covers fair amount of functionality required in a design document. But lot of details in each section are missing
1,"Overall, it is a good document.
Some details need to be added in all sections of the document to help the reader understand that the team has a clear plan of implementation."
1,"No specific mention of code level changes is present in the doc, so cannot comment on this aspect. Would advice the team to add code changes in the document."
0,The problem statement as well as the background is very well stated.
1,The design document does not involve any UML diagrams. They have used a diagrammatic approach for explaining the implementation of the mapping.  Please add UML diagrams explaining the design approach.
1,The authors did not make any comment about the methods to be changed or added so I am unable to comment about the code issues. They mentioned about the bidding algorithm which makes sense for this project.
1,I was unable to follow the changes required to be made to the code. Include the code which has to be changed and also the files which has to be changed. This gives a clear understanding. They have mentioned the algorithm to be implemented but do not give an overall view for the approach.
0,They have one functionality to cover and they covered their major functionality in detail. The design document explains the detailed view of the functionality.
1,The design document requires the addition of the UML diagrams and database design to explain it in a better way. Other details are included but elaborate on the testing plan to be done.
1,"I don't think enough is specifically detailed in their implemented design for me to be able to comment on it. So more effort, definitely."
1,"Like I mentioned before, more depth should go into planned changes."
1,"I believe that they do, though I also believe that its not quite specific enough for me to be certain that they plan to implement all functionality."
1,"Everything is there, but most of it needs to be more thorough."
1,"- Nothing related to the implementation was provided. They should at least mention the probable file changes. For this, they can refer previous implementations to get a basic idea of what and where changes need to be done."
1,"- They listed out why previous work was not good but I do not see why their work is better. They claim they need to implement Gale Shapely algorithm because they were asked to but do not much content to support it. 
- Also, they suggested that they might consider algorithms but should the design phase consider this fact? They should already have an algorithm in mind."
0,- They seem to understand what needs to be done and have written the functional flow of things that their implementation should do.
1,"- Needs more UML diagrams.
- I would love to see some basic details on the implementation
- They can explain a bit more about the algorithm they are planning to use and why it is better."
1,"The mapping diagrams clearly explain the cardinality of the entities so great job on that!
However, I would also recommend that you add some project specific use case UML diagrams as well as database design schema which would make the implementation even more elaborate.
The test plan really looks highly abstract and I would recommend that you give a brief description of each of the tests which would also benefit other reviewing users.
Also adding some annotated screenshots is a must."
1,"Nothing was explained about the alterations to be in the current code and the files that need to be modified without which not much could be commented on whether a wrong method was added or whether the code looks 'smelly'. 
The document just gives a brief idea of the project and does not focus much on the code implementation part."
1,"As mentioned previously, the changes proposed by the author is to the point and clear. However, there are some sections that need to be even more elaborate.
Include a brief summary of the tests for each of the features being changed/ implemented.
Make use of flow chart to explain how the bidding algorithm works or write down what's happening in an algorithmic form.
Avoid using links and include the content in your document as well."
1,"The document looks complete in all its aspects except that it should be a little verbose at places mentioned in the above comments as well as some images should be added for better visualizations and understanding.
Make a tentative list of the files that would be changed or altered during the process.
If possible also give a gist of the changes made in each of those files."
1,"The writer has included  2 diagrams along with the below lines
 
The Mathematical formulation is itself wrong in E1856 and E1928 and they have used the below shown diagram to represent the relationship.
Though this serves as visual aid, it's misleading as the process the diagram describes is wrong"
1,"This web service must either be called from the LotteryController or a new controller can be created on the same (if Lottery Controller becomes too complex).
this doesn't follow requirement s specified"
1,"in the section:
 
Why does the difference is the representation matter?
 
Since they have modeled the problem on the same lines, they have used the same version of the Gale-Shapley or Top Trading Cycles Algorithm used for one-to-many or one-to-one approach. Famous Problems Dealt on these lines.
 
the above lines could be explained, since everyone might not have a background of understanding the algorithm mentioned. It would be better if they can include a simple overview of the algorithm"
1,"yes
The main functionality that needs to be done is given in non-functional requirement. This means that this implementation takes a back seat. However authors focus on the functionality done rather than what they would be doing !"
1,"From a Student's Perspective:

Because he/she does not have to spend a lot of time understanding what is going on.
The Student would be more focused on giving the review and hence judgment made tend to be more objective than subjective.
This would improve the quality of reviews and will also be helpful for the reviewer.
Also, Bidding in Fun !!!!!!!

the bullet points in purpose can be improved"
1,"Again, I think the authors should be more specific as to how they will be actually implementing the code."
1,The authors have explained the problem and the solution in great detail but I think they could have been more specific with regards to what steps they plan on undertaking.
0,"I could not find anything the document lacked, it seems to cover everything from the motivation to the plan to be followed."
1,The test plan section could be more detailed.
1,"the second diagram (mathematical formulation) should be more detailed as the difference is not clearly visible on first view.
Some other diagrams can be included"
1,"The plan is quite good but more explanation on how they are going to solve it is required to judge the pitfalls in the system, if any."
1,"They have provided links for the previous implementation which is nice. Also, diagrams describing one-one and many-many are also good to understand. There are certain mistakes of spelling like reviewer and reviewer, which should be reviewer and reviewee"
0,"Yes, there is separate functional requirement section in the documentation regarding that. They have mentioned of the new algorithm, they are going to implement."
0,"Yes, most of it is done."
0,It's in good design and the pictures are good drawn
0,I think they may choosed the right class to change
0,Good explanations.
0,Yes they included all.
0,Perfect!
1,"There are diagrams included to explain why existing system is wrong, but the team could have also included diagrams to show the approach they are planning to use."
1,There are no files mentioned in the wiki hence i can not comment on this. And since a detailed design is not mentioned I'm not sure on how to suggest improvements on the performance and other aspects
1,"For most part, the design does include all of the functionality required but, all of the details are listed under 
What needs to be done?
 
Though background is detailed the approach for implementation is not. The team has mostly focused on what is wrong with existing solution rather than striking a balance between what is wrong with existing solution and what is the approach."
1,"As I have mentioned throughout, there is not enough importance given to the design of approach or the proposed solution. That's a major flaw of this document"
1,"1) diagrams are good to understand what the issue is and how they gonna resolve it.
2) the second diagram  (mathematical formulation) should be more detailed as the difference is  not clearly visible on first view."
1,"1) diagrams representing relationship (one to one and many to many ) is quite clear and good to understand the issue. 
-----------
2) check for spelling message like in
Why Should a Student bid for Reviewing Submissions?
This would benefit both the reviewer and reviewer 
Instead it should be reviewee."
0,"1) Yes the document elaborately describes the functionality required.
2) they mentioned what's wrong with past implementation and now which new algorithm/approach they gonna try to implement"
1,"UI needs to be redesigned
links turn black upon hovering. 
also some of the links are jumbled up together."
0,I do not see the code.
0,There're only 35 commits
1,"Student cannot check out book.
Student is able to create new books with existing ISBN.
librarian able to create new/view/edit/destroy other  librarians and itself.
cannot add books to library.
cannot see the requests, history of books."
1,"Almost all of the modules are left uncompleted, so i don't think the team has thoroughly tested anything"
1,"Most of the test case code is auto generated.
Some of the test cases can be:
-checking the navigation of prev page is working fine or not when back is clicked.
-Login/sigup for different users especially admin as it is not taking the credentials.
-search functionality test.
-edit profile of different users."
1,Only basic auto generated testing code is there. No thorough written tests are there for any one of the model controller/model
0,The uI is more intutive and is quite detailed for first review.
1,"repo private
README not provided"
1,Overall UI is good. You have made it simple and concise but not reaching to proper location after pressing back button. Work Flows are can be improved. For student it is showing status of book as checked out but when I look for checked out books it is not displaying any book there. Over all at some placed it becomes confusing to understand the behavior of application but minor fixed will definitely make everything perfect.
1,"- The UI starts with asking user to either sign up or login as a student/librarian. In terms of UI perspective, it can be improved a lot to give the user a look and feel and also allowing users to understand the functionality well.You can create two buttons and displaying appropriate forms based on selection.
-Also, since the log in/sign up is divided into two forms, entering the admin credentials is not accepted by both the forms thereby failure of admin login.
-Once we sign into the UI, all the options are jumbled and there is a text overlap confusing the user.
Overall, the functionalities work and can be understood.but can be better."
1,"Could not locate the README file since the repo is not public. Since this is just the first round, I understand that some of the pieces need re-work. Hopefully, my suggestions would help :- Please provide `Back` button on all pages. Little counter-intuitive to use the Browser's back page- There were errors when I hit a Back button from Student Edit page
See screenshots
https://snipboard.io/ha5HRl.jpg"
1,"It includes major aspects of the system but lacks few things like admin login is unable to find, after login home page elements overlap somewhat so not easy to follow. Can improve readability to some extent."
1,The code is structured as expected from the standards of Ruby and Rails. Code in views can be moved to helper files for reuse.
1,Should not write application logic in controllers
0,The code is easy to read and follows good rails practices
1,"Admin credentials not provided.
Cannot check any admin functionalities.
Also no option on homepage to login/sign up as admin."
0,Team has used scaffolding and they kept the structure and seems to follow the coding standards as well
0,You have followed good coding practice and code structure look good to me. It is easy to find the required files based on directory structure. good work
1,"-Code comments can be added.
-Code can follow SOLID principles assigning only single responsibility to each method.
-White listing can be specified in the respective controllers instead to other controllers like Student controller can contain the student parameter white listing.
-Can try helper methods instead of rewriting  the functionalities."
1,It follows usual good practices overall. Just add more comments in the code and refactor some code from books controller to model which is related to business logic. Also make sure that all the links/buttons included in UI have some responding action attached as Show button in books list of librarian login home page redirect to error page.
0,"Yes, the testing plan seems very reasonable and can test the whole project"
0,"Yes, the test plan is there with explanations."
0,Yes it does include the test plan it is highly localized
1,"Test plan is okay they haven't figured out how they will check the response time of API, which is one of the requirement of the system."
1,"1) They write plan to test it automotively by RSpec
2) No manually test solution provided"
1,"- As stated in the previous review as well the UML diagram is a bit confusing.
- No legends provided for the difference in the color of the different boxes. Should add some legends so that reader can understand the difference in the used colors. If no such difference then try to make it the same color.
- I am confused between is it a use case diagram, a state diagram or a decision flow diagram?"
0,The team has added one flowchart to present the flow of the actions. It helps in understanding the system.
0,"Great visualization by the team. The flowchart is extremely nice with the coloured blocks differentiating between users, actions by the system and the use of services. The blocks are simple and well-divided so a block doesn't do a lot of stuff at once. The flowchart really helps to get to know about the core issue better."
0,"Yes, they have one big flow chart explaining all changes. The chart is pretty easy to understand."
0,"The design looks simple without redundant moving parts, one thing to add is that I would like to see more visualization on how data is retrieved and presented in the backend."
0,"Yes, the design is very simple and easy to understand, the flow chart explains the project pretty well"
0,"Yes, the design is easy to understand."
0,Design is kept as simple as possible and it is quite logical also.
0,The design appears to be simple. There are no complex logic blocks which are hard to understand. The team have very nicely explained everything related to the problem statement and it doesn't seem that their design is complex. The flowchart also depicts as there are no cross edges and everything is pretty much linear in their workflow.
0,The design appears to be sound.
0,Yes the design appears to be logical and according to me will help in achieveing the functionalityu
0,"By the overall look of it, the flow looks appropriate"
0,The design is quite sound. There is appropriate flow in the design which helps us understand the document better.
1,"yes it is proper, yet some of the how's suggested in previous review are not answered properly."
0,"The proposed solution is well-explained. The team has included a test plan, code changes, flowchart, etc. all of which look promising"
0,"The design appears to be sound. The team have explained the problem statement, the steps to be taken and also what automated tests are required to be written to guarantee the proper working of the system. It is good to see that the team thought about more test cases and have included those in the writeup as well."
0,"The proposed solution is sound, in that the team has explained every little step they'll take. It looks  like the solution is well-thought and should solve the issue."
0,Since this is a mozilla project the design steps are predefined.
0,yes there is test plan present in the design document to test the changes that they have proposed to implement.
0,yes they have did added diagram to describe the flow of the functionality that they are implementing. It makes it easier that way to understand for other persons who are reviewing the document.
0,yes proposed design is simple and neat. it is self describing for anyone to understand.
0,yes it seems that they have pointed out both the point that were present in the design document.
1,yes they did mentioned the files that they are gonna change but there is no explanation on why that file in particular to modify. if that would have been given it will be much easier for everyone to understand.
0,The document is described in simple language and clearly explaining their approach and progress so far.
0,The document is well designed and explained in good details.
0,They have explained the changes made well and explained them with good details.
0,"According to the document, no tests need be added. However, these participants have still laid out how they will use existing tests to test their functionality."
0,The visual elements are great and much appreciated!
0,As far as I can tell. It's difficult to determine since I'm unfamiliar with Servo.
0,I think the design is very good and much more fleshed-out than the original submission of this document.
0,"This is difficult for me to determine as, again, I am unfamiliar with Servo."
0,"The team has added a flow chart to explain a high-level view of their proposed solution.
This I believe will greatly help any person reading the document.
Also, the images used to explain the HTML page content as well as the DOM tree are really useful for a person who may not understand what DOM features are."
0,"The design proposed by the team appears to simple and straight forward.
It is easy to understand and give a clear idea of what and how the team plans to work on the project.
The flow of the proposed project design is also easy to understand and has been well described by the team."
0,"The project design appears to be sound and well-thought-out.
The team has rightly mentioned that design patterns are not applicable to their project as it involves the implementation of methods and modifying various files and that the implementation section provides details of why certain steps were implemented the way they were."
0,"The authors have laid out a detailed stepwise plan of the changes that have already been made to the system as a part of the OSS project, as well as the changes that the team plans to make as a part of the final project, under the scope section of the document."
0,- The proposed changes are easy to understand.
0,"- The design, coding standard and pattern is as per the servo guidelines and is appropriate for this current project."
0,"- Given the specific changes and need of the issue, they have given enough information for the readers to understand the changes needed."
0,"They have added plenty of legible flowcharts for the DOM, their implementation and many Github code diffs. This vastly increases the impact of the design doc."
0,The design is clear and their detailed explanations help others understand what the project does and what its steps are. The changes are easy to follow and looks like the implementation is also simple enough once one understands the logic.
0,The design document seems well documented and is complete. The team has explained all the steps properly and has even added a flowchart to outline its implementation plan.
0,The changes are very well explained. No complaints there.
1,There is a test plan section which explains how to test the changes but I think they are slightly vague and could be elaborated on a bit more.
1,There are many screenshots and a flowchart included which make understanding the project flow quite easy. My only issue is that the final project section feels a bit lacking when it comes to screenshots compared to the earlier section.
0,"It does include the test plan in detail. Also the team has mentioned that there are some issues because of the test cases from Servo's end, so the pull request will be raised based on the resolution of blocker."
0,"I don't think that this project/document should have UML or class diagrams.
There's a flow diagram in the document which explains process or flow for the changes and that's quite helpful."
0,"There's no design section in the document also team has mentioned about why they don't have one. 
I think the way changes has been done and explained is enough to understand. Minute details are included for everything which is really helpful to understand the changes and the project."
0,"There are no design principles to be followed in the project, as clearly mentioned in the document. 
Team has given the explanation for why certain changes are made in specific way and that explains enough."
0,"Code changes are explained in detail, why certain changes are done in specific files and why that's the best way to do it."
0,Yes. They have included the test plan for the final project. It seems they have done most of the testing part in the OSS project step itself. But they have made a separate section for the final project. They have described the match utility commands to test their system.
0,"Yes, they have utilized the flow-chart diagram to explain their design strategy."
0,The design looks comprehensive and simple. The flow chart in the design document clearly explains their design.
0,"Yes, their design looks good. As mentioned in the earlier review, they have used good flow diagrams to clearly explain the changes they are making to their project."
0,"Yes. The document looks comprehensive. They have included screenshots of the system, flow chart for the design strategy and a food testing plan.  It is easy to understand and follow the document."
0,Yes the design is simple
0,- Yes the design appears to be sound with appropriate principles
0,Yes the author have explained the changes required
0,The team gives detailed steps on UI test. They have provided the RSpec tests which is good.
0,The explanation is given in steps it is easy to understand. Also the explanation is reasonable and comprehensive and easy for the reader to follow. The design appears to be simple.
0,The document contains the appropriate software principles and patterns. No pattern was adopted but the design looks sound.
0,all things that they have decided to alter looks clean and efficient to me. it wont complicate the code or produce any unnecessary response time.
0,They did stated all the changes that they have decides to change. It looks complete from my point of view to resolve the issue present in the problem statement.
0,yes. the project implemented the first issue from the problem statement in the OSS project and the second issued are going to be implemented in this final project.
1,design document does address all the aspect of the issue but still I think they should add more about the solution instead of just writing what files that they are going to change. if they add some description about files then it will be easy for anyone to review.
1,They have explained the previous phase in good details. Some more details regarding the implementation for this phase should have been added. I could not find the changes proposed specially for phase 2.
1,The design is detailed and incorporates the requirements thoroughly. Some lack of visual aids for this part of the project make the otherwise good document lacking in some ways.
0,Documentation is complete with all the parts present and explained in good detail
1,There are no visual aids for the issue being addressed by the final project.
0,"It's difficult for me to comment on this, being unfamiliar with servo, but the changes seem to be well thought out."
0,The proposed changes are very well explained and easy to understand.
0,It seems that the project outlined on the servo page related to 2 issues and this design document covers both very extensively.
0,"Changes to be implemented as a part of this final project have been given in a detailed and pointwise manner, which is easy to read and understand for the reader."
0,"Yes, the design includes all of the required functionalities."
1,"- No UML diagrams related to this particular change provided. 
- A diagram showing the probable state diagram of what should happen with the change. Example: The problem is not able to get named getter so showing the flow of thing reaching to this step before and after the fix would help us understand the issue a bit more."
0,- Based on the previous review's PR it is clear that servo has a very fixed standard in terms of what needs to be written in the source code and their code/suggested change follows that.
0,- The changes are very specific as specified in the issue on Servo GitHub so cannot argue much about that. They have mentioned everything that they need to do in this project.
0,"The design for the entire project, that is the OSS and final parts is quite clear as flowcharts make the flow easy to understand."
0,- The doc is in continuation of the previous project and has many details. It's great that they added some information about what is the problem user-facing and what would happen after
0,"The team has explained the project using flowcharts of DOM and screenshots of their test plans.
All the diagrams are easy to understand and provide the details needed."
0,"The team has maintained the documentation page really well and has explained the setup of the local environment for this project, introduction to Rust and Servo and the methodological process to make their proposed changes to the DOM. Their efforts for the Final Project are clearly stated and the test plan has also been explained."
0,The team has worked on the Mozilla project for their OSS project as well and they have very well documented their efforts and proposed changes.
1,Doesn't contain many explanatory diagrams. Contains more code snippets from the previous OSS submission.
0,The writeup is pretty decent.
0,The document contains all the necessary sections.
1,No UML diagrams used
0,Complete
1,Again I feel the final project section is a bit lacking as the authors have just listed their plan and not elaborated on them. I know what their plan is but do not understand how they will go about doing it.
0,"There's no design for the project, so i don't think that having diagrams would make sense in the document of this project."
0,"Team has specifically mentioned in the document that design patterns are not applicable for this project. As far as i tried to understand the code, changes looks good to me. They have given proper explanation for the changes."
0,"Yes, the test plans are well designed."
0,"Yes, the test plan is neat, clear and understandable."
0,Whole task is to write test. So there is a very extensive test plan. All the manual and automatic tests are mentioned
0,Test plan included.
0,One of the best test plan I have gone through/reviewed. The visuals associated with each scenario are really helpful and self explanatory
0,The project itself is a testing project. they have mentioned all the cases that they are going to test very clearly.
0,"There are two issues for the project and both are covered in the document. As this project is an extension of the OSS project, so the document includes that as well."
1,"The test plans have not been discussed in the write-up. In each scenario that they have mentioned, they could have written the different test cases that they are proposing to write.  Example - Scenario 2: Author(s) get emailed when a reviewer has reviewed their work, they can mention the test cases and the plan of testing how is the author getting email."
0,All the necessary details are explained in detail. Team has also mentioned why the pull request is still pending and that's because of the test cases but not the implementation and code changes.
1,High level diagrams are not there. Don't know if it is expected in the Mozilla project. But they have added a lot of screenshots of the code they modified in previous project.
0,They have given a good explanation of what is expected from them in this project and what they are going to do to implement it. They have also given the flow diagram. This makes it easy to understand.
0,"yes, the design include the test plan"
0,Yes. They have covered the functionalities required with proper diagrams.
0,"Yes, their test plan almost cover every scenario with regard to their project."
0,All the required components of design documents are covered.
0,"Since the project itself is about Testing a functionality, the team has covered most of the aspects with the help of scenarios and flowchart."
1,- The document doesn't specify any visual aid for the final project part
0,"Yes, the diagrams help me to understand how tests run."
0,Diagrams and flowcharts explain the flow of the application clearly and in a very simple manner.
0,All the test cases are represented through simple easy to understand diagrams.
0,good use of visualization.
0,They have used flow charts to explain the various scenarios associated with the test plan which I found to be helpful for my understanding.
0,"in last round, there were no visual aid present in the design document. but team took the reviews into the consideration and have added the flow diagrams of all the scenarios that they are going to be tested. which really makes it easier for everyone to understand."
0,"Yes, the flow charts are very well explaining the changes proposed in the system. The team has used the flowchart for all the scenarios that they are testing."
1,"- The issue states implementing missing DOM features and the authors have specified each feature to be implemented and the changes expected
- The document doesn't seem to specify any design changes proposed by the authors"
0,"yes, the class diagram and/or other figures clearly describe the changes to be made to the system"
0,I never expected so much of visuals for a testing project! Great job!
0,- The authors have proposed changes with good quality explanations and have throughly considered the issue to be resolved
1,"There's no diagram in the doc.
I hope they can draw a diagram to make the changes more clear in the future."
0,- The document provides all the functionality required
0,The team have explained the scenarios using flowchart which is good and easy to understand.
0,The team has used visual aids which are easy to understand.
0,"Yes, the team has mentioned all the functionalities that are required and mentioned in the google doc."
1,The wiki page looks detailed enough except that they could add the design plans
0,"Yes, the design is simple and clear."
0,"Yes, the design is simple and easy to understand through UML and visual diagrams."
0,The proposed design appears to be quite clear and precise.
0,"Yes, the team has done really good job at making it as simple as possible. it is easier for every one to understand yet describing all the necessary cases that needs to be tested."
0,"Yes, the design is simple and clear to understand. It is explained by the flowcharts. The changes they are proposing are simple, they are simply testing the email functionality in various scenarios."
0,"Yes, clear and simple."
0,"Yes, the design seems simple enough."
0,"Yes, the tests for the issue are well designed."
0,The design is sound and complete.
0,The test plan sounds reasonable and it is well designed.
0,The design appears good.
0,The design associated with the test plan is pretty elaborate.
0,"Yes, they have been given five scenarios in the problem statement to address and the team did come up with the design solution which points out all of those issues."
0,Yes the design appears sound and well-formed. The team has done a great job in designing the whole project. The flow charts in the design clearly explains the tasks for the project. The 5 scenarios that they have mentioned on the wiki page which clearly explains the design.
0,The design is well designed
0,"Yes, the design seems to be sound.
There're Problem Statement, Proposed Approach and Test Plan."
0,Yes the design appear to be sound. Team has done great work explaining the scenarios for email testing.
0,"Yes, the authors well explained all tests plans."
0,Authors have explained details in a very well structured manner.
0,"Yes, changes are explained adequately."
0,Profound explanation is provided pertaining to the changes to be done to the system.
0,"Yes, the team explained every scenarios really well that they are going to write test cases for. explanation is self describing for anyone to understand."
0,"Yes, they have explained why they want this change and how to do it."
0,"Yes, the authors have adequately explained the changes to be made to the system."
1,The test plan are good but they do not include a test plan for the student side where they open there received reviews and check for instructor review.
1,"No test plan exists at all. 
No section about running existing test cases.
No section about writing new test cases or modifying existing test cases.
 
Suggestions:
- add a detailed test plan (including running existing test cases, adding new ones or even modifying existing ones)"
1,"The design includes a test plan , however it should have been more detailed including the cases that would be covered while testing."
1,"Test Plan is very straightforward and it does not include any edge cases. More test cases can be added like: if required,is functionality where more than 2 TA's perform review of a same assignment supported of not."
0,The test plan looks complete on preliminary exam. They have identified all the edge cases as far as I am able to comprehend
1,There is  no test plan mentioned about in the documentation
1,"Pro: They added the cases that they will have to test.
Cons: The test plan needs steps for UI testing and automated testing via Rspec. This change would allow them to better understand the flow they need to modify making work go faster."
1,No test plan was mentioned.
1,"No, the flow chart is wrong well actually it is according to there previous solution where the instructor or ta is a participant. There current proposed solution suggests adding a ""hidden"" field (which again is bad variable name) check if it is on or not. So I suggest changing flow chart."
0,"The team has done a great job in creating an activity diagram that summarizes their proposed implementation and the issues.
This diagram is very well made and has a lot of details about the implementation plan of the project."
0,The design includes UML flow chart that explains the project flow clearly.
1,"The activity flow diagram is given detailing the logical next step at each and every stage. However, Save review is missing in the diagram and is abstracted using a first-time-review? which is not how expertiza works as the review which is submitted once can't be edited. There is a field 'is_submitted' in review map for each review[use that]"
0,The team has used visualizations to explain the proposed changes
0,The authors have done an excellent work of using visual aids for describing the proposed system . It helps in getting a clearer view of the system proposed.
1,"They have draw a Activity Diagram of the Proposed Implementation, which introduce their data flow. However, they didn't draw any diagram for their User Case yet. If they have draw a diagram for it, I think it will be much more easy to understand the relationship between user and function."
0,They have made use of visualization to explain the requirement and current flow in good details.
0,"By adding an actual screenshot of the actual Expertiza page and a Flow diagram that shows the flow of the actions that lead to the Reviews page and Assign Grades page, it is very easy to follow the flow of the process and gain valuable insight into the thought process of the team as to why they proposed all the changes.
The visual aids on the design document definitely helped in making the understanding process easier and by adding more to the relevant content."
0,"Yes, it is simple as possible."
0,"The design seems to be pretty straight forward and very simple to understand.
The team has done a great job breaking down the whole project into 4 major issues that need to be addressed.
For each of these issues, the current scenario, the requirements and the proposed solution is mentioned. Along with screenshots where ever possible."
0,The  design flow is logical and simple.
0,Issue 1.2 is very refined and implementation is made much simpler than it was before.
0,"The design appears to be fairly simple. The issue section has been broken down to the current scenario, requirement and proposed implementation which allows for easy understanding of the approach."
0,"Yes, the design appears good and simple."
0,Yes the design and approach they mentioned seems well explained and simple & easy to understand.
0,The authors have lucidly explained the changes that needs to be done in the project. The ease of explanation as well as abstracting details to give a higher level view makes it easier to understand what authors wants to convey. The design is also intuitive and use of examples provide a better illustration of the information to be potrayed
0,The doc is very clear and flows smoothly. They have presented their approach and solution in lucid detail.
0,The write does give a good overall view as to how the approach is being undertaken. it does seem simple and straightforward .
1,"Yes, the design appears to be sound. But the proposed implementation in issue 1.1 to make authorization helper file does sound fishy as it can be checked through if conditions or I suspect expertiza should have the implementation of checking whether the user is course staff member so I don't think it is necessary to create new helper file.
Also, they suggested adding field name hidden which I think is a very bad name for the variable. Here hidden is used to indicate if the user is hidden or not which is not indicative in a variable name. So I suggest the name to change to is_hidden_participant or something like that."
0,"Yes, they have mentioned the approach how they are going to solve this."
0,Yes the design appear to be sound and follow principles.
0,"The design appear to be sound, following appropriate principles and using appropriate patterns. The design document contains Problem Statement, Current Scenario and Proposed Implementations and Activity Diagram of the Proposed Implementation."
1,"The proposed design plans to reuse the existing code, thus, follows DRY principle. However, the design suggestion to add a hidden field is not a scalable solution but seems like a hack, a better solution should be thought after before implementing the code."
0,The design presented is sound and well thought out. THey have detailed explanation of how they are going to go about in implementation.
0,"Yes, the design does seem sound and is following the appropriate patterns."
1,"Though the design document covers all the important content that should be in a design document, the way it is structured does not follow appropriate principles and appropriate patterns.
I think the team should have a Goal and Scope of the Project section at the very beginning ( before the Problem Statement section) which has the Goal of the project stated clearly.
It would also be a good design practice if the design document is not sectioned into issues themselves. I would suggest sections like Current Implementation, Requirement, Proposed changes and Expected Outcome, all of which will have information related to all the issues."
0,Yes they are well explained.
0,The authors have adequately explained the changes made to the system.
0,"Yes, they have mentioned the changes done to the system."
0,Yes the changes are mentioned with detail view and approach they will take to solve this issue.
0,"The authors has made it a point to address each issue as a set describing the current scenario, the requirements and a proposed implementation . This clearly defines the vision and clarity of thoughts which reflects itself in the form of adequately explained changes that will be proposed to the system."
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Problem Statement, Current Scenario and Proposed Implementations and Activity Diagram of the Proposed Implementation."
0,The team has taken the 1st review into account and modified the doc accordingly.
0,"The authors have adequately mentioned the changes that are proposed to be made to the system. By mentioning all the files that the changes will be made in,  the authors have localized the issues and traced them to their root.
It becomes easy to understand the proposed changes along with the file names as it gives you more information about the  specific controllers, helpers, etc. that the issue is associated with."
0,UML has been used to describe the flow in detail.
0,They can add different forms of diagrams to explain. There is no issue with the ones added.
0,- The use of flow diagram to explain the working aids understanding of the plan
0,added flow chat which is quite explanatory.
0,Flowchart was made to show the approach to solve the problem
0,They have made use of bare minimum required visual aids to explain their point. This makes the doc flow easier and be less cluttered.
1,"I think Issue 2.1 and Issue 2.2 can be merged in to a single method and a simpler implementation can be figured out. I am not sure of this but I am assuming that there might be a place in the framework itself where you can get list of all the instructors and TAs of the course and if you get that list, approach to tackle Issue 2.2 and 2.3 can be refined."
1,"New Course_staff_helper may not be necessary. Look at alternative approach.
No mention of database changes for Review mapping. This is necessary to check and store the reviews done by TA? Instructor
Adding TA/Instructor as a participant: may not need
Showing Student that their assignment has been reviewed by instructor/TA: perfect"
1,"For the issue, allow TA/Instructor to add himself as a participant, the proposed implementation is not good. Some sort of role based permission mapping should be added."
1,"Issue: Allow TA/Instructor to add himself as a participant
For this the proposed implementation of adding TA/instructor as participant is not good instead you should add some kind of role based permission mapping."
0,The design seems good and would not introduce any code smells.
0,The approach seems pretty solid and doesn't seem to lead to smelly code.
0,Yes the proposed changes are easy to follow and overall quality of explanation is good.
0,"The explanations are very well written, easy to understand and are sufficiently detailed."
0,"Issue: Method to check if the user is instructor / TA for the selected course
Trivial as the method implementation should be a part of edge case check for reviewing itself.
The explanation is easy to follow and written in a lucid language.
The tasks are highlighted with detailed description below them.
The easy language coupled with the Activity charts enough to understand the task description as well as the proposed solution."
1,"Though a proposed solution is given for each issue, what exactly is being changed is not clear enough. By this I mean, what files around the existing files are being considered, what technically is being changed, and an understanding of what other files are dependent on the files being changed is not clear."
0,Yes design incorporate all functionality
0,The design document included all the required functionality.
1,"Based on my understanding the following tasks need to be done:
1: Allow the Instructor to perform reviews
2: Alow TA to perform reviews
3: Show Student that their assignment has been reviewed by instructor/TA
Both this tasks are mentioned however, there is no mention as to how they will handle this as the review mapping stores the entries corresponding to student ids. The new table to be made as well as the changes which need to be made in assign review algorithm need to be documented."
1,The changes made in the DB should be mentioned via some form of chart or diagram.
1,"- The team has incorporated most of the functionality required
- The writeup must explain whether all the TA could review all the assignments or particular assignments would be assigned to certain TAs
eg. TAs focusing on Mozzila projects may not reviewing Expertiza projects."
0,"Yes, the design ,mentioned all the functionality.
All issues and the approach to resolve the issues are discussed with flow chart and file to be modified.
Just add DB chart, mentioning what changes are going to take place in backend."
1,The explanation for proposed changes is a little vague.
0,All the functionalities are well described and given good explanations on the doc.
0,The design doc contains all topics required.
1,The design document should have included a concrete test plan.
0,Design doc is sufficiently complete. It is also very detailed and is written in simple language.
1,"Code-Level specifics including proposed files to be changed and methods to be implemented is not clear.
Design Pattern to be implemented needs to be decided."
0,They could draw a diagram for use case in project design section.
1,No test plan found. There should be a section of how they plan to test their requirement manually (UI testing) and automatically (RSpec testing). This is an important part a design doc as this will make the project TDD.
1,Test plan and automated testing approach seems to be missing in the doc. Also more insight into why the existing code fails and how it is being improved will give a better understanding of the project at hand.
1,"- The UML diagram is a bit ambiguous. 
- They have used different color nodes but there are no legends present to inform which node is of which type and what do these differences in color signify.
- The direction was arrows that were confusing. I wasn't able to understand the user flow. They mixed up the use case diagram and state diagrams."
0,Visual aids are proper and makes the flow of the application clear.
0,The visual aid and bullet pints were provided to give more clarity nd better explanation
0,The team have drawn a very nice flowchart which shows how they are going to approach the problem while specifying details about what data format will they use to pass data and which web service API will be used. It really simplifies the statement and is a perfect balance between low-level and high-level design.2
1,"1) response_controller.rb is where they claim to make changes. However, they haven't mentioned anything about the methods to be changed/added
2) Too early to judge if this new design will make the code smelly
3) I don't think the new design is complicated.
4) As far as the response time is concerned, I think it will certainly take a hit because of the API call
5) The design is good enough"
1,"1) They have not provided changes to methods yet
2) Since design only propose general idea and implement it for specific roles, there is a possibility to make code ""smelly"". For example, simple add all methods/algorithms on user would make user contains too much
3) Since they will integrate new features, I don't think there existing gem could do it in a simpler way
4) Yes, and it is unavoidable, when every submit review the system will run algorithms. However, how much extra time would be spent is also part of problem itself
5) Overall it is good, but there could be more details about algorithms like input, output."
1,"The team has rightly anticipated necessary code changes. However, the new design may degrade the response time while saving a review. As an external API call will be made for evaluating the text reviews. A user may be given a power to whether he wants to have such suggestions or not. As this may turn out to annoying for some."
1,Was it compute average or compute each metric before displaying to students? I think the later.
1,"- I like the language they used to explain the changes but some of the stuff seems like they are making stuff up to add more lines to the documents. For example, they used Check whether CORS needs to be enabled for calling API. This doesn't make sense and doesn't need a separate set of tasks to be listed.
Simple concept: In the frontend, if you are calling anything other than what belongs to your domain you need CORS in the backend you do not. 
Suggestion: Check the response time of the 3rd party API. If it is small write a wrapper in your rails code to avoid cors issue which you will surely face if you are doing it in the frontend."
1,"The proposed flow looks well thought and planned.
Although some more details are needed, this is enough for phase 1"
0,"Explanation was clear, concise and easy to understand."
0,The explanation was detailed and covered all the points. Good job
0,The team's explanation of the problem statement is lucid. They have properly defined their approach by mentioning low-level and high-level details and also have a test plan set up.
0,"Yes, Functionalities are incorporated."
0,- It looks like they understand the problem at hand and have divided task which needs to be done for different users.
1,"It covers almost all necessary parts. Although the content has not been explained very well.
May be little comprehensive explanation would have helped. Also, they have not mentioned the current files where related functionality is present or where they plan to add new code."
1,"Yes, it does incorporate the main functionalities mentioned in the document. However, they haven't mentioned their plan to measure the total time the API will take to generate the metrics."
1,yes they have incorporated most of the functionalities in their document. However they have not said anything about how are they going to test the running time of API. One suggestion from my side is to use Postman to find out the average running time of API. There is an option in postman which is titled monitor. there you can find the average response time of your api.
0,"1) The functionality required in the document is covered in the design
2) They have separate problems and described it more clear than it was in the requirement"
0,The team has nicely explained the problem statement and birds-eye view of their approach
0,The explanation was very clear and it sounds like the problem has been addressed fully.
0,"The overall design doc is pretty nice, one thing could be better is that adding a UML diagram for users to understand the whole structure easily"
0,"The design is fairly complete. As far as the testing part is concerned, I think they should make use of SimpleCov too."
1,"1) All major parts have been covered in this design
2) There could be more details about how they gonna to integrate algorithm
3) Test plan should also include how to test from UI"
0,The design seems compelte and perfect
1,"They don't have a test plan section, however, I understand testing the UI could be challenging."
0,They have provided appropriate visuals and screenshots explaining the current behavior of the system.
0,The design appears to be pretty straight forward and clear.
0,The authors did a great job of explaining their project through wiki.
1,"No, there's not a test plan.
They should have a test plan to make sure your functionalities can work well."
0,"Yes, they use diagram to describe changes that will be made to this system."
1,"Yes, their design appears to be sound.
They have Problem statement and Tentative Approach.
However they don't mention about Test plan.
My suggestion is that maybe they can add a test plan section."
0,"Yes, they have explained well about why they want to make a change and what they plan to do."
1,They included screenshots to explain the current issues present in the system and how they are planning on rectifying it. But there are no UML diagrams that explain the work they are planning on doing.
1,"They presented two approaches, one of which was elaborate. However, they mentioned that if that doesn't work they'll use the second one. The second approach was not explained in detail. Also, they didn't mention why they believe that the first approach might fail in the first place and what problems they are anticipating."
0,"Yes, they have a decent design in mind and a way forward."
1,"They explained their approach however, test cases and files to be modified were not explained in detail."
1,They have added test plan for UI testing but they should have mentioned modifications/creation of specs.
1,"They fail to mention and propose solutions for the issues mentioned in the document
 


For “Author feedback report” table, change the header name “Review response rejoined” to “Review responded to” and “Last rejoined at” to “Last responded at”. Then, sort “Rejoinder” and “Review “Review responded to” as string (alphabetically), sort “# author feedbacks done” by the first number then the second number (same as “Review done” in the “View review report” table) and sort “Last responded at” as date.  This has not been done

For “Teammate review report” table, sort the first 3 columns as string and sort the last column as date.  This has not been done."
0,Yes they have added the test plan describing the scenarios..
0,They have shown the diagrams for the changes that needs to be done. Adding a mock screen for the final changes would be great.
0,"Yes, the design is simple and easy to understand."
0,They have added the test cases foir the new functionality. The test scenarios are for manual testing. The team can also look into automated testing by using tools like selenium.
0,Yes they have added the details and clearly explained what needs to be done for the project
1,"Test plan has been included, but what files are being considered for RSPec testing isn't clear in the design document."
0,"An update in regards to workflow is being shown this time around, which definitely helps in understanding the big picture for the project. Also, UI changes have also been shown, helping in understanding what is to be done."
1,"Designs seems straightforward, but its just what is being used to achieve the expected result is still unclear to me."
1,"The design for this project is mostly laid out and the problem statements is to show that the reports can be sorted in all browsers, and not specific to one browser. Previously, technical mentions to the same had been present, but now it is unclear as to how the same will be achieved."
0,yes the test plan is well described.
0,They have implemented the visual aid as suggested earlier.
0,"Yes, they have made the changes suggested and design document is well documented."
1,"The documentation includes the test plan. However, it lacks the mention as which part of the functionality will be tested by which rspec test case. Test cases are important as, the newly proposed code change should not affect the already in place."
0,The use case diagram shows the flow of how the new code will affect the UI and how the functionality of the application will change. The sorting of the reports will affect the output of the reports page depending on the feature on the basis of which sorting is done. This flow has been aptly explained in the Use Case Diagram.
1,"Yes, the design appears simple when looked from the documentation perspective. However, the handling of the web page content can be a issue to handle, which depends on the implementation of the proposed code changes suggested by the team."
0,"The design follows appropriate design patterns and appears to be sound. The team has aptly explained all the sections of the document, emphasizing on the proposed code changes. Along with that, the UML diagrams and test plan has also been explained properly."
1,Authors should properly explain about Rspec tests and what they've done that tests won't fail. Some descriptions of new tests should also be provided.
0,Diagrams are properly commented and explained to give the reader a complete understanding of the proposal of their changes.
0,"Yes, design is simple and properly explained using visual aids."
0,Authors have put effort to find out different ways of achieving the task and selected the best one.
0,"Yes, authors have explained the changes to be made and documented carefully to make it easy for the reader to understand."
1,"The test plan for UI testing is simple and clear as well. My issue is with how the team has described writing tests for code changes, as it is quite brief. For instance, they could elaborate on what their plan is when writing new RSpec tests."
0,The team has made better use of screenshots and flowcharts compared to the previous round. The design is now way clearer and easy to understand.
0,"Yes, all tests are well planed."
0,"Yes, all diagrams are clear and helpful."
0,"Yes, the designs for all problems are clear."
0,"Yes, the solutions of the team to each problem are well designed."
0,"Yes, the wiki well explained all changes to be made to the system."
1,"It does include the test plan. But they just mentioned that they are going to refactor existing code and run existing cases, write new test cases and haven't mentioned what really they are going to focus on the tests. It would have been better if they could mention the name of the module or functionality they are testing."
1,"The design document talks about different issues and provide solutions accordingly.But,there has not been design patterns used"
1,"Though there have been citations of issues and corresponding idea as to what is to be done ,helps.But also it is necessary that these be even more briefly explained with plan in code changes"
0,"Yes, they have included flow-chart diagrams for their changes. It clearly explains the changes they intend to make."
0,"Yes, the design is simple and intuitive. They have utilized good flow-chart diagrams to explain how their solution is going to solve the given problem."
0,Design diagram is very descriptive.
0,"No, structure seems fine."
0,"Yes, the design looks good. They have used UML diagrams to explain their design strategy and other screenshots to explain how it will work."
0,Changes are clear.
1,Detailed Rspec for Issue not given.
0,The test plan is detailed enough.
1,"Too technical, team does not seem to have viewed the reviews at all."
0,The document has a single class diagram which is good enough to understand the proposed solution as the solution itself is very simple.
0,The design is very simple and has minimal changes. Good job team of keeping the design simple and not trying to over engineer the solution.
0,The design is sound and perfect for the problem at hand.
1,"The team has written the test plan. However, the authors have not included where the changes would be for the new RSpec test cases."
0,"Yes, the design seems ti be simple."
0,"Yes, the design appears to be good. The authors have used appropriate principles and thoroughly thought of the design process."
0,Yes the authors have adequately explained the changes which are to be made to the system. The authors have described each of the Issues thoroughly and explained the problem and solution for the issues.
1,"The author failed to mention the following issues which needs to be resolved : 
1) For “Author feedback report” table, change the header name “Review response rejoined” to “Review responded to” and “Last rejoined at” to “Last responded at”. Then, sort “Rejoinder” and “Review “Review responded to” as string (alphabetically), sort “# author feedbacks done” by the first number then the second number (same as “Review done” in the “View review report” table) and sort “Last responded at” as date.
 
2) For “Teammate review report” table, sort the first 3 columns as string and sort the last column as date. 
 
3) In Chrome on Windows 10, the dropdown has a tendency to freeze up, especially after one report has been viewed.  Please reproduce the problem, find a fix, and implement it"
1,"For the approach 2, they could add more explanation with design diagram."
0,"Yes, they have included test plans for each subgroup of issues/changes and have covered all the functionalities to test."
0,Yes they have incorporated all the required functionality and gives details about the requirements.
1,"Yes they have aptly used diagrams to describe the proposed changes in the system.
Just that they missed one point made in the specification and have not covered any where in the design doc about the students should also be able to see the list of meta-reviews done by him/her just like the list of normal reviews."
1,The wiki is missing the test cases
0,"Yes, design appears to be pretty straightforward and easy to follow because of good use of visualization."
1,"So such aid is being shown in the document, making it hard for the reader to understand what exactly is the flow of events, or when does the reports come into the picture in the first place. But good show of the UI change is being done, which does help in understanding the second issue."
0,"Yes, they have explained all the necessary changes to made in the system in the form of diagrams and also mentioned in which part of the code these changes will be reflected."
1,"The author proposes two ways to go about sorting - JQuery or ReactJS. Questions like why go ahead with JQuery over ReactJS to begin with? What advantages does it pose over ReactJS? Also, how does the issue of it not being displayed on certain browsers be tackled? Is that resolved by using JQuery or ReactJS? 
I believe these basic questions should've been answered in the wiki, so that the approach being taken is considered solid."
0,"Yes, they have clearly listed all files to be modified among the first three issues.
Since the last three issues only need supplementary tests, there is nothing to be modified so far."
1,"A testing plan is missing in the document. Also I'm curious to see if the team uses Rspec at all, considering that the views are to be changed, and not the models or controllers (this is what I'm assuming from the design document)."
1,The changes that they proposed can be more detailed and include the files they will change or add. Also the description is too short which doesnt provide a adequate understanding of the approach.
0,All diagrams are proper.
0,Design is simple and clear.
0,"Design is good, but they have not made any changes since last submission."
1,The document can be improved and the design flow of implementation can be added. Test plan should be more descriptive.
1,"The team has not added any UML diagrams to the write up. They have attached screenshots of web pages where changes are proposed. This actually helped in understanding what are the features currently lacking and how the proposed code changes will help in overcoming these issues. However, a Use Case Diagram and ER diagram would have helped understand the scenario better."
0,There is a test plan in the writeup with detailed steps for testing the functionality to be changed.
0,"The team has used screenshots, flowcharts and UML diagrams, all to great effect."
0,The proposed code changes look good. The new design proposed by the team looks simpler and the name of classes where changes are proposed look appropriate.
0,"The design is remarkably lucid, I don't think the team could have done a better job."
0,"The authors have explained the changes in great detail, including the files to be changed as well as what screens will be impacted due to theses changes."
0,The proposed changes have been aptly explained by the team. The team has attached screenshots as to where they will make changes and what type of changes will be made. Appropriate explanation is given stating why the said approach and what will the team do if that approach does not work.
0,The design incorporates all the functionalities required as stated in the document. The team has included the issues present in the existing design and the  new proposed solution.
1,"The team has not stated any test plan. The document lacks the test cases and how the proposed changes will affect the remaining application. Also the UML diagrams are absent, which can help a reader to understand the scenario better."
0,They've inserted at least a screenshot for every problem they are supposed to solve. Which makes it easy for the reader to visualize the problem.
1,Author have proposed the solution in very abstract manner. More detailed breakdown of approach would be helpful.
1,It does include the test plan. But they haven't mentioned which corner cases or rare cases they would be testing to make sure that the system works in every possible case. It would be better if they could find out the rare/corner cases of the system and test for it.
0,"Yes, they have drawn a use case diagram."
0,"Yes, the design looks simple. They have drawn a UML Use case diagram to explain the design. It makes the design easier to understand."
0,They have used good screenshots to explain the changes they intend to make. They have also described the problem statement and the appropriate solution at every issue.
1,The design doc captures the essence of the work to be done but lacks many details of the problem statement.
0,"Yes, the team has made good use of UML diagrams to assist readers in understanding the flow of the project."
0,"Yes, the design has been explained in simple terms. Use of visual aids further helps clarify any doubts that a reader may have."
0,Good explaination was given for the approaches that they are taking.
0,"Yes, the authors have provided adequate explanations and made use of visual aids to help a reader understand the flow."
0,I thin the design that they propose can help address this problem fully.
0,"Yes, the design does include a test plan and also there are seperate test plans for each issue. They do really seem to test the functionality."
0,"Yes, the class diagrams and flow charts clearly describe the changes to be made to the system. They explain the functionality pretty well."
0,"Yes, the design appears to be as simple as possible, without any complications and unnecessary additions."
0,"Yes, the design doc appears to be sound, following appropriate principles and using appropriate patterns. The files to be modifies seem to be correct."
0,"Yes, the authors have adequately explained the changes to be made to the system, and also the use of flowcharts and class diagrams help a lot."
0,The visual aids are helpful for understanding the problem.
0,"Images are useful viaual information for the documentation, though a bit large."
1,They miss the test plan part.
0,Explanation of the issues is fair enough. Diagrams and images provide useful information too.
0,Document provides a great overview of what is to be done in this project.
1,They haven't included any high-level diagrams on the wiki page. At least a basic UML diagram like use case diagram could have been added or just the dataflow diagram.
1,They have suggested solutions for each issue but it does not seem robust. They haven't included the files they will be modifying or the models they will be changing to fix the issues. Nothing can be commented if the code is smelly as there isn't mentioned about the code they will be modifying/adding.
0,"Yes, they have added the solution and approach they are going to follow to fix the issues."
1,"The document only mentions the files which will be changed, doesn't talk about how or why."
1,The testing plan and the design strategy are not mentioned. Going ahead in the implementation of this project it could be very vital to refer to.
0,"Given that the problem statement is not that complicated, the team has included a flow chart which is more than sufficient to understand the strategy. Concise yet good enough."
1,"SS of the app at problem locations are given which help understand the problem
UML Diagrams are not provided."
1,"Issue 1 - ""3. Sorting by the first number followed by the second number - It will require splitting up of the data into two parts separated by '/' and then sorting the first part, followed by the second part."" - If the score is to be split by '/', it better be appended back as a single number and then used up for sorting, would simplify the task and number of iterations.
Issue 1 & 2 - No files to be changed mentioned for reference"
1,"Explanations are not clear
Issue1 - the solution has too much technical details without giving basic of the techniques and scripts like tablesorter etc.
So the solution is confusing and does not clarify anything they mean to say at all."
1,"The document seems incomplete
Testing plan is not mentioned.
The ReactJs approach is not described at all (if it is not designed, its better not to mention it - its okay if the current design does not work out and need arises for a new design later)."
1,"1. The author have not described classed for Issue 1. 
2. No
3. I think the design is pretty good
4. I don't think it would increase response time.
5. No"
1,The author have proposed 2 approaches for Issue 1 but approach 1 is already implemented. The author had said they would try approach 2 if approach 1 doesn't work but design for approach 2 is missing.
1,"I think few things are missing from design document and it is a bit ambiguous. I think the team should visually depict Use cases, flows, etc."
0,Very good job on putting together this document. I was able to understand all the issues that you plan to fix.
0,The only thnig that needs to be added is code level changes. Good job team!
0,"1) They've identified the correct files for the proposed changes
2) Since the project is predominantly just UI changes, I don't think so
3) The new design isn't complicated
4) I don't think the response time will be increased since they're basically just UI changes
5) No, the design is good enough"
0,"Yes, they've addressed all the issues listed in the specifications doc"
0,"The team stated the problems to be fixed and also indicated in which file the issue can be at the end of each issue.
The motive seems to be pretty clear to fix the 3 issues related to the meta reviews which is the expected outcome."
0,All the changes proposed in the form of flow charts and design strategies seems good and are easy to follow.
0,They have covered all the necessary sections of the design doc.
0,"Their descriptions on every issue completely covered specific problems and illustration on how to operate on UI system, thus the explanations are very comprehensible."
0,"Yes, there are three tasks issued in total. The first two are about fixing existing bugs about meta-review, one for the link and the other for the number. And the last one is to enable instuctor to whether to open this section.
And the wiki of this team completely contain all these three issues and correspondant illustrations."
0,"The descriptions, the approaches to implement functionalities and the test plans of every single issue have all been specified clearly."
1,There was no solution in the text only the file names were mentioned. How and what all changes will be made is still unclear.
0,Yes they have incorporated all the changes.
1,"team should work to make the documentation comprehensive and easily understandable. test plan comes after issue without proposing the solution, so it is tough to understand."
1,"I think from the doc it is really tough to understand what authors plan to do. Issue 3 Description and solution is well written and clear, However for issue1 and issue 2 it is tough to understand."
0,I think visual aids are used properly.
0,Flowcharts and UML diagrams are used when appropriate and are also specific in nature. I think the team has done a good job.
0,The team has divided the problem cleanly into separate issues and mentioned a good plan of attack for each.
0,"Yeah, this part seems good."
0,I could only see the wiki but code or interface.
0,"Yes, they used UML diagrams to describe the design strategy such as Use Case diagram and the flow chart which explains how their changes are going to solve the issues provided. The use case diagram follows the design style for UML standards."
0,They have spent enough time on the design document. They added the proper and relevant screenshots. The UML diagram shows that their design is easy to implement.
0,They have properly identified the files that need to be changed. They have edited the screenshots pointing to the changes they plan to make. It is easy to follow their implementation plan.
0,Yes. It covers functionalities required to fix the given issue. They have given good approaches and solutions to the issues with the diagram.
0,The team has made use of visual aids nicely to help the reader understand issues and the proposed solutions.
0,The changes proposed appear to be sound and it doesn't seem like the changes will lead to smelly code.
0,The explanations provided for the issues and the strategies proposed to solve them are well written.
0,"Yes, the design document seems to incorporate most of the required functionality."
0,The flowchart looks very descriptive and explains the functionality pretty well and they are pretty helpful.
0,"The design proposed by the authors looks good. The authors do not plan to add method to any wrong class, the new design does not make the code smelly, there are no complications and the response time does not seem to increase."
0,The changes that the authors have proposed seem good enough to execute the functionality.
0,"Yes, the design strategy does implement all of the functionality required."
0,The design doc seems complete and good enough.
1,"No visual descriptions, screens are provided. But since this is a test project, I don't think it should be of much importnce. Although, the team can create a small diagram explaining the scenarios which will be tested. Also, UML diargram can be used to explain the tests' relation with database."
0,"The design proposed by the authors seems good. Looks like they have designed it with care. The test plan is well documented.
 
1. I don't think they will have to add any method.
2. Code won't become smelly because team will be adding tests only.
3. I don't think any extra gem is needed. But if the team has thought of using some extra gem or if after some research they have concluded that it is better not to use extra gem, they can mention their reasons in the documentation.
4. Tests won't affect actual response time of the system. Maybe, they can write the tests to even check the actual response times if it is possible.5. Some more intregrated test can be added if possible."
1,The changes proposed by the author are clear and the test plan looks to be nicely designed. Just one problem is that they have not considered inter dependecing between those 5 use cases. Team can add some more tests covering multiple use cases in one to test them.
1,"Yes, the design seems to be covering all the required functionalities. The project is about testing and the scenario wise tests are mentioned in the test plan.I know it is very unlikely to happen but what if one use case interferes with another use case? I would suggest the team also to add some tests testing a few use cases interefering with each other. (i.e. happening at same time. for e.g.,  some author resubmitting the work after the review and instructor sending assignment deadline reminder notification at the same time.)"
1,"Overall, the document seems covering almost every required thing and looks like self contained. Only suggestion I have is to add some visual experiences/ diagram/ test result screenshots and to add some test cases checking what happens if multiple events requiring email trigger occur at same time."
1,There are no visual aids.
1,"- No visual aids have been used
- Authors could have added a flow diagram of email functionality"
1,There are no diagrams
1,There are no diagrams or UML designs mentioned in the design doc. They're not that much required since it is focused on testing.
1,Lacks any sort of visual aids.
1,"NO UML diagrams, or mockups of screens or tables."
1,No pictorial representation is used.
0,"Since it is a test plan, the diagrams may not be applicable.
1. Not applicable
2. Not applicable.
3. Not applicable"
0,"1. No.
2. No.
3. No.
4. No.
5. No."
1,"- The authors have only highlighted the files associated with the functionality
- It is unclear which files are expected to be changes; as only tests are to be added no controller or model must be modified in the project scope"
0,The team has covered all the scenarios in a basic sense.
1,The design is not explained properly.
0,Doesnt look like there are going to be additional methods. It is just the testing of email functionality.
0,The author have purposed approaches to test the missing functionality for email and have explained their steps and test plan in detail.
1,"As far as I know test have to be written with little or no knowledge of whether a particular feature is working or not. It can be checked to validate the test cases but not to write the test cases.
 
The team proposes to check whether or not the features are working and then move to test plan, which is wrong according to me
TAs please take a call on this."
0,The design seems good with test plan being explained properly and files that are to be modified are also listed.
1,"The background and problem statement is not very clear, what is the problem details about?"
0,The changes look good.
0,Scenarios have been beautifully explained in Wiki Design document.
0,explanation is easy to understand
1,"All the other implement is good, the proposed approach does not include the design pattern analysis and design diagram."
0,"Yes, the design incorporate all of the functionality required"
0,The design document considers all the scenarios and functionality tests.
0,- The document describes the features where mails are sent
0,Functionalities are covered.
0,The scenarios are carefully identified and team did a great job in idenfying the places where changes are needed in such a short time.
0,Yes the design includes all of the functionalities
0,The document contains all part needed.
0,Everything else is mentioned correctly and descriptively.
0,The document looks complete.
0,Design and the analysis of the changes needed looks complete and near perfect.
1,"Overall the document is adequate, but is something visual was included it would have been the cherry on top of cake."
0,documentation is complete.
0,UML diagram explains the flow of code and its helpful to understand whole design of the project.
0,Design is clear and easy to understand. Proper details are present in document to understand how the implementation would be done.
0,Plan proposed by user is clear and easy to understand.
0,Document mention clearly what is required to be done is this project
0,"Design doc looks complete, author have mentioned every thing for this project."
0,"No, they are adding things like creating a new controller. But it is too avoid complicated code in the current controller which the previous team has modified. I feel all the changes that they have specified make sense."
0,"They have explained the necessary changes very well. They have mentioned the files to be modified/the controllers which have to be refactored. They have specified the different issues in the current project that they will be solving. And the explanation behind the proposed solution also makes sense, for example why they chose to move the controller code to a helper file and so on."
0,"Yes, they have captured all the requirements in their Wiki page."
0,They have included and explained all the mandatory sections. It is seen that they have given a lot of thought to their test plan. They have carefully jotted down each feature to test.
0,The authors have included visual aids.
0,The design doc is complete
0,The explanation is good.
0,Yes all the functionalities are included.
0,the design of the project incorporates all the functionality required. all the metrics required to assess teammate contribution.
0,"the design proposed by the authors is pretty good. they addressed all the issues along with code quality, redundancy, etc."
0,"The design plan sounds good. They've proposed to follow good coding practices in ruby, such as DRY principle."
0,Author has mentioned the changes carefully and distinctly. Documentation shows the details of changes category wise which helps the reader to understand the tasks.
0,The design doc overall is very complete and covers every aspect needs to be displayed.
1,"The solutions are given for each problem. This is a good way to break it down, but changes to each file should be mentioned as well."
0,"1. Everything seems good and the use case diagram did help me understand the project.
2. The use case diagram follows the convention.
3. All the diagram provide enough details."
0,"1. the task doesn't require methods to be added.
2. No.
3. No the design doesn't look complicated. The design provided by team is enough.
4. Not applicable
5. The effort provided by team is enough."
0,"Yes, The design incorporates most of the logical functionality and is clearly explained."
0,The design looks good enough. Nothing is missing.
1,The two use case diagrams in the document are supposed to represent two different approaches to achieve the task. But they are one and the same.
0,"Besides the diagrams, I think this design doc is very thoroughly completed."
0,This design document fully incorporates the required functionality and has great plans for how to refactor existing code.
0,"After reading this, I have a great idea of what functionality will be present after the change and how the students for this project intend to refactor existing code."
0,"The use case diagram given by the author are very understandable and helpful, follows all the conventions."
0,The designs proposed by the authors seems pretty good and there do not seem to be any errors.
0,The changes that the authors have proposed seem good enough. The explanations are descriptive and understandable and adequate.
0,"Yes, the design doc implements all of the functionality required and is adequate enough."
1,Test Plan can be significantly improved. Could add more details regarding the test cases specified. For example the context and the role etc.
0,"Since, this is a refactoring project, the designs and its implementation don't look quite complex to me. The team can add more details after the implementation is complete."
0,"Yes, the design looks robust and appropriate principles seem to have been used. The write-up also mentions those quite well."
0,"1) The explanation is adequate and easy to follow
2) Changes are explained in detail and sound reasonable"
0,"1) The design is absolutely sound and comprehensive
2) They have considered specific principles for this project
3) The pattern is appropriate and good."
0,"1) The design is simple enough
2) Each task/step is explained in elegant words and easy to follow"
0,"1) The test is deep enough
2) They covered how to test manually form UI
3) They also explained the automotive RSpec tests"
0,The authors do a great job of explaining why changes are required. They list each feature and what needs to be changed for it. This is under the Feedback and Improvements section. They state each problem and solution here.
0,"Yes, the design document lists out everything the team wishes to modify, and explains why it must happen. The document lists out the design principles being followed (DRY). A use case diagram and list of features compromise the best parts of the design."
0,"As this is a refactoring project, it focuses on simplifying everything. It plans to DRY out the code, as well as to manage the javascript used by the project. A new controller must be added as well."
0,"The test plan seems pretty solid. There is a list of what tests need to be added for the RSpec. The functionality seems covered by these tests. The team explains that there are no required UI tests, as mostly an API connection to Github is getting updated."
0,Design is clear and very simple to understand. Helps to follow the functioning of the code.
0,"Yes, authors have explained the details about the changes to be made to the system."
0,"yes, the design does include the test plan. and as per the document, the tests are not shallow and they will test the features."
0,changes have been as requested in the previous review. the use case diagram provided for the two approaches clearly mentions the changes that will be made to the system.
0,the design appears to be pretty simple and precise.
0,"yes, the design doc has all the required things, following the patterns and appropriate principles."
0,the authors pretty much explained all the changes to be made to the system in detail.
0,Yes the authors have adequately explained the changes.
0,"Yes, the design document appears to be sound."
1,"There is a test plan, but it is not properly elaborated."
0,"Yes, they have added more visualizations and text to explain the problem statement better than the last time."
0,I see that they have updated their use case diagram from last time (which had 2 similar diagrams.) They have also added an explanation to their use case diagrams. The diagrams seem adequate.
0,"Yeah, the existing code has many issues which they have properly identified. They have also provided reasonable solutions for the identified problems."
0,"No, the way team has explained, design looks simple. Team has done good explanation of the design. They have made section about plan of work which is really descriptive and make it easy to understand."
0,"Team has given good information about in design document, they have covered all the details required for a design document, only thins is that they have not mentioned about which design principle they will be using and how."
0,"For every change they have proposed, there is a reasonable explanation supporting it."
1,Moving functions from a controller to a helper class does not sound like a good idea. Helper classes usually contain methods written for the view. Their purpose is to clean up the code in the view files by separating out logic from them.
1,"There is slight improvement from the previous version but there is still scope for improvement. A test plan should specify not only 'what' features will be tested, but also 'how'."
0,"Yes, the design appear to be sound and the team seems to be using appropriate principles."
0,"Yes, the design seems simple as team have given thorough planning for UI, work flow and test plan."
0,"Yes, the team have provided thorough test plan with RSpec Test and UI Test."
0,"Yes, they have explained the changes very well."
0,I love the explanation and implementation for the design!
0,As simple as a design can be which attempts to consolidate multiple past attempts.
0,The visualization makes very clear how the proposed changes are designed and how they will affect the look of the system.
0,Explanations are detailed and sufficiently explain the changes to be made to the system.
0,List of RSpec tests is given which seems exhaustive.
0,"Yes, the authors have explained the changes to be made to the system pretty well, making use of use case diagrams and bar graphs."
0,"Yes, the design appears to be as simple as possible and with minimal complexity."
0,"Yes, the use case diagrams and the bar graphs explain the functionality and the changes to be made to the system pretty well."
0,"Yes, the design includes a test plan, and also plans rspec tests. These tests really test the functionalities pretty well."
0,"The authors have adequately explained the proposed changes made to the system by including localized information about the issues  i.e. the files associated with a particular issue and the exact part of the code in that file that will actually be changed.
This helps in giving a view of how the issues will be resolved."
1,"Though the design document covers all the important and the relevant content, the structure of the document itself is an issue.
I feel like the team should definitely move the Mentors and the Team Members section to the very bottom of the page.
They should also have a separate Goal of the Project section on the top."
0,"The visual aids on the design document help in understanding the issues and proposed changes even better, especially the User case diagrams."
0,"The design includes a really good Test Plan, with subsections dedicated to description, RSpec Test and UI Testing.
It gives an insight into the tests that the team will actually be writing once it starts working on the project."
0,The design doc mentions all the functionality and more. It pulls from the requirements page and adds to it.
0,"The design doc is mostly complete. It has an introduction/purpose, design, and testing section. I would just have a subsection of the design talking about file specific changes."
1,"1) There are only two diagrams for their design
2) The two diagrams are in the same screenshot with different size
3) The information is hard to get follow since it is not UML or some kind of work-flow
4) Also hard to see the difference of these diagrams"
0,"1) It is a refactor project and they have covered every functionality required
2) They have referenced previous design of this project and make some improvement based on that"
1,"UML diagrams seem to be missing and incorporating them with the right set of details, in terms of methods being used and Models-views-controllers being considered will help in giving a bigger picture."
1,Proposed changes section is very poorly written. Solution for only one problem has been mentioned whereas solutions for other problems are just written in one line.
0,The explanation is fairly adequate.
0,"Some comments are hard to follow, but overall they are pretty intuitive and thorough."
1,"- The writeup mentions adding new methods but doesn't speficy how the methods would achieve the functionality.
eg. it's interesting to know how the course_staff_helper.rb would determine whether the current user is a student or a TA
- Adding TA as a participant might be confusing and might start showing up on the team in reviews, marks and probably other parts which might get very difficult to handle; 
Consider adding TA as another entity (reviewer or something) rather than participant and having only option to review"
1,The authors have diligently explained the changes they want to add to the servo code base.
0,The design seems to follow appropriate design principles. They have properly articulated their design in the document.
1,"Although the project seems a bit complex, but the steps help in proper understanding of the proposed solution."
1,"They have represented the flow of their steps via a diagram, helped in mapping the proposed solution to its implementation"
1,Testing section only include results form previous project. The team does not mention the new steps for this part for the project.
1,Diagrams are very descriptive. Snapshopt of Github help to easialy see the changed made to the code.
0,Design looks clean. There are enough sections in this report.
0,"This report seems complete. This project is a follow-up, so it makes sense to be with some degree of completeness."
1,"Overall, I don't see desciptions about the new modification to be done next."
1,"The design does include a detailed test plan.
The existing, currently passing tests are not shallow and they will really test the functionalities implemented in the project.
All of the 44 already existing test cases are passing currently.
The team has not really mentioned about writing any new tests. The test plan mentions a plan to test the projects using existing tests that the servo build is successful and no errors are reported."
1,"The team has added a new flow chart to explain the steps they plan to carry out in their implementation fo the final project.
This is in addition to a very well designed flow chart they already had explaining the changes made in the OSS project. (as this is a continuation to that project)
This I believe will greatly help any person reading the document."
1,"The design proposed by the team appears to simple and straight forward.
It is easy to understand and give a clear idea of what and how the team plans to work on the project.
The 7 step plan that the team is going to implement in the final project gives a detailed insight to the reader of the changes the team is going to make in the project."
0,"The project design appears to be sound and well-thought-out.
The team has rightly mentioned that design patterns are not applicable to their project as it involves the implementation of methods and modifying various files and that the implementation section provides details of why certain steps were implemented the way they were. (Although the implementation section only covers the OSS project)"
1,"The authors have laid out a detailed stepwise plan of the changes that have already been made to the system as a part of the OSS project, as well as the changes that the team plans to make as a part of the final project, under the scope section of the document.
The flow chart also kind os summarizes the changes to be made to the system in a stepwise manner which is easy to follow."
1,Tests are not described. Neither is the testing plan.
1,"Block diagram of already provided step on the project page has been created.
A better diagram could have been made including what exactly the authors want to implement."
1,"No.
Design could have been made simpler."
1,Nothing much has been added for the Final project after 3rd OSS project.
1,Explanations are not profound and are not very easy to understand. The wiki lacks lot of details and intent to describe.
1,Mozilla Project. No tests are required to be written by the team.
0,"No visualizations present. It might be difficult for a Mozilla project due to the complex classed being involved in case of a browser. However, a simple flowchart would be really helpful."
1,The team has included all the steps to follow for the final project. Although a brief explanation about what is to be achieved by these steps would have made things clearer.
1,The team is clear with the next steps involved but has failed to provide a detailed explanation about how they're going to complete them and what exactly is the problem statement for the final project.
1,"It would be a good idea to create separate sections for the final project, add the files that are going to be changed with some brief explanation about changes, and include flowcharts if possible."
1,"The design does include the testing command. Based on the writeup and their project page, it seems that their initial and subsequent steps are one continuous work and hence the team haven't outlined the testing procedure again. It would have been better if the team could have mentioned this somewhere in their writeup."
1,"The visualization is good. The team have listed all the steps in a simple flowchart manner. It could have been better if they could have simplified some steps in order to make it easier for the reader to understand what is going on. Anyways, I don't think visualization is necessary since Servo projects involve changes in files and small modules only."
1,"The design should be simple and clear. However, I cannot comment on it since I am not able to understand the steps to be undertaken by the team. However, the steps have been listed by the Servo team so they would be well thought out beforehand and would be able to be done in a simple fashion since they know students are not fluent in Rust and working with such large systems."
0,"The design appears to be sound. As I previously mentioned, for Moz projects, the design is mostly taken care of by the maintainers and wouldn't need to be modified or dealt with unless there are some errors encountered in tests."
1,The authors haven't explained the changes very well. It seems they have listed the steps from their project page but I believe it must be because of the complexity of Servo system where a lot of files are involved and the program flow is extremely complex.
1,"The team mentions that they have not modified any major functional/behavioral aspects and also go on to show that they test their changes using the Servo provided automated test suite. However, they fail to mention what project are they proposing this test plan for - OSS project or the final project. The team can provide such details and probably more as the project development proceeds further."
1,Visualization aids such as flowcharts and Github code diffs have made it much easier to go through the document and get the gist of the design for this project.
0,"The design seems to be hidden in the steps explained in the scope and implementation section of the document. Though the flowchart really helps in understanding what the team is doing, it would be most effective if they were to modify the document to highlight the files changed, the major code changes and why the code changes are required (possibly with another UML diagram)."
0,"The design has been well structured. The document encompasses introduction to Rust and Servo, their design sketch and the implementation steps. The team could have stated their design more clearly, though the flowcharts are a real bonus. They can modify the document as the project progresses."
1,The team has made a very good effort to document their changes in the system. They have explained this with a detailed and coherent step-by-step write-up.
0,well documented test plan.
0,easy to understand diagrams
0,good desgin.
1,The test plan has been involved correctly along with the steps mentioned to run these tests.
1,"The team has made use of flow diagrams as of now under the scope section however, I feel that this would not be sufficient.
A separate flow chart should have been included in order to provide a bigger picture of how the implementation would look like taking into consideration the current changes done. 
If possible, I would recommend adding some annotated screenshots which would make it easier to visualize stuff."
1,"The design appears to be comprehensible for most of the users with appropriate flow diagrams included along with the detailed explanations.
However, when it comes to code changes, I feel that the description should have been a little more verbose as it would have added clarity as to why certain changes are being done."
0,The design looks to be sound in most of the aspects and covers almost everything right from scope of the project to the testing phase. So great job on that.
1,"I think that the implementation section could have been more descriptive explaining about the changes been done. 
It was expected that the changes made be represented in the form of code along with the some detailed explanations as to why the required code has been changed."
0,Yes. The design includes the test plan. The test plan has provided step-by-step instruction of commands to explain how the team is going to test functionalities in this project. Overall the quality of the 'Testing' section is good.
1,"Yes. The team has 2 diagrams explaining the details of steps they are going to follow. Including what changes they are going to make and details. For some step of the diagrams, it may be difficult for people who is not working on this project to understand. If more explanation for specific step can be provided, the diagram will be clearer and helpful."
0,"Yes. The design appear to be simple. In the 'Implementation' section the team explained the steps they are going to follow, which is clear and simple. Also, the diagram also explained steps in details. Overall the design seem to be clear and simple enough."
1,In the document the team clearly mentioned the design patterns are not applicable as the task involved just implementation of methods.
1,"Yes. In the 'Implementation' section, the team clearly shows the steps to do on this project, plus the explanation of each step and the screenshots of the modification of code, which is clear and helpful."
1,The visualizations repeat what is written directly above them and doesn't help me understand any better.
0,The project already had a test plan.
0,They used the automatic tests suite provided by servo so there are no new tests.
1,It still does not include a diagram showing the components in the system. The workflow diagram does little more than the textual description.
0,Yes it is easy to understand.
1,"The implementation of the project does not require a specific design pattern but the design seems sound. However, it seems to only include scope of project 3."
1,"No, there's no mentioning about how they will approach project 4."
1,"As exlained before, the diagrams are just a repetition of the written code.Not helpful at all."
1,design and explanation does not seem simple considering no background.
1,Extremely unsatisfied with the explanation of the project.
1,"The test plan for subsequent steps of project is not mentioned in the document. I assume it will be the same as the initial steps. But even if it is the same, it would have been a good idea if the team had mentioned that explicitly."
1,"The team has given a flowchart on the wiki explaining how will the approach the problem. As mentioned in previous review round, It can be made more informative by providing more useful information like which action will affect which other classes, call which internal functions and what would be the result of that action and how would that result be used by the next step in flowchart. Other than that I don't think that as such any use of visualization is required in this project."
1,The design seems complicated. It is complicated because servo itself is a huge project. But the team can try hard to make the design simpler/ understandble by using less technical terms and using more descriptive sentences in the scope section of the document.
1,"Since, this is a Mozilla project, as such, there are no specific design patterns required. But the scope written by the authors explain almost whole plan/approach towards the problem."
1,"Yes the authors have thoroughly and adequately explained changes which they plan using text and flowchart. But as said earlier, explanation is still very technical and not easily understandable by someone who is not aware about the code. For e.g. Call ""InitDispatchToEventLoop in new_rt_and_cx_with_parent passing the new function and the boxed network task source as the closure argument"" this line is hard to understand by someone who is seeing this for the first time. Team can try to make such things more simpler."
1,"Diagrams illustrate the steps only. It would be better to have an UML diagram to better show  the modified methods, variables, etc."
1,"The Wiki page describes changes already done. As this is a follow-up project, consider explicitly stating ehw changes to be done next."
0,Esplanations are clear. They provide links to useful links which help to understand concepts.
1,Design document seems complete. Probably this is a follow-up project.
1,"Design Document looks good so far, though update the team can improve the layout: sections can be splitted or add more."
1,"The visual aids ie. the diagrams used to introduce what DOM features are is great. It helps the reader understand what DOM features are.
There is a diagram to explain the flow of the project team plans to implement in the final project or their test plan or design plan."
1,"1) There is no concept of classes in Rust.
2) The design plan seems to be appropriate and will not make the code smelly.
3) It is not a Ruby on Rails-based project so, there is no question of existing gems.
4) The new design is adding a feature that currently does not exist, so effect to response time is out of the question.
5) The design documents appears to be great and comprehensive. A lot of effort has been put into developing it."
1,"Changes to be implemented as a part of this final project have been given in a detailed pointwise manner.
The flow of the changes to be implemented are given in visual form as well.
The explanations for the changes to be implemented all make sense and are well written."
1,"Yes, the design includes almost all of the required functionalities."
1,"I believe the design document is complete as it covers the required aspects:
It covers the Purpose of the feature (project) as well as detailed Project Design (steps) to accomplish it. 
- Test Plan: The test plan seems to cover running existing test cases. It does not include any plan to add new automated tests to test the newly added feature."
1,"No UML diagrams or tables are present. It might be difficult for a Mozilla project due to the complex classed being involved in case of a browser. However, a simple flowchart would be really helpful."
1,"No proposed changes in code. But from the steps, it seems quite challenging to make an estimate of what the changes will be."
1,Explanation about what will be achieved by the steps that the team will be following for the final project is lacking.
1,The team is clear with the next steps involved but has failed to provide a detailed explanation about how they're going to complete them and what exactly is the problem statement for the final project. It would be a good idea to create separate sections for the final project and include flowcharts.
1,"The team have developed a flowchart so the way in which they are going to approach and complete the steps is much clearer. However, the team could have shortened the sentences and added simple explanations for the steps in the flow-chart. Currently, the details are extremely low-level which might not be helpful in understanding the project at a high-level."
1,"Design is proper. Anyways, the Mozilla project maintainers have well-documented the steps and the system is huge so I don't feel there is a need to change the design unless maintainer feels so. The code does not look smelly and the functionality is complex that there do not exist pre-defined components."
1,"The explanation is proper for the initial steps however for the subsequent steps, the team did not explain the steps they are going to take to complete their functionality so it is hard to follow. They could have simplified the language a bit for the readers."
1,"Yes, the documentation covers all of the functionality. It would have been better if the team could have simplified the language of the requirements so others could understand it better."
0,The design doc is almost complete. No important parts are missing as theirs is a continuous project. The project purpose and design are clearly stated. Moz projects are a bit complex so I understand that they did not mention about testing the code.
1,The team has made flowcharts to explain the step-wise changes made/expected in their project. Everything is well-described and coherent.
1,"Changes look good.
The code doesn't look smelly. 
Mozilla codebase changes - code design seems alright.
Response time will probably not increase.
The design seems alright. No need to expend more time than required."
1,The explanations are adequate and the flowcharts illustrating the steps are very helpful.
0,The team has explained all the functionalities for the project very well.
0,The design doc looks fine enough. The team can probably add more test plans for the final project part as the project progresses.
0,easy to understand flowcharts.
0,"Since first PR is already merged into master, means no issues were found."
0,"detailed descriptions of project purpose,design and test plan."
1,"The document mostly consists of screenshots of the commits done. 
In order to make the functionality much more visual and intuitive, I recommend you to add some annotated screenshots to the wiki document as this would make it easier for the reviewer to understand what exactly is being done.
Also if possible put in some UML use cases pertaining to your project."
1,"I think the code looks fine at first but in order to make it comprehensible, I recommend to give a brief gist of why those changes were made and what exactly is happening with the code.
Since, the implementation section was not explained elaborately, not much could be commented about the performance and simplicity of the added code."
1,"Most of the covered topics have been addressed correctly, however, I would suggest the following:
The implementation section consists of only the code that has been altered whereas there should have been a separate section for this namely 'Code changes', consisting of at least some brief explanation of what is happening since it can't be expected from every user to understand the functionality by just looking at the code at first sight.
I would also recommend creating a 'proposed solution' section and then explaining not elaborately but in a gist about what would be the approach decided by the team in order to tackle the problems mentioned in the problem statement."
1,"The document incorporated most of the functionalities and most of the terminologies were clearly explained however, I see some redundancies. The briefing about Servo was mentioned both at the start as well as in the introduction section.
Secondly, instead of mentioning Step 1 ,Step 2 and so on in the content index, write down the actual steps involved in order to reduce abstraction."
1,"I think the test plan has been written in a nice and systematic manner.
Add some images of the working feature rather than the code itself. This would not only make the document more user friendly but also add value to the document.
Finally add the team name to the document."
0,There are 2 diagrams introducing the steps for the project. If steps could be separated into different part with more details for each step will be more clearer and easier for others to follow. Overall the visual diagram is associated with the description well and helpful.
0,"1. None 2. None 3. None 4. None 5. None
The quality of design proposed is good."
1,"There is step-by-step instruction with explanation for each step which is clear. Screenshots of code is also attached to show the modification. For some code if there could be more details, description or introduction will be more helpful for people who is not in this project to understand. Overall the quality is good."
0,Yes. The design contains all of the functionality required.
0,"The completeness of the design doc is good. All parts required such as project purpose, project design and testing plan are included. Screenshots, diagram for specific section is provided which are helpful. For 'Implementation' section, if more details or explanation will be helpful for people who is not working on this project. Overall the completeness is great."
0,I don't see a design but the work they've done seems adequate.
0,There is a diagram but I don't think it adds much to the page. It simply repeats what they wrote in the paragraph above the diagram. It would be easier to read if only the paragraph or the diagram existed.
0,The explanation of what they have done is good. I can understand it.
1,I don't see a design.
1,The flow charts in the Scope section are not really helpful. They basically give the same information as the textual description above them. A diagram showing the components of the system would be more helpful.
0,The explanation is very detailed and well-written. It would be better if there is a diagram showing the relations of each components instead of just flow chart.
0,Yes it has the links directed to the functionality.
0,It's quite complete.
1,Flow diagrams just repeat in text whatever is said in description. Totally redundant.
1,Very confusing and difficult for the reviewer without proper background. layman explanation expected with less description taken from Git and lesser code snapshots and more self written description to understand the context.
1,"The flowchart which they have given on wiki, explains how do they plan to address the issue. It is somewhat clear but it can be made more informative by providing more useful information like which action will affect which other classes, call which internal functions and what would be the result of that action and how would that result be used by the next step in flowchart."
1,"There is no design pattern in the documentation as it is Mozilla Project. But the scope written by the authors explain almost whole plan/approach towards the problem.1. Yes, they plan to add methods. But all of them seem to be in correct class/files as they in harmony with what project page on github says.
2. I don't think that the code will become smelly because of those changes.
3. yes design seems complicated. I understand that this is rust so there might not be gems like in ruby. But the team should give it a try to make the design simpler.4. It will improve the performance by starting the compilation of WebAssembly while the program is still being fetched from the server.5. The team can try giving a bit more effort to make the design simpler."
1,"The changes proposed look to be genuine and adequate as they follow the subsequent steps given on the project page. But, the explanation is very technical and it makes it harder to follow. If explanation is simplified or supported by some changed code snippets, it would make it easier to understand and follow."
0,"The design document incorporates every functionality mentioned on the project page. But the only problem is that when the scope of the functionalities is described, it is becoming very technical for a reader to understand. I suggest the team to make it less technical for other people to understand easily. For e.g. the point number 2 says ""Pass network task source"", which I don't know what it is. So, here, the team can briefly describe in 2-3 lines about that or just simplify the full statement by simply using a more understandable alternate of ""Pass network task source""."
0,"overall, the design document looks complete. Although there are some ambiguities, but after the actual implementation and once the design doc is made much simpler, I feel the ambiguities will go away."
1,"The changes proposed by the team are reasonable.
The team has clearly studies the code and the root cause of the problems which is really great.
It would be more informative if the team would have explained their thoughts with code snippets as it is easy to understand instead of using the name of variables etc, which is hard to follow."
0,"The explanation is clear and concise.
Charts and screenshots make it quite easy to understand the issue and their approach"
1,"brief description with images, good!
though have text description, lack off URL diagrams and design patterns."
0,There are visual flowchart representing the flow of the problem
0,"Yes, the design appears to be sound."
0,"Yes, changes to be made to the system are explained nicely."
0,"Yes, the test plan is explanatory."
0,Yes. They explain the reason clearly.
0,"Yes, simple and easy to follow."
0,"Yes, they have drew a diagram shows what changes will be made to this system."
1,"Yes. There's a test plan. But they don't show exactly what kind of test will they do.
Maybe unit test or UI test?"
1,"Design appears to be strong but during designing they should know what to do and where to do it. It is alright if they don't really know how to do it. There are few issues which lacks this understanding as they are uncertain about them. eg - test plan, Files which require modification (Tentative)"
0,Explanations are sufficient enough to understand.
0,yes!
0,"yes, explanation about the problem handled is elaborate"
1,The test plan is not in depth and just lists the teams' responsibilities
1,There is just one flowchart which is included and even that is not elaborate in terms what will be achieved
0,Yes the proposed design is simple and lucid
0,A well designed document with proper explanations
1,The exact changes or approaches is not mentioned
1,They wrote the test plan in their design document. The test plan is a little bit abstract. It would be better if they list the test files they plan to add test to. And they can add more details about testing from UI.
0,The design seems to be as simple as possible. They write the work progress and the methods they plan to change. Their design is appropriate and has no point that is unrelated to the project.
0,They write their design plan organized and the design seems appropriate. It follows right principles and using appropriate patterns.
0,The team has added good visuals to make us understand the problem with the existing implementations which are pretty good.
0,The design appears to be very straight forward with every detail has been explained clearly. The test plan is also clear.
0,The authors have very nicely explained all the changes that need to be made and a detailed plan of the changes that are going to make.
0,"Yeah, they have described the changes to be made very well."
1,Poor test plan. Doesn't mention any concrete plan to test the code changes required to fix the issue.
1,No significant visualizations added.
1,No design mentioned.
1,No concrete design is thought-after by the team. They have only written the problem description from high-level and mentioned that they will make changes to make that happen. None of the changes are appropriately described.
0,"Yes, the design appear to be as simple as possible"
0,"Yes, the design appear to be sound, following appropriate principles and using appropriate patterns"
1,I am not sure because they do not include concrete solutions in their modification sections. They only include files that need to be changed but does not state how to change them.
1,"They have user diagram which let me understand the case. But no UML diagram included, so I don't understand the class relationship and how are they going to change the files."
0,They have all sections that need to be included.
0,"The design appear to be sound, following appropriate principles and using appropriate patterns. The design document contians Project Overview, Current Implementation, Plan of Attack, Files which require modification (Tentative) and Test Plan."
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Project Overview, Current Implementation, Plan of Attack, Files which require modification (Tentative) and Test Plan."
1,"Yes, they include test plan. However, their test plan seems a little messy.
I think they can split unit test and UI testing.
And then adding some screen shot for the expecting output."
1,"They used a flow chart to show the process of their function.
However, I think they should include more details and steps in their flow chart.
They can also add a diagrams to describe the changes they want to make."
0,"Yes, their design looks simple and clear."
0,"Yes, they listed all the files and methods they may modified, which is quite clear."
0,The Wiki page clearly explains about the places where changes will be made and why are they necessary.
0,The new design looks fine.
0,"Yes, all functionalities are incorporated."
0,They have added a UML diagram which is nice but their writeup is so clean that it was not really needed.
0,"The purpose, current situation and their proposed implementation is explained really very well."
0,Amazing writeup!
0,the UML diagram is informative
0,Explanation is not exhaustive but I feel it is adequate for the first round
0,Yes the design includes all the aspects of the problem in hand
0,All in all documents seems pretty standard and good
1,They add a visual aid to describe the progress of calculating the score of a question. But it is a little too high-level because it doesn't explain how they plan to fix the problem. The diagram doesn't provide enough details about their work.
0,The design incorporate all of the functionality required. There work is to find all the code about calculating scores and ensure weights are calculated correctly. They have already found what files and what methods would be changed.
0,The description looks clear and concise.
1,More diagrams should be added or the current one should be made more elaborate.
1,The writeup doesn't explain a solid principle of solving the issue.
1,The writeup doesn't provide any solid approach that they will use to solve the issue.It lacks a lot of details and good explanation.
0,Flow chart was incorporated to provide visual aid.
0,The design changes appear to be correct. But cannot say for sure until some implementation is seen
1,The quality of explanation is satisfactory but it can be improved further by explanation.
1,"They have a high level design diagram, but no UML diagram included. I can understand their project from a high level. I know what they are going to do, but I do not really understand how."
0,"Target classes are all good. Code is not smelly.
The new design looks not complicated."
0,"I think their explanation is clear and easy-reading. It not only contains why or how to accomplish the function, but also includes the files which require modification."
1,"I think they could make more introduction about their test plan. For example, they could list the test case."
1,"Their only UML diagram is too high-level design, they should provide more details in the diagrams.
Besides, it now seems unnecessary, because it doesn't make their solutions clear.
Besides, I think their should add some screenshot of the score calculation in the background part."
0,I found explanation in their design document seem suitable for the function required.
1,"Diagrams would have been benficial to analyse the changes proposed, however they are missing and hence I cannot answer this question.
 
However, Team did a great job in identifying and writing the steps."
1,"1) The author is just editing the methods (so fat it feel so)
2) Design Document is not yet given
3) Design Document Missing
4) Design Document is missing.
5) yes"
1,"Team has mentioned the files that are required but thye have not mentioned what changes needs to be done.
 
<Files which require modification (Tentative)
The following methods in the files might require modifications>"
0,All the changes proposed and corresponding explanations are easy to follow and correctly identified.
1,There is not a design proposed outside of the approach proposed in the given requirements. There should be a design section that talks about what classes and methods will be updated/added. This will need to be more than part of the requirements; the design should talk in detail about the plans for implementation.
1,"Yes, I think they have done a good job, The only problem is that they could add more tests to their code, because right now they only use UI test."
0,Works as expected
1,I am not sure if this can be automated in some way(there is no automated test) but it gives steps for a manual test which works perfectly fine.
1,"Team has not given any comments to any method, code is not commented"
0,The build is passing and there are no conflicts as well.
0,The Trravis CI build is passed successfully. There are no conflicts which need attention.
0,"Yes the build is passing
I am able to see the pull request on github"
0,"Yes, the build passes Travis CI. There isn't any conflict that must be resolved."
0,The team managed to make the build pass.
0,The build is passing in the Travis CI. There seem to be no conflict.
0,The build was successful.
0,"Yes, the code has passed the build in Travis CI."
0,Yes it is ready to be deployed.
1,"- As most changes are refactoring related and the tests pass showing the features work as before, the changes can be deployed to production server
- The code doesn't seem to be deployed to manually check if all fixes work; deploying on test server and testing is necessary before actually adding changes to production server"
1,The modifications look good to me but we need to first check whether all features are working or not. Does the code refactoring affect the functionalities or not. As the deployed link is not provided I am not able to do so myself. Although they have made a video of the test cases and the working functionality so it does look like the code works and is ready to be merged.
0,"It can be deployed. Build passes and the team did addressed the commented issues on Round 1. Besided, changes were mostly renaming methods and classes, and the build passing reflects that those changes were made appropiately"
0,"The code should not be merged to the production server. The team has done a good job refactoring the code, but the test coverage has decreased which is substantial part while merging the code."
0,The code can be deployed in production; just need to verify if the code coverage has indeed gone down.
0,It is elaborate.
0,The writeup is very clear and self-explanatory. They've also added a video to explain about their changes
0,"The write-up is well written, much improvement since the last time. They have clearly mentioned the issue along with the solution and also mentioned the code they have changed."
0,"Project is well documented. Documentation is long enough and explains code changes, tothegether with testing procedure."
0,"The writeup is very well written. It consist of well stated issues, implementation and results."
0,The writeup covers all the issues that need to be updated and is well documented.
0,"The writeup is very good, explaining the problems and the changes that they have made."
0,"It works good, the UI works as expected."
0,The task is completed correctly. And the functionalities work as they're supposed to work.
1,"- Couldn't find the deployed image, couldn't verify is sign_up_sheet_controller works as expected after the changes"
1,No link provided for the deployed application. I had mentioned this in the last review as well but no action has been taken.
0,Video shows procedure of how to drop a student. Test case cover this as well.
0,The system performs the features from the UI as required after the code was refactored.
0,Everything works as expected.
1,The UI is not available so could not be checked as the team has not deployed the code. But from the video that the team has provided it seems to be working perfectly as desired.
0,"They have not added any new tests, because there was no need of new cases."
1,No new test cases have been added and the coverage has decreased by 7%. Please add test cases in-order to increase your coverage.
0,They added test cases for the sign_up_sheet controller in various spec files.
1,"No new test cases were added. The code coverage went down, but this seems to be an issue with coverall, and is not specifically because of their code."
0,"Their project was completed before Round 2. Thus, no new comments"
0,The team has committed during the second round. The code has been refactored aptly.
0,The code write-up was found to be well enough in the previous round review as well.
0,1. They've solved every problem statement they were given. 2. They also tried to find some inconsistencies on their own.
0,"- Most changes are wekk written
- Method name changes like changing load_add_signup_topics to retrieve_signup_topics, etc. made the code more readable"
1,"Since no new commit has been made after the first round, I don't believe any suggestions were considered. 'def list' & 'def save_topic_deadlines' quite long. 'def get_status' is also long and has quite many nested if-else conditions. More comments could have been added. Otherwise, the code does follow the DRY Principle."
0,Code follows guidelines. Renaming is made according to requirements.
0,"The code follows the Ruby Code of Conduct and is DRY.
The functions are apt in size, function definitions are not too long."
0,Did not have any specific feedback to the team. Good work team!
0,"The code follows all the good practices and did not have any problems during the first review and they haven't made any changes after that, so it is ok."
1,Comments are present but could have been more detailed.
1,No comments
1,"They've written notes i.e. comments for most of the methods, yet some functions lack comments."
1,"- As the project includes refactoring, no new methods seem to be added
- Comments on what the refactored method does should have been included for missing ones"
1,"The team has made changes to the code and made sure to respectively change the comments as well. However, in certain files, where the team has added methods, they've not given appropriate comments. For example in 'signup_sheet_controller.rb', the team has added many changes including some if-else blocks, but no comments were provided. Comments have been provided only on the top of every comment, that I assume was present before as well. They've made changes to that but did not add any new comments for the code they've written."
1,"The code does not include appropriate comments. Good comments are required for understanding the flow of the newly added code. However, the code lacks good comments."
0,The comments are decent and are added to all methods as it was one of the issue mentioned in the tasks.
0,All the methods that lie in the scope of this feature are well commented.
1,No the methods don't have comments which could have been added
1,"1. Documentation is fine and mentions everything they have done so far.
2. Though everything is clear, they should've mentioned reasons for whatever they did. (for e.g. issue :Refactor participants variable in load_add_signup_topic).
They could mention refactoring is done because of so and so reason."
1,"The write-up is very poorly written. It just highlights the solutions to the issues in one line which is not sufficient. No mention of any design principles or patterns is included. It is very hard to follow the changes you have made if the pull request was not shared. Please include more details about the changes you've made in every file (which method, which line, etc). Also mention the reason for doing the changes that have been made. If any design principles/patterns have been used, mention the reason why you thought this would have been the best solution."
0,"The writeup is well written and explains the need for project improvement, the problems and their respective solutions."
1,"The write up explains the description of the project. However, it lacks actual code snippets and the areas where the code change reflected. Also the list of team members is missing, The write up does not include the test plan as well."
1,"The writeup is descriptive of what issues were asked for and what is the resolution. It however, does not define the implementation technique, wherever applicable."
1,"While the wiki page mentions the solutions, it does not mention the reasons behind these particular solutions."
1,The explanation is very brief and could have been a little more elaborate.
1,Missing test plans on the writeup.
0,"Since code refactoring is the requirement, there is no need for new testing specs"
0,Since the task was to just refactor and they have not written any new methods or so. There is no need of writing new test cases.
1,There is no test plan in the write-up.
1,"- The write up has no section explaining the Test Plan
- As the project is based on refactoring, there should have been a complete run of tests indicating the tests worked properly before changes and another run after all changes indicating that the changes didn't impact any functionality"
1,"The write-up doesn't include a Test Plan section. Please include a section that gives details about the tests like different pre-conditions, edge cases, invalid input values, and other possibilities. The write-up consists of the problems and solutions but no description of how these solutions might work in different test scenarios."
0,The writeup is precise but it is very concise and can be a little more elaborative.
0,The write up content corresponding to the code changes made does not match up!
1,"1. They could've mentioned how the methods work. But since their job was to just refactor, they've done the documentation part very clearly.
2. Only thing I would like to suggest is that authors should think of adding some snapshots of the work, which helps the reader to better understand the changes made."
0,"The write up is not very detailed. Just reading through the wiki, it is difficult to understand the background of the feature or what functionalities are missing."
1,"- The write up is clear but not adequate enough
- The doc explains issues and what the team did to fix each, but doesn't explan the need for each fix
- The doc should indicate which principle was used for corresponding refactoring and what impact the change made"
1,"The write-up has been poorly written. In the write-up, it is written that only one file has been modified, however the pull request shows that many more files have been changed, some new files have also been added. The write-up just covers the problem statement and the solutions in one line per issue. Please add more description in the solutions that have been provided (for instance in which file the changes has been made, what changes were made, what effect does it bring, any specific constraints that were added, etc.)"
1,The write up could have been better. The team needs to add actual code snippets and screenshots as well as the test plan for the test cases. A video for the test cases can also be added.
1,"The document clearly mentions each issue and the solution provided to it. But, it does not include a test plan, or a reference text stating the strategy behind code changes, or the code snippets. Can be improved."
1,Yes the writeup is clear but it only mentions about the problem and the solutions and doesn't mention about the methods or why it is done.
0,Hard to test all the features. Tested a few and they worked fine without breaking.
0,Code seems to work fine on DRY run.
0,"Since the task was to refactor, there is not much to test. All the test cases passe, which indicates the code is running as expected."
0,The claims made by the author seem to be working fine. The refactoring of the sign up sheet controller reflects the changes and the functionalities are working as expected.
0,"Yes, the features are working as intended."
0,The code has been broken down nicely.
0,"signup_as_instructor_action can be broken into smaller functions.
HTML markup code is very well written."
0,"- Most of the functions are of appropriate length
- Code is not repeated, the repeated code is appropriately added to separate functions where required
- Some places the code doesn't follow ruby style guidlines as create / update can be directly called from routes rather than explicitly calling"
1,"1) 'def list' & 'def save_topic_deadlines' quite long. 'def get_status' is also long and has quite many nested if-else conditions.
2) According to me, in 'def get_status', 'return' should be a common statement instead of passing it in every if-else block.
3) There are several if-else blocks in the code. Please add more comments specifying what condition each if-else block covers. 
4) The code follows the Ruby Style Guide. The team has made commendable efforts in this area.
5) There is a lot of code duplication in 'signup_sheet_controller.rb' which could be refactored."
0,"The code refactored has functions with apt length. 
 
The code follows ruby code of conducts."
0,The code uses lots of naming from the old code which could have been refactored.
1,"The code coverage should not have reduced considering the changes were only of refactoring.
And The code is very short of comments and documentation"
1,"1. Seems they've changed a name for a method, then the TRAVIS CI failed and they again reverted back to the old name. This long route could've been skipped if they would've run Rspec locally before pushing the changes to git.
2. There are some more times where they've done the same thing. But that shows they've attempted to do some changes."
0,"Good work on the new code that's added. The rename of sign_up_sheet has had effects across the application, but the authors have taken effort in renaming it across. 
New changes for html.erb files is also well written and follows ruby patterns."
0,"- Descriptive variables and funcition names have been used to make the code more readable
- Naming made consistent across classes
-"
0,"The variables, methods and class names are all well defined. The team has done a good work while refactoring code. Not only have they done appropriate changes, they've also made sure to correct the changes in the comments."
0,The team has done a good job in renaming the methods and has added plenty of comments to old code.
0,No new variables or methods have been created as it was refactoring but methods have been merged so similarly named variables have been used but those used are proper.
1,"No new test cases neede, and no test plan mentioned in wiki"
1,No testing has been done
1,No test plan has been mentioned in the document.
0,"Authors have not added new tests or modified any of the existing ones. But all of the changes they mode don't cause any of the test case to fail.
And also the TRAVIS CI build passes on the last commit."
0,- New tests not required as no new methods were added
1,The automated cases are missing.
1,No test cases provided. Please add test cases and also deploy the app so I can test my own test cases.
1,"The author has not added any test plan in the write up. So it is difficult to decipher the authors test plan. However the pull request shows that the author has included test cases for the refactored code, which run successfully."
1,"No test cases added, existing test cases pass."
0,They have a good test plan.
0,"They have provided good visuals including use case diagrams, database designs and the relevant database tables."
0,The design appears to be simple and clear
0,Their approach appears to be very well designed
0,"Yes, the team has made great efforts in designing the approach and documenting it in the wiki."
0,"Yes, they have talked about automated and UI tests that they plan on doing."
0,"Yes, they included a use case diagram, DB ER diagram and the table relationships of the tables they would be touching."
0,"Yes, the design was simple and illustrative with steps to reproduce"
0,"Yes, the design was well thought out. They listed the use cases and edge cases as well and how their design takes them into consideration"
0,"Yes, the changes they plan on doing was well explained with files changes they proposed as well."
0,The design appears to be sound and the doc is very well explained. The project problem definition is well defined and clear definition of the proposed solution.
0,"It is simple to understand. All the problems to be solved are described in the proposed approach. The UML case diagram, database design, and test plan are helpful too."
0,"The UML diagram, database design are very well crafted."
0,The tests are really good. The team has done a good job in describing the tests per model.
0,"Yes, the test plan is there with covering all scenarios."
0,"Yes, Use case diagram and Db changes diagram are added."
0,"Yes, the design appears to be sound and simple to understand."
0,"Yes, very well explained."
0,The proposed solutions looks good and follows the design principles.
0,Yes the writeup is clearly written and sufficiently explain the changes and the solution
0,They have added all the details about the automated test and also regarding the manual test to be performed. it looks like they have covered testing all the functionalities.
0,"Yes, their design looks very simple and it is easy to follow and understand."
0,Test Plan section is detailed. Each test cases are given along with what to be tested.
0,The design has already been worked upon so it looks clear and simple to me.
0,The design they've chosen and are improving upon do look to encapsulate all the functionalities.
0,"> Yes the design does include the test plan.
> The test plan is in great details covering both the regular use cases and the corner cases."
0,"> Yes they have added a lot of visualizations which helps in understanding the proposed changes much better.
> They have also added representations for relevant tables which is very good."
0,"> Everything has been explained in great details.
> The use of multiple visualizations helps in understanding the changes very well."
0,UML diagram and database design diagram clears the concept of the design and changes authors are proposing.
0,"Yes, everything is explained clearly. Flowcharts and diagrams help you to read and understand the design nicely."
0,"Yes, authors have explained the changes and the methods and factors which will be involved in the changes. Some explanations about the working can be shared."
0,"Yes, the test plans are included in the design doc, and they described each test in detail."
0,"Yes, they have very detailed diagrams to describe their changes and functionalities."
0,Design do include test plans and manual test from UI
0,Visualizations are good part of this documentation.
1,"The proposed design is simple enough and easy to understand.
But at some point it seem too verbose. so team can work on that."
0,"Yes the design appear to be sound, following the appropriate principles and patterns."
0,Yes the author put efforts to describe the changes to be made.
0,Manual tests work.
0,The tests are automated.
1,"The functions are short, but not all of them are commented."
1,Not every function is commented.
0,"The variables, methods and class names suggest the functionality well."
0,The writeup does include a test plan.
0,The writeup is clear.
1,The VCL deployment link doesn't work.
1,"There are not comments for each method, however, many methods have inline documentation. A few methods had no comments, but great naming, such as 'create_radio'. The comments have very good descriptions."
1,"The build passes for the pull request, but the coverage has gone down -6.1%. Most names have been improved. This group did a good job of removing redundant information in method naming. I like how they made helper methods such as 'update_checkbox'. This method is named well, and helps me understand the code better. Before, there was more redundant, harder to read calls."
1,"There is not a test plan section, but there is a ""Testing"" section. This section shows that all the RSpec and Travis tests passed. However, it doesn't really show any of the code that was changed in this section. Changes to the RSpec code were shown in another section. I think it would be good to move it to this section. Since the authors just restricted the role to be a student for testing, they don't need to consider more edge cases."
0,Yes the features are working properly
0,The writeup is done excellently and doesn't seems to have any faults
0,Writeup is done very thoroughly and is self explanatory
1,"Over insertion of diagrams, table images are not needed as they represent current state, and not the state after change(if any)"
0,The test plans are described thoroughly.
0,"Yes, the design is simple and everything is mentioned in flow."
0,"Yes, the design appears good and helpful and they have used appropriate patterns."
0,"Yes, they have proposed changes of what they have made."
0,"Yes, the design include Test plan. The authors have thoroughly given test plan for automated as well as manual testing."
0,"Yes, the design seems to be simple. The search for User, Assignment, Questionnaire and Review seems good as the required search field are taken into consideration."
1,"The design appear to be good, few things to be noted here is, author could have used indexing to improve the search facility. The document doesn't talk about patterns."
0,UML diagram is self-explained.
0,Design is good.
0,The explanations are in detail.
0,"Yes, functionalities are incorporated."
0,The design doc is descriptive.
0,It would be good if they could add mock ui screens to show how the user interaction will be.
0,The design document is pretty verbose and clearly explain the requirement.
0,They have clearly defined all the changes needed.
0,They have designed the wiki keeping all the functionality in mind. The wiki page is pretty descriptive.
0,They have used the UML diagrams for explaining the design and how the interaction between the system takes place. The diagrams are really helpful and they also used the database design which makes it more clear. The UML diagram follows the convention.
1,The Refactoring changes made are not categorized by problem and the reason behind the changes made is documented at the end rather than before detailing the files changed. The team has included a test plan with detailed explanation and screenshots detailing the Rspec and Travis test build success as suggested in the previous review. There are case: e.g in Review mapping controller where even the wiki does not mention the variable names changed. This creates a big problem in transition.
1,The explanation for the changes through UI is really good but the changes proposed for the code are difficult to understand because they did not specify the part of code to be changed. They just specified the file names to be changed which does not give good clarity about the changes in code.
1,"The deployed version on Heroku does not work. However, pulling their github repo and rebuilding the expertiza into vcl, I was able to test the functionality. I would suggest the authors to update their heroku projet or setup a VCL instance."
0,The design document incorporates all the different functionalities involved in improving the search facility. They have covered all the possible functionalities of search which are searching for a user by different attributes etc.
0,"The project purpose, project design, and testing plan are included in the design doc. The only thing they could add is the code snippets which have to be changed."
0,"Yes, the build is passing."
1,No new commits were made despite having suggested to document the new changes in form of comments making it an easier transition for developers. e.g having a comment next to a new variable name as //previously old_var_name would make it easier for the developers by just searching the old_var_name without having to go through the wiki of a pull request. This becomes more necessary since several refactoring changes will be merged into beta and in master in an even shorter time period making it harder to go through wikis.
0,"1) Correct methods are being added to the correct class.
2) Well, their task is to make the current design which is smelly to make it not so. Based on what they propose, it looks like they might be able to do so.
3) The new designs don't look complicated.
4) The new design could increase the response time of the system.
5) Sufficient effort has been expended on the design."
0,The changes recommended are quite coherent. It was easy to follow.
0,"Yes, the design looks to have incorporated all the functionalities."
0,"The project purpose, design and test plans have been explained very well. Although some of the material is courtesy of the last year's team work but they have done good work identifying the changes and selecting just the required material."
0,the UML diagram is included only for instructor while students can also perform other functionalities.
0,"other characteristics as mentioned in the problem can be more specific
 
 the topics are properly highlighted"
1,"Log in to expertiza to view the home page

Type the search criteria in the available search criteria and select the appropriate field from the dropdown.
To perform search based on multiple filters, the user can tap on the Advanced Search button adjacent to the Search button, the view renders a hidden div containing textboxes for all the columns, allowing the user to search based on multiple columns.
All the entries that match the given criteria will be returned.

the above paragraph is incomplete wihtout step 2

An empty list is returned if the search criteria doesn't match any valid records in the database"
0,"> The design seems to have included all of the functionalities and very well detailed.
> Search by several criteria types have been included in the proposed changes."
0,"> The design document looks complete.
> All the essential sections like problem statement, change proposals, diagrams, test plans etc. have been included."
0,Yes the code is clean. All the method and variable names used are intuitive and clearly explains what their purpose in that block.
0,"The writeup is written well. They have covered all the required components and explained in easy to understand language. Also the code snippets which was inserted/modified to fix the bugs is mentioned. Also, they have included the flow diagram to explain the work flow."
1,"Though the coverage of the pull request has decreased, they have added test plan in their documentation. It also includes the Rspec tests perform."
0,"Yes, the build pass and the merge has no conflicts."
0,"The code is commented wherever possible, They have used good names for variables and methods,"
0,The write up is well written
0,The system works as it is supposed to.
0,There are commits after second round
0,The code is written well
0,"1) I think the code is ready to be deployed since the function works and code pass all checks
2) It is good for another group to pick up since they write it really good and writeup is comprehensive
3) There have been enough comment for the code so it should not be hard to follow"
0,"1) This refactor project could be test from UI
2) Everything works as the original one, the refactor is succeed"
1,"1) They have modified existing Rspec tests to fit their implementation
2) Since it is a refactor project, they did not 'add' any new test(I guess simply change existing ones would be enough)
3) The coverage is same since just change method names in existing tests."
0,"1) The pull request passed all checks
2) Travis CI passed and no conflict needs to be solved"
0,"1) They have been keep working on this project
2) They did commit a lot to pass Travis CI in 2nd round"
0,"1) There is absolute no bad names for variables and methods in this round
2) The method are all in healthy length and easy to catch up
3) Essential comments have been provided with the code
4) The code is DRY enough"
0,The writeup quality has significantly improved from the last round. The team has taken suggestions into account as well.
0,"Yes, it passed the Travis build in the last commit."
0,"Yes, tests were adjusted according to the refactoring changes are all of them were working."
1,Some methods like assign_quiz_dynamically are a bit too long and could be refactored by pushing the if-else conditions into a separate function.
1,"There are some methods like choose_case  in the AssignQuizController  class which do not have comments. However, I am not sure whether it is in their project scope to add comments for existing methods."
0,The team has paid close attention to coding guidelines while renaming the variable and classes. They have also documented the reason for renaming on github.
0,The writeup is pretty good and very well explains each refactoring change.
1,The code is readable and can be understood in a couple of glances. A few more comments would certainly be more helpful to follow the code
1,"Not all methods have comments. However, the names of the methods are self-explanatory and their function can be inferred in most of the cases"
0,Many names prior to refactoring were not suggestive of their functionality. The authors have done a good job renaming them and making them more meaningful
0,"Yes, they have given exhaustive explanations for all the changes they have made and what led them to make those changes. However, in some cases"
1,"The writeup is exhaustive. However, it doesn't include a Test Plan section"
1,"the application hasn't been deployed
Heroku | Welcome to your new app!

Refer to the documentation if you need help deploying."
1,test plan was not included in the wiki page
1,"some variable_names are too descriptive to a extent that is not necessary ,
participants_with_min_assigned_reviews
the above variable can comfortably skip words like with."
1,"comments are mostly descriptive



 


 selected_participants.each {|index| ReviewResponseMap.where(reviewee_id: team.id, reviewer_id: index, reviewed_object_id: assignment_id).first_or_create }


 
 
 



however the above line may require comment to completely comprehend"
0,"yes, the write up comprehensively specifies the changes made and the impact of them"
1,"yes!
However the write up misses to include the location of code, nor is the code pasted in the wiki page."
0,"Yes, the authors feature does work as intended."
1,"No Test Plan has been defined.
The authors have not created few new automated tests for the newly added functions and not in all places required. 
Manual testing instructions are not present."
1,"(1) Long methods can be broken down. In some cases, methods could have been extracted from existing long methods. Such as in case for peer_review_strategy function & assign_reviewers_for_team
(2) Code has not been extracted to separate methods appropriately (as in case of create method)
(3) Comments have been added in some places but when new functions are created, more comments are required to make following the code easier
(4) The code does follow the Ruby Style Guide.
(5) Code is DRY & does not have any smells apart from Long methods at some places and"
1,"The write up does not include a Test Plan.
 
 
The write up does include a very well detailed test plan.
Test Plan shows how automated testing passes all the existing test cases as well as how manual testing for the team's feature implementation can be done.
 
No newly added test cases exist for the new code written by the team. New RSpec test cases can be written to test the newly added functions."
0,"The write up explains in detail, the functionality of the work done by the team.
This being refactoring project, the authors have provided sufficient details of what the problem was with the code previously and what they have done to improve it. I can clearly understand how & what the project does from reading the writeup.
Write up includes the changes made as well as the files those changes are made in."
1,- Test plan not included for refactoring project
0,- Yes each method is appropriately commented explaining the feature
1,- The test coverage hs descreased as code has been refactored to include in private methods which aren't tested
0,"- The writeup is properly written and explanation is provided for each change
- The required changes are properly mentioned and the reasons for each change are properly stated"
0,- Write up clearly and concisely writtent which adequately indicates the functionality
0,The code is ready to be merged and no changes are required.
0,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan and flowchart of expected behaviour. The proposed changes are attested with code snippets that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. The good point is that they have also mentioned the details as to why did that issue crop up which is a good documentation methodology."
0,The system works as it is intended to work. The tests which are mentioned in the documentation is working as expected. The bugs that were already present are resolved .
0,The build passed and there are no conflicts that needs to be resolved.
0,Commits were done in during the second round based upon the feedback given in the first round
0,The code is written keeping in mind all the coding practised and following Ruby norms and conventions. No problems were found in the previous round as the code was already DRYed and following the norms
1,"I think it can be deployed, the functionalities worked well, just theres no rspec test cases for it."
0,The writeup is very detailed. They have everything covered.
0,They worked as intended.
1,They didn't add test cases.
0,"Yes, it passed all test and have no conflicts."
0,There's two modifications.
0,The code is clear and DRY.
0,The write-up has been written coherently and it is easy to understand their work with the presence of flow charts and code snippets. The authors have improved upon the test plan section also.
0,UI has been tested and the code works as intended.
1,"The team has not added any test cases to the Expertiza project.
The code coverage has decreased marginally. 
The team could have added simple Capybara test cases to check for the redirection (test plan 1) and to check for UI elements (as a simple test case) in instructor's editing others' rubric (test plan 2)."
0,All the builds in Travis CI pass. There are no merge conflicts in the code that need to be resolved.
0,The code commits to the project happened regularly. Development and bug fixes occurred throughout the project duration.
0,Code was neatly written and it follows the DRY principles of Ruby. There are good and descriptive comments in the code to explain their changes and the newly added functionality.
0,Yes it does
0,There are tests for the student model and controller. The model does a good job of making sure that each field for a student is present before the model is saved. The controller tests are even more thorough and complex enough to the point of checking that students cannot edit each other's information. Well done!
1,Not sure. The test coverage has decrease.
0,Elaborate and very clear.
0,Works from UI perspective.
0,Student model and controller has been checked using rspec
1,The code does not violate coding guidelines. But i can see there is dead code which adds unnecessary clutter in the file.
0,"Yes, the team has thoroughly tested the student model and controller and have written ample amount of tests to check if the controller does what it should."
0,Didn't find any while going through their code.
0,Yes the code can be improved and be merged into the main product.
0,The write up is very easy to read and great.
0,Yes it does work.
0,Yes it passed the Travis CI
0,They have thoroughly tested one model and one controller.
0,Added comments on the code
1,Yes they have tested one model and controller however more use cases could have been added. Like a library belonging to only one university.
0,IT followed most of the principles.
1,"Apart from the testing plan section, the documentation is well-written and improvised from the previous rounds . 
The documentation in the previous was lacking description on test strategy and it was not improvised in this version as well . 
The Testing section in the documentation does not mention anything about the test plan. Also, no tests corresponding to the lines of code added are written which makes it difficult to test the accuracy of code when it goes into production. Suggestion: Testing should have been incorporated so that each line  written is well backed with tests."
1,"The project is not ready to be deployed. My biggest concern is the checkbox functionality needs to be fixed before any other work is done .  Also, the second issue is not addressed properly as I can see only the issue where the instructor can make amendments to adding an assignment to nil course is implemented as well when the dropdown for the users to see only accessible content.But the function where TA can change the course of the assignment is not yet implemented . So this can effectively be good starting point for a future team to pick up . 
Additionally good commenting will surely help the future teams ."
0,"Yes write up very well written, they explained the problem, mentioned the design, how they solved it, step by step documentation, testing screenshots. they have explained it really well. Good job to team."
1,"unused lines can be removed , not commented out
# ta_ids = []
      # ta_ids << Instructor.get_my_tas(session[:user].id)
      # ta_ids.flatten!
      # ta_ids.each do |ta_id|
      #   ta = Ta.find(ta_id)
      #   ta.ta_mappings.each {|mapping| courses << Course.find(mapping.course_id) }
      # end"
1,"yes the given pull requests have passed on Travis CI.
But the test coverage has reduced"
1,"the problem statement can be improved. 
And explanation for testing the project can also be included in the wiki page"
0,"Yes, In test plan session team has clearly defined the steps that reviewer can take to test the issue they fixed. I have done the manual testing on UI and they have resolved the navigation issue. Even in review 1 also this team has done a good job, the only thing was of test plan which is also resolved now."
1,"The code seems to be written well.
Comments can be more descriptive and logical"
1,Yes the pull requests did pass the travis ci test. But its confusing to decide whether its correct because the team has submitted two separate pull requests. And both pass independently. That means we cannot say just yet that it works fine on integration.
0,Yes teams build has passed on travis CI! They have no merging conflicts. They had build issues but they have resolved it.
0,Yes team has made commits every other day after the review 1.
0,No new test cases have been added.
1,"Code looks good, Code is DRY, they have found out good way to solve the problem, Comments can be improved on the code. Rest all is good."
1,"I don't think the project needs to be completely redone. However, there seems to be a bug where you cannot change your preference on the profile page for where assignment actions show up. Seeing as this was the main point of the project, this needs to first be fixed."
1,"The code seems fine and the build is also passing, however, no tests were added hence, cannot be merged. 
Yes, this is a good point to start for the next team as all features are working and just testing part remains."
1,"The testing part does not include any unit testing plan
Also, no video provided for demonstration and testing (anyway not done)."
1,"The code looks fine as it follows Ruby principles. However, in order to merge the code they should have provided all the required test cases."
0,"Task1: Redirection to questionnaire/courses/assignments is working as expected.
Task2: Working as expected, instructor6 cannot edit questionnaires created by others."
1,The writeup is written well but does not provide details on how to test the UI. It was hard to check the working of their project.
1,No new test cases were added and test plan only talks about UI testing and no unit tests.
0,They have submitted links to two pull requests. Thus. I checked the later one and yes they have few commits
1,"Yes, however they need more test and a detailed test plan"
1,"All tests are passing.
No tests were added and hence, there is a warning indicating that they should be added."
1,"yes, the system operation is workable, and the feature work as they supposed, however their test plan is not clear, only passed all the travis test is no sufficient to prove the system is reliable."
0,"Yes, commits were made during the second round."
1,Coverage decreased (-13.7%) to 16.818% when pulling 6b6710f on sj94123:beta2 into 28eb0da on expertiza:beta.
1,"No comments have been added.
Some variables are named in shorthand, like rubBuffer should be rubricBuffer."
1,"The good thing is they have the explain in all the code, and there is no bad names or lack of comments.
One of the module - assignmentHelper is still a long method,"
0,"The major functionalities seem to be here for creating books, checking them out, book marking them, etc. I couldn't find any failing functionality. The UI is helpful since it displays the limits each use has for checkout books. I could not find any missing functionality."
1,"Since the code is lack of testing, it is better to have testing cases before deploy"
0,I think code is good enough to be merged as authors have used better variable names explained all functions properly in comments. And also looks fairly decoupled code which can be easily reused.If these are the qualities you look for production ready code then you should merge this.
1,"For the wiki writeup, it is very hard to find the differences between before and after of the long list of code by human eyes, which is not very reader friendly"
1,"Yes, the authors have improved significantly like adding test plan, also better language of explaining things concerning the issues they solved.
But still, they didn't made screencast for issue 2."
0,"Yes, the authors have followed the coding principles successfully. they have included comments and written rspec tests. However, There are certain concerns I have regarding the deletion of certain fields in schema and several other redundant changes. while the redundant changes would certainly not damage repo, The changes made in schema require a more careful scrutiny."
0,Yes project works.
0,"The write-up details all important aspects of the project.The problems with structuring have been resolved. However, the images in the wiki are misaligned and have different zoom levels making it harder to review. I would suggest adding a flowchart to the wiki documentation to assist the review process."
1,"There are some commented redundant code, which could be deleted"
1,"No, the test cases haven't been added and the test coverage was decreased."
0,"Yes, Since the check is made in the controller, even logging the url request and re-sending it again does not result in edge case."
0,"Yes, the Travis build CI has passed and there are no conflicts to resolve."
0,"Yes, the Commits have been added."
1,The coverage has decreased by approximately 3%. The team has added the test cases in the late_policy_spec.rb checking if violation of policy does not allow creation of late policy and that if the policy is in accordance it allows creation.
1,"The code seems to work, but there is no clear instruction how to get to the UI testing page. I believe they have the same wiki issue in the first round but it is still. Sorry that I am not sure how to test this function. So 3 marks for your coding work."
0,"Yes from the first round code is fairly improved. As per my criticism from the previous round that they didn't provide comments which they rectified in this round. Also, variable name are also good enough."
1,The build has passed Travis CI. no conflicts. But coverage decreased.
1,There are commits during the 2nd round. But the git repo has 2 beta branches and they also pushed code to master. not a good idea.
0,The code passes the travis build and coverage is at 27.125%.
0,There are a few commits with regard to adding comments as mentioned in previous review.
0,"redundunt changes:
app/controllers/late_policies_controller.rb 
app/views/assignments/edit/_late_policy.html.erb
app/views/late_policies/index.html.erb
app/views/late_policies/index.html.erb : Changes made are redundunt and create unnecessary
review delay db/schema.rb : [DANGER] Field Feedback is removed
                                             : Certain changes made are redundunt"
0,"The code functions correctly under the constrained steps in the use case.
Concern: However, if anyone were to create a new late policy without first visiting any assignment, the code will break on clicking the ""back"" link from the new late_policy page.
This can be solved with a quick fix from the team or can be taken up as a bug in the future by later teams. As of right now, apart from URL injection to reach this particular case, the code works just fine. Can be merged after code inspection."
1,"I don't think the code is ready to be deployed to production server. I think I have already mentioned the issue in last round where the array was hardcoded. Moreover, it seems the tabs numbering are stored in session, the code could utilize something like localstorage instead of sessions."
0,"The DB design looks good, foreign keys are stored properly as integers. There are also tables for concepts such as requests and bookmarks. This is good practice as compared to storing those fields on the book."
1,"In  module helper,
# ta_ids = []
      # ta_ids << Instructor.get_my_tas(session[:user].id)
      # ta_ids.flatten!
      # ta_ids.each do |ta_id|
      #   ta = Ta.find(ta_id)
      #   ta.ta_mappings.each {|mapping| courses << Course.find(mapping.course_id) }
      # end
 
The unused and modified code like the one above should be removed"
1,"The code works as expected. Following the steps and the documentation, the Expertiza project works perfectly.
However, if you were to do this: 
1. Login as Instrcutor6.
2. Do not go to any assignment. Stay on the home page or manage page.
3. Directly go to  /late_policies/new by manually entering the link, and then click back.
Result: it would throw a RecordNotFound error since the 'back' link is hardcoded to go to the last assignment_id's page."
1,"comments added in assignment helper module , describe the functionalities implemented. 
But the code in the view file, has no comments added to it."
0,The team has used library id as a foreign key to library in the books table to achieve the 1-to-n mapping. Libraries to universities also is a similar mapping.
0,All builds passed in Travis CI and there are no merge conflicts in the code.
0,The latest commit was made on 1st Nov 2019. Development and Bug fixes were continuously done throughout the project duration.
0,"Writeup seems good. The team has taken great time to explain the Issues, Functionality, Process, Test-Plan and code snippet. They missed the test plan on 1st round but have included it in second round."
0,The code was neatly written and follows DRY principle in Ruby. The team has done a good job here.
0,The code is ready to be deployed to production.
0,"In the first review, I pointed out saying there were no navigations provided in the documentation. The team came up with a very good writeup this time."
0,"Genuinely happy this team read the suggestions i made on peculiar edge case that i mentioned in the first review. In first review, there was problem where, while creating a policy, if I enter max penality as 'a', it gives error message as
The maximum penalty cannot be less than penalty per unit.
but not that it is not a number. Now the team has corrected it to show the error as
'Max penalty is not a number'
 
The UI and features work as intended."
0,They have handled 1-to-n and n-to-n relationships properly.
0,"Yes, the team added well written test cases and coverage increased."
0,"yes, the system handles the 1-to-n and n-n relationships properly. The library-book relation is 1-n, The university-library relation is 1-n, The university-student relation is 1-n, The library-librarian relation is 1-n"
1,"Since the project mostly focuses on UI part, the team has not added test cases. However, they have written the test plan on wiki page. Coverage seem to be decreased in the CI build by -13.7 %."
0,No conflicts. Travis CI build passed.
0,"No commits in the second round, after November 1st. Not sure if the team has took all the suggestions and implemented them on the same day as the deadline for the first reviews, which is November 1st."
0,"Yes, the Travis CI seems to be passed. The branch did not have any conflict with the base branch."
0,I see corrections being made based on suggestions. Everything is well written.
1,"Relationships between tables have been taken care of. They have given the feature of linking a book to one single library only which takes care of 1 to n relationship. 
However for cases when same title books needs to be added to multiple libraries then multiple copies of it will be needed to create."
0,"I think the additions/ fixes done might be working mostly. My only concern is that it should be tested once since I could not do so, as the credentials are wrong and have not been updated by the team correctly in the wiki file.
And I don't really think that the project should be redone since most of the cases have been covered by the team and I can vouch for the working by looking at the screenshots and explanations in their document."
1,"I think the code is well-written. Naming convention were good. However, the feedback given in round 1 were not addressed in this round."
0,"I think that the write-up has been written in a systematic and proper manner covering most of the stuff.
Moreover, some things that were told to be added like for eg. test plan has not only been added to the wiki doc but also has been explained illustratively with the help of screenshots which make it easier for the reviewer to visualize rather than just simply putting the code changes made as of last time.\
I only felt that the login credentials should have been updated correctly in the wiki doc."
0,"I think that the team or someone else just changed the login credentials which is why I was not able to login as instructor. It got redirected towards forgot password and asked me to enter my email address for password changing.
In order to avoid any consequences, I did not change the password and thus could not test the project from the UI."
0,"The team has pretty much covered most of the test cases as seen in the Rspec test file.
Moreover, I think there is an improvement in the test coverage which now has become 27.125%"
0,I think that the build passed successfully in Travis CI and there was no problem that was detected.
1,"Looking back, I'm not sure what problem 2 is trying to fix. But, as an instructor, I cannot add any course to an assignment that I don't own.
As for the profile settings, I get an error when I try to look at my profile:
undefined method `preference_home_flag' for #<User:0x0000001287e8c8>"
0,"Yeah I could see commits done during the second round of submissions however not many were done since maybe most of the task was already committed during the first round.
Also the commit names have been given correctly which according to me is a good practice so good work on that. :)"
0,"Not only did the team push throughout the entire project, they showed exemplary version-control practice by using merge requests. They committed before and during round 2."
1,"Based on the code that I can see on the wiki, this seems fine except for the lack of comments."
0,The team has been highly active in pushing their changes continuously.
0,The code is working well even in edge cases.
0,There are no comments that I can see.
0,"Based on the test cases I tried, the code is ready to be deployed. The team has made sure to include edge cases in the implementation and also included them in the write-up."
1,"From what I could tell, the code looked all right. However, it's difficult to tell since some of the changes are made to master, some are made to beta, and some don't change anything at all. The same line has seemingly been erased and re-written.
Also, the pull request isn't made from this project to the main repo."
0,"Yes, the team kept on pushing their changes throughout rounds 1 and 2 which is evident by their 200+ no. of commits."
0,"The write-up is well written. Good work on that. The team had given details of the problems, solutions, its explanation as well as a detailed Test Plan."
1,There are no test cases present.
1,I can very easily understand the problems from this write-up. I think what's missing is a full description of the solutions and how they are implemented. I appreciate the inclusion of the relevant code but wish it was fully explained in the context of the assignment.
0,The code works as intended. The team has done good work and have solved the problems stated in the first review. Great work.
1,"As I said, I'm unsure what problem 2 aims to fix. I'm also a little shaky on what the user is supposed to be able to change in their profile and was this setting is supposed to do.
Also, I wish the code was better explained."
0,"Yes, the team was submitting their changes throughout the project. They committed changes in round 2 as well."
0,"Yes, the team has added new test cases. The coverage has decreased but it has decreased by a very small number so it's okay."
0,The names are descriptive enough to omit the need for comments which is a better way than by using comments.
1,"The variables and methods are according the conventions and the code follows 
The code needs to be cleaned up so that optimized and refactored code goes into the production server eg line 14-18 in profile_controller.rb, line 9 in assignment_helper.rb."
0,The variables and methods are according the conventions and the code follows the community standards. All the names are suggestive of the functionality that it performs.
1,There is no test plan as of now that is available or written
0,No new test cases are created.
1,"1) The length is good but the cource_optoins can be broken down in smaller functions.
2) Looks good
3) I feel that that more comments needs to added
4) The ruby style guide is not folllowed at some places.
5) No"
0,"No, I have to look at the code how it is working the options = ['--------', nil] is a strange value, have to look at the coed to understand what it does"
1,No the build failed. There are some code climate issues.
0,"Yes, the build passes Travis CI."
1,No new test cases added for the code change. They can add images of the before and after ui changes that way it would be easier for a new person to follow what needs to be changed.
0,"Yes, new commits were made during the second round but now new code was committed, only test cases or comments were added."
0,I couldn't find any bad names or long/complicated functions. Comment have been appropriately added. The team has made sure to follow good Ruby coding standards and the code follows the DRY principle.
1,There is a decrease in the coverage so more rigorous testing can help in increasing it.
0,No comments.
1,"preference_edit_flag and preference_home_flag aren't that intuitive. Perhaps something like ""actions_on_edit_page_flag""?"
0,The writeup is well documented and it is understandable.
1,"Markup made sense, but it could have been useful if some details were given to explain the code changes."
0,Yes it does work as intended.
0,"No link of pull request is mentioned thus, I can't review"
0,"Yes they did add the test cases!, however the coverage did decrease."
0,The code structure is good and easy to understand. One method handles one functionality.
0,Yes it did pass the Travis CI
0,The commits were not made but i feel they achieved whatever was required before only
0,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan. The proposed changes are attested with code snippets, screen casts and flow diagrams that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. The good part is that they have also mentioned about the reasons behind the error which shows clarity of thought process."
0,It followed fundamental code writing rules.
0,"Code quality appears to be fine.
> Methods haven't been cluttered with loads of tasks and are specific to the one they are supposed to perform.
> Naming conventions have been taken care of and the code readability is good.
> Methods are usually short and properly commented."
1,My biggest concern is that no tests have been added. This should be done first to ensure functionality is correct.
1,The problems I found with the writeup last time have not been fixed.
1,"The wiki explained the response, what is the issue and what i wrong, but there is less information about video and test."
0,Good through
0,"Yes, the code looks clean and it is ready to be deployed onto the production server. The only suggestion is to add appropriate comments for the code written."
1,"The first issue was settle perfectly, but the second one still exist. The requirement want to show edit button only when the rubric belongs to the current user. Now, the button is there for every rubric."
0,"I am impressed with the writeup, it includes all the details required for a reviewer. The writers have improved the write-up and they added more screenshots that are easy to follow. Please add the code snippets in your writeup so that it easy to go through the code added."
1,"They don't have test plan in document, and there's no new test cases in repo."
0,"Yes, the UI works as intended and the error messages are appropriate. There is no need for refactoring the code, the code looks good. The feature works as supposed."
1,"They did good just no comment on the method, it's not easy to understand without check the wiki."
1,"1. The writeup is lacking in terms of explanation of how to test the functionality thoroughly.
2. At least half of code changes are explained.
3. Explanation of reasons for the style of code and problem solving approach is lacking."
0,"The team added all the test cases and different scenarios were explained and screenshots of them have been used to explain it in a better manner. Yes, the coverage increased for the case they added. According to me, the newly added test cases cover the full range of the project. Just an add on[not important] but you could add a case where the penalty per unit and maximum penalty are the same because in the real scenarios that do not make sense when we have the option of selecting hours or days."
1,"There's one new method, but I don't see comment on that."
0,The names are easy to understand.
0,Yes the Travis CI build passes. There are no conflicts that must be resolved.
1,"There is no test plan on both the wiki page and Github. 
Please add the Rspec test and convert them to automated tests."
1,Their test failed on github check.
1,"Just same as the above said, I do not see any tests written in the rspec file folder"
0,The last commit was made on November 1st. There was no new code committed during the 2nd round.
1,I don't see they mentioned test in the document.
0,It's well organized and in detail.
1,"Yes, the writeup is clear and adequte. But I think the second part didn't finished, I don't see the change on views, regarding the requirement."
0,Functionalities are well mentioned in the README file.
0,"The first scenario to render the correct view as directed (fixed stored ""manage content ... "" issue) by going to the manage content and selecting an option that differs from the one stored as manage content - is working as expected. Checked multiple times and also checked that the URL changes accordingly. 
The second issue has been tested manually and the page doesn't show editing features for the rubric that doesn't belong to the instructor. Cases also checked - changed the URL to try and edit a rubric not belonging to the instructor - worked as expected."
0,Seems like book model and controller has been tested thoroughly
1,"Though there are flow chart diagrams to explain the expected workflow in the project, there ain't any explicitly mentioned test plan and there are no spec files modified to run the tests. However, this can be modified in the next iteration of the project."
1,No test plan and it's related test cases were converted.
1,"There are original comments for the functionality already present in the files. However, there are no comments to explain the changes made in the code. The team can add comments, especially in the tree_display.jsx file for the one-liner changes and block code added in the file. Comments can also be added to the tree_display_controller.rb file in the ""action_allowed?"" and ""confirm"" functions to explain the minor changes made throughout."
1,The code looks good and it follows the ruby coding principles. The code had no flaws and there was no need to improve the code. They could have added meaningful comments for the code which was not done.
1,"Though the test plan section is absent, the documentation provides a complete flowchart as to how the correct code should work and what is expected of it. It would be better if the team were to explicitly state that in a new test and test plan section. This can be implemented in the next iteration of the project."
1,"The workflow is documented properly and though there are a few missing sections the overall flow is understandable. The purpose has been explained clearly and there are a good amount of graphs to explain the project use cases. The major and minor fixes done for the project are explained well with the help of code snippets. There's also a screencast of one of the fixed bugs.
The team can improve upon the wiki documentation by adding the test plan explicitly and adding the screen recording for the second bugfix (task 2: Instructors can make changes to each others’ rubrics )."
1,"The write up has been carefully written and it is structured well enough to get a good grasp of the project. The flow chart diagrams definitely make it easier to understand how the code is expected to work and the accompanying code snippets help in understanding the changes made to the code base. Lack of a test plan section is one thing that can definitely be fixed by the team in the next iteration. Overall, from the introduction to the major/minor bug fixes description has been neatly laid down."
1,No comments are available.
0,Pretty Clear
0,"Definitely, this code is ready to be deployed."
0,The write up was extremely detailed and very informative. No information was missing from it.
0,Functions are small and are written for what they are intended to do.
0,The webapp works how it was intended to work
0,The class and variables are named relevantly and are semantically correct.
0,Test cases were added and code coverage was increased.
0,Yes the build was passed
0,"Yes, new commits were added."
0,The code was written very well.
1,Didn't find a lot of comments.
1,There is no mention about the tests at all from the team's side.
0,I think it is ready to be deployed.
0,Really good. Good job!
1,I didn't find any test plan on the wiki page.
0,"Yes, they did. But the coverage decreased."
0,Yes it did.
0,"Yes, in that sense code is very elaborative along with diagrams to support."
1,Looks good  to me.
0,It is clear in terms of explanation.
1,"I think more comments need to be added. I saw they add comments for tests and views they changed. I think they still need more comments for their controller changes. As they added a new controller for late policy, so they may need to add comments about it."
0,"The writeup is well-organized. The test plan is much more specific than before. I just follow flow of the test plan, and I can easily find out what the function they have finished."
0,"Yes, the project works well. And adding new policy and ""back"" link works as they supposed to. New policy can be created correctly according to the fields input. And clicking on ""back"" link can be directed to right page."
0,Yes the features work as intended.
0,"They added test cases for all cases. And they even post the screenshot of all Rspec tests' result. Although the coverage didn't increase, I think the newly added test already cover most range of this project."
1,The test plan section is missing and Manual testing of one task is done instead of the automated testing even with the UI.
0,"Yes, the build pass in Travis CI, and there isn't any conflict that need to be resolved."
0,Yes there are sufficient comments!
1,The test plan is not mentioned and only one ui testing is done that too manual clicking based.
0,"Yes, they committed new code during the 2nd round. And they created the right pull request this round. Great."
0,Everything is well explained and very easy to follow.
1,Yup the write up is easy to understand but missing the test plan
1,No problem. The code seem dry and easy to understand. The only thing they need is to add some comments for all their changes.
0,The authors have implemented all the Test cases mentioned in the Test Plan in their respective Rspec files.
1,"The new functionality implementation is done using if condition in the same method. this is not in accordance to ruby principles. This also makes it harder for your changes to be merged into the final project. Also there are no comments for the changes made. 
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
1,"Build failed, and there's no test plan section in wiki"
1,"The authors have implemented the new functionality using if condition in the same method. this is not in accordance to ruby principles. Also there are no comments for the changes made. 
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
1,"app/controllers/late_policies_controller.rb : The variable name change from penalty_policy to penalty_policyx is unnecessary and confusing: need to refactor
app/views/late_policies/index.html.erb : Changes made are redundunt and create unnecessary review delay
db/schema.rb : [DANGER] Field Feedback is removed
                      : Certain changes made are redundunt
spec/models/late_policy_spec.rb : Comments needed"
1,"There's no test plan section, thought there's a video walk through of what it looks like after the bug fix"
0,The test plan section of the documentation is organized properly with subsections for each problems and further bullet points for the checks made.
1,"The reasons of implementations on bug fixes are clear, yet there isn't any mentioning of any design patterns"
1,The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes.The code embedded using pre tag in the expertiza wiki runs over the page and is not visible. I would also suggest splitting the Solutions to problems into 2 sections: 1st one detailing your proposed implementation and the 2nd section detailing Code changes.
0,"The wiki write up covers issues assigned to this team, and detailed documented the steps it took them to fix these issues"
1,"The write-up details all important aspects of the project. however, there are certain problems with structuring. The Code snippets are flowing out of screen. I would suggest adding a flowchart to the wiki documentation to assist the review process. Also the code coverage section is empty."
1,"The naming of the variable and the methods is great, partily because the code uses a lot of variables which already have. And there is a glitch, if the  validates_format_of   is validates_url_format will be better I think.
The code  validates_format_of :url, :multiline => true, :with => /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/ should have same comment."
0,"The code works properly and has been tested locally. Cases tested include blank policy creation, back buttons functionality."
0,"yes i have reproduced the issue and then also checked after the change, issue does not exist now."
0,All test cases have been addressed.
0,Code follows all the Ruby conventions and functions are properly modularised. The code is DRY and everything seems to be in order.
1,"1. I cannot even find the pull request for this project #1939. (this team did not give the link of the pull request and I have looked all the 84 pull requests)
2. The writeup is lacking in terms of explanation of how to test the functionality thoroughly. Since there's no code part on the wiki page, I tried to go find on their Github, but they did not change many lines of codes and I did not find any comment.
3. Explanation of reasons for the style of code and problem-solving approach is lacking."
1,There are a couple of comments but they are sparse. There can be comments in the LatePolicyController.rb and test cases for the controller so that it is more readable and easier to understand.
1,Team has not tested the code
0,All method names are intuitive.
1,"methods are not long and they are DRY, Comments are needed in the methods, otherwose its hard to follow."
1,"Test plan has been written and it documents the steps to create a new late policy and how the back condition works. However, the team can discuss the edge cases and what they can test further. These changes can be made in the next iteration of the project."
1,"The wiki page is coherent and well written. However, the Code Coverage section is left empty and there can be a screengrab/recording of their working implementation to make the page more intuitive. These changes can be made in the next iteration of the project."
1,No team has not commented the code so it s hard to follow the process they have decoded to solve the bug and how it is working
1,"Write up is well written. As per the comments on question 1, screengrab/screen recording can be added and Code Coverage can be filled up."
1,Code looks dry tp me but the name of variables could be improved. Since this was bug fix so team has used pre existing variables and not refactored the code and use more meaningful name for variables.
1,"Policy validations are all working well. Able to create policies.
One edge case I found is, while creating policies, if I put 'a' in maximum penalty, it says
The maximum penalty cannot be less than penalty per unit.
It must say, 'maximum penalty must be a number' right. Just a minor correction required."
1,No they have no created any test plan. Team can test the existing test cases and make new test cases to test the methods which they have creates.
1,"Team has done very good explanation in write up in in telling about the bug, they also gave information about how to reproduce the bug and after their change bug was fixed, team could have done better explanation about the approach to solve the bug."
1,"I really liked the write up by team in how they have showed how to reproduce the issue and explained in greater detail, gave many other project details too. Just team should write test cases."
1,"No tests cases written, no test plan mentioned in the document."
0,The code seems fine. Good coding practices have been followed. Methods are concise and handle single functionalities.
1,No comments have been added but doesn't seem like the change requires many comments.
1,"Most variables seem fine.
Can look into renaming variables like selMenuItem to selectMenuItem, selMenuItemInd tp selectMenuItemIndex, rubBuffer to rubricBuffer."
1,No test plan provided
0,The problems and the teams approach to solve the issues has been well documented.
1,"The documentation is fairly complete and explains what, why and how it's done.
Test plan can be added to make it complete."
1,The tests have failed and the test coverage is also decreased. Looks like new methods have been added. Most of the methods use the existing variables so it is according to the ruby standards. Method names are proper in sync with the existing code.
0,Yes the feature work as intended.
1,no test added
1,"1)code is short and concise.
2)code is decoupled
3)comments not given on any if conditions and variable names are not self-explanatory."
1,Comments are not provided for the method.
1,"The code overall looks concise but variable name ""rubbuffer"" is not self explanotary.Also variable name ""selMenuItem"" also not self explanotary."
1,Test plan is not included.
1,"Overall writeup is good but while explaning the ui glitch/ui path error that authors have solved could be explained with more accuracy as there is ui path problem explaining problem with bullets like how to go to that specific page and what will happen would be more helpful.
As current explanation in sentences which is more verbose and confusing. Like the said if you are on assignment tab but how to go to the assignment tab."
1,the writeup is well written but there is no screencast for 2nd task. also as said earlier bullet point approach for explaining ui path would be more helpful.
1,"(1) some of the functions are too long; 
(2) more comments are needed, because you have trouble following the code; 
(3) the code does not follow the Ruby Style Guide.
(4) some code is not DRY."
1,"1. function is well and do not need to be separated.
2. more comments are needed to make others understand easier."
0,"Yes the feature works as intended. When I was change from courses to Assignments and click on Manage content again, the page landed back in Assignments."
1,I was't able to see any Test plan or automated test. Test should be written for app/controllers/tree_display_controller.rb and modified for other ruby files
1,"The changes made doesn't have the comments which is making it difficult to follow why a change has been done.
There is no mention about the issue number they are fixing above the changes which can make it easy for the reviewers.
Since most of the changes use existing variables and methods, there is nothing to point out."
1,The build is failing after latest commit.
0,"1. All the functions are adequate
2. No, the length of methods are fine.
3. Adequate information provided on wiki page
4. The code follows the ruby guidelines.
5. All code looks good"
1,"This code can only get merged after merge conflicts are resolved. Also, they have fixed one issue but could not get it approved due to dependencies on the Servo team's side."
0,"The team has made changes in multiple files where they need not create a new method, hence no comments there. The wiki pretty much explains what they have done and how they have done it."
1,"- The code has merge conflict. They didn't follow a basic principle of git. Always pull before making a push. They should have checked this conflict in their own repo before pushing to remote.
- This is also causing the build to fail and is very important they look into these issues before merging."
0,"The variables used in all files like app/assets/javascripts/tree_display.jsx, app/controllers/tree_display_controller.rb, app/models/questionnaire_node.rb, app/views/tree_display/list.html.erb are good. The code clearly depicts what it is doing.  I didn't find anything where names doesn't suggest the functionality."
0,"According to me, the code looks good enough to get merged. Once the Mozilla team approves their testcase changes, their changes can be merged into the OSS project."
1,"Code not ready for deployment, unable to merge the code"
1,The document explains how to test the feature but I couldn't find the test case as such.
1,"1) The function of the framework works and the code is DRY
2) Essential comments have been provided for another team to pick up
3) The test after create pull request did not pass and says there are existing conflicts"
1,"Yes, the writeup explains the details about what team has been working on. I don't think they have mentioned about design pattern. Other things are pretty clear. The only thing missing would be test case for app/controllers/tree_display_controller.rb"
0,Code write up is clean and easy to follow.
0,"Yes, the write up seems pretty clear. I was able to login and check the functionality with help of wiki page. The Flow chart help me understand what should I do."
0,wiki page is very well written. They have explained the proposed changes and why did they chose that approach.
0,The write up is pretty detailed with screenshots and code snippets.
0,"- The writeup is much better now. They have added enough information for reviewers to understand. They also explained the reason for not doing things like adding comments etc.
- They included screenshots now which is good and a good addition."
0,The write-up is very well written with Github code diffs shown for code snippets which provide for easily readable code. They have also neatly addressed the test plan section and very well explained the setup and steps in their project.
0,Detailed document
1,"1. There are bugs in a critical feature.
2. Some features are not implemented."
1,"1) The writeup overall is good, they explained in detail about their project. Like file they modified, the work-paln of the framework
2) The size of the screenshots varis, some are too big while some are small. Need to be improved
3) The reason/user story for this project is not well explained"
1,System is working as it is supposed to be but there  are few issues in PR like merge conflicts.
1,"Most work they have done well, but there are still some bugs need to be fixed just like the author said on the wiki page:  When the instructor doesn’t allow the bookmarks to be created, we can still add the bookmark but cannot rate or review it.
Issue 1 and 2 are finished including the ""back"" buttons and security measure of the form for adding bookmarks."
0,The code works as required. The doc takes care of the rest.
0,- The changes are working according to the way it was mentioned in the writeup.
0,"According to the PR comments and the wiki documentation, we can see that their current code works as expected and their test cases also return true for the iframe tests (expected behaviour). They have also worked upon their code as their per the guidance of Mozilla mentor to write the best version of the code."
1,No UI link provided
0,"1) This project is supposed to test manually
2) Everything works as it was required and the framework has been improved"
1,"Observations resulting from testing only the work mentioned by the team.
Back Button
Follow the steps: Click on exercises assignment->sign up sheet -> click on create bookmark for any topic and don't create a bookmark and then click on back button and at this point we will be taken back to the topics table and in this page also we have a back button and if we click on this, we expect to go back to the submit or review work page but we will be taken back to create bookmark page and there if we click back then we will go to topics page and this goes on and on. This needs to be resolved.
Creation of bookmark:
Followed the steps as directed by the team and when we try to give an invalid url or something like that, the form is not prompting the user to reenter the url but instead we are redirected to the next page where the error is displayed and there is a back button there which the user expects to go back to correct the field again but no, there is no such facility.We will be taken sign up sheet. Since, the form is short we can refill the fields but if we have a lengthy form, then this would be onerous for users.
Validations:
The team has not mentioned what kind of validations they have included for the bookmark form. For example, if I give everything right and give a title as 0000, still the form takes. A title name 0000 doesn't make sense and since we do not know what kind of validations  are included it is easy to misinterpret. May be this can be improved.
If the url is like test.com then also the form accepts. Needs checking as in the code the regular expression  states something different.
As mentioned, even though the authors unchecks the 'Allow participants to create bookmarks', still it allows which will be implemented by the team in future."
0,Team seems to have added few new test and removed some older test.
0,"yes, they wrote test cases to test the functionalities that they have implemented."
0,"Servo project, test cases already written"
0,- They didn't add any new functions or files but they have made many changes in the available test cases related to their changes.
1,"1) There is no automatic test for their fixes in the frameworks
2) The pull request seems did not pass Taskcluster's test"
1,The build did not pass and there are merge conflicts as well in the pR
1,"For the reviewers as me, I am not familiar with this project like the author, and I cannot clearly understand the detailed function of the bookmark from the information of the wiki page.
Also, as I mentioned above, there's no code and test parts which makes the reviewers feel harder to do the review. 
suggestion:
Please add more detailed content on the wiki page including test and the explanation of the code."
0,It is not an Expertiza project.
1,"Build fails and merge conflicts detected. But it is a Mozilla project. But the comments mention ""the test will continue to fail until we sync with upstream. That has not happened yet."" so i guess this can be updated likewise."
0,The question is ignored since it is a Mozilla Project.
0,Ignored since it is mozilla project
0,Changes are made during 2nd round of project.
0,yes they keep submitting their code during second round.
1,"Whatever is mentioned in the write up is clear but as mentioned in the above comments it can be more clear. Some screenshots of work or a quick video would be good.
Also, the process to guide the user to check the functionality can be more clear and in points so that it is easy to follow.
Mentioning the code files  modified in the wiki page and showing a giving a quick glance of code snippets.
Wiki page isn't sufficient to get the complete understanding of the project so the user had to go to the projects description in the OSS document to get more understanding on it. To avoid this, the team can make their wiki page more informative."
0,Code was regularly added.
0,The writeup is clean. The functionalities mentioned there are working.
0,- They regularly made some commits in the PR submitted.
0,The latest code commit was made on 06 Nov 2019. The team made consistent code commits throughout the project duration.
0,New code was commited
0,"1) They have been keep working on this project
2) There have been commits in 2nd round, but most in 1st round"
0,Code is well written and functions are not very long or complicated
1,I have not see any test write in the rspec. I look through all the github code commits which I cannot find any changes. So I think you do not have any automatic test but just test during the coding. And the edge cases as well.
0,"Overall, the code written was very well and self describing. Names of the variables are self explanatory."
0,Code written according to open source guidelines
1,"They did not considered different pre-conditions, edge cases, invalid input values, and other possibilities."
0,Code is DRY and well written. Work looks pretty good. Once the dependencies get resolved this code is good to be merged.
0,- The author constantly collaborated with the reviewer of the PR and made changes when needed and asked by the reviewer.
1,"No, I have not seen any test write in the RSpec and the author did not mention about test plan on their wiki page.
 
Also, I have looked through the code of GitHub, there's no Rspec file is changed."
0,"Code has been written well, and they have improved upon the code as per the mentor's comments."
0,Well written
1,"Couldn't find any test plan included in the wiki page. Make be test cases like
-Testing the back buttons rigorously by checking different functionalities would be useful as there is loop problem while using the back button as mentioned below.
-Validation testing especially testing the titles and urls with numbers etc.
-creating the bookmark and edit and deleting it.
-visiting the create bookmark page and checking what happens if we don't create one and testing the navigation buttons etc. can be included in the test plan."
0,Build seems to be working and code is working as intended.
0,"yes, this implementation is working as it is supposed to be."
1,As the pull request is marked as more changes needed. The code is not in the state where functionalities would work end to end. Once more stuff is added this can be done to some effect.
1,"- I am not sure what these changes was supposed to achieve making it hard to judge it.
- The setup is too extensive (not their fault)."
1,All the basic functionalities are working properly but the code written is inefficient/uses bad logic and/or does not follow coding practices. Some cases don't work.
1,"1) The build was succeed, however, I do not know whether it works since it only fixes bugs for framework
2) There still are features waiting to be implemented for the entire project"
0,test plan covers all the possible scenarios.
1,"- No test cases or screencast provided for the fix that they have done in the project.
- They did check the available test cases to see whether already working code has not stopped working or their test cases are failing."
1,No custom tests written
0,"The test plan specifies the prospective test cases to be covered and the basic code structure/styling, which they pass."
1,Did not discuss all the cases in Test Plan
1,"1) The code looks good and no method is too long
2) There are no automated tests at all but only to test it manually"
0,"Code does not have any long methods, this code is written in rust not ruby so i don't think"
0,actually none of the tasks needed much code and most of them were to updating the already existing code.
1,- There are various comments on the PR related to code issues. Changes are very small to judge any of the above criteria.
0,"The code is DRY and properly commented, and functions are properly modularised. Code is neatly written and follows proper coding guidelines."
1,No such code found. Very less files changed
1,"(1) some of the functions are too long;
(2) more comments are needed, because I have trouble following the code;
(3) the code does not follow the Ruby Style Guide
(4) Some of their test code is not DRY."
0,"Proper comments are present in code, helpful to understand what is being done in the method."
0,comments were very precise and to the point in their project. it did not took a lot of time for me to understand their code.
0,Comments are desriptive and nicely written.
0,There is great code commenting done. They explain all they have done very well.
0,"- Very well commented code.
- They have even added TODOs which is a good practice."
0,All methods and line changes are heavily commented on their reference source and working functions.
0,"1. There are comments for each method.
2. They descripe the method thoroughly."
1,"1) Most of code are covered with comment to help understanding
2) Some comment are either to short or too hard for others to understand what it does
3) There should be more comprehensive comment"
0,All name of the functions and variables were logical. every one can understand what does it mean by its name.
1,Meta can be renamed to metadata. More clear that way.
1,The naming convention is followed well. The build failed though and thus the merging is blocked. Also I see some issues are still open and not fixed. The writeup is well written and the stuff that is done is easy to follow.
0,The variable names are properly labelled and the function methods are intuitively named.
0,Well commented
0,Writeup is well written
1,"1. The writeup is lacking in terms of explanation of how to test the functionality thoroughly.
2. At least half of code changes are explained. 
3. Explanation of reasons for the style of code and problem solving approach is lacking."
1,"1) The newly added/modified code looks good and DRY enough
2) There are no test covered for the code
3) I could not figure out the function for each code since some code do not have comment"
0,They have provided with test plan.
0,they did come up with the plan that was sufficient enough to test all the proposed changes. good job guys.
1,Test plan does not explain what cases are included.
1,The writeup does not have an explicit Test Plan mentioned. It does have some commands for testing. The testcases that have been used are not explained. I would suggest that add custom testcases and write a bit about them in the Test Plan section.
1,- It does have steps to setup servo on local but do not specifics of what to check and where.
1,Not sufficient cases included
1,"1) There are no automated test implemented for the project
2) The manual test works with no error
3) Functions are not all implemented yet"
0,"yes the writeup is easy to understand and clean, they mentioned that design pattern are not applicable for this project."
0,yes the write up shows exactly how they approached the problem and why did they took those steps.
0,They have explained the approached in a detailed fashion.
0,- Well explained doc. They have added snippets along with the code step which makes it easy to understand their approach.
0,Well documented
1,"1) The writeup does tell the work they did and how they did it
2) The reason for doing this(user story) are too short and really hard to understand why should they do this
3) They used screenshots to help explain the code and there should be more comment to explain also"
0,Proper details are provided in the wiki to understand what changes are done
0,wiki page were excellent to understand the project thoroughly and all the proposed changes. problem statement was mentioned clearly in order to understand the project purpose.
1,The scope can be explained more. What is done and why it is done can be elaborated.
0,Explanation of requirements and details of implementation is done with sufficient details.
0,"The variables, methods, and class names in the newly-added code in the pull request is clear and good."
1,I didn't find any descripe comments for each method. But there is some comments about their each meeting.
0,"They have converted all the cases discussed in Test Plan into automated tests. However, there is some mistake in their pull request."
1,"I can understand the project clearly by their writeup.
I recommend you put more details of modifications that you have made to the project. What did you do to fix the bug? Why the changes?"
1,"The writeup looks very well. They have problem section, manually testing section, code section.
The testing section is too short. What function did you test?"
1,"The test plan section on wiki is too short.
Did you test the students are getting copied when copying an assignment? I only saw a few lines added in test cases."
0,"Class name, variables, method name are good. Nothing seems wired."
1,Not very much comments added. I barely can understand the code.
1,"Their writeup well written and easy to read, however I cannot thoroughly understand the project."
1,"You code looks good, but when I followed your instruction to assignment page and clicked ""copy"", when page browses to ""Edit Course"" but not ""Select the desired choice and copy the assignment"" as you stated in instruction. Is the link or something wrong? Please check. (I tried all assignments, and all the same)"
1,"It shows that 8 files have been changed and I personally feel the following after going through the changes: 
1. The Gemfile.lock file Ideally should not be changed, unless documented or requested upon doing so. This file basically contains the versions of each gem and changing it might alter behavior in production, on a running expertiza application, which might cause the application to behave differently. 
2. The test cases (RSpec) when writing it ""XXXXX"", you don't have to mention the method name again, as it becomes redundant. Redundant because the method name ideally is used when writing the clause for describe. We usually say - describe '#getname"" (for example for an instance method), and it ""returns name"" or whatever, so writing it ""returns name from #getname"" is basically redundant. 
Otherwise, the code seems fairly DRY."
1,"There are no comments anywhere in the code, and when adding a new file (view/checktopicscopy.html.erb), it is expected that comments are written to better help understand what exactly is being added."
1,"1. The function methods don't seem to be too long
2. Code is being refactored and divided into different methods and onto different files, which makes it clean. 
3. As answered above, the comments are missing, and having to read code is becoming tedious. Please do add comments to make code easier to read. 
4. The code does follow Ruby Style Guide, with right practices for views/models/controllers. 
5. Code is pretty DRY and well written."
1,"1) The writeup does indicate what they are doing and the code they modified
2) It is hard for me to understand why they are doing in this way since they did not explain enough
3) There are lots of screenshots but few comment with each"
0,I have manually checked and the cases it fails is already mentioned in the writeup and is well documented.
0,"The write up is detailed and informative.
I could understand the problem statement, issue and approach very easily"
1,Test plan is detailed and lucid but it does not include the edge cases
0,"All of the code added follows Ruby on rails principles and the variable, method and class names are standard."
1,I cannot see any comments in the new code added
1,"Code added is very well maintained and written with all principles in mind, but it doesn't include any comments. I would suggest them to add comments even though the code is intuitive"
1,"I couldn't copy any assignment after first try.
Application kept on spitting The assignment was not able to be copied. Please check the original assignment for missing information. and didn't copy assignments."
0,Yes it explains with great ease what all the issue were about and gives the plan properly to fix the issues.
0,Yes the write up does explain what the authors have done and how to test those changes. It is informative
1,Yes the write up does include the test plan section but the rspec test plan is only mentioned not explained
0,Yes the code is adequately commented. It is not heavily commented which is a nice thing.
1,Create topic name could be a different function if possible and if repeated many times in the code.
1,Manual testing is done on the UI which is not an automated test.
0,Yes it works!.
0,"The write up explains in detail, the functionality of the work done by the team. This being a feature/functionality improvement project, the authors have provided sufficient details of what the problem was there with the code previously and what they have done to improve it. I can clearly understand how & what the project does from reading the writeup."
0,"Yes, the write up explains all the work done by the authors and also, why they did what they did and the way they did it.
It explains the problem statement, the solution and the way to test the solution.
Everything is easy to follow."
1,"The write up does include a very well detailed test plan.
Test Plan shows how automated testing passes all the existing test cases as well as how manual testing for the team's feature implementation can be done.
No newly added test cases exist for the new code written by the team. New RSpec test cases can be written to test the newly added functions."
1,"Reasonable and meaningful names have been given to the newly added functions.
Not a lot of newly added The variable/method names can be improved by following some convention, like `CamelCase` or `using_underscore`"
1,"The authors have not created any automated tests for the cases discussed in Test Plan. They have only demonstrated test cases passing using the existing RSpec file and no changes are made to it.
Manual testing instructions are very informative though."
0,"The feature works correctly. 
Description is very well defined in the wiki page."
0,The write up well explained and include the steps done and to be take to run the test cases
0,The write up well explained and include the steps done and to be take to run the test cases.
1,The write up doesn't include the name Test Plan but the content include the test plane and is well described. I think the code modification can also be mentioned so that we don't have to look for the code changed or added.
1,"The name are suggestive of the functionality and  defines the variable methods and class name clearly. There is some redundancy in the code that can be avoided.
The gemfile is changed and it shouldn't be unless mentioned. It may affect the website."
1,"No, there are no comments which make it difficult to understand the code properly. I think comments can be added that would make it more readable."
1,"more comments are needed, because you have trouble following the code. Rest of the things works properly."
0,"Yes, the test are automated  in the test plan. The code has increased coverage."
0,I have manually checked and the case that fails is mentioned in the write up
0,The write up is very detailed.
0,"The problem statement and test plan are very well documented in the wiki.
The authors have explained the steps to generate the issue with screenshots and the files that were modified for the fix."
0,"Yes, the test plan looks well written."
1,"Comments are only provided in the ""describe"" section of the spec. No new comments added in the source files."
1,"method could have been extracted out for copy functionality in assignment_form. But since the lines of code is under the proscribed length, it is fine."
0,The documentation is done with great details.
0,The write up has a detailed test plan which describes the tests and their automation process.
1,Some edits are only adding indentation (For example: app/controllers/assignments_controller.rb). This should be fixed to make the commits better and merging easier.
1,"The code is readable, but there are no comments in the code. The file app/models/assignment_form.rb if condition section is the example."
1,Codeclimate has listed out 13 issues which are detailed enough and can be made with relative ease. This will make the code DRYer. Ruby style guide needs to followed more.
0,They have done a reasonably good job on adding testcases as described by the plan.
0,Code seems to be working as tested.
0,The problem statement along with different scenarios and the solution are clearly explained. Proposed recommendation looks promising.
1,"The code for Issue 1211 passed the build and no work needs to be done for 2nd round.
The build is failing after the last commit for solving the issue 1321. The commit message says added more comments and by mistake, a comment is added inside the array declaration which why the build is failing check line 149 https://github.com/expertiza/expertiza/pull/1564/commits/9018504c17c70f5f76e4dcd64f1900b146dec4e6
After removing this the build should pass and code would be ready to be merged."
1,"variable copytopics is a string that seems to have 'Y' as the only possible value. It might be helpful to keep boolean it instead.
copytopics use copy_topic (snake case for variables)"
1,updated the method but didn't update the comments
0,The writeup is well written and easy to understand.
1,"if variable copytopics is a boolean then naming it ""copy_topics?"" is more rubistic."
0,I tried a few scenarios and I couldn't reproduce the issue 1321 as well. So it seems to be non-extant.
0,"the test case for scenario ""when copy topic equals YES"" is well-written."
1,"wiki page does not have a video embedded, it does not have a test plan. the overall structure of the document can be improved."
1,"The write up is very clear and easy to follow. The team has stated what the previous problem was and what did they resolve and what is pending too. The steps for checking the bug is very clear.
But there is no explanation about the how did they do it or which parts of the files were modified.
May be including the screen shot of situation before the fix and after the fix would be great because it would be easy for the readers to follow and identify the work doe by the team.
The team tried to include a video but I guess the link is not embedded properly. It is still a text."
0,Yes. They commited new code during the 2nd round.
1,No. Their build didn't pass in Travis CI. There are 3 issues left to fix.
0,They added test cases and every test increased the coverage.
0,"Their task involved modification of existing methods, and the features work as they are supposed to."
0,"In the second round, they add more instruction about test coverage in their wiki page, which makes the writeup more complete and clear."
0,"Names are good, no long functions. enought comments. A lot of commits to improve the code accordingly."
0,"Yes there are commits during the 2nd round. They made to codeclimate, added tests and revised the wiki page."
1,"Pull request for issue 1321 failed. https://github.com/expertiza/expertiza/pull/1564/commits
Pull request for issue 1211 passed before 1st deadline. https://github.com/expertiza/expertiza/pull/1569"
1,some checks are not successful. but no conflicts.
0,"There are two pull requests. There was only one commit in only one pull request.
But it seems that both of them were almost completed before the 1st deadline."
0,"It was an amazing idea to loop through all the paths by iterating through a list/array for testing non-exsistence of bug 1321.
There was a minor change in solving issue 1211. And the test case for the same has been well coded."
0,Very clear writeup. They added a lot of screen capture to state the ui operation i believe it is good enough.
1,"Yes but please check where you go after clicking ""copy"" on the assignment page before you deploy this code."
1,The authors have not commented
1,the code may not be deployed onto the production server as the Travis CI build didn't pass. the features build failed which might be random. so I'm not sure of it.
0,2 Specs have been modified and one spec has been added
0,Yes the system operate as it should
0,The write up is written very well and is lucid
0,"the write up is very good. the problem, approach, test plan everything is mentioned and explained in a clear and concise way."
1,the URL given cant be reached. so cant comment on the system operation from ui.
0,"The code is written in regular style, I think it is ok"
0,the team didn't add any new test cases. the coverage of the tests didn't increase.
0,Yep
0,pull request has been made to repo.
0,"yep, test has been made since last time."
1,the latest pull request didn't pass the Travis CI build(pull1564).
0,the project has two pull requests. and a commit was made in one of them(pull1564).
0,the code is well written with meaningful method names and comments as well. the DRY principle is followed as well.
1,"The new code and tests written for Issue #1211 are very convincing and hence PR #1569 can definitely be deployed onto the production server.
The PR #1564 however raises a concern as the Travis CI build failed after the latest commit. But as the last commit only involved addition of comments to 1 file, the failing build can be overlooked.
The PR # 1564 can surely be merged with the production server but only after the team tries making blank commit(s) i.e. commits that do not really change anything with respect to the commit before it. This will run the Travis CI build again and there is a very high chance of the build passing.
There is absolutely no reason for this project to be done from scratch and according to me, it is a very good starting place for a future team to pick up from."
0,UI is ok for me.
0,No serious problems.
1,No verification of testing or system operation could be done as the deployment link does not load.
0,I think it is Ok
0,The code was decent enough and followed most of the principles
0,Yes they made commits.
1,Code climate not passed
0,Yes it works.
0,Write up is very informative and well explained
0,Yes it can be included in the corresponding OSS project.
1,"The team did not add any new test cases during the second round but had already done an amazing job with the testing part of both the issues.
The coverage on PR #1569 was the same as it was during the first review period as no commits were made to this PR. Hence, the code coverage after the latest commit on this PR had decreased by 3.4% to 27.121%.
The coverage on PR #1564 had surprisingly increased by 3.2% to 33.657%. The reason this is surprising is because the coverage had decreased by 6.2% to 24.298% after the last commit during the first round.
As the only commit that was made after that only dealt with the addition of a few comments to a single file, this does not look right, as comments have nothing to do with code coverage. I think that this behavior of coveralls can also be termed random."
0,"The code is well written.
Variables have been named appropriately. A few more comments could be added, but it's fine.
No new code has been added in the second round, so as such there has been no improvement in the code in the second round."
1,"The Build did pass in Travis CI. But the code climate check did not pass because of the following reasons:
1. Method copy has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring. 
2. Method copy has 40 lines of code (exceeds 25 allowed). Consider refactoring. 
3. Use next to skip iteration in line number 342.
These are the issue that need to resolved."
1,"The Travis CI build does not pass for PR #1564 and does not clear all the checks.
The Travis CI build passes successfully for PR #1569 and clears all the checks.
The reason behind the build failing for PR #1564 could not be the code changes made by the team as the latest commit involved only the addition of a few comments and hence the fail could just be another one of the random Travis CI build fails that many people have experienced.
There were zero conflicts that needed resolving as neither of the PRs had any conflicts merging with the base branch."
0,"The team did add many new test cases.
Some existing test cases were also refactored.
The code coverage did not increase, it decreased by -0.003% to 24.391%
There are many new added test cases, so it essentially increases the tests covered range of the project.
Added tests:
- redirect to checktopicscopy page 
- rendering of checktopicscopy page
- copies the original assignment to a new one and returns the new assignment_id when copyoption equals copyWithTopicTeams
Edited tests:
- redirect error message when new assignment is not able to be copied"
0,"The UI works as intended.
The features work exactly like they are supposed to. I am able to view & test the added feature when attempting to copy assignments.
A great job done on adding the feature."
1,"There were no new commits on PR #1569 which addresses the Issue #1211 and 1 new commit on PR #1564 which addresses the Issue #1321.
The commit dealt with the addition of comments to spec/features/peer_review_spec.rb as was suggested to team in the first review.
Note: Please check the Additional Comments section of this review."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
They also added a section on ""Our Recommendation for a Separate Issue (For Instructors only)"", which includes the issue that the team feels should be addressed on priority. 
They have also added enough information on how to precisely test their added feature which is great."
0,No such problems
0,"The code is well written and there are no problems like bad names, long functions, redundant or repeated code.
The new code added follows good coding style and all the Ruby style conventions.
As I had no problem with the code in the first round, the code still looks good to me. Better in fact, considering the addition of new comments.
The new comments make the code even easier to follow and gives an idea of the team's thought process behind the tests they wrote."
0,"yes, everything works fine"
0,The write up is well scripted.
0,"Yes, it is"
0,Yes the code is ready to be deployed onto the production server.
0,"The writeup is detailed and includes the issue, its fix and test plan."
0,The project/ fix works as intended. There are no failures and it covers all of the scenarios.
1,The team has added test cases however the test coverage does not increase.
0,The build is passing in Travis CI with no test failures.
0,Code quality is good and it is DRY.
0,Regular code commits can be seen.
1,The Travis CI build passed but some code climate errors are seen. These should be fixed.
0,The code is well written and follows all good coding practices.
0,Team has added meaningful test cases wherever required.
0,Everything works as described in the requirements document.
0,The document is well written with detailed description of what is done and how it is done.
1,"1) As i am not able to test UI because site is unreachable, according to documentation they tried to fix both issues and they succeed tp resolve it.
2) As there issue is mostly related to fixing bug, more test case is needed to add, as after fixing bug it is good practice to test edge cases."
1,The team needs to fix the codeclimate issues for the code to be ready to merge into production
1,The code is readable but some variables are not in snake_case.
0,"Yes, there were a total of 6 commits during the 2nd round."
0,Yes the Travis CI build passed successfully.
0,"1. copy without topics: I didn't see 'Topics' tab near General tab.
2. copy with topics: I saw 'Topics' tab near General tab. Topics had been copied and students weren't.
 
3. copy with topics and students: Both were copied under 'Topics' Tab."
1,"1) though the build does not pass, the code coverage increases by 3.2% which was previously decreases by 11.6%
2) in new commit they just add comments to old test cases."
0,The problem statement along with different scenarios and the solution are clearly explained. Good to have code snippets.
1,1) the new commited code does not pass the Travis build CI.
0,1) YEs the team commited new code during second round
1,"1) It follows DRY principle and Ruby coding guides
2) comments in test file need to be add and explain why this test is added"
0,"Yes. They considered all pre-conditions, edge cases, invalid input values, and other possibilities."
1,They didn't explain how and why they accomplished the fuction. They just explained what their job is. They didn't need to use any design principles.
0,They did a good job in wiki.
1,TRAVIS CI build case is failing
0,The writeup is good and detailed especially the test plan section.
1,The UI link is not reachable. So not able to justify on this
0,"Yes, the coverage increased to 34 percent. The newly added tests does have several paths to test."
1,"The build did not pass in TRAVIS CI. The test passed for model, view and controller but it failed for feature class."
0,"Yes, new code was committed with additional test cases during second round."
0,"Yes, the authors do have improved that."
1,"It doesn't seem to me that the code is ready to be deployed.Though there have been refractors made,the test coverage is decreased.Also the build doesn't pass.So,this code needs further changes."
1,"There are test cases added.But,the coverage has reduced"
1,This project has 2 builds.One of it is passed and the other is failed
1,"Though there seems to be a commit made,it has failed and not many commits were made in the second round."
0,"Overall the code looks good in terms of the ruby conventions,there are no complicated functions written"
0,I think it could deployed onto the production sever since the testcases are passed and no confilt towards the base branch.
0,The tests cover the all the scenarios since the cases which can happen is not a lot.
0,The team do not added tests since it's already cover the range of this project. But the coverage decrease.
0,All the checks are passed and there were no conflicts towards the base branch
1,"The project has no new code commited during the 2nd round, the latest time to update is in October."
0,"The code style is satisfied with the DRY principles, and i think is okay in their naming, but no changes are made in their comments."
1,"No, I do not think that this code is ready to be deployed or a good starting place for a future team to pick up.
Basically, the first issue they said the bug does not exist, and for the second issue, there's only one line of code be changed, and I cannot even log in to the website to test manually."
1,"They did not improve the writeup at all.
It seems like they did not keep working on the wiki page at all, it is the same as the first round. 
the wiki page is still lack of detailed solutions, code parts, and explanation of code."
1,"Since the website is crashed, I cannot check any function of this project."
1,"Almost no new code committed.
It seems like there's only one new commit during the second round, and the most is about comment.
And the website is crashed, and they did not fix it."
1,"They did not improve the code.
They did not add more commits to improve the project and the website is still crashed."
1,"Although, Tests have been reported to be passed in the local, failure of integration tests could be a problem when merging"
1,"Pull Request for one issue passed the Travis test, while it didn't for another PR"
0,A new issue itself was created
0,"tried a few scenarios, i couldn't reproduce the bug as well."
0,Various test cases scenarios and edge cases tested.
0,nice idea to loop through all the path by iterating through a list/array.
1,No new methods implemented. The comment #participant id is 3 for student in peer_review_spec.rb line 140 seems to be misleading
0,testing code is readable. and the write-up is well written
1,Problem statement not mentioned(what's the original bug Issue #1321). Design pattern not applicable as only testing was to verify the existence of the bug.
1,"Although the write-up was easily understood, it'd be better if you use less ""I"" in write-up"
0,yes features work as intended.
1,more comments are needed. comments provided are not enough descriptive to explain the functionality of the code
1,comments are not descriptive of the code functionality.
1,There are two pull requests where the build passed in one but didn't in another. There were no changes made to methods and class names.
1,the test plan is detailed but doesn't have code to support it.
0,the writeup is pretty well documented. everything is explained in a clear and concise manner. the issues were clearly mentioned and the approach and the solutions they designed for the issues were very well explained.
0,"the writeup is well documented and clearly indicates the functionality the work is related to. the problem, the approach, testing, and the results and conclusion are clearly mentioned."
1,"I cannot inspect the work, the deployment link is down."
0,The tests seem fine.
0,All of the code looks great!
1,The code documentation is good. I feel like the tests could be a little better documented. Some method documentation would be very helpful.
0,The code I have seen looks fine.
0,"The write-up is very, very clear about what was expected, done, and not done during this stage of the project."
0,The write-up is incredibly clear and descriptive.
1,No Travis CI build did not pass
0,"Yep, the pull request has been made to repo."
1,The build did not pass in Travis CI.
1,The Travis CI Build is Failing as of now. No conflicts as per the GitHub report.
1,"There is no conflict which needs to be resolved.
1 out of 4 build failed in Travis CI"
1,The build is failing due to 4 failures in the model specs.
1,"Travis CI: 3/4 builds passed. 1 failed due to changes made in app/models/tag_prompt.rb - 
 round_number = AssignmentQuestionnaire.find_by(assignment_id: assignment.id, questionnaire_id: questionnaire.id).used_in_round
One case might have failed since the tag returned the slider instead of ID(?). 
There were no conflicts but there might be other surrounding UI/functionality checks to be completed before merging the code."
1,The build didn't pass but it shows that their code doesn't have conflicts to merge. Around 4 errors are found in one of check which relates to the tag report.
1,"No, the build did not pass in Travis CI. There are failed test cases in tag_prompt_spec.rb, answer_tag_spec.rb."
1,"Well, the code did not pass Travis Ci test and the errors are in model section of testing so I would not recommend deploying onto the production server. As why it is failing the test has to be addressed first."
0,I think it could handle all kinds of problem in their function.
1,"Since the build failed, I would not recommend adding it to the production server yet."
1,"I do not see any reason why this code cannot be deployed on production. Only thing that needs to be checked is that the table view is distorted for some of the studentids(student7552), which seems like a data issue, so the code may need to be tested well before it can be deployed."
1,"The functionality of review count works as explained on the wiki: increase and decrease appropriately. However, the ""Alternate View"" button leads to an error page. That needs to be rectified. This too, is only for the assignment for which the tag counting functionality is enabled. It works well for other assignments."
1,"Some comments are unnecessary which are written for the understanding of the reviewer. Changes in the schema.rb file also need not be pushed. More extensive tests need to be written. Also, the tests failing the build need to be fixed. But otherwise, the code is DRY and need not be done from scratch. I believe this is a good place for a future team to pick up."
0,All the tests described and brought up in the Testing sections of both the issues were converted to automated tests using RSpec in features/review_assignment_spec.rb and features/peer_review_spec.rb.
1,Could not test the team's work as the link to deployment could not be connected to.
0,"1) None of the functions are long. All the functions and tests written are very concise.
2) The new code does not need to be extracted into separate methods as each function does exactly what it is supposed to do and there is no method refactoring required.
3) Comments were provided to help the reviewer understand the code.
4) The new code follows the Ruby Style Guide and the relevant Ruby conventions.
5) The new code does not have any repetition and follows the DRY principle."
0,"The Test Plan is separate for each issue and perfectly describes the additional tests that the team wrote to check the implemented functionality.
The team tested 1 edge case for Issue #1321 in which a review date is changed when a reviewer is in the review window, which I think is a very good edge case."
0,"The writeup is divided into 2 sections i.e. 1 section for each issue. For each issue, there is a Reported Problem section which introduces the issue, an Investigation Approach section which very clearly describes the team's thought process and also gives a better idea about the project, a Solution section which describes the team's solution to the issue.
A Testing section which describes the Tests that they ran and how they think those tests help in obtaining the results and conclusion which are given in the Results and Conclusion sections."
0,"The writeup explains each issue, the corresponding approach and the solution in detail. It is easy to follow the flow of the project because the writeup was smartly sectioned.
The flow chart and the flow paths for Issue #1321 were really helpful in the understanding of that issue and in visualizing the paths to get to the Begin Review step."
0,The authors work is working as intended.
0,"The code has been tested, covering most of the test cases."
1,"The fix violates the following two requirements(1),(2),(3) from above five listed, The function has too many lines of code added and could have been easily broken down into two or more functions.Also, comments have not been added to methods."
1,Comments have not been added for the methods touched/added as part of the code fix.
0,The writeup explains the bug and its fixes in great detail.
0,"The writeup is quite detailed, it explains the issue, current workflow and its fix appropriately."
1,1) As i was unable to review the working because the site is unreachable during review. i cannot test the edge cases or the functionality in the proper way. But on the basis of documentation it seems working fine.
0,"yes, They converted the explained test plan in write-up section to test."
1,"The coded functions are average in length.
But More comments especially in file like review_assignment.spec.rb will be more helpful."
0,"Considering latest commits there are 2 comments which are well explained,
The total additional and deletion is about  10 lines of code and  so there are good enough comments which depict the functionality.
The comments help me to understand what flow they used and devised solution"
1,"1) The test plan in writeup section is looking enough from the documentation part.
2) The test plan in write-up section should have included some detailed comments regarding what test cases are write for what and it will help in future other who will work on adding test cases"
1,"The write-up is lucid enough. put screenshots of the of the work. Also write more detail about previous work on the same issue that someone worked on.
It will be convenient to reviewer to understand what new update team worked on.
 
Team  tries to explain the core of the issue and the process they went through about how they approach and all. While some of information such as mentor meeting and such is not necessary to be included in the writeup.
Rest all is perfect"
1,"Write-up is clear and it should have:
1) screenshot explaining what was before and what is after the solution
2) more test which may lead to finding the issue/bug which is your 1st issue."
1,It popped up with error that the site can't be reached. There was no mention of the team members on github as well as the documentation to be able to contact them regarding the issue.
1,The functions are good in length. More comments especially in review_assignment.spec.rb will be more helpful.
0,"Yes, there are 2 comments in their latest commit, one of which is good enough to explain. The code change is about 10 lines, so there are good enough comments which depict the functionality."
1,"The test plan section looks complete enough from the documentation part. As, I was unable to test the link, because it was unreachable, so couldn't specify about the testcases and edgecases. The test plan should have included some comments regarding what each of the condition does or a screenshot of it in the writeup."
1,The writeup is good and clear. But the issue related to Varun should be explained in more detail. More screenshots of the working if included would have been helpful for the reviewer.
1,"There has been tests written,with certain functions,but the tests are a little too lengthy"
0,"Yes,comments have been provided for each change made."
0,There has been a test plan put up. Writing test cases including different end cases is suggested in peer_review_spec.rb
1,"Yes,the write up suggests how they have changed. But,why the change is not explained entirely.It would be better if explained"
1,"Though tried explaining the functionality,it is not properly explained as to what the project does"
1,"I cannot goto the page through vcl, so I cannot log in and test the author's work manually, so I cannot test the edge cases."
1,"I saw the rspec the author write in the both issues, I do think the second issue might have may have another case which is it's sucessfully review submission has done."
0,"Not any functions are new created, so hard to review. But the test function is easy to read."
0,"There is not new method create by the author, but the test in rspec  has reallly simple comments and easy to read and understand."
0,"There is no new method created, so the naming will be automaticly be cool since they just do the test of the old method which is given by perivous work."
1,"They have test to provide the evidence that they have contain enough possibilities in issue #1321, but not the issue #1211, since they just test for the simple case."
0,"The wiki pages said that the bugs are not acutally true , so the most part of the work done by the group is writing the tests."
0,"The wirteup is clearly to show the work and the solution they give us, I read it really easily."
1,"Sorry, I cannot do the manual test since the website is crashed. Please run the rails on VCL again."
1,"1. For issue #1321,  the tests in test plan are good and all converted to automated tests.
2. For issue#1211, just like the author said ""he didn't end up having much time to write exhaustive tests to establish this change"", so there's only one test which I do not think it is enough."
1,"1. From the wiki page, it looks like that the author only changed != ""submission"" to ""review"" to fix the bug, and I cannot check does that work since I cannot log in to the website. So I think the code is DRY and follows the Ruby Style Guide, but I am not sure it works or not.
2. more comments are needed on both the wiki page and Github."
1,"The code is very neatly written with descriptive comments and intuitive variable names. The team has also added test cases to cover their bases in the code functionality testing. 
Concern:
The code changes made to tag_prompt.rb has some bugs due to which ""Alternate View"" for a student viewing his/her assignment now does not work as intended. This can be resolved by a quick fix by the team. Once this is done, the team can test their code (expectation is that everything should work fine) and the code can be merged after code inspection.
I do not think the project should be done from scratch, future teams can pick up from here."
1,The code they have written is clean and includes comments as well. But the only concern is build getting failed.
1,"The features work well but the build did not pass in travis ci, so not sure if the code is ready to be deployed onto the production server."
1,The write-up is good. It is written in good easy to understand language with relevant sections required. It would have been better if they could also highlight the part of code which was earlier and part of the corrected code to easily comprehend the work they have done.
1,"Yes, for the first issue #1321, they did a lot of tests and followed the OSS project documentation make sure that bug actually not exists. They do the test from different perspectives and get the conclusion.
For the second issue #1211, the test looks not complete enough. And it seems like the author took a lot of time to figure out the reason for this bug and made the description, but do not explain clearly about the solution."
0,"it is ok, since it is in same style which is regular."
1,"Yes, they have explained why and how they did the work on their wiki_page, but please add more code part on the wiki page.
In issue #1321, they did very well that gives a flow chart to help others understand this project, and they did the test to make sure this bug does not exist.
In issue #1211, the author wrote the process of solving this project clearly and detailed. However, I cannot fo the website on VCL from the given link on the above, please run the project on VCL again. It seems like the author only changed the code from ""!= ""submission"" to ""==review"", they did not explain much and also I cannot check it since I cannot log in."
0,Yes everything works fine.
0,UI is good enough.
1,"As per the documentation, the code works as intended. After clicking ""Your scores"", I can see all the reviews count in the table and the number change is reflected every time you successfully tag a review. The tag count is persisted and no bugs were found in the steps provided.
However, when clicking the ""Alternate View"" button, there is a NoMethodError at round_number = AssignmentQuestionnaire.find_by(assignment_id: assignment.id, questionnaire_id: questionnaire.id).used_in_round in tag_prompt.rb's slider_control() function. 
The team can probably provide a quick fix to this since this is a functionality break and Alternate View no longer works as intended."
0,"Yes, the features work as intended."
1,"The writeup indicated the problem statements clearly, however, it did not give enough solution explanation.
Please add more comments about the code part and more explanation about the solution part. It is important to show others how you solve a problem instead of showing how hard you are trying to figure out what makes that problem."
1,"This link is broken and not able to test the deployment. Also, since this is an investigation topic, and the build has passed,  the changes of broken functionality are low."
1,"Although code is not commented very well, the write up explains the reasons"
0,Yes the teamhas added test cases in rpsec file.
0,The test work well on the function they assigned to.
1,Code coverage decreased.
1,"A lot of relevant test cases are added since round1, the last coverage data shows a reduce of 28% in coverage, new coverage not available since the build is failling."
1,"They added tests for the student_tasks_controller. However, they also made considerable changes in grades_controller and tag_prompt model for which tests weren't written. But the written tests seem to be extensive."
1,"Coverage did increase from round 1 to round 2 but overall it has decreased a bit. Yes, they have added 5 test cases for the project. Coverage increased in the second round."
1,Yes the team added test cases in rspec. These tests cover the range of the project well. There is no information about the test coverage.
0,"yep, some difference has been made in second round."
0,It is good in this part.
0,The test plan is impressive and complete. Very detailed explanation.
0,"The team has now included a test plan section to their documentation.
They have identified the Rspec files to be changed as well as the edge cases which need to be tested. I am not sure as to how you would test concurrency, unless you end up creating threads simultaneously to perform tasks."
1,"Yes, the design includes testing through RSpec and also manual testing but does not cover all the scenarios. Explain testing considering different scenarios will help to test all the features."
0,The team has included a test plan.
1,"The team has put in a lot of thought into the UI testing and mentioned them in great details. Rspec test plans could be detailed out. It seems like the team is yet to plan how to test the functionality mentioned in the problem statement - ""There should be an option when creating assignments that allows the creator to select whether the assignment will use team reviewers or individual reviewers"""
0,"Yes, there is a Test Plan section. It has a step-by-step description of the test to be impelemented."
0,An elaborate test plan has been added to the document. It was missing in the previous round. The tests don't seem shallow.
1,Both rspec and UI tests will be covered and all the steps and conditions for each of these are written. It is not clear how exactly rspec for the following test mentioned can be written: Reviews submitted by teams are treated identically to reviews submitted by individuals.
1,"Yes, they have included UI and rspec tests both, however rspec tests only have the file names, a one-liner about the tests they'd be performing in those files and how it affects would be good."
0,"yes they have included test plan in their design document. They have mentioned about what rpecs files they are going to change and importantly what functionality they are going to ensure in those test files, they have given step by step description of what UI testing they are going to do also."
0,"Yes, both Rspec and functional UI testing has been clearly mentioned in the write-up, showing that the authors know exactly what has to be tested moving forward."
0,"they have RSpec test and manual UI test, good"
0,"Their test plan part is quite complicated and includes all tests they may need.
I like their UI testing part, as our reviewers can easily follow the step to check their functions works or not."
1,"They have clear UML diagram. If a user diagram is included, it would be perfect. User diagram states the relationships between roles and functions."
0,The use of class-diagram and screenshots of before and after are sufficient enough to understand the change made and the underlying implementation.
0,The UML diagram clearly explains the changes to be made to the system.
0,There is good visualization.
1,"Screenshots are helpful. I would like to suggest to the team to modify the flowchart to not only represent how the models come together, but also include the controllers and the views."
0,Images are descriptive. They even contain annotations.
0,"The team has provided snapshots for all the changes that will be made to the UI. Also, a new UML diagram has been added - describing changes and interactions in the models."
0,The UML diagram is self-explanatory and gives a clear idea about where the changes are to be done.
1,"Pretty extensive diagrams, the class diagram is included, screenshots are included wherever necessary. However, they haven't worked on the last time's reviews, and the uml diagram still contains a descriptive text which it shouldn't."
0,"yes they have given mock up screens of how things are now and how they will look after their changes, which screens they are going to change they have also given UML diagram showing the links between different classes and how they plan to implement their feature."
1,"Both a UML diagram and pictures depicting changes in UI have been mentioned, showing the exact changes the team is looking to go about. A database relationship depiction would also have been nice, considering the changes are being done when reviewee_id is being entered into the ResponseMapTable. Nonetheless, it does give good visual aspect to the design document."
0,the URL image is very good
0,"Yes, the UML diagrams clearly describe the relationship between controllers and views they want to modify."
1,"They state the broad case, and files they are going to change in the wiki. More details of what actions are you going to do to these files and why are you going to do are needed. Like a more concrete solutions."
0,"The project seems to be completed and not completed at the same time as there exists a section ""changes to code"", while at the same time screenshots tell that the changes have already been implemented. The UI testing section also suggests that changes have already been implemented.
They have adopted Bullet point style for functionality and subsection containing proposed solution.
The proposed changes are easier to understand as the authors have included both a raw plan as well as a section detailing how they are going to implement the functionality in code using which methods."
0,The design is very simple and easy to understand the flow.
0,"Design document is very straight-forward, sets the required expectations for the reviewer and easy to understand."
0,Design doc has enough sections and images help understand the changes.
0,The design is straight forward and easy to understand.
0,The design is as simple as they could get. The database changes have been mentioned clearly and migration requirement specifically mentioned.
0,"The statement mainly deals with concurrent task execution. They are using the rails mechanism already exists to facilitate a lock on page edits, so that should be good."
0,"design is not that complex, the approach they are following looks good to me, and i think that is the only way we can do it, but to put this design to code needs more of research about what inbuilt features they can use, otherwise i am not sure how team will be able to get this done."
0,The design seems to be straightforward and clear.
0,"yes, can fully understand what they are going to do"
0,"Yes, their design document seems simple and clear."
1,"They design is completed and straightforward enough. But in the change of code section, I expect more details of what you are going to change these methods and files and why."
1,"The team has now included a Test plan in the documentation. They have also removed references for spring 2019. 
The changes proposed by the team sound appropriate at the moment. However, as mentioned in review 1 as well I would suggest trying to assign all members of the same team a common Id rather than having an extra field in the review map. This would simplify the whole process of assign_review_dynamically, automatic_review_mapping and a lot of other functionalities, which rely on obtaining reviewer_id from review_map to establish unique reviews and avoid duplicates or reinforcing review limit, which you will need to change on your current methodology. The only problem would be with the locking situation, which can be solved by a field ""locked by"" and contains a student_id. This will save you a lot of effort according to me."
0,"Yes, the design looks good and it is easy to follow. They have followed appropriate principles and patterns as well."
1,"The document is extremely neat and organized. I would suggest to start with the problem statement and then write the purpose of the project to tie it up together. Also, please don't mention the problems of the design implementation for the proposed solution under ""Purpose and Problem section"". Those are caveats for the proposed solutions."
0,"Changes are clear, but no design pattern is mentioned in de design doc."
0,"Yes, the principles like using a lock have been addressed appropriately and seems like the solution will work."
0,The design documentation is well-written and looks almost complete. The team has added the testing plan since the last review.
0,The design is sound and every detail of the changes mentioned along with screenshots of everything. The design changes in the database and UI have been mentioned clearly.
0,"The document was written as a wiki this time, changed from previous doc. Includes all functionalities, covered the design approach well."
0,"Yes, design looks good to me. They want to enable team reviews rather than individual reviews for some assignments, for that they have to do UI changes and corresponding backend changes. They will be looking for rubrics that can help them lock and unlock the review page when one of the person from same team is reviewing the assignment"
1,Project scope and expectations are very well mentioned in the document. Kindly work on the design or proposed solution along with the test plan.
0,"Yes they have included test plan section. Compared to previous submission, they have included well-defined and easy to follow test plans for each of the functionality."
1,The team has attached the screenshots. But the team has not explained the exact places where the code will be affected and what code changes will be made.
0,The test plan is detailed and clear.
1,There is only one flowchart.m but it is reasonably clear. There is scope for more visualizations to be added.
0,"The design is as simple as it gets. But it doesn't contribute much, if anything, to the document's purpose."
1,The design approach presented is a 'general' approach that can be applied to literally any software problem.
1,The explanations are very brief and absent in some cases.
0,yes they have given visualisation of all the issues and explained very well what and where the issue is. and they have also given flow diagram of how they are going to track the progress of their project. Mentioned about the approach they plan to follow.
1,"yeah, they are solving issues one by one. issues seems easy, but they may have complexity involved in depth. 
They have not mentioned any design as such to solve the issues, but just the issues."
1,"This project is regarding solving the issues related to deadlines, as marks are deducted automatically when user does not submit the review on time. They are not as such following any design they are solving the issues in current system."
1,"They have given good description of the issues but they have not mentioned about what exactly they are going to do to solve the issues, as it have been mentioned in all other wiki pages i am reviewing except this one. But otherwise team has done good job in giving full picture to review about the issues and their test plan."
0,The design includes the test plan.
0,The class diagram and/or other figures clearly describes the changes to be made to the system.
0,"Yes, it kinda is simple"
0,"Yes, the design does appear to be sound."
1,"The design includes the test plan. However, the team could have better explained the testing phase in the documentation. The features which will be tested in the late_policy_spec.rb and late_policy_controller.rb is also not mentioned by the team."
1,"The team has not attached any UML diagrams. The screenshots give an idea about how the User interface will be affected by the proposed code changes. However, use case diagram or a class diagram can give the reader more insights about the code implementation and the new features being added or getting affected because of the same."
1,"The design looks medium complex. The implementation proposed by the team, involves changing the current method to some extent and adding new methods to solve the issues related to deadlines and late policy."
1,"The design appears good. The team has properly explained the issues with the current code and how the new code will be implemented to overcome these issues. Along with that, the team has attached screenshots of the places where the code will be reflected. This gives the reader an idea about how exactly the code will affect the application."
1,"The diagram related to the changes in the implementation is well described. But, it only covers part of the issues/changes proposed in the design. Like, it does not cover the issue related with dates updater."
0,"Yes, the design appears to be very simple and clear as it is well documented and they have clearly expressed the changes in the flow in the form of diagrams."
0,"Yes, the design sounds good and it followed appropriate principles but it is not clear which patterns are being used by them."
1,"Overall, they have explained the changes they are going to make in the system.
But, they have not explained how their test cases will definitely increase the test coverage which they claim to be. They should have mention some of the examples of how they will include edge cases in the test cases apart from the happy path. Like, they could have mentioned in the ""automated testing using rspec section"" that they will test whether on copying the assignment having due dates the same gap is preserved or not when you increase/decrease dates from date updater."
0,"> Yes they have included both manual and automated test plans.
> The test plans covers all the functionalities and also the corner cases."
1,"> They have added few visualizations that make it easier to understand.
> Few explanations to these visualizations could have made it more readable."
1,"> The design does appear to be simple and the changes seem to be most optimal.
> I would have appreciated some more points in the HOWs for the changes probably."
1,"> Yes the design is sound and follows the principle.
> No mention of the patterns, however.
> A lot has been explained in the existing issues but a little more into how they resolving them would have been appreciated."
1,"> I think the existing issues have been explained but the changes proposed could have been more detailed.
> More details to expected results and the diagrams would have been appreciated."
1,"I think that the design has been explained quite verbosely by the team, with the help of pictures and diagrams and is much easier to understand as compared to the one provided during the first submission. So great job on that!"
1,"I think the tests mentioned in the test plan give just a bigger picture of how things would look if the implementation is done correctly.
The team has however, not made a note about the edge case that are possible and how they would be handled while making changes to the current implementation. I am not insisting on providing an pictorial representation however at least some brief explanation could have been provided."
1,"The team has followed the review comments to some extent and has added annotated screenshots and a flow chart corresponding to their project.
However, I still feel that the flow diagram under the ""Approach"" section is redundant and is not required.
The flowchart under 'Expected Results' explains in a better way about the feature implementation post the changes and serves its purpose correctly."
1,I think that the design appears sound and most of the changes have been made to the document by considering the comments provided in the round 1 of the reviews. So overall the team has done a decent job after round 1.
1,"The flow chart under 'Expected Results' gives a decent bigger picture of how things would look like when the implementation is all set and done.
However, I feel that again there should have been a detailed explanation about the files and methods being changed and how this would affect the current implementation. 
As mentioned in the previous reviews, the section under project scope appears to be vague with not much details about the estimated code alterations."
1,"They have test plans, it could be better to not only use automatic Rspec test."
1,"They write what should be changed in the 'Project Scope' part, however, it's not very detailed. You can specify which method or model should be changed."
1,"Yes, the diagram is clear and easy to understand, however, it could be better to add more details."
0,"Yes, from the diagram I can see that their design appears to be sound."
1,Their explain about the changes is a little high-level. Such as 'fix the function in ruby'.
1,Manual testing steps are given properly but there's no detail for the Rspec changes. As the team is planning to create two new files for the test cases but it would be great to include what test cases will be included in these files. Coverage behaves unexpectedly so I am not sure if it's viable to assert that addition of test cases will increase the coverage.
1,"There's one UML diagram in the document which explains the flow of late policies. The diagram explains the flow for the post implementation but it would be great to describe the diagram with some text. Aren't there any changes in the DB ? There's no design so i can't figure out but it there's change impact in the DB, kindly include the appropriate ER diagrams."
1,"As mentioned in the above question, there's no design section in the document as well as proposed solution, It's not possible to comment on this question until there's a design. Kindly include the design or proposed solution."
1,There's no design or proposed solution given in the project. Only the requirements and expected changes are mentioned in the document. Many of the issues are UI changes but there's no detail about how these will be fixed.
1,"Changes are not mentioned in details. Very few changes are explained, also if there's no design then it's not possible to figure out what changes will be done in the system. I can figure out based on the issues listed but it takes time and should be included as part of the design document. There are no details about the files which are supposed to be changed."
1,"Test Plans are important as the newly added code does not affect already existing in place features of the application. The team has documented the test plan. However, it lacks the exact places where the rpsecc testing would be done, and which features will be tested."
1,"The team has added a use case diagram. The diagram gives the reader a basic overview of what changes are expected in the application and at what places on the user interface will these changes affect. However, a class diagram with better code explanation would have sufficed."
1,"The documentation lacks proper explanation on the implementation of the new code. The team has attached screenshots, but without a proper understanding of the expected code changes, it is difficult to decide whether the design would be simple or complex."
1,"The solution design appears okay. The team has explained the current scenario and the places where the code changes are required. However, the documentation lacks the exact places where code changes are expected and how those changes will affect the application."
1,"The authors have explained expected code changes, but they are on a basic level. Deeper insights into code implementation can help the reader understand the features of the system better."
0,Test plan well documented
0,Flow chart is provided. Also the issues and changes have been show in images.
0,Simple and easy to understand.
0,Good explanantion.
1,Nothing about which parameters will be tested has been written. It would look more clear if the team mentioned what parameters they plan to test according to the changes made
1,The team has given a flowchart to explain what the implementation will look like after the fixes have been made
1,"It is difficult to determine the design the team has intended to implement. 
For every issue, the team has mentioned 'fix this issue' in project scope.
It is not mentioned anywhere what the 'fixes' are."
1,The intended flow is not very clear. The team has identified the issues through UI well. But it is not clear where code changes are required and what pattern is planned
1,"From the document, it is very clear what the issue in the current system is, in terms of functioning.
However, that is just the project description as provided in the project description document provided to us.
Nothing has been mentioned on code level what is wrong, what part of code needs to be changed or possibly what methods could be added/modified to make the desired changes."
1,There is a screenshot
1,No was design proposed.
1,No specific changes were proposed.
1,"The document only mentions the f required functionalities, but not how the functionalities will be achieved."
1,The design plan is completely missing and the test plan needs to be much more detailed.
1,"The user diagram could be made easier to read, in my opinion. I believe leaving feedback on it in round 1, but I cannot specifically recall. The numbers can be quite confusing and the way it is structured (visually) makes it clunky to read - not to mention the graphics themselves could be done much better in a program like lucidcharts or draw.io."
1,"1. Team has not created any diagrams to explain the design, they have just mentioned about basic structure of solving issue and testing issue in loop. 
2. No UML were created
3. Diagrams seems irrelevant"
1,"1. No, classes looks correct 
2. what design they are going to follow is not written thoroughly, team has just mentioned about files to be modified and the issues in the file
3. Design or issues does not look that complicated to be resolved. 
4. New design wont effect the response time of the system. 
5. Yes, team should have spend some time and gave more details about design."
1,They have not really proposed about what exact solution they are going to implement to fix the issues. Explanation is inadequate about HOW they will be solving the issue.
1,"Team has incorporated all of the things in majority but explanation could have been improved. In test Plan section team has mentioned about running test cases which is good but what new test cases for all the issues are going to get added, team has not mentioned about them. Enough explanation of what issues are there is done but team could have give a better explanation about how they are going to solve the issue rather than just telling about the file names. some of the issues are self explanatory but for some other issues it needed more explanation. Like for issue 2, 5"
1,"Wiki page overall looks good to me, but they could add some more details about their approach to solve the issues, and some more details in test plan. Team has written very basic details in these sections. Rest things look good to me."
1,"The write up lacks UML diagram. Use Case diagram helps the reader to understand the scenario and get an idea of the proposed implementation. However, the write up lacks Use Case diagram. The team has however added screenshot of the page where issues are present and the features on which they are working. However, the diagrams can be improved further."
1,"The new design lacks proper explanation. The team has written the expected results. However, the file names, the type of code that will be changes is not explained. Also, the write up lacks the test plan description."
1,"The authors have proposed changes for the given issues. However the proposed code changes could have been better, if it was supported by comments, and description of files where the new code will be written."
1,"The design explains the issue as well as the proposed code changes. However, the explanation could have been more detailed. The test plan also lacks description as to what files will change and which new functions will be tested using the rspec model of testing."
1,"The design documentation lacks the proper description of code changes and test plan as well as the UML diagrams. The team needs to work on the documentation and add diagrams, file names which will undergo changes and comments for the same."
1,"Overall, they have used diagrams well and are easy to follow. They have provided their approach to implement the project in a nice flow diagram evaluating each code change well. Just the approach diagram provided is high-level and they should have added another diagram that adds to the approach diagram and provide more low-level details like from which parts of expertiza sections(Model, View, Controller) data will flow to achieve the approach proposed."
1,"From the proposed changes they have included in test plan section, the design looks good that they are adding two spec files to handle test cases related to fixes in the required files and are also using the existing gems to improve code coverage."
1,"They proposed only test related changes in the test plan section. Also they did not explain in detail apart from adding two spec files about what will be the content of the test file or what cases they would test. For example, they could have added test case like that check whether correct edit assignment page renders on click of back button."
0,Yes they have covered all the functionalities mentioned in the project specification.
1,"> Approach flowchart is added however it's hard to follow through without explanation.
> Diagram follows the conventions.
> The only flowchart is high-level.
> More UML diagrams, mockups would be appreciated."
1,"> All the required functionalities have been covered in the design.
> Project scope describes what needs to be done and then there's expected results. However, how and what to be done is not mentioned clearly. There's a diagram for the approach but the team should describe it also."
1,"> Class mentioned for changes seems to be appropriate, considering most of the changes are in ""late_policies_controller.rb"".
> Doesn't seem like the new design would make the code smelly however more explanations need to be added to come to the final conclusion.
> Design seems straightforward.
> I don't see any reason for performance improvement or better response time.
> Design needs more explanation and specific Whys and Hows."
1,"> Quality of explanation is not very good. More details should be added.
> The ""Approach"" flowchart is added but it has not been explained.
> Problem statement is also very briefly explained."
1,"> Most of the sections are added however they need more elaborate descriptions.
> Please add more description to what exactly you are changing and how it will help."
1,"While reviewing the document I felt that, the flowchart mentioned under the 'Approach' section is too generalized for the project since that would be the case for any project.
Hence, it does not serve any purpose in understanding the requirements of the team's approach towards the problem statement. I would suggest that the flow chart is redundant and should be removed from the document.
Rather I'd encourage you guys to add some case specific UML diagrams and/or Database Design which would make it easier for the reviewers to understand how things are actually taking place at a lower level.
Also the screenshot put in the document is just copied as it is and left to the reviewer to understand what is actually wrong with it. I would highly recommend that you point out or highlight the flaws in the current design which would give more value to the image added."
1,"I think that the document covers most of the functionalities that are not working in the form of pointers however, it was also expected that you mention a high level proposed solution saying where the changes would be made and how would you implement those changes."
1,"The language used for the changes made in each of the controller and model is vague and hence I cannot comment on whether the authors plan to add a method to a wrong class.
All in all, due to the abstractness of the document, the problem statement was easy to understand however, when it comes to understanding and comparing the current and previous implementation, not much can be commented on it."
1,"As explained in the previous comment, the explanation for the proposed solution is too vague maybe because the team has not come up with a solution themselves and hence was not able to explain what has to be done. 
Like under Project scope, instead of just writing 'The scope of this issue is to fix the function in ruby and write appropriate test cases' every time, mention specifically as to what is wrong and what changes would be made in that method/class.
Same thing with the flowchart."
1,"I think there were a lot of changes that need to be incorporated in the document i.e. removing some redundant sections, altering some content and adding some stuff.
Add UML diagrams and Database design in the document if possible.
Adding some annotated screenshots is a must. This makes it easy for the reviewer to visualize what's going on.
Refactor your content indexing as every sections comes under 'Fix issues related to deadline and late policies'."
0,"No design is not that complex, they are providing a button to the author so they can notify the reviewer that they have given a new submission before that particular round ends and reviewer can review it again. I think that is good method, because email sending is already there in expertiza, they can use that or rather than sending the email they can send some kind of notification to them in expertiza, but for that reviewer will have to come in expertiza to see notifications. so email sending functionality makes more sense."
1,"The test plan is missing details, I think it's better not only use the automated code."
1,"In your 'Approach' section, their diagram is too high-level design. I think it's better to clarify what the expected output is."
1,"The diagram and test plan are too high-level, and I cannot find the proposed solutions."
1,I cannot find their proposed changes on their wiki page.
0,"Yes, they incorporate all of the functionality required."
1,There are no proposed changes in the document. Please include this in the doc. It would be good to have UML and ER also along with the approach.
1,"There's no proposed solution in the document, how the team will approach to fix all these issues with the current implementation. In test plan, team has mentioned that they'll create test files but what all test cases will be written in that is not mentioned anywhere. There are no details for the manual or UI testing. 
Please include the proposed solution how these bugs will be fixed, also UML or ER diagrams can be added to understand the design more appropriately."
1,"There are no details for the methods, classes which will be edited to fix the issues. It's difficult to comment on this question until those details are available in the document."
1,"There's a flow for the issue fix, test but not for the actual use cases. No UML, ER is available in the doc."
1,"There is no UML diagram. They have included a vanilla diagram, stating really general things like analyze the code, make the corresponding changes, test it etc. Milestones could have been more detailed as well."
1,"Testing plan is fairly inadequate, it tells what files would be changed, wherein it should be telling of all the different edge cases, explaining the handling. The UI driven testing segment should be a stepwise traversal on the URLs that'd tell the user how to test if the code is functioning as expecting."
1,"The good thing they have demarcated the issues clearly, and at a low-level as well. Like what button links are missing and all, however, there hasn't been a profound study on how they'd do about implementing the same. The topic being about late submissions, it deals with job scheduling, there is no mention of that in the architecture anywhere. Expertiza, for instance, uses Sidekiq, how would that be addressed?"
1,"Not enough content to evaluate this question. There's no mention of code changes or the files changes anywhere. Please include it all in the next review. The models you'd be touching, or the schema tables, just include a snapshot of the same."
1,"Project scope is defined at such an abstract level, no details provided about the files and all whatsoever. No file names specified. There's no proposed code changes as well, no comments. Can't get an idea of what would be done, and what impact it'll have on the other segments."
1,The flowchart is kinda useless.
0,Design seems pretty straight forward.
0,"They mentioned what files need to be changed/created, which is good."
1,Could have explained what is the current implementation.
1,There is a flowchart but it doesnt add much value to the design document. Because the flowchart is general and about the steps of project lifecycle and not about actual plan/action/code the team wishes to implement or flow of code.
1,"It is clear what the issues are in the current implementation.
But it is not clear what they plan to change and where the changes will be made, what methods will be added/modified.
In the test plan, it would be nice to learn what parameters the team plans on testing"
1,"The authors have explained the issues well.
But not much is mentioned about the changes or how the changes will be brought in."
1,"It covers almost all necessary functionalities required in the document. Although, the flowchart and project scope sections add no value to the document."
1,"The design document has all sections required. However, lot many details are missing in some sections."
1,"The team mentions the files they will be changing and notes that they will need to add some methods, but they don't mention explicit method names. It would be good to add this or a uml, rather than just a list of files that need to be updated. I don't think the code will be smelly because the plan is to add computation-related checks in calculation methods. It is not particularly complex, as UI designs and code updates are kept minimal. These simple changes won't have an effect on response time either. I would just list out the methods you are planning to add, which will give it more detail."
0,The visual aids are good. But its location can be arranged better.
1,"They add a visual aid to their profile email preference problem to explain how it works. It is clear to understand. But I think a line between ""Author"" and ""Review"" should be added since author should see reviews. And they can add visual aids to their other problems to explain their plan more clearly."
1,"only one doubt - why ""it 'returns Unknow' do"". shouldn't that be unknown??"
0,Good write up.
1,"Link is down so cannot be verified, but was working when checked last time."
1,Coverage decreased by 2.2%. Also test cases have been added.
0,Yes Travis CI build passes.
0,Yes many commits have been made
0,"improved bad naming, follows DRY method."
1,"Given the writeup and the screenshots, I would say yes but the link is broken so until one could test the functionalities properly it is difficult to say that it can be deployed onto the production server."
0,The writeup is very clear and has codes and screenshots to explain the working which comes in handy while reviewing.
1,The link provided doesn't seem to work so could not test the features if they are working or not
1,The team added test cases but the coverage has overall decreased. It covers 16.586% of the code
0,"Yes, the build passes in Travis CI."
0,"Yes, the team has committed during the second round. Made changes in the test cases."
0,"No, the code was good in the first section itself and so did not require such changes."
1,"There are no test cases at all in the recent pull request, the write-up has no test case code or test plan as well."
1,"There are no test cases at all in the recent pull request, the write-up has no test case code or test plan as well. Even if test cases aren't written, you could document the test cases and define the test plan by demarcating the edge cases so that they can be implemented at a later point of time."
1,"There are all in all three methods included, all one-liners. Can't be shortened, neither can be extracted into separate methods. Code commenting not done, git commit messages have a specified format as well, which is not followed."
1,"There's no commenting on the code committed at all. Comments are required while adding new snippets of code, as they provide a readable explanation of the code for other developers to follow, and hence should be given their due importance. The newly added code does not have enough comments to portray the proper flow of code."
1,"The test coverage decreased from 13.9% to 16.586%. The build has passed as well. DRY principle followed thoroughly, method naming is according to the ruby code of conduct. They do perform atomic functions, all the methods introduced are one-liners only."
1,"The latest pull request does not cover test cases. The refactored code should be tested in and out before releasing it for prod. Test cases ensure the previously written code is not failing anywhere due to the recent changes, and we can be ascertained of the changes. The write-up does not include the test plan."
1,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. It could have included the before/after snippets showing a clearer comparison of the two, or rather the screenshots of the code. No test plan coverage documented. Other details like team members details or short video explaining the passing test cases could be included."
1,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. It could have included the before/after snippets showing a clearer comparison of the two, or rather the screenshots of the code. No test plan coverage documented. Other details like team members details or short video explaining the passing test cases could be included."
1,"The authors work functions well. It was a difficult task, to create a  staged deadline assignment and finish the deadlines. However, I was able to test the scenarios and the refactored changes seem to work well. The stage deadlines respond properly to the finished? method for any given topic as well as if the topic is missing a deadline as it is a last assignment."
1,The authors have not added any test plan in the write up. There are no test cases present in the most recent pull request.
1,"The newly added code has short functions performing atomic tasks. However, more comments are needed to understand the flow of the functions. The function names do not follow the ruby code of conduct. The function topic_missing? can be rephrased as is_topic_missing(topic_id). The functions should follow proper ruby code of conduct for the reader to understand the flow of the application."
1,"The pull request shows that the newly added lacks enough comments. Comments are required while adding new snippets of code, as they provide you a path for better understanding the flow of the refactored code. The newly added code does not have enough comments to portray the proper flow of code. More comments are required."
1,"The pull request shows that build has passed. The coverage decreased by 13.9 %, falling to 16.586%. The method names of the newly added methods, are according to the ruby code of conduct and perform atomic functions."
0,"1. Methods and classes look good, which team will be modifying.  Questionnaire model is required to get non weighted score and calc is required to get weighted score. Potential changes will be done in corresponding spec files too. UI files are also mentioned. 
2. New design looks good to me. As i have done work in questionnaire controller i can understand the design. 
3. No new design does not looks complicated. It seems like easy design and those changes are needed to be done in those files only.
4. No, design is not complicated and even it is not making that much of change which may effect response time.
5. No, team has done good job in explaining"
0,"I believe the design definitely looks complicated but it might need to be. If anything, it just looks like it might be a lot."
0,As far as I understand they follow good approach.
0,No such problems so far
0,"I think they found the right files and right classes to add code to or change code. For example, the on_the_fly_calc.rb is responsible to calculate review scores."
0,The design seems fine.
0,Design is detailed
0,They've taken a lot of effort to make the diagram concise and self-explanatory. Going through the diagram lets user understand most of the design doc easily.
1,Design doc doesn't contain details about the function or how they're planning to encounter the problem.
0,Changes proposed are clear and descriptive. An adequate explanation is also provided along with it.
0,Design doc explains everything in a detailed manner. It covers all the problems mentioned in the problems page.
0,wiki page of this project is very informative and it is easy for anyone to understand what the project is about and how they approached the problem.
0,"Yes, from UI point of view, system is working as it is supposed to be."
0,yes they have added 2 test cases to test the functionality that they have implemented.
0,yes they did keep committing their code after the first round of submission.
0,code quality is very good. Variable and Method names are self explanatory and comments are very handy to understand the code.
0,"Yes, test case has been added and it has good coverage,"
0,"Yes, commits have been made  in round 2"
0,"I think that most of the functionalities seem to be working fine however, before deploying or merging it with the production server, I would recommend that the implementation be tested rigorously for edge cases either an expert or any TA."
0,The adequate test cases have been added to Rspec files and the code coverage seems to have increased.
0,The Travis CI build failed once before but I think the team made sure that the conflicts were resolved and that the build passed.
0,"Commits were done continuously during the period between the first and the second submission but the number was not considerable and would be proportional to the task being implemented.
Also the label given to the commits are quite verbose which makes it easy to keep track of the changes being implemented so great job on that!"
0,"The code looks well written since not many changes have been made (except for the unit tests in rspec) with reasonable variable and method names. 
Moreover, comments have been added wherever required which again makes the code even more intuitive to understand."
0,"The writeup does a very good job of introducing and explaining the topic, the issues and their solutions.
The team added a Test Plan section to the writeup as was suggested to them in the last review.
The Test Plan shows the code coverage after adding the new test and the code snippet of the actual test.
The team has also done a great job of identifying additional problems in the views and actions related to Participants that were not a part of the assigned project and how they fixed those issues."
0,"The system operation works as intended on the UI. All the new changes could be seen working on the team's deployment link.
The test 'validate_authorizations' in the participants_controller_spec.rb covers the scenarios when the updating is successful and when there is an error in doing so."
0,"The test 'validate_authorizations' with 2 cases was added to spec/controllers/participants_controller_spec.rb.
In the writeup, the team says that they got a 100% code coverage result for the new code that they added to the update_authorizations method in the participants_controller.rb.
The result of coveralls on the Pull Request page shows that the actual code coverage decreased 0.9% to 29.554%, which is a very little decrease and can be considered as an increase in code coverage from the initial submission."
0,"There were 5 commits made during the 2nd round, out of which the commit '6ba1e4f' dealt with adding new code for flash message after updating participant attributes to app/controllers/participants_controller.rb and the corresponding test to spec/controllers/participants_controller_spec.rb.
The commit '945008b' dealt with the change to participant header, which involved small code additions in multiple html.erb files.
Commit 'fc7f4ca' dealt with fixing the handle issue with import and and adding a test in participants_controller_spec.rb for case where an error is encountered in update_attributes.
In the other 2 commits, the team added comments to all the code changes that they made."
0,"The overall new code was very readable and understandable. There were no bad names, long functions, redundant lines of code used.
There were no DRY problems and the team made a successful effort of adding comments to each and every change that they made to their project.
The newly added comments definitely helped me in understanding the code flow and gave an understanding of the team's approach to the new test and the project as a whole."
1,"As said above, please correct the problem of submit button being completely invisible. Rest all looks good to me."
0,No issues with writeup. Everything was explained clearly.
1,"There's one issue I noticed. The submit button that the team showed in the documentation is not visible. The button is present at the same spot as shown in the pictures in the documentation, but it is 'hidden'. Using browser Inspect element, I noticed the problem.
<button name=""button"" type=""submit"" id=""button7487"" style=""font-size:15px; opacity:0;"" class=""btn btn-md btn-default"">Submit</button>
The button is given opacity of zero, which means it is not visible but it is present at the spot. Please correct this problem."
0,The team has added testcases and this increased coverage.
1,Travis build didn't pass. The latest performed on November 6th has build failure. The ones before the last commit has travis build pass.
0,Yes there are new ones.
0,"More comments were added, which helped understand code clearly."
0,Write up is clean and easy to understand.
0,System changes are working as expected.
1,Build did not pass for this project.
0,No new code added after the deadline and author made few changes during round 2.
0,"Code is pretty simple and DRY, easy to understand what is author doing in code."
0,"Tests were added for checking if a user's authorization to be a reviewer was changed when their role was changed. It looks like coverage only decreased by .9%. However, the team achieved 100% coverage on their tests."
0,"Yes, there were a few commits throughout round 2."
0,"The code seems to be well-written, and was mostly front-end or test-related. The added code is DRY as well, and doesn't have much duplication. Functions look short as well."
1,"I cannot see the submit button on the UI when I compared with the photos on wiki page. The submit button is invisible but I clicked on the area where it is supposed to be the functionality works. 
So the code is working, just I cannot see the submit button."
1,"It has two issues:
1. Submit button is not visible on GUI.
2. Travis CI build failed.
Both of these issues are minor when I had a look at the Github repo and could be easily fixed, I encourage the team to go through the project again and fix this."
0,The writeup is well organized and one can figure out what the problem has been solved very easily. the photos made it very clear. Test Plan tells us the rspec test written by the team.
0,"Yes, the test case for validating authorizations has been added."
1,The Travis CI shows build failed. There is one failing check.
0,"Yes, new code was committed in the round 2.
Issues fixed are related to import functionality and test cases."
0,The code is well written and commented.
1,"The code not yet ready to deployed onto the production server, because not all the pass of Travis test pass."
0,"yes, they have a workable UI, and it work as intended, their project intend to change the assignment participant  role, and it work when a instructor assign a role to them."
0,"Yes. the coverage decrease, Test in participant_controller spec + flash message for update, this is a meaningful test, however more test need to be done."
1,"They didn't pass all the Travis CI, However there are not conflict with the base branch, so I suggest go back code and make more test to test the functionality."
0,"yes, they did have new code committed during the 2nd round."
0,"The code is well documented and there is no bad names, long or complicated functions or bad code style."
0,Clear writeup.
1,"Yes they did, but the coverage decreased."
0,I think this code is ready to be deployed. Because the function works very well and two tests have been written for the function. the changes now can be successfully reflected in database. issue fixed.
0,"Their code works very well in the first round, and still good now. 
I manually tested their function. The function does reflect in the database, so full marks."
0,The build passed in Travis CI. No conflicts.
0,"Yes there are 3 commits on Nov.4 and Nov.5.
They added tests and fixed bugs.
I think it would be better if you can commit more to handle all the issues from the first round."
0,"I think it is better to write more commits for others understanding your code. The code is good, no long method, no bad coding style."
0,they did really good job in order to resolve the problem. best possible solution.
0,they used ruby guideline in good form. i can not find any major problems.
0,very well methods comments are given. every one can understand from comment.
0,"name of the methods, variables all are well formed according to ruby guidelines."
0,yes wiki page shows correctly all the problems and screen shots of the solution. you guys should also add the main code snippets.
0,team did best that they can do to resolve the mentioned problem. I can understand the project by reading the wiki page of the project.
1,no automated tests have been implemented
0,code is written optimally and principles seem to have been followed
1,not many comments are added
1,does not specify any test plan
0,the writeup explains well the issues and changes made by the team.
0,"writeup is well written
it is descriptive and gives overview of entire project"
0,I have gone through all the features and can say that they are working fine and thus say that they have been implemented correctly.
0,"The function code is not too long, it follows great ruby style coding and it is all correctly modularized.
I would only recommed you to add comments to make the code more intuitive."
1,"The comments have not been in the code as to why a line has been added.
I would recommend that you add some comments just above the changes being made so that it becomes intuitive and easily understandable for the reviewer or for that matter any user who is viewing the code."
1,The document does not consist of a Test Plan section covering all corner and edge cases.
1,"After going through the wiki document I can say that the bugs were explained correctly, the description of the project was concise and could be understood in a single go, the testing from UI section was explained in a detailed manner along with some visualizations (with the help of screenshots) and most importantly, the test coverage was addressed.
The only thing I can point out is that the code should have been included in the document under the 'Files changed' section along with the newly added or altered lines of code highlighted with some other color. This would prevent back and forth navigation between github and the wiki document, just to view a couple of changes being implemented."
0,The write-up is very well written in plain simple English and makes it easy relatively much easier to follow rather than trying and testing the functionality and UI directly. So kudos to that!
0,Contains only minor changes. Everything looks fine.
1,"It was only mentioned that 'We have noticed that the test coverage increased by two percent.'. If you are testing, please describe the test cases and their results."
0,All the navigation is clearly explained.
0,Very clean. Easily understandable.
0,"Tested  the changes made, functionality is working  as it is supposed to work."
1,No test plan is provided but changes seems to be trivial and working.
0,Code is according to ruby style coding and DRY.
1,Comments are missing but looking at method one might be able to understand easily what is being done. But a small line of comment would be helpful.
0,Variables and method names used are reasonable and suggestive. I had no problem understanding what changes are being done.
1,I don't see the have made few changes and test coverage also increased but i don't see any test plan.
0,Write up is clean and easy to understand. It shows what author wants to do and how they have made changes.
0,"Writeup is easy and descriptive, steps are provided on what needs to be done and how changes should be tested."
0,The code works as intended and I could not find any failing edge cases.
1,"Since it was a bugfix, there is not much scope for the code to be of poor quality with regards to good practices. The only issue I could find is the absence of comments."
1,I could not find any descriptive comments explaining how the code works. I think a short comment describing the changes to export_file_controller.rb file would suffice.
0,"There are no new methods or variable names being introduced, so nothing to review here."
1,"No, their pull request did not pass in Travis Cl. (both pull requests in round 1 and 2)
It seems like they did not keep working on the wiki page at all, it is the same as the first round."
1,"The writeup only mentions that the test coverage has gone up but there is no test plan section mentioned explicitly, nor could I find any mentions of tests other than that they have tested the code and it works perfectly."
0,The writeup is quite clear and there are sufficient screenshots explaining the changes as well.
0,"Yes, I was able to log in as an instructor and change the role of a student in an assignment. Furthermore, I was able to refresh the page, and the role stayed the same. This means that it saved to the database properly."
0,N/A there is no test plan.
0,The writeup gives a good explanation of the current functionality compared to the desired functionality. It then discusses which files were modified and why. They did not use design patterns. I think everything was explained well in the writeup.
0,"Sorry the VCL site is unreachable, so I wasn't able to test it."
0,The code added/deleted is easy and simple to read.
0,"No new methods have been added, so no need for any comments."
0,Only 5 lines of code have been changed which involved slight modifications. The names used/added are valid and suitable.
0,"I did not find a test plan in the pull request, although I am not sure this project requires a test plan."
0,"Yes, the wiki page clearly explains the issues, the implementation and the modified files."
0,The writeup is well explained and ample screenshots have been added to make it easier to read and understand.
0,The server is down so I can not test those features.
0,"I only know is they probably did some test, but I don't know the test plan concisely."
0,no problem
1,There is comments for each method but those are not too meaningful
0,The test coverage did increased.
1,Test Plan only said the there is coverage increase but not specify which part they modify.
1,"The screen shot did explain what they did, but there is no code in the wiki to see where they change."
0,Coding style looks good.
0,Looks good to me .
0,Really clear.
0,The work is good. Work is saved in database. bound case as looking into the data using student end works good.
0,"The pull request is green, test coverage increased by 2%. Codes revised are all reasonable or suggestive of the functionality. Good job fixing the bug!
 
Better if you can put your code changes and test changes that you have done on wiki."
0,"There is no code written. Looks like that after they pushed their changes, some tests already written can be passed so there is 2% increasing in coverage."
1,"No comment. Because the work you have done is related to models and controllers, so it is not easy to read into your code without any hint. Better comment your code for each change."
1,"On wiki, they stated that ""We have noticed that the test coverage increased by two percent."" but what made the increase of test coverage?
There is no test statement or code on wiki and I did not see any one github repo either. The issue is fixing bug, but I think there is some way you can display your solution on tests. 
 
(Plus in project rules, ""For each project, you must write related tests."")"
1,"On the wiki page, they stated the issue, and how does the view work after they fixed the issue, but they did not explain what part of code they changed and why the change. I looked into their github commit, there seems some changes in the helper model and export file controller. Not sure are those the correct corresponding files? I think you have better put your code on wiki so that everyone can see what and why you made the change."
0,Checks were passed
0,"Yes, they did pass in the Travis CI. 
They improved a lot of things in second round and did the project very well."
0,"Yes, they did pass all the Travis CI test. and I have check all the pull request on Github."
0,The build is passing in Travis CI. There are no conflicts to resolve.
0,Build successfully passed. There are no conflicts in the pull request.
0,"Yes, the build is pass, Also there are no merge conflicts with the main branch."
0,Travis CI Build successfully passed. There are no conflicts in the pull request.
0,This is an Expertiza project. Yes the build passed in Travis CI and no conflicts was found with the base branch.
0,pass pull request
0,"The Travis CI Build passes successfully and clears all the checks after the last commit.
There is no conflict that needs resolving."
0,"It seems okay to be merged, if the UI testing is passed"
0,"Yes, I do think this project is a good starting place for a future team, but it may not ready to be deployed on to the production sever since I cannot check it online. (the website on the VCL is crashed.)"
0,"Yes, the have a detailed test plan and all the test pass, so I think it is ready to deployed onto the production server."
0,Yes the project can be deployed on production server.
0,"Yes, code can be deployed to the production. All the test cases passed, comments are added and code follows the design principles, so this looks like a production ready code."
1,"Yes. The build is pass and there are no merge conflicts. Also, they have added comments wherever possible. But the overall coverage has decreased a bit. Might want to consider this?"
0,"It's a production ready code now, All the test cases passed, comments are added and code follows the design principle."
0,I think the code is of good quality and ready to be deployed.
0,"I do not see any conflicts of the new code with the production server, which is backed by the results of the Travis CI build and the Pull Request page that shows that there are no merge conflicts.
I don't think this project should be redone from scratch and this is a very good starting point for a future team to pick up."
1,"The write up did very well.
All the required parts are mentioned. This team described the issue clearly and give detailed solutions. (However, I cannot log in to do the test.)
And they gave the screenshot to navigate reviewers to know that they did."
0,"The writeup is clear, they well explain all the code in expertiza wiki."
0,The documentation is in-depth and explains the issue and its fix in detail.
0,"Team has spent fairly decent amount of time to improve the write up. There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future which will help the expertiza team to list the future enhancements."
0,"Team has spent fairly decent amount of time to improve the write up. There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future which will help the expertiza team to list the future enhancements."
0,"The writeup covers all the required components and sections. They have explained each functionality they worked on plus the test cases for that as well has been written to test the new code. Also, a guide to manual testing is given which was helpful to test their work."
0,"Write up is really good, the code changes are explained fairly along with the problem description. I could also understand what is the impact of these fixes and features on the expertiza. 
There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future."
1,"I think the writeup is great. There are 4 issues in this project and all of the 4 issues are well defined. Also, for each issue the solution is provided to explain the plan or idea how the team will fix the issue which is helpful for reviewers. The code change shows in which file and how the code is modified, which is very clear.
If the team could add more details about how to check the work will be better.Overall i think the quality of the writeup is great."
0,"The writeup is very well written and introduces and explains the project, each issue and the solution for each issue in a very detailed manner.
The authors have improved on the writeup by adding a Test Plan section to it, which was previously absent from the initially submitted writeup.
The Test Plan section granularly explains tests for each issue and the corresponding way of testing it in the UI.
It also gives a very good idea about the team's approach to testing."
0,"They deployed server seem down so that I can not test the UI operation, so It is hard to say it work as intended, but from their expertiza wiki, those feature should work as they supposed to."
0,The fix addresses all the issues and works as intended.
1,Three bugs are working fine and also the extended feature. Steps given in the test plan of wiki doc helped to test the application. VCL is little slow so it's taking time to test but that's not the project issue.
1,Three bugs are working fine and also the extended feature. Steps given in the test plan of wiki doc helped to test the application. VCL is little slow so it's taking time to test but that's not the project issue.
0,"Yes, it works as explained on the wiki page. The features work as they are expected to. Also, they have written enough test cases to test the new code written."
0,This project is to refactor and fix code. There are four issues in this project. The features after fixes work as they are supposed to. The details of code modification have been uploaded to wiki page which is clear.
0,works
1,UI could not be tested as the deployment link does not load.
1,"Yes, they did add some tests, however, the coverage not increased.
The thing is, I still cannot log in to the website on the VCL. the website is crashed."
0,Coverage decreased (-3.3%) to 27.175% when pulling ac1cf81 on NisargC:beta into 28eb0da on expertiza:beta.
0,Test cases have been added to the project and  the test coverage has increased.
0,Team has added significant amount of test cases. Coverage has decreased by 3.3% but test cases are in place for most of the changes except for one new feature but that is clearly mentioned in the wiki that functionality didn't have any test cases from the beginning so it can't be done.
1,"Yes, they have created comprehensive test cases. Almost 5 Rspec case for the new code written is created. But the overall coverage decreased slightly."
1,Yes. The team has added new Rspec test cases. The new test case is used for 'Import_topics_helper' and test expects the attributes should not be empty. The newly added test well covered the project.
0,"yes, have test case
Coverage decreased a lot"
1,"The team did add new test cases to spec/helpers/import_topics_helper_spec.rb and spec/models/team_spec.rb.
In import_helpers_spec.rb, the team added a test to 'define attributes' which confirms the value of attributes and checks if the trimming of ascii characters with whitespace returns a non-empty string.
In spec/models/team_spec.rb, the team added tests that checks if the expected output is 'new team name' and 'no name' when the 'handle_dups' option is
'rename' and 'rename_existing', respectively.
 
 
Although new tests were written, the test coverage decreases and it decreased by 3.3% to 27.175%."
0,"Yes, they added some new code and did the commit during the second round."
0,"Yes, they did have new code committed during the 2nd round."
0,"New commits have been added during the 2nd round.Commits include comments, Rspec test cases  and test cases."
0,There are commits during the 2nd round. Many test cases has been added also some code has been changed.
0,"Yes, they have added few commits in the second round."
0,Yes. The most recent commit was 2 days ago which is on 11/06. There are some new code committed during 2nd round.
1,"There were 7 commits made during the 2nd round, 2 of which dealt with new code in app/helpers/import_topics_helper.rb and the corresponding test in spec/helpers/import_topics_helper_spec.rb.
1 commit dealt with adding 2 tests in spec/models/team_spec.rb.
The rest of the commits added comments to app/helpers/import_topics_helper.rb, app/controllers/import_file_controller.rb, app/models/sign_up_topic.rb, app/views/import_file/_sign_up_topic.html.erb."
1,"In the _add_topics.html.erb
the expected_fields in the form contains a lot of &nbsp which makes the code looks bad"
1,"Yes, they did improve a lot of things including more comments, more test cases, the test plans. Most of things they did very well.
But they still did not improve their website and I cannot check the functionality."
0,"There is no bad names, long or complicated function or lack of comment. look good for me"
0,The code is well written and implements all good coding practices.
0,"There were no comments in the first round, team has added comments in the second round. Design issues weren't there even in the first round."
0,The code is clean. Variable and method names are intuitive and meaningful. They have followed the DRY principle.  They have also given inputs on possible further enhancements.
0,"There were no comments in the first round, team has added comments in the second round. Design issues weren't there even in the first round so looks everything in the code looks good."
0,"I think the quality of the code is great. I didn't find any naming, comments, or code style issue."
0,"The code was well written and follows the existing Ruby naming conventions. There are no bad names or long functions that could have been shorter. 
There are no DRY problems in the code as well.
The new code was also very readable and the comments added perfectly described the new code and made it even more understandable."
0,They have clear and useful visual aids.
0,"From their use case diagram and detabase design diagram, I can see their design is good."
0,"They explained their changes clearly. By adding it to individual models, the search feature could be implemented in a more RESTful manner."
0,"Yes, their design incorporate all of the functionality required."
0,"Their design doc is good, they have detailed test plan, and explained their proposed solution clearly."
1,"The ER diagram which is explained here seems dificult to understand.
Instead having small activity diagram seems to better understand the functionalities proposed."
0,"1) Explain more on the design part and add it to wikipage document
2) Focus on some of the redundant searches"
1,"The explanation is quite good but too lengthy as each point and small changes is described in document
This makes documentation quite long"
0,"Yes, the document do explains and incorporate most of the functionalities required."
0,"Yes, The doc includes most of the topics and approaches."
0,Search for Reviews: -> point 2 empty
0,"Yes, the document does implement most of the functionality."
0,"Yes, it does include every section."
0,"The team has given essential design like Use case diagram, Database design etc.
1. I think that Table Design screenshot is not required.
2. UML diagram follow all the conventions.
3. All diagram provide enough details."
1,"1. None of the methods point to wrong class
2. No
3. The only doubt here is, what if the data is to large, will this search work?
4. I think, the search could be made faster using indexing.
5. No, effort provided by the team is good."
0,Yes it worked.
0,"The explanations are adequate. The possible paths for all scenarios User, Questionnaire, Assignment and Reviews are explained properly."
0,Yes the design incorporate all the functionality. The team has given extensive details on Use case scenarios and functionality to be implemented.
1,The design document seems good. Only thing I would like to add is the Sequence diagram to allow others to understand the flow.
1,I think that the task are implemented correctly and the functionalities seem to be working fine. My only concern would be that the test plan should be much more understandable with the help of illustrative images and steps.
0,the project works as intended and the features work as they are supposed to be.
0,work successfully
0,"Their writeup is good and easy to follow.
I can understand what they have done."
1,"The writeup is great. The team has really explained the core problem that they have tried to solve and how they approached it. However, the writeup would have been much better if the team would have explained the code in a brief manner as it would have enhanced the understanding of the project. The writeup did not lack an explanation of any functionality of any sort. However, the team could have specified steps on how to check the feature from UI because as an Expertiza newbie, I had great difficulty navigating to the desired page."
1,"> The writeup looks decent enough however there were a few things I would have liked to be added for more understanding.
> Testing from UI section only describes what credentials needs to be used. I don't see any flow talking about how exactly the application needs to be tested
> A video demonstration could be added which can show the fix that has been done.
> Fix for the second issue has not been described properly. Would have appreciated more information about what and why the change was made."
0,"the writeup is pretty good. the design pattern, solution, and implementation along with the test plan is explained very well including the screenshots and changes made in the code as well.."
1,"The write-up looks all well organized except for a few areas that I would like to mention below:
1. The test plan is not explained illustratively with edge cases.
2. Moreover, the test plan does not elaborate the steps to test the implementation from the User Interface (adding screenshots there would have made the testing even more intuitive) and just includes the credentials.
3. Code Coverage should have been added which would have helped to gauge the importance of changes being implemented after round 1."
1,"In the first review, I mentioned they did not document the changes made in the rspec files, however, now the documentation also includes a test plan. However, the write-up is still not perfectly organized as it does not contain separate sections for the reasoning behind their approach. The code and description are in the same section making it more time consuming to review for merging the pull request. the manual testing instructions are not given in a separate subsection and just start off in Test plan."
0,"The writeup is well written. They covered issue description, solution, implementation and test plan."
0,It's well explained.
0,successful deployed
1,"They have implemented the functionality well, however they need to pass Travis Ci before being merged into Production version."
1,"The code is not ready to be deployed on the server because the Travis tests and checks are failing. Since I could not properly test the 1st feature, I am not entirely convinced that that feature works. In any case, the team has done quite a lot of work so they would not have to redo the work. The team has brought the project to a level from where another team can continue working on."
1,"> The builds have failed so probably need to look into that.
> I don't see a point of doing the project from scratch but a few tweaks would be good enough.
> Also, code coverage needs to be improved further."
1,the Travis CI build didn't pass successfully. so even everything seems fine. this might not be ready to be deployed into the production server.
1,"No.
The code climate and travis ci have failed. The issue is with how the tree_display controller has been edited. 
While they have successfully made the readability changes, their not choosing to use a new method with understandable name and instead opting to append to existing methods code will make it extremely difficult to merge.
There is need for more comments"
1,"The implementation fixed the problems, just there's one rspec didn't pass."
0,I think it can be deployed.
0,Yes it paseed.
1,"It didn't pass Tracis CI, but no conflict."
1,"Both the code climate and travis ci have failed. The issue is with how the tree_display controller has been edited. However, surprisingly other test cases pass which lead me to believe that this is an edge case where child nodes is null."
1,Initially there were a couple of fails observed on the github repository but then the team made sure that the build passed in Travis CI.
1,the pull request didn't pass the build request.
1,"> The travis CI build has failed. 
> The code climate is also failed.
> However, the branch does not seem to have any conflicts with the base branch."
1,"No, the build didn't pass in Travis CI and checks are failing. There are no conflicts with the base branch. The team have, however, worked a lot on beautifying code and making it apt to Ruby guidelines."
1,"No, they didn't pass Travis CI.There're 2 failing checks."
1,Tests are still not passing.
1,No pass pull request
0,Yes they add test cases and it coverage the corner carefully.
0,They added test cases and coverage increased.
1,The team did add a number of test cases in the rpsec file however not much can be said about the code coverage since it is not mentioned in the wiki document implying that they have either forgotten to put it in the doc (I would suggest you do) or have not put so purposely due to the reduction in the code coverage.
0,"the team added test cases, the new test cases along with the old tests pretty much covers the project."
0,"Yes, the team has added some test cases and the code coverage has increased by 2%. This means that the tests are covering the new code as well which is a good sign for the team."
0,Yes. Their test coverage increases.
1,"test fail
coverage increasedc 2%"
0,New code was updated.
0,There are a lot of commits.
0,yes around 20 commits were made during the 2nd round.
0,I see a lot of commits were made on November 6. Most of them were related to tests and code climate.
0,There were definitely many commits in the second round but the commits were all done together before 2 days only.
0,"Yes, they add new commits in 2nd round."
0,It's pretty good
0,The code is written pretty good.
1,"Despite my suggestions to refactor their new code in separate methods and using them as checks, they have not made the change. Most of their commits are due to CodeClimate error pertaining to the readability of code. While they have successfully made the readability changes, their not choosing to use a new method with understandable name and instead opting to append to existing methods code will make it extremely difficult to merge."
0,"The code is quite intuitive and easy to understand with method names, variable names and comments used reasonably. so kudos to that."
1,"> Overall the code quality is fine.
> However, some of the variable names could be improved. I had mentioned ""sFileName"" but I dont see it getting fixed.
> Some of the comments are redundant and could be removed."
1,"Overall, the code looks good. The JS function is a bit long but the functionality that they are trying to achieve is a singular one so one function suffices. The code has fewer comments so it is hard to understand why the statements were written as they were. The variable names could have been better specifically in the JS function since other than that, the team has used the class objects and SQL queries to accomplish 1st feature which will follow proper naming convention. Unfortunately, the authors haven't improved the code accordingly."
0,They have climate and shorten their code many times and now it is DRY enough.
0,Yes they have.
1,The newly added code has been added to existing methods: Consider creating new methods with detailed comments. This makes reviewing the code harder and is not suggestive of the functionality of new code. Creating a new method by name : Check_Ta_Access or something like that makes understanding much easier.
1,"I found the comment description to be concise and easy to understand. However, I would suggest that you make use of more comments for the upload file section that you changes the code for. This would make the changes easily understandable to most reviewers and thus save us some time. :)"
1,the methods are not well commented. could've been more descriptive to explain the method's functionality.
1,"> There are a few comments but more can be added. Instead of putting a lot of inline comments, team can add comments for specific functions.
> Besides, there are some commented code lines that should be removed to make the code clean."
1,"In _submitted_files.html.erb file, there's a if-else closure, and the name of method is not much easy to understand.
In my opinion you can add some comments for these if-else closure."
0,The team's wiki is pretty good and detailed enough. I can totally understand what they have done.
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes. However, They have not mentioned the design principles they have used. The Test plan of the documentation include only ""Modified the existing Rspec Tests for controllers to fit current implementations."".Which does not say much. I would suggest to make the documentation detailing the issues and subsections as problems and proposed changes. This would make it much simple and easier to understand the wiki. Move the code part to another section ""Implementation"". This creates a streamline so that while reviewing the pull the expertiza authors can process it faster."
1,"The instructions to test the working from the User Interface only consists of login credentials and the details of student7126. However, what was expected are the steps needed to navigate to the correct page and test the default functionalities and compare it with how the changes being made affected the current working. 
Moreover, the files modified section contains the entire code which is fine however, I would recommend that you highlight the newly added code or the modified code either with green or some other color (as on github) and paste it on wiki so that it would become convenient for the review to view the changes and not move back and forth between github, expertiza and the wiki page just to view some few altered code."
0,the writeup explains the authors work pretty well. the problem and the solution they designed and the implementation are clearly mentioned and very descriptive along with the screenshots.
1,"1) The writeup looks good enough for understanding the issue and the modifications done. The issue reproduction steps however, have not been detailed out.
2) Team could have added a video for the test that they have done or something which could show the fix.
3) The second issue fix hasn't been described with enough details. Could add few more lines for the description.
4) Nothing has been added to the testing section of the wiki. Also, a ""References"" section could be added."
0,Yes. It explains the purpose of this project very well. It also shows how they approach this problem with code snippets making it very easy to follow.
0,"The writeup is excellent. The authors have mentioned everything. The actual issue that they are trying to solve, the solution that they implemented and the related code snippet. This really helps anyone to clearly understand what their project is about and what are their contributions to the codebase."
0,The writeup explain clearly that what the problem is and what they plan to do and then what they have done.
0,Yes they have the Test Plan part.
1,"The Test plan of the documentation include only ""Modified the existing Rspec Tests for controllers to fit current implementations."".Which does not say much. Make a more detailed explanation for test plan."
1,The edge cases and corner cases have not been mentioned in the document. I would recommend that you mention atleast a few and validate these during the next submission round.
1,test plan is not complete enough. only mentioned that modified the existing rspec tests. did explicitly mentioned what the approach and plan was
1,"I can see a ""Testing using RSpec"" section but it's blank. Also, there's a ""testing from UI"" section but it just gives the instructions on how to test the feature on expertiza."
1,There should be examples to test the upload file limits as well. They only added the tests for TA changing grades.
1,"They modify the existing test to fix current features.
Here's a small suggestion. Maybe they can write more test for the new features they implemented."
1,The Test Plan section only says that changes were made to tests. It does not mention what tests were changed nor what was changed in the tests.
1,The does not include separate sections for TestPlan. The proposed changes made are not categorized by problem and the code implementation is included along with reasoning.
0,the writeup clearly indicates the functionalities the work is related to. it clearly explains what the project does along with the screenshots.
1,"1) The writeup looks decent but a lot of modification needs to be done. Some of the things have been mentioned without any structure. For example: Testing from UI section only describes what credentials needs to be used. I don't see any flow talking about how exactly the application needs to be tested.
2) Some of the sections like ""References"", ""Testing using RSpecs"" are missing.
3) A video demonstration could be added which can show the fix that has been done.
4) The issue has been discussed but any pictorial representation for the same would be great. I can understand the project and what it does but more details or visuals would make life much easier.
5) The code fixes for issue #2 needs more description."
0,"It explains it very well. With code and descriptions side by side, it doesn't take many efforts to understand what they did."
0,"The writeup by the authors is very good. They have clearly specified what is the background issue, how they have approached the problem in high-level terms and then added code snippets and screenshots to show what changes they have done. Anyone can easily understand what the project is and what issue is the team trying to solve and how."
0,The writeup is clear and easy to understand.
0,"very brief wiki page, can fully understand what they have done."
1,There are no testing instructions mentioned in the wiki document which is why I couldn't test for any cases. I recommend you to please mention a list of instructions in the testing from UI section during the next submission round
0,the features work as intended
1,"> The cases seem to be working however since the details were not clearly mentioned in the Wiki, it was tough to get it working.
> Please add more details or maybe some sort of flowchart to your wiki so that anyone can easily login to the system and follow the instructions to test the features."
0,"Yes, the features work as expected. There are no edge cases that I found would crash."
0,The features work as intended. I tried to upload a video(.mp4) but I couldn't because of the file type validation done by the team. Nice work.
0,"During my manually test for their work, it seems that everything works fine."
1,"I think it is better if there are more comments in the code, which is more easy to follow. But it's also good to follow in the current file, good job !"
1,"The modified code does not include comments.
The newly added code has been added to existing methods and needs to be separated
: Consider creating new methods with detailed comments."
1,"The number of lines of code changed is pretty much considerable and I would recommend that you make it much more modular next time. For instance, the java script function written seems to lengthy for a single pass and would be better understood if it were broken down into sub functions instead of having those big block of if statements.
The comments would have been more, intimating the changes being implemented which would make the code intuitive to any user."
1,more comments are needed to understand the functionality of the method. comments could've been more descriptive
0,The code is concise and very readable. It follows common Ruby style.
1,None of the functions is long and there is no need to separate code into methods. It is modular enough. More comments are definitely needed because the code change in core expertiza file is easy to follow but the new JS function if had comments would be easy for anyone to follow. The code definitely follows Ruby style guides. There is no code that is not DRY.
0,The name and class are good named.
1,"app/controllers/submitted_content_controller.rb : Rename type to uploaded_file_type as it is more suggestive.
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
1,the Travis build didn't pass. the variables methods and class names are appropriate.
1,"> Most of the variable names makes sense, however some of them could be improved. For example: ""sFileName"" isn't very clear.
> There are some unnecessary comments left out in the code. This should be removed."
0,Naming is descriptive of the function and easy to understand.
1,"The authors have, for the most part, followed proper nomenclature in code that binds with the expertiza code. However, in the JS function that they have added in the frontend, the variable names are not very intuitive so it is a bit hard to follow how the code control flows."
1,"In _submitted_files.html.erb file, I am confused by variable oInput and sFileName. What does ""o"" and ""s"" mean in this case?
Maybe you could explain it more clearly."
1,"The authors have implemented the Test cases in Rspec file, However, the documentation does not include a detailed analysis of the testing plan and would highly recommend updating the documentation"
1,"The test plan is just a single line description mentioned in the document however, it would be recommended that you atleast visualize the edge cases getting validated with the help of screenshots. Not only it shows that you have tested the application yourself but also makes the reviewer aware of the test cases for which the program is failing so that he/she can suggest some new edge cases for your task.
Moreover, I would also recommend you to give a list of instructions for testing the same from the User Interface, which would enable the reviewer to view your working rigorously."
1,the test cases were not explicitly mentioned. only mentioned that rspec tests were modified.
1,The tests for files limits are missing from Test Plan section and the pull request.
1,The build is failing.
1,Write up should add why you have done anything.
1,"No, build failed."
1,"The functionalities are working as expected but I feel that the code needs to be backed up a strong set of test suite before we can deploy it on production server . Thus, this project can lay a solid foundation for future team to pick up on writing exhaustive set of test cases after which the project will be ready for deployment . Also, one more thing that needs to be fixed before we look into deployment of this project is fixing the issue which is out of scope of the current project and only then we will get to know if thew build is passing with all the test cases or not ."
1,"The write is well written in terms of features that needs to be addressed about to the user. The code snippet added makes the description more clear and allows for easy grasping . The step by step details about UI testing makes it easier for the tester to understand the basic flow of the project . There are a few areas which can still be improved upon like elaborating more on what the issue was, what was the approach used and how was it dealt with. A screencast of these features may be a good idea to further enhance the documentation."
1,"The coverage decreased which implies that the code written is not completely covered under tests.   The tests only cover the scenarios where user submits project link of the project. Thus, there is a need for more tests to be written to ensure that each line of code is effectively tested"
1,"The overall code is written well adhering to the Ruby community guidelines and programming practises. However, there are  minor areas which can be improved like max_due_date would be better framed as final_due_date, method naming can be  improved eg email_submission_reviewers, submission_mail_to_reviewr . Also there is one instance where the function are long ie method email_reminder sends email as well as composes one, this can be split up into two different methods each one catering to a functionality defined by method name"
1,"I don't think the code is ready to be deployed onto the server. Firstly, the Travis CI build is not passing and all the checks are failing for the contributed code. Also, the new user email functionality is not yet working which is my biggest concern. The project doesn't need to be redone from scratch. The team just needs to check why the functionality is not working for users. This is definitely a good starting place for a future team to pick up."
1,"The writeup is good. They have nicely broken the original issue to 3 sub-issues and have approached each one separately. They have mentioned what kind of changes were required to solve which issue. The test plan also shows proper steps on how to test the system which makes it easy to test for the user. However, I did feel that if the team had explained the functions and the new code very briefly, it would have made the experience better. Also, screenshots, if attached, of the results of the test plan would have made it easy for reviewers to test the code. But the team have greatly improved their writeup than the previous time."
1,"The new user email feature is not working for me. I followed the steps as mentioned in the wiki however I didn't get any mail. When I try to login using expertiza development user, it does not allow me to log in. The other features work fine."
1,"The code is very nicely written. It is clean and modularized. The only issue is that some more comments would have been helpful in understanding the function of lines in the code in a better manner. The code doesn't comprise of long and complicated functions. For the most part, naming has also done properly except for 1 or 2 variables. I would say the code is DRY. The code was already great in the 1st submission and the team has just built on that."
1,"The write up could go into detail about how the added code works and what it aims to accomplish, but instead it just gives a brief description. I think explaining things more thoroughly would benefit the wiki more."
1,"It fails. They claim that the test is unrelated to their code - which seems to be true. However, from personal experience, rewriting code can lead to existing features somehow breaking when it should not interact with them whatsoever. Due to that, I think they should have attempted to figure out why it broke and then rewrote the old code to fix it."
1,"Not sure if it ready to be merged, as I didn't receive the email, which was the primary concern of this project."
1,Build is failing which is strange as only comments were added that caused it to fail. I did a similar thing but the build was passing.
0,Only comments where added in 2nd round as mentioned in the review during round 1.
1,"Code write up can be improved. Like in one case where method call email_submission_reviewers(participant)  is made, passing of participant is not required since it is an a class variable and can be accessed by @participant.  Other than small issues code is clean and easy to understand."
1,Code is not ready to be deployed because build for the PR did not pass.
1,"Team added test cases in spec rb file, overall coverage did not increase."
1,Build didn't pass for the pull request
1,"Code write up is clean, few suggestions can improve code quality like i pointed earlier email_submission_reviewers(participant) this parameter is not really required."
1,"The code is not ready to be deployed - main reason being the failure of the Travis build.
Also, more before-after conditions need to be taken care of before this code is deployed onto production. Also, test cases for newly added code need to be written."
1,"The write up has been written well. It explains the issues, solutions and how to test the implementation. 
However, a few specific details important to the scenarios they have worked on are not mentioned which makes it difficult to test.
eg. They have mentioned that to test Issue 3, create a scenario with an approaching deadline, for which reminder will be sent. It is not clear how many days/hours before the due time, is the deadline 'approaching'. Hence the person who is testing will not know what scenario to build for testing this."
1,"Solution for Issue 1 is working fine.
For Issue 3, 1 bug is identified - participant is not getting imported with csv file (if user already exists in system but not assignment).
Also, on adding new participant as new user, it was not possible to test the working against Issue 3 because no email was sent to expertiza.development@gmail.com"
1,The team has added no new testcases. They have only modified parameters of old tests.
1,"The problem I found is in their e-mail notification, they didn't include the old project code so that I can see the improvement beyond that."
1,"Their did a test plan, but all check failed so no coverage increase."
0,"They didn't have new code, but they did submit a follow up to address their test failure."
1,"> The code fixes seems to be good enough for pushing to production.
> However, the code coverage needs to be improved.
> Also, the Travis CI build is failing, so might need to check on that."
1,"> I can see some test cases have been added in 2nd round.
> However, it does not look like covering all the cases. I can see some tweaks to existing test cases too.
> Also, the code coverage has decreased."
1,"> There does not seem to be any conflict.
> However, the Travis CI build has failed."
1,"This code looks good, only one test case is failing and because of that build failed. If we can take a look at it and try to get it fixed, then this code can be deployed to the production."
1,"Write up is neat and clean but few things are missing:
1. Explanation of code changes, why the change has been done at particular place and why it's the best possible fix. 
2. Test plan doesn't include Rspec changes or test cases. 
3. Problem description could be described in detail."
0,There are changes in the names of the variables but still few names aren't good. Comments have been updated which wasn't there in the version 1.
1,Typo in submission_mail_to_reviewr
1,The write up does not include the test plan.
1,"The functions look good. email_submission_reviewers function could have a better name as this one is too long and does not convey the meaning well. Also, some more comments are needed as it becomes difficult to follow the code."
1,The write up does not include the Test Plan.
1,"The writers have explained aptly how the changes made by them carried out the required task. For fixing the issues at hand, additional helper methods were required. These methods were also properly stated."
1,The write up includes brief explanation about what the project intends to do. The functionalities about email sender have been explained as what changes they make.
1,"The functions are of appropriate length just doing the functionalities as the naming says.
line 75-79 submitted_content controller.rb can be extracted .The reviewers object in line 80 of submitted_content controller is not used before and we can safely assume that the code above is independent and can be extracted
Also, the code mentioned above is difficult to understand as to what functionalities it performs. 
Code follows ruby guidelines and is DRYed"
1,"There are no comments in the methods that are declared. But the self-explanatory naming of the variables eliminates the need for comments. eg: notify_reviewer_for_new_submission, email_submission_reviewers methods. Also, the code 75-79 in submitted_content controller.rb is not clear as to what it is doing."
1,"The authors have done a good work in writing clean and concise code which adheres to the community guidelines.The code is well commented. However, there are a few areas where the variable naming could be improved can be improved.
In submitted_content_controller.rb, the variable names

cur_date can be refactored to current_date which is more meaningful
max_due_date is not suggestive of the function it performs. Instead, replacing it by final_due_date would be more sensible options.
rev_res_map can be better written as review_response_map

Implementing these changes will make the code better as it will indicate presence of self-explanatory variables and eliminate the need for using comments."
1,"There is no test plan written or automated tests that are present in the committed code. Hence, I cannot comment on the edge cases or invalid input that they might have considered or if they have missed out on any."
1,"(i) The writeup is well written and easy to read. 
(ii) It is adequately descriptive of the work done. 
(iii) it attempts to explain the reasons for the style of code and problem solving approach.
(iv)The issues that they have addressed are attested with the code snippets"
1,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan. The proposed changes are attested with code snippets that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. However, there is a scope for improvement where the authors can elaborate more about the test plan they they have envisioned for the project,  the design principles that they would use. Also, adding an video showing before -after changes of the system will make the document look complete as well as visual understanding of the project will be improved. There should be a section where the reader should be able to replicate the issue and"
1,The functionality that the team is trying to solve needs some setup on expertiza and it looks like the code would work properly. Some tests have failed so not sure of how the actual code would fare.
1,"As the authors have not mentioned the test plan and I am not much aware of how automated tests look in the context of expertiza, it is hard to comment on this."
1,The code as I said earlier is very nicely written. They have separated the code behaviour into different functions which are good to see. They definitely need to add more comments because some database-related code and array indexing cannot be understood just from the code alone.
1,"The authors have not written comments where required. Most of their code can be understood by just looking at the functions however database queries and some expertiza specific functions which are used could have their behaviour better explained with comments. But since variable names and arrays are properly named, the gist of the code can be inferred to some extent."
1,The team have not written a test plan section in the writeup so it cannot be said whether they have thought about a test plan or not.
1,"The writeup is excellent. Barring the test plan section, the authors have done well to just label in brief what each code snippet does. The project is easy to understand with a good writeup."
1,"It does not work, it seems to be a problem with cur_date or max_due_date being Nil in some cases."
1,I saw no tests.
1,"Not really. I understand the way Mailers work in Ruby so it wasn't hard to follow, but if I wasn't experienced with them I would be lost looking at this code. Comments are definitely needed."
1,Some names could be completely spelled out to be more concise but are shortened for some reason. Things like cur_date should be current_date or rev_res_map should be review_response_map.
1,It explains the issue. Not necessarily how or why they approached solutions the way they did.
1,"I understand what it does, I do not understand the way they decided to do certain things or why certain checks might have been necessary to perform in code."
0,not sure how to test the work
1,lacking comments
1,"Build fails, also code coverage decreased."
1,no test plan provided
1,"descriptive comments are needed 
General design principles and naming conventions look fine"
1,Comments are not added
1,No test plan included.
1,Documentation explain the changes well. But they have not mentioned anywhere as to how the functionality needs to be tested.
1,No documentation about tests.
1,"Not many comments describing the new code, though variable and mehtod names help to understand."
1,"Method name in app/mailers/mailer.rb  seems too long:
def notify_reviewer_for_new_submission(defn)
There seems to be a typo (reviwr) in namig the following method in app/mailers/mailer.rb:
def self.submission_mail_to_reviewr(user, subject, mail_partial)"
1,"There is not a Test Plan section, No Rspec or test file is mentioned in the documentation."
1,Description of the each solution is short. They assume the reviewer is familiar with the project.
1,"Project is short so documentation is short as well, However, more info/descriptions about the work done would help to review it better."
0,"For now it is very hard to test the email functionality, so I leave this to TA."
1,no Test Plan discussed.
1,"the email_reminder is bit too long for me, may be can use mailer.rb to handle the email sending, the email_reminder only handle the sending logic."
1,Missing the meaningful comment on each method.
1,the team hasn't added any test cases.
0,This part looks good for me
1,No Test Plan Found in either wiki or Github
0,"Yes, considering that the changes have been noted, the approach seems solid."
1,Their design seems sound. Although they have not used any pattern yet. I think they will add this part after they finished the whole project.
1,"In the part of ""Modified function email_remainder to add functionality."" I not sure what functionality actually add into the system, can you specify that in the Wiki."
0,"I can understand, they fix bug in the previous email project."
1,no design pattern include in wiki page
1,Changes are good to be implemented. I have stated in the above questions that they need to have more concrete solution proposal in this section.
0,The proposed changes are easier to understand as the authors have included both a raw plan as well as a section detailing how they are going to implement the functionality in code using which methods.
0,"Yes, the authors have thoroughly explained the changes to be made to the system."
0,The team has explained the changes well.
1,"Explanations are good, more details on what code changes are made can be included.Team has marked the screenshots well to highlight the changes on the UI.""Purpose and Problem"" section needs to be worked upon, in terms on structuring and organization, rest seems good!"
0,Overall it looks like a great description.
0,"The team has done a good job in explaining the changes that will be made to the system. They have mentioned what, where and how it will be changed."
1,"The proposed solution and changes are indeed required and are correctly identified and explained. It is perfectly fine to take time researching for the best solution for locking the page while being edited by one of the teammates. If the database approach is finalized it would good idea to have enum defining the current state of the review i.e. whether it's in edit state, locked state, submitted (final), etc."
0,The changes for team reviews and current backlog has been completed identified and explained in the test doc.
0,"Yes, they've addressed the changes they'd be doing, and also gone with good designs."
0,"Yes, they have given good amount of information and clarity about problem, what they understand about it and how they are going to approach it. UML diagram helps, team has not just identified files but have also given exact methods in those files that needs to be changed which tells team has done good amount of research to start the project."
0,"Yes, all changes including UI and code changes have been clearly mentioned."
0,"yes, they have illustrated the changes to code"
0,"Yes, their description can clearly explain the changes will be made to the system. And the UML diagram helps a lot to explanation as well."
1,UML diagrams are included. Good format. But I expect a higher level diagram stating how your roles and function work.
0,They have included one UML diagram and it follows all the conventions. The diagrams help us to better understand the design. The UML diagram is simple and helps for a better understanding.
1,"Diagram is helpful in understanding and concise. The only problem I find is that I don't understand how the views and controller changes tie up with the model changes, perhaps having arrow across models, views and controllers would help. Currently only the changes in the models tie up together well."
0,UML diagrams look clear and easy to follow.
1,"The visual aids are helpful and paint a picture to what the app will look like after the changes will be made.
However, no UML diagrams provided."
0,The UML diagram is self-explanatory and it seems the team has a clear idea about where the changes are to be done.
1,"1. They have not added any specific design diagram to show the flow, but they have added screenshots of how they are planning to modify them.
2. No UML diagrams were created
3. No screenshots are easy to be understood, they have highlighted how they are going to modify the screen, which makes it quite easier to visualize"
1,"Diagrams were missing in the doc, and some visual aid would've helped in understanding the overall project much much better. But the document is pretty clear, and the implementation wise it does give good insights."
1,lack of test plan
0,Their UML diagrams and mockups of screen are clearly shown what they need to finish in the future. I think all the diagrams are necessary and easy to understand.
0,"1. Only necessary method are written
2. The new design is good and clear.
3. The new design looks not complicated because only a few class is revised."
1,"The changes proposed by the team sound appropriate at the moment. However, I would suggest trying to assign all members of the same team a common Id rather than having an extra field in the review map. This would simplify the whole process of assign_review_dynamically, automatic_review_mapping and a lot of other functionalities, which rely on obtaining reviewer_id from review_map to establish unique reviews and avoid duplicates or reinforcing review limit, which you will need to change on your current methodology."
1,The authors have identified the right methods to make the code change. The design does not make the code smelly and design looks very simple. One improvement is that they could have included the current implementations and then proposed the new changes in code.
1,the design is good. could have written more.
0,Design seems to be good - would not alter the current design way too much and is in line with achieving the goal.
0,Design looks good and clear. This might probably change as the project is implemented but overall seems fair enough.
0,Both the requested changes are required and the team can research about the existing gems that could help for the locking problem.
1,No design provided.
0,"1. No Classes and methods look fine to me
2. No  It wont make code smelly. They have broken the work in good detail level which will ensure that code is optimized
3. No Design does not look that complicated and even the way team has explained the solution it looks good and easy to implement.
4. No, new design does not do anything that can increase the response time.
5. No, it is easy to understood by anyone, and thats the beauty of any design document."
1,"The code does not seem smelly or DRY in any way. 
In regards to locking mechanism, most BPM based software in the industry- such as PEGA and Salesforce have solutions to the locking mechanism mentioned in the document. Both these softwares are predominantly written in JAVA, and here's how they implement locking: 
You have a dedicated class (in PEGA it's System-Lock), where the class is mapped to a table that holds entries of all the objects that you'd want to lock. To lock an object in the system, you would call a method present in this class (or can be implemented in any higher class - such as the object class itself), which basically persists an entry into the lock table. This would help in defining a generic lock table, and you should be able to use this moving forward. Also, you could run a cron job in rails, which is pretty straightforward (https://dev.to/risafj/cron-jobs-in-rails-a-simple-guide-to-actually-using-the-whenever-gem-now-with-tasks-2omi) , which would delete entries in this lock table, if the entries have been there for more than a day (or whatever). 
Having been a senior system architect in PEGA, myself, this solution worked real neat at a production level. It's one neat way of going about this project."
0,"the relevent classed seem complicate, but the diagram is very precise."
1,"--
0-More effort on designing is needed
1
2
3
4
5-Design appears to be sound

 


1) the authors only plan to modify existing methods, 
2) the new design make the code ""smelly"", 
3) the new designs look easy to understand, 
4) the new design update some create() and new() method so it may potentially increase the response time of the system 
5) I think they should add the ""Test plan"" part"
1,"The write up does not include the test plan. The recent pull request does not include the test cases. The refactored code should be thoroughly tested before sending it for production, as the new code changes should not affect the functionalities previously in place. However, the write up does not include test plan mentioned."
0,The explanations seems good. I can totally understand what they should do in this assignment.
0,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. The write up does not include code snippets of the newly added code or the references of the affected areas of the code. Also, the list of team members is missing out."
0,The changes the authors proposed are clear and are very easy to follow. The overall quality is really good. They also gave an explanation in text form which explains the changes to be made.
0,Little explaination
0,The features work as intended. Their task is not to change any behavior.
1,"The specification says ""The best place to specify this is probably as a dropdown on the Review Strategy tab of assignment creation (prepopulated to say that individuals, not teams, will be reviewing). "" feature be implemented to achieve the goal. It has been written on the design document that this feature needs to be implemented, however before and after UI changes screenshots do not include those. The boolean value has been added though.I suggest that it would be a better if the authors could explicitly mention what they have achieved so far and what is left, so that it is clear for the reviewers to look for the same in the screenshots."
1,They didn't write any test plan.
1,"The method ""get_current_stage"" and ""stage_deadline"" have almost the same function. These two methods may be able to be reduced to one method."
1,The name of the new methods they added are clear and reasonable. I think their task is to reduce those five methods to three or four methods. But they add three extra methods and now there are eight methods related to one behavior.
1,"The team should explicitly mention polymorphism as the design pattern. Though it appears in the diagram, it should also be mentioned explicitly in the 'Changes to Code' section."
1,The explanation for Modification to Assignment Class is a bit misleading/vague. Maybe the teams means they will limit assignment be individual or team if the review strategy is so changed.
1,"The proposed solution and changes are indeed required and are correctly identified. It is perfectly alright to take time researching for the best solution for locking the page while being edited by one of the teammates. If the database approach is finalized it would good idea to have enum defining the current state of the review i.e. whether it's in edit state, locked state, submitted (final), etc."
1,"They didn't write test plan section in their writeup. Since their work is to refactor those five methods, the methods may change after their work and the tests may be rewritten. But they didn't write tests related to their code."
0,"The writeup explains the Expertiza background, the description of the problems that they need to solve and the results of their work. It would be better if they add their pull request link to their writeup so that reviewer can find their pull request easily. 
They didn't write what design principles they need to develop the code."
0,"They included Expertiza background, description of their task and what they do to achieve the results. The structure of the writeup is clear. I think they can add more details about the description of the problem and add how they test the project. They can also add some sentences to describe why they choose such way to do the work."
1,"They have given enough explanation about the problem and design they are proposing. Explained by attaching screenshots. They have mentioned about the files that needed to be changed, but they could have given a better explanation about how they are planning to do it. They have clearly mentioned about some of the things that they will be analysing in deeper sense."
0,The code seems to be well written with decent variable names.
0,"Yes, new code was committed."
0,"Yes, The pull request passed in Travis CI."
0,It was a refactoring project so no need of new test cases.
0,"Yes, it looks like projects are doing what they were supposed to do."
1,"The authors have not added or changed any functionality, they just changes some code, so the features still work as they are supposed to."
1,"There is no test plan, I can't see any tests anywhere because there is no link to the pull req"
1,"Under the proposed solution section, specifics into what fields are being added to classes, by that I mean the names being used, could've been incorporated in the design document itself, would've been nice. Also a general flow, a UML diagram explaining what methods, models, views and controllers are being considered in the project would've helped in understanding the scope of the project better."
1,"There is no access to any code, so can't comment on any code related features."
1,"There is no access to any code, so can't comment on any comments"
1,There is no link to the github repo or the pull req and no access to any code.
0,"I think everything is easy to understand. They even point out the method need to be modify, it is quite clear."
0,"good problem statement and proposed solution, easy to follow."
0,Yes the functionality seems good in their design documentation.
1,"All the functionalities are well mentioned and their respective proposed solutions are given as well. The problem section is in paragraph mode, I would highly suggest a bullet point style."
1,There is no test plan section in the writeup
1,"The writeup does not clearly explain the authors work. It just mentions the problem. There are very few lines pf code in the writeup, just 3 functions with 3 lines of code."
0,They covered their functionality required in the design document. The team-based review functionality was explained in the document.
1,"The writeup does not clearly and adequatley indiciate the functionality, can only understand the problem and not what the authors have done."
0,Yes the design document incorporates the functionalities.
1,"Yes, all points and user stories mentioned in the specifications have been incorporated in the design document, so of them have been implemented already. (I would suggest, that at this stage, it is a ""Design document"", so it would be better to not include changes that have been implemented already. Further, if the changes are halfway through, please avoid including them as screenshots as it is a little confusing for the reviewers what to look for.)"
1,There was no Test Plan.
1,"While there are a few comments here and there, I don't suppose they were added during refactoring. The new methods do not have any comments associated with them."
1,"I could only gather from the write up that you have added a new function next_due_date(topic_id = nil) and that DueDate.get_next_due_date(self.id, topic_id) was replaced by a call to private method next_due_date(topic_id). The write up did not include a compelling reason why this was necessary."
0,Features work as they are expected to work. The refactoring has not caused any issues. Logically the changes does not impact anything and hence looks great.
1,Test Cases have not been added or refactored.
0,The code follows the RUBY practice and follows the DRY principle.
0,Comments could have been added to the methods refactored.
0,"In general, the team seems to cover all the requiremenst in the design document."
1,"There are code changes, but no corresponding tests.Please include tests if this PR introduces any modifications in behavior."
1,"Test Plan is not mentioned, which makes sense because it is a refactoring project."
1,"All the functionalities have been included.
However, I think one of the functionalities have been misunderstood. Even if reviews are to be done by teams or individuals, the assignment can be either. The team is proposing that changing the review strategy will limit if an assignment be individual or team.
It's possible that the team has just made an error while writing as the 2nd part of the proposed change under Modification to Assignment Class seems fine."
0,"a new problem is proposed and a very clear description of the same is written. Also, the assumptions that they were allowed to make are written."
0,"Yes, This document is very well written. It to the point and covers all the aspects of the project that needed to be done. What files are getting modified, what was the problem and how they are solving it. But they have not mentioned about any test plan.  I am sure team will have a test plan for sure, but they forgot to write."
0,"Yes, the document and design does include all the functionalities to be achieved, along with problems that can be faced moving forward with the design proposed, which actually shows that pros and cons were deduced before coming up with this approach."
1,"Yes the write up does explain the project. However, somethings could have been well elaborated, the writeup is too short. Eg.- deals with refactoring of stage deadlines in assignment.rb file."
0,"they use a pdf document rather than a wiki page, and said its a 2019 spring project, which make me confused.
seems the team is already done with this project;
bet lack of test plan."
0,"Writeup explains everything in a good way, however, the writeup could have been more elaborate."
1,"Yes, their design document incorporate all functions required. But why do they use wiki?"
0,"There were no issues with code functioning that I could find. Since this was a refactoring project and no new functionality was added, the test cases were already handled."
1,No testing plan stated. Other things are well done.
1,"As mentioned before, there is no test plan section and no changes to test files that I could find."
1,"The team has not mentioned the Test-Plan section in the document. Also why does your document say Spring 2019 instead of Fall 2019. You have a section changes to code, but the screenshots tell that the changes have already been implemented."
1,The design document looks incomplete because it does not contain any test plan. Please include an elaborated test design or implementation on how to test. The document contains other parts such as project purpose and project design.
1,"As mentioned before, though I had little trouble following the code, comments describing the added methods would not be amiss. Other than that, I feel that coding guidelines have been followed well."
1,More explanation needed.
1,There are quite a few cases that could be considered as edge cases for this project. Please include in the design document as to how this design would be compliant with tests or how you plan to modify the tests. Please also mentioned the edge cases that you come up with.
1,"Though the choice of naming is good, I could not find any comments added by the team describing the methods in the code(A short description for methods like finished? and topic_missing? would suffice)."
1,"No Test Plan is provided.
Pehaps a brief explanation in the 'UI Changes' section would help to better undersantd the provided images"
1,"No UML diagrams
No testing plan."
1,"Overall this document looks pretty good. It would be good to include the test plan in the document, I really liked how team has created the mockup screen and added in the design document. It really helps to understand that where the exact changes are being done."
1,"A test plan, and how testing for this project will be done is missing in the design document. Also, a diagram of how each method relates to one another, or an overall picture of what models/views/controllers are being used can also be incorporated in the design document, making it much more complete."
1,"alomst good;
but no design pattern and test plan."
1,"I think they need to added the Test plan part.
Besides, their solution part could be renamed into ""design"" part. Which seem more suitable for the design document."
1,"There is no test plan section in the wiki, nor could I find any mentions of tests anywhere."
1,"The authors have described the problem statement well and also given descriptions for the changes they have made with respect to the code. However, I feel it could be more descriptive as it is not clear on first glance why individual changes were made. Also, screenshots of the code/output at proper sections would be helpful as well. Though not necessary, a section mentioning team members and a link for the pull request(Since there isn't one here on expertiza) could be included as well."
1,There is no information provided regarding how testing is to be done.
1,"There is no way to check this as no links to either the pull request or the GitHub repo have been provided. Also, no information regarding test cases has been provided in the wiki."
1,There is no way to check this as no links to either the pull request or the GitHub repo have been provided.
1,There is no way to check if there are comments for any method as no links to either the pull request or the GitHub repo have been provided.
1,No link to the pull request or the GitHub repo has been provided.
1,There is no test plan section in the wiki at the time of writing this review.
1,"The wiki explains the changes done by the team along with the code snippets. However, it would have been helpful if they provided more information about the existing scenario."
0,"The team has done a good job of describing the changes and the need for them. However, they can include more information about the existing scenario which will help to understand the context better."
1,The test coverage decreased and no new test cases were added.
1,"Pretty good write-up, covers everything. If I'm to be critical, the points under 'Refactoring ' and the corresponding before/after snippets could be demarcated better, difficult to read right now but that's just formatting."
0,"There's no testing to be done from the UI. It involves refactoring around the questionnaire editing page, and the page on deployment functions normally. It's not affected the existing code in place."
0,"The team made changes in 2 spec files and did run the test cases. The changes don't require much of a test plan since it's refactored code, but they have modified the existing code to accommodate the fixes."
0,"From the web browser, features now goes well."
1,No test plan or test code was done.
0,"They have focussed well on Ruby principles, with moving the method blocks to the right places, and also being consistent with the naming everywhere."
0,"The documentation is very exhaustive and covers everything required to understand the changes made, the reasoning behind it, and the end result. Makes the reviewer's job pretty easy."
0,"The project was to refactor a controller, and the behavior is unchanged after refactoring."
1,"Functions added followed exactly the conventions of Ruby and the code looked DRY. However, no comments about either changes of the source code or functions added by the group."
0,Yes a commit was made to fix variable names after 1st round.
0,yes it is
0,It is well written
0,it passes
0,"- Writeup us very well written explaining the changes made and the need for each
- Provides list of loopholes and issues out of the scope which made checking easier"
1,"- No new tests were added
- Test coverage reduced as most changes are refactoring changes"
1,No comments. All code is just direct changes to the source code.
0,Good write up
1,"I suggest the group upload a link to the page of pull request of this topic be given either on the wiki page or the project page on Expertiza. The final commit passed the check process, but no test at all. Therefore, how can you ensure that your changes in code would not affect other functionalities?"
0,Features work as they are supposed to.
0,"Yes, I can see one commit."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup."
0,"The UI works as intended.
As this is a refactoring project the features work exactly like they are supposed to."
1,No Test Plan section or anything about the TEST is given.
1,From their problem description i can understand what the problem is and the work done by this group. I think this description could be more detailed.
1,I thought I was able to know most of the work and functionality related to the work. I also thought it would be better that the writeup could be more detailed.
0,"The code is well written.
The authors have also changed variable names to give more meaningful names in the second round.
There has been an improvement in the code."
1,The sourcecode link for github is not provided. I cannot check anything.
0,Yes the features work as intended. The refactoring is done pretty well and the features work as they are supposed to
0,"Yes, the build passed the Travis CI. There was no conflict which needed to be resolved."
0,"The code is written pretty well, there were variable name changes made in the second round, which is an improvement."
0,"- I think the refactored parts are good. It doesn't impact much so it can be easily merged into the main project.
- They have added the name of one of the teammates in the comment. They might want to get rid of that before merging though."
0,"- The code works fine and similar to the way it was before refactoring. Therefore, nothing broke."
1,"- They didn't add new test cases but altered the previous ones to incorporate the newly refactored code.
- The coverage decreased according to the Travis CI on Github.
- They did add a screenshot showing the coverage of the file they worked on but it was not an indicator of increasing coverage as they didn't add any new test cases."
0,- The build is passing. They refactored the code and the test cases corresponding to that controller is woking which is an indicator that they have written their code and have fixed the test cases for that controller as well.
0,"- Yes, they did make some changes and looks like they considered some of the reviews and worked on refactoring the variable names."
1,"There is no test condition. They should have added rubocop scores, build test or rspec test report."
1,The writeup was very vague and didnot provide any proper explanation about why they did and what they did. They also didnot show what exactly they have changed.
1,From the description I can tell it is a refactoring project but I don't know anything about what they did exactly and how they did it because sourcecode link for github is not provided. I cannot check anything.
0,Yes the code is ready to be deployed. Not sure about the test decreased test coverage.
0,The writeup is well written
1,Cannot verify this either as test plan/video is not provided.
0,The system is working as it is supposed to work.
0,Yes the team added test cases but the test coverage decreased.
0,Yes it passed the build test.
0,"Yes, some code was committed"
1,Cannot verify this either as link to repo/video for rspec testing is not provided.
1,Cannot verify this either as link to repo is not provided.
1,"For most part it is code refactoring, so code's been changed in place, no edge cases involved."
1,Link to github repo or pull request is not provided hence cannot be verified.
1,"Descriptive comments, wiki page contains different descriptions for save_all_questions though."
1,"Commenting in the code could follow a consistent format of capitalization. Git also specifies a format for writing commit messages, the construct is not being followed. The commit messages could have been more descriptive as well."
1,There's no test plan provided in the documentation
1,Not very clear with the reasoning of why some functions were added.
1,"Could include the test case changes in the write-up, and be provide a thorough description of the changes. Before/After code snippets could be more clearly demarcated in the write-up."
1,The test plan is not detailed enough to comment on this question.
0,All the methods as well commented.
0,The team has done a good job at refactoring. I dont see any issues with the code changes. The code coverage has however decreased.
1,"The test plan, though present, is not detailed enough."
0,The documentation is very detailed and covers all the required things pertaining to the project.
0,The documentation is very detailed and easy to read. Adding the test plan is the only suggestion I have.
1,"While editing the questionnaire I received an error
 
undefined method 'each_pair' for nil:NilClass
 
Rest of the code runs as expected"
0,The test coverage is not related to the project so I don't know what to comment on it.
0,Though the test plan is not mentioned but the functionality and the work done is documented well.
0,The write up is explained well and the understanding is good.
0,Yes the write up is explained well.
0,"- The questionnaire feature works as expected on the deplyed host
- Most edge cases are handled"
1,"- New tests haven't been added as the existing code was refctored and the team added repeated methods as private which need not be refactored
- Few methods like ""question_size"" methods are added which are query on self and need to be tested"
0,"- The code commented is good quality
- Functions are of appropriate length
- Functions violating"
1,"- The pull request is passing the build job
- The test coverage seems to be decreased by around 6 % which seems appropriate as the team abstracted few features into private methods
- The team has added few method which are query on self which are not covered in tests"
0,"- The writeup includes a test plan
- The test plan includes tests performed after the refactoring
- Tests before the changes must also be included, indicating working of each unit, functional, integration test"
0,"- The write up clearly explains the changes required to be implemented
- Changes completed are properly documented and purpose for each is noted
- Writeup flow appropriate"
1,"- Yes the write is clear
- Most of the work seems to be completed and covered up in documentation
- The team must review all its changes once and add new tests as required by evaluating the functioning of each method"
1,The authors have not directly mentioned test cases in the test plan. They have just added test into the spec file. The team has not converted tests into automated tests.
1,Not much commenting
1,not every methods/changes are commented
1,"No, the writeup does not have a Test Plan section at all.
Authors have not added any new testing criteria, and have only showed test cases passing from the existing RSpec file."
1,"Yes, the write up explains all the work done by the authors and also, why they did what they did.
They have mentioned a 'Testing' subheading under which nothing has been written.
They have not explained anything about the testing done on the code refactored by them (either manual or writing test cases)"
0,"They have just refactored the code, so the features work as intended"
1,"The authors have not discussed any cases in the Test Plan, there were not many automated tests, just one check."
1,"The test plan section is there, but there are no screenshots of the tests. The authors have not added any extra tests since the methoda are private and messeges to self should not be tested,"
0,"Yes, the writeup does explain how the authors refactored the questionnaire_controller.rb. They have not mentioned about any design patterns or principles."
0,Manual testing working
0,The functions are short and well commented.
0,The code is well commented.
1,The build up has failed.
0,The writeup explains the need for refactoring the questionnaire controller.
1,Adding a Test Plan would help in understanding if turned into automated tests.
1,"A test plan section had not been included in the write up. But most of the edge cases seem to have been covered by the team. The ones that they have missed is clearly shown in the pull request, and seem to be simple ramifications of refactoring, wherein considerations such as: 
1. when id --> nil,
2. timestamp issues. 
The RSpec for questionnaire controller seems to have this covered, and simple tests against this would definitely help the team in overcome the issues outlined."
0,Very well written and detailed write up
0,Yes. I don't think there is a need to redo this project as the current approach seems good enough
0,The code is very good.
1,The coverage decreased.
0,The code was really well written and is in accordance with Ruby coding standards.
0,"Yes, a lot of commits were made in the 2nd round."
0,"Yes, the build passed and the changes do not have any conflicts with the base branch."
1,"As it was a refactoring project, the team modified the existing test cases as well as added new test cases to cover the changes they made.No, the coverage did not increase."
1,"The provided link does not work. However, the team has added extra test cases which did not exist for a couple of existing methods which cover the functionality of those methods."
1,"The write up is well written and explains the existing scenario and the required changes very well. However, there are a few spelling mistakes (refractor) which could have been avoided."
0,"Yes, my only issue in the first round regarding the code was that the team had not commented the methods well. This issue seems to have been addressed in this round."
0,"There are a high number of commits made in the second round, spread uniformly."
0,"Yes, the team has added new tests since the last round and mentioned them in the wiki too. The tests are for get_current_stage and finished? methods and seem to be passing without any issues."
0,There is a significant improvement from the last round in the writeup. All the issues I found in the last review have been addressed and the writeup is as detailed as could be. There are screenshots and code snippets added too wherever required.
0,"I think the changes made are good enough for further modification in the future. Though I could not pinpoint any specific failures in coding practices, I feel it could still be better."
0,The code does follow the Ruby Standard principles. The method names and variables name are fine.
0,Commits were continuously made during the round 2. The commits were made till the final checks have passed
0,"The build checks are passing. The travis CI and Code climate passed the tests.:
 
All checks have passed
1 successful check
 
continuous-integration/travis-ci/pr — The Travis CI build passed
Details
This branch has no conflicts with the base branch
Only those with write access to this repository can merge pull requests."
1,"Good Test cases have been written in spec/models/assignment_spec.rb.
though Coverage did decrease:
Coverage decreased (-13.9%) to 16.586% when pulling bea33a8 on bloomingstars:beta into 28eb0da on expertiza:beta."
1,The project is not deployed. The deployment link is broken. Also there is no video to see the changes.
0,The writeup very well explains the project description and changes done.
1,Not sure about this. The code is not running on VCL and there is no video to see the changes.
1,No new tests were added and the test coverage decreased.
0,The refactorings are explained well but i don't think there is a need to put screenshots from github on the wiki page since people already have access to the pull request.
0,It looks ready to be deployed.
0,Coverage decreased but the tests look sufficient.
0,The build passes and no conflicts.
0,"Yes, test cases were added."
0,Yes. I think the code is of good quality and ready to be deployed.
0,"I think the writeup is great. Problems in this project are well defined and clarified. Also, for each issue the solution is provided to explain the plan or idea how the team will fix the issue which is helpful for reviewers. The code change shows in which file and how the code is modified, which is very clear."
0,"Yes, the operation work as intended. Also the wiki page has showed the step-by-step instruction how to test from UI which is very clear."
0,Yes. The team added test cases. The coverage has reached 22.581% which is mentioned on wiki page.
1,Didn't find the pull request E1956 on the Github page.
0,Yes. There was new code committed during the 2nd round. The latest commit was 2 days ago.
0,"I think the code quality is good. The code style is good. No problem such as bad names, bad code style or DRY problems was found."
1,"Since the code coverage has decreased, i donot think that the code is ready to be deployed onto the production server yet."
0,ready to be merged
0,Travis CI passed. Pull Request merged.
0,"Can't see new commits, maybe because the PR got merged"
1,long variable names
0,"The authors of the project have done an excellent job in writing a documentation which is simple and lucid. I can see significant improvement from the documentation that is submitted in the first round . The documentation starts with elaborate description of the problem statement which clearly sets up the goals of the project followed by motivation for the project. It also goes further to explain what is the current implementation and why is it buggy and then proposes a solution to these implementations. To back up with the lines of code that are newly implemented, test cases are written along with the code snippets which makes it easier to grasp the content mentioned .  All of these features are a major improvement from the first submission ."
0,The project works as intended when tested from UI. The issues that the project had have all been successfully fixed when tested for the assignment that is mentioned in the documentation.
1,"The team has added a host of test cases to test for various scenarios but we cannot call them as exhaustive. The code coverage has decreased which implies that the entire code was not tested . More tests could have been added like if user is allowed to review a test but he is not signed up for a topic , what happens when user has no submission assigned but can access the review via URL."
0,The travis CI test was passed and no conflict is detected.
1,"The code follows Ruby writing styles for naming . The business logic is well supported by comments which make it easier to understand the code . This commenting feature was absent in the last submission . However, some code in app/controllers/review_mapping_controller.rb (line 92 onwards) can be split into multiple methods as the method name is doing more than what it is supposed to do ."
0,"Yes, it is ready to be deployed. Couldn't get idea of last commit which changed README.md file and then suddenly BUILD succeded. So"
1,Could not find test1 as mentioned in the wiki page documentation
0,"Yeah, I do think there have been tests added for this project. They do cover range of the project."
0,"Yes, new code was added"
1,I couldn't check anything as the website is down
0,The write up is well written and is easy to understand
1,http://152.46.19.135:8080/ is not reachable
0,2 Test cases have been modified and 3 more have been added
0,Yes the build passes and there are no conflicts in the pull request
0,2 commits after the first round
1,Overall the code is written well but comments are sparse
0,The write up does a good job of stating the problem statement and background. It walks through the team's planned solution as well. The manual testing section made it much easier to test the UI.
0,The system works as expected; I can't request more reviews than limited by the assignment while logged in as a student.
0,"Despite past builds failing, the most recent commit builds on Travis CI. There are no remaining conflicts."
0,"Yes, they updated the readme and added test cases during the 2nd round."
1,The 4 tests added to review_mapping_controller_spec.rb are not DRY because they share the same first 10 or so lines. This could be reduced with a helper method.
0,"Yes, the code seems ready to be deployed on the server."
0,Detailed write up was written.
0,The web app works as it is intended to.
0,Yes the build passed
0,Commits were added
0,The code quality is good
0,"If the UI testing passed, the code seems ready to be deployed"
0,The write up looks good
1,"The VCL is not working, please check the vcl connection"
0,The test cases were added and covered the issues
0,Two commits added and test cases were added
0,Yes the travis checks were passed
0,"It seems not very much code were edit, so it was good"
0,"Yes, the code works fine. The code is ready to be deployed into production."
0,The writeup is good and clearly explains the project description and changes that were made. The images clearly explains the project difference.
0,The functionality works as expected. The reviews done by any student is now getting checked in the back-end. Outstanding reviews are getting checked.
0,"Yes the team has added the test cases like below:
        allow(ReviewResponseMap).to receive(:reviewer_id).with(1).and_return(0)
allow(assignment).to receive(:num_reviews_allowed).and_return(1)
params = {"
0,"Checks are passed:
All checks have passed - 1 successful check
continuous-integration/travis-ci/pr — The Travis CI build passed"
0,"Last Commits were made on Nov 6, 2019. Commit were continuously made in round 2."
1,"In the comments - name should not be mentioned:
 
# assignment without topic -Yang"
1,I couldn't open the website. The link to the site was not working for me.
1,There are no comments.
0,The names are all intuitive and reflect their functionality
1,The write-up talks about a problem with a student clicking multiple times creating multiple reviews however I don't see a test for this case.
1,Didn't see the Test Plan part in the wiki page.
0,"(1) The length of functions are good.
(2) No need to be extracted.
(3) Yes. more comments will be helpful.
(4) The code does follow the Ruby Style Guide
(5) The code is DRY and the code quality is good."
1,Didn't find enough comments for some method. Adding more comments will help other people better understand the functionality of methods.
0,"Names of the variables , methods are reasonable. No vague names were found."
1,Didn't see the Test Plan section in the wiki page.
0,Yes. The writeup well described the issues of this project and well explained what the team do to fix issues.
0,Yes the writeup is clearly explained the functionality the work is related to. It explained in details what the issues are and what is done to fix issues.
1,"1. assign_reviewer_dynamically is a long method. A function that checks if the artifact can be assigned to a particular reviewer can be extracted from this method to make it readable.
 
2. In line 99 of review_mapping_controller.rb, there is an if condition that isn't followed by any action."
1,"Since the code coverage has decreased and no new tests have been added, i think the code isn't quite ready to the deployed onto the production server."
1,There are no comments (where necessary).
0,"The code is written pretty well now, earlier there was no access to the code. But now looking at the commits the code seems fine."
0,"Yes, there are around 20 commits in the 2nd round, and there are 4 files changed."
1,Deployment is not working.
0,"Yes, the build passed the Travis CI, but there were conflicts in the earlier commits, but after the last commit, the conflicts were resolved."
1,NO test plan present. Only testing from UI section is present.
0,"Yes the team added 1 test case in the rspec, and it covered the range of the project."
1,Comments are not present
0,All the variables are appropriately named.
1,"Edge cases, Invalid input values are missing."
1,Cannot access the link.
0,The introduction and proposed implementation sections are easy to follow.
0,Write up is well written.
0,"The writeup did not have a test plan section, the authors fixed this. There was no access to the code earlier, now there is."
1,The website was down because of which I could not test the author's work.
1,"I could not see the functioning of the code, so cannot comment."
1,The writeup was devoid of any test plan and no automated tests were found.
1,"The method ""finished?"" is a little abstract. They can rename it to indicate that what is finished."
0,They committed during the 2nd round.
0,The build passed in Travis CI. There wasn't any conflict that must be resolved.
0,They added tests using RSpec for their code in the 2nd round. The tests cover the code they wrote and all pass.
1,"There is no test plan that is presented by the author in the writeup. Also, the website is not functional which makes it difficult to gauge and comment on the possible pre-conditions, edge cases and invalid test cases and other scenarios that can probably be included in the test  plan"
0,This project is to refactor some code. The system works as intended. The features work as they are supposed to.
0,"Their writeup is organized. The writeup includes the description of the problem, how they fix the problem, and their test plan. They improved their writeup during the 2nd round adding their test plan which is good."
1,"I don't think this code is ready to be deployed onto the production server. Because they didn't reduce the number of methods to the number intended. But it seems that they make the code more readable. So, this code may be a good starting place for a future team to pick up."
1,The site is not reachable and is not working
1,"Yes, but not all the test have been covered in  review_mapping_controller_spec.rb"
0,"The code  follows Ruby Coding standards and is DRY.
 
The function length has been reduced as compared to previous functions.
 
Comments have been aptly added."
0,"Yes, the conditions are changed a little bit to improve the functionality. It follows Ruby Style Guide."
1,"No, there aren't any comments corresponding to the code."
0,"The team has committed code in the second round as well. The build is successful. The team has performed good work during the second round of submission. However, the TRAVIS CI shows that the coverage has decreased."
1,The code coverage decreased after the final commit. The build doesn't pass all the cases.
1,Not able to check the edge cases as the site was not working. The testing needs to be more thorough and rigorous.
0,"The recent pull request shows that Travis CI build has passed. There seems to be no conflict in the existing code that needs to be resolved at the moment. Team has also added comments, as compared to the first submission which lacked comments. Even the test cases have been updated."
1,"There is no mention of the design patterns in the documentation. The documentation was clear enough to understand. Some more screenshots, especially regarding the testing scenario would have been more helpful."
1,"The team has added test cases for the newly added refactored code. However the test coverage has decreased to 16.58%. The test coverage should generally increase after adding new test cases. The test cases form an integral part of testing as the previous code should not be hampered due to the new refactoring. However, the team has not looked into this properly."
1,"The site is not loading i tried multiple times and had given 4 hours of time in between, but then site has not come up"
1,"The project is regarding refactoring of stage deadlines. The team has removed 2 functions. The functionalities which the previous functions were supposed to do, are still working fine due to the addition of the refactored code. Thus, the features are working as expected from the UI."
0,I think all of the test cases are converted into automated test cases
1,"The team has developed the write up pretty well from the first submission. It included team names and test cases as well as screen shots for all the refactored code. However, the write up still lacks the testing video where the newly added test cases can be seen successful. Besides that, the write up looks good."
1,"The build is passing when referred to TRAVIS CI. However, the test coverage has decreased. So i don't think it will be a good decision to integrate this code to production server. The test coverage should show an increase, so that the previous in line code is not affected. Such is not the case here, and I would not recommend adding this code to production server."
1,I cannot see any comments in the added code
1,"Names of all variables and methods are intuitive and are named in a proper. The code is structured properly as well
 
My only complaint is that commented code has not been removed"
0,The code follows ruby practices well. They have added the test cases for the one method. Follows ruby practices with consistent labelling and and proper method access modifiers.
0,"The write up is detailed, Screen shots helped me to understand what exactly the issue is about"
0,The write up is descriptive and detailed
0,"Yes, this is an Expertiza project and the latest pull request has passed the Travis CI build."
1,"Yes, the team has test cases. The coverage has reduced by (-2.2%) to 28.272%, however we know this coverage figure to be random, so not sure if can go by that."
1,The link to the VCL deployment doesn't work.
1,The deployed VCL link is not working. No way to comment on the asked question.
1,"The write-up is decent, a snapshot showing if the test cases have run would have been helpful."
1,"No comments were added for the methods that were updated. You should add a comment where you check the review mappings size and compare it to the number of reviews allowed for the assignment explaining what it is doing. Fortunately, it isn't too hard to understand what this code is doing. It would be good to add similar comments explaining the changes to it."
1,"The build passes, but there are error notifications from code climate. Specifically, there are 120 issues to fix for code climate. Code coverage decreased by about -6%. No methods were updated, but they were extended to have new functionality for checking the review number. Similarly, no variables were added. However, the field of assignment 'num_reviews_allowed' is named well. Therefore, naming seems good. I would just look into the errors with code climate."
1,"The document contains a ""Testing from UI"" section, not a test plan. Rather than being focused on pre-conditions and edge cases, it gives a list of steps for a happy path through the new flow. Alternate paths should be added."
0,The writeup explains explains that the Expertiza currently doesn't have checks related to the number of reviews a student can be assigned. It does a good job of showing what files were modified and what changes were made in them. They also describe why each change was made.
1,"In the background, it would be good to explain what an assignment policy exactly is. I can understand that its related to the number of reviews a student can submit, but I don't know what exactly it is. This makes it harder to understand the concepts around the functionality. It is somewhat unclear when initially reading it if the number of reviews a student can be assigned means how many reviews a student can do for another student, or how many a student can receive from others. It would be good to make the language of the document more specific."
1,The vcl/heroku link doesnot work so I cannot do manual testing for it.
1,"There was a mistake overlooked, the code has the following in a commit:
allow(assignment).to receive(:swathi).with(123).and_return('Finished')
Please proofread your code before commits thoroughly.
Not ready for deployment, looks good except for this trivial mistake."
0,There are ample comments in the functions to tell me what is happening or will happen.
0,"Names of functions, variables, methods and class seems to be intuitive."
1,The test plan is not mentioned in the write up. And no results have been shown in the write up.
0,The writeup explains what is the problem and they they are currently doing to complete this project.
0,"Yes, the writeup was discriptive."
1,"The vcl server is down, cannot access"
1,Not testing part in wiki and no test part wrote on github
0,Yes the works as it is intended.
1,Nothing regarding testing has been mentioned
1,"Not many methods newly added, not comments wrote"
1,Github link is not provided so could not be checked
0,The code is nice
1,Github link not provided so could not be verified
1,no test plans
1,Pull request link has not been provided to check also the github link is not provided so the code could not be checked
1,No testing parts included
0,The code is enough to explain the work
0,The code is working properly.
0,The writeup is properly done and is described well
0,The code follows all the guidelines and DRY principles.
1,Commenting has not been done. Adding commenting before the changes would help understand the code better.
1,Could have provided the github link
0,"if @review_mappings.size >= assignment.num_reviews_allowed
        flash[:notice] = ""You cannot do more than "" + assignment.num_reviews_allowed.to_s + "" reviews based on assignment policy""
The variable names follows the standard."
1,"The test plan could have been written in wiki page. Currently, the wiki page only explains the UI testing manually."
0,The write up clearly explains what is code expected to do and what is the description. The design principles and patterns are followed very well.
1,"The write up does explain explaining everything very well and in brief. However, test plan could have been explained in write up"
0,Nice code. I see all of them to be perfectly fine.
0,"No comments, but code is kind of self-explanatory."
1,Test plan section is missing
1,Please provide directions for reviewer. I was able to test by reading the links from your snapshots. Otherwise it would have been more difficult.
1,"The first thing I checked while reviewing the document was the testing instructions from the User Interface but unfortunately I could not find these documented on wiki. Moreover, due to this, I was not able to do a check on the edge cases by myself and feel that the testing instructions would have proved to be more helpful in doing so."
0,Most of the test cases have passed.
1,"The functionalities are modularized as required. However, I would recommend that comments be added to the changes done so that it would be easy for most users to follow and understand the functionalities being added."
1,"I could not find any comments for the new features added to the project. However, the code was pretty intuitive and easy to follow."
0,"Referring the code lines added to the project, it can be inferred that most of the variables and methods are all intuitive."
0,"The different edge cases like fields cannot be empty, penalty point is a number, maximum penalty should not exceed a particular value etc., have been taken into consideration while creating a new policy and the screenshots for all these cases have been added to the document.
Depending on the form fields available I feel that most of the edge cases were checked for and ensured that they get validated."
0,I think the write-up is pretty concise and explains about the bugs and solutions being delivered in a nice and comprehensible manner.
0,"Most of the work is debugging, so I think there is no need to put too much comments"
1,code is somewhat commented but still the logic and why they did what they did is not explained.
1,"The code does not explain what changes each piece is performing via any comments.
I could not find any comments anywhere in the code changes."
1,"Comments are sparsely present in the edited code. Quantitatively, they are present in a couple of files where a major chunk of code (more than 10 lines) is added and not where only small changes are made. Although the comments are present, they are perfunctory- just reflect the obvious function of the code and are not much detailed."
1,"Comments have been provided in student_task_controller.rb for the tag count feature - however, a similar comment could have been given for the tag counter modifications in grades_controller.rb to make the changes more easy to understand."
1,I agree that the variable names used are quite intuitive but the comments are not included. Maybe because they just tried to fix the bugs. It would have been even better if you could describe the logic or action in one line as a comment.
1,I don't see enough comments to tell what they did. I think they need more explanation to help to understand the code that they have modified.
1,"The Documentation is written well enough, also listing the missing/unimplemented parts. They however do not mention why they chose to perform the counting in the back-end(grades_controller.rb & student_task_controller.rb), as doing it on front-end would have been faster and the user would not have had the need to refresh the page to see the updated result."
1,They explained how they did it very well. Documentation was clear and illustrative. But they haven't mentioned what other design choices they considered or why they did the work the way they did it.
1,"Project requirements, key points, and implementation have been addressed neatly on the wiki page. The test section or the test plan is, however, lacking on the page - team can add a section about the test cases covered or prospectively to be covered. The team can also add a screencast/screen recording of the use-case to make it handy."
1,"They didn't get their test plan included in the writeup, although they did that in the code"
1,"The authors did not had test plan but they had deployment example, so if instructors are expecting section test plan they should rename it."
1,"I do not see a Test Plan section as such, but I did find the deployment plan and the steps to reproduce and test the fix, which are explained well enough."
1,They mentioned that they wrote Rspec tests but there is no explicit test plan section.
1,"Currently, the team hasn't specified any test scenarios or edge cases covered in the project. They can highlight it in the next iteration of the project."
1,Overall it is good. It can be better with test explained.
1,Yes the writeup is actually good and concise.also the diagrammatic explanation is good.But they do lack the screencast of there feature
1,"Yes, the description was very elaborate. Only thing missing was the test plan"
0,All the features work as intended.
1,Cannot test there work as the deployed link is not working.
1,"The feature that was desccribed in the problem statement is working as expected, only problem found is that the user needs to refresh the page to see the intended changes."
1,Unable to access the deployed URL. It was a VCL URL so im assuming that the server is not running.
1,Code works when tested and changes in count values are reflected upon refreshing the page. The team can probably add some js to make the code not dependent on page reload to show all changes.
0,"Yes, they work as mentioned on the wiki page."
1,"The link for their deployment is not working, so I couldn't implement any relevant features. No comment for what they have been done."
0,"The code are clean, readable and in good ruby style."
1,having a lot of trouble understanding the flow of code because of lack of relevant documentation/comments.
1,"In app/controllers/grades_controller.rb and app/controllers/student_task_controller.rb, huge pieces of code is added. It could have been better understandable with more comments. Also, see if they can be shrunken in size."
1,Most of their code change seems to be in the view action of the studentTask controller. And the function is pretty long. They have included the logic for tag count inside the view function. Which means that the function is doing more than what its name suggests. They could separate the tag count to a different helper function and call it in the view.
1,"(3) Code in student_task_controller.rb is long, and would be better if there are a couple of more comments.
(1),(2),(4),(5) are all satisfied properly."
1,"variable name ""vmlist"" what does this mean.Not understand ""round"" variable.Methods are not thare where there should be as code written loops could be written as function."
1,"One build job failed out of 4.
Coverage initially increased 6.5% and then fell by 9.3%."
1,"Names are pretty intuitive, one of the index names in the schema.rb file seems to be long ""index_track_notifications_on_notification_id"" but since it's not very widely used, i think its okay."
0,All tests added and pass.
1,No i cannot see test plan.
1,"Test plan not mentioned in the Documentation, neither did I find any tests implemented in the code changes."
1,They haven't written a test plan but added some tests. However i was unable to view the test code. I can see that the coverage has increased by 6% though.
1,"Test plan isn't specified in the wiki page, this can be implemented in the next iteration of the project."
1,"Yes, they have implemented in for tag count on the home page. But on the project board of the repo, it shows some testing tasks in the to-do phase at the moment."
1,"I don't see any automated testing section in their writeup, would recommend the team update their page and describe more concisely about testing"
0,There is not design as such because team is not changing any feature. This work is all about testing the component and they have mentioned their test plans properly.
0,"Yes, It seems fine."
1,The test plan was not written but tests are written carefully covering everything.
1,In app/controllers/review_mapping_controller.rb  methods are too long.
0,"Yes, comment are descriptive."
0,The code was clean and good.
0,The test was written carefully.
1,"After reading through the code, a lot of the things did make sense, but when first reading the wiki, the same wasn't the case. Adding a high-level understanding of what the code does, especially in the model/questionnaire.rb and also how refactoring was done on the create method would definitely give a better understanding of the code and problem statement."
1,Some codes can be added to the write-up so that we can easily understand the refactoring part.
0,Yes they have covered the edge cases and removed older test cases that re redundant
0,They have added comments in new helper methods
0,The methods are named correctly.
1,The test plan does not explain what does each function is for.
0,The wiki page defines the current scenario and defines what needs to be done.
1,"The deployed version on Heroku does not work. However, pulling their github repo and rebuilding the expertiza into vcl I was able to test the functionality. I would suggest the authors to update their heroku projet or setup a VCL instance."
1,"The team has not made a seperate section to include Test plan making it difficult to find it. However, in section 3 of changes implemented the authors do say that they are using the ""Magic Tricks of testing"" by sandi metz as guide and have moved the tests for newly created controllers to different spec files. I would suggest the authors to create a section to detail about Test plan, and also include more detail about each change implemented in related subsection."
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes. However, They have not mentioned the design principles they have used. Also, there are certain changes like the ""Created a variable named ‘allowed_actions’ in method choose_case(action_in_params)""  is proposing a new logic for implementing the code rather than refactoring. I would suggest to make the documentation detailing the issues and subsections as problems and proposed changes. This would make it much simple and easier to understand the wiki."
0,They have added comments everywhere they changed the code.
0,"Since the project was focussed on refactoring, they have used meaningful names for the methods and variables. Also, it is neatly mentioned on the wiki page."
0,Good explanations for the code they have written and modified.
0,Manual testing is working.
0,The code is short and well commented
1,"The build has passed, but the test coverage has decreased."
0,"Ye, the writeup explains the need for the work."
0,I could not find any failing edge cases for their changes.
0,"I could not personally find any such instances. Since it was a refactoring project, the team has actually followed the steps to reduce redundancy in code."
1,"Though there is enough justification provided in the writeup, I found both, the number and descriptiveness of the comments a bit lacking."
1,"The team has done a good job when it comes to naming/renaming methods and variables. The justification for each such action is also clearly stated in the writeup. In my opinion, no_particular_topic still doesn't capture the meaning well enough, it could maybe be renamed to no_topic_preference or something along those lines."
1,"They have not explicitly made a test plan section in the wiki, but I could find mentions of changes made to test files in response to the refactoring. So, again, the writeup needs to be better formatted to improve readability."
1,"The writeup covers almost everything required for understanding the changes, though the formatting and section headings could be better. Currently, they are just listed using file names."
1,"Not many methods created, not comments added"
1,"Some of the methods they did write a little comment, but some do not have any comments.
e.g. In the app/helpers/import_topics_helper.rb file, the team adds a new function called self.assign_team_topic and should add some comment to tell others what this method does."
0,They did comment all the method
0,Methods contains appropriate comments that explain the functionality of the methods and the changes incorporated.
1,There are no comments for the new code. Add the comments for the new methods also for the changes which has been implemented. Comments would help others to understand why this particular method is written.
1,Though the variable names and method names are good and intuitive they haven't added comments to most of the part of their work. Adding more comments could help other people understand the flow or what the person intended to perform with this piece of code.
1,There are no comments for the code additions at all. Add the comments for the new methods also for the changes which has been implemented. Comments would help others to understand why this particular method is written.
1,Seems there's not comments for each method. Adding comments will be great to understand better about the code that is modified.
1,"There are only a couple of new comments that describe what the new code is doing i.e. the 2 comments in models/team.rb describes the change in the following code that fixes one of the issues. The comments gave a good idea about the changes and helped me in understanding the new changes.
Though the test names in the completely new spec/models/sign_up_topic_spec.rb were themselves descriptive, the authors could've added short comments before each test to describe how each test was working."
1,The wiki did not show the path of thought of how they fix the issue. Like why they write this code for fixing
1,"Yes, they did explain why and how they did the work.
 
Suggestion:
1. Please write more explanations of the code of each issue.
2. There's no test part like a video test or Rspec test on the wiki page."
0,The wiki explain everything very well.
0,The writeup explains the fixes that address all of the four issues aptly.
1,It has been explained fairly but can be improved little more. Like why the functionality is important for the application.
1,"Yes. It has been explained that what was the problem with the existing implementation. In few bugs, it has not been explained as it was a new implementation but describing it why the implementation has been done in a particular way would help others to understand."
1,"Yes, the wiki page looks good. They have added code snippets as well as the screenshots from the UI clearly explaining the working of the project they have done. They could have added more explanation for the solution they have implemented and the approach they followed to implement it."
1,The write up been explained fairly but can be improved little more. Like why the functionality is important for the application.
0,Yes. The writeup clearly explain the assignment the author did and how the completed.
0,"The write up introduces all the 4 issues and explains them in detail. The fixes are well documented and there is no problem following the attached code.
The authors do a good job of explaining the changes by only including that code in the documentation that fixes the issue."
1,no test plans on wiki
1,"1. On their wiki page, there's no any explanation about the test part.
 
2. In their Rspec file, they did write their own test, so please mention it on the wiki page.
 
3. I cannot log in any account including instructor6. After I check the database.yml file, I found there's a blank of password, probably you should set the password to ""expertiza"", then you can run the database and the reviewers could log in the expertiza by using user: instructor6, password: password."
1,There is no Test plan In my point of view
1,The test plan has not been included in the writeup.
1,There's no test plan section in the wiki but there are certain test cases in the commits. I couldn't find the test case for the import functionality but that wasn't there earlier as well. So i understand why it is not in the code as it would require to write all the test cases first for import topics and then make changes for these bugs. Just mention this info in the wiki doc.
1,"They haven't mentioned anything about the test plan. Since this project was to fix glitches, they should have tests and enough description to make sure their solution is working correctly."
1,"No test plans included in the wiki doc, can't tell if automated testing was done or not. Even if not, test plan should be included for future scope so we can test the changes at some point at least. Some test cases were committed but not for all bugs, that would be as the modification did not have existing rspecs."
1,"I didn't find the test plan but there's an comparison before & after the bug was fixed. There are examples clearly shows the difference before & after.
I didn't find the exact different pre-conditions and edge cases explained."
1,"The writeup does not include any Test Plan section, though the authors have written new test code for sign_up_topic_spec.rb and team_spec.rb. There are various tests that test different possibilities for example, ""returns false if user_signup_topic.is_waitlisted == false"" and ""sets sign_up.is_waitlisted = true if slotAvailable is false""."
1,no test plan in wiki page
0,Code is enough to explain the work
1,"Yes, most of the writeup is pretty well.
they did write about the brief introduction about this project to let others understand what it does, and also indicate the functionality clearly.
suggestion:
1. write about the test part.
2. write the detailed explanations for each code part."
1,"good wiki page, the only thing need to do is add test plan and everything will be fine."
0,The writeup is detailed and clearly explains the issues addressed along with the code snippets. Hence understanding the project and fixes was easy.
1,"The coverage has been decreased by 4.4% and that's because of the new methods which are added, though for certain methods like i mentioned in one of the above question that it's not possible to write cases so coverage may not be increased."
1,"Explanation of what issues they have fixed and what code they have implemented is good.
It would have been better if they could explain the approach they followed to correct the bugs in the project.
They gave the code snippets on the wiki page. They could improve the solution by further describing the solution textually or by drawing the flow diagrams to show action flow."
1,"Write up could use some more effort, like outlining the test plan clearly, even if not implemented, for future scope. Screenshots check. Could be more descriptive, the problems and solutions/drawbacks could be described in more detail."
0,The wirteup clearly indicate the functionality the work is related to. It is straightforward to understand the details of the project that what the project does and how it works.
0,brief and clearly wiki page.
0,"The writeup explains each issue and the corresponding fix in detail. The authors do so by attaching the relevant code and screenshots of the output in the writeup.
This helped a lot in understanding a lot about the issues, fixes and the new code even before visiting their pull request."
1,"cannot login as instructor6, the password may be changed"
1,"sorry, but I cannot log in. (I mentioned the reason in the second question)"
0,looks good to me
0,The code changes works for most of the edge cases.
0,All the features are working as expected  and bugs are fixed. But it is explicitly mentioned in the wiki that certain edge cases cannot be considered because instructor need to ensure that they are using accurate data in the import file such as the team name should exist in the system before using it in the import file.
0,They are working fine. The flow of actions performed is the same as mentioned on the wiki page.
0,All the features are working as expected and bugs are fixed. But it is explicitly mentioned in the wiki that certain edge cases cannot be considered because instructor need to ensure that they are using accurate data in the import file such as the team name should exist in the system before using it in the import file.
0,"Yes. Problems mentioned in wiki page are fixed.
On wiki page, there are clear explanation, screenshots and modification of codes show how the issues were fixed as well."
0,"The new changes work perfectly on the authors' deployed project. The issues that were to be resolved and the corresponding features to be fixed were working and did not give any errors. 
For Issue #153, the code also handles the case where the import list might include topics that are not yet assigned to any team."
0,"1. The functions they added are pretty well and the code does not need to be separated.
2. more comments are needed, it can help the reviewers to understand it better.
3. the code is good and does not duplicate."
0,The code meets all of the above five requirements.
1,"Function length is in shape
 
There are no comments at all in the code. Please put some
 
Code does follow Ruby guidelines."
0,"Function length is in shape
There are no comments at all in the code. Please put some
Code does follow Ruby guidelines."
0,"Except the commenting part, everything looks good. As mentioned earlier, they tried to improve the quality of code by renaming the variables."
0,"Yeah I felt that the functionality added was something very fundamental and was easy to be understood in the first place without the document. However, I also feel that the document has done justice to the task been done since most of the work was explained in an organized way with its help."
0,"Function length is decent, but there are no comments at all in the code. Code does follow Ruby guidelines and DRY principle."
1,"(1) The length of functions are not too long which is good.
(2) No. I didn't find any code that is needed to be extracted into separate methods.
(3) Yes. For some functions more comments will be helpful to be understood.
(4) The code does follow the Ruby Style Guide.
(5) No. I think the code quality is good."
0,"The features work as intended. One problem I found was that when I create a new late policy, and click on the back button it goes to the page editing the late policy and when I click the Back button on this page, I get a ""ActiveRecord::RecordNotFound in AssignmentsController#show"" error. Please fix this."
0,"The new code added by the authors was very readable in terms of naming. The method and variable names were descriptive enough and were concise.
None of the new code needs to be extracted into separate methods as each method does exactly what it is supposed to do, nothing more.
Except the models/team.rb file, the authors could implement rigorous commenting in all the other files so that it's even more easier to understand their code.
The code follows the Ruby Style guide. The new code follows all styling conventions.
I could not find any repetition in the new code itself or of the new code with the old code. The code follows the DRY principle."
1,Some test cases have been added using RSpec but it seems not all cases have been considered because the coverage has decreased. Please add more automated test cases that include edge cases as well.
1,"1) Most methods are okay, but I found the function 'update' in late_policies_controller.rb to be quite long that could have been modularized. It also contains many if-else blocks.
2) Update method in late_policies_controller.rb could be modularized.
3) Many more comments are  required. No comments have been given for the new code that has been added.
4) The code does follow Ruby Style Guide.
5) The code does not smell and follows the DRY Principle."
1,No comments have been added in the code that has been added. Please add multi-line code before the beginning of a method describing what the method does and single line comments inside the method wherever required.
0,"The team has done good work by following standard coding practices. I was able to figure out what a variable, method or class name does by looking at their names."
1,"The write-up does not include a Test Plan section. It just includes the problem statement and the solutions to those problems. The write-up only mentions in one line that RSpec tests have been added. Please add a test section highlighting the pre-conditions, edge cases, invalid input values and other possibilities."
1,"The write-up is well written, it contains the problem statement as well as the solutions for them. The authors have done good work by including screenshots as well as some code for the solution they have implemented. However, the write-up does not include any mention of design patterns and no reason for choosing the solution they've implemented. Please add reasons for choosing the solution you've implemented."
1,"The write-up includes the problem statement as well as their solutions but it does not provide much insight into why they have used any specific design pattern or why they've done what they've done. Also I had a hard time figuring out how to get to the 'Create new late policy'. Please add the flow from how to get to that for any assignment. Aldo, please include more details about the test plans including the automated test cases."
0,It works
1,No test is carried out
0,Yes some methods have comments
0,Yes they are suggestive of the functionality
1,Test plan is missing.
0,Yes it is well explained.
0,It is very clear and easy to understand
1,"Looking at the code changes in the pull request, I do not see any tests that were added."
1,No new methods added.
1,"The problem statement makes references to steps that are not present. For example, it says ""(step 2 above)"" where there is no such step."
1,The create policy feature works as intended but the backlink does not work. On clicking the back link an error occurs that is the RecordNOT FOUND error. Please check whether the assignment id is stored properly or not. I think the assignment id is null.
1,There are no test cases added.
1,The functions are short. The code requires more comments because I had trouble following the code. Other things are fine that is the ruby style and also the code is not DRY.
1,There are no comments for the code and it is difficult to follow the changes they have made.
0,The variables naming is good and they followed the object-oriented principles in naming the methods and variables.
1,They did not mention anything about the test plan. I cannot see any test cases. They should have written test cases testing whether the policy has been created or not. They should also write the test case for the backlink. By using the capybara they could have tested whether the link redirects correctly or not.
1,They did not explain why the work was done that way. They did not mention any design principles or patterns they have followed. Looking at the code I see they could have used a design principle.
0,"No new method, so no comments."
0,All names are reasonable.
1,"I can not see any Test Plan section. Only some screenshots. Please add some Test Plan before Round2, I believe you can do so much better!"
0,It's really clear.
0,"Yes, they works correctly in edge cases. And they also describe their cases in wiki as well."
0,"No, all their code (i) is DRY (ii) follows Ruby style guide (iii) is commented (iv) does not contain long methods (v) variables and functions are properly named."
1,"Yes, they comment each method for late_policies_controller.rb, and every comments seems practical. But method late_policy_params, instructor_id and late_policy have no comments."
1,"The last commit of the pull request doesn't build pass. That might because they pull request from master to master. They finished their function on beta branch, so they should push the beta branch to beta branch. 
After I checked the code on beta branch, I think the instructor_id method should rename to get_instructor_id for fear ambiguity."
1,"Yes, they add correspond Rspec test for their function. But I think they should add some valid test cases. Besides, If they can have a picture of their test cases on wiki, I think that would be much better. Last, I think they should add some UI testing steps for the policy function."
0,The wiki almost explains everything. And I can get enough information about what they have done.
1,"> I dont see any Test Plan.
> Could not check this as ""test plan"" is missing."
1,"1) Functions are not too long.
2) I think the modules have been carefully created and do not need to be separated from how they have been implemented right now.
3) Definitely need comments in the code. I dont see any right now and its hard to follow up without them.
4) Code follows ruby style guidelines. I dont see any violations as such.
5) Code is not smelly."
1,"> I can see some comments for submitted_content_controller.rb. However other than this, I dont see any comments.
> Also, please delete the commented lines of codes which are no longer used."
1,"> Names for the variables/methods/class seems to be well chosen. They are descriptive of the functionality it offers.
>  However some of the variable names can be improved. For example: rev_res_map."
1,"> There is no Test Plan. Please add this. 
> Neither can I see any testing screenshots or anything like that which would show the fix. 
> Consider making a screencast of the testing and add it to wiki."
1,"1) Write up is very brief and does not include all the details.
2) One liners have been added for each issue. Please give more details to them or add some pictorial representations to help understand better.
3) Fixes to the issues have not been described. Please describe what exactly you have fixed and how."
1,"Good thing is that all the implemented features are working properly. There are few spelling errors in the template of the email. Just correct it. 
Templates can be improved with the content and can be more professional."
1,"None of the test cases has been written, also there's no test plan in the wiki. I suggest that you guys should write test cases because in production applications, even a small piece of wrong code can break the application and it can get worse for the business."
1,There's a change in the file db/schema.rb where as there's no description about it in the wiki. Change in schema should have been explained as schema is the heart of the application always.
1,"cur_date could be current_date which is more specific and gives better understanding of why the variable has been used. 
rev_res_map: this variable doesn't imply anything by the name. Can be improved by changing rev to reviewer 
There is a comment in the mailer_helper.rb inside method submission_mail_to_reviewr: If the first name is not required why to keep the comment in the code? 
Unnecessary space at the end tag of the method inside file mailers/mailer.rb"
1,"There's no test plan and coverage has been decreased by 8% which is big difference and should be handled. Few methods were modified so existing cases can be used with some minor changes, also for the new methods, new test cases should be in place."
1,"Not exactly. There's no explanation for why something has been done in a specific way. But i understood why it has been done this way and that seems to be apposite to me. Not everyone can understand with this limited text in the wiki, so describe why the changes has been done in a specific way and how that's the best possible way of doing it."
1,"It does explain that what needs to be fixed but doesn't mention that why it is important for the application. Just explain that why these features are required in expertiza so that one can understand what is the exact use case. 
Introduction is just one liner which can be ambiguous to understand, so just describe in 4-5 lines about the functionalities."
1,The project can be deployed after the bug indicated below is resolved. I just thought of a case where the author may not want to keep the directory name as it is suggested by the system (the auto-populated name) and there is where an error occurs.
0,Writeup is very precise and delineates the entire process very well.
0,"All test cases passed, build successful, no conflicts to be resolved."
1,They are checking if an assignment with the same name already exists in the create method of the controller. I think this action can be separated out and that would help keeping the code DRY and reduce the size of the method. It would also make the function more transparent since the function will be doing what it's called and not other stuff too.
0,It was easy to understand and I didn't have to search for anything specific. It covers all the necessary sections.
0,Yes. All cases work
0,"The team has modified existing test cases to suit their requirements, such that it covers the code modified in the controller."
0,"Yes, the build is passing"
0,"Yes, quite a few commits were added in round 2"
0,"Yes, the code looks good to me and could be deployed to production slot."
0,Yes the feature seems to be working as intended.
0,Yes all the check-ins got passed.
0,The team has checked in test cases and modified code in app/controllers/assignments_controller.rb in 2nd round.
0,Team did a good job on writing the code and refactoring it.
0,The code can be added to the production server in my opinion but I would still suggest that the testing be done rigorously by some expert or any TA which would prove the robustness of the task implemented.
0,The build passed successfully in Travis CI and there were no errors or conflicts detected.
0,I think that the code is well written and easy to understand as well as quite intuitive since not many changes have been done in the main code.
0,It's ready to be deployed.
0,It works same as in the first review.
1,"Yes, but I have one concern regarding around sanitising the user input for the directory input field."
0,The write explains the current scenario and what needs to be done perfectly.
0,Yes the system works. The code works as intended.
0,The pull request pass the CI tests and there were no merge conflicts.
0,They have made new commits and tried to implement the changes that were suggested in the first round.
0,"Yes, the authors have fixed most of the issues that were pointed in the first review."
0,I have no concerns at this time. The code functions as expected and there are tests written to ensure functionality remains.
0,"I thought that the writeup contained enough detail the last time I looked at it, but it looks like even more details have been added. Looks good."
0,Tested the system manually through the UI. The functionality works as expected.
1,I made a suggestion in my last review that has not been changed. It was a small change though.
0,"Yes,everything works well"
1,"They add test cases,but the coverage decrease."
0,They pass the build pass.
0,"Yes, they did commit a lot in the second round."
1,"Even though all the tests and bots have passed, this project might not get merged as this team has committed schema.rb. The changes in schema.rb don't seem relevant to the project. A commit was made with message 'Original Schema'.
Also, the code needs a bit of refactoring as mentioned in the next question."
0,The write up self explanatory and contained and provides links to videos showcasing demonstration of the project and test cases passing.
1,"The basic functionality of disallowing duplicate names for assignment folders is working.
However, () are not removed from the assignment folder name if assignment name is given as test() assignment. The assignment folder is created as test()_assignment. The document says that special characters like '/','\','$' etc should be removed but its not clear if () should be removed or not."
0,"Yes, a number of commits were made on the day of the submission including a commit for adding Rspec tests."
1,"The create method in assignments.controller is huge and could benefit from refactoring.
In the previous review, I found some variables that needed renaming. These variables are still left as it is.  ""A lot of variables have been named in shorthand. Like cur_due should be current_due, ques_array should be questions_array."""
0,The build passes and the system works as intended. And they tested their code. I think this code is ready to be deployed onto the production server.
0,"They explained they work in detail and well.
The writeup includes the problem statement, how they do their work, and their test plan."
0,The system works as intended. The functions works as the document said.
0,The newly added tests covers the range of this project and the build passes.
0,They committed code during the 2nd round.
1,"No, it still needs improvements as they have not handled exceptions well and also they have put all their code changes in the controller which is not recommended to do."
0,"Yes, it is well written and easy to follow."
1,"Overall, it works fine but on one edge case when I try to save two assignments with same name under same course, the application throws exception which should be handled with error message at the user end."
1,"No they did not added any new test cases just tried to correct the existing ones. Also, test coverage decreased overall."
0,Yes all checks have been passed.
0,Yes they added many commits before final submission.
1,Yes they did try to improve the code and resolved issues related to code climate. But still the indentation is not uniform and also they could have added more comments in the UI part and in assignments_controller
0,Test plan seems pretty robust.
1,"A major piece of code is added to app/controllers/assignments_controller.rb. As there are no comments to the code, it is difficult to understand it and justify it's length."
1,"Code build is successful for all the 4 builds on Travis CI.
1 Issue pertaining on codeclimate.
 
Code Coverage decreased to 15.238%."
0,"Write-up is very detailed and all the steps taken by the authors are indicatedclearly.
The testing process is well elaborated with visuals."
0,"Build is passing and changes look good. However, the team has mentioned issue 2 uses some queue which is not functioning, so that can't be tested as such, not the team's fault either. Except for that part, I think it is good enough. The UI thing ie issue 1 could definitely be integrated."
0,"amazing write-up, covered all points, nicely split the issues against the solutions and drawbacks. Included snapshots wherever required, UI and also of the database. The scheduling involves Sidekiq which is not fucntioning, so they've attached db snapshot so we know jobs are being created"
0,"Yes, issue one is UI entirely, lets you add a drop topic deadline. This deadline can be a future date and this check has been enforced as well. The placing of the column is right, the dates are also retrieved the next time once filled in."
1,"One issue is completely UI, other is concerning job scheduling with Sidekiq. They have modified and existing method for the test scope, and mostly the methods are private so no tests required. However, i could spot one new method, not private, that is also included on the wiki which doesn't have a test case. Total coverage reduced."
0,"Yes, the Travis CI build passed for the latest Pull Request. There had been random failures before that, but i see some under Features branch, so that should be random again"
0,"Yes, new code was committed consistently, also in round 2."
0,I think the implemented changes are in ship ready state.
1,"No test cases are created by the team.
I think they should test some of the methods that they have implemented. 
They wrote in the wiki page that they have modified the already existing test cases but it is not visible in file_changed in the pull request."
0,yes build is passing on Travis CI.
0,Yes they did committed their code changes during second round.
0,"The code written is very neat and clean.
Comments are also there for any one to understand the code.
They could have added some test cases to test the functionalities they have added."
0,It is very well written
0,The overall write-up was already in good shape and well structured.
0,The code looks good to be merged and can act as a good starting place for a future team.
0,The project works as intended. Kudos!!
0,Build is successfully passed in Travis CI.
0,I think its a good place for future teams to pick up from
0,The comments were apt and proper coding practices were followed in the round 1 submission itself.
0,There were many code commits done during the 2nd round. https://snipboard.io/3T2L1V.jpg
1,"Though no test cases were added, the explanation was given in wiki
Although for views, if test cases can be added.
The existing tests  for calculation of deadline duedate, for the following cases can be included



-if no deadline date is set on topic'
-if date prior to the topic submission deadline is set as drop topic deadline
-if date after the topic submission deadline is set as drop topic deadline"
0,Yes the final pull request travis CI has passed
0,"Yes. The coverage decreased overall is just 0.3%. Also, the build has passed along with that there are no merge conflicts with the original score."
0,"Yes, it works as expected as mentioned on the wiki page."
0,"Yes, the build is a pass. Also, there are no merge conflicts with expertiza repo."
0,"Yes, some commits were performed in the second round."
0,The code has been commented wherever possible and their code looks clean. They followed the DRY principle.
0,Yes. I think the code quality is good and ready to be deployed.
0,"I think the writeup is great. All problems in this project are well defined. Also, for each of the problem the solution is provided to explain the plan or idea how the team will fix the issue which is helpful. In the functionality section, problems are well analyzed, cases, drawbacks are well explained. Additionally, the code change shows in which file and how the code is modified, which is very clear.
Overall I think the writeup is great."
0,This project is to refactor code. The features work as they supposed to. There are also solutions and screenshots provided on wiki page which is helpful explained what the issue is and how they get fixed.
0,Yes. The most recent commits was on 11/06. There are some new code committed during 2nd round.
0,"Didn't find bad names, bad code style or DRY problems."
1,"When I go to edit some assignments, I see the error message: undefined method `id' for nil:NilClass.
This is followed by the code snippet:
function populateDueDates(topic_id, review_rounds) {
elementsArray = [];
$('[id^=""due_date_<%= @assignment.sign_up_topics[0].id %>""]').each( function(i, e) {
/* you can use e.id instead of $(e).attr('id') */
elementsArray.push($(e).attr('value'));
});
It looks like there isn't a null check in this function before looking at the due date. It's unclear if this error is related to new functionality. Apart from this, the functionality seems to work. I could modify the deadlines of assignments."
0,"No tests were added, and coverage only decreased by .3 %."
0,The Travis CI builds on the latest commit. Previous commits that caused the Travis CI to fail were fixed by later ones.
1,"As the feature for problem 1 is crashing, this project cannot be merged.
No, next teams cannot start from here."
1,"Problem1: unable to create an assignment. Getting the following error:
function populateDueDates(topic_id, review_rounds) {
elementsArray = [];
$('[id^=""due_date_<%= @assignment.sign_up_topics[0].id %>""]').each( function(i, e) {
/* you can use e.id instead of $(e).attr('id') */
elementsArray.push($(e).attr('value'));
});
 

Problem2: As mentioned in the wiki, this feature cannot be tested, hence, cannot verify"
0,"The team modified an already existing Rspec test but did not add any. However the wiki mentions that all the modifications were mostly in the views hence unit test cases aren't required. Hence, it should be fine."
0,All tests are passing and there are no conflicts.
0,Commits have been made consistently in the 2nd round.
1,The code displayed on the wiki has some functions that are huge and could benefit from refactoring.
0,"Yes the code looks good to be deployed to the production server.
The Test cases do pass and the functionality is working fine."
0,The writeup is good and clearly explains the project description and changes which were made.
0,"The feature is working fine:
The instructor is able to Drop Topic Deadline for topics, Calculation of Drop Topic Deadline"
0,"Yes, the team did edit the spec file writing the newer cases like:
 allow(TopicDueDate).to receive(:upsert_drop_deadline_job).with(any_args)"
0,Last commit was seen on 26-Oct-2019 (Added Drop Topic Deadline column for staggered deadline assignments)
0,The method names and variables names seem good. For example - asgnmt_submission_due_atThe name clerly explains the purpose
0,I think this project can be deployed on production server of expertiza.
0,build passed and no merge conflicts to resolve.
0,No new code added after 6th November.
1,I found over all code is well written but as mentioned above two methods are a bit longer and can be reduced into smaller method calls.
0,they did fulfilled all the requirements that were present in the problem statement. all functionalities are working perfectly in deployed application.
0,they did wrote comments for all important logic and it helped me to understand the code.
1,"I can not find the link to the pull request or the git repository that they have been working on. So, I am not able to test that. if you can add that link to the submission, I would like to review again."
0,"as they mentioned, they did not required any unit tests to be done. But they did tested the controller for the changes that they have made. good job."
0,writeup is very impressive. anyone can understand the problem and proposed solution by reading the wiki page.
1,No test plan and hence no automated tests.
1,Couldn't find the code changes nor the pull requests in the github. Code snippets are included in the wiki but cannot identify what changes have been made exclusively by the team as they are not highlighted and hence not able to comment on it.
1,"There is no test plan in the wiki page. According to the issues, we can test the scenarios like
-deadline modification at the point where the main deadline finishes or something like that.
-deadline extention features."
1,"The team mentioned clearly about the problem and their fix. They even attached a video explaining what has been done which gives user a quick glance of the issue without any wastage of time which is great.
The code snippets attached are explained properly. But user cannot identify what changes have been made by the team exclusively.
The github link is not attached while submitting which was difficult to find. May be that can be attached next time.
May be the team can include the instructions for the new user how to test their changes."
0,All the functionality works properly.
0,The feature works nicely in accordance to the description in wiki document and the screencast video.
0,Functions are of proper length and the comments associated with the code added were helpful in following the code changes.
0,"The comments for all the code changes are descriptive enough.
The functions(get_drop_topic_deadline, modify_drop_deadline) pertaining to the feature implemented are quite descriptive."
0,"The test coverage has decreased.
Class names, variables and methods names are quite reasonable.
The build is successfully passed. kudos !!"
0,"The authors have very soundly explained the reasoning behind what they have implemented. They properly went with the flow, They have thoroughly explained the current implementation and the drawbacks associated with it. Furthermore they have detailed out how they are solving each of the problems associated with the current implementation approach."
0,"The write up is very well structure.
- First they have provided background.
- Then they explained the issues they are trying to solve.
- They explained the current approach and the drawbacks associated.
- Lastly, the have explained the feature implementation as well along with the associated code snippets.
Overall great work."
0,"yes! 
The code does straight-forward implementation, the result of which can be checked using views."
0,the test cases need not be implemented since it's wholly on views
1,"the link for pull request hasn't been submitted.
The code specified in wiki page has used proper variable names  which are compreshensible.
However the min_left variable can be changed to min_time_left to indicate that the measure is time."
1,"the pull request is not specified hence was unable to check and for the code practice overall. But the code listed on Wikipedia are succint well modularised.
However there is duplicate code in wait listed topics deadline update.
      min_left = topic.due_at - Time.now
      delayed_job_id = add_job_to_queue(min_left, topic.id, ""drop_topic"", topic.due_at)
      delayed_job_id"
1,link for the pull request not submitted. I can't verify the above points.
1,Link for the pull request not provided.
0,They have mentioned that their project doesn't require this part on the wiki page.
0,Good wiki page. They have also attached a video that explains the working of work they did on this project. They could have added the explanation for why did they choose this approach to solve the issue. More explanation for the solution section could be added.
0,Write up is good with code screenshots. But more explanation for the approach they choose could have been provided.
0,"Yes, I was able to add a drop due date to an assignment. Since a date picker widget is used, I didn't have to test edge cases with the input entered."
0,"The longest added method, 'modify_drop_deadline', was only 19 lines long, which is a good method length. Since most methods are small, breaking them down further with helper methods would just obfuscate the code. No extra comments are needed in methods. The code also seems to follow the ruby style guide."
0,"All methods that were introduced are commented at the top of the method and inside of it. Each comment is concise, but they are frequent enough to thoroughly describe each method."
0,"The write-up accurately describes the work done to fix the application. I feel it could have a little more detail. Basically, the project was focused on adding user input for drop topic deadline for an assignment, as well as dropping waitlisted topics after the deadline."
1,"Unable to replicate functionalities.
Also, there's some issue ""An instructor is not allowed to edit this/these assignments"" while trying to create a new assignment using instructor 6 account."
1,"Very few tests have been mentioned as the team claims the changes are in the views.
However, the changes don't seem to be limited to views."
1,"No commits have been made to the pull request.
The code in the wiki page don't have comments for a number of implemented methods. Especially in the code for problem 2."
0,The code looks clean. Functionalities have been separated and each method does 1 task.
1,"The code changes displayed on the wiki page are not committed and hence don't show up in the pull request.
However, the variable/methods in the code displayed on the wiki page seem fine."
1,"The problems have been mentioned in the wiki page, however it is very difficult to understand how to test the application on UI as no information about that has been provided.
Unable to test features as there's a bug while trying to create a new assignment."
0,"Comments are properly added, cyclomatic complexity of codes looks good as well. Follows the DRY principle."
0,"""if drop topic deadline is set or updated by user then save it""
The comments like above are properly maintained for each method and very briefly explains the method role."
0,The write very well explains the description and functionality of the project.
0,No method is longer than 25 line. Code is  DRY  and follow ruby style guidelines.
0,Write up of the topic clearly explain the issues in this topic and what needs to be done to fix these issues. All details are clearly illustrated and easy to understand.
0,I can understand what author wants to do in this project and write up of the problem clearly mention the problem and what needs to be done to fix these problem.
0,"Yes, from their proposed solution and their design diagram, I think their design is simple enough."
0,The code is descriptive.
0,The code is very well written and follows good Ruby coding conventions. The refactors names are all in accordance with Ruby coding principles.
0,"- No new code was added in 2nd round, only variable names were refactored in 2nd round"
1,"- The writeup is good in terms of presenting the information. They have added screenshots and descriptions of the bug which makes it a bit easy for reviewers to understand.
- Best part they added loopholes although I am not happy with the title it's good that they are aware of possible `caveats` which may hamper things.
- They didn't add any information on how to test and what to look for when testing. In the test plan, they have just added screenshots of their test suite running but didn't state how can reviewer run it to verify the changes."
0,"Because this was a refactor story, I checked if there is a change in behaviour of the application and could not find any new bugs. Good job team."
0,- Code working as before
0,Build is passing and there are no conflicts visible in the Pull Request
0,Travis Build has passed successfully. The functionality is working perfectly. The data can be downloaded in CSV file format.
0,The build is passing the Travis CI with no conflicts.
0,"Yes, build is passing"
0,Build has passed after the latter commits. No conflicts
0,"Yes, the pull request has passed and the changes do not have any conflicts with the base branch."
0,"Yes, the Travis CI build passed and there were not any conflict which was to be resolved."
0,I think it is ready to be merged.
1,"The development code is ready to be merged into the master, but few things need to be taken care of first, like the reduced code coverage and the extra code written in controller for the sake of running Tests."
0,"Yes, the code is ready to be deployed onto the production server as this functionality is helpful for the teachers and graders."
0,"Yes, the code is DRY. I do not see any bad naming or design."
0,"Yes, the current code is ready to be deployed, however I would suggest to add more tests for and around this module ."
0,"Yes, the code can be readily deployed to production as the functionality works as expected and the newly written tests pass too."
1,"The team's major role here is to refactor code, and use/remove existing methods, and thus this question does not seem to apply to them. They have added new variables in the questionnaire model file, such as : 
create_questionnaire_node, create_new_questionnaire_obj, etc.
which seem to suggest their functionality.  I have no further suggestions for improving the names of such methods, as they definitely seem to indicate their functionality per se."
0,The writing is really good. The image representation is clear and impressive.
0,The writeup is indeed improved and worked upon since last time!
0,THe writeup is very good and explanatory. Flowcharts and different snapshots helps the reader to understand new functionalities in a better way.
0,The writeup explains the issue and its fix in depth. It also includes the test plan and test case implemented to validate the fix.
1,The code explains the issue as well as the solution. But the solution is not well-written. They ave included a diagrammatic representation of the workflow and snapshot of the code but no explanation has been given to how they have implemented the solution.
0,"The write up is well mentained, screen cast and flow diagram helps understand the goal and how it is achieved."
0,The write up is very well written and has flow diagrams and other illustrations where necessary. The test plan is also very well written and has all the steps to test the functionality effortlessly.
1,"The team has done some nice work with the writeup. They have included all the important aspects like Introduction, Implementation, code snapshots ant test. However I feel that code snapshots needs more description and test and test plan should be under same heading, something like ""Rspec Test"" and ""Manual Test""."
0,"Most of the functions work as intended in the 1st round, and they improve the system in the round 2."
1,"No changes in functionality since last time, Working as required.
However, the data format is still the same against my last review:
""The format of  entries in csv is not consistent, the ""name"" values and ""comment"" values are put under double quotes, where as other values are put in directly.
PS I do not see how Delegation pattern as mentioned in the wiki is implemented in the code implementation."""
0,The functionality is working perfectly. The data can be downloaded in different formats along with CSV file format.
0,"The fix addressed the issue, all features work as intended."
0,"Yes, it works"
0,"Yes, the code works as it is supposed to."
0,Works as intended.
0,"Yes, the functionality works as described in the wiki. Also, the newly added test cases pass. Kudos!"
0,"Yeah Tested, the intended functionality works smoothly"
0,"Yes, overall functionality seems to be working. I was able to export the review scores."
0,"Yes, they added passes and changed the coverage."
0,The basic and mandatory Test Cases were added in the previous round itself. And the overall coverage has reduced by 24%.
0,"Yes, the test coverage has increased. They've written test case for some new functionalities they've written."
1,"They made a lot of UI changes which were tested. However, they made changes in the reports_controller as well and i can't seem to find tests pertaining to them"
1,"Yes, the team has added a lot of test cases that cover the range of the project. However, the coverage has decreased."
1,"Overall coverage seems to have decreased considerably, although the team has added simple tests to cover their code additions."
1,"Yes, the team had added the test cases. However, team could have written the cases thoroughly. I can see test cases like  ""can create an empty csv with just headers"".
But test cases with more edge cases need to be added like 'large csv files', 'csv with characres', etc. Overall the coverage decreased in the CI build."
0,They made several commits in the 2nd round
0,"The commits regarding comments is added, No new code entered in the branch as per the expectation. Code was complete by Review 1 deadline."
0,"Yes, new code with added testcases and more comments is committed"
0,"There have been commits during the 2nd round. Comments include refactoring/renaming variable names, adding test cases and comments."
0,"Yes, they added 4+ commits"
0,"Yes, 4 commits were made during the 2nd round."
0,"Yes, new code was added to the second round and issues mentioned in the first round regarding naming and comments have been addressed."
0,"Yes the team have checked-in codes during second round. The team has added some test cases and comments, refactored variable names, etc in 2nd round."
0,The code is well written. They changed some syntax problem and made small changes in the round 2.
1,The code is written well. However the issues reported in the last review have not been addressed at all.
0,The coding style is pretty DRY. And can be understood if gone through the documentation.
0,The code obeys all good coding practices.
0,"Yes, the code is well written and their testing scope increased since first round."
0,"I didn't find much problems with the code in the first round as well and looking at modified code, the team has made use of good coding practices."
0,Comments have been added for the second round of review and other naming issues have been taken care of.
0,"The code is very well written and follows Ruby conventions. Also, all the methods are well documented."
0,"The code is well written. I did found issues in 1st rounds regarding comments, the team has improved on the feedback given."
0,"Sure, the team add comments to each method"
1,"Comments in new code are missing, but at the same time, Most methods are self explanatory and do not need comments."
1,"Although there are comments for methods, there aren't any comments inside the function, which requires the reader to carefully read the code and understand the code by himself."
1,Few methods have comments missing.
1,"Yes they have well written comments. One comment in the reports controller says ""extended functionality"" I think they can come up with a better title for this."
1,"Comments have been provided in one line wherever possible, but in reports_controller.rb, the newly added code does not have any comments. I would like to make a suggestion, please give a multi-line comment before a method that explains what this particular method does, and a single line comment inside a method wherever required to give details about a specific line that might not be so straightforward to understand."
1,The function exportTableToCSV could have more comments as to what steps are being performed.
1,"Yes, the comments are descriptive but abstract."
1,Not Very descriptive Comments. They Should've put them because a non-java-script programmer should understand it easily.
0,"This is one of the best writeup I have seen in the review. They provides good description, detailed code, screenshot and even diagrammatic representation."
1,"The format of  entries in csv is not consistent, the ""name"" values and ""comment"" values are put under double quotes, where as other values are put in directly.
PS I do not see how Delegation pattern as mentioned in the wiki is implemented in the code implementation."
0,"1. Writeup explains everything nicely and clearly.
2. Snapshots and Screencast help to understand the project even more clear way."
0,The write was well written. They included a class diagram of what they accomplished and even included a screencast of how to access what they did.
1,"The team has done a good job with the write-up. It includes nearly everything required. I was able to figure out nearly everything from their Wiki page. The team has included Problem Statement, Solution, Output Results, Methodology and Test Plan, but the best part I liked about this was the video demonstrating how to go about testing the feature. However, they've mentioned that they've used the delegation design pattern for this implementation but haven't mentioned the reason for using this specific design."
0,The writeup is straightforward and clear. I really appreciate the flow diagram to represent the MVC relationship.
0,"Yes, the write-up explains the work done by the team nicely with the help of diagrams."
1,"Yes, the write up was clear and explained why/what of the project. Should've elaborated a bit on the reason behind using delegation pattern."
1,"Yes, the writeup explains what the team has done. The wiki does't talk about any design principle or patterns. Screen cast and Implementation flow chart made easy to follow the steps."
1,"Info like selecting an assignment that has valid reviews to it, the location of ""View Reports"" button etc are missing."
1,"1. Test plan include manual steps to do the procedure.
2. They haven't mentioned any special cases, such as what if a review is missing some value i.e. no name or no unity id etc."
1,Test plan gives us instructions as to how to test the feature but does not include the various test cases possible/ edge cases.
1,"The write-up does include a Test Plan section but the authors have just mentioned a simple way to check the implementation of the function. It does not include any pre-conditions, edge cases or invalid input values."
0,Testing seems to have been focussed upon by the team.
0,"Yes, a test plan section is included and following the steps also allows to test the functionality shown in the video."
1,Test Plan was well described. Although the capybara tests seem to fail and hence the pull request did not pass Travis build.
1,Test Plan is shown as testing step for users. I think Test plan should include Rspec or any functional or integration test.
0,It is clear and concrete.
1,"Few screenshots are missing, like the location of the ""Veiw Report"" buton.
Also, the Design section needs to be moved up in the wiki, probably after the motivation section."
0,"Yes, the snapshots and flowcharts help t understand the code in a clear way. The flowchart mentions the plan of the procedure."
0,Add test cases. I believe the functionality is explained well enough.
1,"The write-up has been well written with almost all details. It gives good description of the problem statement, solutions, output, etc. It also contains the way to reproduce the displayed output. However, the team could have written more briefly in the Test Plan section. Please add more edge cases, conditions, etc in the Test Plan section."
0,"Yes, the write up is very well written."
0,"Yes, the write-up is good. The write-up explains well about Problem statement, implementation, flow and code properly. Screencast was a plus."
0,The features works well as intended.
0,The code is working well for Dry Run. as well as for actual testing for all the edge cases.
0,"Yes, the author's work functions well and passes edge cases."
1,"Most manual test cases are passing but one test case I found to be failing was:
When I Log into expertiza as the instructor -> Load all assignments. (Manage -> Assignments) -> Click on 'View Reports' button -> Choose 'Review Report' from the dropdown and click 'View' -> I get a list of all the students and the reviews they've given. Now, for a particular student, I select one of the teams from Teams Reviewed and open it in a new tab, I get the list of team members and the student's review of that selected team. When I click 'Back', I get an error:
The action 'response_report' could not be found for ReviewMappingController
 
I am not sure whether this functionality was to be covered by you guys or not. But if it is, then have a look into it."
0,"-- Tested for an assignment with no review -- file with just the headers is created.
-- Tested for an assignment with a lot of review data -- file has headers + corresponding data.
Feature seems to work as intended."
1,Comments are not getting exported.
0,Yes the feature works as intended.
0,The code are in good ruby style. It is clean and readable.
1,"More comments are needed, because some of the code pieces are hard to follow."
0,"Apart from the comments, I don't have more suggestions for the authors. Ruby coding conventions are followed, in my opinion."
0,The code contributed by the team is concise and well written.
0,"Yes, the names are good."
1,Creating a new Backend method(ReportsController.export_details_fields(t_options)) just for the purpose of testing does not feel like a good idea to me.
0,Names of variables and methods are intuitive and don't have need of refactoring.
0,Yes all names are intuitive.
1,"The variables, method and class names are properly defined. By looking at the code I was able to get an intuition of what the code will probably do. However, I came across a variable name 'rname' in _review_report.html.erb and I am not sure what that does. Please change it to something more human readable, if possible."
1,"I would suggest to use clear names for the review file being generated, as is the case with the rest of the application (Try Export in Assignments / AssignmentParticipants) . The file is named review_scores which is not very indicative (or which scores or what assignment or which student)."
0,The additional method are well written and properly commented.
0,"The variables, methods and class names all looks good. All the names provide information or suggest the functionality."
0,All tests pass
1,"There are some attempts of writing test cases for the new functions. But those seem to have failed while TRAVIS CI build was running.
Authors should consider writing some test cases to test the code automatically."
1,"No, the Test Plan's cases has not been converted into automated tests. I couldn't find any new test cases in RSpec for the new code implemented which could be the reason for reduction in coverage."
0,"Yes, test plan is mentioned for testing via the UI. Rspec tests have also been included."
1,"There don't seem to be any tests that have been implemented.However, the write-up has a mention of what could be a good test case for the implemented functionality."
1,"All the cases discussed in the test plan have been converted to tests, although the capybara is failing"
1,"I wan't able to find any test plan related to RSpec, unit test, functional test or integration. As it's early in the development, I believe team will work on this later."
1,Most of logic is written in controller instead it should be in model.
1,"A student can edit the libraries or the librarians. So no check is place over there.
The code quality is very good. No functions are too long and there is no bad naming."
1,"The code is mostly in controllers and views. 
Whatever methods are written are mostly handling single tasks but there are some methods that have a lot of logic and refactoring might help."
0,Written in a good way
1,Comments need to be added and more tests need to be added. Then it should be deployable.
1,Not sure if the project has been deployed. I cannot find the link anywhere to test the scenarios.
1,No new tests have been added and the coverage decreased overall.
0,"Checked the pull request - there are no conflicts with the base branch, build passed."
1,"There are no new commits. The team seems to have achieved whatever they had planned for during the first round itself, but there is always scope to improve - find and fix issues around the module, add tests to increase the coverage, etc."
1,"Comments need to be added, the methods which have been refactored could be named better, please refer to the suggestions in the previous review."
1,"I can't say if it can be deployed onto the production server since I don't have the link of the deployed application to check whether the functionality is working or not. Additionally, the code coverage has been decreased by 13.7% so I would not recommend it to be deployed. the tests and refactoring code looks good to me but I would need to test the deployed application."
1,"The team did a pretty good job with the writeup however, they could also add some more details about the test cases like how did they check/maintain the code coverage, or how did they ensure that the code coverage is at least the same as before."
1,This is a refactoring project and I could not find a link to the deployed application.
1,The team updated the existing test cases according to the refactoring done and also moved them to a new spec file account_request_spec.rb. The code coverage is decreased by 13.7%.
0,"Yes, it is an expertiza refactoring project and the Travis CI is passing."
0,The code is well written and all the test cases have been updated according to the changes in the refactoring.
0,I think that enough test cases are written. The UI also works properly. I think that this project is ready to be merged.
0,The write up is properly written. All the sections are properly explained and screenshots help to support their statements.
0,Everything worked fine for me. I did exactly as the steps that they had mentioned on their wiki page. It worked smoothly.
1,The team added many properly written and commented test cases and a whole new file. Though still the test coverage decreased by 6.2%.
0,"Yes, their build passed in Travis CI."
0,The last commit was made 11 days ago. So no commit was made after the 1st round submission (maybe because their project was complete).
1,"I feel that their ""it 'works correctly'"" test case under context 'request account feature' is a bit too long for a test case. 
Apart from that, all functions and variable names seem fine."
0,The write up is very thorough and complete test plan is mentioned code snippets and changes in the UI were mentioned and proper screenshots were shown.
0,Test cases were modified and coverage has increased substantially. Because it is a refactor project with not much changes.
0,Yes Travis CI  build was passed with no conflicts. Good job.
0,No new code was committed during the second round. Because most of the functionalities were implemented in the first round .
0,Refactoring is done perfectly. The code adheres to ruby standards and comments were added adequately. Name of html class is also well defining of its functionalities.
1,"The code looks fine, it follows Ruby principles but I am concerned as I was not able to test their UI"
0,"The writeup is written well which explains their changes, issues and implementation very well"
1,"As the project is not deployed, I could not test UI"
1,"The team added new test cases which looks fine and covers the changes which they have made to the project. Also, they have modified the test cases to suffice their changes and have added a new spec for a new controller which sounds good. However, the test coverage has decreased by 24%"
0,As they have completed their project before round 1 there are no new commits
0,Ready to be merged
0,Well written writeup
0,Works perfectly fine
1,Test coverage decreased
0,Travis CI passing
1,"As I could not check the functionality on the UI ,I am not sure if the code can be deployed.Also as the coverage decreases,I would rather call it a good place to pick from"
0,"Writeup looks pretty good,as the refractors have been explained in details,with inclusion of certain videos as well"
1,Could not check as the link to check the working of UI is not provided
1,"Though there have been changes made in the test folder,the coverage has decreased."
0,"Yes,the build has passed and I can find it on GitHub"
1,"The code looks good in terms of the function complexity,names etc.But there could have been comments put for better understanding of the code"
0,"The project is very well done, and since it involved refactoring existing code, the possibility of it breaking any functionality is very minimal. Thus, the project can be readily deployed onto production server but not without some sanity testing."
0,The write up is very well written. They've also included a link to a video explaining the test cases in the write up.
0,"As this was a refactoring project, the team did not have to write new test cases. They did modify an existing test case to reflect the change they've made. Also, they've moved the test cases for the functionality they separated into a new controller to a new rspec file, which is in accordance with good coding practises."
0,"The team modified the existing test cases to incorporate the refactoring changes that they've done. Also, the test cases seem to cover all of the changes made by the team.
No, the test coverage did not increase."
0,"Yes, the build passed in Travis CI. Also, there is no conflict that needs to be resolved."
0,"There don't seem to be any new commits during the second round. Having said that, the team seems to have completed all the requirement by the first round itself. Kudos!"
1,"The project is very well done as per the requirements. The only one thing I feel can be improved is the name of the foreign method. Although it is properly commented, I feel the name is not very descriptive of what it does."
0,I think this code is ready to be deployed onto the production server.
0,"Their writeup is organized and explains their work well. They explains the problem statement, how they do their work, and how they test their code."
0,The system works as intended. They refactored a part of code. The features works as they are supposed to.
0,There are no new commits during the 2nd round.
1,"In general, their code is good. But the method ""create_requested_user_record"" is still a little long."
1,"> Since I couldn't test the functionalities due to the lack of deployment URL, I am not sure if this can be deployed to production.
> Code changes and everything looks fine, however, it needs to be tested.
> Also, test coverage needs to be improved."
0,"> The writeup is very well written.
> Proper descriptions have been added.
> Screenshots have been added for easier understanding.
> Also, I had mentioned earlier about adding a screencast which seems to have taken care of."
1,"> No deployment URL is provided.
> Couldn't test the functionalities after refactoring."
0,"> The build seems to have passed.
> I dont see any conflicts either."
0,"> I believe the code has been written properly.
> It follows ruby style guidelines.
> The variable names, method names etc. are properly declared.
> Comments are also given.
> There wasn't much complaints from the 1st round , hence i dont see any code updates."
1,Authors could've attached a little clip of video explaining about the changes they made.
0,Every new method works fine and also the controller they refactored works perfectly.
0,"Yes, the team have added new test cases, which cover new controllers they've written to refactor the original one."
0,Yes. The Travis CI build is passed.
0,"The task was completed and working, that is why this team have not made any new changes and committed ti GitHub."
0,Authors did the work perfectly at the previous iteration only.
1,"All the test cases are passing and have been adjusted according to the changes made for refactoring. However, I am unable to find the link of Heroku to manually check the functionality."
0,all tests pass
1,Some of the methods like 'create_approved_user' and 'create_requested_user_record' are still too long. Since this is a refactoring project I fell these methods should also me broken-down/modularized and comments should be added for those methods.
1,The comments are there for some but not all methods. I am not sure whether it is in the scope of their project to add comments for existing methods.
1,The names are very descriptive are the code looks user-friendly. I feel RequestedUser should be renamed to UserAccountRequest instead of AccountRequest.
0,"Since some method shave been moved to AccountRequestController, the team have also updated the test cases. Edge cases are not part of this project as this is only a refactoring project."
0,The writeup very well explains what they did (refactoring) and why they did (to remove coupling). They attempted to remove coupling between account requests and user objects.
0,It is explained with enough details.
0,"Yes, the page is rendered according to the screenshot. Rest all was refactoring so did not have much to test in the UI."
1,"As I said, they have not mentioned any Test Plan on their wiki page. But they have modified the new_user_request_spec.rb file to handle all the changes brought about by changing the model name from RequestedUder to AccountRequest."
1,"create_approved_user is a function which I felt was a bit long like around 38 lines. Apart from that, everything else is fine."
0,"Yes, there are a few comments which explain what particular parts (whose functions cannot be easily understood) of the controller do."
0,"Yes, the variables and functions like paginated_users, paginate_list, all_roles, requested_users and so on are intuitive and well named."
1,They have not included a test plan.
0,"Yes, they have properly explained the purpose of the problem statement and how they have accomplished it."
0,"The write up is extremely detailed. I really like it because it gave all the functions that were affected due to their changes, working screenshots, a proof that the pagination is being done correctly. Apart from the fact that the test plan of how they test the functions which are shifted to the new controller is missing, everything is very detailed and nicely written."
0,Works well with almost all cases.
0,They dont require to have test plan for the given implementation.
0,Everything is well documented and well presented.
0,Everything is good.
0,There aren't any test plans because refactoring makes changes in the existing test plan which they have done.
0,They followed every aspect of design patterns and they used it perfectly.
0,They have explained every details in a great way and perfect implementation.
0,"The writeup is amazing. It clearly explains the need of improvement, the issues and the respective solutions. The writeup provides screenshots which makes the flow and their work easy to understand"
1,More comments needed
1,No Test Plan present
0,The feature works properly
1,"Though the code follows rub style,there could have been more comments added,separate methods could have seemed even better."
1,"there have been comments added,but comments could have been added to describe the methods and functionalities"
1,the build has been passed.But the code coverage is decreased.
1,The writeup does not include  a separate section for Test plan.Suggestion would be to add it in the writeup
1,"The writeup explains the problem statement.So,it explains as to why they are working on this project.What and how they have worked on the project is explained.But,this could have been explained considering individual issue and how it is solved"
1,"The link provided in the wiki does not work, could not test functionality."
0,Not a lot of tests had to be written as it is a refactoring project.
0,"The code is mostly unchanged. However, the existing code does seem to follow good coding practices for the most part."
0,"Yes, a few methods have been documented nicely."
0,"Since it is a refactoring project, not a lot of new code has been added. However, the team has done a good job of refactoring some method names as mentioned in the wiki."
0,"Although not a section by itself, the team has given a brief about the modifications done to the existing test cases. The team has also mentioned fixes for some edge cases (the case where the list showed all users)."
0,"Yes, the writeup explains the work done by the team in a very concise manner."
0,"Yes, the wiki is well written and easy to understand."
1,"The method ""create_requested_user_record"" is a little bit long. In the previous version of code, it is already long. The code in this method can be extracted in to separate methods, and those methods are invoked in the ""create_requested_user_record"" method."
1,"They didn't write comments for their code except for ""foreign"" method. However, the variables, methods and class name are pretty easy to understand and reflect what they do clearly. Also, most of their work is refactoring and there is no new method."
1,"The variables, methods and class names of their code are reasonable and easy to understand. The test coverage decreased (-6.2%) to 24.331%."
1,"They have test plan section in their writeup. And this section explains what they do to test the project and why they do in such way. 
But they didn't test if the paginate_list method works after it is invoked in right location.
They also didn't write how to test their project form UI. There should be a testing form UI section in their writeup."
1,"The writeup explains how they did the work and the results of their work. The ""Abstract"" part that describes why the authors did the work is not detailed. They should list all the things that need to be done in detail.
In the part that describes the paginate_list method issue, they can add some code showing the wrong invoking location and the right invoking location."
1,"The witeup indicates that the task is to refactor the UserController. The writeup includes the Expertiza background, the abstract of what they should do in the project and the results of their work. I think the abstract section can be extended. They can write what they should do in the project in details. They can list all the task included in the project. They only included the refactoring task, but there are other tasks like invoking the paginate_list method in the right location. They should include all the task they need to do. Also, a section that describe how to test the project in UI should be included in their writeup."
1,No deployed link of the app provided. App not deployed.
1,No test plan and execution.
0,"No major changes to existing methods, just positioning of methods is changed."
1,There are some comments that are added but not to all the refactored method. Should be added for the remaining methods as well.
1,"The build passed however the test coverage reduced by 6% in the final build created by Travis CI.The variable names, method names have a lot of inconsistencies and should be changed before merging it to the beta branch. For instance, the methods moved to the AccountRequestHandler.rb need refactoring in terms of their names. Likewise there are many methods that need name refactoring (mentioned in the additional comments) like created_approved_user, created_requested_user_record etc."
0,Some information about the test cases is given.
1,"The writeup decently explains what they have done in the project. However, could have improved by comparing what was the existing implementation to their proposed changes."
1,Writeup is decent but should be improved by mentioning the distinguishing features from the existing to the proposed functionality of the controller and the refactoring tasks they took.
1,"The given deployment URL does not seem to work. Keeps giving ""This site can't be reached"" error."
1,"> I dont see any content discussing about Test Plan or automating any of the tests.
> Please add a section for Test Plan.
> There are a few lines discussing the changes done to tests, however its not very detailed."
0,"1) Function lengths aren't too big. They are very modular. If at all, there's any scope of change, then create_approved_user method can be considered for breaking. But most of them seem fine.
2) Doesn't seem like there's any need to break down a method into 2 separate ones.
3) Comments have been added frequently. Some could be added to test files.
4) The code doesn't seem to be violating any ruby style guidelines.
5) Code is mostly DRY and not smelly."
1,"> Comments have been added for most of the changes.
> Team can consider adding some comments for the test files too."
1,"> Most of the variable/class/method names are fine. However, there are a few that could be improved.
> For example: per_page in Users_controller, ""foreign"" method in account_request_controller. It does not suggest functionality."
1,"> Team has updated the tests for the new controller, however I don't see any specific ""Test Plan"" section about all the changes done.
> It would be nice if the team could run the tests all over again after the updates and add some results for the same in the wiki. A screencast or even pictures depicting the test run would be nice.
> Could not test or consider all the edge cases as there isn't much talk about the test plan. Please add more and the results as mentioned above so that more rigorous testing scenarios can be considered."
1,"> The writeup seems enough detailed and the task was defined very clearly.
> Team was able to mention out all the fixes they have done.
> Team could add the exact details about the test plan. There are a couple of lines mentioning the changes done for tests, however no specific section has been added for the test plan and if they were able to run it properly or not.
> The ""What's"" of the changes done have been mentioned but it would be good if the team can add some of the ""Hows"" of the fixes. For example the changes related to pagination hasn't been defined clearly."
1,"> The writeup discusses the fix and the approach taken and helps in understanding what the project does, however, a lot more content could be added.
> Test plan should be added to the wiki.
> More screenshots or even a screencast for the fix or the test running could be added. For the fix, you can show that the same functionalities are running properly after refactoring.
> Add a ""References"" section to your wiki."
0,"Since the task was to refactor, they have introduced a new controller and have shifted some methods to that controller.
They've written a Rspec test for that, which passes successfully."
0,"1. They have commented where they've introduced a new method or refactored something.
2. Comments are descriptive and clear."
1,"1. Almost every change they made is reasonable and doesn't attract any ambiguity.
2. Changes to the variable names followed by comments would help to understand their use. (for e.g. paginate_user  doesn't  give hint about what it does)."
1,"1. The writeup clearly mentions the reasons for the refactoring and the area they refactored.
2. They have written the documentation in a very clear yet concise format.
3. They should consider providing examples of why they chose to refactor the name of some method or a variable."
0,"The writeup is clear and describes all the tasks they did so far.
They've also included some snapshots, which helps a better understanding of the changes."
1,"Names are good, but I can only see a few lines from the pull request. Not sure why. When I look into their git repository, it seems that they did some works on master branch, maybe that is the reason?"
1,Test has nothing in it.
1,"There is no test plan section.
I recommend you have a section that tells how to get to the page you are working on Expertiza system.
For the hard code part, did you add all of these codes? Or did you revise any of them? Please state what did you do and why."
1,"Not really. 
For issue1, I am confused about what it means. I can understand issue2 for a little bit by reading the instruction. 
If you can post some screenshots about how to get to the page you worked on."
0,The tests are thoroughly
1,"except some auto-generated test cases using scaffold command, there has not been done any testing on controllers.
Models are not tested at all using the testing framework of rails."
1,"student is able to create new books, which shouldn't be possible.
student shouldn't be able to sign up with an existing email id, but I am able to.
librarian is not able to login.
librarian approval request is not visible. if you sign up, you are approved by default."
0,The team has done a great job of implementing RSpec for the library model and the corresponding controller.
1,"A user can register as student and librarian using the same mail.
There is a test for library only."
0,"Yes, they have tested the libraries controller and model. The test cases are written in RSpec and are written well."
1,"In their test_helper.rb, no models were put there to be tested."
1,"All basic test cases are implemented but the check for corner cases can be done too.Like checking corner cases for basic operations
Though controller is tested, the model and view can also be tested for operation.
The view and model can be tested by simulating  UI operations and database operations"
0,"1. system explodes
2. system explodes
3. no
4. system explodes"
1,"when admin tries to delete the book that is checked out by some student, application crashes and shoes some error.
same thing as above happen when admin tries to delete the student that has checked out some book.
there is no way to delete the admin account in the app. that's good.
Admin cannot delete any student that has checked out some book."
1,"admin account cannot be deleted, which was possible in round 1.
A student who has checked out books cannot be deleted, which is good, but the page throws an error(README says otherwise).
same is the case with deleting checked out books(README says otherwise).
error handling not done properly."
1,Coudn't test for some edge cases since the librarian login was blocked
1,"1. Attempt to delete a checked-out book leads to error.
2. Attempt to delete a user who has books checked out leads to errors."
1,"(1) Error view while trying to delete a book checked out by an student. Book cannot be deleted
(2) Error view when trying to delete student. Student cannot be deleted.
(3) No, admin cannot be deleted.
(4) Error view when trying to delete student. Student cannot be deleted."
1,"The transferring of a checked-out-book from current issuer to the next one in the queue is working good.
I cannot test this same case in case of special collection books.
The following are the edge cases which haven't been covered:
1. Objects having dependencies cannot be destroyed, for example libraries, students who have issued books, etc.
 
2. A student who has checked out ""XYZ"" book, can also request for it and is put on the hold request queue of the same."
1,"Admin being the super user should be able to approve hold requests, he/she can't right now.
Single page data display for admin, could display on different pages maybe.
Students/librarians approval by admin while signing up not in place."
1,"(1) When I tried to delete the book ""pqrs"" which was checked out by student01@ncsu.edu but not yet returned, the system crashed, and this book has not been deleted.
(2) When I tried to delete the student with email ""wrwncsu@gmail.com"" who checked out Test Bool but not yet returned, the system crashed, and this student has not been deleted.
(3) There are no delete buttons on web pages, and admin cannot view other admins' information, so the amdin account typically cannot be deleted. However, in the controller of Admin, there is a destroy method.
(4) In fact, the admin does not have the ability to view the request records from neither students nor books. So I is hard to check what happens to the requests.
(5) When I tried to sign up as a librarian or create a librarian account by admin, I can see by the librarian list that the account I tried to create just now (precisely, the bbb@bbb.bbb and lll@lll.lll accounts) showed up in the lists, which means the accounts have been successfully added to databases. But when I tried to log in, the system crashed.
(6) Admin can successfully delete educational levels. When I deleted the undergraduate level, this level was removed from the educational level list, but nothing else listed in the web pages changed (i.e., the students of this level, and the books borrowed by this student). When I tried to view the students' profile of this level as an admin, the system crashed.
But student can still log into the system, but when viewing his/her profile, and tring to check out a book, system crashed."
1,"The librarian cannot login, students should be able to add bookmarks, admin should be able to update stock"
1,"There is not functionality of approving the librarian. as and when the account is created, librarian can do all the stuff.
when admin creates a student from his account, it got logged out of his account. that should not be done.
Also when admin creates an account of librarian, it got logged out of his account.
I created the librarian account from the home page of the application but I was not able to sign up using the same credentials."
1,"they seem to have worked mostly during round 2.
book approval throws an error, but approves request. Also if multiple request appear for the same book(only 1 copy available), all can be approved, even if the book is not returned by the previous student.
Email not sent upon book request approval."
1,Unable to login as librarian. Admin cannot see hold requests
1,"1. The admin password can be edited and if I am not mistaken, this is not expected
2. Student can edit everything in his/her profile.
3. No regex validation for passwords."
1,"The student level was created as a model and thus, new levels can be added appart from those stated. (undergraduate, graduate and PhD) .However this type was not stated in the requrements. 
When creating a student, the University field is a text field. It should have been a list retreived from the Library db. 
Book cover only appears in the show view, not in the index view.
Couldn't found a link to approve librarians in the admin session. Error while trying to sign in for the first time as librarian."
1,"The major functionality that is not working is that I cannot log in as the librarian. The website crashes when I log in. I receive the ""Page does not exist"" error. At first, I thought it may be my fault. I tried in many ways; different browsers, incognito mode. But I just couldn't log in as the librarian and hence test any of its functions like special book acceptance and so on.
Most of the functionalities in student and admin have been implemented very well. Only a few things I noted which brings their website down:
1. Any library cannot be destroyed
2. When I search for a book by year, or just the year and month, the website crashes.
3. When the admin sees a particular book, there is a  'Request' link which should be made invisible to the admin. Since on clicking that link, the website is crashing."
1,"Tried signing up as a librarian, it did not let me. Perhaps a check on password? The user isn't prompted though.
Should let the student check out multiple copies of the same book?
Search bar gives results for individual filters instead of a combination of all of them.
(Being rather critical here, date filter placeholder could have mentioned the format as it doesn't work for mos/years alone)
No bookmark link in books page."
1,"These are problems successfully solved now which showed up in first round:
1. Now admin can edit his/her profile name.
2. Now admin can successfully view the list of overdue students and checkout histories. I created an account with email ""aaa@aaa.aaa"" and password ""aaaaaa"" and successfully borrow the book ""The Time Machine"", then the checkout histories table correctly listed my checkout history.
3. Student can signup now and edit his/her profile.
4. Books can now be successfully checked out and searched.
5. Student can now successfully borrow and return a book.
6. Student can now request for a currently unavailable book, and delete the request.
7. Books can be bookmarked and removed from bookmark list now.
 
Functionalities which are still failing:
1. Librarian still cannot signup. Besides, this time, even admin cannot successfully create a librarian account. Thus functionalities related to librarians cannot be reviewed.
2. Since admin fails to add a book, I cannot check the uniqueness validation of ISBN.
3. Since no book can be added, it is hard to test the maximum checkout number of undergraduates, and how will happend when asking for a special collection."
1,"1.When the user tries to login with librarian account,the app fails.
 2. when the admin tries to delete a student the function fails
 
1.

The page you were looking for doesn't exist.
You may have mistyped the address or the page may have moved.

 

We're sorry, but something went wrong.

If you are the application owner check the logs for more information.If you are the application owner check the logs for more information."
1,Library should has many books
1,"there is not column present in the librarian's table to see if that librarian is approved by the admin or not.
There is table for the language. which I believe is not necessary since it can be stored in an array since it has almost static values.
all other relationships among entities have been handled very well."
1,"Library -Librarian relationship should be 1-to-1, but I can assign many librarians to 1 library, which shouldn't be the case."
1,"1. Deleting a book that is checked out causes leads to an error page, this mapping is probably not handled properly."
1,"Relationships have been established properly, However I see a lot of models that are probably unnecessary: e.g. there is a model for student_level, author, and language. They are more attributes of a class instead of one class alone."
0,"Yes, they have handled these relations very well. For example, a book has many authors, a book belongs to a library, a librarian has one library and so on."
1,"Good schema design. Except for storing session tokens in there, too vulnerable."
1,"An obvious error is in the model of Librarian, there says `has_one :library`, which should be `belongs_to :library` instead. Because the orginal relationship between these two categories should be that one librarian belongs to one library and one library has many librarians, in other words, the relationship beween library and librarian should be 1-to-n. And in the model of Library, there is no code related to the relationship, instead, they should add `has_many :librarians` into the file.
Another error is about the models of HoldRequest and Book, and HoldRequest and Student. Again, in the model of HoldRequest, the code `has_one :student` and `has_one :book` should be replaced by `belongs_to :student` and `belongs_to :book`, then in both models of Book and Student, `has_many :hold_requests should be added.
Last one, in the Book model, there is a code `belongs_to :library`, which means the relationship between library and book should be 1-to-n. Therefore, a code `has_many :books` should be added in the model of Library.
The relationship of book to authors is correct, as 1-to-n."
1,"The relation between, authors and books can be modified. One author might have written many books. Dependent destroy , deletes the author of one book who might be the author of other books too.
book to author relation should be many to many.
The relation between librarians and books to library should be specified in library model as well.
The library model should have one to many relation with the books and librarians"
0,"Yes, changes have been committed regularly during the project development.
Descriptions of the commits are self explanatory and anyone can understand that easily.
No, there wasn't any commit after the project deadline."
0,"In round 1, most of the functionalities were missing.
I can see many commits after round 1."
0,"Yes, the team also has provided an explanation for the same in the Readme file."
0,Yes they did. They team had to switch to another repository for the second round because of deploument issues.
0,"Yes, even in the 2nd round the team regularly committed their changes to GitHub."
1,"Yes, in the commit history, they made lots of commits on Oct 4, 6, 7, 8 and 9, almost throughout the round 2 period, which includes modification to the view pages of books, adding more features to like checkin, book search and languages, adding more functionalities related to bookmark, overdue fines and checkout histories. Precisely, most are more like corrections to their previous work, and they have a good commit habits that every little change should be commited and merged no matter what it is. However, it looks like they are in a hurry to fix a lot of things, that is not a very healthy work mode."
0,yes the modifications  were continuously made and pushed throughout the project consistently in 2nd phase
0,"The code is pretty clean, except for several long methods"
0,"code of the application is separated very well and balanced between model ans controller.
all the business logic is present in model and all the redirecting logic is present in controller.
All methods are devoted to their specific tasks."
1,"If a student requests a book that he/she has already checked out, it gets placed in hold request. Why?
returning a book throws error, but the book gets returned."
1,"1. Code is very well written with almost all the logic in the models except for books controller
2. Mails are not being sent although the code for mail seems to be in place"
0,I checked all the controllers and models. The longest method was in the book search function (which is an acceptable code length considering the functionality). So overall the code is written nice and short.
0,Nice job with abstraction!
1,"(1) Yes, their each method only related to no more than one task, however, specific tasks like borrowing a book, need more than one functions in books_controller to call.
(2) Most are very accordance to naming disciplines, however, in the students_controller and librarians_controller, the name ""set_student"" and ""set_librarian"" may be better if changed to ""new_student"" and ""new_librarian"".
Besides, I saw something like ""approve_request_action"" and ""cancel_request_action"", however, there can be many different requests in this system, like requests for signing up as a librarian, or requests for a special collection, or requests for a currently unavailable book, which make names merely include one word “request"" not explicit.
(3) They used to put some functions of real actions into model files instead of controller files, which can lead to chaos when fixing bugs or maintainences to the system."
1,"the extra credit feature couldn't be verified due to failing methods while librarian log in.
 
Mode code is written properly
 All functionalities are implemented in the books controller.
The Bookmark controller doesn't have the bookmark method
the book_reserrve controller that manages can contain methods to checkin , return"
1,"The repo seems to be a new version of an old one, so only 4 commits showed and all the work is to move the old stuff to the new one"
1,"only 7 commits are there for this time period of implementation.
As per the description of commits, it was not clear what functionalities were added in each commit."
1,"Cannot find login/sign up page for student/librarian.
Cannot tell whether the changes were pushed regularly, as the repo is private."
1,"Hard to tell if the team pushed code regularly to the repository as it seems they migrated code to the currently provided repository from another repository. Also, there does not seem to be a lot of code which has been written except for the auto generated code with only 4 commits to the master branch."
1,"I can see that only 4 commits were made up till now and all of them were on the same day i.e. 30th September. So I think they should regularly push the changes on Git. Although, they have a commit named ""Copy files from old repo"" so it may be that they had used their other Git account in which case I would give more points."
1,"During my viewing period, I made a wrong operation at first - to click on ""delete account"" button when logged in as the default admin, then I cannot login this system any more. However, after I reported this issue to the team, they fixed up this problem very fast, so that I could test the functionalities further."
1,"the start to push the changes started 2 days before. Hence all functionalities cannot be implemented on the heroku deployment platform. The functions cannot be checked.
The controllers , models and views are implemented using scaffold. 
this just creates views and controllers.
and few basic functions like edit,  create new and destroy functions.
more functionalities can be added by adding additional functions in controlled in views."
1,seems no test cases have been implement yet
1,"no, the system was not tested thoroughly throughout the implementation.
if it is done, ruby's testing mechanism is not used that's I can see."
1,"1. Since no details of student login is provide, neither can I sign-up a student, I cannot tell whether this has been implement or not.
2. Couldn't find this option on the login page."
1,Does not seem like any controller or model has been thoroughly tested as the files under test directory only have auto generated code.
1,Code seems not be tested as couldn't login as admin
0,"All the models and the basic operations have been performed. The current version works fine, the website did not crash at any point. Many of the important functionalities are yet to be implemented, but the current version works properly."
1,"The functions can be implemented on top of scaffold. The scaffolding can be used as a framework, to add more functionalities. only the scaffolding performs just the basic CRUD operations on top of which the functionalities should be added. 
The login could not be performed. Since the user is not added in database.
the books view cannot be viewed even through manual url specified.
the libraries view is not available to be displayed."
1,The admin account info cannot be used for signing in. The readme is not updated. No way to sign up an account to get in the app
1,"there is nothing specified in the readme file.
as a tester of the application, I can not decide where to go to test specific functionality. no link to sign up as a student or librarian unless you log in through the admin first."
1,"README not provided.
Also details for student/librarian login not provided."
1,"The UI only consists of a login page with the default credentials specified.On logging in, an error page is displayed, and thus it is not possible to access any other screens. Thus, cannot test any features.
Also, no description of any kind is provided n README file."
0,Interface is fair: it contains the basic elements to navigate across the page. However it is better to provide detailed instructions in the Readme file.
0,"The interface is pretty intuitive. I would recommend adding a ""Back"" button on every page which would redirect to the homepage. For example, after I'm done submitting a form, using the browser's back button I go over the form that I submitted all over again which doesn't seem right. Overall, it is intuitive."
1,"All buttons and informations are shown clearly. However, every single letter is in default format. They could do more jobs on optimizing the look of interface."
1,"The addition of admin credentials were helpful in the login page.
But as the page passes the signup page and goes to the view :/logins, page shows. This might be a problem associated with deployment of the app on heroku.
The admin is credentials provided redirect to non-exiting page.
There can be different pages for login and sign up and the type of user(librarian/ student) could be added while signing up
 
By going through the code  in Github, I 
In the login controller,
the user is able to edit the login information,  This functionality can be added in the home page, which could be seen as that present in logins/show. Immediately after logging in, the user can be redirected to the show page, where the functionality to edit profile can be added. The approach adopted also works well , but this would be a more intuitive approach
 

We're sorry, but something went wrong.

If you are the application owner check the logs for more information"
1,"The models and controllers look fine, but we have no way to get in the app"
1,"as per the current progress of the project, I can not comment on that because all the code is present is through the scaffold command.
Also, there is no code present in the model, not even validations."
1,"Admin should not be able to delete his/her credentials from the system, because it is preconfigured and admin cannot sign up.
Since the admin got deleted, I cannot review further.
Cannot review the code on Git as the repo is private."
0,Good looks well documented. However I only see I main contributor: all commits seem to be done by mtrawic.
1,"The names format of all classes and objects are accordance to the standardization. But the author model doesn't appear, although it has functionalities to the book model."
0,"Yes, the code seems to be ready to get deployed onto the production server. The tests written by the team are passing and all the 3 bugs now don't exist. The only problem is that the test coverage has decreased. The team can try something and figure out a way to increase the test coverage before the code gets deployed on the production server."
1,"Overall, the writeup is sufficient enough to explain what the project is about and what approach was used to solve it. But it was strange that in the ""Problem Definition"" section, the team mentioned problem number 3 and steps to reproduce it. While in the solutions section, they said that it works fine without any changes. This was ambiguous and misleading. They should have mentioned it somewhere in the problem statement section if it was not actually a bug."
1,"By testing the system from UI, I found almost everything worked fine. I couldn't see any error raised on front-end. So, the features seem to be working as expected. But I faced one problem. While I was testing the bug number 1, it is true that I did not get any error after adding a member to the team from UI. But since I actually worked on Mozilla Project for OSS Project, I didn't know everything about expertiza system. So, I couldn't find a way to check if the team to which I added the new student, actually got that student added to it. If there had been a section in the documentation explaining how to verify if the member is added to the team, it would have been more helpful. (I know that the tests written actually check this so this must be working. But just a small section mentioning how to test from front end would have helped a lot.) All other features worked fine. Anyways, good work guys!"
1,"Yes, the team added test cases. They have added 3 test cases for the 3 bugs which were part of their project. But the problem is that somehow, their test coverage decreased by 6%. Since, I worked on Mozilla project, I am not sure how would the test cases be changed/improved such that the test coverage increases. Maybe they can add/modify some code in ""spec/factories/factories.rb"" to increase the test coverage. Other than that, I would say that newly added tests cover the whole range of the project. There were 3 bugs in the project and they have written thorough tests for all of them."
0,The build/checks have been passed. There are no conflicts with the master branch.
0,"No new code was added during the second round. But their checks on PR are passing and the branch has no conflicts. So, the functionality seems to be done before round 2."
1,"The code is well written. The change in the core code was very small and it has been done properly. Also, the tests which they wrote are also written very nicely. Though the tests are long but are easy to read. It is good that they also have commented in test files at some places to explain what is happening. But I feel that comments are very few and some more comments should have been added to make it more human-readable. For example, they can explain in file ""spec/features/assignment_team_import_spec.rb"" that why they have written ""create_list(:participant, 3)"" on line number 6. What is the second argument and why it is set as 3? This will help someone who doesn't know everything about Mozilla to understand why have the tests been done with these values and these parameters."
0,"Since these are bug fixes, the code is not only ready, but needs to be deployed on production, but needs a good commenting for understanding before this is done."
1,"The write-up felt like over detailed to me, putting in the screen shots of the whole code blocks is not promoted."
0,All the bugs work now as expected.
1,The test cases were added in round 1 itself. The overall coverage shows reduced by 24%.
0,The build is passing just like last time.
0,"No new code committed, had a lot of scope for improvement in the refactoring and testing parts as mentioned in the last review."
0,"The new code added is not neat and test cases are confusing, as mentioned in the previous review in details."
0,"They have nicely done what they were supposed to do.
There is only one thing, when adding a student to a team as an instructor, there is no validation about the student ID, thus when typing an invaid ID, an error is raised.
But if the validation is not a concern of their job, then I mean this code can be deployed definitely!"
0,"They typed really coherently and detailed. However, their problem is that they did not make any change to it since the first round of submission. And last time I pointed out that they should better not declare the third issue as a ""problem"", but seems that they did not change it at all."
1,"1. Now I can successfully add new teammates to a team, as an instructor, via system UI. You can see the team I created named WolfKing.
However, there remains a problem that, when I type a student ID that actually does not exist, it raises an error.
2. Now this functionality works fine. I assigned student7128 to a new assignment E1968_review, and I can successfully impersonated him and furthur viewed his assignment.
3. This functionality works fine as well."
0,"As shown in the link of their PR, no new test was added."
0,"I can see the details of their PR through the following link:
https://travis-ci.org/expertiza/expertiza/builds/604250219?utm_source=github_status&utm_medium=notification
And the result is that the Travis CI build successfully passed."
0,"The last commit, shown on the link to their pull request, is still the one on Oct 28. No new commits. Besides, they made no update to their project on Github as well."
0,"In a overall view, their code is good enough. The names are proper and easy to understand, and they made mostly descriptive comments on every small block of codes. However, they did not make any improvements on their code, to further make their test more readable."
0,1) It is ready to deployed but some more test cases and edge case pass is require before final merging and deployment
1,"1) Writeup is overall good but more screenshot of what the issue was and how it was resolved will be more clear
2) More comments can be added to assignment_team_member_spec.rb"
0,"1) Yes the operation works as intended from UI
2) More test cases which cover edge cases and negative test cases need to be added."
1,"1) Overall the code coverage decreased by 6.3% and as no commits are pushed, it remains same after first review.
 2) no new tests are added"
0,"1) Yes the last build commit pass the Travis CI.
2) The functionlity which was implemented is same and no more changes  are pushed."
1,1) No more commits are added after 2nd review.
1,"1) Code follows Ruby and DRY principle
2) comments needed for test file
3) variable names are good and meaningful"
1,I think the code is ready to be deployed but more test cases and edge cases need to be covered (since the coverage is low). Once these are tested it can be merged.
0,"The write-up is well written. It explains all the issues, how to reproduce them, solutions and the reasons behind them."
1,New test cases have been added that seem to cover most cases but the coverage has decreased.
1,"The team has followed good coding standards. No long functions or names are used. The code does follow the DRY principles but as pointed out in the previous review, the code still lacks comments."
0,"No, the coverage decrease, so I think they should do more test in the future to increase the coverage."
0,"It's a good writeup, but I don't notice any changes and updates they made."
0,"yes, i think it cover all the scenarios, since the cases is quite simple. But the coverage decrease, so i think they miss some of the scenarios."
1,"No, they did not add the test cases and the coverage decrease."
0,the checks are all passed and no conflicts to the base branch.
1,no new commits during the 2nd round
1,"The code is dry , but comments are not enough i think, but they don't update the code since the 2nd round."
0,The code seems good and there is no need to start from scratch.
0,Writeup was short. A lot of details could have been added into it to make people understand better.
0,"Yes, the problem seems to be addressed in this."
0,No new test cases were added and only rspec testing was used other than Travic CI build test.
0,"Yes, Travis-CI build was passed."
0,"Yes, new commits were added in the second round."
0,Code has been well written.
0,This can go to production.
0,write-up is detailed.
1,"Test cases added, but coverage not increased. Decreased by 6.3%from what I understand about the project, test cases are well written and cover all edge cases."
0,"Build passing. There were no conflicts, if any, the team may have already resolved."
0,The last commit was 11 days ago...https://snipboard.io/EXZRz7.jpg
0,"Yes, authors have incorporated all requested changes."
0,"> I think this code can be merged.
> The build has passed and there doesnt  seem to be conflicts.
> The features also seem to be working fine.
> However, the test coverage has decreased and that could be improved."
0,"> The writeup is very good and most of the details have been pointed out, however there are a few things which could have been put .
> A screencast for the testing done from UI could have been put for better understanding.
> The code changes could have been explained a little more and why exactly the given approach was chosen."
0,"> All the intended features works properly.
> The instruction for testing has been very well detailed out in the wiki."
1,"> Team had added tests in round 1 already.
> The coverage, however, has decreased.
> Test cases cover most of the functionalities"
0,"> All checks have passed
> There does not seem to be any conflict."
1,"> I dont see any new commits.
> Latest commit is of 11 days ago which means the 1st round."
1,"> Code quality, variable names, methods names etc. seem to be fine.
> Code style also follow ruby guideines.
> However, Comments have not been provided for all the methods however there are few inline comments here and there"
0,I couldn't find any bugs in the authors' work. All of the described 3 scenarios worked perfectly for me when I tested. Good job!
0,"Yes, the authors have written test cases for all the cases discussed in Test Plan. They go in sync with the description of the ""Future Testing"" section of the documentation."
0,Functions are not long. The team did not have a lot of changes to do but whatever they have done is done using Ruby Style Guidelines. The code is modular but more comments are definitely required.
1,"I couldn't find comments in the authors' work. They have added a few comments in spec files. But changes in files ""app/controllers/teams_users_controller.rb"" and ""app/controllers/student_task_controller.rb"" should have been explained with comments so that anyone who sees the code and doesn't have the documentation of this project is able to understand what is done in that part. Authors can write comments based on their documentation itself. It will make the code more readable and understandable."
0,"The authors did not had a chance to write a lot of code but whatever they wrote to solve the bugs, is kind of self-explanatory as variable names are good and function calls are also good enough to get an overview of what is happening. Definitely, since there are no comments, I couldn't understand what exactly is done without reading the documentation."
0,"The test plan (Future testing section) looks to be covering some possible scenarios of breaking. But since I worked on Mozilla project and I don't know the code structure/models/implementation of expertiza, I am not sure whether author have considered all the edge cases. One edge case that I could find out that their test doesn't check what happens when a team is of size 1. Does it behave that way it should?"
0,"Authors have explained their approach in detail in Solution section of the documentation. They have mentioned what was the problem, what caused the problem and how did they solve that."
1,"The writeup is very detailed and explains all the subproblems inside the problem and their reproduction, causes along with all the changes in code and all the test cases which are written. Just one missing thing is that link to PR is not in the documentation. I suggest the team to add the link to PR to the documentation. (Although we can see the PR link from submission details.)"
0,The author's work implements all the functionality described in the assignment with no errors. All the edge cases work as expected.
1,"Test plan is not mentioned, but testing has been implemented by the authors."
0,"Since the code changes are small, problems like DRY code, Ruby style coding violations etc are not encountered."
0,"The code for Rspecs is very confusing, and does not have any comments either."
0,The code in student_task_controller.rb needs to be divided into sections with parenthesis.-t.assignment.course and session[:original_user].id == t.assignment.course.instructor_id or !t.assignment.course and session[:original_user].id == t.assignment.instructor_id
0,Test plan is missing in the wiki. But the testing scenarios are described well.
0,There is no new pattern to be implemented since the code changes for their bug fixes are minor.
0,Write up has grammatical errors and typos. And Test plan is missing as well.
0,"I have followed the guidelines in problems section on their wiki page, to test if they fixed the bugs they mentioned, and all the three cases work well."
0,Every test passes currently.
0,"(1)(2) Actually most of the files created by the author has a proper length for their functions, except for ""impersonate_student_spec.rb"". Although they made several comments on each step of their test, the funtion still seems too long, which decreases the readability and makes it hard to locate errors in case the test fails. And because the function contains several parts of tests running, they would be better extracted into separate methods.
(3) I have no trouble following their codes.
(4)(5) N/A"
1,"They made mostly descriptive comments on small blocks of codes. For example, in impersonate_student_spec.rb, they listed all four detailed steps as comments when that test is running.
However, in other test files, there is only one line of comment, saying what it is currently testing. In my opinion, they should make more comments on the exact actions that the program is doing, like ""login_as"" and ""click_link"". By clearly showing what actions the test is doing, they can make it much easier to locate errors and fix those test files. Cuz I noticed that they got a lot of merge failures after applying changes to test files. Thus I think this is a good direction for them to improve efficiency."
0,"On the Issue page they provided, there are 13 commits that can be found which changed 10 files in total. The changes were mainly located on some misused variables in statements, or corrections on wrong syntax.
Of the four RSpec test files they created, they made all the variable names properly and following the normal format."
0,"In their Testing Details section, they further explained how they testified the three problems, and then showed the successful test results running RSpec, they even posted a video on youtube showing the test result. All their test information were fully documented on their writeup."
0,"The main problems, listed as the first two problems, were both located, and the internal logic or reasons were found for both problems, and they fixed them with correct approaches. However, I could not figure out why they list the third one in the problems section. It seems that this one was a task for them, which were not clearly explained. Anyway the result was good, as the functionality they wanted works fine."
0,"As a reader, I cannot figure out why they list the third problem as a problem, cuz in their narrative, no errors were raised. And in the solutions section, again, nothing seems to be fixed.
Maybe there are more documents which contains more information about the third problem or issue, so please list it as a reference, or do not place it in problems section."
0,"Yes, the tests passed."
0,"Yes, the team added necessary comments."
0,"Yes, the test cases are complete enough."
0,"Yes, the team explain problems and solutions clearly."
0,The writeup explain how the team fixed problems clearly and understandable.
0,for feature 2 I am still getting this You cannot impersonate student5000.
0,functions are in good shape
0,"Not needed, since they're bug fixes"
0,"Not much, all good bug fixes"
0,Very clear with the side by side code comparison
0,"All the features work as intended.
1) Just a note that when trying to import team, it requires to add/uplod file, and it allows to upload any kind of file. Just check this ...as this may/may not related to issue you were assign."
0,"Yes, the feature test plans are well converted to tests"
1,1) Write more comments in Rspec tests that what they cover  otherwise other things are self explanatory.
0,wrote meaningful variable name.
0,"They performed feature testing well.
I recommend to add DB test as well"
0,"Write up is crystal clear.
Author well explains following point:
1) Introduction to Issue with topic
2) what was before and what is now
3) what approach they took
4) what is the solution (with screenshots)"
0,write up is clear and it describes all the functionality that should work in proper way and how they update it.
0,"Couldn't test the work because the deployed link is not connecting. I believe there is a problem with your deployed application. Just running server on VCL will not deploy your application. Please follow the below instructions to deploy your application:
For deploying on VCL, do RDP(Remote Desktop Protocol) on VCL. (https://vcl.ncsu.edu/get-help/documentation/remote-desktop-instructions/). And login to the machine and then run the server from its terminal."
0,The team has converted the cases discussed in Test Plan into automated test cases using RSpec. I wasn't able to check them because the deployed link is not working. I am getting the error: This site can’t be reached. 152.46.17.56 refused to connect.
1,"1) The functions weren't too long.
2) The methods were short so they need not be divided into sub-methods.
3) More comments are required. Please add more comments in all the files to make your code more human-friendly.
4) The code does seem to follow the Ruby Style Guide.
5) The code does not smell and is following the DRY principle."
1,Very little comments have been added. Please add multi-line comments before the beginning of a method describing what the method does and add single line comments inside the method wherever required.
0,"Based on the code the team has added, it seems they have followed good coding standards by giving proper variable, method and class names. I was able to figure out what the code could do upto a certain degree."
1,"The write-up does include Test Plan section where the team has given steps to test the issues they have resolved. However, no pre-conditions, edge cases, invalid input values, other possibilities are included in the write-up. Please include more such details."
1,"The write-up is well written. It does cover the problem statement, solutions and the reason for those solutions. However I believe the write-up can be improved further by reorganizing the content. For instance, your write-up includes files modified, list of changes, methodology under the same heading ""Solutions"". These all can be divided into sub-headings to make the write-up more readable. Have a look at one of the reference wiki write-ups given by the professor to improve your wiki content organization."
0,I have tested from their deployment and showed that the manually test has do the excat things that the author mentioned in  the wiki.So I think the bugs are all fixed.
0,The test plan in the rspec is automated test the function they fixed. And the vedioes has showed that their rspec tests passed while excuted.
0,The testing code is follow the Ruby Style Guide since the code is really decent and compact. And I think they meet the requirment of DRY.
0,"Yes, There are pricise comments in their test of the adding teamates test and the commnet write apartly to tell what the test is doing."
0,The author does the work all about the testing which not creating any new methods and variables.SO the naming will not be a problem in their project.
0,"The main Test Plan is showed in the rspec which i think include all the cases that are in all the scenarios. Test plan is meeting the request, which is describe 'Impersonate a student whose assignment has no course attribute' and the test of describe ""add assignment team member test"""
0,The writeup explain the problems which they will deal with and list the solution which we can see from the wiki page directly.
0,The writeup is written decently since the pages shows the issues they solved and the results of the test.
0,The vcl/heroku link is not working so I cannot test the functionality.
0,They didnot create or modify the tests. They used the old rspec test in their project
1,Although function and variable names are intuitive. Adding comments would help understand what is happening in the function.
0,Names were intuitive and logical
0,Yes. Rspec testing was metioned in detail along with the results.
0,The writeup was very details and explained what they had to d oand how did they do it.
0,Everything is mentioned very clearly along with screenshots to help understand the project and work.
0,"Sorry, I couldn't think of edge cases. But most cases I tried, it worked."
0,No suggestions here.Well written code.
1,"There are no comments in the code. There are comments for test cases, though. Since the code doesn't have a lot of lines, I didn't have difficulty following through the code, despite missing comments."
1,"The team added very few lines of code. Their testing code is more than the actual code, which is a good thing. The code is well written."
0,yes. detailed test plan is there in the document.
0,"Write-up is detailed. There is no enough information about the third issue this team worked on. The documentation just says - 'Third one works fine'
Does it mean that - the team didn't have to do anything to get third problem resolved?"
0,Write-up could be improved for Issue-3.
0,"Since the wiki hsan't been provided, I could not refer to it to find the relevant section for Test Plan."
0,"Please check the URL for your deployment. I am getting following error:->""
This site can’t be reached"
1,"1) Most of the code changes are related to tests (RSpec). However, they seem to be all of decent length.
2) Don't need to extract them into separate methods.
3) Some more comments would make the life of a reader much easier.
4) Code perfectly follows the ruby style guide
5) Code is not smelly. The tests have also been written well."
1,"> Comments have not been provided for all the methods however there are few inline comments here and there.
> Please add comments to every method giving a gist of what you are achieving."
0,"The Pull Request URL has not been provided. Please provide the PR link. I had to search through you PR from the list of PRs. 
> Build has passed
> Test coverage has decreased."
0,I believe the provided wiki URL is incorrect (http://wiki.expertiza.ncsu.edu/index.php/Expertiza_documentation). Could not find anything related to the fixes.
0,"I believe the provided wiki URL is incorrect (http://wiki.expertiza.ncsu.edu/index.php/Expertiza_documentation).
Please provide the correct wiki so that this part can be checked."
0,"As mentioned above, incorrect wiki has been provided. So, I wasn't able to look into it."
1,Most of the function  name and variable name are reasonable just found one case where constant name can be improved. Added proper comment for the same in PR as well suggesting required change.
0,Pretty good
0,"Yes, they did very well and the variables, methods, and class names of the code are all reasonable.
 
1. The writeup is well written and easy to read.
2. It is adequately descriptive of the work done.
3. it attempts to explain the reasons for the style of code and problem solving approach."
0,"The pull request is successful, but there is no test that make sure all the above is right"
1,"The test coverage has decreased. The variables, methods, and class name have been named correctly though."
0,"Variables has proper names, methods also have names so that one can easily understand why this method has been written."
0,"Yes, the variable and methods name used is quite good. They have also tried to improve the name of variables by making it more meaningful."
0,"Features are working as expected with the bugs being fixed. Some edge cases they have outlined in the wiki that cant be considered, so that should be okay. The mentioned reason says that they are using accurate data in the import file such as the team name should exist in the system before using it in the import file."
0,I didn't find any variables method or class name that is not reasonable. The naming seems to be straight and clear to understand the class or functionality.
1,"The Travis CI build passes successfully and clears all checks for the last commit.
The test coverage after the last commit decreased by 4.4% to 26.074%.
All the variables, methods and class names are suggestive of their functionality and follow Ruby naming conventions. The names actually make it easier to understand what's happening in the new code."
1,no test cases wrote
1,"No, there's no test plan part on the wiki page."
1,"No test plan, perhaps they test all the thins manually"
1,"The test cases have not been automated. Also, the wiki document does not has any of the test cases included."
1,As there's no test plan in the wiki doc so really difficult to come to the conclusion that if those case has been converted to automated tests. But there are test cases in the commit for few bugs but not for all the bugs but i understand why it's not there and doesn't look like team's fault. As i explained above that why it is not in the code as it would require to write all the test cases first for import topics and then make changes for these bugs.
1,"It seems they have implemented the Rspec tests but haven't included the same in the test plan on the wiki page. As mentioned in Piazza's post by the professor, explaining the work done on the wiki page is much helpful."
1,"There was no Test Plan in the writeup so it is difficult to ascertain which tests are expected to be automated.
But the authors did write new tests for whatever changes they made. For example, in  sign_up_topic_spec.rb."
1,More comments will be better and more helpful.
0,Their major code change was in the assignments_controller and they did add comments for it.
0,"Yes, they gave a description describing all their changes and other details as well which they believed would help the reviewer do a better job such as the testing details."
0,Yes the feature works as intended. Directory was created once the new assignment was created
1,I wasn't able to find the comments on the method. Moreover comments can also be included in conditions like 'if !exist_assignment and !exist_directory' in create method
0,The variables used in file assignments_controller.rb are good. The code clearly depicts what it is doing.  I didn't find anything where names doesn't suggest the functionality.  The method create is also self explanatory
0,"Yes, the write up seems pretty clear. I was able to login and check the functionality with help of wiki page. The UI Testing part helped me understand what should I do."
0,Most of the features are working correctly as tested but have not tested or come across any corner or edge cases.
0,The code is pretty easy to follow since the variables used are reasonable. The altered code is understandable and intuitive.
1,I can see a lot of changes being made and would suggest that the reviewer would gain more insights if you would have mentioned the purpose of adding or altering the code in the form of comments at places where the code has been altered. Would suggest that you do the same in the next round of submission.
0,"I think that the newly added code is intuitive as in, it is easy to understand the functionality even though the variable, method or class names would have been unreasonable however this is not the case. So great job guys."
1,"The document is systematic to some extent however the test plan is not mentioned anywhere inside it.
I would suggest that you jot down the test plan including all the corner and test cases for which the tests have been run correctly. This would not only save the reviewer's time to test already tested edge cases, but also allow him/her to suggest or test some new corner cases."
0,The write up is very well documented highlighting the various changes implemented and its working with the help of screenshots. This would make it easier for a reviewer to visualize most of the changes while simultaneously changing the actual changes implemented.
1,"The directory name was being edited as explained. Also I couldn't create an assignment with the same name. However I was getting the error below if I named one assignment exec(""return;""); and the second assignment exec("" return;""); (Notice there is a space between "" and return in the second one.)
undefined method `each' for nil:NilClass
 
Extracted source (around line #45):





43
44
45
46
47
48
              


            cur_questionnaire[:assignment_id] = current_assignment.id.to_s

          end

          due_array.each do |cur_due|

            cur_due[:parent_id] = current_assignment.id.to_s

          end

          assignment_form_params[:assignment_questionnaire] = ques_array"
0,Yes and it passes!
1,There is one test in the test plan. It tests for creating assignment with an existing name. This may be tested by previously existing test (although I couldn't see it) but there should be a test for testing if a default name for assignment can complete successfully.
0,Yes. It was helpful to see the added code in the write up and the step by step instructions on how to see the added feature.
0,Yes the feature works as expected.
0,They have added new test plans that cover ll the test cases.
1,The assignment create function is very large. It could be broken down into smaller modular parts. They could have truncated the lines after 80 column length as per the style guide
1,The functions are pretty self explanatory. They could have added some comments for the javascript function.
1,"The build is passing but there are some code climate issues. There are some variable names that can be changed. For eg, due_array cur_due are little ambiguous."
0,"Yes the authors have added the check for valid input, like the check to sanitise the name of the name of the assignment folder when automatically created."
0,Th wiki explains the issues and what needs to be done correctly.
0,Yes the wiki page include all the details and background for the task. They have clearly explained the desired outcome and have also added video and screenshots of the same.
1,Comments say what method does but not how it is done.
0,"Yes, it works as intended."
0,"I haven't found any tests they added,but they did pass all the tests."
0,"Since there is not many commits in this project, the did well on this requirement. The code are clean and readable."
1,"The writeup explains their work well. However, there is some part like ""The instructor is allowed to edit"". I am not sure about whether this is the sentence exactly they want or they forget to put a period, but it doesn't look good."
1,"The team simply lists all the changes they made in the writeup. I can understand what they want to achieve, but I think it can be better if they explain their design or how they made decision step by step in the writeup. It will help others understand their work better."
1,"The following bugs still exist:
1. I was able to create a 2nd assignment with the same submission directory. To replicate: enter name of assignment as something else and change submission directory to the name of the directory used in another assignment
2. Is the test name is 'test() assignment', the created submission directory comes up as 'test()_assignment'. Maybe this is expected but according to the wiki, all special characters should be removed."
1,The create method in assignments_controller.rb has become very long. Some refactoring might help.
0,Some comments have been added to assignments_controller.rb. The changes that they have made don't need as many comments anyway.
1,"A lot of variables have been named in shorthand. Like cur_due should be current_due, ques_array should be questions_array."
0,The wiki page only talks about testing details out of which the major portion talks about how to recreate the scenario that they have fixed. It's basically about UI testing.
1,"The authors do explain what they have done but they haven't explicitly mentioned what the initial issues were. It is implicit that what they have done wasn't working before. However, there is no way to know if these were the only pending issues."
0,"The UI testing part explains what the team wanted to do, hence, it is easy to understand what they were trying to fix."
0,I tested all features related to their project on the link where they deployed the project. All the features work correctly as in the document.
1,"I think they didn't test if the generated path can be overridden. The test can be add in RSpec. 
They test all the other cases in test plan."
1,"The code they added that generate path for assignment are already in a method. The code that checks if assignment name or directory name is duplicated if just one line. So, it doesn't need to extracted into separate methods."
1,"There aren't comments in their code. They should add some comments that briefly describe what the methods do. 
For example, in the _general.html.erb file, they can add a comments saying what the method does before the code that is responsible to generate path."
1,"They did a good job on test plan. In the RSpec part, they tested the case that two assignments in a course can not have the same name.
In the UI testing part, they tested

if the function of generating path works;
two assignments of a course can not have the same name;
two assignments of different courses are able to have the same name;
instructors can override the automatically generated path;

and all tests pass.
But I notice that there is one case that they didn't test. If a instructor create two assignments and override their path as the same path, it should fail. They didn't test this situation."
1,"Yes, the writeup explains their work clearly. They wrote the description of the issue, the files that are modified, links they submitted, what they've done to achieve the requirements and how to test. But they didn't write what design pattern should be used and how they use the design pattern. In the ""list of changes"" part, I think their code may be easier to read if they add some comments in their code."
0,"Their writeup's structure is clear. They introduced the background of Expertiza, what results they should achieve, how and what they do to achieve the goal, and how they test their work. I can understand what the project does by reading their writeup."
1,The code works well in all the edge-cases but when filling out same assignment name under same course second time rails error is coming instead of flashing error message.
1,They have included much of business logic in assignments_controller out of which some code could be shifted in model and also for the successful save message return in create method they have used it two times which could be DRY out further by adding simple flag.
0,Yes they have used naming well
1,"Overall, they have included different scenarios for testing on edge-cases. But, I did find one scenario which is not included in the test cases and it is failing the condition that no two assignments with same name should exist under same course. Below are the steps to reproduce :-

Create assignment with some name say ""test_1"" under some course say ""course_1""
Create other assignment with name say ""test_2"" under some other course say ""course_2""
Now edit the other assignment name from ""test_2"" to ""test_1"" with course as ""course_2""
Now change the course name of above assignment from ""course_2"" to ""course_1""
It allows me to save this way and thus there will be two assignments with same name under same course.

You can see ""test_1_pjd g. h"" assignment two times in course pjdtest1"
0,Yes they have included all the necessary sections and links which are easy to follow.
0,Yes the write up is very well organized and easy to follow all the changes implemented.
0,Yes. This code is ready to be deployed onto the production server. Because the features work as intended.
0,"The writeup is organized and it describes their work in detail. The writeup includes the problem statement, how and what they do to fix the problem, the test they write, and how to test their work from the UI."
0,The system works as intended. Their functions work well as they are supposed to.
1,They didn't add test cases during 2nd round. But they already have test case in the first round.
0,There is one commit during 2nd round. Good job.
0,Their code has good names and don't have long functions. And they add some comments in their code during 2nd round.
1,"Not exactly, because I think there is some bug. As I mentioned above, their functionality did not work on a random assignment that I selected."
0,The write up is very elaborate and well written. All the important sections are present and the screenshots make it easier to understand what they've done.
1,"The operation did not work when I tried to delete the topics under the assignment ""Madeup problem."" I clicked on the delete button, the page refreshed, but the topics were still there. Though the operations work just fine on the assignment that they recommended. I deleted a few topics and all topics too. I also created my own topic and deleted it. The select all option also works well."
0,"Yes, they have added 1 test case and their coverage increased by 1.2% which is really good."
0,"Yes, I can see only one commit made during the 2nd round."
0,"Yes, the code is well written. No method is too long and variable names are also sensible."
0,"Write up is very concise and clear. However, since code snippets are added to the wiki, I would suggest to also include details on how that part of code helps to achieve the goal."
1,"It seems like the authors have catered to most of the requirements and done a good job in added the functionality to the views and controllers. However my only concern is that this approach seems to not work in certain cases. One such case has been pointed above. It seems like the authors have tried that case out as well, but they were not able to fix the issue. ""6. Then you shall see they are deleted. (For some reason we don't know, it failed when editing a staggered deadline assignment.)"". I believe, if they can do some more testing to figure this issue out, the code could be deployed, to add a useful functionality."
1,"I still face the same problem that I faced during the first round of reviews - ""When I try to delete the topics, sometimes they are actually not getting deleted (if I select 1-2 topics), but flash message is displayed as per expectation. Try (Assignment ""Madeup problem"" -> select topics 1.2.1 and 1.3 and ""Delete selected topics""). These records are retained even after the page reloads. Probably this is the case for completed assignments, in which case restrict the action or add appropriate flash messages.""
Additionally, I followed the test plan for UI that the authors have mentioned on the wiki - ""2. Choose an Assignment ( Final project (and design doc) is recommended). Then click ""Edit"" below Actions."" . Please note that there are two such assignments loaded from the scrubbed db and the first one does not even have a ""topics"" tab, however the second one did. I would suggest that when you suggest to use example data, please make sure that the directions for the reviewers are clear."
0,"No new test cases were added for round 2. However, based on the previously added test cases, the coverage increased by 1.2%."
0,"Yes, build passes in Travis CI"
1,"There was just one commit to add comments to the code. While I understand that the team has already finished majority of their work for the first round, it would have been nice if they could have taken up issues around this module and fixed it for the second round (one issue was mentioned by me in the previous review)."
0,"I find the naming follows ruby principles, authors have added comments."
1,"Yes, I think the code is ready to be deployed into production but I do have a minor suggestion. When a topic is being deleted from an assignment, the the topic number still remains the same. This is not indicative of its actual topic number post deletion!"
0,"As mentioned in the first review, the writeup is very informative and well-written. The flow of the writeup helps us better understand the changes that have been made."
0,"Yes, multiple topics can now be deleted from the UI. The assignment entries tested on the UI are ""New Test Assignment"" and ""WCAE 2017"""
0,"Yes, the team added test cases for deletion of multiple topics at once in the sign_up_sheet_controller
Yes, the code coverage increased by 32%
The test are well thought of and"
0,"Yes, the latest build passed Travis CI and there are no conflicts yet to be resolved"
0,"Yes, there was a single commit adding comments to the code, making it much more readable"
0,The code is modular and isn't too long. Separate functions have been created wherever needed with appropriate comments
1,"This code is not yet ready to be deployed onto production.
The biggest concern is that the functionality seems to be working selectively and the problem needs to be identified and fixed.
 
Also, a few more before-after conditions need to be taken into consideration. eg. One must not be allowed to edit the topics once the final deadline has passed and submissions for the topics have already been made."
1,"The write up is well written. The problem, solution and test is explained well.
It also honestly states that there is a glitch in the implementation. However, they have not identified and mentioned the problem due to which it doesnt seem to work."
1,"The functionality is working selectively.
On testing it for various assignments, it behaved differently each time.
eg 1. It worked totally fine for assignment 'Final project (and design document)'.
eg 2. For the assignment 'madeup problem', none of the selected topics got deleted. 
eg 3. For the assignment 'writing assignment 1a', from the 3 topics selected, 2 topics got deleted and 1 did not.
 
At first, I thought it is not allowing to delete topics from an assignment whose deadline has passed. But that is not the case. All above assignments have a past due date."
0,"Yes, the team has added a new test case. It increases the coverage."
0,One new commit was made in 2nd round to add comments to the code.
0,"Although the code has not been changed in the second round, the code seems well written and structured.
 
It follows the basic conventions well."
1,"Code is ready to be deployed. 
One minor suggestion: After the action is completed it redirects to the general tab but it should stay on topics tab."
0,"The writeup has been significantly improved from round1. They have added manual testing section which was not present in round 1 thus making it more understandable and easy to test.
The images included clearly tells you what the issue was and how it is solved now."
0,It works as intended. The team has solved the problem assigned to them.
1,"Yes, one test case has been added in the file: spec/controllers/sign_up_sheet_controller_spec.rb
This checks the flash message which according to me is not the best way to test this feature."
0,The project has passed Travis CI build test cases and no issues are present.
0,Only comments were added in round 2.
0,The functions are well written and self-explanatory. Comments have been added too.
0,"Yes, this code is ready to be merged into the production server.
The only problem is that maybe there need more tests."
0,The writeup is clean and easy to understand.
0,It seems that all work fine.
1,"No, they didn't add new test cases.
The coverage decreased."
0,"Yes, they passed in Travis CI."
0,"Yes, they add some new comments."
0,"Their code is DRY.
There're enough comments for me to understand."
0,"yes, the code is ready to be depolyed since the function has been tested and modified, also the test are all passed"
0,"The writeup is updated than before, the writeup has the functionality that the code have they improve. And the author clearly wrote all the things."
0,"I think the tests cover all the scenarios, because the project is easy to think about all the scenarios which test case may have, so tests can cover all the scenarios."
0,Yest the coverage increase but no test cases added in the project.
0,"The checks all passed, and the branch has no conflict with base branch."
0,new code added on Nov 4th i saw in the commits and so new code comitted during the 2nd round.
0,"The code is DRY, the naming is good, and also the group adds new cooments for the code and more easy to read"
0,Yes the function works fine.
0,The writeup is clear and straightforward. Like.
1,"Because you have changed the views on page, I think you should test the element on the front end."
0,They have tested the delete all function in spec/controllers/sign_up_sheet_controller_spec.rb.
0,The build has passed in Travis CI. no conflicts.
0,There is one pull request made on Nov.5th. They have added some comments.
0,"Names are good, no bad method, comments are good."
1,"The features work correctly as intended under manually test.
I tested the situation that clicking on the ""Delete Selected Topics"" button with no topic is selected. No topic is deleted and the page is refreshed. But I think it would be better if there is a error message saying that no topic is selected under this situation."
0,"The test of deleting all selected topics is added in the file ""sign_up_sheet_controller_spec.rb"" and passes."
1,"There code is readable. There are some methods that each perform a single task. And there isn't any long method.
They can add some comments to the method ""deleteTopics"" in file ""_add_topics.html.erb"". Because it is a little hard to understand how this method perform its task."
0,There are comments that describe what the methods do before the methods they add.
0,"The build passes and the test coverage decreased (-6.2%) to 24.32%. 
The variables, methods, and class names are clear and reasonable."
1,"They included the RSpec test section in their writeup. But they didn't write how to testing from UI. It would be better if they add a section that describe how to perform test from UI and test some edge cases like what will happen if click on the ""delete selected topics"" with no topic is selected."
0,"The writeup explains the description of the problem, what they've done to solve the problem and the test they've written. And they included the results of their work."
0,The structure of the writeup is clear and organized. I can understand what the project does by reading the writeup. I think it would be better to add a section to describe how to test form UI.
0,I tried selecting only a few topics and also all topics. Both these cases worked just fine .
0,"Yes, they have created a test case for the delete_all_selected_topics function which indirectly tests the load_all_selected_topics function too. The test case is well written."
0,"No, all the functions in the controllers, javascript function, and ajax functions are not too long and follow the standard Ruby and HTML format."
1,"Only one variable called ""ient"" that I encountered in the javascript function was confusing. I didn't understand what it indicated. The other function and variable names like checkboxes, deleteTopics() were very intuitive and good."
0,"Yes, there are good comments in the sign_up_sheet_controller.rb file for every new function that they have added."
1,"Yes, the test plan is very specific and properly explains the test case. They have built the test case to delete all selected topics. I think they should also take into consideration the Delete All scenario as it flashes a confirmation message too and they can build a test case around it too."
0,"Yes, it properly explains the problem and the steps taken to solve that problem."
0,"The write-up is very easy to understand. The screenshots make it easier to understand the current working scenario. The problem statement, solution, changes, test plan, all have been very clearly explained."
1,"When I try to delete the topics, sometimes they are actually not getting deleted (if I select 1-2 topics), but flash message is displayed as per expectation. Try (Assignment ""Madeup problem"" -> select topics 1.2.1 and 1.3 and ""Delete selected topics""). These records are retained even after the page reloads. Probably this is the case for completed assignments, in which case restrict the action or add appropriate flash messages."
0,The authors can probably check whether the selected topics actually get deleted from the database.
0,I don't find any issues with the code
0,"Yes, comments are simple and mentions what the method does."
0,Reasonable naming conventions are used.
1,The current description is short and crisp. Details on what each function is aimed at doing can be more detailed.
1,"The authors can probably check whether the selected topics actually get deleted from the database. There is test function checks whether the flash message is displayed correctly, more could be included."
0,Write up is concise and clear. More description can be added with regards to how the code achieves the purpose. Good work overall!
0,No test cases in this
0,No comments were given
0,It has been done fairly well.
0,No explicitly explained the functionality.
1,"I tried to delete multiple topics from the assignment 'Made up Problem' . Although the test cases seem to have passed, the functionality isn't working"
1,"Yes, there are comments describing each method and they tell us what the method does. However, the javascript methods haven't been commented"
1,"The code is modular and isn't too long. Separate functions have been created wherever needed. However, a little explanation about why something deserves a separate function would be helpful"
0,"Yes, all the test cases have been converted to suit their purpose"
0,Naming has been done intuitively and this had made the code readable
0,"Yes, it does include a test plan. The testing has been done for a single selected topic and could have been more thorough had multiple topic deletions been tested. Nevertheless, the test plan looks complete enough"
0,"Yes, the writeup does explain the solution used by the authors to solve the multiple topic selection problem. It also provides a 'Select All' feature which might come in really handy for deleting all but some topics."
0,The writeup is very informative and well-written. The flow of the writeup helps better understand the changes that have been made
1,"the topic does not go away when clicking on delete selected topics
Madeup problem > Topics > check and delete selected topics
This does not work, while the individual deletion still works"
0,The code looks very clean to me
0,"Yes, the automated test plan's code is even listed in the wiki page"
0,The functions seems to be reasonable sized and
0,"It's rather straight forward to figure out what these functions do from their name, delete_all_selected_topics would be deleting all of the selected topics, and selectAll would select all of the topics"
0,"Apart from some names are in camelCase and some are in snake_case, everything looks fine"
0,"Yes, the test plan looks complete"
0,"yes, all of the functions are explained pretty well"
0,The write up does show what they're trying to accomplish
1,not able to find the added functionality
1,No mention of test cases in documentation as well as no tests available to view
1,"code is well written, priciples and conventions are followed
no comments are added"
1,Commenting is not done
0,Naming conventions are followed
1,"The writeup does not include a test plan
No such plan is visible"
1,"Authors have explained well what work they have done.
 
However, they have not mentioned anywhere how to test the changes"
1,Steps and files changed are  mentioned well. Only missing aspect is impact of changes
1,"Unfortunately, no explanation has been given on how to navigate to a particular page. I tried searching for the page based on the files changed but could not find it. It would be great if you could add the navigation part to your wiki page."
0,"Yes, one test case has been written which checks the issue."
0,The code satisfies all the principles mentioned above.
1,The functions are well written and self-explanatory but the comments have not been added.
0,The variable names used seem relevant. for example: 1. function name: select_all rightly conveys the meaning and so does function name: delete_all_selected_topics
0,The test plan looks complete and the code is added in the appropriate spec file.
0,"The writeup is well written. Everything is well explained right from issues, plan to fix, code, results and test plan."
0,I have test the new feature manually. Everything works fine and there's no any bug.
0,"Although there is no test plan in the writeup, they have tested the new feature they have implemented.
There's a small suggestion that you can test more scenarios like what if user doesn't select any topics and click ""delete"" button."
0,"There are two comments for the new function ""deletTopics"". It is easy for me to understand what it means."
0,"(1) No function is too long.
(2) No code need to be split into two parts.
(3) The commands are enough to understand.
(4) The code follows Ruby Style Guide, they are easy to follow.
(5) The code looks DRY for me."
1,"Most of names of variables, methods and class names look fine to me.
In app/views/sign_up_sheet/_table_line.html.erb, the name of the table is name=""query_mySelectBox"". This looks like a ruby and java naming style.
My suggestion to change it to ""query_my_select_box"""
1,"Although there's no test plan in writeup, they did test for the functionality of new feature.
I have a small suggestion that perhaps you can test more cases for this new feature, such as the scenario that what if user doesn't select any topics and click ""delete"" button."
0,"Yes. The writeup is clear and easy to understand what the problem is here, why they want to do this work and how they finished the work."
0,The writeup is well written. I can easily follow and understand the purpose of their work and what they have done to implement this new feature.
0,Manually test the author's work which we can do the same as it is mentioned in the wiki pages and also we can know clearly from the wiki.
0,Think the test plan include all the possible cases of the project.
0,"Functions of the project is great in naming which readable for others and also follow the Ruby Style Guide, which meets the requirment of DRY."
0,"Comments are quiet short and quiet few, but since the function is readable and also the code is not really long, I think it's ok to read and understand the work they done."
0,"The naming is properly such as delete_all_selected_topics , this method shows the high readability for the reader. And all the rspec is about the new function."
0,The author write the auto test in the rspec which test the function of All selected topics have been deleted successfully. Which I think is the all the cases that the Test plan could include.
0,The wiki page said really clear about the every function they change and what they do by showing the pictures. So i think it's shows correctly about the design priciples.
0,"The writeup is easily to understand, because the author using the segement to apart the different part of their work."
0,The features work well.
1,"Code is written in rspec, can be automatically run when created a pull request.
But is there anyway you can test the view for checkbox? and the button ""“Select all""?"
1,Namings for function and variables are good. Code is not too long. But more comments are needed because I could not tell a loop or a new line is for what.
1,No comments in code. But there is some comments on wiki for the adding codes.
1,"Naming is good, class name is good.
Test coverage decreased.
It is better if you could commit your messages more details."
1,"There is a section ""Test"", better change it to Test Plan. 
Test Plan should have more documentation, and how to run it."
1,"Code changes are displayed on wiki clearly, there are some comments. 
If you could provide some logic analyze the logic in your code, will be more persuasive. Also I recommend you place more screenshots for the manually testing. (idk how to go to the page you edited)"
1,"I recommend you place more screenshots for the manually testing, because I hardly can find the page for deleting topics on instructor end."
1,"Build did not pass. Coverage is decreased by 3.4%.
Build should have been be passed. Looked at the code, I think Build did not pass because of the one of the test case ""assignment function rubrics tab Edit review rubric should update scored question dropdown"" failed. Take a look and try to fix the build."
0,"There hs been efforts put on the writeup. It explains how the project works,with code and screenshots."
0,"Yes, whatever tests they have written, they did convert it into automated tests."
1,The method are pretty descriptive themselves. Being modular they are easy to understand. I think that they could have added a comment or two for assignment_participant import functions
1,"1. Cannot test for above reasons.
2. Cannot test for above reasons.
3. Admin cannot be deleted.
4. Cannot test for above reasons.
 
Due to much of the functionality not working, I cannot come up with any more edge cases to test."
1,"Before, I was unable to even log in. Since then, many problems have been fixed. The following features are not working:
1. View all books
2. Librarian can view all books
3. Cover photo can be uploaded for a book
4. Validations in place for each book attribute
5. Students cannot add books (pretty sure they just disabled the button to submit the form, but this can be done other ways)
 
 
Because of the above, I am unable to test:
1. Book checkout
2. Overdue fees
3. Librarian adding books to library
4. Librarian editing book information
5. Librarian removing book from library
6. Librarian viewing all students who have checked out books
7. Librarian viewing student info who have books overdue
8. Librarian approving hold requests"
1,def book_return is a little long.
1,I believe the team has done some level of testing but not thorough enough. I couldn't find test cases for the controllers and models
1,"I have already explained in above points as view books, checkout and librarian functionalities are not working, I am not able to test the provided edge case scenarios. However I could check one of them and admin cannot be deleted."
1,"I Can see lot of improvement from last round. Although I have found few issue: -
1. Anyone without login can see all the details of students by navigating the url
2. I was able to signup as librarian but approval link in admin for librarian is not working and hence cannot check librarian functionality
3. Student can edit their email. I am not sure if this should be the case as email is the primary key
4. I was able to create book from admin but view books from admin and student threw an error
5. Since there's no way to checkout, I am not able to test other functionality"
1,"No, the team hasn't used any relationship on the model."
0,Yes the team kept on pushing their changes
1,yes the code is written in clean and readable way. The naming convention is also good. Only thing is set_receipe function in books controller. It doesn't match the project functionalities.
1,test cases are written for student controller and model. But the test cases are not proper. Could have written more test cases to ensure the application works properly.
1,The applications crashes in all the above-mentioned test cases except for (3) Admin account deletion. I wasn't able to test additional edge cases because the application crashes again and again.
1,"application crashes when trying to create, edit and delete a librarian.
application crashes when clicking on the approve link.
application crashes when clicking back button after creating/updating something.
Admin cannot view books,students,libraries,librarians.
application crashes when student trying to view,request books.
Admin not able to edit his profile.
Student/librarian able to login through sign-up, does not require approval from admin. 
Role based rendering is missing sice anyone can perform any task with the url."
1,"Bookmark can belong to books 
All Has one and has many validations missing."
1,Some of the methods are too long and too much use of if-else. Methods could be further modularized.
1,"There is no mapping table for university-library as well as library-book.
Also, referencing between tables is not specified at certain places. Tables bookmarks, histories, bookrequests and bookreqs is not referencing on book id or any unique value from table 'books'"
1,"Admin account cannot be deleted
Unable to carry out most tests because book checkout is not working
README contains no information about working of code or cases that are handled"
1,"Overall - All users are able to see only links they are supposed to. So that is good. UI and navigation is simple and easy to understand.
However, there are a few things that are not working as expected.
 
ADMIN
Admin is unable to create/edit/show librarian.
Admin is unable to view approval requests for librarian sign ups.
Admin is bale to change the student's university, which should not be allowed, once set.
While creating a new libraray, admin is able to create a library for a university that does not exist at all.
Admin cannot view all books.
Admin cannot view hold requests
Admin cannot view overdue fines. 
Admin cannot view list of students.
SIGN UP
No validation checks on fields. A normal word can pass as an email id.
STUDENT
On signing up as a student, the student is redirected to a page where all students are listed. This should not be possible.
Student can view libraries not associated with his own university.
Student is not able to view books. Hence cannot check book checkout/request/hold functionality.
Student is able to edit his university, which should not be allowed, once set.
LIBRARIAN
On signing up, approval request is not going to the admin. No approved credentials of librarian given. Hence cannot check any librarian functionality.
MISCELLANEOUS
Some links/buttons done work. eg. Back button after new book creation."
1,"No extra credit features added
 
Some naming has not been done well. eg. tablename bookreqs and bookrequests
Code looks clean and small functions have been defined.
One identifiable malpractice is that lot of controllers have been used. Just writing a function in the books controller would have sufficed for many cases."
1,"test is not thoroughly, students have many thing need to take care of"
1,"no edge cases are provided in the readme.
1. The admin has no way to see the book list
2. admin has no way to delete student
3. admin has no way to delete student"
1,"Admin should be able to view lib, librarian, students, and books. Librarians should be able to view books. Students function should be implemented, nearly every button in student page is not functioning correctly, please check heroku"
1,libraries should belong to universities
1,Seems no test was written for models/controllers. But there have been restrictions in models.
1,"Because the view all book function is broken down, I cannot view or borrow book to test all the situations. But I think this broken is due to some one before me test some edge situations and caused the broken down."
1,"Many functions does not work such librarian approve/edit, and even the view all books function is broken down which makes me honestly don't know how to test this project."
1,The book module seems to have crashed which doesn't allow me to check any feature related to books. The librarian approval request acceptance module for admins to accept the librarians is also not functional.
1,The test for models checks the validation features whereas the controller tests for api response. These test covers one feature but cannot be called as exhaustively tested.
1,"The entire book module is failing because of which I am unable to test the majority of features. However, the authors have fixed a few issues from the first submission. There are a few logical flaws in the system like library can be created  for university which does not exist. Validation is not taken care of as of now."
1,"The system takes care of one-to-one relationship using belong-to. I cannot see any cases of one-to-n or many-to-many relationships. Also, the Db design would have been better if there would have been foreign keys and references. Also,there is no mapping table for mapping these relationships."
0,"The team was committing the changes fairly throughout the project.However, a majority of the commits are seen to be done in week 2."
1,"The programming is done in a modular fashion which makes it easy to read as well as understandable to a new person seeing through the system. Also, the use of private methods ensure that the data cannot be overwritten by someone else accessing the system."
1,"1) What will happen if the admin tries to delete book that is issued?
As I cannot find the entrance to see all books, I cannot deleted books as an admin, so I don't know the result.
 
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book? 
As a student, when I click ""show all book"", the page went wrong. So I cannot check out books or hold books, so I don't know the result.
 
3) Can Admin account be deleted?
No, admin account cannot be deleted.
 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
As a student, when I click ""show all book"", the page went wrong. So I cannot check out books or hold books.
So I cannot created a student who has multiple pending book request, so I don't know the result."
1,"As an admin, the function of approving librarians seems not work. When I click ""Approval Librarians"", the page will go wrong.
As an admin, when I created a new book, then click on the ""Back"", the page will go wrong.
And as an admin, I cannot find the entrance to see all books, checked out books, books in hold request and books' borrowing history.
As a librarian, I should be approved by Admin after I signed up. This function seems not finished yet."
1,"They only have some statement like book belongs to library and librarian belongs to library. But they don't point out that ""library has many books"" or ""library has many librarians"", so I think they know the relationship is 1-to-n, they just not states it apparently."
1,"In most controller, one method only handle one task.
There is few bad naming. As there are bookreqs and bookrequests at the same time, that seems confused.
And other coding quality seems good."
1,Cannot access github
1,"Not sure, I couldn't access the github link."
1,"The UI is pretty east to use, but some elements should be spread out better (Educational level and undergraduate are on the same line). I wasn't able to read the readme because the github link returned a 404. Is the repository private?"
1,I couldn't log in with the given admin email and password. Some other tester may have changed the admin's password.
1,"As I mentioned above, I can not see the GitHub, so I am not able to see the changes of project. However, there are several features in this project, so I believe the team had done some changes for the project."
1,"With the features this application contains, most link are easily to find. Although some of the link are unusable, such as create new student account, the usable link are all clear and understandable."
1,"The GitHub for this application is not open for public, so I am not able to see any code of this application. Besides, I am not able to login with the admin account on the home page. It's clear for me to see it without github page open though."
1,No idea. Can't see repository.
0,Not that I can tell. Almost nothing works as it should.
1,Back buttons from student and librarian creation do not lead back to homepage. Cannot view README.
1,"Book images can’t be seen.
Create new student/lib redirects to logged in as student/lib respectively.
 
Book qty goes to negative, not sure what case, but few tuples were so.
Student can update book qty and name.
Student can update all library attributes.
View all books in nav bar is misleading.
 
Student can edit his university at any point, despite having issued books and pending requests.
 
University field is free text, no mapping to existing universities.
 
Extremely poor routing on UI, difficult to traverse pages.
Books main page has remove bookmark button only, which breaks on multiple tries.
 
There are hold requests for when the student has reached the maximum capacity of check out, and checks out another book. This should ideally get auto checked out once he returns either of his books.
 
Librarian gets signed up without admin approval.
Student gets signed up without admin approval.
 
Librarian can’t add books from other libraries. He can simply create new ones, which is an admin functionality only.
Admin/librarian can’t see the book issue history. 
 
Admin is not the super user, doesn’t have the hold request approval a librarian has!"
0,Code quality okay.
1,No book request and other functionalities implemented. Not even the home page.
1,Requests were not handled.
0,"Yes, they test some models and controllers. They tested a book model that should have valid name."
1,"They fixed the bug that the admin can't edit profile. And the admin can delete a library now.
The admin still can't view students who checked out books or with books overdue. The librarian can't view that information, either.
The books can't be checked out."
0,They kept on submitting their changes throughout the project. And there are some commits during the round 2.
0,"Yes, 1-n relation has been maintained for library and books. University and library also have 1-n relationship maintained. Team has used good approach for user to maintain that relation."
0,"Yes, Team has done good job in maintaining the code quality, making it more dry. No methods are really long. Comments are given properly."
1,"1. Admin cannot delete book. User can see option to delete library and book which gives error. 
2. Cannot check. Book cannot be deleted."
1,The web app is still giving error on old pages. The issues has not been fixed. Admin cannot deleted book 500. admin cannot update user profile.
0,lib_books table maps the 1-n relationship for library and books. Bookmarks and Reservations are based on id of this table.
1,"The model test only has two test cases.
The controller test only includes the generated test cases."
1,"There are two universities with the same name.
Editing the admin account logs the user out.
It's difficult to test edge cases when so much of the functionality is not accessible to me."
0,There are several examples of 1-to-n and n-to-n mappings in the database.
0,yes they do
0,Yes they did!
0,There are regular commits throughout the project.
0,Good amount of commits
0,Its hard to say but basic operations are implemented.
0,Good coding practices because they have implemented in a good way.
0,They kept pushing the changes of the codes throughout the project period.
0,The user interface is easy to understand and use.
0,They followed Ruby and Rails structure to write their codes.
0,"In the github, everyone give their update to repo, there are 93 commit in total, which mean they have a good performance."
0,Interface is clearly declare and easy to find function.
0,Repo has 93 commit and everyone's contribution could clearly tell.
0,Changes were made throughout the time.
0,"Yes, whatever the functionalities are presented were tested in good manor."
0,"nothing special been done for UI, but functionalities are easy to find and use."
0,"Yes, the team committed a decent number of times in the period between the first review round and the final submission."
1,"1. Didn't find admin functionality to add new student/ librarian accounts.
2. View book hold requests and checked out books does not work for the admin account .
3. Sign up does not take university and education level into consideration. Nice feature of 'cancel my account' added.
4. Book image upload is not implemented.
5. Unable to checkout book from student account after creating one through admin account. 
6. Student is able to edit library properties.
7. No bookmark functionality was found."
1,Test folder exist but seems generated by scaffold. Not custom test seem to be done for a specific controller/model.
0,"Yes, they tested several models and controllers thoroughly."
1,I checked readme and the test folder and I cannot find a sign that they write tests for any controllers/models but the native ones generated.
1,No. There is no unit test of a model or a controller.
1,The team has not tested any model or controller. I cannot find any rspec file or any content inside files in test folder.
0,Yes. Some controllers have been tested.
1,"Book cannot be deleted if checked out.
Student is not getting deleted.
Admin cannot be deleted."
0,Yes they have tested it.
1,Couldn't find any testing code in the commits
0,yes functionality for admin is well tested
1,I don't see any testing done as all the code is auto generated one.
1,"They test controllers thoroughly.
However there's no test for models."
0,Yes they have maintained appropriate mapping
0,"Yes, the system handles these relationships well."
0,"yes
I can locate a many to many relation between student and books
I can locate one to many relation between book and library
one to many relation between library and librarian"
1,"(1)Book-Library is a many-to-one relationship, but there's only belongs_to :library in book.rb, there isn't has_many :books in library.rb
(2)Book_history-Student is a many-to-one relationship, but there's only belongs_to :student in book_history.rb, there's not any has_many :book_histories in book.rb
(3)All the relationship pair don't have dependent: :destroy validation. So if I delete one member of the relationship, there may be system crash."
1,"Overall all relationships are properly defined. There is some models which could be connected but are not like ""special collection requests"" could be connected with students and books model by defining ""has many"" and ""through"" relation."
0,"Yes, there were significant changes committed in round 2"
0,yes i can spot 23 commits on 9th October.
0,Yes the team consistently kept pushing for the round 2 keeping in mind the previous suggestions and appropriate division f work among themselves.The commit graphs in the git hub shows their work.We can see the step by step enhancement and maintenance work in parallel.
0,Yes. Team has been working consistently the whole time.
0,"Yes, after first submit, they still commit."
0,"Yes, they kept on submitting changes throughout the project. Also yes, this team did commit changes in round 2."
1,I could edit the profiles of other students when signed in as a student. This shouldn't happen. There's no Social Login feature.Code is OK. books controller needs improvement. it has a lot of nested blocks.
1,"There're many long method in book controller, such as borrow method.
My suggestion is that we can split it into many small methods to integrate a big method."
0,"Yes, the code is written in a clean and a readable way."
1,The team did not test any one model and controller.
1,Could not check any admin functionalities as the preconfigured admin credentials did not work.
1,"1)Was unable to login with the preconfigured admin credentials.
2)The Profile edit for Students and Librarians is the same."
1,"There were not enough models created. The models that were created were book, library, reservation. These very limited number of models restricted the app to not have enough associations. The only associations that were implemented were:
1) library has many books
2) reservation belongs to user and book"
1,"As the link for the edit profile is the same, even when you try to access another student's account, it gets directed to the current user's edit page.
The code follows the Ruby on Rails naming conventions. It was easy to track a method flow or get an idea about a variable by looking at the name.
The code was repetitive in the files 'index.html.erb' and 'addremove.html.erb' in /app/views/books . There was no need for addremove.html.erb as it did all the edit functionalities that already existed in index.html.erb ."
1,Only basic testing (through scaffolding was found).
1,"https://stormy-savannah-68522.herokuapp.com/libraries hitting the URL without authentication leads to an error page and not login.
Unable to checkout book from student account after creating one through admin account. (clicking on show from all books page lead to UI crashing)
Clicking on library>show leads to UI crashing."
1,admin can not log in with given account and password
1,Could not test any edge cases as a lot of the functionalities are missing.
1,"1) Librarian and Student only have email and password attributes. There are other attributes required that are missing.
2) There are irrelevant form fields like education level in the edit librarian page.
3) The app does not allow a librarian to choose a library. As a result, they can neither edit their library attributes nor can they add or remove a book from a library.
5) The app does not allow a librarian to see book hold requests for any book.
6) The app does not allow a librarian to handle special collection book requests.
7) The app does not allow a librarian to view checked out books from their library.
8) The app does not allow a librarian to view the borrowing history of books from their library.
9) The app does not allow a librarian to view the list of students with overdue books form their library along with overdue fine.
10) The pre-configured admin credentials mentioned in the readme file are incorrect. So I could not log in as an admin and hence, cannot comment about admin's functionalities.
11) The app allows a student to edit their education level, borrowing limit and university.
12) The app does not allow a student to checkout/return/request a book from any library.
13) The app does not allow a student to search through the books.
14) The app does not allow a student to bookmark books.
15) The app does not allow a student view overdue fines for his account."
1,"1) The DB isn't designed in the right way. I would suggest separate models for each type of user.
2) According to the design, book as a 1-to-n relationship with reservation. 'has_many :reservations' is missing in book.rb."
1,"Many tests in terms of controllers, but nope for models."
1,"Failed to log in as as Admin, it seems that the Admin account was deleted by someone else."
1,"(1) What will happen if the admin tries to delete book that is issued? The code breaks.
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book? It lets it, wrongly so.
(3) Can Admin account be deleted? 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?"
1,"DB: Book history not maintained, as to who issued it when.
Students table has no fine attribute, it’s being calculated on the fly every time."
1,The same university can be create more than once.
1,"Some of the edge cases are working well but in some cases like deleting an issued book crashes the application. I issued a book to a user and try to deleting that book, application was crashed that time and README.md file does not contain much of details about edge cases."
1,"Team has worked on some of the issues after review 1, but still some of the functionalities needed to be worked on. Like librarian when click on view books, it says that not authorized and same for students also. instead we have option to go in university and then library then book and then select the book. if under view all books , we had book that would be really easy for end user to understand. Not all the books belonging to library are been shown for checkout. Book history functionality is not there. Librarian approval by admin before librarian can actually log in is not there. So these small things team should have worked on too, rest of the things are good."
1,"2 students can request for the same special book and the librarian can approve both of them. As a result, the count becomes -1. Otherwise the reservation system looks good.
-Books can be added to libraries with count -1
- Can't view books in students , from the header link - ""You don't have permission to view this page"" - receive this error.-Student can update university attributes, can change the max number of books that can be borrowed.
- If the admin deletes a student with books reserved, the available count becomes negative.
- Students can delete pending reservations - this case is handled"
1,"-""Published"" field for books does not mention the format for date, just mentions that it cannot be blank. Image needs to be uploaded twice, for some reason, in case some of the other fields are also changed. -Admin -> Profile is still leading to users, probably this should lead to the admin's profile. -Creating a new user (by admin as well as by sign up) also still logs admin out and logs into the new user , this was also mentioned in the previous review (although this has now been included in the readme )."
1,"When I try to update a user as an admin, I cannot because of an error dialog.
 
When I click 'Profile' as an admin, it just shows a list of users.
I cannot delete a university as an admin.
I cannot approve a librarian as an admin.
I cannot approve a librarian as an admin and, therefore, am not able to test librarian functionality.
I am unable to use any book functionality as a student."
1,schema.rb has a merge conflict.
1,"Admin cannot borrow books.
Admin cannot bookmark a book.
A new Librarian need to be approved by Admin after signing up."
1,"There's no flow for the book implemented for Student, Librarian and Admin. There's just one functionality i.e. admin can create book and search for it that's all. Considering this situation, i don't think that there are any edge cases to be tested as the major part of functionalities are missing."
1,"A student can modify the number of books allowed based on the education level. Student should not have this access. 
Student is not able to access Books Page, there's only one page related to books i.e. All Books page and this is not accessible
Librarian is not able to access Books Page, there's only one page related to books i.e. All Books page and this is not accessible
There's no page for librarian and admin to view over due books, hold requests, issued books which is like a main flow for the library management system. 
No Librarian account approval flow in the system. Librarian after sign up is able to login to the system. 
No email as there's no checkout functionality"
1,Student was able to submit request for the same book twice. The same book can thus be issued twice to a single student.
0,"I have delete students, books to simulate edge situations. The system does handled it and there is no bug except parts not work."
1,"The UI could be better. Some o the actions are missing like 'requesting a book', checking the list of libraries for student. Instead of showing 'unauthorized' message it might be better to not show button in the first place."
0,The bookmark controller and model is well tested
0,The code is very clean and well written which adheres to the Ruby coding practices
0,"I found the changes to be pushed regularly right from the start of the project. The commit names however turn out to be repetitive and ambiguous in most cases. On the contrary try naming the commit as the feature added, in other words be more specific. Eg. added files x,y,z rather than just saying ""Heroku changes"""
1,"The team has tested the admin model but there are a few suggestions from my side.
-The admin should not be destroyed in the first place and hence no need to test whether admin has been deleted correctly. Rather you can check whether someone is requesting to delete an entry from the table and that entry turns out to be an admin. In that case do not allow for the deletion of the entry. Maybe this vulnerability caused the admin to be deleted and hence I could not test the admin features at all!
-Secondly whenever someone wants to edit or update some profile details in the admin section, make sure that the person requesting for the same is the admin himself and no one else."
1,"-The User Interface is a basic template which is fine however the flow and navigation was not explained in the README file.
-I felt that the elements could have been well organized with the blue links on the left of the page, navigation bar elements pulled to the left and sign out tab to the top right. Also the view books and libraries would have been better if the data was maintained in a tabular form.
-Bookmarks and over dues could be formatted in proper html tables which would make the data much more organized.
-Moreover, instead of having two different signups, you can just have a form field like a drop down mentioning the type of user and add an attribute called 'user_type' in the users database (assuming that you have made two separate databases for librarian and student).
-Also while signing in, you can provide the name of the user in the navigation bar pulled towards the right corner."
1,"-The admin could not login with the details mentioned in the readme file (just check whether the tuple still exists in the database or not) because I don't think there would be any problem whatsoever in the authentication process. Either the tuple value has been changed i.e updated during running one of the test cases for the admin model and controller or it does not exist in the table at all.
- Secondly since I could not login as an admin, I could not test the edit profile part.
- The code looks like it follows ruby on rails coding practices to a good extent only that you could have added comments just to make it much for comprehensible for a reviewer/ new user."
1,"No admin log in hint in the page
 
found in the git hub"
1,The UI is bit confusing as few features appear on top nav bar and few on the list items in home page.
0,"Yes, they are keep working on this."
0,It's easy to use.
0,Their admin model is ding good.
0,the code is clear
0,Yeah. I could see every commit though their whole process.
0,User interface is simple and clearly.
0,I think the code style is very good.
1,Cannot login as a admin as no password given. Github giving 404
0,Seems like an almost continuous effort towards pushing changes throughout the project period.
1,"For all the modules built so far, the interface is easy to understand. However for admin -> profile is leading to users. It should probably be directed to show admin's profile. Readme file is very informative, includes screenshots."
1,I have no access to the github.
1,I have no access to the README file.
1,I cannot see the code on github.
1,I can't see the private repo
1,"No test instruction in readme.md
No test written in test folder."
1,I can't see the code
1,"besides some auto-generated test cases using scaffold command, there are no other test cases present to test the controller.
No test cases has been written for testing models of the application."
1,"Apart from the auto-generated test cases, the author has not added any other tests.Any controller or model has not been tested (Apart from the auto-generated test cases).
The tests (apart from the auto-generated test cases) are not very meaningful and do not have the potential to fail."
1,1) Student can see the information by changing the id in URL [ it should not give access ]
1,"The admin functionalities break while trying to destroy , books and librarian
 controllers are tested for basic functionalities corresponding to the functions in the controller like create save etc.."
1,"I cannot see the README file, so I don't know the email and password for admin"
1,I think the team has came a long way from round 1. But the code still needs some more testing. I couldn't find test cases in the repo.
0,They would just get removed
1,"The function is not implemented, no not many function can be tested.
Libraries can have negative overdue fee and max day.
Book page is not available to be viewed."
1,"admin is not able to see even the list of books. so he can not delete any of the books.
destroy functionality is not working for student and as there is no book checkout functionality, i can not check what will happen if the student is deleted with issued book and requested by another student.
by changing the URL, I can access admin's account even if i am logged in using the students credentials. That should not be done."
1,"(1) What will happen if the admin tries to delete a book that is issued?
Books view is not working (CRUD/checkout/bookmarking not possible)
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
Books view is not working (CRUD/checkout/bookmarking not possible)
(3) Can Admin account be deleted?
No, it cannot.
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
Reservations not accessible
The README.md should also cover how the system handles edge cases.
The README does not cover how the system handles edge cases."
1,Can't access the code repository
1,"Admin details aren't available as the github repository is not accessible. Also, librarian was able to sign up soon after registration which shouldn't happen. As librarians account is supposed to be approved by Admin."
1,"1) Delete student not working 
2) Approve librarian account by admin not done 
3) Librarian can access account without admin approval. [Change this to -> Librarian can access account only after being approved from admin]"
1,"Bookmark functionality is breaking.When the user tries to login with and after view books , in the show page when tried to bookmark the books the system fails.
The edit functionality. in edit profile option, the edit page should display the already existing values in the page and allow users to edit the values.
The function implemented can be modified to include editing through text-fields and populate existing values in these boxes
After destroying a particular student from admin page. the page is redrected to student home page with the student logged in and the functionalities of sstudent are displayed"
1,Cannot test edge cases as many features are not working.
1,"1. Since I was not able issue a book, I couldn't test this functionality
2. Since I was not able issue a book, I couldn't test this functionality
3. Admin account cannot be deleted
4. Since I was not able issue a book, I couldn't test this functionality
5. I have explained other cases in basic functionalities"
1,"A lot of things are fixed, while there are still some items pending to be perfected, admin view book would throw an error, and admin create account are done by redirecting to account self creation. Though there are things that could be done better, I could see major improvements!"
1,"The system has necessary models, controllers, and roles.
Logic are not written.
Students cannot borrow books.
 librarian and student function not implemented internally."
1,"admin can not see the list of all books and also cannot perform any action related to books.
as an admin, the only things that he can do is view, edit libraries, students and librarians.
when click on create student account from admin, it redirects to sign in page. that is not logically correct.
when admin creates new student or librarians account, admin automatically get logged out of his account.
bookmark functionality is not working."
1,"Most of the issues in round 1 have been corrected.
Books view is not working (CRUD/checkout/bookmarking not possible)"
1,"there are functionality like checked out books hold request are not there. I cannot create student or librarian when i click the create link the login page comes up. So am I suppose to like sign up?  Couldn't figure out what to do.
 
Student can edit and destroy books and libraries. Also bookmarks cannot be created. If i create a student through admin using sign up I can access his account, also there two simultaneous account running i.e of student and of admin. You have to implement session to overcome this."
1,"1) Navigating buttons like back button after creating book is not working.
2) Bookmark functionality not working 
3) Student functionality like Book checkout, etc not implemented
4) Search through the books is not provided
5) Librarian functionality not implemented like add book, approval request, edit library attributes, etc"
1,"The problem with sign in has been resolved. The sign up page earlier not working is now working fine. The use of gem correctly .
the view and show functionalities are added.
More functionalities can be added since the reservation system is an integral part of library, the checkin, checkout, hold functions can be added.
 back link in edit profile doesn'tfunction. the link_to function can be provided to redirect the page
The admin page functionalities can be modified for proper functioning.The admin page can be tested thorougly"
1,"The following features do not work:
 
1. The Admin cannot edit their own profile (or get to it via UI for that matter).
2. The admin cannot view the list of students with checked out books
3. The admin cannot view the list of students with late fees
4. Student cannot edit or view their profile
5. Librarian cannot sign up. (so, none of the librarian features can be tested)
6. A cover photo cannot be uploaded for a book.
7. Cannot view list of books. (thus, cannot test checkout, return, etc.)"
1,"The team has come far away from the 1st round. Although I have found few issues:-
1. Anyone with url can access student or librarian information.
2. Anyone can signup as librarians but there is no system of approval from admins
3. When clicked on view books for librarians, the system crashes
4. When admin tries to create student/Librarian, it's basically redirects to student/librarian login page. As per my understanding, admin has authority to directly create them.
5. I am not able to update image wile creating a book.
6. I was able to set -1 as book edition. I am not sure if that should be permitted
7. I couldn't see option of checkout for book. Only bookmark link is available which also crashes after clicking it"
1,"only one relationship code written.
Browse into their model classes, no relationship syntax has been added.
When I tried to destroy a higher level object, the objects depend on it were not destroyed dependently.
ex. Universities should have many libraries. Libraries should have many book. Universities should have many students. Students should have a wishlist."
1,"there is nothing present in the database for the bookmark. since student and bookmark has 1 to  n mapping, there should be another table for that. but it is not present there.
above given thing applies to the checkout also. but there is not present table regarding that in the database schema."
1,The system does not handle 1-n & n-n relationships correctly. Books view is not working (CRUD/checkout/bookmarking not possible) hence checking relations does not work conclusively.
1,"I cannot view books through admin and librarian page but can view them in students.
Also bookmarks are not working.
Checkout and hold request has not been implemented."
1,"Book to library relation is right and is many to one
The bookmarks have to be associated with users and books. One bookmark may have many bookmarks but each bookmark is associated with a student .
The bookmark can be seen as independent model with user and book as foreign key
The librarian has many to one relation with the libraries. This can be added"
0,Yes the system handles relationship between models
0,"Only 33 commits.
The commits are made in the entire period."
0,"by looking the history, i can not say that team has submitted their changes throughout the project regularly. 
most of the commits that i can see is for heroku testing. all other commits were for the basic adding and editing functionalities only."
0,"In general, the team kept on submitting their changes throughout the project and made a lot of commits which is a very good practice.
In round 2, the team constantly committed changes."
0,"Yes, the team regularly push the changes in project."
0,"yes! the team has started to deploy in heroku early and then continued pushing changes,
This has avoided the last minute hassle.
 many functionalities were periodically added.
There are many commits in round 2 . More than the commits in round1"
0,"There was not much work done during the first phase, but they submitted many commits during round 2."
0,"Yes, the team has kept on pushing their changes."
1,"It's much better comparing with the first submission, using before action more often could simplify authentication yet be effective"
1,"Code is clean and readable.
But some commit messages are not readable.
One method only has one function."
1,"all the methods that I can see in the controller are all auto generated using scaffold command. so definitely they are optimal as possible.
As there are no other functionalities implemented, I can not find any complex methods in the implementation.
even there is not any method names check out related to book or student."
0,The code for functionality that is implemented is well written. But can be improved like creating two different function for performing two different logic
0,"the code has maintained the scaffolding design . 
When more functionalities are added it increases clutter of functions
this is when the code quality can be checked"
0,Yes the code is written in clean and readable way. The naming convention is also up-to the mark.
0,I see a reasonable amount of activities on their repo
0,Only 8 commits have been pushed. The homework folder is likely empty. The earliest commit 5 days ago.
0,"here, the credential of the default admin is not specified anywhere so I am not able to log in as the admin to the system.
default credentials of students and librarians are also not given. so I tried to signup but in sign up I got an error of the first name and the last name should not be blank. but there are no entries present in the form to enter those values.
so, I am not able to test this project even a little bit."
1,"Very few commits have been made by all of the teammates combined.
Code has not been consistently pushed to Github throughout the project duration. Only 8 commis in 3 days.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit.
2) Make more frequent commits."
0,"Not much commits in total, and started only 5 days ago."
1,"The UI for home page could not be viewed. Hence  couldn't be tested.The changes were pushed 8 times between Sept 28th to Oct 2nd hence yes the changes were pushed frequently. 
The unimplemented elements int he UI, could be removed to avoid confusions. For example, the search functionality in the book index page could be added after the functionality of search has been implemented
The user functionalities can be enhanced as follows
USER:
the manual migration to home index failed, so the sign up, log out functions could not be tested.
the use of device gem for sign up and authentication and maintenance of user functions can be extended to providing essential functionalities of diffferent user types:
1)Admin:
- create and view accounts of librarian and students.
-view books checked out
-view books overdue
2) librarian
- add , remove books from library
3)Student 
- request a book
-cancel a request"
1,"I actually have to dig into their git hub code for this, seems they at least have the books module, it need more restriction on who could access."
0,Yes. The team keep on submitting changes throughout the project. There are 112 commits and the most recent commits was in round 2.
1,no self tests are written. only auto generated controller tests. Better write tests before implementing code.
1,"-The admin is not able to delete student account.
-The admin is not able to delete books.
-There is no checkout date for student when checking out the book.
-Seems as an undergraduate, the student is able to borrow 3 books which the max is 2."
1,"Not much is developed yet, so no testing has been done.
Testing has not been implemented for any of the models or controllers yet.
Suggestion:
 Implement testing for any one model and one controller."
1,"1. Seems the admin is not able to delete book no matter the book is issued or not.
2. Seems the admin is not able to delete student account no matter the student issued a book or not.
3.No, the admin account can not be deleted.
4. same as part 2."
1,"No, didn't get to test funcitonality of models and controllers. Also no test code in test files."
0,1) Provide detail for pre-configured admin
1,"Generally is clear and easy to understand, but some functions just too long which make them hard to understand, i.e. checkout, return. Even though there are some definitions for the code it still takes some time to understand each part's function, maybe the code is not DRY enough."
1,"The books and library and model is correct as per the functionalities implemented as of now.
The usage of cancan::Ability may allow universal access to admins. But since testing wasn't possible , the effectiveness of the  functionality couldn't be checked. By manually migrating through the url:
BOOK:
The book view needs image field to display a picture of the book.
The edit and add new book feature works well.
The search function needs to be implemented.
 LIBRARIES:
the relation between libraries and books are established well(foreign key).
addition of library and edit library attributes work
 The user functionalities can be enhanced as follows"
0,They do keep submitting on this project. And there have been a lot of changes.
1,"The system does work correctly within those relationships, however, I cannot find out many relationship defined clearly, i.e. book-library"
1,Most function works but cannot delete any students or library through admin. Also cannot see the request number for books which is required. Also the book cannot be deleted through librarian.
0,Their code is written in a clean and readable way.
0,Yes. They still commit changes in round 2.
1,"I have seen their code. In their model, there is no relationship at all, no library-book relationship, no book-bookmark relationship and no student-request relationship."
1,"I do not know what happened, but I couldn't find my first round review for this project now. So I just checked every function in this system again. And I find failing functionality as follow:
1. There is no overdue fine table and any function related to it. 
2. The edit view of student profile has two university column.
3. Book doesn't belong to any library and all relative function is not accomplished.
4. Student couldn't hold request for a book borrowed by others."
0,Login is quite intuitive
1,"I am not able to sign up as students/librarian because it requires first name and last name, but no such blanks provided for signing up. No pre-config admin username and password provided. So I cannot reach the function page."
1,I can find some mappings like book-library mapping. But not all relationships between models are well-defined.
1,Readme is not updated. Admin user details are not given. I am not able to sign up as a student. I am not able to create a new user as the first and last name field is not given in sign up.
1,"The team has completed almost all the functions required and fixed the bugs in round one. However, there remains some trivial problems. As a student , I can't find the books which I created just now as a admin. The create book function of admin doesn't work well as the one of librarians. Besides, I only see the cover uploaded by myself. Other cover of books will not be displayed. The admin can create bookmarks,which seems meaningless."
1,"All issues that I found during my last review have been resolved except for the following:
1. Admins can still not edit any of their profile information.
2. Students cannot view all books in the system. For example, my student account cannot see the books that I added as an admin.
3. Admin cannot see list of students with overdue fees.
4. Librarian cannot view students who have books overdue.
5. Validation is in place, but is incomplete. For example, ISBN can be a single number."
1,"1. If an issued book is deleted, an error occurs.
2. Admin account cannot be deleted"
0,"Coding is done in cleaner way. Flow is appropriate. Readme file consist everything to setup the project.
No bad naming is found."
0,The team developed the project consistently throughout the project period (Round1 and Round2) and committed accordingly on Github.
1,"Student cannot view all the books (More number of books can be seen from the admin login).
Book is getting checked out before the librarian acceptss it. (For special collection books)"
0,"The team regularly submitted changes throughout the project. Yes, the changes were properly committed in round 2."
0,Interface that I can access is intuitive.
1,"It doesn't seem that the team has handled the 1-to-n and n-to-n relationships because these statements have not been mentioned anywhere in the model files. Also, if I delete a user which has books issued, the application throws an error."
1,I am unable to sign up. It showing an error that the first and last name cannot be empty but there is no tab to enter the first and last name. I think you need to add the first name and last name text block in the index file.I unable to to view any functionality because i cannot login into the account. Also please add admin configuration in the readme file and any other specification that needs to be added.
1,"Readme does not exist.

Suggestions:

add a readme file"
1,"The system mostly works as it is supposed to. The system was great in the first round and the team has built on it.
 
Some features that are not working:
 
1. Validation for the radio button to select type in sign up form. I can log in even without selecting my role as a librarian or a student.
2. If a book is in special collection, it still shows up in my issued books and I can return that book. This should not be the ideal scenario."
1,"1) signup form shows email, password and student/librarian...but when submit form it shows name can't be blank. add name field in form"
1,"Back button does not work on multiple pages.
Book checkout can be on the same page where books are shown '
Can ask for all attributes at time of sign up. Adding university,undergrad, library can be a bit confusing after sign up."
1,"The readme.md file could be edited to describe the functionality of the application. The readme.md file could contain a short description about what the application does.And how to use it.
The UI for sign up shows 2 errors. this is because, two input fields , first name and last name are removed. In devise gem, the controller that's being redirected to by the sign up view page needs these attributes.This can be resolved by hiding the fields and giving default values. that way the user can sign up without providing first and last names.
Further readme.md file might be modified to provide credentials of admin and few users to ease testing
2 errors prohibited this user from being saved:

First name can't be blank
Last name can't be blank"
1,"The commit messages are not readable. Better write words stating what you have done in one commit.
README.md has nothing useful. Please give the admin username and password, the project's instruction or instruction to run your code."
0,Nothing has been done in code.
1,"Not much code is written for the features. Not much good ruby and rails coding practices have been implemented, apart from the fact that proper scaffolds have been created.
 
Suggestions:
Add functionality to the system by adding features to it."
0,"Yes, controllers and models did what they should do."
0,1) Follows convention over configuration
1,"Since the admin credentials are unknown, I couldn't login as admin. And since the sign up page cannot create a new user without first and last name, this is the feature in devise gem.
also going through the code I found that the edit is in the home page. and there are separate views called devise and user. Try to add the the functionalities of admin, librarian and student in the devise gem home page. that way we can save 3 more views and rendering would be done automatically by the device gem.
The log out function is in home page. Again I couldn't test since I'm not able to sign up.Id the route is directed to home page after signup, then the logout , function can be seen."
1,Git repository cannnot be accessed. It seem like a private repository at ncsu.github. Couldn't take a look at the code.
1,They followed usual code quality standards of Ruby. But they could have tried adding more business logic into models rather than controllers. There is almost no business logic in models.
1,basic functionality missing to test edge cases
1,only basic tests build with scaffolding are present.
1,"I have found bugs in the most of the models, some pages are not coming up , few pages doesn't have enough information. Routes is not proper, session management has not been done."
1,I cannot even logout so I cannot check corner cases.
1,"I tried putting -1 as an isbn number when creating a book and afterwards I couldn't see any books. Admin cannot be deleted. Students can't checkout, request, or bookmark books."
1,"1. Books cannot be issued. (Books view page not opening from students).
2. Same as above.
3. Handled correctly.
4. Same as 1."
1,"1. A librarian can add to/edit books of any other library.
Could not test any edge case related to issue/hold/return."
1,"The following test cases are failing -
- While adding a book, published date can not exceed today's date. This function fails
- Student is able to edit library details / book details
- Student logout button does not work"
1,Edge cases could not be checked as no basic functionalities are working. The explanation for that provided in the basic functionalities review area.
1,"On the edit page, we can see other student's profiles."
1,They did not write the business logic in the models.
1,Code quality is dry as possible but most functionality is in controller which is opposite of functionality of thin controllrs and fat models.
1,"there are some controllers present which I think is not necessary: Confirmations_controller, passwords_controller, registrations_controller, sessions_controller, unlocks_controller. all of these are present for admin, student, and librarians. I can not find out the logical purpose behind them.
there is one different model for the special_book. I think that is not necessary since we can get the same thing by just adding one boolean attribute in the books model."
1,They'd better add come comments in their code to make it more readable.
1,I cannot see the image of the book and I cannot upload the image of the book while creating the book.
1,"They haven't write Rspec test.
They have tested the LibrarianController. However, they haven't tested the librarian model."
1,"Testing was not done using rails specifications for testing. 
I can not find any test cases other than autogenerated using scaffold command."
1,they have tested controller but no model.
1,"Tests are not written for controllers or models. But they have used the scaffolds to create models and generate default test files. That is appreciatable. Given some more time they had, they might have written tests in those files."
1,"(1) What will happen if the admin tries to delete book that is issued?: page went wrong.
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?: page went wrong
(3) Can Admin account be deleted? No
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted? Student can not be deleted.
(5) The book number can be negative."
1,"admin is not able to delete the book in this system. it shows error.
There is no way to change the university of the student in admin or librarian.
if the admin tries to delete the book that is issued to some students, system stops working. it shows error.
Admin account can not be deleted from the system.
Admin is not able to delete student accounts."
1,applications break if we delete book which is checked out.Cannot delete student.
1,Could not test some edge cases due to missing functionalities. The cases that could be tested are handled well.
1,"Few of the edge cases pass and few do not.For example,There is no option for the admin to delete an existing student so ca't really see what happens.But,Admin can only be edited not deleted."
1,"Admin is unable to delete the student.
Admin is able to delete a book that has been issued.
The admin account cannot be deleted but can be edited."
1,"Throws error when I try to delete a book which is issued. Ii was not able to find a button to delete students. Also, approving librarian from admin needs to enter/reset librarian's password. It should not be like that."
1,"the README file doesn't contain the edge case information.
If delete a book checked out by a student, the website will raise an exception."
1,Book is not deleted in case is it checkout or on hold. But should be handled with proper error message. Student Delete option is not available for admin.
1,"when I tried to edit the librarian it worked when I submitted it and it redirected me to the show page. but when I clicked on the back button to get back to the home page of librarian it did not work.
Librarian's account created successfully and it asked for the admin's permission first. So, I logged in using the admin's account and tried to authorize the librarian. So when I clicked on the edit button it redirected me to page where I can edit the fields. The only thing I wanted to do was to approve the librarian but it asked for the password too. Being an admin how am I supposed to know the password of the librarian. the only way I can proceed further was by changing the password.
in the first submission, there was a problem where the librarian gets to approve itself. they handled this issue in the second submission."
1,We cannot delete students.Otherwise hey have handled all functionality well.
1,"Yes, the system does the tasks as they are supposed to be done. I was not able to find a way to test the Overdue books and student fines. Also, the extra credit task 1 seems to be implemented partially. When I tried to add a new book from the student account, it didn't allow me. But when I tried to edit the profile of one student from another student, I was able to do it."
1,"Yes system is working as it is supposed to, issue reported in previous round are fixed. But delete is not implement for student account."
1,"1) university should have a 1-to-n relationship with libraries, librarians and students.
2) student should have an n-to-1 relationship with university.
3) library should have a 1-to-n relationship with librarians and an n-to-1 relationship with university.
4) librarian should have an n-to-1 relationship with library and university."
1,"Though there are couple of relationships included,MAny relationships are missing.For example,Librarian has to belong to a library,which is not mentioned"
1,They did not implement the 1-to-n and n-to-n relationship and I cannot see any of them in each model.
1,Yeah i am able to view all the books using admin account but no validation in code that shows has_many relationship is added.
1,"I can see very few commits after the first submission or description of the commits are not self-describing.
As I can see, there are some commits present after the submission deadline. Most of them are in readme file but and some of them are about some core functionalities."
1,"Yes,the team has been pushing commits in the second round as well,also the team has continued pushing code snippets after the due date"
1,"Yes the team has committed changes on Github even in round 2. But I still feel that commits have not been used properly. For e.g. some commits have large number of line changes. (I saw about 17k line changes in one commit). Also, they have not used any branches in their git repo. Using different branches for different features might have been more helpful to get the commits done on regular basis."
1,"Yes they did regularly pushed the commits. 
but the description of the commit is not understandable."
1,"I cannot see the commits and code pushes, I think there is a problem with your GitHub please check."
1,"It would have been a better approach if branching had been used to develop different functionalities. Such as new barnches for admin, student, librarian etc. Every small change should have been committed rather than commiting big chunks of code."
1,"yes, they have thoroughly tested most of the controller
no, they have not tested the models."
1,"Yeah, they have a good test on admin functions. but there are still some bug as i said before."
1,They did not do the testing
1,Test cases are not written. Testing is not done for any model.
1,"Most of the features are not working. Most of the work is done on admin part but still missing major some features like adding books, deleting users. Student also has most of the features but whole testing can't be done as librarian is not working and no books are added. Admin can't add books."
1,"whatever present in UI as of now is good and easy to use.
but there are some issues with the redirection. some of them are not working correctly."
1,its alright but back button and logout button are too close so by mistake you might logout instead of going back.
1,"The whole program is perfect, but I think the interface is one of few short coming. At the homepage, user must choose admin/student/librarian, which I think they should login at same place and tell by database. 
 
There are some bug I meet:
1.login as admin -- view book -- when attack back at bottom it jump to page not suppose to.
                            view librarian -- edit -- function didn't work"
1,"There are three separate logins according to the roles,but admin is given a sign up option in the UI"
1,The user interface is easy to understand.There is no description provided in the README which makes it hard.
1,"UI is pretty simple and straight forward. Easy to use. One suggestion is you should have a Sign-Up button on your home page. I guessed the url 'students/sign_up' and luckily that worked. Later on, I noticed that there was a sign up option on the login page."
1,Ui is intuitive but admin info not given in readme. Sign up option provided for admin.
1,"yes, they have considered the rails coding principals in implementation.
try to add more business logic to model than a controller."
1,models are thin and controllers are fat kind of opposite what was suggested by prof
1,"Admin cannot see the book list so i am not able to implement some edge cases. Admin account can not be deleted. The README.md file show indicates some useful information about the edge cases.
Since a student cannot view book information. I cannot test related functionalities."
1,"The team did all controllers tests, but they didn't write tests for models."
1,"The system are not able to pass or test most of the questions. However, for the third question, the team did consider the condition that admin is not able to delete itself."
1,"The project is able to perform some functions well, but there are some problem in the system. For example, the librarians list are not able to show and the back bottom will lead to a problematic page."
1,Cannot view repository.
1,Github link broken
1,I am not able to open the Code in Git Hub. Hence couldn't check the commits
1,I am not able to open the Code in Git Hub. Is the repository made private?
1,"From what I can tell, there is nothing more than the skeleton implemented. So, to that end, the code is fine."
1,Github link not opening
1,I was not able to login tried signing up as a student as well as a librarian.
1,"The github link is not opening, so I can't figure out the email id and password of Admin. I tried signing up as a student but not able to create one because of the education level field. Tried signing up as librarian but the view seems broken as I am redirected to a page which displays a list of librarians which on which I can perform CRUD operations. Back functionality is broken, No link for home page."
1,No github link not opening
1,The interface is simple and easy to understand. Redirection of links to respective pages can be improvised.
1,"Not able to login as admin.
Git repo is not accessible hence it is difficult to determine if good coding practices have been followed."
1,No git repo provided and neither the student nor the librarian can log in to the app
1,It seems the git repo is not public to everyone so we can't access to the read
1,Cannot open Git link.
1,"Since the code repository is private, I cannot comment"
1,"Since the code repository is private, I cannot view the testing environment"
1,"The interface of the working pages are intuitive and it is easy to use. Also, the redirect URL's are intuitive. However, since a couple of links were not operational like redirecting to the book search page or clicking the back button, implementing these functionalities is needed."
1,Since the repository was private code review could not be performed.
1,"The same answer as above, I cannot see the commit history of the repo, I can only give an average point, quite helpless..."
1,"I cannot see the repo, so I don't know whether there is any test or not. So I can only give an average point."
1,"The repo is private, so I cannot see the README, and I cannot get the preconfigured admin email and address.
I tried to sign up as a student, but whatever kind of education level I choose, I cannot sign up successfully. I can only sign up as a librarian and that could success. But I cannot do any further functions rather change librarian's profile and destroy a librarian."
1,Cannot access the code to github
1,Github link not working
1,It's working much more than the first round. Although at times it is difficult to use. On some pages I couldn't navigate to a log out link and I had to . As a student I couldn't check out a book but I could create a book.
1,"Authors fixed most of the changes. Still, there are some pages not loading, such as (View Books from students), (Students CRUD from admin), (View overdue books and fines from admin) etc."
1,"The basic functionalities which were not working are as follows:
1. I could not Edit any of the libraries, not even the ones which were newly created. So it is not a dependency issue. 
2. I could not even delete the library. It gave me a 'not admin' popup (when I was signed as an admin). I triple checked from different browsers.
3. Librarian Show/Edit not working. Website crashes.
4. Admin cannot Create New Librarian/New Student. Throwing an error of field missing. The reason behind this I think is that the new librarian page in admin redirects to the scaffold generated new and not the devise generated sign up page for librarians/students. The devise generate page works just fine. These links should have been directed to that page.
5. Student Show/Edit links are not at all working.
6. Admin cannot logout.
7. Student cannot only edit email password (again, devise edit form).
8. Student View Books is not working (hence cannot test issue, hold, return).
9. Book search by date is not working (website crashes) for librarian and admin.
10. View Overdue link for librarian fails.
11. Cannot check whether the checked out link, student fine link, or hold request link are working since student can't even view books.
12. No logout option for the librarian.
Also one minor thing: In the admin page, the name of the libraries or universities in the ""view libraries"" and ""view librarians"" respectively, are not visible. The object internal ID is being displayed I think."
1,"admin email can be changed.
cannot view list of books. 
list of libraries shows"
1,"The system works fine as expected.
The author did not follow the following feedback / suggestions -
- Logout and homepage Redirection links should be provided on each page  (It is very hard to redirect to the home page in their project as we have to click on browser's back button for multiple times)
 
The following issues are found in the presented project - 
- The university name does not appear in the show list of libraries page
- The library name does not appear in the show list of libraries page
- Show librarian details does not work in the admin module
- Show student details does not work in the admin module
- Add student function in admin module does not have an educational level and university field
- No option for admin to authorize the librarian
- No option for student to add books/ bookmark books"
1,"To be honest, i don't remember what was missing in the first review. So i've tested the whole application from the beginning.
Student cannot see the books page, it displays an error. Checkout/Bookmark/Hold Request functionalities cannot be tested at all. 
Student cannot edit the name of his profile. S/he can only update email and password. 
Library name is not appropriate, some object is being displayed. 
Logout for student is not working. 
Librarian Sign up - UI says password should be 6 character long and error says it should be minium of 8 chars. 
Overdue and Student fine page is throwing error
If a student cannot checkout book, it's not possible to test  hold request and checked out page for librarian
Librarian cannot edit the name for his profile. Only email and password is visible. 
Librarian is able to login after sign up, it should go through the admin approval then only librarian should be able to log in to the system. 
No logout button or functionality for Librarian
Admin -
View library - University name is not visible, instead some object appears. 
As there's no logout button, i have session for both librarian and admin in the system and when i click on new library from admin , it routes me back to librarian home page. 
Unable to see image on the books page
Book history cannot be tested as student cannot checkout the book because of errors or missing functionalities.
Admin cannot update the details of the student, as the edit page ask for the password of the student
Admin cannot update the details of the librarian, as the edit page is throwing error for librarian"
1,"Most of the basic functionalities have not been implemented by this team.
Following are some of the functionalities which are not working:

Student


A student can sign-up but cannot login.
View books page cannot be accessed, it throws the following error: ""We are sorry, something went wrong"".
no checkout, bookmark, hold request functionality can be tested because of (2)
Your activity displays list of books checked out by student but cannot be validated because of (2)
Student can access librarian page.


Librarian


Cannot check most of the functionalities because Student cannot checkout/bookmark/hold books.
New book cannot be created because of validation of publish, it says published cannot be blank even if it is not.
Librarians cannot log-out.
Library Hash shown instead of Library Name. e.g # instead of Hunt


Admin


Book cannot be created because of the same reason as in Student(2)
Librarians cannot be created
No back button on different pages making the UI difficult to navigate
Other functionalities of admin not implemented."
1,"Admin, Student and librarian login / signup were added. Book and library adding functionality was added but they are just to show it doesnot work properly and connected. I cannot checkout a book and many other functionalities don't work."
1,"No ""log out""  button on the user page which is not convenient.
Student account cannot view books.
Not able to search books by title, author, publication date and category
Students' profiles cannot be edited by admin as it comes up ""You need to sign in or sign up before continuing""  but I already did."
1,"Library -book relationship is 1 - N, but N-N relationship cannot be tested because some pages are not working."
0,"Yes, the relationships have been implemented really well. For example; a librarian has one university and library, a library belongs to a university and has many books and so on."
1,Student can view 5 libraries. but books page itself is not accessible to check more relationships
1,I can see tables for all the models but no relationship details in schema.rb file
1,The problem is all the relationships were not liad out by the team. Also the functinalities don't work properly so the 1 to n and n to n functionalities dont work
0,"Yes,  it looks like the relationship has been done properly."
1,The commits are not consistent. The team didn't commit changes after submission.
1,The team has commit history from October 6. I can see 66 commits but no substantial code has been pushed between 2 commits. Most of the changes are done in the Readme file. I recommend the team to implement at least one functionality or solve one bug for every commit.
1,By going back from a librarian home page and then clicking on log in I was able to log in as admin without typing in a password.
0,"Used scaffolding and devise gem mainly.
Code is adhered to MVC framework"
1,"not good function names search, search1, search2, etc. in book model"
1,"There are only one branch(default master) and three commits...
And there is only one contributor."
1,"1. There are only three commits in total. That is two commits other than initial commit.
2. Not much of coding is done in total, resulting fewer commits."
1,The student (1 contributor only) has made only 3 commits up till now in which he has pushed his project in only one of those commits. The other two commits are the initial commit and the updating of the readme file.
1,Changes pushed only to deploy application on Heroku.
0,I don't think so
1,"I can see commits from past few days, but the number of commits is low."
1,The team has not used Git extensively throughout their project duration. There are only 3 commits in the repository which defeats the purpose of using version controlling.
0,no.
1,"The only model implemented is ""Books"" which does not have all attributes specified in the documentation like ""upload images.""  Hence no model is thoroughly tested as such. But I appreciate the fact that they have taken into consideration not creating books with the same ISBN."
1,"Please create different models, prioritize and complete the project. Best of Luck!"
1,There is just one generic user who can just add and delete books.
0,The Books module is created end to end with testing as well.
1,There is not too much description.
1,"The user interface doesn't consist of much things. There is only view page for books and login signup page.
1. You can see all the books and CRUD them before even logging in.
2. The login process is not divided for students, librarians and admins.
3. Only one type of login is there."
1,"The interface has not been developed yet much. The URL gets you to the ""view books"" section directly without even asking to log in. It can be made much better by the 2nd evaluation round I'm sure. For example by first bringing up the log in page and then the Homepage/Books page."
1,Index Page is books list. No other functionalities implemented.
1,The website is simple but has major bugs. The README.md file doesnot have any instructions.
1,All the information about books is displayed on the homepage without user log-in. The README file doesn't include admin account information so i could not find admin login credentials. I am unable to test any of the features of admin. Also the sign-up page did not specify user type. So the details of the librarian could not be checked as well.
1,"No functionalities added as of now except for Book CRUD. README.md is poorly maintained, should include screenshots of how the app structure flows."
1,"I can only log in as default (it seems like the default is librarian).
 
There is no function for admin or student. after I log in, there are only two things I can do which including create a new book(show, edit and destroy) and log out. So the default probably is librarian."
1,"1. Major part of code is generated using scaffold.
2. Sign in, sign up and logout handled well using sessions and using a different controller along with different view.
3. There are no validation checks in models."
1,"The project consists of the Book CRUD and the login functionality. The Book CRUD seems to have been generated by the scaffold command and hence complies with good Ruby coding practices. The login functionality is simple, but works. I would recommend using an authentication solution using ""devise"" as it will be full-proof. But the overall code is neatly indented and cleanly written."
1,No admin configured and no edit henceforth.
1,"Pros: Can see some amazing validations for fields
Cons: Can see puts statements in code."
1,"Yes, majority of features were tested but more testing is required. Corner cases are yet to be taken care of."
1,"All controllers are present but are missing few functionalities like for admin librarians views and editing is not present. Librarian cannot see checkout books,"
1,"The user interface is easy to understand and use. When you try to grab some information about books, libraries or users, you can easily sort them by different attributes, which is convenient.
But there is something needs to be improved. For example, every time I click ""show/edit"" from a booklist or student list, and back to the list, the ""show .. entries ""  in the top and ""previous .. next"" in the bottom repeated again and again on the page."
0,"Generally, the code on Git is clear and very well organized. It follows the standards."
0,"Yes, they wrote book & bookmarks controller."
0,The team did one model and one controller test perfectly.
1,Couldn't find test cases
0,"Yes, the team has tested at least one model and controller."
0,"Yes, they have written meaningful tests for the model and controller chosen."
0,"Even though RSpec is not used, the testing is very thorough."
0,Yes. the test part is done.
0,Yes the team has tested the bookmark controller and the user model throughly
1,"(1) Only the book was deleted because they don't have relationship.
(2) The same as first one.
(3) The admin can not be deleted."
1,Right now they are just removed without prompting for warning and the dependencies are.. partially removed. I can still see my hold request while cannot see the book any more.
1,"Library ""day limit"" and ""Fine"" attributes can be negative
 
Student can update university with any name in which case the he/she is not able to issue book
 
Sudent should not be able to view borrowing history of that book w.r.t. other students
 
Student can checkout same book multiple times
 
""Show Checked out Books"" not working for admin
 
Hold Request Logic not in place: When a student returns a book, another student with a hold request on that book should be assigned the same.
 
Admin should be able to accept deny hold requests as well
 
Hold request approval resulting in error page (student gurman1702@gmail.com, ISBN 2)"
1,Delete cases not handled.
1,"1) When the admin deletes a book that is already issued, the book is deleted but when the student who has issued this book tires to view the list of checked out books, they get a page you were looking for doesn't exist error.
2) When a student is deleted who had books issued, the person is deleted but the entry still persists.
3) Admin account cannot be deleted.
4) When an admin tries to delete a student who has multiple pending book requests, the reservations are not delete.
5) When a student tries to bookmark a book, an entry is created in the bookmarked books list. But when a student tries to re-bookmark the book, a message should be displayed that this book has already been bookmarked, rather a redundant entry is made again in the table.
6) As a student, there was a book whose count was 0, so the student placed a book request for this book. As an admin, I changed the book's count to 5. Then ideally, all the students in the queue for the book should be issued this book, but nothing happens, the book request still exists unless and until the student manually deletes it."
1,"I cannot test many edge cases as the checked out books page cannot be accessed. Also, there is a cancel account option for the admin, so the admin account can be deleted."
1,"ISBN validation not enforced.
Able to create book without a library.
View book details page doesnt work."
1,The README file doesn't show the edge cases' descriptions. The borrow book part and the hold request part still have bugs so I cannot test the edge cases.
1,"1,2,4) Books cannot be issued or reserved so the features could not be tested
3) Yes. 
5) Librarian is able to assign himself/herself to a library before even getting approved by the admin"
1,"The basic functionalities are working fine.
Some validation are not correct. For example, Fine and day limit of a library can be negative.
The book information validation is not correct. I can type random string when creating a book.
Show checked out books is not working. The app crashed when click that button 
The count attribute of book can be negative."
1,"Approving a hold request on a special book gives error message, though it still does the job but this screen should not be in the normal flow

We're sorry, but something went wrong.

If you are the application owner check the logs for more information"
1,"Show books is failing for student. Since flow requires show to be working to checkout/return book, can't test that functionality."
1,"1) As an Admin, when I click on ""Show Checked Out Books"", I get a page does not exist error. I tried refreshing the page as well, but did not work.
2) Admin is not able to view the overdue fines. In README it is written that overdue fines are displayed in Show Checked Out Books, but since this functionality is not working I am not able to see the overdue fines as an admin.
3) I couldn't really understand why an admin needs to create a book and then a librarian can add it to their library. Why can't you give this functionality directly to the librarian?
4) Just like the admin, the librarian is also not able to view the list of checked out books or the overdue fine.
5) As a student, when I checked out a book, an entry is created in the List of checked out books, but I already have a fine? A fine should be rendered if the book is not returned after a certain interval of time. 
6) As a student, after I edit one of my hold requests, the back button redirects me to a page that shows me all the hold requests by all the users, here I can edit all these requests. This view should not be visible to the student. 
7) As a librarian, when I approve a book hold request for a special collection book, I get a something went wrong error, but the request gets approved in the student's view. The problem here is the number of times I keep clicking on the Approve button on librarian's hold request view, those many times the same book gets issued for the same student.
8) Student is able to edit library attributes, view list of students, delete students, view list of librarians, delete librarians
9) Only JPEG and PNG images were allowed to be uploaded, but I was able to upload TIFF images also. (This is insignificant)"
1,Some of the pages like view all checked out books doesnt work : https://library-management-oodd.herokuapp.com/transactions
1,"1) A student unable to borrow books (as there is no borrow or reserve button only for bookmark)
2) Day limit and fine can also be created as negative (which is wrong)
3) ""Show checked out books"" under admin, not working
4) UI for show libraries is behaving strangely as ""showing 1 of 2 entries"" and ""search bar"" multiplies the number of times as we press back
5) picture for the book is not getting displayed"
1,I can't find any 1-to-n or n-to-n relationships in any models.
1,No Associations found on any of the models in the project in guthub
1,"If, we delete a library then corresponding librarians and books do not get deleted"
1,"No, no such relationships have been specifically defined. I wasn't able to look for any 1-to-n relationships between library and book."
1,"I could add books not belonging to any library, which indicates there is no mapping between libraries and books. Same for student and university."
0,Yes the library book relationship is working correctly
0,"Yes, they keep on submitting changes. However, most commits come from amanend."
0,"yes, they've been constantly updating"
0,"From the commits history in GitHub, I can see the team keep upgrading the code during the round 2 period."
0,"Yes, the team periodically kept pushing changes."
0,Lots of changes done for round 2
0,"Yes, they did commit changes in round 2 though most of them were in a small amount of time."
0,Regular commits were made.
0,"Yes, there have been a lot of commits performed and the team has committed throughout. And also they have commited and corrected a few mistakes in round 2 which were there in round 1."
0,I can easily understand the code and what the code trying to make.
0,"Yes, code is written in a good and concise way."
1,"1) Methods could have been modularized into separate methods that handle just one task. The method checkout could have been divided into sub-methods.
2) I did not find any bad naming in the code.
3) Some major methods were quite lengthy such as the checkout and placeHold. The method checkout has many nested if else blocks."
0,Yes. the code is readable.
1,"admin login not working
 
/Libraries page gives ""Showing 1 to 2 of 2 entries"" message and ""show # of entries"" dropdown twice
 
edit student profile not working if i want to change stuff other than password, always asks to enter new password
 
https://library-management-oodd.herokuapp.com/books/3 failing, but showing on books page"
1,"admin login not working
user password invalid message recieved"
1,"Admin details provided on github repo are incorrect. cannot validate any admin features
Admin not able to create student/librarian. Edit is possible."
0,The project has made good use of Git and have also followed Ruby and Rails practices.
0,Student Model tested by the team. Cases like unique emails are prevented using validations and validations are tested in test files.
1,They have tested using the internally generated test filed using the scaffold command. I can see a few changes modifications made in that file as per their data. But they have not used RSpec as mentioned in the document.
0,"In models, student has been tested.
In controllers, student controller has been tested."
1,No rspec found in the project.
1,Github not available to check the testing
1,1) when change url from https://ncsu-library-management.herokuapp.com/students/97/edit to https://ncsu-library-management.herokuapp.com/students/96/edit...it should show some notice about access restriciton
1,"1. Admin can not view basic list of books. It is not the best implementation method,but does the job.
2. Admin is able to delete a student who has checked out books. Incorrect Implementation.
3. Admin account can not be deleted. Correct Implementation.
4. Admin is able to delete a student who has multiple book requests. Incorrect Implementation."
1,"Create a new library function fails -
If I create a new library, then as per the project code it is mandatory to assign a librarian from already existing librarians. But when I assign a librarian which is already assigned to some other library then, the system fails.
 
 
If a librarian A is assigned to library L and if I assign librarian B to L then next time if I try to assign A to L, I am not able to.
 
1) What will happen if the admin tries to delete book that is issued? 
The edge case fails, as admin deletes the issued book it is vanishes from the student's checked out books and  from list of books."
0,Yes all cases are handled.
0,"Edge cases mentioned in the question have not been handled
Unable to delete admin, as expected."
0,"Yes, Admin and Librarian functionalities were not working in the first round, they have been rectified in the second round."
0,"All functionalities respond as what is expected.
Just one suggestion that the functionality of admin assign librarian to some library is quite confusing. Instead many librarians can be associated with one library"
0,"All basic functionalities are very very good.
UI is not asked but everything is simple but yet very intuitive. All the basic functionalities are working seamlessly. Genuinely liked operating this website.
Also, validations like no 2 students can have the same e-mail address are taken care of."
1,"The system works as per the requirements of the project. Great work!
However, the suggestion of validations on password field has not been set. Also, the feedback on redirection links has not been implemented.
 
Also, there are few functionalities which fails as follows -
 
- Number of hold requests for a book should be visible to every user
- Cover book image is not visible
- At a given time, N number of books can be assigned to a student based on educational level. However, in the project presented, the admin is able to change book limit for individual student which is not acceptable."
0,Yes almost all are fixed.
1,"A number of bugs mentioned in the previous review have been fixed.
The following features are still buggy:
1. admin isn't able to checkout books which should be allowed as admin can do everything a student can.
2. admin isn't able to bookmark books
3. Librarian isn't associated with a library. No field on librarian sign up. 
4. Librarian unable to view any libraries as he/she is not associated with any library
5. Librarian unable to approve any requests as he/she is not associated with any library
6. Admin is allowed to edit email, unexpected."
0,System works perfectly fine
1,"Yes for most of case it works except below:
PG::ForeignKeyViolation: ERROR: update or delete on table ""students"" violates foreign key constraint ""fk_rails_4bcc9ba3a9"" on table ""holds"" DETAIL: Key (id)=(97) is still referenced from table ""holds""
Above error result when try to delete student and his entry is in hold table. So try to delete data from all the table where the student is associated"
0,"Yes, many belongs_to and has_many associations have been specified amongst the different models like library, book, and so on."
0,Model relationships have been accurately implemented. Dependent destroy has been in appropriate relationships.
0,Designed perfectly.
0,Relationships handled correctly
0,There are commits dated to October 12 and October 14 on GitHub.
0,They pushed regularly and worked on review 1
0,"Yes, they have performed many commits even in the 2nd round."
0,"Yes, commits have been done throughout the project timeline. Changes were committed in round 2 as well.
However, some commits have been made after project deadline."
0,Github not accessible
0,I cannot see the repo to confirm or deny this.
0,"Cannot see the GitHub link, but considering the amount of work done, it would've been almost impossible synchronizing without pushing and pulling projects on time on GitHub."
0,"The GitHub link was not added to the project. Hence, I am not able to review or comment on the Git commits."
0,UI is good.  Flow is understandable.
0,The github link is broken and hence could not verify.
0,Hard to know since the github link is not working.
0,Cannot access github project link
1,I can not able to perform the librarian's functionalities as Admin is not able to log in. So the librarian is not verified.
1,"- Email - shalin@librarian.com  
   - Password - librarian  
I am not able to login as admin so cannot approve new librarian. And cannot login with above details provided.
So unable to check functionality"
0,"Yes. Especially the Student model and the Librarian model has been thoroughly tested. I couldn't access the Admin model so have not marked those functionalities as completed in this review form. But the admin's functionalities are almost the same as the librarian's and the students' so I do think that those would have been completed too, at least roughly. Unluckily, someone must have changed the password."
0,The Student module is throughly tested as it was hard to find bugs in it.
1,"I am unable to process any of the above rubriks.
Reason being :
1) Admin access not provided.
2) Cannot approve librarian request.
3) Cannot see the behavior of admin and librarian and therefore cannot test the functionality."
0,"The model for users works really well and as expected. Similarly, model for books is also flawless."
0,Student model is working perfectly with book requests. that must have been tested thoroughly
0,Well tested and implemented
0,1) All the form labels are well defined and the flow of action is also understandable.
0,"It seems to be pretty straight forward with self explanatory links. The admin portal does not work, and the use of multiple user logins seems excessive."
0,The interface is very simple but very intuitive. Good basic UI components have been added to structure the data properly. Overall the UI is very decent.
0,The README.md file is written very well and thus it was easy for me to navigate throught the website smoothly.
0,No readme file available.
0,The UI is basic but the names of functionalities has been well articulated.
0,Nice and easy UI. ReadMe file is good.
0,Well described on Readme
1,Not able to log in as someone has changed the admin password or username.
1,"1) Github link is broken. So i am not able to review it 
2) Moreover, by   - Email - pranav@admin.com  - Password - admin   i am not able to loging so not able to check functionality of admin
3) From what I see, based on student functionality, it works well"
0,The github link in the readme give a 404 error.
1,"I cannot access the GitHub link posted by them in the Readme file. The repository may be private, so can't comment on the coding practices."
1,"The GitHub link was not added to the project. Hence, I am not able to review or comment on the Git code."
1,No admin information provided. Cannot login as an admin.
1,Since admin is not able to Login basic functionality is missing. but code structures are followed and few tweaks here and there will make the code functional
1,Cannot access the github link from readme
1,They did not write code to test.
1,"(1) It brokes. Student cannot login.
(2).The other student is still waiting.
(3) No, it can not.
(4) No, the reservations are still exist."
1,"There are some problems.
For example, as an admin, I can not edit and destroy library.
Also, as I mentioned before, I can still see the data string when I click 'Book'.
At last, it still doesn't have some  link to go back to the index page."
1,"No, it does not. I can't see any ""has_many"" in their model."
1,"It's readable but not so clean. For example, in student_controller.rb, def history_request is too long. You can do so much better."
1,"1. I failed to log in as admin using the email and password given on github page.
2. not able to test.
3. as 1 mentioned.
4. as 1 mentioned."
1,Didn't see the proper relationship between library-book or between some other models.
1,"1. The code is readable but there are some functions missing. One method only handle one task.
2. The naming are clear and easy to figure out."
1,"NO, a student with an issued book can still be deleted."
1,"NO, there is no relationship between book, library, student and admin. I can not see any has_many or belongs_to relationship in modules."
0,Yes they did
1,"1) Admin should be able to edit the user and librarian profile.
2) Was not able to create books when uploading images.
3) Hold request approval is not working.
4) The librarian should only able to edit books in his library.
5) The student was not able to bookmark the books."
0,"Yeah, they did commit changes throughout the project and even in round 2."
1,1) The code doesn't appear to be DRY. And the naming of methods should be better. (Camecase etc)
1,"1. This case is not handled as book can be deleted even if it was issued
2. I was able to delete student if the student has already issued a book
3. No admin account cannot be deleted
4. I was able to delete student who has multiple pending book request
5. I didn't get email for book issued"
1,"The system worked pretty good. Although I found some issues:-
1. Librarian or student could edit their email in edit profile. 
2. When I tried creating book from admin, it crashed. It happens only when image is attached
3. I was able to create book with count as -1
4. Student was able to checkout same book multiple times even though book is already been checkout by him/her
5. I was able to edit other student profile just by changing user id in profile. Eg: https://digitallibrary517.herokuapp.com/students/22/edit"
1,I cannot see relationships between models in the code.
0,"Yes, the team kept on submitting the changes"
0,Yes the code is written properly
1,"(1) What will happen if the admin tries to delete a book that is issued?
It gets deleted from the all books table (which is incomplete) but not from the checked out books table.
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The other students on the waiting list do no get the book. (nothing happens)
(3) Can Admin account be deleted?
No, it cannot.
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
No reservations are not deleted
The README.md should also cover how the system handles edge cases.
The README does not cover how the system handles edge cases."
1,"Most of the issues in round 1 have been corrected.
Admin does not have the option to delete a library.
Books are global and not library-specific.
Admin cannot view all books."
1,The system does not handle 1-n & n-n relationships correctly. There are no library-specific books. All books are the same over all the libraries
0,"In general, the team kept on submitting their changes throughout the project and made a lot of commits which is a very good practice.
In round 2, the team constantly committed changes (over 30 commits)."
1,"1) Admin should not be allowed to delete a book that is checked out.
2) Admin should not be allowed to delete students who had books issued that other people are waiting for."
1,"1) When a new student is added by the admin, it takes the user to the student login screen. This is not only unnecessary but it also makes the user think they have logged out as the admin, which is not true (going a page back takes the user to the admin's homepage).
2) Admin should be allowed to modify librarian and student accounts without knowing their passwords.
3) Librarian should be allowed to add/delete books to their library.
4) Librarian should be allowed to edit book information.
5) Librarian is unable to approve a book hold request."
1,"Admin account cannot be deleted
If admin deletes a user who has books checked out, user gets destroyed. This should not be possible, considering that the user will have to return the book."
1,"Most of the features work well. Navigation is very simple and quick. All available functionalities are easily accessible.
Some functionalities are not working as expected.
 
STUDENT
A student can checkout same book multiple times
LIBRARIAN
Not able to see edit/destroy options for all books
Not able to approve hold requests
ADMIN
Admin cannot edit student profiles
Admin cannot edit librarian profiles
Admin cannot edit libraries"
1,"No mapping tables present. No referencing done by foreign key on all other book transaction tables with book table.
However, the db schema is such that the relationships can be handled by query."
0,"Yes, continuous deployment was done. Changes were made after round 1"
0,Book checkout seem to be perfect.
1,"Edge cases are not handled, i could delete the student who has the checked out books. 
Admin account cannot be deleted
Student can access all information by changing the url's and have all the admin rights. This is a big authorization flaw.
There's no way to reset the password if a user has forgotton"
1,"Admin: There's no option to approve or decline the hold request
Librarian: No Add or Remove functionality of book, destroy for book is there but i think librarian should be allowed to destroy book from system, s/he can just remove it from the library
Student: There's no page to check the bookmark books, also bookmark functionality is not working, 
Books: Image is not being displayed"
0,There are decent number of commits throughout the project duration
1,"Authentication has not been done properly. There's no session maintained. It's just based on redirections. 
Most of the functionalities are written in user controllers where there should have been be different models, controllers for different modules."
0,"There are lot of commits, looks like work was started on time."
0,User interface is easy to use. Styling is being done.
0,Test cases are present
0,The UI is very intuitive and easy to navigate. all links have been connected well which gives a seamless effect.
1,"All 3 contributors have committed frequently throughout the duration developed the project in.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit."
1,"Testing has not been implemented for any of the models or controllers yet.
 
Suggestion:
 Implement testing for any one model and one controller."
1,"The UI is fairly easy to use & intuitive for easy navigation through the web app. Suggestions:
1. Add a back button on all pages to make navigation even better.
2. Some screenshots can be added to the readme to make it better."
1,"Good ruby coding practices have been followed.
 
Suggestions:
Better relations among classes (models) can be set up, such as:  library has many books
So if the library is deleted all is books are also deleted."
1,"The codebase doesn't appear DRY. Instead of creating separate controllers for different users, gems could have been used to enforce restrictions."
1,"when login as admin, there is still the links to login as students and librarian, I thingk you can remove that."
0,The UI is clear and easy to use.
1,I tried several times and failed to log in as admin using the username and password on github.
1,Yes we can test one model and one controller
1,"(1) The book couldn't be deleted
(2) The books are not automatically issued to the requested student
(3) Yes, it can be deleted
(4) Yes, the student can be deleted"
1,"Yes, the problems found in the first round have been fixed. The admin account can still be deleted though"
1,"Yes, there were plenty of commits with changes for round 2(predominantly bug fixes)"
0,only basic tests provided by scaffold are present
1,most of the code is easy to understand. only few methods are long
1,"Search is Case sensitive
 
Student can issue multiple instances of same book
 
Student can access and change other sudent's data using the url: https://still-taiga-41852.herokuapp.com/admin/students/2/edit
 
Student able to create multiple hold requests on same book"
0,"Yes, continuous commits were made, even after the deadline:)"
1,Unable to login with admin email/passoword provided in README.md.
1,Last Commit was 4 hrs ago as on 14th Oct'19.
1,"Yes, except for the edge cases, the team has done a great job to test their models and controllers. All validations have been placed correctly."
1,"1) What will happen if the admin tries to delete a book that is issued?

 The book was deleted even when it was issued, I think this operation should not have been possible if a book was already checked out.

(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?

This case is not handled by the system.

 (3) Can Admin account be deleted?

No, the admin cannot be deleted.

(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?

The student is deleted without the book count being updated! This should be raised as an notice and the student should not be deleted."
1,"I find this system to be excellently coded and well though to separate access rights of different users. I conducted all basic testing scenarios and it works well with all of them. Email functionality has been added successfully. Validations have been thoroughly tested.
The only problem I found was that when creating a book cover photo was uploaded but it wasn't visible(I would not say that the functionality is broken as it may size or other constraints)
Apart from this, it fails for edge cases but works reasonably well for basic functionalities."
1,"Yes, they do handle these relationships well. In schema.rb I can see foreign key relationships between tables."
1,"The team has regularly committed to the GitHub. and have a whopping 156 commits. The Readme file is been well written. They have done a great job to keep the repo updated but I would like to suggest to them that please commit after completing one functionality, many of the commits I see have only 5-6 lines of addition."
1,"Every functionality is developed as a controller, e.g: borrow_history_controller, hold_request_controller, overdue_controller.
All these controllers should have been written as methods in the books controller."
1,"(1) What will happen if the admin tries to delete book that is issued? Book is deleted
2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book? No, book entry will be deleted, even the count is not updated
(3) Can Admin account be deleted? No
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted? Yes"
1,The first submission did not have any functionalities implemented regarding librarian but now this submission consists of the librarian functionalities. So Kudos for the update!!
0,"Only tests from scaffold are visible in the code.
No tests for model, even from scaffold"
1,"Yes, there are a lot of commits during the 2nd round time frame. However, some commits were made after the deadline as well (commits were made on 14th october as well.)"
0,Yes librarian is tested thoroughly.
1,Yes the authors fixed the problems that were there. Now the website is working properly.
1,"When admin delete a book that is issues the books get deleted from the students list too. But it is already checked out so there should be a return request then the book should be deleted.
When student is deleted the book that he has issued gets deleted too but the count of the book is not increased.  
Admin account cannot be deleted.
Yes the reservations are deleted too if the student with hold request is deleted."
1,When I checkout a book with availability one it gets a hold request 1 though it should have a hold request of 0 as the book was available. Also when I return the book I have to return it twice. I think the count is not working properly because 0 and 1 are overlapping.
1,"Yes, frequent commits from all team members."
1,"Code is easy to understand if read, but not enough comments"
1,"The same book can be added multiple times in his/her wish list.
Admin cannot see the list of students.
Student is able to sign up without selecting education level.
It would be a good idea to show students all the books and then keep a filter to see only those books that are in stock."
1,"Yes the team has been committing at almost regular intervals. They have also created some branches. But I feel rather than creating separate branches for views,yzhu48 etc, they should have created branches for different features implemented. (Like they have created branch named 'email'.) Similarly, they could have created different branches for admin functionalities, student functionalities, login etc."
1,No test cases have been written. Testing is not started. All the test files are empty.
1,"Sidebar Link1, Link2 and Link3 gave errors every time. Overall, UI is very clean and Easy to use. Book stock tab is somewhat confusing."
1,Some of the file names were not as standard conventions that ruby follows. It was difficult to locate the code of some functionalities. For e.g. most of the admin controller functions are in a file admin/registrations_controller.rb
1,"Admin Model seems to have most functionalities except for adding librarian, student, stc."
1,Admin Operations are on the top of the tab after admin sign in. Found it a little difficult to figure that out. I would suggest adding user operations links on the centre page.
1,"The UI is pretty intuitive but the links on side bar are broken
And sign in option is shown even when logged in."
0,Unable to login as admin as admin credentials not provided
1,"The team has tried to do testing of one model i.e. student model. But they have not tested it thoroughly. They have written just 2 test cases which I feel insufficient. Also, they have not tested any controller. Testing student model with student controller would have been a better choice. It is good that team has used the RSpec testing framework for the tests."
1,"Admin login is not working. So, can't check a lot of things especially the corner cases. I found that the librarian is able to sign up and no authorization is required from the admin's side for the approval of the librarian. This was against the specifications."
1,"The team used github very nicely. They used frequent commits even during round 2. But as I said in round 1 review, it would have been more helpful to them if the team had created multiple branches for multiple features. For e.g. they could have created different branches for bookmarks, hold_requests, email notifications etc. Also, some of the commit messages could have been more descriptive. ""Final debug"" this type of commit messages are bad choice. Messages should explain what does the change in the commit actually does. They should have mentioned which problem they were debugging."
1,"I couldn't test a lot of functionalities as I was unable to sign in using admin account. The email id and passowrd provided in the readme file didn't work for me. Showed ""Invalid Email or Password"" error. I signed up as a student and checked out a book. Then I signed up as a librarian for the same library but I was not able to see that that book has been checked out. ""View checked out list"" showed an empty page."
0,"Database has been managed very efficiently using belongs_to and has_many in various models. Hold requests, students, books, bookmarks, libraries, librarian are nicely related to the entities which they should be related to. 1-to-n and n-to-n relationships have been nicely taken care of."
1,"The team has followed almost all coding guidelines. Methods are written are specific to the task that they should be performing. Good/standard naming conventions are followed. Also, ruby-istic way of programming has been used for the application. Oveall, the code is huma-readable. Though I found the controllers to be very empty. I counldn't find the code for many of the functionalities."
1,"Model has not been tested
Controller has not been tested thoroughly"
1,"The following functionalities fails :
- The librarian should be only able to see the books assigned to his library
- For the student signup, the education level is not a mandatory field thus, without filling up that field if the user signs up and issues book then issue book fails.
 
 (2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The book gets deleted from everywhere without any consideration
 
What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted
It is getting deleted from everywhere"
1,"- The librarian authorization by admin has not been provided
- The book special request approval does not work
- The max book borrow limit of a student must be dependent on the educational level
- View hold request does not work in admin module"
0,Yes the team has tested one model and controller.
1,"1) A warning message is shown. But the student can still be deleted
2) Other students cannot borrow the book even if the student is deleted.
3) No
4) A warning message is shown but the student can still be deleted."
0,The basic functionalities are working good.
0,"Yes, the system does handle relationships well."
0,Yes the team did keep pushing their changes throughout the project.
0,The coding style is good.
0,Many test code about controllers.
1,An interface that the Admin account can be deleted is given and the Admin account can be deleted.
1,"After signing up, the newly-created user cannot automatically log in."
0,The team has written appropriate test cases for models and controllers.
0,The application properly handles the above-mentioned edge cases. Could not check some edge cases due to the limitations mentioned in the previous answer.
1,"We can perform any function from any user if we that the URL for that particular page.
View checkout list and hold requests list not working from the librarian account.
No field for educational level fro students"
0,The DB design of the system is pretty good. Satisfies all the entity relationships that I could think of.
0,"Yes, the commit history of this team is pretty good."
1,Overall the code quality is pretty good but there are some methods that are too long and could be modularized.
0,"The team has tested most controllers but the tests for the model are all commented but based on the experiments I have done, it does look like the models have also been tested."
1,"1) When admin deletes a book that is issued, the book is released from the student and does not appear in the student's checkout page. 
2) When a student who had issued a book is deleted, the book is not issued to other students waiting for the same book.
3) Admin account cannot be deleted.
4) If Admin tries to delete a student who has multiple pending book requests, the reservations are also deleted.
5) One edge case I found was that as an admin, I had updated the count of a book to 0. When a student tries to check this book out, s(he) is not able to because of count 0 and then a book hold request is placed. But then I as an admin updated the count of the book back to 1, but the student on the wait list for the book was not automatically reallocated the book. Any other student could easily check this book out even though there is a student already on the hold list for this book."
1,"Some functionalities that weren't working in Round 1 have been fixed but some are still missing which are listed below:
1) In the project requirements, it is written that a librarian account needs to be approved by the admin before librarians can access all the functionalities, but in this system, no such functionality has been implemented. The librarian can just signup and login to use all the features.
2) Librarian cannot edit their name. (Insignificant)
3) As a student, I had borrowed a book, this booked showed up in the Admin's checked out books list, but does not show in Librarian's view. 
4) As a student, I wanted to checkout a Special Collection book, so I got a message saying ""Please get it approved by a librarian"", but no such request was visible in the librarian's view even though the book, student and the librarians are from the library.
5) As a student, I am only able to view list of my checked out books when I check out a book, otherwise there is no link on the homepage that displays a list of my checked out books.
6) A student is not able to delete a pending book borrow request since it is not being displayed.
7) As a student, I was able to add/edit a book by simply changing the URL.
8) As a student, I was able to access librarian and admin pages and was able to access all their functionalities.
9) As a student, I had placed a hold request for a book whose count was 0, but when an another student returned that book and the count was 1, the student who had placed a hold request for the book in the queue did not automatically get the book."
0,"Yes, the system has established relationships between different models."
0,"Yes, the team did keep submitting the changes throughout the project. They also kept pushing changes during round 2."
0,"The code is well written:
1) Methods handle only one task.
2) Good variable naming convention has been followed.
3) I did not find any long methods or bad coding practices that may have been followed."
0,Yes team has tested admin controller thoroughly.
1,"As an admin i was able to delete a checkout book. 
I was able to delete a student who has checkout books. System showed a warning about the delete operation and the count of the book which student borrowed was not updated. So technically a book is lost if student with checkout book is deleted. 
Hold request was deleted when student was deleted."
1,"Yes the basic functionalities the were causing problem are fixed. 
I face one issue where admin or librarian cannot see hold request for special books even thought it shows that student has created a  hold request."
0,Yes i can see in code they have added proper validations for library-books 1-to-many relationship.
0,Yes team submitted their changes throughout the project and also during round 2 of review. Also few commits on 12th and 10th.
0,Code is of readable quality.
0,"In addition to the test code generated by the scaffold command, the team has created RSpec for the Student model and tested a couple of scenarios."
1,"2. Deleting a student who has checked out books, does not issue the book to the next student in the hold queue"
1,"1. The published date can be entered as text, no validation for ISBN. This is not yet fixed.
2. I could not find any way to approve librarians in the admin console. Librarians can perform tasks without being approved.
3. Librarian cannot change library once selected during profile creation.
4. Deleting a library does not delete the associated librarian.
5. Password is not being validated using regex."
1,There does not seem to be 1-to-n association between library and librarians as deleting a library did not delete the associated librarian.
0,"Yes, the team kept submitting changes throughout the project. They also pushed changes in round 2."
0,All the application logic is present in the controller.
1,"The committs have been made regulary on github. But it would have been better if the team had created multiple branches for multiple features. This would have made easier for them to track the progress of features. For e.g. they could have created different branches for admin functionalties, student functionalitie, book hold requests.checkout etc. Also, some of the commit messages could have been more descriptve. ""one version before submission"" this type of commit messages are bad choice. Messages should explain what does the change in the commit actually does."
1,No tests have been written. Models are yet to be tested.
0,Nice work is done on UI. It is easily navigable. Just some of the colors (like gray color in buttons background) need to be changed to make the content easily visible.
1,"Yes the team has followed some standard practices of ruby on rails. But some things I found to be new such as the admins_controller.rb was not there and instead of that there were multiple files in the controllers/admins folder. I think that is due to some gem used for authentication. Also, I feel that some more validations could have been added in the models."
0,The README.md file is very well written and is descriptive enough to understand the smooth functioning of the website
0,good user interface
1,"Cannot log in using admin username:111111@111.com
                               and password: 111111"
0,The user interface is clear and concise. Not difficult to understand where to take the next step.
1,"I failed to log in as an admin using the admin account given in Github. But an entry to signing up as a new admin works. I was able to to take actions like editing the admin's profile. But, it is better that the admin account is already preconfigured according to requirements of the project."
0,"After the initial commit of 20days age, most of the commits were from last week."
1,test cases missing in models
1,"The UI is a bit dark and not much user-friendly. Everything seems greyed out but you get used to it after a while. Instead of providing separate buttons for logging different roles and dropdowns could have been more convenient. Could not see an option for request list, bookmark list. Missed field education_level while signing up as a student."
1,I was not able to log in as an admin via the username password provided on Github.
0,The team has made good use of Github for the project.
0,The UI is intuitive and easy to use. The README is also descriptive.
0,The project has been following good Git and Ruby on Rails practices.
1,"I appreciate the efforts this team put on CSS. Although, some of the UI features are not very intuitive, 5 star for the efforts. Good job"
1,Git hub repo is not public so couldn't check it.
1,Interface is intuitive but github link is now working maybe because the repo is not made public.
1,"Admin cannot see any librarians or create any new, delete or edit librarian."
0,"Yes, the team regularly pushed code to the github throughout the duration of the project."
1,It does not seem like testing has been done thoroughly for any model or controller. The test folder seems to have files with the auto generated test code.
0,"UI is a little tricky to use, finding links can be a little challenging. However, the same is described briefly in the README file.
README also contains mostly the project problem statement."
1,"No option to edit admin name. However, can edit admin email.
Good Ruby and Rails practises haven't been followed as all the application logic has been written in the controllers."
1,The GitHub account doesn't contain much code and is mostly blank
1,It is. But some method like student_check_out and checkout(student) is kind of too long.
1,Not modular. Model does not have any business logic while the controller has loads of it.
1,"No readme was created for this. There was no instructions and no admin credentials were provided. Also, couldn't signup as the footer of the page hid the button for it."
1,Admin credentials are not provided so nothing can be tested
1,"-The models can be organised more appropriately , inclusion of relations can be done only when it's necessary.
For example, the author model is redundant if we can update books model to include author as it's attribute.
-Further,the librarian model:



class Librarian < ApplicationRecord


 
has_one :email


 
has_one :name


 
has_one :password


 
has_one :library


 
end



these email, name, password and library can be added as fields to the model.
 
- the main relation between the library and the books. (eg: many books can be assigned to one library), should be included  along with the foreign key attribute.
-the relation between librarian and library should also be established."
1,The team did not implement testing for the model as the test files on the model path are autogenerated.
1,"the book was just deleted;
admin can not be deleted;
admin cannot view book requests or checked-out books, I tried to delete a student who has pending book requests, but i cannot figure out the status of the reservation. It is a little confusing.
the README.md did not cover the information about how their system handles edge cases"
1,"Generally, the system works good. The UI is clean and easy navigated. Basic functionalities were implemented. The book cover is not available on the booklist."
0,Yes all relationships are done as expected.
0,Yes the team has been pushing the code before and after their first submission.
1,"The team did place the ""sign in with Facebook"" button on the homepage, but the URL was blocked because it is not whitelisted in the Client OAuth Settings. 
Code is readable, no long methods appear."
0,README is written very well. All functionalities are explained well.
1,"ADMIN
View holds/pending requests not working
STUDENT
Student cannot see overdue fines.
LIBRARIAN
Librarian is not able to see any records in hold requests."
1,No mapping table present. But referencing is such that the relationship can be handled by queries.
0,"Continuous deployment made.
Changes have been committed after round 1"
1,"Many edge cases are handled.For example,if the admin deletes the issued book,it is not visible in Books requested page.The admin's account cannot be delete.But,if the student gets deleted and there are other students in the waitlist,this case is not properly handled"
1,"The team has tried implementing the basic functionalities that hadn't worked last round. But still,the view page for hold/pending approval requests throws an error.The admin has no option provided to add a new librarian."
1,"Though the team has tried to include few relationships,they have missed handling the relationships at a lot other instances like in book,they have not mentioned ""belongs_to:library"" and many such"
0,The code written is readable and modularised
0,Yes the team has tested one model and one controller
1,"1) The student gets deleted even if he/she has issued a book.
2) If a student who has issued a book is deleted then then other students cannot order the same book he has issued.
3) No, the admin cannot be deleted.
4) The student is deleted even if he has multiple pending books."
0,"Yes, team did keep on pushing changes throughout the project."
0,"RSpec test exist for the students_controller. It check whether a user can request a book or not. 
The model test for the user validates fields."
1,"Fines are only allowed as integers. Not ideal for currency.
The University field in the Student new page is a text field. It should have been a list with data retreived directly from the Libraries table.
Books don't have image cover.
Student can checkout books from different Universities."
1,"Only User and Hold Request model have relationships set properly. Library doesn't have relationship with books. This missing mapping will lead to unintended behavior when, for examply, a Libray is deleted."
1,"(1) Methods maily manage one task only. However there are lots of commented lines in the controllers.
(2) A controller named 'paged_2' doesn't seem to be meaningful.
(3) Nothing besides a lot of commented lines."
0,The team has done a great job at testing the student model and the student controller using RSpec specification.
0,"Most of the edge cases seem to have been well handled, didn't come across any anomalies."
1,"1. Viewing hold/pending requests on the admin page leads to error.
2. Everything else seems to be working as expected."
0,The team seems to have handled most of the relationship properly as I could not come across any errors as far as the mapping between models is concerned.
0,"Yes, the team was continuously pushing changes to Github."
1,"No business logic is present in any of the models, and a couple of controllers seem to have a lot of business logic."
0,The team have tested at least one model and controller.
1,"1) When admin deletes a book that is issued, a cascade delete option removes it from checked-out books as well as the student's list as well.
2) Since the reservations are also deleted, the next person in the list will be allotted the book.
3) Admin account cannot be deleted.
4) When an admin deleted a student who has multiple pending book requests, the reservations are also deleted.
5) One edge case I found was: As a librarian, I had added a special collection book, but then changed its special collection status to No, but the student was not directly able to checkout that book, the student still had to request for a book that is no longer a special collection book.
The README.md does not provide much information about the work flow or how it would handle the edge cases."
1,"Most problems found in the first round have been fixed. However, the following functionalities are still failing:
1) Admin not able to create Librarian accounts. 
2) Admin cannot view 'View Hold/Pending Approval Requests' page. I got a page not found error.
3) Admin cannot view the list of students who have checked out books from a library and their detailed information. If you have implemented such a functionality, I wasn't able to find it easily.
4) Admin cannot view the list of students with books overdue (along with overdue fines) and their detailed information. If you have implemented such a functionality, I wasn't able to find it easily.
5) As a librarian, I had added a special collection book, but then changed its special collection status to No, but the student was not directly able to checkout that book, the student still had to request for a book that is no longer a special collection book.
6) As a student, I had requested for a book that is not a special collection book, but this request did not show up in the librarian's view, hence I couldn't approve the request and subsequently the student could not checkout the book. Special Collection books do show up in the librarian's view.
7) As a student, I was able to add a new book by simply changing the URL. 
8) Unable to login via Facebook, I get the error ""URL Blocked: This redirect failed because the redirect URI is not whitelisted in the app’s Client OAuth Settings.""
9) Only JPEG and PNG images allowed but TIFF also being stored. (Insignificant)"
0,"Yes, the team continuously kept submitting their changes, especially during round 2. Majority commits have been done during round 2 which could be a sign that they have taken the reviews of round 1 seriously and kept working to implement the feedback received in round 1."
1,"- As the website stopped functioning on deleting a student, who checked-out a book, the edge cases don't seem to be handled"
1,"- Able to create new student and checkout a book
- On deleting the student as admin, the entire system crashed, unable to open home page or any page
 - Unable to perform any action after deleting the student"
1,"- Yes the system handles relationships properly. There are mapping tables for many to many relationships
-There are few extra tables which introduce redundancy, eg. the user's table along with Students, Librarian, Admin tables"
1,"- Most of the code follows good ruby practices with methods performing single action
- Few controllers like book_request.rb has few cluttered methods. Most of the actions written in the controller methods can be moved to the individual models and directly called over controller as controllers must only handle functions linked to views
- Methods are named appropriately"
1,"Student's checkout, request, return flow is broken, could not really test 1,2,4.
Readme has no mention of edge cases."
1,"Team did a great job by including all features in the app, but few functions are missing like creating new librarian as an admin; I was able to create one student and librarian with same credentials, but during login, I was logged in as librarian by default"
0,"Yes, the team has been committing their changes throughout the project"
1,"Code is not at all modular. All the business logic has been dragged down to controller and not present in models. Naming is done in good manner. 
found book search login in books#index method.Code quality can definitely be improved."
0,Yes. It looks like all the changes were consistently committed by the team.
1,The UI for the homepage is clean and easy to understand. But the dashboard for a user is a bit confusing. Should better organize for all the user operation.
1,"Yes, the coding standards are followed and well organized.
The information about admin account is not provided, so i am unable to test any related details of admin. Also the basic functionalities for the admin could not be checked as well."
0,UI is very simple and easy to understand. Navigation is seamless
0,Code is well structured
0,The team has been pushing their changes regularly.
1,"Admin credentials no provided in the READme,hence can't check for the admin functionalities"
0,Readme describes the project well and
0,"Yes, the github commits are pretty good"
0,The team has tested atleast one model and controller.
1,Could not find admin username and password
1,"There is no code to review the test cases.
Missing validations suggest that code has not yet been tested thoroghly."
1,Cannot see repository to review commit history.
1,"Admin cannot edit his profile. Readme file does not explain how to do it.
Git link shows 404 error: https://github.com/maharshi-gg/LMS/tree/structuredLMS"
1,"The Github link provided is private, so cannot comment if the changes were being pushed regularly."
1,"The Github link provided is private, so cannot comment if the controllers and/or models have been tested thoroughly."
1,"No admin credentials provided, so cannot test admin features.
The provided Github link is private and thus cannot comment if the code follows good Ruby on Rails practises or not."
1,Github repository is private. There is no way for me to check this.
1,UI is not very descriptive but not very confusing either. Easy to use. README.md is poorly written.
1,The admin cannot edit his/her details. Github account is private. Unable to follow if good Ruby and Rails coding practices were followed or not.
1,- Github repo is private
1,"The interface is somewhat intuitive, navigation might get difficult for someone with no idea of project description"
0,Commits have been done evenly throughout the project period.
1,I could not find one.
0,"Features that are functional, do have intuitive UI and have proper navigation."
0,Clean code. Followed good ruby and rails practices.
1,I don't see any tests for the models.
1,- I couldn't find any test cases in the model folders. Controller test cases present which are generated by scaffolding.
1,proper validation not done for Book fields. eg. published column takes text entry.
0,Basic cases for librarian controller and models have been included.
0,The team has done a good job at testing the library model. They have also done some testing for the corresponding controller.
1,Only the basic testing provided by scaffolding is present.
1,"They use Rspec for test which is recommended. But they only test one model and one controller, and even so, in these tests, they didn't thoroughly test."
1,The team has not tested any one model and controller.
1,"Removing something with dependencies would throw an error, this need to be handled correctly"
0,The app handles the edge cases pretty well.
1,- The majority of the features handled. Could have handled exceptions like if a book ID doesn't exist show a default page instead of giving the error page.
1,Login Page not accepting account mentioned in github page.
1,Admin not able to delete books/student with dependency. Shows error page instead of proper handling of edge case.
1,"Application breaks on destroy students as well, even after sign up and approval of admin, I am not able to login into the librarian account"
1,"1. Trying to delete a book that is issued leads to error
2. Trying to delete a student who has issued a book leads to error
3. Trying to delete a student who has pending requests leads to error"
1,upon returning a book available count becomes negative in many cases.
1,"(1)Approve the hold request and add the book to the checked out list of the requested student




Student A creates a hold request for an unavailable book and isn't at max borrowing limit.
Student B returns this book, however Student A doesn't get this returning book.
(2) The number of books available in a library can be negative.
We can create a book with negative available number.
(3) The max borrowing limit and overdue fines of a library can be negative.
We can create a library with negative max borrowing limit and overdue fines.
(4) System will crash if we destroy a book which has been checked out.
If a book has been borrowed, and Admin/Librarian wants to destroy it, the system will crash rather than give some kind of notice that this book cannot be destroyed now.
(5) System will crash if we destroy a book which has been bookmarked by someone.
If a book has been bookmarked by Student A, then we login as a Librarian and destroy that book. Finally when we login as Student A and click ""view my bookmarks"", the system will crash.
(6) System will crash if we destroy a student who has borrowed a book or bookmarked a book.
 If a student borrowed or bookmarked a book, then we login as Admin and try to destroy the student. We will find that system will crash."
1,"Gives an error when admin deletes a student and the book still shows as issued to the student.
Admin account cannot be deleted."
1,"Major improvement! though the UI is a little confusing but the functionalities are reachable, though authentication lacks some enforcements, I could type in url to create or edit things that I shouldn't have right to"
0,It's completely working now.
1,"1. Admin is unable to update their profile. The app wants me to enter an email address in the name field.
 
2. Admin should not be able to edit a librarian's or a student's password. Also, there should not be a 'bookmarks' field in the librarian form.
 
3. There is no password validation in place for any user. This is not a good practice.
 
4. I was able to create a library with negative borrowing limit and overdue fine. You MUST validate those fields.
 
5. You must also validate the published, edition and available fields for a book. They must be positive integers.
 
6. Missing functionality: Admin should be able to view the borrowing history of each book.
 
7. On the librarian's edit profile page, there is a misleading note that says 'leave it blank if you don't want to change it', referring to the password field. The profile does not update if the password field is left blank.
 
8. While the librarian is able to edit their library's attributes, the functionality isn't implemented in the right way. A librarian has no business with other libraries and their attributes. They should have a link on their home page that takes them to their library's edit page.
 
9. It doesn't exactly make sense to be able to edit the university a library belongs to.
 
10. Missing functionality: Librarian should be able to view the borrowing history of the books from their library.
 
11. On the student's edit profile page, there is a misleading note that says 'leave it blank if you don't want to change it', referring to the password field. The profile does not update if the password field is left blank.
 
12. Book search has an autocomplete feature which is commendable.
 
13. The bookmark feature isn't that intuitive. I would suggest you to just say 'bookmark this book' instead of 'add to wish list'.
 
14. Missing functionality: Student should receive an email when any of their book requests is successful.
 
15. Missing functionality: Admin should be able to delete Students and Books from the system."
0,- Massive improvements. A completely different application altogether. UI looks better and the flow of the application is also fixed now.
1,"Book count is going negative, application breaks on many operations such as destroy etc."
1,"1. The overdue fines for students are not show
2. No regex validation for password
3. Overdue fine and borrow limit can set to negative for libraries
4. Password when creating librarian is a normal text field (password can be seen when typing)
5. Bookmarks field present when creating a librarian, no explanation provided
6. Admin can edit librarian/student password
7. Deleting a library with an associated librarian leads to error
8. Very few validations in place when creating a book"
1,"The book doesn't have an image.
 Admin cannot borrow books.
Admin can only see book_id of books which student bookmarked. 
Can see a list of overdue student, but cannot see how much the overdue fines are.
Student cannot borrow one book twice at the same time, even if there're more than two available.
Student cannot see their overdue fines.
If student is at max borrowing limit, he/she cannot create a hold request for another book.
Student cannot see their hold_request list.
Student cannot receive email when a book is successfully checkout."
0,"In the initial submission, the app could only perform CRUD operations on Universities. The number of functionalities added are very impressive in such a short period of time."
1,A book can belong to a student and a librarian
1,1. book should have a 1-to-n relationship with book_history.2. book_history should have an n-to-1 relationship with library too.3. librarian should have an n-to-1 relationship with university.4. library should have a 1-to-n relationship with librarian and book_history.5. student should have a 1-to-n relationship with book_history.6. university should have a 1-to-n relationship with librarian too.
1,"yes, mapping is done on the book table itself. Could have used references"
1,"Not able to login into admin account. Because of that, I can't login into librarian account. The student functionality works fine"
0,"Yes, 1 to n is taken care of."
1,"The team seems to have used proper mappings between the relationships from the code point of view. However, something seems to be missing as the edge cases are not being handled properly."
1,"They have a model named ""Program"", which has a relationship to Student and maybe not much useful."
0,"The models book, student, librarian, library, university, book_history, hold_book_tracker all had the required belongs_to, has_many and has_many through: relationships."
0,- yes there were continuous commits throughout the project timelines
0,"Yes, the team kept committing changes throughout the project."
0,many features added for round 2. UI Implemented nicely.
0,"- Good management of authenticated pages and I cannot access pages I am not supposed to.
- Well written code. Good use of before_action in controllers."
0,"Methods are not too nested and methods names are intuitive. UI presentation looks very neat, hence it is easy to navigate."
1,"The code seems to be very well written for the most part. However, there is some scope for improvement in the sense that there is some additional logic in controllers that can be moved to the appropriate models."
1,"Most of the class methods like: self.createNewCheckoutEntry?, self.updateAvailableCounter? 
have a question mark in the end but they are not boolean return methods, in which case ? is generally used."
0,Team has been consistent in committing changes once they have begun working on the project.
0,The team pushed code to Github on a regular basis.
0,"Yes, they keep on submitting commits, even during round 2."
1,"(1)The indentation of their code is 8 other than 2 !!!!
 (2) There are two different style for naming a method.
In models, student.rb has a method named self.remove_from_wish_list?
however, book_hold_tracker.rb has a method named self.handleSpecialCollectionRequest?
The traditional way for naming a method in ruby is the previous one. The latter one is the way Java used."
1,Too many nested blocks used in multiple places.
0,The team constantly made commits in the period between the round 1 review and the final submission. All the 3 team members were active in committing.
1,"Auto check out for hold requests missed a few edge cases, like when a student checks out something beyond his maximum issuance capacity, it should go to hold request and get checked out automatically."
1,"Works pretty much well.
Admin is to be a super user though, he can't approve hold requests on behalf of the librarian.
 
University field is free text, no mapping to existing universities."
1,"Yes, though some commits are made post the deadline."
1,"Extra credit feature 1 is implemented nicely, careful routing of links.
Extra credit feature 2 not implemented."
1,"except some auto generated test cases using scaffold command, team did not wrote any other test cases for testing controllers.
 
Model has not been tested at all in this system."
1,"when admin tries to delete the book that is checked out by the student, the application crashes and shows error page.
when admin tries to delete student that has checked out some book, it wont allow admin to delete the book. it asks for the book to be returned first.
there is no way to delete the admin account.
when admin tries to delete student that has pending requests, the application crashes and shows the error page."
1,"in last submission, there were problem that when user creates student account, that student was getting logged in. team solved the issue in this submission.
but the problem still remains same for the librarians. when admin creates librarian's account, he gets redirected to home page."
0,"designed database for the system takes into account all entity relations very well.
there are mapping tables present for books & hold request mapping, student & bookmarks, Student & checked out books."
1,"yes, this team regularly committed their work the repository and it is clear form the commit history.
commits descriptions are self-explanatory and we can say what has been done from the commit message very easily.
though, there was one commit after the submission deadline."
0,"code quality of this implementation is quite impressive. There are not any methods present that is too long to understand.
All methods are devoted to some specific tasks and the names are also descriptive and does not create any ambiguity."
0,The tests have been written correctly for admin and student controllers.
1,"- As an admin, I tried deleting both the requested as well as unrequested books but rails just threw an exception saying that something went wrong, implying that the delete operation hasn't been handled correctly.
- If student has checked out a book, the admin cannot delete the particular student unless and until the book has been returned. The case is handled correctly. However, when tried after returning the book, the reservation of the student was still persisting in the database"
1,"- There seems to be a glitch in book hold requests. The request gets sent correctly to the student however, the when the librarian tries to accept the request it says 'Max number of books limit reached!!!' which occurred even though I signed up as a new student and requested for the first book ever! I also thought at one place this is just a message displayed on the screen however, the transaction does not get reflected even in the 'books borrowing history' of the student.
- The student when signing up, is directly logged into the system without logging in. However, as per the requirement, there should have been an authentication happening just after signing up."
1,"-The relationship between librarian and library should be many to 1 however, I found an entry in the librarian table with library field as NIL which should not be allowed in the first case which makes the entry invalid.
- Rest of the mappings appear to look fine."
1,"The changes were pushed on git throughout the project period, with most of the work completed during the first review as indicated by the commit dates. Secondly, the commit labels are vaguely given which would make it difficult to keep track in the future."
1,"- While reviewing the code on git, I found that some methods like accept_hold_requests and create histories were too lengthy with nested if else statements."
1,there is a bug if delete a book with one checked out.
0,Yes. they have done it perfectly.
1,"Can not find any RSpec file.
Can not find 'test' in the commits made as well."
1,"1. Count is implemented, so admin can not view the checkout books in all books section. Perfect implementation.
2. Admin can not delete a student with checked out books. Perfect Implementation.
3. Admin can not be deleted.Perfect Implementation.
4. The system throws an error. Incorrect Implementation."
0,"There is one commit on GitHub dated to October 13, 2019."
1,Log In using LinkedIn/Google/Facebook not implemented.
1,yes the team has tested most of the functionalities in the controller and model but few are still remaining.
1,"Most of the edge cases have been dealt with. A book is not allowed to be deleted if it checked out already.
Librarian is allowed to function before admin's approval"
1,"Major functionalities have been carefully dealt with, however, some of the functionalities are breaking:
1. A student is allowed to edit other students' profile by simply changing the id in url."
0,"Yes, a library is allowed to have multiple books. The relationships have been maintained well."
0,Yes the team did kept on committing their work during the round 1 and round 2.
1,"Google Login gave error - translation missing: en.devise.failure.librarian.not_approved
 
Also the authorization were not dealt properly - A student is allowed to edit other students' profile by simply changing the id in url."
1,I only could find automatically generates test file and there is no iterduction in README.
1,"(1)Admin couldn’t delete checked out book.
(2)I couldn’t test this function because it’s book can only be requested or checked out.
(3)No.
(4)Yes. The reservations will be deleted
(5)I tried to delete a library as a admin to see what will happen to those books and I failed.
The README.md covered how the system handles edge cases."
1,"Luckly, I still remember what I wrote in peer review for this system in round 1. They almost finished all function in round 1 and I only gave them two suggestion about their README and their tiny, hard-to find button of ""back"", ""home"" and ""logout"". Apparently, they ignored my suggession. Their README is still not detailed. Their ""back"" button still want to hide itself. And I find failing functionality as follow:
1. I created a book with a not-jpg/png file as image and it succeeded. 
2. Something went wrong when Admin tried to delete a library.
3. When a book was checked out, it’s count didn’t decrease, which turns out that one book can be borrowed by  different person."
1,"I have seen their code.And their library-book relationship is correct. But they forgot to add ""has many"" in model ""student"" and ""book"" while they wrote ""belongs to"" in model of book_history, so did model of ""hold_request"". And they don't have student-bookmark relationship."
0,Yes. This team still commit changes in round 2.
0,Yes. It’s code written clearly and readable.
1,I could not find tests for controller and model. Readme does not have any mention for the same either.
1,"Works on some edge cases, but fails on a few. Readme should contain list of edge cases that app can support."
0,System working as expected.
0,DB has an appropriate design for handling n-n relationships and mapping tables.
0,the team kept on submitting their changes throughout the project
0,Good coding Ruby and Rails practices are followed. MVC structured and modular.
0,There are actual restrictions on them! the first team I reviewed with such functionality!
1,"it does add restriction towards removing books with borrow history, only if it's handled more elegant comparing with throwing an error page"
0,"yes, till yesterday"
1,"Yes, team has thoroughly tested models and controller. I can see test cases for functionalities too. The only thing missing here is authentication testing."
1,"The README.MD doesn't depicts any edge cases.
1. Admin wasn't able to delete the book that has been issued. The web page threw unknown error. You can provide some known/visible error to user for better understanding
2. If there's one book, two student was able checkout the same book. Relationship between books and student seems to have some issue. So deleting the student didn't matter
3. No admin cannot be deleted
4. Admin wasn't able to delete the student who has reservations.
5. Two students were able to hold same book even if the book count was 1. This happens if other student doesn't refresh the page when one students have already checkout the book
6. Admin was able to update book count even to 1 even if 2 books were already checked out
7. RBAC is not handled properly. Please use session only for particular user"
1,"Most of the issues are fixed but I found few issues
1. I created book in the morning but wasn't able to view image after 5-6 hours.
2. I was able to put numbers in language. Validation issue
3. When I create special collection, I was having a glitch for image getting attached
4. Search only work for one item i.e either title/category. If I put value on both it doesn't show me any book. Better disable options or use of dropdown so user won't be confused
5. Email works perfectly, nice :)
6. There was an error in page when admin approved the special book request and student immediately click on show. After refresh error was gone
7. Any student/librarian can access other students account by changing the url like https://secret-crag-83044.herokuapp.com/students/8/edit, https://secret-crag-83044.herokuapp.com/students/10/edit. RBAC is not implemented properly"
0,The team has written well relationship between models.
1,I can see the two members continuously been pushing the changes but I couldn't see commit from the third member. May be I am mistaken as they might have collaborated on one laptop
1,"Yes the code quality is good. The naming convention, function calls, method length are good. The only thing missing here can be comments on functions."
1,No test in the program
0,"They have considered the edge cases vary carefully, good job !"
1,None of the extra credit did they finihsed. I can ust student account to view all the students by entering different url.
0,"Yes, they did test at least one model and one controller. But some of them are not that meaningful."
1,"There are some cases which the team failed to take into consideration. Admin can delete the students with books checked out. All the information with that students may disappear. When a student check out maximum numbers of books and submit a hold request, his request can't be approved after he has returned one of the book he borrowed because the system will say that maximum number of book allowed for checkout reach."
1,"Yes, the team did a great job on completing basic functions. They fixed the bugs I mentioned in the first round. There are some problems. Admin can't approve the hold requests for students. The cover can't be displayed correctly sometimes."
1,"They define the 1-to-n relationship between library and librarians. However, they did't define any the relationship between books and libraries. It is fine to design the system that way. One potential problem is that can we create books before creating any libraries?"
0,"Sure. Although it is a pretty good project a week ago, this team keep on fixing bugs and handling with details this week."
1,"Yes. The code is clean and readable. Some naming are not that proper. For example, booking history sometimes deal with something about checkout books."
0,"yes, from the commit history it is clear that the team regularly pushed their changes.
message for commit is sufficient to understand what functionalities added under that commit."
1,"I can not find any test cases in the test files of models.
all the test cases present in the controller are auto generated by scaffold."
0,"user interface is easy to understand and use. 
even without readme file, anyone is good to go with the UI"
0,"I can see from the code that ruby coding standards are followed to the very best.
business logic is separated in the model brilliantly and the controller is used in an optimal way to handle model and view."
1,"The changes have been pushed to the repository as and when required. However, I would recommend that the commit names be specific to the task done."
0,I went through the bookmark model and found that the testing has been done correctly for it.
1,"-The user interface could be more attractive by making use of HTML and CSS.
- Certain features like Show Books, Show Libraries, Show students and show librarians could be rendered in a tabular form which would help enhance the user experience. Also links like Show, edit, delete could be replaced by bootstrap buttons which would beautify the UI even more.
- Also make use of navigation bars to display back, home and sign out links."
1,"-The admin is able to login, edit and logout correctly
- The code follows ""good ruby and rails"" practices only that I would recommend you guys to add comments wherever possible to make the code much more intuitive and comprehensible for new users. Not only that but also it would make it easier to make changes to a particular code block in case new functionalities need to be added"
0,Yes. they are always committing
0,good testing!
0,Yes. the UI is good and the README file is clear.
0,"there are a lot of controllers to make the project follow the ""Ruby and Rails coding practice"""
0,"Yes, the application is deployed on Heroku. Yes the user interface is intuitive and easy to use."
0,"Yes, the admin can log in.
No, there is no field for 'name' in admin's profile, he can just edit his password and sign-in email."
0,"UI is amazingly done. Everything is expressed on the UI in alignment and is different for different type of users. The home page button is available to easily navigate, also the services available to the student is shown clearly. Implementation of Google sign in is wornderfully done."
1,"Maximum Borrow days can be set as negative while creating a library. Check can be put in place.
Issues like these can be tested in the Model and Controller test."
0,"The UI is very nicely done. Simple and sober. All the links are properly mainted on the homepage to make the navigation easy. The services available to a user are clearly shown on the homepage of each student, librarian and the preconfigured admin. The back and signout buttons are helpful as well. All the services offered to a particular user are very clearly mentioned."
1,"The code is very well maintained. The MVC architecture is properly followed. The controller methods are clearly defined. Views and models a=does not interfere with the business logic. Thereby making the maintenance of the code easy. 
 
one thing to mention is that the commenting could be improved in the codes so as to clearly understand what each method is doing."
0,Yeah. I could see commit thoughout the whole project process.
0,The project is almost finised and well done.
1,"It's interface is simple and clear. And it has a README file. But it still take me a while to find ""log out"" button."
0,Yeah. I think it's code style is very standard.
0,Yes. Evenly throughout the project period
0,Book's controller has some test cases.
1,"UI is simple and easy to use. Though has a few bugs, creating a student or librarian, result in sign in action as a newly created user. Sometimes BACK does not work."
1,"The project, by and large, followed the MVC pattern and ROR coding practices.
Found a very few models having the business logic while controller does the major object manipulation."
0,"There are more than 30 commits, they're active"
1,"Book page crashed after using student creating two books for same ISBN through url, there are some model constrain that needs to be done.."
0,"It's pretty standard with everything in one layout, not much design but it's not required anyway"
0,"Yes, I can see 43 commits through out the period"
0,I think the Admin part is throughly checked as admin is working for all the condition
1,"Yes , the UI is pretty interactive. I was able to navigate to most of the pages.
The only thing I got confused was with two logout link after I signed up for the first time."
0,Code is pretty much standard. I can see the naming convention followed at most of the places
1,"After edited the name, I cannot login back to it. And the logout button disappeared."
0,Illustrated by their frequent commits
0,Have plentiful test files for application
1,There are no tests for models or controllers that are not automatically generated.
1,"The quantity for books can be less than available qty, which is not usual. Other than that the models handle cascading delete well."
0,There are no failing functionalities I can find.
0,The relationships between each model is properly designed and work as expected.
0,"Yes, the team kept committing almost daily throughout the time for this project."
0,The code is very readable. The method names are descriptive of what the methods do.
1,Features not working are mentioned in the Readme which is good for testing. Library deletion is allowed which automatically deletes all dependents without any prompt.
1,"Pros: Very clean UI and buttons look intuitive. Functionalities are working as described. Nice thinking for adding a Tasks tab for admin.
Cons: ISBN should be number, Published date should be a date. Available quantity should default to some value when book is newly created."
0,Coding standards are followed well.
1,"As given in the readme file, the unit test for model and controller is pending"
1,"After checking out, the option for checkout still stays in the book show method.
Able to checkout special book ,without librarian intervention. Get's checked out as normal book checkout
While signing up, the password, should be set to a maximum of 6 characters, but while editing student profile, the password can be changed to shorter length
librarian is able to destroy the library,
 Library was successfully destroyed. from librarian account"
1,"The image of book is not shown, the cover picture in book is not available for few books
Further book  that's checked out, needs to be returned, the option for return is not available for checked out books 
Also there is no indication that book is checked out before clicking on the checkout button.
The option for placing hold on certain books, is not available to user logged in as student.
  The options for viewing  the bookmarked books aren't available
Partial search of fields in search is not supported
Admin is unable to edit the education level of the users logged in as students"
0,"Admin has required validations. 
The relationship between libraries and bookmarks are established through has-many and through relationship.
the relationship between library and book is one to many.
And that between book and bookmarks is many to one, corresponding to many students.
The  has many through is used to set up  many to many relation through another model.
the bookmarks associated with each library need-not be fetched , even though book requests need to be tracked"
1,"Things not working/remaining:

Unit test a model and a controller"
1,they tested all controllers but not models.
1,"edge case 1 admin tries the checked out books gets deleted, edge case 2 admin can easily delete student who checked out book. No mention of how to handle edge cases."
0,Yes db design has 1-n relationships present.
0,Yes the team commited 28 commits after round 1.
0,"In the first round, there was no provision for librarian sign up and actions related to librarians. The authors have fixed it this round by adding the sign up functionality and also providing all the tasks that a librarian is supposed to."
0,"All the associations between the models were handled properly. All the models had the required has_one, has_many, has_many through: associations set perfectly."
1,There is no unit test of a model or a controller.
1,"I do not know what happened, but I couldn't find my first round review for this project now. So I just checked every function in this system again. And I find failing functionality as follow:
1. Admin could only edit user's name, email and password.
2. Sometimes, student couldn't checkout a book and it said something went wrong.
3. I created a book with a not-jpg/png file as image and it succeeded. 
And there are things not working/remaining:
1. Unit test a model and a controller
2. Dynamic Overdue Fine Calculation (only calculated when book returned) and displaying the list for admin/librarian
3. Sending email when book on hold is available for check out.
4. Sending email when special collection book on pending is approved by a librarian
5. Sign up with Google (Login in with google works! i.e. if a user has signed up normally, he'll be able to login with google in future)"
1,"When I was signed in as 1 student, and if I typed in the url to another student's profile page, I was immediately directed to the requested page.
As the README states, you can only sign up via Google if you have already signed up via the traditional way."
0,"Yes, there were a lot of commits with meaningful changes between the first review round and final submission period."
1,"There have been some validation like unique email, but no unit test for model and controller as they mentioned in the readme.md"
1,The cover image for the book should be checked whether it is picture.
1,"The student should only be able to check out book belongs to the library of his own school, this is not restricted. Also the email notification function when a book is returned is still not working. And the admin cannot see the book request. However, most of the functions work and easy to use."
0,"The library - book is clear 1 to n, and the student - borrow is n to n."
0,"Yes, they did improve a lot after the first round!"
0,"Generally, is very clean and readable, even though I did not take part in their project, I could easily understand everything!"
1,Email edit should not be allowed. Back button flow does not work in some pages.
0,Good coding practices followed.
0,the commits weere regularly pushed
1,"the user interface is very friendly and the placement of attributes are goos. The sign up links could have been displayed in contrast.
the readme file has  details needed.
The admin should be able to edit his profile.
This can be done where all users are shown or as drop down as for other users."
1,"the model, views and controllers are appropriately designed.
 The university and library links redirect yo the same page.
For all users, basic crud operations are common.
Can use to filter out add books/library into the system"
0,"very good, almost 59 commits since 9/27"
0,"add google login function, very good"
0,good
0,Yes from the commit history it looks like team kept on pushing their changes.
1,the ui is in initiutive and color combination is also good which makes the website lively but the sing in buttons are jumbled together which does not look good.
0,"There were a lot of commits that made changes to the project throughout the project period.
The UI is intuitive and all the functionalities are easy to find and interact with."
0,The app is deployed on Heroku. The README does a very good job of describing the working and non-working parts of the app.
1,"The admin cannot edit his/her profile name or any details.
The names of all the model, controller, view files all follow good Ruby and Rails coding practices. The rou"
0,1) The team did keep pushing their changes through the project period.
0,"Overall the code looked good. 
 
1) The indentations were properly made.
2) Instead of ""for"", the team has mostly used ""each"" which is more readable and better practice.
3) Redundancy has been mostly avoided.
4) The team has followed the ""Fat models, skinny controllers"" guidelines."
0,The team kept pushing the code into the git at regular intervals in an organised way with a clear motive of what the basic functionality they want to submit for the first review.All the contributors contributed to the project.
1,"As of now, the student cannot add books. As mentioned in the readme file only CRUD operations can be tested. But the student can bookmark the books which is working correctly.
There is a google sign in feature included. But before using that we have to normally signup as a user and then we can sign in using the google. If this process is followed then the sign in is successful. But the whole point of sign in using Google/Facebook is to avoid the sign up process. So, may be in the future development this can be taken look at.
The team has tested controllers like bookmarks,libraries,sessions,students,home,books etc though models test has not been done according to my knowledge.
All the basic test case scenarios are covered.Everywhere, the creation/edit profile(edit for books)/update/deletion of accounts has been checked. But the other scenarios also can be covered like
-validation
-login/logout
-CRUD operations while logging in as a different user can be checked.
-Also, we can test the show and updation functionalities are working without logging in(updation should fail).
-Working of links & google sign in"
1,The github repo is private. Cannot Comment on Testing
0,The User interface is extremely intuitive. I really liked the navbar which you have implemented as it gives really easy access to all functionalities without having links cluttering all across the page.
0,"yeah, they did a good job about using github to updata and version control their project."
1,"It has some simple interface to test the function required, but there isn't no connection between login process and special functions in whole system. In other word, functions are right there no matter you login or not, no matter you login as a student or librarian."
1,The git link cannot be opened.
1,The git link cannot be opened and some functions would simply link to an error page.
1,"The admin seems cannot be edit. However, there is an edit botton in admin show page and once u choose 'back' or go edit and 'update admin' would both cost an error.
Somehow it seems that the Git link cannot be opened."
1,"Not so intuitive, but still can use.The link of login as an admin is too small to find. Please improve that."
1,Can't find where to edit profile name.
1,"Though there are restrictions in model, but there seems no test write for controllers/models."
1,"- Good overall code quality, methods named appropriately
- Few lengthy methods in controllers
- Less logic on models more on controllers"
0,"- Yes, the team submitted changes throughout the project
- Changes were commited for round 2"
0,- There are few basic test cases for models and controllers
1,"- In places such as the search function, AND operators could have been used instead of using nested 'ifs'. Moreover, I think that the search function looks too complicated due those nested conditional statements. It would have even done the job if a SQL like query would have been written to check the incoming parameters against the required attribute field.
- I would suggest that you could have avoided nested if in many other places too and used the AND operator for the same."
0,"-The team did commit their changes throughout the project and did particularly during the second round as well. But unfortunately there were some commits done even after October 9, thus indicating that the project was not completed by the required deadline.
-Also I see that not may commits were done after the first deadline thus implying that most of the basic stuff was already completed before 9th, thus implying that not much work was done in round 2."
1,"-The team did not handle the 1 to n relationship between the library and books i.e. each book should belong to a library however such a mapping was not done and this can be inferred by observing that there is no library_id field in the books table. Agreed that this field is not required when a librarian is viewing the books since he should be concerned about the books in his/her library, however, this mapping should be visible to admin and students while viewing the list of books available.
- The 1-n relationship between a library and librarian is done correctly, where the admin, whilst creating a librarian account is assigning the librarian to a particular library. In this case, care was taken that a librarian belonged to a single library. Similarly the 1-n relationship between a university and student was handled and displayed correctly.
- The 'belongs to' constraint was not mentioned in any of the controllers as well."
0,All relationship are correct and defined properly
0,"They are keep updating the project, and there have been a lot of difference since the last time."
1,"The code is hard to read. There are many functions in some controllers with definitions, however, some models are just saved without verify the return value of save. If save failed, there may be no way to know it."
0,If student who has checkout out a book gets deleted then the check-out book gets restocked.
0,"Yes the systems works properly. In Round 1, addition of books was not possible and various other book related functionalities were available only for the pre seeded data but now all the functionalities regarding books work really well."
1,No any mapping related to library and books was found.
1,"1. I did not find how the system handles edge cases in the README.md.
2. Admin can delete a book which is checked out by a student.
3. Admin can delete a student who has books not yet returned.
4. Admin account cannot be deleted."
1,"-Firstly, there is a glitch in view books. The books newly created by the admin should have been displayed in the 'view all books' section of each user but unfortunately, the view books is not able to do that. However, the books created by the librarian are all correctly displayed in the 'view all books' section after which a student can checkout the book. In other words, creation of a book by an admin isn't working correctly.
- The admin account can be deleted for this application however, the team members have mentioned in the readme that in order to prevent any malfunctions happening, DO NOT delete the admin account. Also a test hasn't been written for the same in order to avoid admin account deletion.
- There is also a problem in book request. There was a book having #copies=1. When multiple students requested for the same, the librarian got those requests on his dashboard. However, the librarian was able to approve both requests even though #copies would be 0 after the first approval. Since both requests were approved, the #copies value went to -1 in the database which is technically wrong. In other words, the librarian should have been notified that the request cannot be approved since the #copies has become 0 and the request must get pipe-lined."
0,The code is written in a clean way and modular fashion where each method handles a specific task. It also follows ruby-style naming conventions
1,"The database designs database relationships of 1-to-n and n-to-n properly. However, these relationship mappings are not implemented properly."
1,"The system works as it is supposed to. However, there exists a few glitches in the system.After admin creates a librarian, it still goes for approval instead of directly creating the account.Cannot view list of all librarian in the system.  Same book can be checked in twice by same student."
1,"Good coding practices followed, except some places where multiple nested-if statements"
1,"Many new features supported compared to last time, especially admin related functionalities. View image doesn't work. Not able to see new book which was added by an admin. Not sure how books are classified per library, as only an option for ""All books"" is provided."
1,The model testing is not thorough.
1,"1. If you use the same isbn to create books, it will show you ""something goes wrong"" page, I think it should be better showed by a warning like ""cannot create the book"".
2. When admin created a librarian account, he should be able to login directly, no need to be approved in admin's account.
3. An undergraduate student can checkout more than 2 books.
4. Librarians cannot edit their profiles to change the libraries they belongs to.
5. I can only sign up a librarian account with James B. Hunt. Like, I create a new library which is library 2, and in sign up form I choose library 2, but when I see approval request in admin account, it still shows 'James B. Hunt'. 
6. Admin cannot view all librarians."
0,their system handle the 1-to-n and n-to-n relationships properly
0,"yes, they keep committing changes"
1,"Their code is written in a clean way, but some methods are too long, such as checkout method in book_controller.rb"
1,"(1)Any record about it will disappear too.
(2)That copy of checked out book will disappear too.
(3)No.
(4)Yes. The reservations will be deleted
(5)I tried to delete a library as a admin to see what will happen and I failed.
The README.md didn't cover how the system handles edge cases."
1,"I do not know what happened, but I couldn't find my first round review for this project now. So I just checked every function in this system again. And I find failing functionality as follow:
1. I signed up as a undergraduate student and then I chose to checkout two special book. It noticed me that I couldn't checkout it and the requirement were added. So my checkout list was still empty, and so so good. However, then I failed to checkout a not special book because  Maximum books limit excedded. It must be a mistake since I didn't checkout any book yet.
2. This system seems not accomplish any email reminder. I didn't receive a reminder when I checkouted a book.
3. I created a book with a not-jpg/png file as image and it succeeded. 
4. Admin couldn't delete a library."
1,I have seen their code. Although their library-book relationship is correct. The book-bookmark relatioship and book-hold relationship relationship didn't accomplish. Let alone the relationship between library and hold request belonging to it in model. I don't know what will happen to those hold request after admin delete the library or remove that book
0,"Yeah. This team kept on submitting their changes, not only after first submission, but also after second submission. They definitely value this score very much."
1,"Most edge cases seem to work. However, if a student checks out a book and then returns it, then the admin cannot delete the student. I noticed this problem with many applications, it likely has to do with the fact that students belong to requests. Apart from this, everything looks good."
1,"This application did a good job of putting more code in the model than controller. However, the controller code is still a little bloated, as in the students controller.  No methods are horribly big and everything is named properly."
1,Deleting books deletes all pending requests and checkout requests for the book. I am not able to check anything with regards to availability of books as book count is not visible (may be I don't know where to find them).
1,"Sometimes, I am not able to create new books - ""We're sorry, but something went wrong."" is seen, instead of proper validation messages when I try to create a book. Sometimes I am able to create them.I would suggest that number of books available needs to be included somewhere for students to view."
1,"I like the organization of the methods in the controllers, I find them intuitive to understand the function and relevant to the model they are placed in. Some methods with similar tasks seem to be repeated, but the content seems to be different, so I can ignore that."
1,"Edge cases are handled well. 
1. Admin can delete book that is issued and change is reflected in the student's account.
2. Student with issued books cannot be deleted.
3. Admin cannot be deleted."
1,"The basic functionalities all work great. The UI is good and I couldn't find any major issues with the code. The only functionality that I feel is erroneous is when a user who has books issued is deleted, the system throws an error because the relationship might not have been properly defined."
1,"For the most part, the system handles the 1-to-1 and other relationships properly. If I delete a book which is already issued to some student, the entry disappears from the borrowing history and this change is reflected in the student's checked out book list. However, if I delete a user which has books issued, the code breaks since there is no relationship of books mentioned in user such as user has_many books."
1,The coding practice followed is good. The methods usually do what they say and there are not many commented blocks. Nesting sometimes becomes more in some methods but nothing to worry about majorly.
1,"some edge cases have failed such as :
admin is able to delete a book that is issued
The reservations are not deleted even if the student who has multiple pending requests has been deleted."
1,Yes they have made changes compared to the round 1 but admin is still unable to delete a student
1,No the admin account cannot be deleted.
1,"Yes, the system does work as it is supposed to, there are many functionalities that are added which were not there in the first round. There is an issue, when I login as an admin, i am getting to see the student homepage, i can't see any admin functinalities."
1,"1,2,4 ) Can't test as there's no book and can't create one.
3) Admin can't be deleted."
1,"Most of the functionalities are working as expected but there are still some base errors.
 
Improvements:
> Admin login is working fine now.
> UI looks much better than round 1 and more intuitive. However, some of the things could have been improved like better error or warning messages or adding functionalities on page proportionate to the dimension of page. However, its still pretty good.
 
Errors:
> Creating a book thew me error.
> Still cant view any books as there doesn't seem to be any data and can't create a book either. Incase of data input error while creating a book, it should have shown validation error message instead of the whole app bugging out."
0,Team did keep pushing their changes through our the project. I can see over 200 commits and most of them during round 2.
1,admin cannot creat books
1,I could not determine if testing had occurred because the github is unavailable.
1,"The UI is pretty easy to use. I couldn't view the repository though, the link returned a 404. You should check that your repository isn't private."
1,I could not log in as admin because I could not determine the account's information. I was not able to see the repository either.
1,Github repo is private.
1,Can not access github repo. I am willing to review this part again if the repo is accessible.
1,"Readme is appreciated, which has details on admin account and predefined student and librarian accounts. Navigating forward and backwards from one page to another is a little difficult. Admin can log in but not log out."
1,"Git repo seems to be private, I will check this review later to see if the repo has been made public. I am willing to review again, for this part."
1,"The github repo is not public, so can't comment."
1,The github repo is not public so can't comment.
0,UI is impressive. Nice styling with displaying a list of books on the main page of student. Makes it attractive.
1,The GitHub repo is not public currently so can't comment.
1,I am unable to open the GITHUB page.
1,I cannot see any testing for any controller.
1,The github page is not opening but I downloaded the README file which is attached. The README file is well described.
1,"Github link seems to be incorrect as it gives a 404 - page not found. Hence, could not check this."
1,"Github link seems to be incorrect as it gives a 404 - page not found. Hence, could not check the code for this."
1,"1) Admin login is not working. I get a blank page with this message: ""Find me in app/views/sessions/create.html.erb""
2) UI is not very intuitive. Readme describes the basic features but the flow has not been described properly."
1,Github link seems to be incorrect as it gives a 404 - page not found.
1,Wasn't able to check the code as the github url is not working.
1,cannot see the private repository
1,"admin cannot edit profile, while students and librarian can edit them profiles"
1,"again, can't get in touch with repo"
1,"Seems repo is private, i didn't get into code."
1,"Interface is perfect, but seems have no admin user to test admin function. At least it is not mentioned in readme file."
1,There isn't a admin user be showed. So I couldn't login as a admin to test any function of admin.
1,"UX wise the app is well designed. Links should be on new lines, though. Navigation is pretty easy. However, I consistently saw an error trying to perform different actions in the app : `We're sorry. Something went wrong'."
0,"Yes, they use Rspec to test their model"
0,Yes they have done it very well
1,- Missed few crucial test cases while checking login form
0,The team has done the testing.
0,Repsec test cases were found for Librarian controller and Librarian model.
1,Test cases have been written for the librarian controller and librarian model. I liked that the RSpec testing framework is used over rails' default one. But I feel that tests don't cover a lot of things. They have written just 5 cases for model and 3 cases for controllers. This is not sufficient to thoroughly test functionalities. A lot of functionalities are missed. For e.g. aa scenario in which librarian is created without the library should be tested and it should not create librarian object as library should be compulsory.
0,"Yes, the librarians controller and model is tested. It includes test cases for validations and uniqueness of librarian."
0,"Yes, they built Rspec test structure for this project. They tested the librarian's model and librarian's controller. The test cover the most basic situation."
1,"- The case where in a checked out book is deleted by the admin is not handled properly.
- The admin was able to delete a student who has a book checked out to his name."
1,Admin is able to delete the student even if the student has a book checked out and there is no change in the hold requests if a student is having a hold request and he is deleted. Other edge cases have passed.
1,When a book is deleted it gets deleted from all the student accounts also even if they had it.
1,Even if the book is deleted the hold request is not deleted. Admin cannot be deleted.The reservations are not deleted.
1,"The admin can delete a student even though he has checked out books.
The admin can delete a book that is issued and not returned.
Admin cannot be deleted.
Admin can access a new admin page,but cannot create a new admin.
If admin deletes a student with reservation requests, the requests get deleted."
1,I was able to delete a book that was already checked-out. README.md doesnt have description of edge cases.
1,"(1) What will happen if the admin tries to delete book that is issued?
The book can be deleted successfully, but when I click the ""show books checked out"", the record is still here.
 
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The student can be deleted successfully, however the checked out record will still remain, so the other student who have hold request cannot get the book, even the former studentno longer exists.
 
(3) Can Admin account be deleted?
No, Admin account cannot be deleted.
 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
No, the reservation still remained."
1,"1. Students cannot checkout books.
2. Somehow sometimes I cannot add new books, it will show ""something went wrong"" page.
3. Librarians cannoot change library they belongs to.
4. Students cannot view the books they checked out."
1,Yes basic functionality is well defined. some book histories are not there.
0,"- Yes, they fixed the majority of the problems and the flow of the application is without any hinderance."
0,"Yes, they have made all the changes that are mentioned in the previous review."
1,"They have fixed the problems found in round 1. Although following are some of the things which need to be fixed:
- The Librarian is able to perform operations on books of other libraries as well which should not be the case.
- Validation for book creation are not working properly, for instance if a particular book field is kept empty, there is no error associated with the same and page renders a text starting ""We are sorry some thing went wrong.""
-  ""View all books"" for librarian does not label the book fields and hence it is difficult to understand whatever is displayed on the page.
-  There is no quantity attribute associated with the book.
- In the book checkout section the book column displays the book's ISBN where rendering book title could have been better.
- Book search could have been better if attribute filtering functionality was all added."
1,"There is a bug. When I first logged in as an admin, then I new a student successfully. After I created the student account, I will become the student who I have just created rather than the admin. I think this is not the thing I want, as I should stayed as an admin."
1,Their books model did not belongs to library.
0,Yes mappings are good
1,- There is a mapping of the book to the library in the books table but it uses string rather reference to the library table.
1,"There is no mapping for any relationship. In the model file, they did not add any 1-to-n or n-to-n relationships for different models."
1,Neither there is any existence of mappings table nor there any relationships established between models.
1,"1-to-n or n-to-n relationships have not been managed properly. They have added foreign keys to required fields but they have not mentioned ""belongs_to"" or ""has_one"" or ""has_many"" anywhere in the model files. This might lead to dangerous effects on data after some operations like delete which are included as a foreign key to other objects."
1,"The university can be made a new table, as the id can be used as FK for user, library tables.
The book table should use library id mapping instead of saving the library as string directly."
0,The relationship property has been handled. A library can have n books and 1 book belongs to one library is followed through the system.
1,"It seems that they didn't handle the relationships apparently, as there isn't any ""has one"" or ""has many"" in library model and book model.
I found the library is an attribute of book, so they might not build such relationship for book and library."
0,Yes the team kept making changes throughout the whole period
0,- They had continuous commits on the repo by all the members of the team.
0,The team has been submitting their changes throughout the project. The team made changes in round 2.
0,"Yes, continuous feature development is done post submission of round 1."
0,"The team has done timely commits.
Updates have been committed in round 2 as well."
0,The commits in the project were made regularly and even after the 1st round.
0,"Yes, they kept on submitting their changes throughout the project and the still commit changes in round 2 as well."
1,"the code is written in a clean and readable way, but some methods are too long, such as index method in checked_outs_controller.rb."
0,They followed a good coding standards.
0,The code is quite aptly written and is modular with respect to functionalities.
0,The code has been written following standard coding guidelines. Names are not ambiguous or misleading. Functions do the specific tasks which they are assigned to do. The ruby-istic approach is followed in coding. The code is perfectly human-readable.
0,"The code is readable and clean.
The naming conventions are as per ruby standards. The functions are unit functions and no long loops have implemented as far as possible."
0,Exceptional code quality. Well documented and easy to read.
0,Yes they kept pushing changes
1,"No, the changes were not pushed at regular intervals throughout the project period."
1,"Yes the team has regularly used github and continuously committed code. But they have not used branching. They could have used different branches for different features such as admin functionalities, student functionalities, book hold/return etc."
0,Many commits were made over the days during the project assignment.
1,The UI is a little difficult to navigate. For eg: on books page to view details of the book we have to click on the title which is not intuitive
1,"I did not find the UI very responsive. Admin needs to sign up, when there should be only one pre-defined admin. I was able to access the books creation without logging in."
1,"Hold Request is breaking.
show all books is breaking.
view all bookmarks is breaking.
New checkout is breaking.
search is breaking."
1,Student should not be able to add new books
1,"Some of the features were not working. I think the primary reason was relying too much on text-based mapping. Example library was stored as text it lost mapping somewhere as most of the features stopped working on creating a new library or if I enter some random library name in the librarian profile. Library is important and I think it deserves its own table with its unique ids and using that ID to map everywhere.
 
There are some test cases for the controller but they are scaffold generated. I didn't find any test cases in the model."
0,One extra credit feature is implemented.
1,Test cases are not written for the models. So no model is tested yet.
0,These tests appear to be present.
1,Student can add a new book. There is no role check in the controller actions. There's no functionality to signup using third party platform.
1,Test cases have not been implemented.
1,"The search functions seems not work.
And the admin can new a book without new a library. I think that is no right, because a book should belong to one library, otherwise we cannot new a book.
And there seems no test cases and code for model. Only some test cases for controller.
And if a student reaches his maximum checked book, I think he can put the book he still want to borrow in the hold request list, rather than force the student must return a book before checking out a new book."
0,Nice.
0,Yes the user interface is more inttutive and easy to use.
0,"Yes, properly explained different actions of different roles."
1,Intuitive links are present. The use of multiple logins is confusing.
1,"Yes, the functions are easy to find. But I think the admin account should be preconfigured rather than sign up. I signed up as an admin, and the emails is admin1@ncsu.edu, password is 11111111, hope that can be preconfigured in the next review. And when I signed up as a student, the page have instruction that I should set my password at list 6 characters, however when I set the 6 characters password, the page noticed me that I should set 8 characters password. That seems uncomfortable for users."
0,Yes they follow good Ruby and Rails coding practices.
1,"I can change the password for the admin but cannot change his/her name. 
 
The code has a proper structure and they have maintained a similar structure to what is generated by scaffold at first."
0,Yes it looks like most of the practices have been followed properly. Models and controllers have been designed using many features specific to this environment.
0,Basic guidelines are followed well.
1,"The missing admin features have been fixed but from the student side, I cannot access book checkout, hold request or return functionality as the show page for a particular book is not opening."
1,"1. Admin cannot delete a book that is issued.
2. The system throws an error if admin tries to delete a user which has books issued.
3. Admin account cannot be deleted.
4. Since the system throws an error on deleting students with books issued, the reservations or borrowing list cannot be checked.
5. Cannot delete a library which has books issued.
6. One major issue is that no kind of authorization seems to be present in the system for users. When I login to the system as a student, I can see the list of all users and I can even delete users which don't have any issued books. I cannot see any other details of that user but deleting other students from a student account is risky.
The readme file does not have any description of how the system handles edge cases."
0,The team has not tested any model or controllers. I could not find any rspec files on their repo.
1,"The application is deployed on Heroku. The UI is easy to use, however, there are not links connecting all the pages. I had to guess url paths to get to the books page for instance. I could not find user pages."
1,no git repo provided
1,Can't access the git repo
1,"The index user interface is blank after the user signed in, and no way to navigate between pages. The only way is to navigate through url links."
1,Routes links for most of the functionality are not mentioned in the nav bar. So don't know how to navigate to them.
0,There are no features visible on sign up and login is there on website. No UI provided so you cant really test what all implementation are done.
0,Git hub link not provided.
1,See in additional comments
1,No README file has been submitted. The user interface is intuitive for the functionality that exists.
0,"The only functionality available to me is the ability to create a generic account, sign in, and sign out."
1,No login functionality available
1,"no root/welcome page after sign in.
 
had to hit and try urls in address bar to navigate in the app
 
tried destroying the university after creating a library under it, good that it prevented me from deleting, but the error page was not redirecting to a user friendly page.
 
books page showing library values as: ""#<Library:0x000055f5c37f9388>""
 
not able to access students or librarians page, hence not able to view books under my name or issue a new book etc
 
No search functionality of any sorts"
1,Easy to use but it only contains sign up and sign in for the user
1,Link not mentioned for the git.
1,Git hub link missing
1,git hub link not present. No
1,"The following edge cases are failing

Deleting a user deletes all the pending books and bookmarks
When the admin adds the librarian, the system still waits for admin to approve the librarian explicitly.
Deleting a book is allowed even when the books are issued to the students
Deleting library also deletes the books associated with it which are already issued by the user
There is no option to associate book with library"
1,"Most of the changes suggested have been worked upon.However, there are still a few functionalities that are failing like

 checking out the book multiple times is allowed
The returned book is not updated in the Book History page. When a student returns a book, the book limit for that student does not get updated.
Admin cannot add new books to libraries. Only the count of the book can be updated.
Special requests cannot be tested"
0,1-to-n and n-to-n relationships are handled correctly in the models. There are no issues while dealing with this.
0,The changes were done at regular interval since the inception of the project. The commits started off slowly during the first week and then subsequently increasing in the following. The commit frequency decreased in the week after review indicative that they worked on the reviews and not on implementing a lot of new features.
1,"The models are written in a clean and modular way. Even the routes are written cleanly.
Although there are a few instances where coding is not clean. The sessions controller, book_counts_controller, book_requests_controller has a lot of code in method without using function calls and with too many nested blocks under the default methods that rails provide(ie update, destroy, delete, etc)."
1,"Its hard to know if students properly belong to universities, as there was only one university, though. Additionally, it seems like books are not added to a library? At the very least, when I add a book I cannot see it on student accounts."
0,Yes. It works
0,It handles different and crazy test cases.
0,All the functionalities work properly
0,Yes. All the relation ships are proper and working
0,Yes they have been very active
0,"Code looks consistent, clean and well written."
0,"Yes, the system works as it is supposed to, Almost all the features and functionalities are implemented well. There was a problem of the book isbn number being not unique, now, that problem is fixed. For the password creation, there is an 8 character requirement which was not mentioned earlier, but now its is mentioned."
0,"Yes, the code is written in a fairly clean and a reasonable way. All the good programming practices have been followed."
0,Yes one model library and one controller library has been done thoroughly.
0,Everything looks well implemented
0,Everything is fixed.
0,Yes dependencies done very well.
1,"1 The book history for that book is deleted
2 The book request is not clearly implemented. In case a student is deleted, no effect is there on the book count. that copy is lost.
3 No
4 Yes the reservations as well as all book checkin-out history is deleted."
1,book to library relationship missing
0,"Extensive usage of project boards, Branches and commits made at regular stages. Yes the team still made commits in roud 2"
0,Yes they have tested the mobule of library
1,"The edge cases are not considered. A student with book issues can be deleted, and the reservations can be deleted."
0,Yes they have done the relationship correctly.
0,"Yes they are currentlly still pushing the commit, good job !"
0,"They have earned the extra credits, good job ! Its really amazing"
0,"Yes, test cases are written for models"
1,"1) Just trim the space in email string when you take as input because if i write ""  admin@lib.edu"" then it shows invalid credentials as compared to using ""admin@lib.edu"""
1,"1) The new books that librarian (of Hunt lib)added is not visible to student of NCSU. I added book with ISBN 1111111111 but it is not listed when i login as student of NCSU
2) Rest all relationship works fine"
0,"Yes, the team update many functionality that during first review result in code break."
0,They perfectly manage to write logic inside model and not controller.
1,"README doesn't provide any information on how edge cases are handled, but it seems like all records related to student/book are deleted from database properly.
Cannot check for point 2. as no information provided on hold request."
1,"There should be link to go back instead of just log out and homepage.
I don't see a option to enter number of copies while creating a book. it doesn't show when viewing the book.
Assuming there's only 1 copy of the book, then admin is able to approve all the requests for the same book.
Also cannot place a book on hold.
README doesn't provide information to check this."
1,don't understand the need to have separate model for book_count and also the relationship is wrong.
0,They used project board to track the progress of their project.
0,seem to have followed all the coding practices.
0,The project boards are used wonderfully
0,Seems like it does.
0,"79 commits throughout, that's a lot. The team was active and up to date in terms of code sharing"
0,Features are easy to find and it's easy to navigate as well
0,"Team has used scaffolding and the structure generated has been enhanced by their code, hence they have followed good ruby and rails coding practices."
0,UI is simple and intuitive
0,Good coding practices were followed
0,"Yes, the team has thoroughly tested a model and a controller"
0,"The UI is pretty simple, easy to understand and use, and also well defined in the readme file"
0,"The code is written precisely, and to a great extent, it follows good Ruby and rails practices"
0,There have been substantial amount of commits so it looks like the team kept pushing their changes.
0,Admin model and controller seems to work fine according to the implementation required . Hence it looks like admin model is tested properly
0,Yes its very good and well defined in the readme. good job.
0,Code is well structured and easy to understand.
0,There are roughly over 75 commits on github page detailing all changes at each commit stage and usage of branches and project board. Kudos
0,Yes. I particularly liked that there was not one link to a broken functionality. Kudos
0,Yes they were keeping pushing the project.
0,They have already done the above tasks.
1,"(1) What will happen if the admin tries to delete book that is issued? Book is deleted
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book? Student has books checked out! Can't delete is displayed
(3) Can Admin account be deleted?No
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?  No"
1,"1) can't test delete a book which is issue as issue book functionality is not working
2) can't test delete a student who hold a book as issue book functionality is not working
3) admin account can't be deleted
4) can't perform this test as issue book is not working 
5)"
1,"1) Functionality of view all books to Student should be implemented and then provide option to checkout or add as bookmark.
2) Try to fix the issue of sign-up as librarian and it's functionality (http://enigmatic-badlands-15021.herokuapp.com/librarians/new )"
1,"Few observations:
1.If a book is already checked out then also we should be able to request that book which we are not able to do so.
2.Admin is not able to delete all the books to test the edge case.
3.If the student who has checked out a book is deleted then the book count is not incremented and is not made available to other students.
4.Student not able to see the quantity of available books to checkout and get an idea.
5.Search of books fails even if we copy paste the title onto the search text box.
6.If the admin approves the librarian then the success message is displayed twice."
1,"Delete button is disabled on books that are checked out. 
But the whole flow of checking out books has glitches."
0,Yes the labels are well defined. Users can quickly scan the form
0,1) Code follows convention over configuration approach of Rails
1,"(1) Admin still have max borrow limit if they want to borrow a book!
When we login as Admin, we cannot borrow books as much as we want, we can only borrow two books.
(2) System will crash if Admin has borrowed a book and click on ""checkout lists"" on home page.
If Admin borrows  a book, and click on ""Checkout list"", the system will crash. Only if Admin returns that book, system will recover. 
(3)Student can sign up with arbitrary university attribute."
0,"No, the admin account cannot be deleted. If a student that has issued a book is deleted, the book does not become available."
1,"Edge cases are handled nicely. Just there is some problems :-

System throws error when admin tries to delete the student who has hold request for some book. It should instead allow the student to delete and delete all the hold requests made by him.
Student can create/update libraries, librarians by directly hitting the create URL.
When student has hold request of special collection book and when some other student possessing that book return it then although book is of special collection it gets automatically issued to the student having hold request."
1,The checkout list functionality is not working in the admin page so cannot keep track of the books.
1,"1. Can the admin view the list of students who have checked out books from a library and their detailed information? No, 
We're sorry, but something went wrong.
2. Can a librarian edit the book information listed in their library and cannot edit books listed in other libraries? No
3. Can cover photo be uploaded for a book? Not able to view book details to verify whether cover is uploaded or not
4. Can a book be checked out, if the book is part of Special Collection? Yes
5. Can books be bookmarked? Can the bookmarked books be viewed by student? No, No"
1,"working

Searching of book is working.
Student can login and log out and sign up
Student can edit own profile
On creation of new librarian a approval request getting generated 
librarian can edit own profile
special book is getting approved or dined but there is no workflow to create special book request
admin can view all books
admin can add librarian
admin can add new book


 
 
Not Working

I am not able to checkout book for student
No functionality to bookmark the book
No functionality to create hold request
No functionality to return checked out book
Unable to check overdue fine as i am  unable to checkout book
librarian not able to add new book
librarian not able to see books from all libraries
librarian not able to see book hold request
librarian not able to delete or edit existing book
librarian not able to views students with overdue fine
admin addition of new student form not designed well
admin not able to view checkout books"
0,Basic functionalities work perfectly fine. The team has implemented almost all the feedback given last time which is good to test.
1,"UI is improved a lot in this round. Basic functionalities such as Log In, Log Out, New Student account creation, see list of books, view books, search books, create librarian account etc are working fine. Some of the important features are still broken.  List of pieces which are still failing : - Book cover pic is not working. - Book delete not working. See screenshot here : https://snipboard.io/1ESPbV.jpg- New student creation has glitches. When I try to create a new student as an admin, I am redirected to an update page of some other student. See screen : https://snipboard.io/ypEdZh.jpg- Book borrow / check out not working. See screen : https://snipboard.io/13xAhH.jpg- Student Checkout History has glitches. - Librarian new account creation is not working. See screen : https://snipboard.io/giwBP1.jpg
- Librarian Approve piece not working. I don't see the list of librarians which are pending approvals. 
There are other minor issues as well. For instance,"
1,"add option to go back, in addition to homepage.
Didn't understand the need to edit the book in bookmarks page. Also what is the purpose of asking ""Request Type"" field? I was able to change the library of that book and also the student to which it was assigned. All this while I was logged in as student.
Was able to request same special book twice, and it shows in the book requests page."
1,"(1) There is only one copy of a certain book in the library. 
What if someone want to borrow two copies of a same at the same time? A library should have many copies of a certain book. My suggestion is that you can add a count number attribute to the book model.
(2) A book's ISBN can be a string not a number!
(3) A book's image can not been seen after creation.
(4) We can create two books with same ISBN, not unique!
My suggestion is that we can modify the book model to be better to satisfy these conditions.
(5) Admin cannot see details like university of a student.
When login as a Admin, we cannot see other information of a student other than email and name.
 (6) Admin cannot create a new student.
When we login as a Admin, we click ""new student"" in the students page, we see the form for updating not creating.
(7) Library can be created without a university
If a library doesn't have a university, students from other university don't know whether they can borrow books from that university.
My suggestion is that we can modify the Library model to add more validations.
(8) Student can be created without a university or with a number as university name.
 When we sign up as a student, we can put a number into the university space, or even without a university keeping it blank. And when he/she borrows a book from the library not belongs to their university, the system will crash.
My suggestion is that when we sign up as a student, we can make the university attribute become a choice list in the fill-in form. So the user can only choose their university from some of preconfigured university to avoid bug. 
(9) A Librarian cannot add a book to his/her library
There's no entry for librarian to add a book
(10) A librarian cannot see the details of a book
When login as a librarian, click ""show"" on a book and then system will crash.
(11) Librarian cannot see borrowing history of a book in his/her library
There's no entry for borrowing history.
 (12) Student cannot see education level in their profile page.
(13) When a student edit his/her profile, he/she can edit their university, education level and overdue fines information.
A student can be able to edit their name, email and password only.
My suggestion is that we student edit profile, we should only show part of the form for updating.
 (14) Student and Admin cannot bookmark a book.
 There's no bookmark module
(15) Admin cannot edit the email of a student.
When login as Admin, click ""edit"" on a student, we cannot modify his/her email.
(16) Student cannot borrow a book.
Sign up a new student with email: test@ncsu.edu, name: test, password: 111111, university: NCSU
And then login as this student, click ""check out"" on a book, the system crash.
The strange point here is that Admin can still borrow books.
I believe that your library system implements borrowing function for students initially, however your model doesn't have dependent :destroy validation,
The most possible case is that after so many destroy operations, there are many attributes of books or other model become nil.
So in the view page, bugs come out and system crash.
Another possible case is there may be some bugs in borrow method. Because Admin can borrow successfully, but student cannot. Maybe the determination of role in borrow method has some bugs.
(17) Because a student cannot borrow a book, the functions below cannot test..
1: borrow at most N books according to their education level.
2: receive an email when successfully borrow a book.
3: cannot borrow a book if this book is not available or student reaches his/her max borrowing limit.
4: When returning a book, approve the next hold request on that book."
0,"Yes, the system works as it is supposed to, there are many functionalities added which were not there in round 1. In the admin homepage, the checkout history link is not working."
1,"Yes, there are improvements from the previous version. They fixed some issues in basic functionalities. But there are problems:-

Validation Error while saving/updating password field in student is not clear I am not able to set 3 character length password but 6 characters passwords are allowed. The message should indicate the minimum length of the password or it must be written in Readme file.
Admin is unable to create new student account.
Still after logging in with librarian account, ""Show"" action of the book throws error and I tried all the links to get to the index page of books from librarian account (e.g. All Books, Manage Books, Manage Library -> View Books in your Library). Also while creating/modifying book associated with the library the data is being stored properly but after each action error is thrown in UI.
They have implemented hold request for just single hold count on each book (i.e. only one student can make hold request). In that perspective librarian and admin could able to see the details of currently checked out and hold request students details but this has been not made clear in Readme file. Thus, system lacks full fledged hold request functionality. 
They have stated in Readme file that they had implemented Bookmark functionality but I am unable to find any links or pages in UI in student login for that. So bookmarks functionality is not completed. 
Admin unable to view checked out books list. When I try to click URL it throws error.
Student could edit his/her own overdue fine.
Whenever I click on return button while returning book it throws me standard error in UI although book gets actually returned successfully in backend."
1,"Student is able to add new book using link 'http://enigmatic-badlands-15021.herokuapp.com/books/new'
Student is able to edit the details of the book.
Image option is a text field. Should be able to upload image.
No option to approve special book request, so cannot check if email is sent if approved."
1,There are test files for every model and controller which appear to be a result of scaffolding. But the team has not thoroughly tested any one model and controller
1,"Unable to see any books in students as search is not giving any result on the book name. Unclear on what category the book search feature searches the books.
Admin account cannot be deleted."
0,The UI for viewing student details was illegible in the first submission. The authors fixed this problem in this submission.
0,"The models book, book_history, librarian, library, student, university, book_issue_history have all the required belongs_to, has_many, has_many through: associations."
0,"Works well, all functionalities have been implemented including extra credit."
0,"Overall very good quality.
Certain m"
1,"It seems like all test files are added automatically, but there are no modifications to the test_helper file."
1,"(1) Books can be successfully deleted, and the checkout history won't show up in the view page of admin or the related student. 
(2) When trying to do so, the system crashed, and no actions took place.
(3) There are no buttons to delete admin accounts, however, in the controller of Admin, there is a destroy method.
(4) The system crashed as well, and nothing took place.
(5) I noticed that there is a cancel account option of student, thus I tried to cancel a student account with books checked out but not returned. And I succeeded. Then I logged in as admin and view the list of students with checkout histories, and the record disappeared. And I logged in as another student and view the list of all books, then the quantity remains [max-1]. The book along with its checkout histories simply vanished.
(6) When any student tries to borrow the book with ISBN ""123.ASM.XRZ"" which is currently available, the system crashed. I don't know why."
1,"Solved problems which had shown up in first round:
1. Now admin can successfully delete students and librarians with no checkout histories.
2. Now admin can successfully delete libraries with no books.
3. Now admin can view other users' detailed information except password.
4. Now admin can view the list of students with checked out books.
5. Now librarian can only manage the books of his own library and delete books.
6. Now librarian can view the list of students with overdue fines.
7. Now undergrads can borrow no more than 2 books at a time.
8. Special collection can no longer be checked out.
9. Now if a book is returned, the next student in the waitlist automatically checks it out.
 
Problems remaining:
1. Admin still cannot view the list of students with overdue fines.
2. But librarian can add new books to other libraries.
3. Now I can sign up with my facebook account, but the system seems like not linking the facebook account to my account in the library system, thus everytime I sign in with facebook account, it requires me sign up again.
Thus my facebook account actually doesn't work at all. I can even use my facebook account to sign up different student accounts in this system, and I cannot login with my facebook account."
1,"One problem:
In the Student model and Book model, the code `has_many :book_issue_history` should be instead `has_many :book_issue_histories`. In the Library model, the code `has_many :librarian` should be instead `has_many :lirarians`."
0,"Yes, they kept commiting in Oct 7, 8, and 9, almost throughout the round 2 period, mainly focusing on updates of book checkout limit, search functionality, book histores functionality, and modifications to book models and test cases, and adding email funcionality and social login functionality, etc."
0,"The system handles edge cases very well. Since the team have developed the 1-to-1 and n-to-n relationships very well, the code smoothly works and does not throw an error anywhere.
1. The book disappears from the student's checked out books page if the admin deletes an issued book.
2. The user is properly deleted with the book getting unlocked for other users to checkout.
3. The admin account cannot be deleted."
1,"The system works great for the most part.
Some small errors:
1. Cannot modify email in edit profile of student login 
Manage books does not always list all the books available."
0,"Yes, the team kept on submitting their changes throughout the project in round 1 and 2."
0,"The code has been concisely and properly written. Too many functions are not being done by 1 method and in general, there is less commented code. The code follows good Ruby coding practices with only ActiveRecord queries fired on the database."
0,All the functionalities work as expected.
0,A lot of changes were made after first review
0,Code quality is good and readable.
0,Yes. Well planned and though out models and controllers
0,The project holds up on test cases.
0,I didnot find any mistakes previsouly as such.
0,Everything seems to work fine and schema looks good.
0,Made a lot of changes and commits throughout.
1,"No tests written for model.
Controller tests are only the ones generated by scaffold"
1,"Unable to delete users so could not check some edge cases.
A book that was checked out was successfully deleted."
1,"Some of the bugs after review 1 have been fixed but some are still buggy.
The following functionalities are still buggy:
1. Admin isn't able to borrow books like a student can.
2. Book checkout for some books redirects to a blank page (probably non special collection books)
3. Books index page doesn't display if the book is a special collection book
4. Unable to delete bookmarks
5. Book validations are missing, able to add books with 7 digit isbns
6. Admin isn't able to approve special collection requests.
7. Admin is unable to view overdue fines of students
8. When admin tries to create a new user, a button for login shows up which is unexpected
9. Library attributes aren't actually updated from edit library page.
10. Admin is unable to destroy users (redirected to blank page) and user still exists later"
0,"Yes, the model relationships have been accurately implemented.
Dependent destroy has been used at appropriate places."
0,"Yes, there have been commits throughout the project timeline."
1,"Most of the code is in controllers and views Only devise related code in models.
However, the methods in controller are handling only one task in most places."
1,"1. 
2. not able to test.
3. The admin account can not be deleted.
4. The student has pending request can still be deleted."
0,"Yes. Models has proper relations (has_many, belongs_to)among them such as library-book, book-hold-requests, book-bookmarks, etc."
0,Yes. The team keep on submitting changes throughout the project. There are 132 commits and the most recent commits was in round 2.
0,"The code is clear and readable.
One method only handle one task.
The naming of models/functions are very clear.
Overall the code quality is great."
1,yes it works perfectly except borrowing history cannot be viewed for certain books.
0,Basic functionalities are working as they are supposed to.
0,The 1-n relationships are handled correctly
0,The team kept on pushing throughout the round 2
0,"The UI was very intuitive and all the features for each User profile were easy to find.
The team kept pushing chnages to the GitHub repo throughout the project period."
1,Neither of the extra-credit features were implemented.
0,"The app is deployed on Heroku.
The UI is very intuitive and easy to get used to. The README file"
1,"Once logged in as an admin, there was an Edit Profile with all the required fields for updating the profile details. It also had an option of canceling the account. I'd strongly suggest to remove this feature for the admin account as you should not be able to change admin details or delete the admin account."
1,The listing on the users page is mixed up. 2 rows of data appear in one.
1,Libraries button is not provided in the UI after admin login. Manually redirecting to it via URL works.
0,"The interface is much greater than many other groups. For example, they have all bolded title followed by a horizontal separation line, which makes the title very clear and easy to notice. Besides, in the home page, the three selections are placed center. All are reflecting that they paid great effort to optimize the interface, and did a great job.
Actually, I think this is not an easy job, at least for new learners of Ruby on Rails like me, to edit the page format and even use some characters like bold or center or using different color, I have to read a lot of documents and make many attempts.
So this interface is really a great job."
0,"The semantics and names format in the models and controllers files are accordance to the standardization.
I even learned a lot from their views files on how to optimize the interface."
1,UI very nice but some issues in navigating to some options.
1,The UI is nicely implemented. The options are clearly visible on the home page. Certain issues like navigation options to go back from users screen and books screen not visible. Have to manually edit link to go to homepage.
0,The code has been well modularized and is in general kept well.
0,Last push was 20 hours ago
0,Yes. Looks like it
0,The UI was intuitive
0,Good practices were followed
0,"Yes, there are a number of commits and the commit messages are descriptive of the task they perform."
1,"No, there a lot of flaws in most models. Especially the book model. It's not possible to create a new book as published date field has some incorrect validation/or is not being passed to the backend."
1,"I can still sign up a new account as admin which should be prohibited.
Overall the systems is excellent!"
0,Basically the system works great!
0,"Yes. The project is deployed well.
Yes. The UI is easy to use."
0,User Interface is intuitive
1,"Admin cannot log in without signup, which I think object the requirement for this system. And I cannot change the Name of admin when I choose edit my profile. That might be a small bug. 
And I cannot upload an image for book's cover, hope this function can work in the future.
And as a student, I can change only my password when editing the profile. I have nowhere to change student's university when editing the profile."
0,"Yes, they tested their model and controller thoroughly."
1,No model test cases found.
0,"User profile Management has been thoroughly tested.
An email id can be registered on the system only once. That is no two same email can exist. This has been implemented."
1,"They did well on some edge cases. For example, admin can't delete itself or delete checked out books. Admin can't delete students who have checked out books. However, there are some cases they haven't taken into consideration. When librarians receive multiple requests on same books from one students, approving one request will results in approving all requests. More than one books will be checked out for the same time."
0,The edge case is stated and the nest thing cannot be delete
0,The team pass through all edge cases in the question. Admin cannot delete itself. All students or books that have special situations are unable to delete. I think the team did an excellent job on the edge cases.
1,"Following minor points I noticed in the application:
 
Admin
Not able to create new library, neither can librarian
Librarian
-Able to create librarian account without admin approval
-A librarian can edit other students' info which are not even under his/her lirary
Student
-A student cannot edit, but can view other students' info
Book
-Search needs full and exact string to perform succesfull search operations
-Cannot post a published date before 2017 while creating the book
-ISBN should be able to accept strings as well
-Able to put pdf file type in book cover field.
-bug: steps: log in as admin, created a book succesfully, tried creating another book with same isbn and got error(expected), changed the isbn but the error was not removed, even though books were created in the backend
- even though available count is entered as 5 while creating a book, still the book being created has only one count
 
 
-there does not seem to be a limit on the number of books that can be issued by admin
-don't know if it should be counted as an issue but it seems odd that a librarian can approve special collection request for admin:)
-Scenario: a student has reached the max limit of books he/she can checkout, and places a hold on a third book
Issue: when the student returns an already issued book, he has no provision of issuing the book he/she had placed the hold on.some other student might come in and issue the book before."
1,"Apart from url manipulation, all edge cases seemed to be handled well. Students can create and edit libraries, books and can view other students' information as well."
0,"Case covered. Cannot delete a book that has been checked out.
Case covered. Cannot delete a student that has checkouts.
Case covered. Admin account cannot be deleted.
Case covered, Student cannot be deleted if has books checked out"
0,"All edge cases I could think of, including those above, were handled well."
0,Yes. the project has dealt with edge cases.
1,"Sure. In round one their work is semi-finished. Now it is a good library system. They complete almost all of the function required. I still find some small problems. The cover of the book may not be displayed sometimes. There is no confirmation for password.Students can check out books more than they are allowed. The students can checkout the same books for multiple times, and they can't find out how many books they have checked out."
1,The admin should be able to view checked out books and borrow history
0,Last time I cannot see the website. This time I see the team done mostly all functions.
1,"All basic functionalities work properly. Account creation, validation, and functions work without issues.
But app crashes when admin tried to view all hold requests. Also, approving hold requests from the admin/librarian page still shows the request in the page."
1,"Checked out books view not working for admin.
Admin cannot create libraries.
Book can be created without a cover image!
No validation for edition: accept text and not only numbers. 
Multiple librarians for a single library
New user cannot view the list of books: PhD/NC State
Admin can edit user password."
0,All common functionalities. Also the team took effort on developing the UI. UI looks good and intuitive with easy navigation.
1,"As of my last review, I could not even log in as admin. As of now, all features are working except for the following:
1. Validations are not in place for each book attribute. For example, random strings can be entered for book editions."
1,"They handle with 1-to-n relationships properly. For example, library has many books and has many librarians. We can find this relationships in models and database. However , I haven't found any codes about n-to-n relationships in the work. It is totally OK to design that way. But the team has to make sure they can't create books before creating any libraries."
0,"The team wrote relationships in the model code properly. Also, the relationships in schema is written correctly."
1,"All the associations are dependent destroy,
As a result, i was able to destroy a library which had a book which was issued to a student, and the book request page of the student began failing."
0,Realitonships between models have been established correctly.
0,All functionalities with this relationships are working fine.
0,This part is done perfectly.
0,"Continuous changes and commits were made during the project, including round 2."
0,The team keep upgrading commits during round 2.
0,"Yes,they did submit many changes  in round 2. They push forward their project on Oct 3 and Oct 7."
0,"Yes, they keeped pushing changes constantly.
No commits during this round 2 period"
0,Changes were consistently pushed to Github.
0,The code on GitHub are readable and easy to understand. I am able to see what are the code trying to do in each functions.
1,"All of the code including business logic is done in controllers and views only, no code written in Models.
All business logic should have been there in the Model module of the code."
0,Code has been written cleanly and succinctly.
1,"Code looks Ok, seems like most of the logic was implemented in the controller, making functions here a bit long."
0,Yes. the code is good to read.
1,Couldn't see any testing code written apart from the auto generated code through scaffolding.
1,"Few Observations:
1. Search is case sensitive for example: It works for apple but not Apple.
2.To create a book user has to fill some fields but in the language and published part we are not clear as to fill what and what the code is expected. It would be nice, if there is an indication of what to fill otherwise, it is  really difficult to create a book.
3.Admin cannot see the checked out books and books reserved.
4.Not able to create a librarian to check the edge cases of the application because only librarian can see the book reservations and can't try to delete the book to check the edge cases.And also, not able to test whether the librarian approval by admin is possible as management tab in the admin is not working.
5.Since there are no relationships defined, even though the libraries are deleted, the books are still available."
1,"Basic set of functionalities work. Some of the feedback given last time still needs to be considered.For example, when we try to edit the profile and then change our mind not to edit it and click on the back button, we get a message at the bottom saying that you are not authorized to do that. As an admin we can see the users only if we click on the account and there only the account info is displayed and when we click on the back link then only we can see the list of users which is kind of not flexible.But compared to last time the application has been improved drastically.Kudos to the team."
1,I cannot see the relationships between books & libraries/Books& bookmarks/Students & books& book history or anything of that sort in the models as well as migrate part of the code.
0,"The team kept pushing their changes for the round 2 ,solving potential bugs and enhancing the application."
1,"In the book.rb, we can see tons of different languages stored inside the variable and the use of regular expressions that can be avoided.
comments can be included which will be easy for others to understand the coded.
Also, there are few controllers which are empty and no code is written in them.While Controllers like UsersController has code for bookmarks addition and removal which can be shifted to the books controllers making the functionality meaningful.
SOLID principles and DRY approach can be followed in the code. One method can have one task like if we are checking out a book, the user authentication check can be handled in a separate method."
1,I could not find any test files explicitly written. There are basic controller test files present.
0,I couldn't find any edge case violations.
1,"Many of the missing functionalities have been implemented but there are still many places where the app is unable to load the page like 'management' in admin and there are a few routing issues as well while clicking on 'back' buttons(I was taken to all users page on clicking back as admin in the accounts tab). Also, again as admin, there are book checkout and bookmark options available which I think is a student-only feature."
0,"Yes, the relationships are being handled properly."
0,"Yes, there are commits in round 2."
0,Yes they have thoroughly tested the model and controller.
0,Covers very well on majority of the edge cases.
0,Yes basic functionalities are working well
1,There is an issue between mapping between library and university.
0,Yes they kept on submitting changes till the end
1,Books functionality broken. So cannot adequately test this.
1,"Pros: UI very clean and buttons intuitive.
Cons: Show books failing despite book getting updated with the edits. Can not checkout books (Probably due to previous problem)."
0,Code looks clean. Coding standards met.
1,I could not find any RSpec tests or other user created tests.The only tests were ones generated by rails.
1,"You can delete a book, but deleting a student who has pending requests appears to break the management page. This may be due to the fact that book records are trying to reference the user who was deleted."
1,"It looks like most major functionality is there.  I can create books as an admin, and check them out as a student. Special requests must be approved. However, there doesn't seem to be a notion for the limits of how many books a student group can checkout. There isn't a display on the UI that tells this, and undergrads can at least checkout 3 books. According to the requirements, these limits should be configurable. Features have been updated since the first due date, i.e. validating unique isbns. There seems to be an issue where deleting students breaks the management page."
0,"The team kept pushing changes from the start of the project, to the end. There don't appear to be changes from after the second deadline. They did update the project during round 2."
0,"The quality of the code is good. Lots of effort was put into the validations for models. I would move some of the code out of the controllers and into the models, since the business logic should exist in the models. No methods seem to large. Good work."
1,"Admin account cannot be deleted.
 
Cannot test most cases because a lot of functionalities are not working."
1,"ADMIN
Admin is not able to view/edit/delete students
Admin is not able to view/edit/delete librarians
 
Admin cannot view approval requests for new librarian sign ups.
 
STUDENT
Student can view books from all libraries (even those not in his university)
 
LIBRARIAN
Sign up is failing
Sign up requires librarian to add educational level as mandatory field. This should not be the case
User is asked to select both - library and university. This way it is possible for user to select one university and library of another university.
Cannot check any librarian functionality as sign up is not working for librarian."
1,"No mapping tables are present.
Books-Library mapping is not clear, as no referencing is done over the id or any other value.
User has an attribute 'library' which means one user can have just one library. This should not be the case considering that the student must be able to operate with any library under his university."
0,"Yes, regular commits have been made.
Yes, change shave been made in round 2."
0,"The code looks clean and well written. Good naming conventions used. 
Small understandable functions have been written."
1,Since they don't have models relationships. I believe most of these edge cases are not handled.
1,"Hold request and bookmarks are working well. Search books is also working fine.
I can't return book as a student. But I do see the return book method in Book_controller.
The page went error when I click account.
We're sorry, but something went wrong.
 
However, some functionalities are missing. I can't see how many books are left. When create a book, it always shows Isbn is invalid."
1,I don't see any 1-n or n-n relationships in models.
0,"Yes, this team commit changes in round 2, there are 84 commits in total. Both teammates have commits. And they also created different branches."
0,"The code quality is good. Their code is clean and readable, with many comments."
1,"I do not see a test instruction on their readme.md
Only auto-generated tests in test folder."
1,"When I tried to destroy a higher level object, the objects depend on it were not destroyed dependently.
Borrow book function not implemented correctly, I cannot view my borrowed book, so no tests can be run further.
Admin cannot add new university for using.
Admin cannot delete a user who has borrowed a book because page went wrong."
1,"Admins and students are not functionally separated.
Librarians functions not added. 
Admin not able to update other users' information.
Hold request created, email function worked, but page went something wrong. When I borrowed a book, the student account page went wrong.
Book stock function not created."
1,"This system seems not have any 1-to-n and n-to-n relationship in their model.
Browse into their model classes, no relationship syntax has been added.
When I tried to destroy a higher level object, the objects depend on it were not destroyed dependently.
ex. Universities should have many libraries. Libraries should have many book. Universities should have many students. Students should have a wishlist."
0,"Yes, changes have been made in round 1 and round 2.
Both teammates commit changes.
They seemed has been working in the entire working time period."
1,"The commit messages should be more detailed about what has been added or changed. Do not use oral sentences.
2 issues not closed.
Code is clean, readable. 
Not enough function or logic implemented."
1,"On their website, the admin can't go to the ""Management"" page to manage, create or delete librarian or student account. The admin can't view the list of students who have checked out books or their detailed information. The admin can't view the list of students with books overdue or detailed information.
 
A librarian can sign up and can't log in until the admin approve it. But the admin can't see the information. So, a librarian can sign up but can't log in."
1,"There isn't any associations in models. 
It would be better if they add some associations in models.
For example, there should be a ""has_many :books"" in library.rb and a ""belongs_to :library"" in book.rb. And a library should have an admin, many librarian and many students."
0,"Yes, the team kept committing their changes throughout the project. And they still committed changes in round 2."
1,"The team did some controller tests. However, they didn't write any model tests. The controller tests are basic tests."
1,Admin is able to delete admin account itself. I think the problem is there's no authorization determined in the users controller.
1,"As I could see in the GitHub code, there's no clear relationships written in the model. But by checking the schema, I could see they are trying to map the relationship between books and libraries. Though it isn't totally correct, I think the team is trying to do it in the future."
0,"From the github commit history, we can see the team updated and fixed many functions during round 2."
0,"The code in the project is written clearly, I can easily understand what the code is trying to do."
0,App deployed on Heroku. User Interface is good.
1,"Right now, all the functionalities are available to all the users."
0,The team has been working and pushing the changes from the day the project is given continuously with some motive for each deliverable.
1,"Couldn't see any kind of test cases for controllers/models except for auto generated code. Since, the functionality is not fully in, may be the test cases will be up for next review. But some of the useful test cases can be;
-Login functionality for different users.
-search functionality( which is not working yet)
-forgot password
-access of various resources depending upon the login type.
-sign in/Sign out/Sign up testing."
1,"UI is easy to understand and messages displayed are pretty clear. Even though we have a very limited functionality to evaluate as mentioned in the read me file, the sign up/sign in functionality work with CRUD operations on library/books table along with edit profile all work well. But the access restrictions have to be incorporated.
Upon login, we can find the libraries and books and if we navigate to them, irrespective of user/login functionality, show/edit/destroy operations can be performed which is not the expected functionality.Sign up form ask for education level common for all users."
1,"- We can use seed for auto populating the data. Could see that,in file book.rb, all_valid _languages variable has been assigned more than 20 languages manually which is not needed.
-Some empty models and controllers can be seen.Code cleanup is always preferable. 
-It is better to have less business logic in the view as we are following MVC architecture and avoid the styling of code in the file show.html.erb.
-Good to follow SOLID principles and assign only single responsibility should be assigned to a particular class."
1,No test files are given.
0,UI is well designed.
0,Yup the team kept pushing changes
0,Yes it is really good.
0,It does follow decent Ruby and Rails coding practices.
1,"Pros: Very clean UI
Cons: Can see un-intuitive headers on pages. Student shouldn't be able to delete books. Always asking for password update in edit student. Student should not be able to create new books. Student should not be able to create new library. Library deletion is a privileged functionality. Can delete books without logging in."
0,The team has been pushing changes since September 18th.
0,The app is deployed on Heroku. The UI is easy to use and has links to get to the books and libraries page in a Nav bar. The readme has useful information that also mentions known bugs.
1,Not added
0,The UI is simple and navigation is very easy.
0,"Yes. They made 60 commits in the 15 days, with pushes separated to different time period."
1,"There is only auto test, no self tests written."
0,This app established on Heroku is easy to read and use. It has very neat frameworks and examples. The outlook is good.
1,"It does not have an admin login option, and there is no pre-config admin information. Currently every one as every role can add/delete books or libraries. Don't think it has admin role implemented. Users can log out but not as admin."
1,"After checking out a book the user must still be able to bookmark a book. But here once the book is checked out or requested for hold, the bookmark option for the book is disabled.
When a user signs up with the same mail id and password as librarian and student , the users are directed to the same account of student's
The login page has options to logout. Only if the user logs in, he should be able to logout
New Login

Email
Password


Sign up as a student:
Sign up as a librarian:
P.S. The original admin login is email = admin@gmail.com, password = passwordHomeLogout"
0,They kept pushing their changes throughout the period. And there are some different branches in their repository.
1,"They tested some controllers, but they didn't test any models. t is better to test some model to make sure if there is any bugs in the application."
0,It is deployed on Heroku. The user interface is easy to understand and use.
0,"In the library controller, they define some methods that contain methods of array which I think have good Ruby coding practices. And they followed the structure of Rails to build their codes."
1,"The librarian is somehow broken down, and the student still cannot see the book's library and can borrow book not from their university. The request number is not shown also.
The email notification not work. Admin cannot view all libraries and encounter problems to create one choosing 'hill'."
0,The have tested the books controller thoroughly.
1,Admin is able to delete users who have checked out books or who have reservations in place.
1,"The system functions properly,as expected. However, a student is able to access the list if all students and delete the student."
0,"Yes, the relationship property has been handled properly."
0,The code looks clean and readable. Unit methods related to models have been specified in the model itself.
1,It appears all tests are autogenerated.
1,"1: It appears that the book is just deleted? 2: It appears the book might have to be manually reassigned.  3: Not that I can figure out. 4: The requests is still there, even though the student is deleted."
0,Yes and no. The basic functionality seems there but there is an egregious lack of validation/verification on the book model. There is also a lack of edge case testing. Seems to be no search functionality. You don't have to be signed in to make a book. You can view the admin while signed out (but the password is hidden).
0,"Yes, library to book, university to library, library to librarians."
0,"Big models, no use of helpers. It could be a lot better in terms of layout. Models should be skinny and controllers should be huge."
0,Readme does not contain these details. I can see them allowing deletion of library with books checked out by giving a prompt to delete everything.. Also the case of user editing Special Collection true to false will have implications if there are pending requests.
1,"Cannot find a way to checkout books for an admin account. The UI looks very primitive but that is not an issue. A nice addition is the back to home option on all screens which is something missing last time around.
Buttons still not intuitive for a user"
0,Looks like it is done as requested
0,Yes I could see edits
0,Looks like they followed coding standards and good naming practices
0,"Team has tested the students model and controller thoroughly. Validations, check are maintained very well."
1,"I am not able to test edge cases as i am not able to use admin and librarian role. but in students yes, students edge cases like not able checkout more books that mentioned by university policy are working good. README.md file does not have that much of information about the project and edge cases. It could have been better with more details of navigation and edge cases."
1,I was not able to login in admin using the ID password given in README.md file. So could not test admin and librarian features as librarian has to be approved by admin before logging in. But students are working goof. They are able to checkout books and return them with all conditions. Admin and Librarian was working good in review 1. I am not sure is this because of some changes in done after them made this issue.
0,Team has maintained 1 to n relations properly for university to library and library to books.
0,"Team has been making changes throughout the project. Even after review 1, team has made changed every day and pushed to final project."
0,"Team has done very good job in writting the code. No long methods, MVC structure is maintained, Naming conventions are being followed and it is working as the name signifies."
1,"(1) What will happen if the admin tries to delete book that is issued? book gets deleted
2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?  Student is deleted, but the book is not issued to other student
(3) Can Admin account be deleted? Yes, it can be deleted from admins/
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted? Yes"
1,"1. Are validations in place for each attribute? No
2. Can the book be searched based on title, author, publication date and category? No
3. If a special book is kept on hold, it's availability becomes false even after the reservation is canceled by the student(before it is approved).
4. If a reservation request is on hold, that book as well is counted in the quota even if it is not approved, so student can not checkout any more books till the reservation is cancelled."
0,Yes the relationships have been done properly
0,Yes the team kept on committing in the second round as well
0,- Test cases are now present
1,"- Most of the features which were missing have been implemented now. All the basic functionality working fine except for some problems here and there which a normal user would never do.
- Managed book issue features really well but could have avoided showing the book not available in my library to avoid confusion."
0,"- Yes, mapping is done in the book table itself but could have used references instead of an integer."
0,"- I can open edit profile page for any user even if they are not logged in. Extra not implemented
- Very well written code. I found some new things like ""scope"" which I would love to explore. Their code structure was as per the standards.
- Used module like 'time' where needed"
0,Locations of tests are not indicated in the README
1,"The edge cases are not represented in the README
I edited the admin's email successfully but none of the links worked afterwards.
Book searches only return complete matches.
Dates can be any String.
Duplicate starred books appear, unsure why."
1,"To the teaching staff, not the reviewee: I don't remember the submission I made for part one for this assignment. It's difficult to comment on what has changed when I can't remember or see my previous assignment.
 
Students cannot see the list of all libraries.
Students cannot see their overdue fines.
No extra credit is implemented. I can change the URL to edit another student."
0,The database schema appears to reflect an appropriate handling of these relationships. The n-n mapping of starred books is one I noticed was well implemented.
0,"There are frequent commits up to the project deadline; however, the most recent commit was done after the project was due."
0,I couldn't find any issues.
0,"Yes, it has."
1,"(1) It handles this case correctly.
(2) It's still pending.
(3)no, it can not.
(4)Yes, it will."
0,"It uses availablity  instead of amount to present book's stock status, which is not good."
1,The team has tested two models - not thoroughly. There's only one test case in each of the models. Failing test cases should be added. Controller tests are good.
0,Important edge cases are handled well.
1,"All functionalities working OK except few : - Book Search is not working as expected. There are no errors, but the search results look wrong.- Admin/Librarian cannot see list of students who borrowed books, either checked out or hold request.- Admin/Librarian cannot see total overdue fine in a library.- Validations in most forms are missing.- Boolean values should be shown as 'Yes' / 'No' in the UI - instead of 'true' / 'false'- Admin can change passwords of librarians and students."
1,"All relationships are well implemented. There's one concern though : A book has many borrowing records. I assume this is to implement history feature. However, it can be easily achieved by creating a one-to-one relation between borrowing_record and book. Meaning, a borrowing record could be a different table with a foreign key on book_id. There's no need to have many borrowing_records in a book. You can simply query borrowing records that match the book id to retrieve history of a particular book."
0,Yes. The team is been pushing code consistently throughout the period.
1,Code is pretty good. Nested blocks in Books controller could be simplified by pushing some of the logic in models.
0,The librarian model and controller has been tested well.
1,"1) The book gets deleted and gets removed from the students issued books list.
2) If the person is deleted still the next on hold doesn't get the book. The books remained as unavailable
3) No
4) Not sure but the bookmarks persists
The Readme.md does not cover the details of the corner cases."
1,"Student - > view all books -> details of book -> back (not working)
approve book by admin sent an error but the book was approved.
Student unable to return books. So the next student on hold is not getting the book.
Librarian cannot see hold requests
If the previous person returns book still the next on hold doesn't get the book."
0,"No, the 1-n relationship works perfectly ok."
0,"Yes, the team has commited all through and also commited changes for the second round."
1,The code looks clean and understandable. The UI is a bit confusing and difficult to navigate but works decently good. Naming of functions classes are properly done.
0,The number of commits is very low and hence it seems like changes were not always pushed
0,It doesn't seem from the code that they have implemented tests.
1,No navbar for some pages hence navigation is difficult.
0,"Yes, looks like good coding practices have been followed. Especially about have more code in the model."
1,Consistently committed. Did not commit after deadline ended.
1,"Some pages need back buttons, a navigation bar would be nice but isn't 100% necessary."
0,Can see commits from past 7 days
0,Nice error handling for false urls
1,"Pros: UI looks clean. Library defaults to 0.0 overdue fines if string is entered. Dashboard looks good.
Needs improvement: No way to go back from pages back to the dashboard. Buttons not intuitive for non tech user. Book cover should not be a text box in add books. Published date should not accept string. Should not allow book creation without ISBN. No option to reject librarian requests. Approve librarian should not allow to create new librarian. Library creation should not allow no name. Back buttons are configured wrong in Library page"
1,"yes, proper commit time to time was done for project"
1,"Yes, Team has done thorough testing of the of admin and librarian controller. Student were not able to search book and I was not able to checkout. It will be good if you can provide list of books in students controller and in front out that checkout button. I searched the book from librarian controller and searched with same name in student controller but it it didn't came up. This is a small thing, it can fixed. otherwise all the things were working well."
1,"Yes, everything is clearly defined where to move for next step and is easy to use. just putting some images and things will make it look better, but otherwise it is good to navigate"
0,Code on git is very well commented and defined properly. its very clear and understandable.
1,User interface is sufficient and easy to use but it lacks consistency.
1,"The coding standards are followed and well organised.
I have a couple of complaints, when admin edits his own profile password is displayed as plain text and 
Sign-out is displayed only on the home page which is kind off tough to use."
0,- There were constant commits for the last week.
0,- Have written one test case for library and librarian
0,- It is bit difficult to understand different listings as most of them look similar.
0,- The code looks similar to the code created by the scaffold. They followed proper conventions and used ruby functions where needed instead of creating their own.
1,The UI is intuitive but I have no ability to see the git repository
1,I have no evidence of extra credit features and I can't see the git repository.
1,The repo is private and I don't have access to a README file.
1,I can't review the code on Git because the repo is private. There are no instructions for how to log in as the admin.
1,"Should add ""all books"" for student."
1,"I could not find Admin login credentials. There is no README file. I am unable to test any Admin related feature.
I could not see the list of all books which is why I could not test some of the Book related functionalities too. The only way to find a book is through search which did not return results no matter what I searched.  
Also, I could not approve librarian's account. The librarian stuff couldn't be tested too.
UX is pretty good. I don't need to find links to navigate to different pages. They're all in the right place."
0,UI is pretty good and seems to be good work done at the backend as well but could be checked
1,"Cannot comment as the github page is not accessible. Also, since admin details are not provided, the librarian could not be approved so the details of the librarian could not be checked as well. And since the database has no books, the student functionalities involving books could not be performed to check."
1,"Github page is not loading, probably it is still kept as private so admin details cannot be retrieved. Thus, no admin operations could be checked and performed."
1,Github page is not visible so could not be checked for details
0,Didn't have access to the repository
0,Hold request seem to work fine thanks to testing. Great!
1,There are not enough links to easily navigate through pages. A home and back bottons may help with this.
0,Couldn't acces repository: 404 error. Might be private.
0,"Can't see github, so no idea."
0,Cannot view README.
0,The gitHub url is not avaiable
0,Github repo is private.
1,"Controller functionality has been shown properly from the links, but role based authorisation has not been checked when accessing other pages via the url."
0,Github repo is not public and no READE file has been provided. So admin credentials are unavailable at the moment for review.
0,Unable to view private Github repo.
0,"No repo provided, cannot access the commit history"
0,"No repo provided, cannot access test cases"
0,"Have a pretty completed interface with function, but seems the repo is not public to everyone so I cannot access the admin and librarian functions"
0,no git repo provided and no admin login function provided
0,Yes. they are working on their project through the whole period
0,can't see github and don't know admin account
1,"readme file not available
 
""read only"" labels visible on form page
 
was able to view other student's information
 
was to update other student user's password(id:1), new password is ""adminnewpass""
 
http://34.203.230.84/libraries is showing empty, maybe the universities are hard coded but the page should be disabled in that case
 
http://34.203.230.84/books page began failing after creating a new book(bookid:3)"
0,"I am not sure about that, but I believe so."
1,The website is easy to use although not all functions are implemented.
0,"I am not sure whether it is my problem or not. I can't find the repo with the link provided. Is it a public project? Since I can't see the code and README profile, it is hard to answer these questions. All I can do is to guess what the code is like from the website. I can't make all the reviews without admin account"
0,Github access not provided for this review.
1,"Profile management is working well. That model and controller seems to be working fine.
Check out on normal books throws some error. undefined method `[]' for nil:NilClass. Please fix this.
Special collection book first goes to librarian for approval. That's nice. It would be great if the student user could also see the special item book he has requested.
Currently a student is able to modify the ISBN of a book. Please modify the code and apply access constraints."
0,"The user interface looks clean and intuitive.
A user can clearly see what all operations he can perform with Library management system.
Appropriate control access is given to the users of a particular level.
README file has not been provided."
0,Relationships has been handled carefully.
1,"For the modules implemented so far, I believe that good practices have been the focus during implementation. However please review whether some functionalities can be clubbed up under a single name, eg: book_histories and book_requests.  Methods ""books_controller.rb"" are specially appreciated."
1,"Yes, the team has committed very frequently on Github even during round 2. They have used multiple branches for different purposes. But after round 1, they seem to have not used branches. Also, one commit is made on 14th October. Though it is done after the deadline, the overall use of Github is good."
1,"Yes, the code is written in very human-readable way. All the standard coding guidelines have been followed and ruby principles have been used. Also, good naming conventions are used and functions are small enough and do what they should actually do."
1,"Yes, the 1-to-n and n-to-n relationships have been handled perfectly using foreign keys and separate tables. The team has created tables like wish_lists, student_current_borrow_lists, library_book_lists, hold_lists, borrow_histories to manage relation between different entities such as students, their requests, bookmarks, libraries and books etc."
1,"Yes, the functionalities work as expected. For example, search books works perfectly fine. The student gets placed on the waitlist if the book is already issued."
1,Book gets deleted even when it is checked out. All the objects related to that book about checkout and hold requests get deleted automatically. The same thing happens for the student. All other edge cases seem to be work fine. I tested corner cases for hold requests and special collecton books too. They work fine.
1,The team has used RSpec testing framework to test the university model and controller. It is good that they have preferred RSpec over ruby default test framework. But the test cases for the model are not designed properly. only 2 tests have been written. More efforts should have been given to tests for the model too.
0,"No models are included in the testing, requirement was to test at least one model AND at least one controller"
1,Source code link is broken hence cannot verify this.
1,Testing not implemented.
1,"In the 1st round of review, none of the functionalities could be tested as nothing except student login was working (not even student sign up).
Now, however, most of the functionalities are working fine. I observed the following inconsistencies:
1. There are hold requests for book even when the book count is > 0 and the book is not a special collection book.
2. No message display on book
3. Book count does not increase after book is returned by the student 
4. I was able to edit student's university and education level which should not be allowed according to project description 
5. Admin isn't given the ability to approve special collection requests.
6. Admin isn't able to do what a student can (like he isn't able to checkout books)
7. A book can be edited and published date can be set to a future date, validation is missing
8. Librarian is able to edit library attributes without admin approval
9. There are different books with same ISBN"
0,Student model and controller has been thoroughly tested
0,"Yes, it handles such relationships extremely well"
0,Code is more readable after round 2
0,"Yes, they have done all tests of Admin, Book, Librarian, Library, and Student."
0,"Yes, they handle all the necessary relationship between models clearly and correctly. No errors have been found."
0,"Actually, this team has already completed most of the functionalities during round 1, so they only have a few commits during round 2."
1,"First I got confused by the model names Borrow and History, which of them refers to the borrow histories? These can cause ambiguity.
In the controller of Borrow, I saw `checkout.each do |bo|`, where I quite wonder why they use ""bo"" to map, does it stand for borrow, or book? The thing is that, if this code block is long enough, the implicit ""bo"" will definitely cause confusion.
Besides, they appear that they don't like to use ""word_word"" format of their method names, while the names of other methods that are automatically generated remains the original ones. For instance, in the controller of Borrow, both ""has_book_and_student?"" and ""holdrequest"" appear to be the name of methods, which are not accordance to an integrated discipline.
It looks like that the team members did not form an integrated habits on how to properly name their models, methods and variables manually."
0,They have covered almost all controllers and models of the system in testing. Just they have not covered failure test cases.
1,"If the book's available counter is 0 and hold counter is non zero, then when admin update the available counter to 1 (new addition of book) then by default hold counter does not decrease by 1 (i.e. it does not get issued to the student having hold request)
If student gets deleted who had book issued and there is non zero hold request count on that book then book is not automatically issued to the next student who has hold request and book's available counter remains 0.
Admin account can be deleted and also multiple admin accounts can be created which is against the given requirements of the system.
If student gets deleted who has checked out books then I am unable to see borrow history of those books and system throws error."
1,"They have implemented basic functionalities very well.
Just the minor navigation issue is still there whenever I click on Sign Up button on home page it takes me to page to select user role in which I need to sign up, in that page there should be one ""Back"" navigation link to get to the home page for two reasons:-

Firstly, for smooth navigation if user change the mind in middle then Back button should be there in UI to take back to home page.
Secondly, as they have not swapped the positions of ""Login"" and ""Sign Up"" button on home page, by default when user enters login information and hit ""enter"" button, it triggers ""Sign Up"" button instead of ""Login"" and takes user to page where it is required to select user role for sign up and thus there should be back button on that page as user did not intend to sign up

Also, the notice messages are coming twice at some places like when I update librarian through admin login it appears twice."
1,"Overall relationships among entities are well defined and resultant DB design is pretty good.
Just one note that they could have added has_many ""students"" relationship in ""history"" as history table consists of many student ids who checked the book. To avoid automatic deletion of records from ""history"" table consisting of the student id for which particular student is deleted, they could have set dependent option as ""delete"" instead of by default destroy."
0,"Yes, they kept on pushing changes regularly and even in round 2."
1,"In general code quality is good. But there is one problem in code structure, no business logic is implemented in model. All business logic is implemented under controllers only."
0,The student is tested thoroughly.
1,I can't delete admin as expected. If a student is deleted that has books checked out then the books don't appear anymore in the checked out book list as expected.
1,A student can make multiple hold requests on the same book and check out the same book multiple times.
0,They have tested at least one model and one controller.
1,"The system fails some edge cases such as :
we can delete a book that is issued
we can delete a student who has checked out a book
All other test cases are passing."
0,All the functionalities are working and I could not find any problems.
0,They have handled all the relationships properly.
0,The team submitted their changes throughout the project. The team has committed the changes in round 2.
0,The code is clean and readable. One method handles only one task and it easy to understand the code.
1,The admin student and librarian table can be merged into one table. A librarian belongs to library and is deleted once a library is deleted. But the librarian should not be deleted once a library is destroyed. He/She should be able to change his library.
0,Basic test cases for all models have been written and asserted correctly.
1,"Role-based authorization does not work when any user can create any other user. Also, a student can view other students' info and librarians can view other librarians' information."
1,"Books module has been tested. 
However, some corner cases could have been tested more."
1,"1) Deleting a checked out book also deletes the related records like transaction etc.
2) Deleting a user who had checked out a book, doesnt allocate the book to users under hold requests automatically.
3) Could not delete admin.
4) Requests gets deleted upon deletion of student."
1,"Most of the functionalities are working as expected.
> Cover pic of the book was very large in review 1 which has been fixed.
> After logging out, and then clicked on sign up, nothing happens. Page refresh is needed.(review 1) - THIS HAS BEEN FIXED.
> Librarian signup is working perfectly now.
> Librarian can not add book to their own library. If the flow is through edit, it can add it to any library other than its own which isn't correct.
> Email functionality is not working."
0,"The relationships have been properly implemented. During creation of a book, it asks to be linked with a library, hence same book cant be linked to multiple libraries."
0,This team has continuously submitted their changes throughout the project. I can see above 90 commits and a lot of them were after round 1 which displays the time and effort put in for the project.
0,The team made code changes and pushed their code during round 2 as well.
1,I don't find any testing that has been done except the auto generated code when we create a scaffold to my knowledge.
1,"1.When the available quantity of books is zero and when the student tries to checkout the book, it comes like held in queue. And then when the same book is bookmarked and again the checkout option is clicked, then the message prompts like Book has already been checked out. But it is held in the queue. Kind of confusing.
2.After student checks out the book and if he wants to return then couldn't find such an option in the student account, but it is displayed for admin.
3.When the user checkouts a book successfully and if the admin tries to delete that user then the books count for the books issued by the user is not reduced and if the new user signs up and checks out the book, then he is held in queue. 
4.If there are two books and if the first book is checked-out it is not getting checked out but the second book in the row is getting checked out strangely.And if try to return the book by logging into admins account the count is not reflected in the students books."
1,"Well, for the users who has not logged in, they can still see the libraries/books/universities which is absolutely fine. But after clicking on show, we get the edit option there which does not allow the users to edit but it is unnecessary.This was mentioned in the round 1 which I guess is a trivial issue.The drop down was not properly working in the round 1 which has been fixed by the team perfectly.The LMS link is not doing any action just as the last time. Not sure why that is there."
1,"The relationships are handled properly by the team. Library can have many books, book can have many bookmarks.Library has many books,librarians,book-requests and University can have many libraries and students. Although I didn't understand why a Librarian/Student has to have one user?"
0,"Code quality is good and the methods were written in a neat,  succinct manner."
0,Yes the team kept pushing their changes continuously onto git. We can see that the work has been divided equally among the team members and everybody contributed for the project. The git hub commits are named meaningfully and anyone who visits their site can understand at what level they are with the project i.e. the progress of the project.
0,"Yes, they have write unit test to make sure correct."
0,"All the situations mentioned above and I could come up are handled, good work!"
1,"The naming of files is very clear and user can understand what is it meant for and code is readable. At some areas, for example, in bookmark controller, we need to handle things that are related to bookmark but we are also verifying whether the user is a student or not, which can be checked in the relevant controller or something like that.Can find this checks in some other areas too. So, since we need to follow DRY,these type of functionalities can be reused if once written somewhere.
We can see the multiple checks for not authorised to perform a particular action in the code. If the user is not authorised may be he should not be accessing such kind of functionalities. For example, if the user is not logged in, then he should not be able to edit the books/libraries/universities and that link can be hidden and thereby the check can be avoided multiple times."
0,"Yes the team has tested Book requests controller and model. However, while they have tested for success of creation (request or hold based on count of books) and deletion of book request, there are no failure test cases mentioned."
1,"1 The entire book history of the given book is deleted which includes students who have hold requests or are currently having book in their possession
2 When a student with books issued is deleted, unfortunately the book available count is not updated. This is like that copy of book is completely lost. No other student waiting for that book is affected at all.
3. No.
4 Yes
5. The links to creation of university of library or university can be accessed by a student account as there is no user type based redirect method, however, even though it allows to fill the form there is a controller based access control to prohibit making changes."
1,"Yes, The team has implemented the functionalities of book hold  and request. However, even though there is a google login button, it does not function. The Overdue fines section in students gives ""Fill In"" when no fines exist. The problem with navigation buttons getting freezed up after logout have been resolved as well. The bookHold request has been perfectly implemented and enters a book to hold immediately if quantity available is 0. The cover images for books are displayed for individual books as well."
1,"Almost everything, but the borrow history part is down."
0,"All relationship are clear and correct, and the dependency is also"
0,All of them are keep update their project.
0,Yes the team has submitted their updates to github at all stages.
1,"1 Yes, Methods are concise and implement only in one functionality.
2 No
3 Access Priviledges has many nested calls, which can be reduced by appropriate session controller design"
1,"Most of part is good, but part like borrow which contains many functions have many verifications may contains many repeat parts. It would be a better choice to write same verification in one method, also seems much work are done by someone individually and there isn't much definition for code."
0,The code looks to be thoroughly tested
0,Corner cases seems to be working fine.
0,No such changes were made but REadme mentioned about all functinoalities this time and all the functionalities semms to be working fine.
0,All the mapping and logic seems to be working and proper.
0,The 1st credit seems to be working
0,"Yes, the commit frequency is very high"
0,Student model and controller
0,User interface is aesthetically pleasing and easy to use
1,Cannot see any RSpec file for testing.
1,"Reading the code takes some effort, more comments would be helpful"
0,Yes they kept on pushing changes throughout the period and also they have used issues functionality of github to divide the and track tasks.
0,Yes for admin and students controller and models they have implemented test cases.
1,"Yes its easy to follow. Just one minor point in the login page, the location of sign up and sign in button needs to be reversed or handled in code so that by default user hits ""enter"" in keyboard after entering credentials they gets logged in and not redirect to sign up page. Also there needs to be navigation button on sign up page to go back to home page if we don't want to proceed with sing up."
0,"Very terrific user interface.  Not only easy to use, but also quite fully developed."
0,"Well organized code following ""good Ruby and Rails coding practices""."
0,The code looks good.
0,The user interface is amazing and the README gives all the details required.
0,UI has been neatly designed and has a good look. All method functions listed on the left-hand side helps in manoeuvring the flow.
0,Understandable interface
1,"All the query actions are in controllers, nothing in model."
0,Code has been regularly committed and merged on Github.
0,No bugs
0,Very good!
1,No.
0,Excellent jobs!
0,They do keep working on this.
0,Great testing plan. They have worked on it very hard to give a thorough test plan with different scenarios in mind.
0,Test plan is pretty good.
0,The test plan is good and covers every details in deep.
1,The team has done good job in test plan section. The discussion of scenarios is good but one lacking thing is the missing discussion of creating rspec or feature tests. The team mentions that they will write tests but what tests would this be is missing.
1,They have visualization which are some tables that screenshot from somewhere. The quality of the picture is not good which is not easy to read the context of the table. They should create the table by excel or word will help fix this problem.
1,"Only showed what marking/removing a sample review will look like. I would add a visualization of what students see when looking at good reviews, and how students can mark their reviews as private/public."
1,"Scope of Improvement:
There is definitely some improvement after the first round review as I could see some screenshots added. But still, the team could have just improved it by adding some diagrams and flows.
I would suggest the team could add some UML diagrams like ""Use-Case"" or ""Sequence"" which will help the reader to understand the feature and proposed changes effectively and quickly."
1,"I cannot find any class diagram. Though they have attached screenshots of previous team's work. And from that, I feel the team will able to continue their work and will definitely complete it."
1,They did add two screenshots of how the expected output is going to look like but i don't think that showcases all the objectives they are supposed to achieve. They can definitely add more visualizations.
0,Seems they will involve a lot of changes. But overall their design is good.
0,Yes the design is crystal clear from the pictorial description and their detailed explanation of each step
1,"The design is very simple and easy to understand, however, they don't have too many details about their approach of the design project. Once they start working on the project, they should be able to provide more details about the project itself."
1,Only thing I thought was maybe too complex was the is_similar_to idea. But it's also possible I just didn't fully understand this.
0,The document is pretty clear and simple.
0,The design document is very simple and explains every change very well. The Use-Case diagram also provides a good way to understand the problem.
1,"From what I can understand, the team has done good work on the design. It looks good. However, one suggestion is to explain it better in the DB design section as it was not very clear for me as a reviewer. The writers should know that the reviewers lack context in some cases. The writers should provide the context first."
0,This seems like the most simple way as they are not adding additional models/controllers.
1,Replacing the model and/or controller with a column seems simple but to implement will not be easy as to check from which all places the table gets updated from there whether the values are getting committed to the table or not.
0,"Based on the explanation they gave for what and how are they going to do the design, i think it is simple and easy to understand."
0,Very impressive design.
0,Yes the document follow appropriate principles.
0,The design looks good and is very informative.
1,"The design looks good. However, some changes can be made to make it better. First, the document should have an introduction to expertiza. This will help a new reviewer unfamiliar with expertiza to understand the document better. Secondly, the problem statement and ""what this project will add"" section seem redundant. They both have same information. I would suggest that it can be removed."
0,"Yes, it seems well-designed."
0,The design does sound to be following appropriate principles and using appropriate principles. I couldn't find any problems with their proposed design.
0,Very well-explained. One of the best wiki pages I have seen so far with adequate and relevant information and keeping it to the point.
0,Definitely.
0,Changes are identified and implementation is also included.
0,The design document explains the changes very well and also the DB design changes are also explained very well.
0,Great job explaining the changes needed in each file.
1,"""Instead of creating a whole new model (and possibly a controller) we have decided to add a column to the existing assignments model. This column called is_similar_to will be used to get sample reviews from a previous assignment.""  However it's not clear to me reading the wiki how this new column will get populated - that is, how will the system determine that an assignment is similar to some other assignment?"
0,"They clearly mentioned the changes that they are going to do and also gave the file names of where they are going to change what. So, i think they did a good job at that."
1,The team doesn't provide visual aids at this time. But their description is still clear.
1,"There was no visual aids in their design page,  they lacked diagrams of their ideas or screenshots or UML diagrams to explain their ideas more."
1,"They don't have any visual aids like UML diagrams, mockups of screens or tables."
1,No visual aids used.
1,No visual aids used. Use of flowcharts or usecase diagrams is recommended. You may also have mock screens of the proposed design. Plenty of softwares available online.
1,"There are no visual aids. Since most of this relies on changing the view, readers could benefit from a mockup of the review page(s) that will be affected."
1,"Scope of Improvement:
I couldn't find any diagram or flow in the document. Though the description is good and understandable, it would be better if you could add some flows which will provide better understanding to the reader."
1,They have not provided any diagrams or tables as visual aids.
1,The solution was not that detailed to the point of mentioning function names or classes to be included. They just wrote their solution and the files that may be affected by their implementation.. Nothing regarding the classes or methods to be implemented was mentioned. They should expand more on what they intend to do.
0,They have clearly mentioned the files that would be changed and the design pattern that they would be using. I think that is more than enough in the initial submission round.
1,"1. I didn't see the methods to a wrong class.
2. There is no code about, so no code smelly so far.
3. The design hasn't started.
4. The project may have the potential to increase the response time a lot."
0,All the points seem to be covered by the document.
1,"Scope of Improvement:
I do not much agree with the concept of ""public"" and ""private"" review. I believe providing this option to the user will only restrict the scope towards the public review. There me some review which are private, but instructors will not be able to share them. I think the instructors should be given the full authority to share a review (At the end, they better know what to share or not). This is something the team could discuss with the mentor or professor."
0,"They have mentioned about implementing a new function through Delegation pattern, which will allow object composition to achieve code reuse through inheritance."
0,They give a good description of what need to do on their project. And they also include files that need to be changed in the document.
1,The changes they proposed seem to resolve all the issues listed by the problem statement. But they lacked diagrams of their ideas or screenshots or UML diagrams to explain their ideas more.
0,Very well explained.
1,They only have the explanations of the project and how they gonna change the files. There are still need more details about how to implement the project functions and test case.
1,Proposed changes seem good but lack flow diagrams.
0,The changes are explained really well and it is easy to understand
0,Each change has useful explanations for the rationale behind it.
1,"""In our project, the implementation of a new functionality would be through a Delegation pattern which is an object-oriented design pattern that allows object composition to achieve the same code reuse as inheritance.""
It's not clear to me from reading the wiki how or why the Delegation pattern is used."
0,Most functionalities are included.
0,"Yes, all the current design , its flaws and their design to rectify this issue. All the functionalities required was mentioned. I didnt find anything missing."
1,"The problem statement mentions something about adding a page where students would give consent for their reviews to be shared anonymously. This sounds like it's sort of an assignment-wide agreement. While I don't see this mentioned in the student's wiki, I also don't really feel strongly that something like this is needed."
0,"Yes, mostly all functionalities are included."
0,Good introduction and why the need to make changes
0,The design incorporates all functionality.
0,"The document is generally complete for this time. It includes problem statements, what need to do, files need to change."
1,"All the current design , its flaws and their design to rectify this issue. All the functionalities required was mentioned. The solution was not that detailed to the point of mentioning function names or classes to be included. They just wrote their solution and the files that may be affected by their implementation. Nothing regarding the classes or methods to be implemented was mentioned. They should expand more on what they intend to do."
1,Their design doc only has the description of the project and how they change the files. Missing the part of how they implement the project functions and the test case.
0,Very well done.
1,"Apart from the good work, the team missed adding the Test plan and usage of diagrams. Since you are making changes in the model, you should have a test plan in place to make sure nothing breaks. There may be testcases in place already and you might just have to add onto them."
1,Missing testing plan!
1,"The design is a little light on details.  For example:
- How exactly will this be accomplished?  ""If this review has already been shown as an example, the button should be “remove this review from examples” instead.""
- ""For the other participants to view the sample reviews, the file list.html.erb which is under the views/student_review directory.""  This sounds like a different strategy than is noted in the project requirements, where it says ""clicking on one or more links that say, e.g., ""Sample review"""".
The design does not include a testing plan."
1,"The team has failed to mention the testing plan and purpose as to why they plan to do. 
Rest the team has done a good job in completing the design doc and seems correct."
1,"In the test, I can see the test for all 8 controllers. But all this test seems auto generated, no specific code for testing if the user uses the same email to build the account was found."
1,There are no tests in the model and the controller seems to have only the autogenerated tests.
1,"No, None of the models or controller were tested"
1,The code is not thoroughly tested
1,One controller is tested but not one model
1,The validation checks seems to be in place for most of the models!
1,The controller test is carried out well and the system handles duplicate emails.
1,There are not tests in place. I dont see any tests for any controller or model.
1,"1. 2. 5.Couldn't book and bookmark the tour 
3. The admin account couldn't be deleted
4. Can't creat tour with end date earlier than start date.
6.Others
In the README file, there isn't details about Edge cases."
1,There was no mention of the edge cases in the README. I can't speak toward the edge cases since I can't delete anyone or book anything.
1,"Many of the edge cases cannot be tested as alication fails to respond
1) Cannot deletedtour
2) Coudn't book ticket and test deleting user. Also, the customer creds provided in the Readme file turns out to be admin and cannot be deleted!!!
3) No, Admin cannot be deleted
4) No
5) Same reason as (2)"
1,The system is not able to create tour or book a tour. It reaches an error page.
1,"1) Admin does not have the option to delete tours
2) Can't test because I can't book a tour
3) no
4) no
5) can't test bc Admin can't delete tours"
1,Cant book tours. So I cannot test most of the things written here. Cannot delete anyone from admin account.
1,I cannot test the waitlist functionality. Tour start and end validations work. Duplicate emails are not accepted which is good.
1,"The booking functionality does not work. so we dont know when a customer is booked in a tour. so corner cases related to booking not handled.
admin account can be deleted.
Tour is not allowe an end date before start date.
admin can delete customer bookmarked tours"
1,"-The Admin part. Couldn't edit the profile of admin.Couldn't create and destroy the tour. Can create and destroy the user.
-The Agent part. When I create a tour, it gives me an error page. But when I come back to the tour list page, it shows in the list. 
-The Customer part. I couldn't book the tour and add myself to the waitlist. Couldn't bookmark the tour. But I can click create new waitlist when I didn't sign up. There may have some bugs in the link.
-Others"
1,"I can't book or waitlist a tour. I can bookmark a tour. I should be able to edit my email when I update my account. I can't delete a account. I cannot delete an account logged in as admin either. The error says ""cannot delete admin""."
1,"Many of the basic functionalities were found buggy, including
- Adding a new tour, booking a tour
- Edit profile
 
App was not deployed correctly in first round and cannot say authors fixed isssues or not. However, one of the comment was not fixed
    - Parameter whitelisting is not done on Waitlist Controller. This might end up with as a big loophole. This Application is suseptible to SQL Injection. Would be great if whitelisting is added.
def wait_list_params

params.fetch(:wait_list, {})

end"
1,"I wasn't able to access the website in the first round of reviews due to some deployment problems, but these problems have been fixed and correctly implemented. Although, there are many internal problems such as inability to book or create a tour."
1,"- no link for admin to make a tour
- 500 error when booking tickets
- admin can't bookmark
- admin can't view reviews
- update user button updates the wrong user
- agent, more details sometimes errors out
- agent, update tour errors out
- agent, delete tour errors out"
1,"While creating tours, there is a routing error. When I try to book a tour, nothing happens. The application did not run when we tried in the first review, now it seems to be running, so the team did a goood job to get this going.!"
1,"Yes, the authors did fix changes but waitlist functionality is not being handled. There is the waitlist option but on giving a large number for waitlist, there's a page error. On entering 1 ticket, there's no message confirming tour is  booked or waitlisted. Cannot view on my tours either or photos. Bookmarks work. I'm not able to delete users as an admin.  Validations work great but as an agent , I'm not able to upload a photo and upon submitting a new tour, a page error appears saying ""We're sorry, but something went wrong."" Reviews work but i'm not able to view users as an agent."
1,"I am not able to create a tour as an agent. It shows the something is wrong page when I create a new tour. Admin is given all the functionalities of a customer which should not be the case. admin cannot add a review and book a tour and add it to wishlist. admin should be able to view customers booked in a tour. the list of tours and the list of agents. Booking functionality doesnt work if seats given are more than available.
Waitlist functionality crashes. Many flaws in the design"
0,"Yes, they use 7 models and the relationship between is pretty clear. These 7 models are all reasonable, user, tour, review, booking, bookmark and waitlist. use -tour, user-review, tour-booking, tour-bookmark are all 1-to-n. Tour- destination, tour-booking, tour-bookmark, tour-review are 1-to-n. Booking-waitlist is 1-to-1."
0,The model handles those relationships.
0,"Couldn't understand how they have handled this but there is 1 to 1 relationshi for booking and waitlist and no relation for tour and waitlist. Couldn't book the tour, thus donthave conclusive evidence"
0,The system handles cardinality well using the hasmany and hasone properties in the models.
0,All relationships are captured correctly.  There are no 1-n and n-n relationships handled incorrectly.
0,Yes. The relationship seems to be correct in all the cases.
0,The DB design is appropriate and handles the relationships properly. There was a mapping table for such 1-to-n relationships and the models handle the relationships correctly.
0,Yes they do
0,"Before the first round, the team kept working. In round2, they used one day to fix several bugs and added some functions. I think the team is great enough to fix all the problems in one day and it's more efficient to work with communication."
0,One person seemed to do more work than the other and all the work seemed to happen on Friday.
0,The team kept pushing changes regularly as well as in round 2
0,"Team has worked consistently. However, the number of commits by each member tells us different story. It's 19 vs 3 vs 51 commits to ""Vijayaganesh"""
0,"Yes, the team committed frequently and they continued committing changes in round 2."
0,There are a lot of branches in the repo and there are consistent updates in repo throughout the time of the project!
0,The team has been commiting changes in the round 2 and throughout the project. Commits were made from time to time and changes were being well commented and pushed to github properly.
0,The code is well structured. One method only handles one task. They use separate method in booking and bookmark. All the naming is great. No long methods and nested blocks are found.
0,Most of the functionality is in the controller and the model has the connections. The method names make sense and do what they are supposed to. There are nested blocks but those are necessary for functionality.
0,The code is well written and follows all the guidelines mentioned above.
0,Team have used standard coding structure and each method handles the task it is meant to.
0,"The code is clean and readable.  I did not see any instances of one method handling more that one task, naming is good and descriptive, and I did not notice any other issues with the code."
0,Code quality seems to be really good. Most of the checks are in place in both models and controllers. The UI is clean and the application finally works.
1,"The team keeps working until 3 days ago. For commit part. There is a lot of the same commit with no more details. Most of them just simply fix the bugs. It will be better to give more details of each commit, which will make it easier to find the earlier version."
1,Don't have access to the github account.
0,Team has worked continuously and all the team members have contributed in at least 5 commits.
0,Yes the code was regularly deployed across numerous branches.
0,This cannot be determined as the link to GitHub does not work.
0,Yes. There are 4 branches and there are consistent commits in all of them! Good work!
0,The git stats show that they did push their changes throughout.
0,Yes the team has pushed changes from time to time on GitHub over the period of the project.
1,There is some auto-generated test model in test fold and some simple test was created.
1,Model and Controler don't seem to be tested.
1,This cannot be determined as the link to the demo site does not work.
1,Did not find testing code for one controller and one model in the github repo.
1,"The link doesn't work.
Only for README part, it is very sweet for giving three accounts. The problem with README is that it doesn't provide enough information on how to use the app. If you can provide the function on each page like in what was mentioned piazza, it will be nice."
1,Could not open the Application on heroku.
1,Was unable to access the deployed website.
1,"Unfortunately, the link to the tour demo site does not work.  No review can be written for this question."
1,The app doesn't load right now for some reason.
1,I am not able to open the application on Heroku. The ReadMe file does not contain the features implemented and not implemented and is poorly written.
0,"The code structure is very clear and understandable. The name used in the controller and model is also easy to understand it's function.  The only code that I can't understand is ""destination"" since I can't open the link."
1,I don't have access to the github account.
0,Team has followed good coding ractices and has used Scaffold and other best practices. Validation are added for many models. Overall structure looks clean
0,"Going through the code in the Github I could see there was code and logics implemented in a nice flow all models and controllers, but apparently I was unable to open the app.
It is showing me something like ""the page you were looking for doesn't exist"" may be apparently some trouble with the deployment."
1,The ruby code follows majority of the best practices such as encompassing the logic in the model and keeping the controller as short as possible.
0,The code seems to perfectly organized. There is code in Models as well as controllers. Good practices in Ruby are followed as well.
0,"The code structure does follow ""good Ruby and Rails coding practices"""
0,The code on git seems well committed and commented. There were multiple committs made. The comments described the feature changed well.
1,"As the admin, I tried to add a tour and I kept getting the ""Agent must exist"" error. I am not really sure what should be added in the contact agent field."
0,"Often commits, even through round 2."
1,"I believe there are too many models and controllers. The controller for ""customer options"" and ""agent options"" seem unnecessary.
The models Agent and Customer seem like they could be a part of the same class ""User""."
1,"As an admin, I was not able to delete an agent or  customers. ( got an error page saying the page you are looking for does not exist). I could not find an option to delete a tour as an admin."
1,"I can see where at least one controller has been tested full for CRUD functionality. However, I cannot find where a model has been tested."
0,As far as I can tell all of the edge cases appear to be functional.
0,"The team continued to provide updates until March, 1"
1,I believe the code is written/constructed in accordance to a organized design. The controllers mostly only contain CRUD functionality while leaving the business logic/functionality in the models.
1,"The README does not cover how the system handles edge cases. I think I would be able to create a tour with an end date earlier than the start date, but I get another error when I try to create a tour as an admin (""Agent must exist""), so I'm not sure."
1,"1) Admins cannot delete tours.
2) Waitlisted customers are not upgraded when customers with bookings are deleted.
4) Tours can have end dates before start dates.
5) Admins cannot delete users."
0,Looks like work was pretty continuous.
0,All the relationships were very well outlined and I noticed no discrepancies while performing insert and delete operations while using the tour management application. The outputs while implementing these operations were on par with what was expected.
0,The whole code has been divided into different functions and this makes it very easy to understand and comprehend. Booking and bookmarking a tour works perfectly fine. All the variables and module names are very much relevant and help the user to comprehend the code.
0,The relationships are handled correctly including the dependent: :destroy.
0,I found that the relationships are consistent with the required functionality that was expected out of the application. I would say kudos to the team for handling the database design very well.
0,"I found that the team made some changes after round 1. In particular, I saw about 35-40 updates during this period. Which proves that they made some good changes since round 1."
0,"The team did keep on submitting their changes with proper comments on their updates.
They did carry on many tasks post round 1, their commits show the functionalities implemented.
Also, I could see all contributors pushing their work to Github except 1."
0,"Yes, the code follows good ruby and rails coding practices."
0,It follows good coding practices. The folder and file names make sense.
0,"Yes, the UI is very easy to use. While I was exercising the application, I was able to navigate through the application very easily. View of the application is simple with decent colors and background. The text on the buttons also guides the user in the right direction. Also, the README file gave me enough background about the application to use it, with all the admin, customer and agent passwords."
0,"The code was well written, it was neat, concise and follows the DRY principle. Variable names used were relevant to their purpose. Also, it is easy for a developer to understand the code and make further developments on the application. Models and controllers code were well indented. I felt all the basic practices of Ruby and Rails coding were followed."
0,I see many updates on the git page.
0,There are many test cases.
0,"The code looks well structured and folows the MVC paradigm. Particularly, more code is in the model than the controller which is a good thing."
1,"The team has been pushing all their changes regularly throughout the project period. The team has also created branches to carry out separate changes and then merged along the way as soon as a particular functionality is implemented correctly. Each contributor has carried out work individually and pushed it, which shows that work is carried out regularly by every individual. This looks very positive on the team members and the team as a whole. 
Other than the commit messages on Github rest they have done a good job using Github"
1,"Proper comments for all the commits have not been provided. Readme file updated according to the project and is appropriate. Code readability seems to be good, for all models and controllers."
0,The design include detail test plan for the features and methods they are going to change under this project. They have included scenarios like they are going to test the missing input or the bad input.
0,The test plan is brief with mentions of their various tests and their purpose. I think its adequate to test the functionalities.
0,"Th test plan looks solid incorporating 

Code inspection
Run and pass existing RSpec Tests
Develop New RSpec Tests
Run through live UI to test a feature using Expertiza instance"
0,The documentation indeed has a detailed test plan.
1,"Although there is a test plan section, it does not provide details about what is to be tested from a functional perspective.  While the team may not know at this point what classes and methods might be involved in the unit tests, the test plan could have included information about what user actions could be tested, e.g. enabling the questionnaires to vary by topic."
1,May want to make a more thorough test plan instead of providing blanks to be filled after you start working. Will you have integration tests in addition to Rspec tests and live UI tests?
0,Test plan is explicit and simple.
1,"The team has provided a test strategy of inspection, development and running tests.
There is Rspec reasoning provided in the test section.
""Include Screenshots maybe"" is something I did not understand in the UI testing section of Project Testing."
1,"There is a section for rspec and UI testing. However, it is not clear how the UI testing will be carried out."
0,The team has added the test plans which will thoroughly test the code.
0,The diagrams are definitely key in making the document an easier read. They are all very intuitive and self explanatory.
0,"Th team has used good UML diagrams and screenshots to make a reader understand the final code after changes. I had commented that the E/R diagram was a bit complex and hard to understand with column names. However, th team has acknowledged and addressed it."
0,"The contrast of the blue in the ERD seems to have improved since the first review, so it is clearer what changes are being made."
0,ER diagram is very clear.
0,"The team has provided enough visualizations which describe all the changes made to the system.
There are screenshots which show the desired output and an entity relationship diagram which provides a relationship between sign_up_topics and questionnaires tables can be established to associate project's topic with a rubric. A good job is done by the team!"
0,They fully checked this requirement.
0,"There is sufficient visualization provided by the team which describes the changes needed in expertiza.
There are several expected outcomes screenshots which makes things easy to understand.
ER diagram is also attached."
0,Excellent use of visualization and diagramming.
0,The design they have shown is pretty appropriate and simple for the problem statement they have.They have used creating the correct relationship by creating a new table which makes sense and makes the implementation straight forward.
0,The design is very clear and elaborate. It leaves the readers of the document with no confusion.
0,"The design does indeed seem to be designed to appear simple. The team has identified the right files to edit to ""select if rubric varies by assignement"", ""choose rubric"", etc."
0,Yes absolutely!
0,"The design seems as simple as it can be.  There is a lot of existing functionality that must be tied into, so there is going to be some amount of inherent complexity."
1,"Part of the write up in the Design Strategy section is a little confusing. All of the indented lines use a blue colored in circle as their bullet point, however I think it would be beneficial to switch it every other indent so you can easily tell which line you're reading."
1,Seems many to many is necessary for what you want to achieve. Unclear about how some front end changes will be implemented (see previous comments about how reaction to vary by change checkbox occurs).
0,"The design provided by the team suggests a strategy in the form of a File, Problem and Solution. This constitutes of specific information about a file which has a problem and the corresponding solution.
There is a further explanation provided through the ER diagram suggestion database design. From all of this information, it appears that the design given is not complex and also easy to understand."
1,"The design is clear. However, I am slightly concerned about the [TBD] sections since the complexity of these remains unknown."
0,"The design provided covers all the areas of developing the project. 
It has descriptive information on what files are involved in developing the project.
They followed File, problem suggestion convention which was easy to understand. It summarized what issue particular file has and its corresponding solution.
There is an ER diagram which explains database design suggestion"
0,Unsure of this since the requirements are changing.
0,Yes they have used good coding practices in their design.  They have an entire section dedicated to Design Strategy. They talk about relationships between controllers such as sign_up_topics and questionnaires too
0,"Good job team!
As stated in the previous round, the team has had a great start and headed in the right direction with respect to the design. The team is not introducing any pattern however it is not necessary."
0,Yes! I loved the way the doc was structured.
1,"The design seems sound and is proposing good things, like moving code from the Topics tab to its own partial.  I'm not sure I agree with the assertion that as little JS as possible should be used because this is a RoR project; the requirements should drive the implementation choices."
0,Adding the many-to-many seems to be a logical way to implement the desired changes.
0,"The design provided by the authors is descriptive enough to provide all the specific information about what, how and why is the implementation carried out. 
It provides a good strategy, what files are involved, what is desired and the post-implementation description.
Although a design pattern is not specified, I don't think it is specifically needed for this project."
0,Yes. I believe this has been designed well. The implementation steps are enumerated through with plenty of details.
0,"Yes, the team design seems to be sound.
They are able to identify the changes in every file like models, controllers, and views.
They have considered several scenarios while planning to implement the project.
Overall it follows proper patterns."
0,"The team has covered the project design from top to bottom. The team carefully reviewed a previous team's attempt at the Rubric project, and identified failure points. They've carefully listed in PROBLEM/SOLUTION format their intended problem set to be addressed, with descriptions on how to go about the fix in each case."
0,The proposed design was really good in round 1. But the authors mention the requirements of the project have changed. I'm not sure what's gonna change.
0,"Design provided looks good, there are some things which have been added later to the requirement are missing but as the team mentioned that those details were added at a very later stage so they were not able to add those."
0,The team has explained in detail the changes they are going to make.They have included the different files that they are going to change for the implementation for the required features.Solutions and problems section is excellent description of all the changes that they are going to make.
0,"The explanation is top notch. As I already said in the previous review, the document lacks nothing. Really appreciate their time and effort working on all the details"
0,The team has brilliantly explained almost all the code changes in excruciating detail including the file names and what exactly would be changes
0,The changes they are going to make are very clear.
0,I believe the level of detail provided exceeds the requirements for the design at this stage of the project.
0,"The team has explained all the changes made to the system adequately. This is clearly mentioned in the ""Design Strategy"" section which includes all the files involved according to the User interface. 
Specifically, all the changes in models, views and controllers have been mentioned. The team has considered all the scenarios while planning to implement this functionality. This is through the changes involved."
0,Yes I think so.
0,"Yes, the authors seem to have sufficient knowledge about the project and have done a good amount of work in planning the project.
The report seems to be complete."
0,The team have provided an exhaustive description of the changes to be made to the system.
0,The authors have done a great job writing up this document
0,"The entity-relationship diagram shown to explain their proposed changes is very nice as it explains their logic in a very simple way.
Screenshots of the existing functionality along with their proposed changes is explanatory."
0,The Visual Aids made it really easy for me to understand the project and the tasks at hand.
1,"The wiki is very informative with the use of diagrams. The team has leveraged the diagrams from the project proposals to a large extent. The entity diagram's objective seemed like they wanted to show the database relationships, which could have very well been established without the column names of the tables. The presence of the column names makes the diagram seem overly complex and has a lot of unnecessary information which do not help the reader."
0,"The diagrams, screenshots provided are very intuitive and looking at them made it easier to understand the explanation."
0,Visual aids are good quality.
0,ER diagram is great.
0,"The team has added several visual aids specifying how, what and where the functionality will be implemented.
Screenshots have been added to show the changes that will be made in the various ""views"" namely ""topics"" and ""assignments"".
An entity-relationship diagram has also been provided the team which gives a good idea on how the database (related to the functionality) is connected with each other. Several clear interpretations could be made from the visual diagrams provided."
0,There are pictures showing the existing (old) work done as well as model relational diagram which are each relevant to the topic.
0,"The design documentation consists of serval visual aids.
They have added screenshots wherever necessary to make things easily understandable.
The team has attached an ER diagram which is a good way to demonstrate the linking between databases."
0,The design proposed by the author is pretty good.The explanation about each task and the solution separately is nice.They are making changes in the appropriate classes and have explained it too.
0,"The current design indeed does seem sound. On cursory inspection, the authors seem to be editing the right methods, the changes don't seem to make the code smelly or complex. However, i do not believe the changes would make the response faster, nonetheless the team wasn't tasked with this."
0,"I don't see anything in the requirements to assign different rubrics for each round of the reviews. As the project remains the same, the rubrics would also remain the same. But just in case such a requirement comes forth in the future it would be a great feature."
0,No issues with the proposed design.
0,"The ""design strategy"" clearly mentions everything that is required. According to me, the plans that the authors have decided to carry off the implementation looks correct and efficient. 
Some of them have not been mentioned because they can not be carried out before actually coding the functionality. The design mentioned will not make the code smelly. 
Also, the new design suggested by the team does not look complicated for now."
0,"They have provided a well-mentioned design strategy in the report which is pretty clear to understand.
Their plan seems correct and will not lead to any smelly code according to me. 
They have also proposed where they plan to make changes like some places it is TBD.
Their new design does not seem to be complicated."
0,"Adding a new column in the topics table seems to be the best way to solve the problem statement. According to the design I don't see how the author may go wrong with the code by adding a method to a wrong class or make it ""smelly"". The response time might increase do to another added filter of rubrics for each topic but I don't think that can be avoided. The design seems to be logical and appropriate for the problem."
0,The design approach is solid. The team has gone beyond the proposed changes and identified areas where the code can be refactored. They have also used good judgement in designing their views where they mention the need for helper methods and why the views should not do the heavy-lifting.
0,The explanation about the proposed changes per task is excellent as it makes crustal clear what is intended and how they are implementing it.
0,Found a section called pros and cons which I did not find in any other document. It helped me understand the previous work done. Appreciate the effort!
0,The read of the document takes time but only because the team has delved into the changes which might be needed in every file. The explanation is very structured and has a good flow which makes it easy to follow.
0,I absolutely loved the way the doc was structured and was made so easy to understand.
1,"The document does a good job of explaining the design of the new table (presumably manifested as a new model in the Ruby code, but this isn't included in the list of changes) to be added and how it ties together the existing data.  What seems to be lacking is an explanation of how the new logic needed to support custom rubrics by topic will tie in with the existing logic and how the ""Rubric varies by topic?"" selection will be stored.  Also, the design does not address edge cases, such as what will happen if a user selects the ""Rubric varies by topic?"", makes selections on the ""Topics"" page and then deselects ""Rubric varies by topic?"" back on the ""Rubrics"" page?  Do the selections made on the ""Topics"" page get deleted?"
0,Each of the proposed changes have explanations along with proposed testing.
0,"Very thorough. Proposed DB changes look good and seem appropriate (better than many to one relationship, as noted)."
0,"The changes are very clearly described with a specific explanation for every change. The change is described with three sections namely ""File"", ""Problem"" and ""Solution"". 
This shows that the team has put a lot of efforts in planning and strategizing everything. This also makes all the explanations easy to follow."
0,Detailed and thorough.
1,"Yes. I was able to understand their proposed changes. They mentioned everything with proper sections.
They have used easy language which makes stuff clear to understand.
Just issue I felt was it was way too big. The size of documentation if possible should have reduced."
0,The problem statement is neatly broken down into multiple sub-problems to which solutions are elaborately drawn in the design. The explanations are easy to follow and are justified well. The proposed changes do not seem redundant and make sense.
0,The authors have a very good understanding of the project requirements and a clear plan for implementing the changes. They have written detailed explanations about their proposed changes.
0,the changes are explained really well.
0,The design document has explained all the functionality required for implementing the project.They have explained clearly with the screenshots the existing scenario and what they proposed to do.Screenshots and diagrams clearly explain their view point and give big picture of what they proposed to do.
0,The team has done a wonderful job in understanding and interpreting the work needed. They have mentioned the exact files which might need to be edited. The extent of analysis done at this stage in the topic is commendable.
0,It covers everything in the requirements doc.
1,"The design is well written and seems to have all of the required details.  The screen captures of the proposed changes are very helpful, especially the highlighting of the new widgets.  The document provides a lot of detail, possibly more than is necessary.  The entity relationship diagram is a bit large and has a lot of information in it that isn't relevant to this project; the contrast between the black and blue is a bit subtle.  The diagram could be left out altogether, I think, without losing any relevant information.  There are some grammatical errors in the writing, for instance ""By adding new such table we create many-to-many relationship between sign_up_topics and questionnaires tables..."" should be ""By adding this new table, we create a many-to-many relationship between the sign_up_topics and questionnaires tables...""  In any case, the document exceeded my expectations.  Nice job!"
0,Includes proper documentation along with proposed changes and testing.
0,"The design does incorporate the functionality required. All the task that can be mentioned before the actual coding has been clearly described in the design document. 
A proper design strategy is also mentioned which gives a clear idea of the functionality that is to be implemented. There is also a section of the previous work mentioned which contains the link to the PR and the repo. 
The team has also detected the flaws by the previous team which could be improved."
0,The team has proposed implementation that addresses the issues faced by the previous work done.
0,"Yes, the design doc does have all the functionality needed.
They have identified the tasks needed before starting the implementation.
They have mentioned about previous work and what were their flaws. How they plan to overcome.
There is a link of previous documentation with the pull request and demo.
Overall great job."
0,The design document is very well written with all the required functionality incorporated. Most of the solution deign has been described and drafted out. Code has not been written yet so test plan is left for later stage for obvious reasons. Otherwise the design justifies the problem statement and is to the mark.
0,The team has not only covered all the project requirements but they have identified more special cases like rubrics for each phase of the assignment.
0,it incorporates everything that is required as per project description.
0,Overall the design document has all the important sections with a detailed explanation which makes it very easy to understand.
0,Was definitely the best design documents I have reviewed! Great work team
1,"As stated above, the design was missing some details needed to make this new feature function, although our mentor lead us to believe that at this stage all that was needed was a black-box design, which this document has, although it is lacking a description of the edge case mentioned above, since whether or not topic-rubric selections are deleted under particular conditions is a black-box behavior."
0,"Very thorough, great job."
0,Each section of the wiki is well thought out and explicit.
0,"The team has done a solid job in defining the documentation.
According to me the report seems complete and does not need any more changes.
It can be concluded that the team has better knowledge of what they are going to do and how."
0,The design doc is written in detail and complete with placeholders for implementation and testing.
0,Write up looks like a professional writer came in and made sure everything would be readable from a high level to very low level. Good work
0,The writeup is extensive and includes all the details that one might expect from the documentation.
0,Well written and they did improvise based on suggestion from first round. Thank you!
0,The write up was clear and extensive in covering the work done by the team. No improvements were necessary.
0,the wiki is written well
0,"Yes, all features work well. This project is to refactor the code and all things are going well."
0,"Everything works as intended, the team did an excellent job detailing their work in the wiki regarding all of this as well."
0,The code doesn't have a UI. But they did refactor the code and the features still work.
0,Everything works as expected. The team has done a really good job making the code DRYer and fixing issues with user authentication.
0,"Yes, they added new test cases and all tests pass. I think this is good enough."
1,"The team performed several test cases with RSpec.  Their code was able to successfully pass all of the test cases.  However, no code from the test cases was shown in the document.  Despite the fact they were able to pass their test cases, their code did not pass the Travis CI bot.  This seems a bit unusual."
0,"The code coverage increased, covering more than just their own work. They tested to make sure anything they changed was also checked for."
0,Testing was extensively done for the project.
0,All the required test cases were added in round 1.
0,some new test cases are added.
0,One more commit was added to merge the code after the last review.
0,There were a few commits that were made during the last week of the project.
0,"No new commits, however this was one project that was done extremely well and I would not want to reduce points for them just because of this."
0,Appears to be they already completed the work in the first rodun.
0,"No, the code is well and has no bad names. It follows the ruby principles and has no DRY problems."
0,This team did quality work.  The code that was committed appears to be dry and well formed.  The code appears logical and the team's reasoning behind their code seems sound.
0,The code seems to be very well written considering that they followed most of the best practices of Rails to write their code.
1,They follow a reasonable DRY approach. The author feedback on last review didn't answer some of my questions though but however this approach sounds reasonable
0,"The code is written very clean, and there were hardly any problems in round 1 that required improvement."
0,Saw a few commits few days before the deadline with changes as asked by the expertiza team
0,The test plan seems to be adequate and checks all the changes.
1,"The team did include a Test Plan section with that lists the test files to be added or modified along with their purpose.  However, no specifics about the tests that will be performed are mentioned.  (No code, not even pseudo code, is given.)"
0,The testing plan seems sound!
1,"Yes, the design does include the Test Plan. However, the test plan is incomplete and inadequate for such relatively big project. Current test plan only includes three well-defined functional test scenarios. Do you think these functional tests are sufficient to test the grading audit trail feature? Not getting into the details I assume a lot more test cases must be developed and tested to ensure that the feature really works and does not break any existing functionalities. As I mentioned in the first peer review, please try to utilize the following test strategies:1. Code inspection2. Pass all existing Rspec Tests3. Write addtional Rspec Tests to test your feature4. Perform UI Testing
I would strongly suggest under the Test Plan to create two separate sections, for example, ""Rspec Testing"" and ""UI Testing"", where your team can state the tests developed and performed in the system, and provide outcome of all the tests. Please do not limit your testing to 4 functional test case scenarios since these are not enough to test your work. You can specify general test cases scenarios, but all expected and unexpected behavior must be tested. Document all the tests and their outcomes so Expertiza software engineers can accept your work without questioning whether or not your feature work as expected."
1,"""Automated tests are to be written for model ReviewBid, controller ReviewBidController.""  However without more detail it's difficult to know whether the tests are shallow or if they will really test the functionalities."
1,Great job with screenshot and diagrams. Only thing I can say is that the two controllers in the design seem confusing.
1,I am still not very happy with the visualization. I had left a comment in the earlier review that the screenshots should be in proportion to the page and should fit in the page width. But that has not be done! Otherwise the screenshots themselves are good at explaining the expected outputs.
0,"yes, the class diagram does depict clearly the object flow during the call of the class and it is clearly explained and goes hand in hand with the planned work of the team."
1,There should be more writing about the test plan and what the plan is. It seems very simple and does not explain exactly what is being tested in explicit ways.
1,"The visualization provided by the team includes of expected outcome's screenshot and an MVC architecture diagram. 
The screenshots give a clear idea as to what the team is planning to achieve while the MVC diagram is the least complex. They describe what changes will be made to the system. 
The team could have also added a visualization for the schema changes to provide a better understanding."
0,"Yes, the team has utilized the visualization properly.
The data flow diagram clearly explains the flow of data across various components of MVC.
The screen mockups clearly show how the views would appear once the changes are complete."
1,"The test plan does not get into a great amount of detail in terms of what is going to be tested and how.  One of the UI tests states that a student should be able to [review] four assignments.  However, the maximum number of assignments is actually configurable, so the test case should test to ensure that the maximum value configured is not exceeded.  For UI testing, the test plan would ideally describe the steps involved in performing the test, rather than giving general statements about what is going to be tested."
1,"Their wiki does include a ""Test Plan"" section, in which they explain how they are going to improve the existing tests and add new ones. However, they don't list which specific files should be modified or added. I suggest they list the relevant testing files they plan to modify and/or add for each change they plan to make."
0,The team has headed the right direction towards the testing of the changes. The team talks about writing tests for the new algorithm/code they intend to write and perform UI testing.
1,"Test plan section is a bit weak compared to entire document. As the feature is not yet implemented, I guess this makes sense. Once the code is improved, it would be great to see team come back and add some content here. especially related to model ReviewBid and controller ReviewBidController."
0,"Yes, the design appears to be simple and easy to understand.
I really liked the model-view-controller explanation as it clearly mentions the functionality and task of each component."
0,The design seems to be simple enough to comprehend.
1,"Even though the project includes their intention for test plans , they did not elaborate more on how they will be implementing them in detail."
0,They have simplified the design and done a good job of explaining the steps they need to take for implementation.
0,Yes. I think the team has understood the project well and made the design very easy to digest.
0,"Yes, the team include their test plan in this document. Overall the test plan covers all cases."
0,Visual aids are adequately used.
1,Creating a separate view may cause subsequent changes in the controllers that could potentially delay response time
0,"Yeah, they have a very clear user diagram and design strategy. Their visualization looks very good."
1,"The implementations section does include what needs to be done adequately but does not address how they will address the merging issues that are mentioned in the project description. For example, it says there are 107 code climate issues. Those could have been analyzed and suggestions to deal with those problems could have been mentioned."
0,"They did a good job by using all sorts of visual aids to increase the understandability. They successfully used UML, flowchats screenshots etch to elaborate more on their plan of action."
1,The test plan could be elaborated better and the implementation section needs more details on fixing the merge issues.
0,"3 diagrams viz. Workflow, Data Model and Design diagrams give a much better view of the problem. Adding few captions might help (but this is optional, there is adequate explanations in the sentences around)"
1,The changes proposed seem pretty good. The files have been identified. I coulhasdn't understand the changes proposed for the email format though.
1,"They have a great diagram that helps to explain their project. My only complaint is that their screenshots (in the ""Implementation"" section) have not been scaled and are way too big for the document (I have to scroll a lot in order to view the images). I suggest that they use an image resizer to shrink the images and then re-upload and re-insert them."
0,The write-up is pretty good. It contains all the functionality required.
1,"Based on the ""Problem Statement"" and ""Previous Work"", I conclude that the core design and most of the implementation had been performed by the previous team in the last semester. And the only issue that the current team is trying to resolve is , ""any TA, an instructor was able to change the grade of a student which should not have been the case"". The wording of the issue is a little unclear and I am still not sure what is the problem and what the team is trying to improve in the given design and implementation.
Either way, yes, since the above issue is the only issue found by the team in the previous work, I conclude that the design is sound and follows appropriate design principles. Furthermore, by looking at the ""Proposed Solution"", I also confirm that design appears to be solid. The team is going to create table in the DB called grading_history with the listed elements (Please note that you should create a table in the DB and NOT DB itself, since DB is already given). I'm unable to determine whether this was already done by previous team or this is something is going to be completed by the current team. Whichever team proposed this design, this appears to be appropriate and solid design. Great work on documenting it!"
1,"The Models, Topics Bidding, Review Bidding and Design Strategy don't seem to add a lot of value in terms of describing the design.  The screen captures are useful, but are just way to large to fit on your average monitor.  I had to maximize the browser window on a 4k monitor before I could see the entire screen captures without having to scroll."
0,"yes, they have used graphs to describe the changes that made to the system and also show the output with the screenshots."
1,The plan of iterating through all previous submissions to check conflict may increase the response time of the system and a better solution may involve caching some data or use average + previous submissions.
1,"The problem or flaws with existing implementation is explained very well. However in the implementation, the solution to the problem is not explained very well and is vague. I would suggest highlighting exactly what methods you intend to change, and why. Also the test plan is vague and should be more specific such as file names and testing procedure."
1,I think that the testing portion is very vague as it just says develop new Rspec code. I think you should explain which parts you intend to test and how you intend to test the Views.
0,The design provides context to the reader very well and follows most of the functionality required.
0,The authors have explained the plan for implementation of their given topic very well.
0,The team has assembled several diagrams include flow-charts and mock-ups.
0,The design is simple and effective. No redundant or useless part included.
0,"Yes, using the delegation pattern their solution seemed simple and effective without violating the dry principles."
0,Design appears to be simple and the team is trying to address the limitations from the last Pull request. Design makes complete sense and is easy to understand
0,They seem to have simplified the design greatly by breaking it into parts and explaining how they plan to tackle each part.
0,"The design follows the simple basis ""first-come-first-serve"" and introduces the top circle trading mechanism. they tried to make it as simple as possible"
0,The intended path the team plan's to follow appears straight forward with minimal changes.
0,"Yes, all the current design , its flaws and their design to rectify this issue. All the functionalities required was mentioned. I didnt find anything missing. They intend to use delegation pattern to resolve their problem which seemed appropriate to me."
1,"As stated in the previous round, the bidding of reviews as stated by the team is similar to bidding of assignments and they intend to use DELEGATION design. The team's intuition is the right way to approach this to keep the codebase dry. However, the team has not convinced a reader if delegation can be used straight away without any changes needed because the review bidding is slightly different."
0,"They appear to have put a great deal of thought into their design. They specifically mention utilizing the delegation pattern. They have an entire ""Design Strategy"" section where they explain the model, view, and controller."
1,"The design does not seem to add anything beyond the already existing MVC pattern being used by expertiza.  The design does appear to be missing a few details, including how the review strategy selection will be stored and how the relevant changes to the reviews view and controller will be done, considering the current implementation enables the user to have new topics to review assigned to them."
0,"yes, the design follows appropriate principles and solves the problem stated."
0,Their design seems to be far more explanatory this time with appropriate use of patterns and principles.
1,"The proposed design strategy is very well defined. It is sound and follows all the appropriate design principles. I appreciate how the author implements the usage of delegation strategy to show the proposed solution design.
The author very elaborately explains the problem statement and gives a clear understanding about the TTC principle for bidding instead of first come first serve principle which was in place earler. Some very good examples have been used to explain.
It would be great if a section with proposed code changes is also included where the author shows which parts of the code they wish to address and how. That would have helped in getting a better view. But even so, the author clearly mentions the controllers, model and view that will be affected in the proposed solution for the problem."
0,Excellent use of visual aids. The only thing that could make it better is if you show a modified flow chart of what will be different after your implementation.
0,Seems reasonable. I really like the links to the proposed files to be changed.
0,I believe the team has done well at laying out their intended actions to complete the bid review.
1,"I believe they captured most of the functionality, but I was a bit confused by a couple things:
The project write-up from the professor says the email notification currently DOES NOT send a link to the review, however, on this wiki, it is stated there are links to the reviews in the current set up.
Then later on there is this: ""The scope of this project is to send an email notification to instructor which contains links to two reviews. One of which is the newly submitted review that differs by more than the notification limit where such a conflict has occurred. The email should state that a new conflicting review has been made."" 
It says contains the links to two reviews, and mentions what one of the reviews is. I don't think there actually is another review to be linked, since the newest review is getting compared against the average of the previous reviews."
0,Yes. The document is very detailed and comprehensive about their plan and what they are going to do.
0,"Authors have explained the changes required in a best possible. There is lot of additional content for the reader to understand. This helps the reviewer/user to understand the process if the content added is not sufficient. 
Team has also tried to summarize content from ""how the algorithm works, is taken from the ""College Admissions and the Stability of Marriage (1962)"" by D. Gale and L. S. Shapley."" This helps the user to read the summary rather than going through entire paper"
1,"Th team has identified the files where changes need to be made and the design pattern to be used to keep the code dry. But at the same time, the team accepts that some things are different with respect to review bidding (in ending of section ""current implementation""). They still have not justified as to how to plan to tackle it. In addition, i had comments from the last round of review which is yet to be addressed:
ach reviewer would want to review multiple assignments. So, is the algorithm run multiple times for each time the student wants a new assignment? This would imply that every other student would also have to bid and it becomes a batch based system.
Or if the single instance of the algorithm would pick multiple assignments for the reviewer, then the algorithm, view and design would have to incorporate the number of assignments the reviewer wants to review. Some reviewers might want to review 2 or 3 or even 4 assignments."
0,They do a great job of explaining the changes to be made to the system and their anticipated implementation.
1,"As mentioned above, although a good description of the majority of the feature implementation is provided, there are some details lacking that make it difficult to evaluate whether the design will be workable."
0,"Yes, the authors introduce the mechanism and other details about their design, they also sued the graphs to help the readers to understand their concept easier."
0,They did give a lot of explanation in writeup about how the changes and where the changes are going to be made. I think they did a good job at that.
0,"From a high level, the team has explained the task at hand and a plan to complete the new feature."
1,The solution was not that detailed. They just wrote that they would include a new view and configuring will be done. Nothing regrding the classes or methods to be implemented was mentioned. They should expand more on what they intend to do.
0,From my pointof view their idea is good enough. They willbe using config file to configure the links and will be making a new view to show conflicts. This will sove the problem referred.
0,I did not see any issues with the code the team as written. Everything appears to be of good format and named appropriately.
1,"The write up explains the how they implemented clearly. They had a few name changes done. The new names follow good practices and proper naming conventions.
When it comes to the whys, there are places were they have mentioned why they implemented the needed a certain way. For example, load_add_signup_topics is renamed to get_assignment_data. They have explained that they have done it to make it more intuitive.
For solution in problem 10, they have moved duplicate code to helper function but they have not explained why they did so. Maybe they thought it was self-explanatory. But adding such details would make the page even better."
1,The author plans to iterate through the list of reviews to compare with the new review for a significant difference. I don't think that is the best way to go about calculating the change in the review scores. Maybe a better solution could be derived. The mailer code to attach links of the reviews has a good proposed solution and I dont think will have any negative impact on the code.
1,There is no test plan mentioned. Please refer to the suggestion mentioned earlier.
1,"The design document incorporates most of the required sections. Proposed code changes could have been included and a Test plan on how they plan on testing UI and RSpec could have been briefliy explained. Other than that, a very good effort has been made on the docume"
1,"The author didn't provide details about how they will implement the project. They have mentioned some changes, but less details."
1,"In the solution, like ""Separate view will be created to address this issue."" , is not a detailed solution. It will be better to provide how to deal with this issue."
0,"Yes, the design contains enough information about the project, including the statement, the issues and what need to be done."
1,"The proposed solution seems to be really slow. The current solution works in O(1). They are planning a solution that will take O(n) per query. Basically iterating over all the scores of assignments. But that would increase the response time. I think there is a better solution in which they can keep a minimum and maximum value assignments that they have already seen and compare the new coming feedback with only minimum and maximum, because these will be the only assignments who would definitely have diff value greater than threshhold if at all. Also, more time should be spent in designing and thinking about the solution."
1,"They have regularly committed their work but most of the commits towards the ends were just readme file changes. I can see their commit history, but they could have used better words to describe the functionality they added.  Other than that they have done good work."
1,"The design doc tried to say what is being done. But, it states that in the new system, two links in email needs to be sent, one which is the new review. Another link in the email is about what is not mentioned."
1,"There is a nice diagram describing the existing implementation and it makes it easy to see where the problems lie.  However, there are no diagrams accompanying the proposed solution or design."
1,"The authors do not go into detail about which methods they plan to add or modify.  Also, I think their proposed solution for the 'Inefficient calculation of conflicts' problem could be made more efficient.  The proposed solution relies on iterating through all previous reviews anytime a new review is added. This can be expensive for larges classes with many reviews.
One suggestion would be to keep a running value (or values) that gets updated once a new review is added to the system.  This way, a new review's score can simply be compared to this value(s) and iterating through all previous reviews will not be required. (Of course, this would require some logic to make sure the scores that are outside of the threshold are not included in the calculation of the stored value(s))."
0,"Yes, the design touches on all required functionality stated in the assignment description."
1,"As previously stated, there could be more detail regarding which methods in the 'files to be changed' will be added or modified.  Details in the Test Plan are a bit lacking as well. For instance, which files do you plan on testing?  Will you be doing any behavioral testing?"
0,The team have added flow-charts and mock-ups of the completed feature.
0,I feel the team has done a sufficient job at explaining how they plan to proceed from a higher level view.
0,The document appears to contain the necessary sections from a higher level to begin working on the project.
0,The team has identified a simple outline for implementing a functional conflict notification feature.
0,"Showed what is currently in the system and what their new view will look like, good job."
0,"Yes, the design appears to be as simple as possible."
1,"The design mostly makes sense. Since you are adding a standard deviation calculation, I would have liked to see explanation about how when this would be calculated - after each review submission? Additionally, would the graph of all the review scores become cluttered over time as there can be 10+ reviews? How could you make this more user friendly?"
0,The authors explained their changes well.
1,"There is only one workflow diagram and three mock screenshots that show how would conflicting review, summary of all reviews, and (most important) new report would look like upon completion of the project. All visual aid provided in the document clearly explain what changes are going to be made and how it effect Expertiza in specific scenarios. However, this is all high-level diagrams and do not provide low-level implementation details that reveal all the changes to be made in the system.
There is no UML or other similar type of class diagrams to show in depth the changes to be made into the system. Workflow diagram by itself is not enough information source and ""Implementation"" section does not specify how these changes will be made.
Therefore, due to absent of the class diagrams (or other type of low-level implementation diagrams), I am unable to determine full list of the changes to be made in the system."
1,"There is very a little information about design itself, since the team utilizes existing design feature and trying to improve the feature. Moreover, the team does not provide existing low-level implementation design information. There is only one workflow diagram that shows only high-level flow of events in the system. It is not enough to fully determine if the design is simple as it could be. However, since it is currently used in the Expertiza, I assume it is as simple as possible.
The changes to be made improving the feature also appear to be as simple as possible. Although the document does not really explain exactly what changes are going to be made. It explains where, but not what and how.
However, based on the giving information, I think team has correct approach and changes to be made improving existing feature are simple as they could be."
1,"From the ""Problem statement"" and ""Existing Feature Description"" sections I understand that the team is trying to improve already developed feature (include the dynamically generated links to the conflicting reviews, summary of the reviews, and report used for analyzing in the email notification that is trigger upon significant variation of the score for a review).
Therefore, the team does not re-develop the design, but simply utilizes the existing one and improve some existing feature. I am unable to determine whether existing design for the email notification is solid or not. If it is currently used in the Expertiza, I suppose it is solid. The changes to be made in the system to improve the feature seem to be reasonable, but without low-level implementation details it is very hard to determine. For example,""Hardcoded URLs will managed by the config file in order to make these links functional on every server running Expertiza"".
What config file? How it will manage? What specific change is required to do so? All this information is missing."
1,"I believe the team did a great job on explaining the end result of the changes to be made to the system and how these changes effect the Expertiza. However, the changes itself are not explained in the details and cannot be reviewed at this point. The end result seems promising, but the list of specific changes including code samples is not provided.
Moreover, as I mentioned workflow diagram is not enough and inadequate to convey all the low-level design and implementation details to the reader. This information is still missing and must be updated once the project is completed."
1,Test plan is very generic and high level. Just says which type of tests they'll run.
0,It does seem like this group found the most efficient way to tackle the project.
1,The test plan is very vague and only includes the files to be updated. I suggest explaining which part of the feature you intend to test.
0,Yes proper visualizations has been done.
0,The write up is simple and clear. They add some changes too.
0,Yes the changes to be done have been identified.
0,There is an existing feature description flow chart describing the features and their flow
0,The document is well designed and explains the previous work with the changes to be implemented
0,"Yes, the change have been adequately explained."
1,They have mentioned their intent to make new test cases and add new tests. But they haven't been implemented yet.
0,"Yes, the newly inserted diagrams and screenshots helped a lot in understanding their solution. Overall the writeup seems to have improved."
1,The design seemed to be fine but they don't seem to be using any new design pattern for this project.
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
Few Suggestions:
 I found there is too much logic included in the controller(specifically BookingsController) this can make future changes to code base difficult and error-prone.
There are some occurrences of ""puts"" in controllers and commented codes in views. Ideally, once the code is known not to be useful, it can be removed."
1,The design is simple and not complex. If there is a major contrast in the review score a mail has to be sent. The design does not describe how they plan on deecting the major difference in the code. They state that they will be taking an average and including standard deviation. The idea of the author seems to be appropriate.
1,"The design explains the problem statement clearly. The scope of the solution is to send a mail when there is a major contrast in the review score. I liked how they plan on including the standard deviation in the review report to show if there is a major change. 
It would have been better if the design included how they plan on detecting the major change and the mailing if there is a major change. As a reader it would interest me more on how they wish to proceed with the solution
The author merely mentions the files to be changed and the addition of the standard deviation in the report. Proposed code changes and proposed solution could be worked upon."
1,"The team did provide a UML diagram that shows the models, views, and controllers that may be impacted by their proposed changes.  However, it is uncertain if the diagram is drawn correctly.  Moreover, the diagram lacks any references and does not provide a description of its relevance.  (It looks really nice, but what does it really mean?)"
1,"Unfortunately, there is only 1 diagram presented and I'm not sure what kind of diagram it is. I think it is just regular diagram to show MVC model for GradingHistory object that is going to be created. This diagram does not convey much of information, except showing MVC model, which is trivial information. Thus, I consider this as too high-level design and it does not provide enough details. The type of diagrams you are looking for is UML, Entity Relationship, Use case, Workflow, or Sequence diagrams are acceptable for your project and any of them would be very helpful for understanding your team design. Please include at least one UML diagram to show how the GradingHistory would interact with other objects in Expertiza to CRUD the history of grades submitted by instructors. Include Entity Relationship diagram to show how grades will be stored into and retrieved from the DB. Use case or Workflow diagrams are high-level, but very helpful to illustrate expected behavior of the feature that you are developing. Either way, current diagram is not enough for design document.
All the screenshots in the ""Expected View"" section are very helpful to envision how grading audit trial would look like on the web page and how grading history can be accessed by instructor. I would suggest to make screenshots a little smaller in the size and scale it down a little, since they currently take more than the entire page size. Please consider to resize them.
After examining the ""Proposed Solution"" section, I can conclude on the following:
1) Single diagram that is currently listed in the document does not help reader to understand the project. Please provide different types of diagrams I discussed above. Please make sure to include at least 1 UML diagram.2) Currently listed diagram in the document does not follow UML diagram conventions.3) Currently listed diagram is too high-level and does not provide enough details. If you still want to include high-level diagram to help a reader in better understanding the project, please use  Workflow or Use case diagram. Any of them would be sufficient for this project."
1,"The diagram is there but to me it is not clear what purpose the diagram serves as there are arrows going out of a controller to a controller, and a description would be helpful."
1,They provide tthe est plan in this document. But they didn't provide enough details about the test. It will be better to show the test cases and mockups.
0,They provide workflow figure and some implementation figures. I think they don't need to provide UML figure in this project.
0,"Yes, the design is as simple as possible. They provided the issues right now and files they need to fix. They also provide the test plan. The structure is great."
0,Their proposed designs were very thorough and their code made sense.
0,The design looks great!
0,"one thing I can think of is that adding files such as a controller may require the need to add a model and associated views. Also, there are more files to be added that are not in the testing plan."
1,The team knows what they need to fix and it seems they have done part of the work. They didn't mention the patterns they used in this project.
0,The diagrams are great and it is great that they start to do implementation now. They explained the changes well.
1,"Just one diagram, that is of how the old system works, and not how it will look after they are going to make the changes."
1,"The design seems simple, but they are missing critical information in their document."
1,"Given details of how the old system tried to find the conflict, and not how they are going to change to system to conver the flaws."
0,I can follow the explanation.
1,"Again, this is difficult to answer since the design isn't very clear after reading the wiki."
1,"It's difficult to tell since the authors do not provide much information about the design.  They describe what they propose to do and list the files that will be edited, but they don't describe how the each file will be edited."
0,The team seems to have done a good job of keeping majority of the functionality in mind while writing up this page.
0,It seems their idea is sufficient and includes all the things needed.
0,"Yes the design does incorporate all the functionalities required for this project,"
0,The design appears to cover all of the required functionality.  It shows how the new data will be created and how it will be able to be viewed.
0,"Yes, the design appears to incorporate all the required functionality."
0,All the required functionality is covered.
1,"Although the key parts of the design document are present, the document does not have all the important information required to be in the document.
Project purpose is very well defined and the project's goal is well explained under the ""Problem statement"" section. It provides clear view on what the team is going to be working on.
Project design is discussed in the ""Proposed Solution"" section, where ""Expected View"" and ""Diagram"" are included. Unfortunately, provided diagram is too-high level and does not contain any important information. Please consider including at least one UML diagram to show how the GradingHistory would interact with other objects in Expertiza. This would also help to understand how CRUD is utilized for the history of grades submitted by instructors. Include Entity Relationship diagram to show how grades are going be stored into and retrieved from the DB. Utilize one of the high-level diagrams (Use case or Workflow), briefly illustrate expected behavior of the system with the feature you are working on.
""Testing Plan"" section is incomplete. There are only 3 functional test scenarios are developed and discussed in the document. These are not enough to test all the code changes that your team is going to do. Please include ""Rspec Testing"" section where you can state what test cases you develop to test the changes you made.  Also include ""UI Testing"" section where you can include steps to test grading audit trail from the UI. It would also help if you state that all existing Rspec tests pass.
Implementation details are missing. Please provide code snippets, or stubs to discuss all the changes to be implemented. If your team has already written the code, include screenshot of the code. Although, I really liked ""Files to be Modified"" and ""Files to be Added"" sections. These section provide clear explanations on how grading audit mechanism will be implemented. Unfortunately, it only misses low-level implementation details.
Please discuss any flaws and issues your team has found in the proposed design and implementation completed last semester by the different team. Why was not this included at all? Please list all the problems you found and make sure to indicate that proposed materials are used as references.
Probably have ""Conclusion"" section, where the team may conclude on the project as the whole.
Also, ""Team members"" section is missing."
0,All the minimum requirements are satisfied.
1,"The project purpose is clearly stated and easy to understand.  The design is thorough although as mentioned above, some things are unclear.  The testing plan could be fleshed out a bit more in terms of specific things the tests should be checking (e.g. model fields) rather than just checking whether given methods are called when a specified action is performed by the user.  The testing needs to verify that the correct information was indeed recorded."
0,the design doc pretty much covers every aspect of the project
0,The design doc seems to be complete with all the details added.
1,"The team has done a good job in explaining the content in the writeup.
But, I could not understand the purpose of the project. If the functionality was already implemented by the previous team, what addition would this team be making? I would suggest the team to please include this in the writeup.
The design is clearly explained.
The testing plan was same as that of the previous team."
0,"Good Job:
Pull request looks fine. The team has posted the travis CI build history and it seems like the build is successful and all the test cases passed."
0,Travis passed.  No conflicts to resolve.
0,"Yes, the Stage 2 Pull Request passed the Travis CI tests. Great work by team!! The following is output of the Travis CI tests:
Finished in 6 minutes 4 seconds (files took 6.98 seconds to load)
122 examples, 0 failures, 24 pending

201 examples, 0 failures, 46 pendings

Done. Your build exited with 0.
However, the original Pull Request failed (not Stage 2 Pull Request).
There are no conflicts of changes that team has done with the base branch. Great work! If there were only conflicts, team resolved it by synchronizing their master branch with the expertiza/master branch.
Expertiza-bot also reported no errors, but 3 warnings:
- Your pull request touches more than 30 files.
  Please make sure you did not commit unnecessary changes, such as node_modules, change logs.
- This pull request contains TODO task(s); please fix them.
- You are using global variables ($) or class variables (@@); please double-check whether this is necessary.
Our team also faced these warnings and after contacting our mentor we decided to ignore them until further request from Expertiza software engineers. I suggest contacting your mentor and discuss the origin of these warnings and whether they need to resolved prior your work gets deployed onto production server.
The Code Climate has also analyzed the latest commit:
- Code Climate has analyzed commit 050fa7d and detected 0 issues on this pull request.
- The test coverage on the diff in this pull request is 42.3% (50% is the threshold).
- This pull request will bring the total coverage in the repository to 29.0% (-21.9% change).
Great work by the team!"
0,Their project is code fix. I didn't find any conflict that must be resolved.
0,The build has passed in Travis CI without any conflicts .
0,The build passes in Travis CI and The team did a great job at documenting issues. The branch has no conflict and checks have passed as well.
0,It passed Travis CI. All tests gave good feedback.
0,I think this code will be production ready once after thorough testing of the impacted areas.
1,"Unfortunately, I believe that the E1919 project is incomplete and it is not ready to be deployed per corresponding OSS project requirements. However, this is very good starting point for a future team to pick up and it certainly should not be redone from scratch by any means. I am sure that a lot of the Code Climate issues were resolved by the team and team has done great job by resolving the issues and spending time on this project. However, I list several big concern why their code is not ready to be deployed:
1. More than 60 (sixty) Unresolved Code Climate issues in the models with names starting from ""H"" through ""Sc"". Team did not fix all of the Code Climate smells that must fixed per corresponding OSS project requirement. I think future team can pick up on the left over work and resolve following issues that still remain in the models:
app/models/invitation.rb: Rename is_invited? to invited?: 73app/models/menu.rb: Method Menu#selected is defined at both app/models/menu.rb:44 and app/models/menu.rb:106app/models/metareview_response_map.rb: This file has 23 unresolved Code Climate issues that should be fixed. Seems that team completely skipped that file and decided not fix it. It has the following Code Climate smells:Use find_by instead of where.first: 59, 62, 65, 69;Use find_by instead of dynamic find_by_name: 61, 64;Specify an :inverse_of option: 2, 3;Unnecessary spacing detected: 59, 62, 65, 69;Line is too long. [163/160]: 56, [168/160]: 66;Redundant use of Object#to_s in interpolation: 63, 66, 70;Space inside string interpolation detected: 66;Unused method argument - session. If it's necessary, use _ or _session as an argument name to indicate that it won't be used: 55;Ternary operators must not be nested. Prefer if or else constructs instead: 15;Do not prefix reader method names with get_: 8, 34;Redundant else-clause: 18app/models/multiple_choice_checkbox.rb: Tagging a string as html safe may be a security risk: 29, 65; Similar blocks of code found in 2 locations. Consider refactoring: 33-37app/models/multiple_choice_radio.rb: Tagging a string as html safe may be a security risk: 26, 67; Similar blocks of code found in 2 locations. Consider refactoring: 30-34app/models/node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 15, 18; Rename is_leaf to leaf?: 28; Do not prefix reader method names with get_: 21, 37, 40, 43, 46, 49app/models/on_the_fly_calc.rb: Final newline missing: 99app/models/participant.rb: Identical blocks of code found in 2 locations. Consider refactoring: 144-148app/models/question.rb: Specify a :dependent option: 6; Do not prefix reader method names with get_: 43app/models/questionnaire_header.rb: Tagging a string as html safe may be a security risk: 15, 25; Identical blocks of code found in 3 locations. Consider refactoring: 19-23app/models/questionnaire_node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Rename is_leaf to leaf?: 55; Do not prefix reader method names with get_: 39, 43, 47, 51app/models/questionnaire_type_node.rb: Method get_children has 6 arguments (exceeds 4 allowed). Consider refactoring: 28; Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Do not prefix reader method names with get_: 20, 24app/models/quiz_question.rb: Tagging a string as html safe may be a security risk: 18app/models/quiz_response_map.rb: Do not prefix reader method names with get_: 12app/models/response.rb: Method concatenate_all_review_comments has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring: 110-114; Method add_table_rows has 6 arguments (exceeds 4 allowed). Consider refactoring: 256; Method display_as_html has 5 arguments (exceeds 4 allowed). Consider refactoring: 18; Tagging a string as html safe may be a security risk: 33; TODO found: 8; Useless assignment to variable - code and identifier. Use + instead of +=: 226, 253app/models/response_map.rb: Do not prefix reader method names with get_: 55app/models/review_assignment.rb: Line is too long. [173/160]: 112;app/models/review_response_map.rb: Do not prefix reader method names with get_: 16app/models/role.rb: Do not prefix reader method names with get_: 97, 113; Method Role#cache is defined at both app/models/role.rb:12 and app/models/role.rb:15app/models/scale.rb: Tagging a string as html safe may be a security risk: 18, 34, 74, 80
2. No tests performed on the code changes to verify that team did not break any existing functionalities and did not introduce new bugs in the code. Team needs to run all Rspec tests on all existing models and controllers and also develop new Rspec test cases to test their changes.Running Code Climate tool and Rubocop on the code does not guarantee correctness of code changes and do not test whether you code works as expected and does not break anything. It simply shows that your team has fixed reported issues. But was that fix correct in terms of effecting other functionalities? That is major missing information and work. Also team did not deploy their project for UI testings. Very a little information with regard to testing was added into the Wiki page."
0,The codeclimate bot and Travis CI both passes and a lot of files are refactored. I think that this is a good starting place for future teams to pick up because the refactoring done is pretty minor but it is comprehensive.
0,I feel the team have done a great job in doing the changes to the code and the code can be merged with the production sever as the code has no issues.
0,The code is ready to be deployed onto the production server since there is no issues on code climate and the Travser CI.
0,The team did a really good work
0,All the features are working as they are supposed to work and The code has passed through all the test without any issues or failures.
1,"According to coveralls, 
coverage increased (+10.1%) to 50.97%
However, I do not see new Rspec test cases added. In fact, I looked at all the commits and confirm that I do not see new Rspec tests were added to test team's code changes and refactoring done over some of the models.
Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team does not provide any information regarding existing Rspec tests. Did they pass? By running existing Rspec tests and creating new ones on the models that you worked on, would help to ensure integrity and validation of the code changes that your team is proposing. Otherwise, this is actually big concern and a reason for not deploying your project onto production server.
The Wiki page does not provide details on how the changes were tested to ensure that modified code did not break any existing functionalities, did not cause new bugs or any other issues. I do not see any evidence that team did any validation on the files that they changed by running Rspec tests on controllers and models. There is no information regarding approaches for testing your changes (not that your changes fixed the Code Climate issues). Running Code Climate tool and Rubocop checks, does not guarantee correctness of your code changes and fixes on the models. These tools simply state that the issues reported before are fixed now. However, I'am having hard time to understand what was actually done to test the code with your changes in it? Did the team at least try to run the following command:
bundle exec rspec spec/controllers spec/models
What is the output of the above command? All related information is missing in the Wiki as well.
Team's Wiki page contains Test Plan section, but it talks about only Code Climate tool and Rubocop, which is not enough for testing your changes. Team also did not provide any recorded videos where they run at least existing Rspec tests on models and controllers. How would anyone know that your team's changes did not break any existing functionalities or caused any issues?
Moreover, in the Wiki team states that ""some issues are ignored as they were breaking the rspec tests"". Is this a good reason for not fixing the code? If it breaks Rspec tests, your team must fix them and write additional ones. Otherwise, unfortunately your project would considered as incomplete. The following are suggestions for your team regarding testing approaches:
1. Test all existing models and controllers by running following command:bundle exec rspec spec/controllers spec/modelsand fix all the failed test cases.2. Develop additional 5-10 adequate and proper Rspec tests that can cover broad range of the models that your team has worked on. Without additional Rspec tests, there is no way to know for sure if your changes did not cause any problems in the existing code. As I suggested in the first peer review, there are 3 types of tests that your team should have performed and report the results in the Wiki. I still suggest to complete them if you want your code be deployed onto production server.3. Perform code inspection on your changes4. Start Expertiza instance locally or deploy it and run through the UI that covers your changed/improved code in models.
After all of the testing steps performed and results are documented in the Wiki, only then it should give some confidence that your changes did not cause any issues and can be deployed onto production server.
Also I see that team (as all other teams who worked on Code Climate) did not deploy their project on Heroku or NCSU VCL as I suggested in the first review. Running UI Expertiza instance is crucial part of testing. Did your team validate changes by running Expertiza instance and trying to perform some actions on it? There is no related information in the wiki with regard to UI testing as well."
0,The team has test cases. The coverage increased.
1,The team did not add test cases but some _spec.rb files were changed as part of refactoring. The coverage has increased after the pull.
0,The team has made many commits even after the first review and also new code has been added.
0,They have committed the new code during the 2nd round.
0,"The code is well written. No bad name, long functions, lack of comments, bad code style. The authors improved the code accordingly."
1,"Since the goal of the project is to Fix Code Climate issues in models with names beginning with ""H"" through ""Sc"", I expect not to find problems in the code, but to see that all Code Climate issues reported on the models of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate what Code Climate issues are resolved, I cloned the team's Github repository from https://github.com/rahulsethi97/expertiza , pushed master branch to my own repository, registered it with my Code Climate account, and performed Code Climate validation on your code. All the steps that I done I listed below:
 
git clone https://github.com/rahulsethi97/expertiza.git
git pull
git remote rename origin upstream
git remote add origin https://github.com/my_github/expertiza_e1919.git
git push -u origin master
The following is the list all of unresolved Code Climate issues I found:
app/models/invitation.rb: Rename is_invited? to invited?: 73app/models/menu.rb: Method Menu#selected is defined at both app/models/menu.rb:44 and app/models/menu.rb:106app/models/metareview_response_map.rb: This file has 23 unresolved Code Climate issues that should be fixed. Seems that team completely skipped that file and decided not fix it. It has the following Code Climate smells:Use find_by instead of where.first: 59, 62, 65, 69;Use find_by instead of dynamic find_by_name: 61, 64;Specify an :inverse_of option: 2, 3;Unnecessary spacing detected: 59, 62, 65, 69;Line is too long. [163/160]: 56, [168/160]: 66;Redundant use of Object#to_s in interpolation: 63, 66, 70;Space inside string interpolation detected: 66;Unused method argument - session. If it's necessary, use _ or _session as an argument name to indicate that it won't be used: 55;Ternary operators must not be nested. Prefer if or else constructs instead: 15;Do not prefix reader method names with get_: 8, 34;Redundant else-clause: 18app/models/multiple_choice_checkbox.rb: Tagging a string as html safe may be a security risk: 29, 65; Similar blocks of code found in 2 locations. Consider refactoring: 33-37app/models/multiple_choice_radio.rb: Tagging a string as html safe may be a security risk: 26, 67; Similar blocks of code found in 2 locations. Consider refactoring: 30-34app/models/node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 15, 18; Rename is_leaf to leaf?: 28; Do not prefix reader method names with get_: 21, 37, 40, 43, 46, 49app/models/on_the_fly_calc.rb: Final newline missing: 99app/models/participant.rb: Identical blocks of code found in 2 locations. Consider refactoring: 144-148app/models/question.rb: Specify a :dependent option: 6; Do not prefix reader method names with get_: 43app/models/questionnaire_header.rb: Tagging a string as html safe may be a security risk: 15, 25; Identical blocks of code found in 3 locations. Consider refactoring: 19-23app/models/questionnaire_node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Rename is_leaf to leaf?: 55; Do not prefix reader method names with get_: 39, 43, 47, 51app/models/questionnaire_type_node.rb: Method get_children has 6 arguments (exceeds 4 allowed). Consider refactoring: 28; Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Do not prefix reader method names with get_: 20, 24app/models/quiz_question.rb: Tagging a string as html safe may be a security risk: 18app/models/quiz_response_map.rb: Do not prefix reader method names with get_: 12app/models/response.rb: Method concatenate_all_review_comments has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring: 110-114; Method add_table_rows has 6 arguments (exceeds 4 allowed). Consider refactoring: 256; Method display_as_html has 5 arguments (exceeds 4 allowed). Consider refactoring: 18; Tagging a string as html safe may be a security risk: 33; TODO found: 8; Useless assignment to variable - code and identifier. Use + instead of +=: 226, 253app/models/response_map.rb: Do not prefix reader method names with get_: 55app/models/review_assignment.rb: Line is too long. [173/160]: 112;app/models/review_response_map.rb: Do not prefix reader method names with get_: 16app/models/role.rb: Do not prefix reader method names with get_: 97, 113; Method Role#cache is defined at both app/models/role.rb:12 and app/models/role.rb:15app/models/scale.rb: Tagging a string as html safe may be a security risk: 18, 34, 74, 80
Unfortunately, there are more than 60 Code Climate issues that your team did not address in the models with names starting with ""H"" through ""Sc"". All of the above issues can easily be fixed and tested. For the ""Do not prefix reader method names with get_"" Code Climate issue, you just need to remove get prefix in the method and all the callers for that method. For the rest problems you can just follow hints that Code Climate provides you. For example, ""Line is too long"". Break that line into multiple lines.As you stated in the Wiki page ""some issues are ignored as they were breaking the rspec tests"" is not an excuse for not completing the project.
Unfortenatly, only app/models/metareview_response_map.rb file has 23 unresolved Code Climate issues.
Overall, there are some improvements made in the code for the models. However, not all Code Climate issues were properly resolved."
1,I see that you added safe_join to the code. How do you know that it still works?
1,"The writeup includes brief description of what needs to be done, but I feel like there could be more much brief explanation what the team has done."
1,Yes the writeup clearly mentions almost everything mentioned above. The only element missing is the test plan.
1,"The wiki only partially explains how the authors did their work by providing only five examples of the Code Climate issues and specifying incomplete solution for them (please provide solution to the problem as code snippet or screenshot of the change). The solution is incomplete, because the Wiki discusses how the issues can be resolved, but does not provide solution itself in the form of code snippet or screenshot. The wiki only partially explains why the authors did the work resolving mentioned issues.
There must be more than five issues that the team has resolved in the code reported by Code Climate. The statement, ""And, there are many more code smells which needed a fix"", is not sufficient. Please specify all the issues you worked on and identify at least top 5 (five) of the most common/frequent issues (non-trivial) reported by Code Climate and give detailed information about them and how you fixed them. Trivial improvements, such as ""Extra empty line detected at method body"" or ""Line is too long"" can be left out. However, remember at least to mention them and indicate that they have been resolved.
The team should elaborate more in the wiki on how and why they have done the the work. Please consider the following list of improvements I provided below:
- May be start the Wiki page with ""Introduction"" section where you can briefly explain what your team is working on what is Expertiza and Climate Code instead of single ""About Expertiza"" section.
- In the ""Introduction"" section (if you decide to include it) you can address all new terms, such as Code Climate, code smells, and etc (even what is the code you are working on). That is where you can also briefly talk about what is Expertiza (create a sub-section for Expertiza instead of the whole section ""About Expertiza""). Do not forget to include useful links.
- Elaborate more on the issues that the team has resolved. List all of the issues that were resolved and identify top five the most frequent issues reported by Code Climate. Provide solution for most frequent issues with support of code samples or screenshots. Explain why did you use the approach that you did on fixing these issues.
- Do not include description on the trivial fixes since they do not contain any important issues a reader needs to know about.
- There is no Testing section. You need to include Test Plan section. Describe what testing strategies your team used to verify that your changes did not break any existing functionalities? Remember at least to run existing set of Rspec tests and report the results in the Wiki. Any changes you performed on the models must be tested with existing Rspec tests and ensure they still pass. 
- May be state any difficulties or issues the team has faced while working on the project? How the team handles such issues?
- Please mention (if any) remaining issues and further suggestions for improvements. Did the team has fixed ALL of the issues reported by Code Climate? Some of the reported issues are False Positive and etc?
- Please mention remaining issues and further suggestions for improvements.
- Include additional improvements section if your team has done such improvements (unrelated to Code Climate, e.g. renaming methods or variables).
- How did the team verified that issues reported by Code Climate are resolved. Make sure to elaborate on that.
- Include ""Conclusion"" section into your Wiki, where you can highlight all important points.
- ""Total Modifications"" section where you specify number of files changed (additions, and deletions) is unnecessary information. All this can be determined in the pull request. Although you can add this info in the ""Conclusion"" section if you want.
- May be include ""Team Member"" section if anyone in the future would have any questions regarding your fixes and improvements. Also you may provide more information on who worked on what issues?
Above are only suggestions and do not have to be completed. However, as a reader you appreciate having as much information as possible about someone's project."
1,"The writeup provides justifications for the work that was done and it was clear which issues were addressed in which files for the cases listed.  What was confusing was that the list of problems listed much fewer files than the ""Files Modified for this requirement"" (5 vs. 52), so there is no indication why the remaining 47 files were changed or whether the 5 files listed had any other changes besides the ones mentioned.  The ""Total Modifications"" section says that only 32 files were changed."
1,"The write-up gives a list of ""File Modified for this requirement"" but states that 32 files were changed. Why the discrepancy? I also cannot tell from the write-up whether there were issues that the group didn't solve."
1,"Scope of Improvement:
Team has correctly mentioned ""why"" they have created the changes. But, the documentation lacks ""how"". Team has given a list of files modified but it is not readable/intuitive. 
 
Suggestion:
Team could create a table of code smell categories and files. So, one can track what code changes are done in files based on code smells."
1,There is no testing part.
1,The writeup does not include tests
1,There is no Test Plan section provided in the writeup
1,There is no mention of any tests being performed. Please follow the suggestion mentioned above.
1,"Test Plan section is missing. There is no relevant information with regard to testing.
Please, create this section, provide the testing strategies your team used, and indicate how the code improvements/changes (that fixed Code Climate issues) were verified and tested not to cause new issues? List all relevant testing steps performed on the fixes that have done.
Ensure to test your code changes with at least 3 following steps and include results and observations in the Wiki:
1. Code inspection
2. Passing existing Rspec tests in both controllers and models (since your changes in the models may have an effect in the controllers)
3. Running through a live demo in the local Expertiza instance through the UI that runs over changed/improved code in the models (you may even record a short video demo and submit it here)
The above test strategies are only sufficient to ensure the code integrity and indicate that your team did not introduce new issues into the project. Complete these steps and include them into Test Plan section. Otherwise, there is no way for reader to identify if your changes caused any problems."
1,This section is missing from their document.
1,"Scope of Improvement:
Test writeup is missing. If your project does not demand test addtion/update, team could just mention why the feature does not demand testing."
0,The writeup includes problem statement so I can understand clearly what they will do. They also include all files they have made modification.
0,The writeup clearly states what was the goal and provides numerous examples in a coherent manner. I can understand that the project involved many small refactoring in numerous files.
0,The writeup fairly explains the work they have done .
1,"The writeup clearly describes what is expertiza, what are codeclimate issues and gives an example of some of the issue fixed. Although the writeup does not include a test plan or does not mention any form of testing conducted by the team. A suggestion would be to do a screencast of the rspec testing of the code and confirm whether the code passes the rspec tests or not. Also, it would be better to add explanation to each unique codeclimate issue and not a few of them as it would provide a more detailed explanation."
1,"Overall, the Wiki page looks OK, but it must be improved and some missing information must be added to get full credit.
Great job on creating a section that talks about Expertiza. This gives an idea to the reader that the team worked on the Expertiza source code (may be you also need to say that explicitly as well). However, introduction to the Code Climate information is missing. Consider that some readers may be unaware of such tool and the wiki page does not explain what it is for and what it does. The ""Problem Statement"" section in the wiki states, ""There were code smells detected in the application by code climate ..."". Some readers may find this very confusing and abbreviated statement and since not everyone can understand what the exact meaning of ""code smells"" or ""code climate"". These terms are not addressed in the Wiki.
Try to elaborate more on the new terms (i.e. Code Climate, code smells, and etc). Perhaps creating new/additional section ""Introduction"" would be great filling for a missing information.
I liked very detailed write up in the ""Files Modified for this requirement"" section. However, this can be re-organized a little and moved up into the ""Project description"" or ""problem statement"" section in much more concise form, such as ""Files involved for this project are in the app/models directory with names beginning with 'H' through 'Sc'"". This is sufficient information for the reader to understand what files have been changed and worked on. No need to include the list of all the files.
""Problem Statement"" section with code smells examples is incomplete. You probably need to create additional section and name it ""Implementation"" (or something similar) where you provide examples of code smells and how you fixed them. Your team must include not only the code smells problems in the Wiki (that is what you have now), but also solution to them and some descriptions explaining your team approach and why this has been fixed the way it was. Providing code samples or screenshots for the proposed fixes over Code Climate issues and detailed information for each type of the Code Climate issue reported in the models files is necessary information in the Wiki. Try to fill in these gaps.
Also consider leaving out examples with code samples (or screenshots) for trivial fixes, such as ""Useless assignment of a variable"" or ""Line is too long"" and etc. These are trivial fixes and do not add any crucial information about the work you performed. You may include just a names of these issues into the separate section, for example ""List of Fixed Issues"" and indicating that these issues were resolved. This would be enough information for a reader about trivial fixes.
There is no Testing section where the team indicates their testing strategies performed to ensure integrity and validation of the code. How did you test your changes and ensured that your changes did not cause any problems/errors? How did your team validate that Code Climate issues were fixed? Please elaborate on this more.
After reviewing the Wiki page, I can conclude that crucial information is missing and the page must be improved. Please also mention (if any) issues your team faced while working on the project, further suggestions, improvements, conclusion and etc. Please see next section for more details."
1,"The document has been nicely written describing the problem statement and the fixes that the team made. However, I would like to point out the following issues:
1. The team does not include screenshot of the errors in the code as it is very hard to pinpoint in the code file. As a suggestion, please include such screenshots in the document for good readability.
2. The test cases have not been handled in the document by the team. No video has been provided by them where these tests have been handled."
1,"The problem statement was good and the individual issues were described well.  I was a little confused about the ""using snake case for method names"" section, because the example cited (""hasAllPrivilegesOf"") is already in snake case.  I was not sure if this was an example of something that was fixed or an example a good method name.
 
Regarding the ""useless assignment of a variable"", I believe it is possible to use rescue statements without any assignment, for instance ""rescue StandardError"", which would seem to be preferable to ""rescue StandardError => _"""
0,"Good Work :
The documentation is good and the reader can get clear understanding of what the project is all about. I really like the way problems and there possible solutions are grouped in the problem statement section."
1,They didn't add any new features and functions to code. No edge cases need considered.
1,"The travisCI shows that the build failed however, no tests were added to the code changes and the new code shows that coverage decreased. I would advise testing the changes you made."
1,NO it does not work for all edge cases.
1,"Unable to test completed work manually, since the team did not deploy their Expertiza project or did not provide information on their deployment in the submission. Please deploy your Expertiza project if you have not done it, so other reviewers and I may test it remotely on the deployment.
I am also unable to test the project locally on my VM since the team did not provide their working Git repository where they have all the changes. Please, at least provide me with your working Git repository, so I can pull the code and run it manually on the local VM environment for manual testing. (I was able to do so for the other team since they specified their git repository in the Wiki, although they did not deploy the project).
Also make sure that you perform manual testing as well that cover the changes you performed over the models files (again, running and passing Rspec tests does not guarantee validation of your changes). Manual testing is important part of the project and I suggest to document that in the wiki page."
0,They don't add any features to the code. The task was to fix code smell detected by code climate.
1,There is still html code in the model and it would be good if those can be put into the views instead of the model The code follows Ruby style guide and is fairly DRY.  Comments for each method on what it does would be something you can add.
1,"Not only that I should not see any relevant problems, but indeed all existing problems in the source code must be resolved per the project requirements (e.g. DRY, lines too long, code smells and etc.), especially if the team is assigned to resolve all code smells reported by Code Climate tool! Team has done great work on fixing all the code smells, refactoring and improving the code! I did not find new issues and code looks great!
However, the code that has been changed needs to be well-commented and documented. Please provide sufficient comments on some complex functionalities that you've improved.
1. I've noticed that team did great job on fixing files containing too long lines, replacing class variable @@variable with a class instance variable, changing where.first() method with more appropriate find_by() methods, and using guard clause instead of wrapping the code inside a conditional expression. Team also did great job eliminating extra whit spaces in the files.
2. DRY code is eliminated.
3. Needs more comments (for example, app/models/question.rb, app/models/rscore.rb files). Please provide comments explaining what code is doing.
4. Code follows the Ruby Style Guide. Well done!
5. There are no additional code smells or DRY code that I found besides what was reported by the Code Climate. On contrary these were fixed!
Overall, team did great work on the improvements and changes! But it obviously missing Test Plan and test strategies on the improved code!"
0,"After reviewing the pull request:
1. I could not find any such code to be fixed in the specification.
2. I was not able to see this implementation in their code, even though if was provided in the specification, however, I could be wrong.
3. For the changes made, I believe that comments in the code should include as to why those changes were made.
4. I found that they followed good Ruby Practices in their code. For example,
child.get_creation_date was changed to child.creation_date and child.get_modified_date was changed to child.modified_date.
5. All such cases were handled nicely by the team."
1,"The changes consisted exclusively of minor tweaks, like using alternative methods, so stylistic issues really do not apply to this PR.  I would note that in some cases existing code was commented out instead of being simply replaced, i.e. both the old and new code now coexist.  That really isn't a sustainable approach to making changes, since you will end up with several commented-out variants of old code if this approach if followed in future changes."
1,In questionnaire_header.rb I don't see how you fixed the html_safe issue. It looks like the line is still there.
0,"Good Work:
The team has done excellent work on code implementation. Team has followed Ruby and Rails guidelines and naming conventions. Code is clean and properly indented."
0,All the names of the methods appear fairly appropriate.
1,"The travis CI build doesn't pass.
The codeclimate tests show 6 issues with 2 major ones being the presence of duplicate code. That needs to be fixed. Other issues are minor."
1,"Refactored code resolving Code Climate issues appears to be well written and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code (as expected), and pull request mostly contains refactored code that already existed in the repository.
Please note that build and Travis tests have failed for this pull request (all checks have failed also). There must be some changes that caused the builds to fail.
While looking at the changes in pull request, I noticed few very minor things that can be improved. Please consider to improve following items:
- Use new/latest Ruby format for hashes in the code that you changed (app/controllers/tree_display_controller.rb). Example, use ""{""directory"": node.directory}"" instead of old way  ""{""directory"" => node.directory}""
- I suspect that Code Climate issue ""Tagging a string as html sage may be a security risk"" was not addressed at all. Please contact your mentor for further assistance in resolving the issue. (My team and I had similar project and I noticed that you fixed ""Line is too long issue"", but did not fix security risk in the app/models/questionnaire_header.rb) file.
https://github.com/expertiza/expertiza/pull/1397/commits/1ceec18b5c8fc7200c98d776cce189d5972d68fe
- Remove commented out code (app/models/invitation.rb, app/models/menu_item.rb, app/models/multiple_choice_checkbox.rb, and etc). If this is not a comment and just unused code, delete it. Example:
https://github.com/expertiza/expertiza/pull/1397/commits/9b2673e88aa2317956f77505edabe975bbf320b4
- Please provide comments on some of the fixes and describe what code is doing after you modified it (believe it or not that is how you find if your changes are correct, i.e. code inspection). For example, changes in app/models/question.rb, app/models/rscore.rb all need to be well-commented and documented.
- There are few fixes team has made by renaming existing methods with more appropriate names (e.g. ""get_children"" into ""children"" ). I suspect this is related to fixing ""Do not prefix reader method names with get_"" Code Climate issue. New names are appropriate and these fixes are well handled by the team. Just make sure never use ""get_"" prefixes for getters and ""set_"" prefixes for setters and at the same time do not use built-in system key words (i.e. time, date and etc). Overall, well done.
https://github.com/expertiza/expertiza/pull/1397/commits/a718472aa85b051ed93c93c3e6a9016a2cfe0891
All other existing method and variables names within the scope of modified code are reasonable and should not be changed. There were only few cases when the team added new methods (submission_records_controller.rb). However, these are just CRUD methods. Keep in mind that this is not the case for some other variables and methods in the files that you modified. If variable or method names can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
0,"I found the variables, methods and class names to be following good Ruby and Rails practices and I could not find any wrongly named code."
0,"Good Work Done:
Names are proper, meaningful, concise and spell-checked. Good work team..!!!!"
1,"Since there is no ""Test Plan"" in the Wiki page, or any information related to Testing, the authors obviously did not cover tests nor convert them into automated tests. Moreover, I did not see new automated or Rspec tests added in the spec directory to test all the modified code and ensure it works as expected.
I see that no changes are done on the rspec/controller directory where all the Rspec test files located. This indicates that changes performed by the team to fix Code Climate issues did not have any effect on the existing Rspec tests and did not break them, which is a little suspicious since my team and my changes for Climate Code issues broke some of the existing Rspec tests and we had to fix them. I noticed that team did not verify correctness of their changes with existing Rspec tests in the controllers and models by running them and verifying that they all still pass, since this was not addressed in the Wiki and the team did not submit any video recordings with the running and passing tests.
Did the team at least verified changes with existing running/passing Rspec tests? Was the following command executed to perform validation:
bundle exec rspec spec/controllers spec/models
Team is required to verify all their changes by running controllers and models Rspec tests and making sure they still pass.
Please run existing Rspec tests and report the result (upload the video of running and passing Rspec test to submission board). If you have failed rspec test cases, you need to fix them.
If your team was not explicitly asked to write additional Rspec tests, indicate this in the write up. Record short live demo showing existing Rspec tests passing as indication that your team did not break any existing functionalities (although there is only ~53% test coverage).
Also, please explain your Test Plan in the write up as well."
0,"Yes, commands have been added to perform tests."
0,"Yes, a detailed test plan have been mentioned. Good work !!"
1,"The team tried to implement few test cases. I didn't fully understand the implementation, I felt it would have been better if there's more explaination included regarding the test cases in the document"
0,They seem to have added tests as recommended by mozilla. This shows that each test should work to test a functionality
0,"The test plan is good and the manual testing is a great way to make sure the viewers have a breeze of time understanding the entire project. Good job, team!"
0,"Good Work:
The test plan is thorough and robust. The team has also mentioned the affected files and also have attached the screenshots of the affected code."
0,They provide some figures about the process to solve the issue. They might not need UML figures in this project.
1,"Yes, I appreciate that the team has added a few flow-charts. But, what is not clear to me is that, the heading 'Process of solving the issues' is very vague and I do not exactly understand what issues the heading is denoting. They could have added what the issue is specifically."
1,"The diagrams have been included now and make it eqsy to understand the flow. However, use case diagrams would have helped more."
0,The diagrams are very simple and very understandable. They did not over do it and make it confusing. So thats a plus!
0,The use of visual tools has been used wonderfully. It is used wherever required to enhance the documentation understanding.
0,"Good Work:
Team has adequately used the diagrams, screenshots and flows to represent the existing and proposed functionality. Screenshots of test cases and code make it easy to understand what the team is trying to accomplish. The team has done really great work in creating this document."
1,I think they might use the document in the last project. I think it will be better to write a document about the current project separately. There are many details about last project.
0,It seems simple enough with the steps laid out as they are for each issue.
0,I do not find the design complex. It is pretty easy and simple to understand.
0,"Although the project is complex, it looks like the team has done a good job of simplifying it."
0,"Good Work:
The design appears to be as simple as possible. It straight forward and properly presented by the team. Good work done by the team over the implementation of the feature."
1,The design is written great. It will be better to explain more about the pattern used.
1,"The team has mentioned the subsequent steps to be done for their project. But, they've focused on mentioning the test command and they have explained what is to be done in a line or a two. I feel they could have added a bit more in explaining what they're going to implement and how they're going to do the same."
0,Yes the design appears to be sound and follows approriate principles.
0,"The design document appears to be fine. The team have included most of the points that are necessary. I could identify few changes since the last submission in ""code"" part of the document. The process of solving the issues is depicted clearly with diagrams. There are links to the video showing the implementation as well. From the videos i can see the implementation of the project as well."
0,"Since it is a Mozilla project, they seem to focus on arriving at the solution. Design patterns dont seem to hold here"
0,"Yes, the design appears to be sound. They explained why they do not need to follow any design principles as such."
0,"The design doc explains all the existing, new and expected implementation with complete details."
0,"Yes, they explained the process for solving the issues and provided useful links for the reviewer to understand the change."
1,"Yes, the team has added subsequent steps. The only suggestion I have is that, they could have added more about their implementation."
0,"Yes, The changes have been explained pretty well."
0,"Yes, there is a clear explanation of how the authors plan to make the changes. It has been clearly depicted by the flow diagrams in the ""The process of solving the issues"" section."
1,"Yes they have explained everything well. As I suggested before, if they could remove the number of external links in their document and a brief explanation of the same instead, it would be even better."
0,They do a great job of explaining the changes they need to make and illustrating them via relevant diagrams.
1,"The changes to be made is not explained, because the changes have already been completed - at least that is how it looks from their implementation. If they do have something left to implement, they should create a paragraph to add those details."
1,"Scope of Improvement:
I couldn't see any improvement regarding the suggestion given during the previous review :
""The reason I chose to review this project was to understand reviewing something that you are not much in. As a novice reader, I find the use of too many technical terms in the project description/problem statement. Team could just improve upon explaining things in a much simpler way. Overall the explanations are thorough and all sections are covered.""
This thing could have been improved by the team."
0,The code block and the explanation that followed was helpful.
1,"There are no visual aids. 
A design flow or any other UML diagram would have been of great help understanding the proposed solution."
1,There are no diagrams or visual aids.
1,"I do not agree with the team's opinion that ""Visual aids not applicable"". As per my understanding of the project, the project touches the workflow. So the team could add any UML diagram to represent existing workflow or any use-case diagram if applicable. I believe that adding a diagram will help the reader to understand the project quickly."
0,The code follows DRY principle and they didn't add new method to a wrong class. I don't think the new design will increase the response time.
1,Some more information about next steps would be nice.
1,"The solution proposed is mentioned in ""too deep level"", where you have specified directly the files you would be interfacing(modifying). It would have been great if there were some explanation about functionality and solution in ""plain english"". Unless the reader has detailed knowledge of the project, it would be hard for them to draw sense out of it."
0,"The team included code, examples as well as the status of the project in the implementation section. They have given a detailed description of the implementation."
1,Could not find the 'design'
0,Their design looks good and their methods/code makes sense.
0,The design proposal is good. They are looking into the problems why the code wasn't merged which is great.
0,"Yes, they have implement in the document. It seems that the project has been done most of part since the project is related to last project."
1,This project was also an OSS project. There is a lot of explanation about what they are using and what they have done but not so much about what they are gonna do.
1,"Changes on what is to be done have been proposed by the team, but  the team hasn't explained clearly as to what they're going to do and how they're gonna implement it."
0,Changes proposed look sound.
0,The explanation provided by the team for each of the contents is very clear. The authors left a note for reviewers to clarify on a few things. The team did not complicate the explanation with too much data.
1,The overall quality is adequate. My one suggestion would be to reduce the number of links added in the description. It would be easier and more convenient for the readers to read a brief description explaining the concept instead. The frequency of the links can be reduced if possible.
1,"I think their explanations were very thorough. They even went above and beyond by answering common peer review questions on their wiki. However, I don't think keeping that section (answering common peer review questions) on the wiki past the peer review phase is a good idea. The purpose of the wiki is to explain your project, not ensure you get a good peer review grade. Also, I suggest fixing the typos/grammatical errors on the wiki so that it looks more professional."
1,"The changes mentioned by the author seem valid but I found it a little difficult to understand but in no way inadequate.
The reader has to read it a little carefully. The problem statement could have been explained in little more detail to give a good introduction to the entire problem. The remaining text becomes easy to understand once the problem description is clear. It would be better if the problem statement could have some previous context to it. A few more lines about AudioParam and how it is useful for Servo."
1,"Scope of improvement:
The reason I chose to review this project was to understand reviewing something that you are not much in. As a novice reader, I find the use of too many technical terms in the project description/problem statement. Team could just improve upon explaining things in much simpler way. Overall the explanations are thorough and all sections are covered."
0,It's pretty well done. There are enough details to help the reviewer to understand.
0,"Yes, the design specifies what their next step is going to be and how they're going to proceed."
0,"Yes, the design covers all the functionalities."
0,The design document satisfies all the required functionalities. The team have included all the sections that are supposed to be included in a design document. I liked how the team also put in a section for peer reviewers. The document followed proper format with well written sections. The problem statement and the implementation are very clear.
0,"Yes, the design seems to incorporate all of the functionality required."
1,"In the required steps the following is been mentioned:

Implement the missing JS API for setValueCurveAtTime per the github issue
Implement the missing setPosition and setOrientation APIs per the github issue
update the expected test results for the relevant tests
implement the backend for WaveShaperNode in the media crate by creating a new node implementation using BiquadFilterNode as a guide. Create an example program that demonstrates the effect in practice.

Among these the first issue is being tackled very extensively. 
They chould speak a little more about what is the entire plan required to complete the project."
0,"Great work team...
Not only the team has created the design document, but also they have completed/ implemented all the functionality."
1,There should be more information about what is being done for this project and less on what has been done and explanations about what all the platforms are.
1,"Design document covers almost all the aspects, except for UML diagrams. Also, I could not see a specific section for test plans."
0,The document looks good with detailed explanations of all the sections and also the team included many code snippets which show the implementation part of the project.
0,Great document includes all the essentials.
1,"They do a good job of explaining the project purpose, project design, and testing plan. My only suggestion would be to make the link submitted to Expertiza the link for the entire wiki page (without the #... at the end). The reason for this is that the project purpose, design, etc. are explained at the beginning of the wiki, so if I were just looking at the ""Final Project"" section of the wiki, I would have no context and would not understand the purpose or design of the project."
1,"The design doc looks very complete. Infact, I am not sure what is the task that the team is remaining with. They seem to have completed all the implementation. I would like to know which part of the documentation is still on its planning stage and not implemented."
0,"Great job:
The document is great and properly structured. Screenshots of test cases and code make it easy to understand what the team is trying to accomplish. The team has done really great work in creating this document."
0,Not an Expertiza project.
0,Not an Expertiza project!
0,The project was not an Expertiza project. The checks in the servo repo passed and they successfully for the changes merged which is awesome. Cheers to the team. :)
0,Yes. The code can be deployed onto the production server as it looks like they are using the correct approach and are almost done with the first part.
0,It looks like their pull request is ready to be merged into the Servo project.
0,"The code alreade got merged, which means it is ready to be deployed. 
I don't find anything of major concern to me."
0,"According to me, this code can be deployed onto the production server. According to me, the project seems to be correct with the issues solved, features implemented and tests are written for the new code added. 
So according to me, there are no big concerns and this project can be considered as completed."
0,I have sen some errors on their GitHub page but they seem to have fixed almost all errors. I think this could be deployed onto the production server because I see their last commit shows that their build passes Travis CI and hence they should be good with its working.
1,"The Wiki page is pretty good. They've explained the problem statement and have explained how the code works. More explanation could have been given on how they are overcoming the issues. Also, the instructions given to build and run the code aren't clear, and there are no instructions to follow for Windows or Linux."
1,The write up is good. Maybe contains too much information and is a cluttered. Having simple and brief information in certain topics would make this an easier read. (Adding bullets wherever possible)
0,The writeup is very well-written and thorough. They definitely improved it since the 1st round.
0,The writeup is pretty extensive. They have included most of the details with infographics as one would expect.
0,"The writeup is very clear and easy to understand. Even though a Mozilla project was new to me, the writeup was written so properly that feature implementation could be understood correctly. The functions have been explained and also how and why it is implemented is mentioned in various sections of the report. 
The writeup is far better than how it was during the first review. A good job is done by the team."
0,"Rust and mozilla being entirely new to me, the writeup was a good place to get a clear idea about what was happening. This was a well written writeup."
0,"The writeup is very clear and clean. They have explained in detail about what the project is talking about and they have explained what WebAudio API is and how it works for the project, which is nice because for the students who did work on Expertiza would also understand what this project is if they read their writeup properly."
0,Cannot be tested from the UI as it a Mozilla project.
0,"I was not able to verify the system operation from the UI since it is a Mozilla project. However, it seems to work as intended and they refactored the relevant code."
0,"I am not sure what UI was expected out of this project, but the implementation of the algorithm can be seen clearly in the sine_wave implementation function and tests."
1,"I do not know how to check this implementation. The writeup has given detailed instructions on how to do this for the MacOS, but I have a windows and there are no instructions to do it on that."
1,"All the functionalities seem to be working as intended. However, I think the test cases don't seem to be covering all the scenarios."
0,"Yes, the team has added a test case and the code passed the test case."
0,"Yes, they did add test cases. They even added videos of themselves testing the project."
0,"The team did do very good manual testing and have added the following screencasts demoing the tests. The coverage cannot be figured as this is not an expertiza project.  I am not sure if the maintainers require test cases to be added, but does not seem to be the case to me."
0,"Yes, they had tests included in their final merge."
0,"The team did add the test cases for the new feature which was added for the project. The test case is not only demonstrated through the code but also through a screencast which shows the implementation of the audio feature. 
This project has by far, the best test cases written and displayed."
0,I am unsure of as to how tests would be done for the mozilla projects. But there appears to be a good description and a detailed section about tests in the write up.
0,They did add test cases and the coverage did increase. They seem to have cover most part of their project.
0,"Yes, the team has made many commits during the second round."
0,Many commits were made during the second round.
0,Multiple commits were made during the 2nd round.
0,"Yes, they had a long conversation with an admin and their merge has been accepted as well."
0,"Yes, majority of the commits are after the first round."
0,I see they have made a lot of commits after round 1 and they seem to be consistently working on their project.
1,"Compared to the first round, the team has improved a lot with respect to the code. Looks like the team has followed DRY principle and haven't added unnecessary functions. The only problem I had was following the code that they've written as the code walk-through is pretty unclear to me. I feel comments could have been added for the code or the code walk-through could have been more clear."
0,"Their variables and methods all had relevant names, and their commits had appropriate commit messages. Overall, I thought their code was very nice."
0,The codewas written was of high quality. The code disobeyed the DRY principles in the beginning but they soon rectified it. It is very well commented and enhances understandability and readability of the code. I dont find any bad code style in any of the commits.
0,They had some problems with code and the admin made them fix them. But it looks all good now!
1,"According to me the code added for the new function doesn't seem to be long enough, i.e, cannot be refactored. The one thing that could have been improved in the project is the addition of the comments for the new code added. This would give a clear idea for anyone seeing the code for the first time. 
Along with that, the coding style also seems to be good with no bad namings as well."
0,Their code seems to be written with good code style and by following DRY principle.
1,They have not mentioned anything about what is to be done and what they've done to overcome the given problem.
1,"There is a portion in the page which has a little bit of code. But nowhere does it specify if they have done it,  or if it is part of the problem statement.
 
It would be great if the page followed a flow:
Problem statement->Steps to take->Implementation method"
1,I did not see many examples of design patterns that you used. I suggest adding more detail in that area.
1,"Yes, they aim to describe it but fail to articulate it peoperly to a new commer. IT task should have some background on how it was before and how it is expected to be."
1,They have but I do not see a lot of changes in the code. They have not put up their PR link. So I can see that there is  only one commit for their PR. No idea.
1,"The writeup explains what needs to be done in the ""Web Audio API"" section. This section also mentions the workflow, but how the authors have implemented the changes and in which file have the changes been made is not very clear in the writeup. Because of which it was a little difficult to follow what is done until now.  The authors have not used any certain design pattern, and also not mentioned anything about in the writeup. Other than this, things were good."
1,Nothing is mentioned about the test plan.
1,"I am not sure if there is a test plan. There are commands included to build the project and do some tests.
But I dont know what that will yield.
Commands only for mac is specified. Couldnt test on windows."
1,"The writeup does not include a Test Plan section, so I cannot comment on it."
1,"There is no test plan included as of now, but it is great that they have figured out the entire system to work on."
1,The writeup does not include any test plan section. No tests have been written by the authors yet because of which I was not able to find which scenarios worked and which didn't.
0,"I believe a test plan is not necessary for the Mozilla projects? I may be wrong, though."
1,I didn't see any test plan in their description.
1,"The write-up has some information about Servo, Rust and WebAudio Automation. The team has also written about how to build and run the code, but it is not clear as to which OS these commands correspond to. Also, the team has not mentioned what they're supposed to do and what they've done so far."
1,"The write up is very clear. Additional links describing certain topics makes it a little easier for the readers to get familiar about the project.
 
It would be better if they add the problem statement or tasks they have to finish to understand the project objective better."
1,The writeup is very clear and informative. It also gives introduction to new concepts being used for implementation. Though it is difficult to understand what the project exactly aims at. It would be better if they include a seperate section on the problem statement and the tasks that needs to be accomplished.
0,The writeup is pretty inclusive of the changes.
1,"The writeup is clear and explains adequately on what is to be done and how is it done. The project idea is very clear and is explained on the Wikipedia page along with the workflow of the project. For understanding, the authors have also given a brief idea and an introduction to the technologies used ""Rust"" and ""Servo"". However, the Wikipedia page only gives partial information (that is, what all is implemented until now) because of which it is not very clear as to what is to be exactly carried out in the project. I would suggest the team to include some more information on how to follow the code."
0,They have clearly explained in detail what their project talks about and briefly explained what are the problems and how are they fixing them.
1,"Initially, there were a lot of troubles setting up the build using Cargo because I have been working on the Expertiza project all along and did not have any idea on the Mozilla project. But due to the information mentioned on the Wikipedia page, setting up and running Servo was then easy. But the implementation does not seem to be working correctly that is automation support for WebAudio is not exactly implemented as it must be according to the project guide. After running the ""cargo build"" command, I am encountering errors which were because of the code. Due to this, I would suggest the team to carry out enough testing before committing the code to the repository."
1,A small portion of code is added to params.rs file. Looks like they are still updating the repo and are not done with the code.
0,"Code changes look great. The DRY principle has been followed and also the knowledge of past codes was properly used to merge the new code in a readable and understandable fashion, rather than using completely new files for implementation. The rust style guide has been followed."
0,The code seems to be fine. But I can see only one commit made.
1,"They did a good job in writing the code that follows DRY principle. However, they have very few comments on their code which makes it hard to understand it."
1,Not enough code to comment on
0,The code looks good to me.
1,"It is  not commited into a forked repository, thus the upstream remote is not set probably. I am not sure how they are running and testing the builds. If the process is not generic, may be an introduction on how to test and build the changes can be given."
1,We were given the link of directly the repository and not the PR. It would have been clear if it was the latter.
1,"The link for pull request has not been provided by the team. However, the team has submitted the link to the repository through which I was able to check the changes made on the code. The authors have implemented a method ""SetCurrentValueAtTime"" as an automated event in the ""params.rs"" file. This method has been called in several places in the code of the same file. The writeup shows the changes implemented but the features don't seem to be working correctly. I would suggest the team to test the function after making the changes."
0,"All the variable names and class, method names seem to be reasonably appropriate to their functionality."
1,"There was no Test Plan, so there were no cases discussed in the Test Plan."
1,I am not sure if they are following any test plan. Also I am not sure how to build the project since the [url] seems to be missing from the documentation.
1,The code follows the Ruby Style guide and does not contain a long method. But the team has not converted any of the cases into automated tests because no test cases have been written yet for the function which is implemented.
1,I don't think they discussed anything about Test plan anywhere.
1,A test plan isn't really included.  The authors simply say they will ensure current Rspec tests will continue to pass and that they will test their new functionality.  More details regarding how they plan to test the features they add would be helpful.
0,"Yes, the team gave a detailed explanation in manual testing describing different scenarios."
0,"YEs, there is a detailed and self explanatory test plan included in the document."
0,"The design doc does have a test plan proposed, The provided test plan has various scenarios covering all the possible scenarios, the brief details of all the scenarios cover all the possible ways to cover the functionalities."
0,Test plan is quite and explains their thinking.
0,The test plan looks good and it does cover the implementation very well.
0,"yes, they have added test plans and have created different scenarios to try to cover all edges cases as well."
0,They put graphs and user designs in the document. Seems all these effort help with me understand their goal and design.
0,Use of UML diagram and Mock screens are used appropriately to understand what changes are to be made to the system in one go.
0,"Yes, the diagrams are present and now make it more clear to understand. 
Team has considered the past review about the diagrams missing and added them now. 
Good job with the samples and Use case diagram."
0,Yup they added it after the last review. Good job.
1,"The visual aids used by the team are good but they need to provide a brief explanation for each visual aid. Moreover, you could use other types of visual aids to describe the changes being made in more detail such as and Activity diagram or Data Flow diagram."
1,"The team has failed to provide any class diagram. 
The design doc has a couple of use case diagram of a landing page and a particular assignment page conversion to Hindi.
Apart from this, I did not find any diagrams.
I suggest them to visually develop some UML diagrams for better understanding and developing the project."
0,"I believe because this is a bug fix, the team has done a reasonable job by providing a file tree of the files to be fixed. Perhaps a flowchart would have worked well in describing the bugs to be fixed."
0,"Yes, the class diagram clearly mentions all the things that the student will be able to do after the implementation such as choosing other language and able to see the expertiza details in that selected language which is the whole scope of this project."
0,The design looks very reasonable and not complicated at all.
0,"Yes, the design is simple. They have defined their task, and have shown how they will implement it (files that are associated with the project, figures that describe before and after implementation) and test plan."
0,"YEs, the design is pretty simple and easy to understand."
0,"The design looks fairly simple and very clear, the description of their design is also very simple to understand."
0,Yes the document is simple and clear.
0,Its very easy to understand the purpose and the implementation of the changes.
1,"Again, the core design is not shown in the document since it was provided by different team in the last semester. The team is only going to complete unfinished work started last semester. Based on the ""Implementation"" section, the team is happy with the initial design that was given (I guess team's mentor also reviewed previous work, and is aware of the design).
Based on the given document I cannot determine whether the design is as simple as possible. Use case diagrams show it to be simple, but these are too high-level diagrams that do not reveal implementation details and cannot be used to determine complexity of the design.
Since the team is convinced that previous changes are ""on the right track"", I assume that the design is in fact simple as it could be."
1,"The team has although figured out what are the issues of the previous team and what needs to be changed but I could not find anywhere as to how they plan on solving all of them.
They mentioned about replacing the javascript back with ruby back URLs which looks simple and is neat. 
Team also stated for the NoMethodError can be resolved but passing correct params which are not being passed in the current implementation. 
Apart from these two, there is no clear mentioning of how they plan to solve the other issues."
0,The team has precisely identified the bugs to be repaired.
0,The provided design is simple and the team also have provided more UML diagrams and screenshots that they were lacking last time.
0,They have show a clear design of their project. Graphics and explanations are detailed and clear.
0,"Yes, the document is organized and clear to the point as in what they are supposed to do and how they are implementing it. The design document is sound and it follows appropriate principles and patterns."
0,"Yes, the design appears to be sound and follows the patterns appropriately."
0,The design appears to be very sound and follows all the appropriate principles.
0,The document covers every point in good detail.
1,"From the document it appears, that most of the design has been already made in the last semester by the different team. Based on the ""Implementation"" section, the team is going to be mostly fixing bugs that were introduced by different team, improving and adding missing language selection options in some pages, and adding missing static text translation in some of the files.
The team stated that existing design and implementation that was given to them as initial work from the last semester is solid and sound. It appears to follow appropriate principles and ""on the right track"". However, no documentation was provided by the team to illustrate existing design and implementation. No UML diagrams were given to reflect on the code implementation that were done. Therefore, I cannot conclude whether the design really appear to be sound, follow appropriate principles, and using appropriate patterns. I can only guess since the team stated that they found no problems with it."
1,"From the previous submission, the team has carried out some more design planning and added/removed stuff from the report. 
It seems they have now identified all the tasks that need to be done in order for implementing the project.
The issues are being discussed and have listed the files to be changed but still, it is missing on how they plan to overcome it."
0,The design looks good and follows the appropriate principles and patterns.
0,"Yeah, they showed files that need to be changed and gave different scenairos."
0,"Yes, they have explained what changes they plan to make to the existing system. They have what files have to be changed with respect to project definition."
0,"Yes, the changes to the system have been explained well by the author and diagrams make it easy for us to understand the system now."
1,"The authors have done a very good job explaining all the changes they have to make in order to achieve the solution for their problem statement. 
But I felt that mentioning names of all the files that they have to modify would be very nice."
0,Changes to be made are well explained.
0,The document looks very good and it would be really great to see these changes being implemented successfully.
0,Lots added since round 1 - big improvement!
0,I feel informed about the changes the team will attempt to carry out.
0,"YEs, they have explained as what all files need to change and how would they proceed to do that."
1,No UML included in the document.
1,The team did not provide any visual aids.
1,"There are no visual aids provided.
A few diagrams would have been helpful understanding the proposed flow/changes better."
1,Though the writeup is very clear and easy to understand there no diagrams or mockups used in order to explain their plan of action.
1,The document lags all the UML and visual aids.
1,"Unfortunately, document does not contain any visual aids (e.g. UML diagram, E/R diagram, mockups of screens or tables). Please provide as many visual aids as possible, by creating at least one UML or ER diagram (whichever is more appropriate). Also since this project have been partially implemented, you can use existing implementation to mockup the web page and show the screenshot of the page after different language is selected (hi_IN). May be discuss what other improvements are you going to do to the existing implementation.
Please show how selecting different language would effect the page visualization. Is the selected language used across entire web-page(s)? Will there be only partial change in language (some feature still would remain in English)?
Since no diagrams are provided, I am unable to answer neither of the above questions 1), 2), and 3)"
1,"The team has not added any visual aids. No UML diagrams or screenshots have been put on the design document. 
I suggest the team to add a flowchart for the design flow to give a better idea on how will the implementation take place."
1,"I could not find any visual aid for the design doc. 
This was the only part missing I feel.
I suggest them to add some UML for their final submission which gives clear idea.
Or they could have pictured scenarios instead of writing them."
1,Team has not added any diagram or screens or tables.
1,"I have checked the designs that are proposed by the authors. I don't think the authors did add any methods to the wrong class as per the documentation. The new design looks like it will change the previously implemented project to bring out a working functionality that passes all the edge test cases. The new design does not look complicated as the author tried to convey their understanding of the project in a simple defined structure. The new design may potentially increase the response time of the system as it depends if the internationalization is done predefined by the author or if a third party library is used to make the translation. Once the team starts working on the implementation then the design page can be updated with screenshots, design flow, etc."
0,The design appears to sound. For now I could not see any if any of the code/design would cause smells of any other system issues.
1,The proposed changes by the team only include the files names where the changes have to be implemented but nothing regarding what changes can be possibly made. So it would be nice if they explain that.
0,I think all the points are covered by the author.
1,NO information about implementation. A basic overview of the implementation can help to evaluate the design.
1,"It is difficult to judge the design doc on 3,4,5 as the doc is massively lacking textual as well as visual context."
1,"Unfortunately, the Design section is missing in the document. Please add Design section before the final peer review date. Design section should include at least one diagram (UML, Entity Relationship, and etc). List of files that your team is going to change should specify what kind of changes will be made to the files (please include mockups methods, classes, variables and etc). Definitely this section is one of the most important in the document, so please spend time and effort on it.
Unfortunately, by stating the list of files that are going to be changed is not enough for the Design section.
1) No methods, classes, variables to be added are specified in the document.2) Unable to determine if any changes will introduce code smells due to missing design3) Unable to determine quality if the design due to missing design itself.4) Unable to determine due to missing design.5) Design section must be created and team should spend time and effort on it."
1,"The authors have not mentioned any information on the design document to add methods to various classes. So I cannot suggest any changes or improvements regarding that. 
The team has not mentioned anything about the design which will be used for implementation. No information can be provided on the response time.
I suggest the team to put some more efforts into the design part of the project."
1,"Although the team is able to identify the flaws they have not mentioned how they plan to implement it.
Since there is no coding done it is not possible to identify the smelly code of the team.
There should have given more information on which controllers, models, and views they plan to modify or add. In this way, it would have been easy for me to give any suggestions if needed."
1,they have put all the files they are going to change but as to how would they will do that is not mentioned or the effects of changing those files
1,They did provide relevant files that need to modify but no more details included. This is totally fine at current stage.
0,Changes proposed are good. Explanation written is intuitive and easy to understand.
1,"The problem statement has been very clearly mentioned and also required information about where the code has to be modified has also been given. But, there is no information about what would they propose to overcome this issue."
0,The author proposed quite genuine changes. They even compared it with the last failed same project.
1,No explanations for the reason for the change. It would be really helpful if you could explain why or what changes you are going to make.
1,"The proposed changes only mention files that are being changed. A much better approach would be to add some textual context to the changes for each file and how they possibly could lead to a solution as well as how they affect the performance of the application as a whole. Moreover, the doc lacks visual aids. Visual aids provide a nice touch and intuitive explanation to the proposed changes."
1,"Please do not mix your proposed changes (current work) and previously proposed changes (previous work) into single section you named ""Changes Proposed"". Right now it has both changes that were proposed previously and your currently proposed changes.
Overall quality of the explanations is OK, but can be improved a lot. The only explanation is provided, ""we are focusing only on the student views and propose changes in the following files..."" and there is a list of files.Please elaborate a little more what do you mean by ""focusing only on the student views"". Also, it would be good idea to add explanation to each listed file as follows: What this file is responsible for? Why and how this file is going to be modified? What goal would be achieved by proposed change to this fild? Try to give as many details as you can."
0,"The team seems to have identified all the issues of the previous team and have stated them clearly. 
They also have mentioned where they plan to make the changes and how they need to overcome them.
I feel if they are able to find more information on bugs it would be great for the second submission."
0,They have mentioned all the files that need to be changed for project to complete.
0,The design includes most functionalities required and they also proposed all files that need modifications.
0,"Yes, the design does include all the functionality required to implement the task i.e. Internationalization of Expertiza. The design document is good."
0,"Yes, the design completely incorporates the functionality."
0,The team has successfully incorporated all the functionalities required for this particular project in their submitted Doc.
0,The design covers every functionality that needs to be changed
1,"The design doc lacks any visual aids, moreover the test plan does not incorporate any form of automated testing. The team should add rspec testing as one of the automated tests. In terms of visual aids there are many visual aids that can be used such as Activity diagram, ER diagram, Use Case Diagram, Data Flow Diagram, etc."
1,"The team has several sections in the design document which include an introduction of the topic, the problem statement, changes proposed and a section of a test plan. Although an implementation section is present, no information is provided. The team is yet to mention how they are going to carry out their task. The team has also not mentioned anything about the ""designs"" that will be followed.
The team has done a good job by providing several scenarios for testing which will make the reviewer's job very easy.  I suggest the team to mention how and why are they implementing the functionality in the design document."
1,"Does not discuss how the instructor will choose which language they want to use in certain course.
Does not discuss how the student will select the display language (except indirectly in the test plan).
Does not discuss how ""Write some feature tests"" will be accomplished."
1,"The design document seems to have all the sections needed. 
I was able to find an introduction, problem statement, their proposed changes from previous work and the test plan.
I was not able to find how they plan to achieve the flaws of the previous team but yes they are able to locate the flaws.
They have given a scenario, which is a good idea."
0,They have clearly mentioned the functionalities required to be implemented as well as the files need to be changed or the files which caused the previous implementation of this project to fail.
1,The design is generally complete. The provide 4 scenairos which are clearly describing functionalities and steps. The project purpose is clear. But seems not clear on testing.
1,"The design document is simple and easy to understand. The only missing part is visual aids. The team can incorporate some diagrams to help the readers understand the problem and the solution in a better way. On the whole, it is good."
1,Design document is pretty much complete with the exception of UML diagrams.
1,"I feel the design is not complete enough as there is no information regarding what are they planning to do in order to overcome the issue.
A rough Idea about their plan of action should have been proposed."
1,"As mentioned above, the doc lacks visual aids and textual context for each proposed change. Moreover, an explanation for each change in the file and how it affects the performance of the application would be a plus. Also, consider adding automated tests to the test plan as UI testing is insufficient."
1,"The document includes very detailed information about testing in the ""Test Plan"" section. Great work by team on writing up four different test scenarios on how internationalization should be tested. I would suggest to improve these scenarios and convert them actually into valid User Stories. For example,""As a student, I want to change default English language to Hindi so that I can understand my Assignments.""Also I believe that Test Plan is still incomplete. Is your team going to develop any Rspec test cases to test the feature? If not, explain why. What about feature tests per project requirements?
I also like how your team described the purpose of the project in the ""Problem Statement"" section and ""Internationalization"" section. It is clear what is the feature that the team is working on and what are the goals. Very good introduction! Also try to DRY in the ""Introduction"" and ""Problem Statement"" sections. You define and discuss Expertiza in both sections (""Expertiza is ...""). Including brief introduction into Expertiza software at the very beginning of the """"Introduction"" section is enough. Do not repeat the same statements in different sections.
Unfortunately, all the rest important information, such as project design with diagrams and screenshots is missing and needs to be created."
1,"Considering the given metrics for a complete document the project purpose and testing plan is added to the document but no project design has been added by the team. According to me, a design is the most important part which shows how implementation will take place.
I suggest the team to add some techniques used to carry out the implementation along with a design pattern which will be used."
1,"""What files have been/are to be changed will be updated in this section once we fix the issues mentioned above.""  The design doc says what views need to be internationalized, but does not actually discuss any design details - that is, how will these views be internationalized?
The test plan consists only of manual tests, perhaps it should include some automated tests as well."
1,"overall documentation looks good. Some details about proposed implementation, DML diagrams or screenshots of where the changes needed to be made could be added to make the Wiki more informative as for how the files that are being changed will affect the overall application or the project."
1,"The design document is good enough. Maybe when the team starts to implement the functionality they might make update the page with relevant information. On the whole, it is good."
1,I could not see test cases.
0,Wr
0,UI works as intended.
0,"YEs, the build passed."
0,"Yes, there were good number of commits."
0,The code is well writtten and follows good practices.
1,"The code is more concise and substantial redundancy is removed making it more readable and DRY. From the wiki, the documentation is also very good. I think that it is ready to be merged. One concern I have is that some methods in the controller are still very long! I'd suggest shortening those as well."
1,The code was not deployed so unable to test the UI.
0,There was one new test case added so the coverage increased by a small amount.
0,The Travis CI is currently pending. However the branch does not have any conflicts.
0,"Yes, there were some new changes during second round."
1,The code written is decent. I would advise using the facade pattern more and not expose the complex code ..try to encapsulate it. The methods can be more DRY as well.
0,"Yes, the code can be deployed onto the production server since all the functionalities are developed, refactoring is done. The team has completed all the responsibilities assigned."
1,The write-up could be better by including code snippets which would help the readers to relate with what the project is all about and what changes have been made.
0,"I have tested from the front end using expertiza, the project seems to work fine. All the functionalities have been developed in a perfect manner. This is not a testing project."
0,"Yes, build is passed in Travis CI and checked the pull request."
0,"After looking at the code on git, I felt the code was well written, it was readable, elegant and follows the DRY principle. I would be easy for any developer to understand and work on it."
0,"Yes, team has been pushing commits after 2nd round."
1,"I felt the write up was good but it could be improved by adding code to the page and explaining the changes which would enable the layman to understand it in a better way. Overall, good work team."
0,"I have tested from the front end using expertiza, the project seems to work fine and it does the intended work. The features that were supposed to work do work as they need to do. This is not a testing project."
0,"The team project did not include them to add test cases. but they managed to change one of the test case that was testing one controller  spec/controllers/questionnaires_controller_spec.rb and added a test case in one model  spec/models/questionnaire_spec.rb. The test case which was previously used to test the controller is now moved to model as the code that was supposed to be in the model was there in controller previously,now code is moved to appropriate model. The team accomplished the task."
0,I have checked the pull request and build is passed in Travis CI.
0,"Yes, commits are made during the second round."
0,I appreciate the team for their work. The code did follow the dry principle. the write-up document is updated from the last review.
1,"I believe the project to a good starting place for future team to be picked up. The code overall looks cleaner, has smaller chunks of code in the functions. However, the code could be improved with better commenting and still some long functions such as create exist."
0,The build passed in Travis CI with no conflicts with the base branch
0,There was new code committed during the 2nd round. Most commits were either aesthetic changes or to tackle code climate issues.
1,"The authors have done a good job in implementing the suggestions stated in the previous round. However, i believe the code could still be improved with even more comments and improving of functions such as create. The method is still over 40 lines long with scope for regex to replace the switch case statements"
1,"The write up discusses the description of the project, the files that were modified, the steps that were taken to solve the identified problems, and discusses the test plan.  The description of the problem statement and the individual tasks were well written.  However, it would be great to see the code that was modified from which files.  The document also begins with a table that makes no sense and does not seem to be referenced in the document.  Why is it there?  The Test Plan section provides excellent details on how to perform the test for the team's code.  While the document mentions some changes were made to the test code, the changes are not present in the document.  It would be nice to see a Reference section at the end of the document with links to the GitHub page and a list of the team members who participated with the project."
0,There appear to be no issues with the code and all of the problems appear to have been addressed.
0,The last pull request shows no issues with their code from the Travis CI bot.
0,"The team made many additional changes and commits to their code.  Moreover, it seems that all of the teammates participated with the commits in a balanced fashion."
1,"Overall, the code looks good and there does not appear to be any major issues.  It is difficult to tell if the code is DRYer, but it appears the team has removed a great deal of redundant or unneeded code.  However, the code could use a few more comments."
1,"I think that the code is very well written and ready to be deployed. Apart from the documentation changes that I mentioned above, I would feel more confident in the project if I could test the project myself. It would be great if the team could provide a VCL instance of the working project and a bit about how to test it."
1,"The write up has improved since the last review. They have added a test plan. I had commented that one section of the review mentioned that ""

Nothing special was happening in the copy_questionnaire_details method. Also, it needed to be placed into the model because of the nature of things happening inside it.

""
felt a little vague and needed some more explanation. That has not been improved. 
Also, there is an unrelated image in the beginning of the documentation. I am sure the authors must have been experimenting with how the wiki pages can be formatted to include images and that this was a test image but it needs to be deleted."
1,"The system implementation link was not provided in the submission. Hence this cannot be tested. The documentation also does not mention any way in which it could be tested if it were submitted, or how the team verified the working of their code."
0,"The team did not add any test cases. They ran the existing tests to ensure that they did not break any functionality. They also tested the newly added methods by calling tests on other methods that called these methods. All those tests passed,"
0,This was an Expertiza project. The Travis CI checks were pending at the time of this review. But the code branch can be merged into the base branch without any conflicts.
1,There was no new code committed in the next round.
1,"There were no changes made from the last review. The code quality looks good. There were only 22 commits in the pull request and some of those were test commits. I feel that for the considerable amount of work that the team did, they should have committed more often."
1,"Yes, it is reasonable as I dont see any obvious issues with it. But the testing could be done better rather than checking the previoustest cases that was already present."
0,The write up is good. It covered basically most of the things that was expected of them.
1,The tests could cover more but these refactors seem good to me.
0,"Yes, Travis CI commented with ""Your changes look good to me!"""
0,"Yes, new code was commited 2 days before the deadline."
0,The namings were reasonable according to protocols and best practices.
1,This project has good refactoring but I think more test cases can be added by future teams
1,The write up is well written overall and there has been improvement. One suggestion is to include what exactly the questionnaires_controller does.
0,"Travis-CI build did pass. ( that change is not yet seen on the pull request page , you have to click the details)"
0,There were ample additional commits in the second round as well
0,The code is well written and there have been changes made
0,"Since this is a controller refactoring, the rspec tests seem to pass and overall, the change made to the test does not hinder the functionality of the project. The features work correctly as evident in the video."
1,"The authors did a good job at documenting the tests passing in a video. The authors have made changes to the spec however, the change is very minor and more tests could be added for the newly refactored functions."
1,copy_questionaire_details can have more method calls to simplify the code and make it shorter. The method is commented in the header but I would advise more comments. The new names conform to ruby standards and I do not see any issues.
1,"THe names are reasonable however some names such as find_or_create_by could be replaced with something that doesn't include or in the name. An advice I have is to document what copy questionnaire details returns (the old one or the copy). Also, the create_quiz_question_choice has a lot of calls with different parameters. That could be condensed more."
1,"The writeup explains the problem and the solution in sequence. I would elaborate on the logic more because it is not very clear  what the solution was. For example for problem 1, the name was misleading. However, why not use a more meaningful name rather than replace the use with an array indexing. Also, what was the reason for removing the other logic in the assign_instructor_id method? For testing, there can be more information on the wiki."
1,"The writeup seems very clean and well documented. The issues are mentioned in the beginning clearly. Great job! I can understand what the project does in general however it is missing some context needed to understand the rational of the project. I would advise more context on what the functionality is, as well as including the test in the wiki."
0,Works fine and passes all the tests.
1,No TestPlan is written
0,Solutions were written in the writeup.
0,"Yes, the functionality is clearly written in the writeup"
0,"I physically executed the creator's work and I felt every one of the highlights fill in as planned. As referenced before the teammates have considered all the edge cases and different potential outcomes and have executed them legitimately. Likewise, I didn't discover any cases the code doesn't fill in as all the imperative experiments have been secured by the team."
0,"Yes, functions were large but they are transparent enough for a user to read and comprehend. The author has very well divided the code into several short methods where ever needed and I don't think more methods are required. Enough explanations are provided for each statement and the comments help a lot to understand the code. The code follows the ruby style and there are no code snippets that are replicated illogically."
0,"I looked at the code and checked all the variables, methods, and class names and they were very relevantly named with respect to their functionalities. The team has done a great job and have worked on all the functionalities assigned to them reasonably."
0,"Yes, the write up does have a test plan section but is names as issues and implementation section which provides exactly what the team worked on. The team has also considered most of the pre-conditions, edge cases, invalid input values, and all the other possibilities. I didn't find any scenarios that were missed by the team."
1,"Yes, the write up is crisp and to the point and it does explain how and why the authors did the work the way they did. They have considered all the design patterns that have to be and used them effectively in all the modules possible.  All the patterns followed were clear and were well defined and did not create any confusion.
But the team should have included more code snippets and explained hat changes they have made."
0,"After reading the write up I got a decent understanding of the problem statement, which directs the team to follow the MVC pattern while editing the code. The write up is divided into several sections which help a user to map throughout the wiki page. Implementation has also been explained properly by including bits of code in the wiki page."
0,"the code that is written in the controller is moved to model i.e. the code that deals with processing. There were few changes made in other files (views, database) to suit the need of processing."
1,I haven't seen any test plan section in the writeup. Probably they will update it by next review. The screen recording is posted which shows it passes all test are passed.
0,"The writeup was pretty much self-explanatory. The flow used in the writeup was clear to understand what the problem is, what approach did they follow, and what is the suggested solution. They did follow DRY principle once they have sorted out the issue."
0,the wiki page gave a good explanation about the project. The problem addressed in the wiki page was a redirection of the code to follow MVC architecture. The questions were clearly stated and the solution was presented properly.
1,The video does not show the deployment of the code. Not sure how to test the author's work
1,There are no cases discusses in Test Plan
1,"The authors have done a good jib in identifying the problems in the code and attempted to remove non-used legacy methods and statements. The authors have even pulled-up the code to make it DRY. However, some functions are still a bit long such as create questionnaire. The switch case statements could be reduced used regex in places."
1,There is no Test Plan section in the writeup
1,"The authors do a good job on identifying the problem and then mentioning the work done to address the problem. This makes the writeup easy to follow.
I would have liked to see some more writing on the changes done in the rpec files after the refactoring."
0,"The writeup is is very clear in explaining what the project goals are, and what specific work is done towards it."
0,Their design is very thorough and I do not anticipate them encountering any issues with it. It looks like they spent a great deal of effort considering their design choices and implementation.
0,"Yes, the design incorporates all of the required functionality."
0,"Everything looks good, makes sense and easy to read."
0,The code appears to be in good order and should perform the desired tasks.
1,"The code appears to be well organized and seems DRY.  However, it could use a few additional comments."
0,The code looks very good and appears to follow good coding conventions.  The variable names and method names that were used in the code were intuitive.
1,No test plan was mentioned in the documentation.
1,"While no design patterns were mentioned, the team did explain their reasoning behind their changes.  It would be nice to see snippets of the old code and the new code."
0,The documentation for the project was excellent.  It provided many details about the questionnaire files and the logic they contained.
1,The authors have not mentioned any way in which the functionality they implemented can be tested. They have not given a link to their expertiza instance either.
0,"2 out of 4 parts of the project were about deleting inaccessible parts of code than adding any code. The team did a good job on extracting some functionality in separate methods.
Each method was also documented using comments so that the reader knows what it does quickly."
0,"The test coverage is down to 7%. I asked my mentor about this and he says that the automatic processes that are set up to measure that are not working correctly right now. And that we should not be terribly worried just in case the coverage is not upto he mark.
 
All method names that were newly added make sense to me."
1,"The write-up does not include a test plan section.
In the video of the tests, you only included tests running for the controller. Since you made changes to the model as well, I think you should have run those tests too."
1,"""Also, some parts of what was happening needed to be in the model."" I would have liked some explanation on what exactly motivated you to move the functionality to the model.
 
I liked how you made the code DRY er. Really shows that you read the entire controller."
0,I clearly understood the problem and the solutions implemented for each problem.
1,Couldnt find anything
0,The namings are okay and DRY
0,Nothing unreasonable found.
0,"Yes, their work was on refactoring the module. They made essential changes. The modifications didnt seem excessive. Being refactoring project they didnt require any design patterns."
0,"Yes, I can understand what they did, outside some small details I got the general Idea. Their writeup was concise and to the point."
0,The build passes but there are no newly added test cases
1,I could not rate this because I cannot find any test plan in the wiki documentation
1,The def copy_questionnaire function seems too long and i feel that more comments are needed otherwise it follows the ruby style guide
1,"The code cannot be readily deployed onto the production server because the Travis CI did not pass and there are some errors to be fixed yet. Since there are not many errors to be fixed, this project can be taken up by some other team in future and there is no need to do it from scratch."
0,"The variables, methods and names are intuitive"
1,I could not find a Test Plan section.
1,The Write-up is easy to read.The problems and solutions were adequately explained but I did not get a big picture of what the controller is doing.
1,"The problems and solutions were well explained but if you listed the main objective of what the controller is actually doing, it would have given the reader a better idea of the context."
1,"I don't think so. There are some build failures that needs to be looked at.
But it definately doesnt need to be redone from the sratch. The team has put good amount of effort in the working of said features. A good starting point would be to see why the build is failing, revert back changes on the db files if they are not reqiured and see if the existing test cases work well."
0,The test plan sufficiently describes the kind of tests that need to be performed with detailed and categorical description of each types of test cases.
1,The visual aids provided in the system are more than adequate in describing the changes to be performed in the system. The team could have added some textual explanation of the use case diagram but the other diagrams more than compensate for this small shortcoming. Great work :)
1,Based only on the visual aids provided the design looks extremely simple although a further explanation on the activity diagram would be more helpful.
0,"Yes, the test plan seems to test all aspects of the search functionality they are required to implement."
0,"Yes, the Use Case diagram is very simple to understand.  The E/R diagram is understandable.  They have also included a UML diagram, which is helpful."
0,"Yes.  The project seems a bit more complex than other projects since it involves adding search functionality throughout the system.  However, adding the capability to the models will simplify the design.  The authors have outlined their approach in a way that makes the design seem fairly simple, given the requirements."
0,"Yes, the authors discuss deciding between adding search functionality to controllers vs. to models.  They chose to add the functionality to models which follows a more O-O design."
0,the diagrams helps me to understand the mechanism and workflow very well. they have also using the screenshots to show the desired output.
0,the design proposed contains the previous implementation and has improved from it.
0,"The test plan includes the details and each use case of their design. since they are only changing the models, their test will only cover this part."
0,they have used the graph to show the use case of their design and progress. They have also use the table to show their database design.
0,the design is easy to understand to simple enough to achieve.
0,"yes, the design follows the appropriate principles and well written."
0,"Yes, they have explained their design very well using all the graphs and the tables. By introducing the use cases, readers could have a better understanding of their work and where it will be used."
1,The write up was very clear and well written. Some of the explanation sounded repetitive.  But I would much rather have a verbose documentation than a vague and short one. My one problem is that is lacks the screenshots of test cases passing.
0,Write-Up is pretty good.
0,Tests appear to thoroughly test new searching functions.
1,"UC diagram clearly describes new functionality. Why did you reproduce the ER diagram or the relevant tables? Unless you are making database changes, it is not really necessary to show these. Perhaps include a write up for these images if they are relevant."
0,"yes, all the functionality required is discussed here."
1,"See above. Might also be simpler to make a search controller, as making very similar search methods on each model is not very DRY."
1,The writeup was thorough but there were some formatting/grammatical errors.
1,Will you need to add search methods to each model if all you need to do is call find with different criteria? ActiveRecord should already do most of that.
1,No video or deployed app found.
1,The system operation cannot be confirmed since the VCL instance link has not been submitted.
0,"For this stage, the test plan is very well written. The UI testing is divided into cases for searching and the setup is described for each search case. Then the action and result is written for each scenario. Great job on the test plan. 
The author also has included how they plan on doing automated tests using RSpec testing. A clear list of all the search functionalities is written for which the tests have to be written."
0,"Very good visuals have been put up. The use case diagram depicts clearly how the filter functionality works. The ER diagram although a little confusing gives a good understanding.
I appreciate how the author enlists all the relevant tables."
0,Works fine.
0,The design is not complex and is simple. Very well written with the proposed changes have been described neatly. The proposed code changes also makes a list of all the attributes used and I think the design is the best they could have come up with. Great work!
0,The design does appear to be sound and follows all the appropriate design principles. There is not degin pattern directly correlated to the implementation of the solution but the proposed solution seems to be appropriate
0,There seems to be no problem with the working of the system and all the features are working properly.
0,The author explains the changes to be made to the system in an elaborate manner. The proposed changes for the problem statement has been discussed and the workflow is very well written.
0,"YEs, detailed test plan has been included."
0,"Good visualizations with the help of use case diagram has been provided.
ER diagram is good too."
1,"The code looks fine. The tests have not been created yet, which is fine. They seem to have manually tested the code for now. The build is failing mostly due to changes in db migration which made changes to schema.rb. Rather than using `git add *`, look at each changes individually and then commit, that way you can avaoid unnecessary changes in the remote."
0,Solution designed is pretty simple and easy to understand. Good job team.
0,"Yes, the design appears to be sound and has followed the priciples and patterns."
0,"YEs, the changes have been explained very well in the document."
1,"The team has provided a pretty good test plan.
Every model that is been changed is tested.
Test cases seems to be relevant and meaningful.
 Also, Automated tests are provided by the team."
1,"Yes, the design seems to be simple and easy to understand.
The team has done a good job in clearly specifying ""what"" methods would be changed in ""which"" model.
I liked the way the team separated and explained design changes for each model."
1,"The design seems to be clear as the team has done a good job in specifying the controllers and models that would be changed for this particular feature to work.
The team is modifying existing methods instead of creating new methods.
The design would have been complete if the team would had specified the design principle/pattern used by the team."
0,"Yes, the authors have adequately and clearly explained the changes that the team would be implementing.
The design is separated and explained individually according to each model.
Since the functionality is related to ""search"" (i.e. extracting data from db)the team has done a good job in adding Er diagram and database schema as it helps the reviewer to understand how data would be extracted."
1,"The team does include a test plan does include information on the elements they plan to test.  It appears the team will be creating new test files using RSpec, but this is not completely clear.  For each test plan, the team has proposed their environment (setup) with the actions to be taken and the expected results.  In some of the test cases, the expected results are not clearly explained.  The test plan section has no code examples that they expect to use for their tests."
1,"The team made good use of visuals by providing well-designed images of the use cases, an ERD (Entity Relationship Diagram), and a database relevancy table.  Each image is very well organized and they are easy to read.
One suggestion for improvement would be to include images of the proposed final product that shows how the user will input the data."
0,The team appears to have a very effective and well-explained design.  This team will be addressing some very challenging tasks that will involve many changes to different parts of Expertiza.  It is difficult to tell if the solution proposed by the team is as simple as possible since their problem is very complex.
0,Very impressive!  The team has well documented their planned approach with detailed explanations and graphics. Each section of the problem contains the projected variable names that will be used and how those variables are related to the database structure that is included in their document.
1,"While the team included several good images of they expect their changes to be implemented, they did not provide in-depth details on exactly how they expect to implement their changes.  It is also uncertain which part of their proposed solution relates to a particular task in their problem definitions.  It is also not possible to determine if all of the tasks associated with their problem have been fully addressed."
1,The test plan is comprehensive and covers all scenarios.
1,"I identified a couple of minor issues in round 1 in the use case diagram about a typo and a missing ""search for reviews"" bubble."
0,The design is pretty straightforward and easy to understand.
0,This is a very well designed proposal and the team has done a good job of explaining everything in detail.
0,"Yes, the authors have been very clear about the proposed changes."
1,I think that the test plan is sound but not detailed enough in some cases as to what is the difference that the team is performing in the new implementation.
0,"As with the second round review, I found that the team has included two kinds to visualizations in their document: 

Use case diagram: The use case diagram is unchanged from the previous implementation and clearly explains what the actions of an instructor for their scenario and covers all possible cases.
E/R diagram: This diagram also remains unchanged but manages to explain the relationships between various entities in the system."
0,The team has tried to modify the least possible code in their design and have decided to use models instead of controllers for adding the search functionality. This means that the search logic would be implemented where they write the database queries and hence avoids complicated design. Overall simple design and to the point.
0,Yes I think that the explanations are decent and adequately explain their design choices and all the decisions.
1,"I believe that the design is sound and includes everything from relevant code changes to a decent testing plan. As pointed out in the previous review, they have not provided the solutions to errors in the previous implementation."
0,"There are ample, well explained visual aids, although there could be some more context in the ER diagram. Also, another possible visual aid could be an activity diagram."
0,The proposed changes are very well explained with ample visual aids.
0,The design document is more than sufficient in its description of the proposed changes
0,No part is missing.
0,All 3 diagrams are very helpful and very easy to understand.
0,"The authors were faced with a decision between 2 different designs. They outlined both, and discussed the pros and cons of each. They also discuss the design that they eventually chose and I agree with their decision.  The proposed modified files/functions seem appropriate. The only improvement I could suggest is incorporating a helper class for handling some of the internals of the search functionality."
1,"The design seems to include most of the required functionality.  However, it seems like a couple of items might be missing from the proposed search fields (in the Proposed Code Changes section): (1) Allowing an instructor to filter assignments by course. (2) Allowing instructor to filter questionnaires by words. (3) Allowing instructor to filter assignments by participant."
1,"The design doc is complete and very thorough.  The only thing that might add some value (but isn't required) might be links to the previous team's work (design doc, existing videos, etc.)."
1,"Diagrams are used to here, but the pictures may need to be resized in order to view clearly. it's better to organize them and add some explanations"
0,"The designs proposed are nice, they plan to change the database structure to achieve the goal."
0,The changes are very self-explaining and include the details. all the files covered are listed to.
0,they have a good job dong this doc. I feel all the things are included here.
1,You may not need to include the database diagrams if you aren't changing the database. UC diagram is nice.
1,"Adding searching to the models is a logical choice. However, I wonder if having a search controller would allow you to reuse more code, even though you think it does not seem RESTful. A potential advantage to a search controller is that you could have the desired model as a parameter. This would make it much easier to add searching for other models."
0,Explanations very thorough. You might not need the database design information.
0,The author listed all the files that are to be changed and the functions that will need modification. Also the author keeps in mind that the approach is RESTful. I dont see any major blunders that could happen with the proposed code changes such as adding a ethod to a wrong class or make the code smelly. The new design also is the best approach and not very complicated.
0,The author comes up with two approaches and negates one of the approach with reasons to back his hypothesis in the proposed code changes. I really appreciate the way both the solutions were explained and how the author shows which idea is better and why. The explanation is clear and eaasy to understand and did not take me much time to get the whole promlem solution.
0,The design incorporates all the functionality that is required in the problem statement. The proposed solution keeps in mind all the changes required. The design is drafted in a very elaborate manner where the proposed solution idea is explained extremely well. Great work!
1,"The design document seems to have all of the sections mentioned for this submission. Great job on the test plan as well were the author mentions how they plan on going about UI testing and RSpec. The problem statement, proposed solution, diagrams and test plan all seem to be very well written. Probably could include a design pattern strategy int"
0,Visual aids provided are very clear and intuitive. Good job. I  could clearly understand the requirement and solution to it with the help of ER diagram.
0,"The design sounds good to me. From the document I could understand that there would be lot of changes in the ""model"", ""view"" and ""controller"" files. I shall be looking forward to see the implementation."
0,"The proposed changes have been explained well. 
Good job explaining problem and solution both in ""plain language"" and ""technical perspective""."
0,"Design document is complete. It covers all the aspects from ""Problem statement"" to "" test cases"". The diagrams and explanation make it even better to understand."
1,"The team has included a Use Case diagram which helps the user to understand the project.
I would suggest the team to add a data flow diagram and mockups of the screens as it makes it easy for the reviewer to understand the flow of the data in the code."
1,"The design proposed by the team is the same as that of the work done by the previous team.
I could not find any section in the design doc focusing on the following issues:
 


Needs refactoring


UI needs to be improved (add labels to textboxes, not just hints)


Code is really hard to follow (add comments and modularize code).


I would suggest team to include design details for the code which would resolve the above mentioned issues."
0,"Yes the design does incorporate all the functionality required.
The ""problem definition"" and ""proposed solution"" section clearly explains the feature the team would be working on."
1,"Most of the content in the design doc is copied from the work done by the previous team.
Since the previous team had worked on it, the project purpose should explain why there is a need to refactor the existing code or why the UI needs to be improved.
The project design should explain changes that would be done to make the code easy to understand.
The testing plan is the same as that of the previous team."
1,"What is the purpose of the ERD?
What do the new views look like?"
1,Without mock-ups it's impossible to evaluate the view part of the design.
0,They did include a test plan for all the features that they are going to implement. They have briefly defined both manual and automated tests.
0,"Yes, the team did insert figures into the document such as use case and ER diagram which gives the big picture of the project and the table that is related to the project."
0,"Yes, the problem statement is made clear and the way they are going to accomplish the task is also defined properly."
0,"Yes, the design appears to be sound, following principles and appropriate patters. They have structured the document properly with precise and clear information."
0,"Yes, the design is simple and to the point. The structure of the document and each section of it is well defined."
1,The solution was not that detailed.They described their design mainly through diagrams.  Explanations doesnt go to the function implementation level. Nothing regarding the methods to be implemented or the modified files was mentioned. They should expand more on what they intend to do.
0,The changes proposed by the author was good from my point of view and it encompassed all the requirements made by the problem statement. The diagrams and screenshots helped a lot.
1,The project was explained the briefly and their solution was too brief and relied heavily on diagrams and could be explained more with regards to design and the intended implementation.
1,"The authors seem to have a good grip on the methods to be edited/added. The design seems to the right one intuitively without being overtly complex. However, its too early to state if the design would not make the code smelly. It would depend on how similar/different the case with scenario with reviewers is."
1,"The changes proposed in theory seem to be the right direction. The quality of explaination is brilliant making the document easy to follow. The team has shown good though process in understanding the complexity of the issue what stating where they would have to put their efforts.
However, i believe there is another complexity the team may have overlooked. I suggest including this in the design for the future. Each reviewer would want to review multiple assignments. So, is the algorithm run multiple times for each time the student wants a new assignment? This would imply that every other student would also have to bid and it becomes a batch based system.
Or if the single instance of the algorithm would pick multiple assignments for the reviewer, then the algorithm, view and design would have to incorporate the number of assignments the reviewer wants to review. Some reviewers might want to review 2 or 3 or even 4 assignments."
1,"The team has done an excellent job in identifying the problem and the solution. I like the insight of the team in triangulating on the issues they may face when they extend the exact same implementation from bidding projects to reviews, such as the scale and being assigned what you worked on. The team also goes on to explain how they plan on using delegation to keep the codebase dry. However, the design seems to be missing out on how the delegation would overcome the shortcomings identified by the team."
1,"The document has a good flow to it. The document explains the project purpose, work flow, current scenario, required implementation and design very well. That being said, the document is missing the test plan. I suggest the team add the test plan section with references to the rspec files from the assignment allotment rspec files. This would help understand the complexities better."
1,"They have done a good job in providing visual aids like diagrams, flowcharts and some screenshots to explain things in detail. However, at some places they seem to be unnecessary and can be removed."
1,"They seem to have not completely incorporated all the required functionalities. However, they have done a good job in explaining what they have and are going to do to achieve their objectives."
1,Their design doc too descriptive and i was able to understand what their problem statement is but i was not able to follow what are they trying to do to get their tasks done.
1,"The design and implementation are explained.
Testing plan has not been mentioned at all yet. Maybe the author plans on its implementation in the next phase. But it would help if the author mentions how the plan on testing the changes for example using Rspec and UI testing by uploading screenshot"
0,The team had great visual aids for illustrating the existing feature implementation as well as the process they will using going forward.
0,"I believe the team did a great job out laying out the process they are going to use to achieve their goal. There were illustrations, UML, that clearly laid out what it is they are going to change/update as well a technique for doing so."
0,"I think the team has all of the functionality that is needed, covered."
1,"1. The model diagram didn't seem to provide any useful information in relation to this feature.  It would have been sufficient to state that teams bid on topics without getting into all of the relationships between participants, teams, assignments, etc.
2. The one UML class diagram seems to follow conventions in terms of showing the aggregation relationships.
3. The bidding diagrams don't provide a lot of insight into how the two bidding models differ aside from the actors and what is being bid on.  What's missing is the concept that the topics bidding will result in only one unique topic will be assigned to each team whereas in the topic bidding there is a many-to-many relationship between assigned topics and participants."
1,"1. I'm thinking a new route should be created for the bidding instead of trying to add more functionality to the review mapping controller and views.  Any logic shared between them could be refactored and put into a helper class.
2. Adding more functionality to the review mapping controller would make the class unnecessarily large.  As much of the business logic as possible should be put into the model.
3. The complicated parts of the feature seem to have already been implemented.
4. When bidding is enabled, the response time will actually be decreased in the sense that a student will no longer need to wait for being assigned a submission.  However, the issue of how to deal with minimum required vs. maximum possible reviews may require some type of prompt for getting a new review item to ensure that a given student gets the review items they have been assigned in the correct order to ensure that each submission gets at least one review."
1,"The explanations of the design elements that are present are good and the screen-shot mock-ups provide useful information, although they are a bit too large.  The design is missing minor details, like the specific views that will be modified to include the new widgets and how the fact that review bidding is enabled for an assignment will be stored in the database.  The design should also include the navigation to the bidding interface, as mentioned above."
1,"The black box behavior is described well, except the detail of how students will navigate to the new bidding view, which is a critical part of the design, since it impacts the students' assignment workflow.  Another critical piece that is missing is how to deal with a student's ability to review more than the required number of assignments.  If 2 reviews are required and a student can perform up to 4, how would the system enforce that each submission gets a minimum number of reviews?  If a student is assigned all 4 submissions in one shot, it's possible that a given submission is not reviewed by any students if no student chooses to do all 4 reviews.  A lot of the technical details about the existing functionality the feature will use could have been referenced by links rather than putting exhaustive information into the design document."
1,They have used two diagrams i.e. UML and dataflow diagram to show which features are responsible for performing the task given. I suggest the team to add few more visualization pictures as it aids the user in better understanding of the project.
0,The design is simple and easily understandable. The flow of the design document is clear.
0,"The design document appears to be crisp and clear, with appropriate principles."
0,"Yes, the Data Flow diagram is very helpful."
1,"The document should at lease include their plans of what they are going to make changes. Although it is a work based on previous semester, they should point out the weakness of last year's work and provide their proposal for changes."
0,"Yes, the proposed solution doesn't seem too complex."
0,"Yes, the Proposed Changes section explains exactly how they plan to implement their changes."
1,The design looks complete and proper but the team could have improved upon the explanation part in the design document as there are some parts where the document wasn't clear.
1,"Yes, this project includes test plans and the team has also mentioned about the new test cases that they are thinking of added to test specs. But as how they would test that or the file which will be tested and the spec files to which the new test cases will be added are not mentioned. It is good to mention a little about as how testing will be done and the spec files which will be used for testing."
1,"Yes, they have used diagrams to show data flow and UML class diagram about the functionalities used by instructor and student. They have mentioned the changes proposed in the data flow diagram. As mentioned above the given data flow diagram is a little complex and more information could have been added to make it more clear."
1,"The data flow diagram is a little complex and requires some time to go through it to understand, all other parts of the design is good."
0,The provided design is neat and easy to understand.
0,"Yes, the team has mentioned the scenarios that need to be changed clearly."
1,"There are not much details shown about the test, just a line o what the tests will look like. As for the description, it looks like it will work."
0,Yes! The visualization helps.
0,Yes. It seems they have put in a lot of thought into it!
0,"Yes, the design seems to handle all the cases."
0,Their test plan looks very sound.
0,They have used the earlier diagram and added to it as well!
0,The design is indeed very simple. The project itself is complicated but the teams seems to have understood it very well!
1,"Did not explicitly address how these improvements over the previous work will be accomplished:
- Color-coding feature was not implemented
- Ordered by IDs of teams who did the topics (not a reasonable ordering)
- The content of some newly-added file are very similar with existing ones
- There is only one list while topic bidding interface has two lists
- Need to add link to submission in bidding list
 
Testing plan is not explained."
0,"Yes, the team have included a testing plan in their writeup.
Also, they have mentioned the spec file that would be used to add 2 new test cases and ""why"" and ""what"" test cases would be added.
The test cases look meaningful to me."
1,"Dataflow diagram clearly explains the flow of data and the team has done a good job in explaining the components that would be changed for the feature to work.
Screen mockups could have been utilized as it makes it easy for the reviewer to understand the changes in the views once implementation is completed."
1,"The proposed design section is simple but looks confusing to me.
One of the confusion I had in round 1 was the need to handle 2 separate scenarios which is still unclear as the team did not make any changes in this particular section after round 1."
1,"Although the team has done a good job in explaining the feature but a more detailed explanation was required as I did not understand a few things(i might be missing something).
The need to handle 2 separate cases remains unclear to me."
1,"Suggestion:
Team could have mentioned the exact test cases which need to be modified. It's good to see that team has figured out some of the good edges cases and have correctly mentioned in the document. My suggestion will be to add a test case to ""check between minor edit and major edit correctly"" as this functionality will decide the correctness of the implementation."
0,"Good Work:
The diagrams and flows provided by the team help the reader to understand the functionality of the system and also helps to get some understanding of to be implemented the functionality."
1,"Scope of Improvement:
I have some doubts regarding the implementation of ""Identification"" method. Though it seems like a boon to solve the existing problem, I feel that it will be hard to implement. As the team's approach is to sent notification for major edits only, it will be very crucial to correctly distinguish between ""minor"" and ""major"" edit. Incorrect implementation of this method will leave a major flaw within the project implementation. This is the thing I believe the team should focus on during the implementation."
1,Authors plan to add a lot functionalities similar to the project bidding algorithm. The explanation doesn't talk about whether the team wants to use the same code base for algorithm or are they making more changes that they need to implement the algorithm again. This DRY functionality may be explained a bit to make things clearer
0,"Good Work:
The document structure and flow are nice. The document correctly describes the project needs, purpose and the approach decided by the team. The proposed changes are in sync with the Ruby and Rails coding guidelines."
0,"Good Work:
Team has adequately commented regarding the upcoming changes. It seems like the team has done thorough research about the feature and is confident about the new implementation. All the best...!!!"
1,The authors have tried to explain the strategy using the example of project bidding. This makes the explanation easy and understandable. The proposed changes are explained well using the design strategy and the need of new controllers.
1,"The authors have described the proposed solution in a much elaborated way. The document clearly mentions the functionalities missing from the last PR and how they are implementing this semester. The only feature i see missing from the document is the ""

There was no ""add link to submission"" in the bidding list.

"". There is no mention of it in the document, I believe that this could be shown once the team makes some code change"
1,"The document is clearly in much better state. The document clearly explains things the team wants to achieve, how is team trying to achieve among others. One suggestion would be inclusion of a section that tells us how differently the team is implementing the algorithm. The team has tried to explain some here ""Some discrepancies need additional attention."", it would be great if the team explains how exactly are they planning to implement these discrepancies.
 
Additionally, I guess that a project offered may not have any bidding and in turn no team will work on that problem statement, but in case of review, we need at least ""n"" number of reviews for each project (constructive reviews), how is this scenario being taken care of?"
1,"Yes, the design does include the test plan. However, the test plan is very vague and incomplete. It mentions only 2 new test cases related to editing a rubric and thus testing the feature. Are these enough for thorough testing of the feature? I do not think that 2 test cases can cover all possible case scenarios and test them. 
I understand that these tests would be done via Rspec testing, however, would there be any UI Testing or Manual testing done to test email notifications? There should be such tests as well.
In the Test Plan I would create two separate sections, for example, Rspec Testing and Manual (UI) Testing, where your team can elaborate on testing strategies, steps, and document the outcome on it. In Rspec testing strategy do not limit your testing to only 2 test case scenarios. Test as many as possible test case scenarios (even unexpected). Document everything so Expertiza software engineers can accept your code changes without questioning whether implemented feature works or not."
1,"There are only 2 diagrams, Use case and Data Flow diagram. As I mentioned in the first peer review, the Use case diagram is a high-level diagram that explain roles of the users, initiation of the rubric changes and corresponding regulated actions to handle such changes.
Data Flow diagram is slightly confusing and requires some word interpretation to interpret the diagram.
The diagram that clearly describes the changes to be made in the system is UML or similar type of the diagram, where names of the classes, methods and variables can be shown and documented. Also, there is a change in the DB, the team should include Entity Relationship Diagram. Unfortunately, at least 1 UML diagram is still missing (as I stated in the first peer review and it was not addressed).
Moreover, mock screenshots are also missing to illustrate under what conditions does the feature works and possible email notification content. Please include these once the project is completed."
1,"Yes, the proposed design appear to be sound and well-thought. It follows appropriate principles, but does not use any patterns due to simplicity of the implementation. Design describes the ""Major change"" and ""Minor change"" and what cases (for major changes) should be handled appropriately. Although, it is kind hard to follow the Data Flow Diagram, it clearly shows when regulation of rubrics while projects are in progress should take place.
The ""Proposed Code Changes"" sections does great job on explaining how such mechanism should work by providing code sample (or stubs). Overall, yes the design appears to sound.
I still believe 1 UML diagram is necessary along with ""Proposed Code Changes"" section that provides great low-level implementation details.
Moreover, the design is missing Workflow diagram to show high-level project overview, where it can illustrate when the feature to be implemented is utilized (provide if/else conditions that appropriately handled)."
1,"Yes, the team did really good job explaining the changes to be made in the system. The team did really good job on separation of concerns to implement the feature by proposing 2 phase design and implementation. Also the team did great job on breaking down required feature into multiple easier and more manageable implementation tasks that can be implemented in the multiple stages. For example, identifying whether a change of the rubric of a questionnaire is minor change or major change (only due to major change the feature should reset reviews and send email notifications).
Also, as I stated in the first peer review, the team did great job on providing code samples and stubs. That really showed that the team spent time thinking through the design and implementation.
Overall, I do believe all the changes are explained adequately. The document is only missing additional diagrams and well explained Test Plan. For the diagrams, please include at least 1 UML diagram with class, methods, variable names and their relationship."
0,Yes. The test plan articulates the individual implementation steps to be taken.
0,Yes. The addition of the color to the Data Flow diagram is nice.
0,Yes. The Proposed Solution section has 2 changes each of which are articulated well.
0,Yes. The review has been well formulated.
0,No issues I can see.
0,They know what will change when they update the code and they have an idea of what tests they will need to add to keep coverage.
0,They have great visualizations connecting every file along with a visualization about how the interactions happen for the instructor and students.
0,They seem to have a good idea of what they need to do and where to do it.
0,There is no specific design listed but they have an idea of how implement the changes without breaking anything else.
0,They have excellent explanations and justification for what they plan to do.
1,"Yes the test plan is included in the document. One thing I feel the test plan missed is, testing if the minor edits work as expected. In test case 1, they check if a question already exists. I think that should be extended to test minor edits to questions as well."
1,"Yes the data flow diagram describes the workflow of the proposed solution clearly. I made a comment about some unnecessary two way arrows in the data flow, like sending email to affected users. That hasn't been updated yet. Feel free to comment if you think I'm wrong."
0,The team has followed a pretty straight forward approach to the problem without any unnecessary complications
0,The design principles followed appear to be sound.
0,Yes the authors have explained clearly and in detail about the proposed changes. Well done!
0,The proposed code changes included two methods in which the changes are to be done. the new design proposed looks simple and efficient. The comments in the code made it easier to understand.
0,The explanation given by the team is quite simple. The proposed code changes made it clear how the team is planning to approach the problem.
0,"The design doc included most of the functionalities, the problem solution is described as current scenario and the expected solution field describes the approach to the problem. The team had also included design diagram like usecase and data flow diagram."
0,The team made sure to include all the details in the document.
1,"The Data Flow Diagram is very helpful in understanding the authors' proposal.  However, the Use case Diagram seems to be missing some important information such as: email notifications, detection of updated questionnaires, and deletion of response objects."
0,"Yes, the Proposed Solution touches on all of the required functionality."
0,Found visual aids like diagrams which explain about the design. The team included diagrams like UML in the document which makes it simple for the reader to trail with what is written.
0,The team has clearly asserted about the functions they want to implement their changes for. The design looks good and I don't think there are any gems that can simplify the process.
0,"After reviewing the changes team has advanced, I felt the team has worked very well on the implementation and they came up with great advances to the design. The document also looks very good with detailed explanations."
0,"Yes, the design includes all of the functionality required. The functionalities have been completely described in the wiki document. The team has also included diagrams which makes it easy for the reader."
0,The document looks very complete with detailed explanations of all the sections and also the team included many code snippets which show the implementation part of the project.
0,The flow diagrams show the complete functionality
1,"The given UML diagram does not help to understand the project flow and the Data flow diagram is a little hard to follow.
I think some details could be added to UML diagram about the emails being sent to the student to redo the reviews."
0,There seem to be no new methods being added for this project. Though it is like adding extra work from before it will not increase the response time of the system. After rubric update the application work as expected and was working previously.
0,The team has mentioned the changes they have identified and the code changes to be made
0,Team has added all the functionality required to change
0,The data flow diagram and the use case diagram helps in understanding the details of the project and are not redundant and follows all the conventions.
0,Seems so that all of the cases are thought about.
1,"There were use case diagrams and data flow diagrams in the wiki doc. I did not find either of those very helpful as I think the usecase was simple and obvious from the requirements doc, the data diagram seems very complicated."
1,The authors have not mentioned where they are going to make all they proposed changes. They will definitely need to add methods to existing controllers. Design wise their logic seems sound.
0,All the points mentioned in the requirements are considered in the design doc.
0,"I'm not sure they needed any visualization for this project, but they have created multiple easy-to-understand diagrams that demonstrate a clear path from start to finish."
1,"The proposed design looks confusing to me (I might have missed something).
I did not understand why the team is comparing the number of questions to identify that there is a major change in the questionnaire. There might be a situation when an equal number question is deleted and added(explained in the second scenario). The second scenario handles this by checking the parameter add_new_questions. Can we not use the same parameter to handle the first scenario?
I am sure that there might be some valid reasons for the team to propose different methods to handle each scenario. 
I would suggest the team to explain the proposed solution in more detail so that it is easy for the reviewer to understand the changes."
1,"The changes proposed by the team looks a bit confusing to me as I did not understand the need to include 2 separate scenarios to identify the ""major changes"".
I would suggest the team to include some more information in the explanation so that the design is easy to follow."
0,"Yes, the design incorporated all the required functionality.
I really liked the way the team divided the entire functionality into two phases (Identification of edit and Notification.).
Each phase explains ""what"" and ""how"" code changes would be done to implement the required functionality."
0,"Yes, the team have included a testing plan in their writeup. Also, they have mentioned the spec file that would be used to add 2 new test cases and ""why"" and ""what"" test cases would be added. The test cases look meaningful to me."
1,"Scope of Improvement:
I find some difficulty in understanding the proposed code changes. It was confusing if the previous answers will get auto-populated in the view or sent within the email. Means it was unsure whether the user will have to answer the previously answered questions are not? Team could improve this explanation and make it more clear."
0,"Good Work:
The design looks correct and the approach is satisfiable. I think the team has done good brainstorming to come up to a solution. The solution looks solid and may solve the problem."
0,"Again, I think all is good here."
0,The images are quite useful.
1,"Although the document includes workflow diagram (the only diagram), it is not enough to convey all design and implementation details. Provided workflow diagram helps to understand the system behavior for checking conflicting reviews, but it is too high-level of the diagram and does not provide enough implementation details.
Also, both screenshots in the ""No separate view exist to show conflicts"" section are very helpful to see how conflicting reviews and their summaries currently appear on the screen, but you should also provide your desired rendered page to show how conflicting reviews would look like after your team implemented the project!
It would be helpful to illustrate how review object is stored in the DB table. Does it have total score? Regardless if it does or does not, you should provide implementation details on how such review table is going to be used to determine conflicting reviews.
To recap on the above points:
1) The workflow diagram and screenshots that your team has in the document are very helpful for the project understanding. However, provided information is not sufficient for the project (see 3).2) Provided workflow diagram follows the convention and I see no problems with it.3) Provided workflow diagram represents high-level design and is not enough for this project. Please create additional diagram(s) (UML, Entity Relationship, and etc. at least one more) for better understanding and more detailed summary of the project."
1,"The document and proposed design does great job explaining ""what"" needs to be done, but unfortunately it does not specify ""how"" steps. If it cover ""how"" steps, it does in very abstract way avoiding all implementation details. For example, in the ""Implementation"" section,Solution: (for the ""no separate view"" problem) Separate view will be created to address this issue.
But how will it be created? Does your team plan on creating separate view .erb file and integrate two conflicting reviews into single review? How would the rendered page look like (screenshot of the page how you envision would really be helpful here).
The same applies for the ""Incorrect email message links"" problem. I understand the solution your team proposes. However, again how would hard-coded URLs be managed by the config file to make these links functional on every server? Probably, providing some code samples, or at least pseudo-code is necessary information that must be included for appropriate solution and approach to the problem.
Such detailed information is missing throughout the project design (I understand that this is just rough draft, but needs to be improved). To recap on the points above:
1) No methods, classes, variables to be added are specified in the document. Authors did not specify such detailed information.2) It is possible that new design may introduce code smells. It depends on how conflicting reviews are going to be determined. It is inefficient, if upon creation of the new review, iteration is required over all existing reviews. Unfortunately, team did not provide detailed information on how conflicting reviews are going to be determined. Thus, it is too early to say if it potentially make the code ""smelly"".3) New design look in fact simple, manageable and appropriate. Just missing detailed ""how"" steps. Great work for the first peer review.4) Again, response time depends on the detailed implementation. Details on how conflicting reviews are going to be determined is a little unclear to me and I cannot be certain if it would increase the response time of the system. It would, if upon creation of the new review, iteration over all existing reviews is required.5) Yes, a little more effort on expending and improving the design would help this project a lot."
1,"Overall quality of the explanations is good. Although, the more in-depth details are still needed to make the document clear.
I'm having hard time to understand ""Inefficient calculation of conflicts"" section and solution to that problem. Specifically, average of two scores 0 and 5 is 2.5 and if next submission has 2.5 score why should implementation consider it as a conflict? Isn't that how the conflict determined, by a threshold limit? How is the threshold generated? Does it include average. If yes, please explain how. Please elaborate on the threshold more in general.Also, the solution to the problem is unclear. The document states, ""Instead of relying on the average, we will iterate through all previous submission and will check conflict comparing them with the latest review."" So, your team's proposed implementation is to iterate through all (let's assume N) reviews and check each existing review against the new review. Hence, if the new review conflicts with every single N-th existing review, your solution is to send N number of emails? Or just 1 email?I do not think this is correct strategy to send N number of emails (each for N-th existing review). This  would be very inefficient and confusing. Also, I have doubts about sending only 1 email. What review would you include as being conflicting review (besides newly submitted one)? Definitely this sections requires a little more understanding.
Also, I'm a little unclear on the ""No separate view exist to show conflicts"" (it actually exists, not exist). Based on the screenshot I see that the page shows only one review. My understanding is that your team wants to render both conflicting reviews into the separate view. How would it look like? Is it two different reviews, side-by-side on the same page? Or is it going to be something else? Please, create such rendered page first and then include its mocked screenshot for additional clarity of your proposal. May be it would look too overwhelmed on complected and would require different approach?"
1,"Yes, the design mostly incorporates all of the functionalities required for this project. The document clearly states what functionalities must be added in the ""Problem Statement"", ""What needs to be done"" and ""Implementation"" (also adds high-level solution to the problem) sections. Very good work is done by the team to integrate proposed solution that has been done previously by different team (last semester) and team's own proposal, also considering the flaws of the proposed model. However, the design itself can slightly be improved by providing UML or E/R diagrams, which would help to clarify  implementation details for these functionalities. Although, the document contains workflow diagram, I think it is not enough for detailed explanation of the design.
Moreover, please consider implementation flaws that were reported to you (pull request is dirty, 107 Code Climate issues, and etc.) along with the flaws of the design you found.
Generally, all functionalities are discussed and properly addressed in the this design document."
1,"Most of the important parts/iteams are provided in the document, but unfortunately not to required extent and desired level of granularity (in terms of details). However, team did great job on providing that much information, creating design document, and determining possible solutions. All of the notes that I left above can easily be improved just by providing more details and resolving some confusion that I had.
Project purpose is clearly stated in the ""Problem Statement"".
Project design missing more in-depth detailed UML diagram (that represent solution on the implementation level, including classes, variables used and etc.). Workflow diagram is good, but not enough.
Testing Plan is good. Make sure to perform both Rspec Testing and UI Testing upon completion of implementation.
The document is also missing implementation details with some code snippets or at least pseudo-code and explanation on how the changes would be done."
1,"""Separate view will be created to address this issue"" is mentioned: what will this view look like? Would have benefited from mockups. The existing visual aids are still really helpful."
0,"You clearly thought through this project, good job."
0,The design covers all the necessary functionality.
0,"Complete, has all components, organized well"
0,"N/A. It was my understanding for the Development Documentation, that this was to be from a higher view and no coding would need to be implemented at this point."
0,I believe the team has outlined the problems and proposed solutions from a high level overview. Illustrations were used to clearly identify problems and a bulleted type list used to propose solutions.
0,"According to the flow chart provided in the Wiki, I feel the team has captured the overall function of the featured requested."
1,"The document did a great job at explaining the existing feature and how it operates. I believe the team should spend more time laying out their plan for improvement of the current feature as well as testing their changes. For instance, the Wiki has a Test Plan section that states the team will run existing RSpec tests. However, if the team adds new code to an existing model (i.e create a new method) or create a new model all togther, this would not have coverage in the existing RSpec. The team could state that they will add/modify RSPecs to have coverage of their new code."
1,"There are no mock-ups of the proposed changes, especially the proposed view. The only views shown seem to be the existing views."
1,"I didn't understand the ""Inefficient calculation of conflicts"" section. Why would submitting a new review of 2.5 be considered a conflict?
 
In ""What need to be done"", you state that the e-mail will contain 2 links, but only explain one link. What is the other link?"
1,"The team did a good job with the sections that were included with the document.  The problem tasks are clearly defined with well- explained solutions.  This team did an excellent job of creating diagrams that aid in explaining their design.  The team even included a test plan with some automated test.  However, the test section could use some additional details on how the tests will be performed and the code that will be used.  In the team's defense, it is a little early in the project to have test code developed since the code for the project itself has not been written.
 
While the document is very thorough, it is missing the names of the authors and a reference section."
1,"One small thing that was not clear is the feature that lets the instructor see what assignments a user has participated in. I looked at the Search For Assignments section and I saw some search filters like date_created, date_updated, but I didn't see user id as a filter mentioned in there. Since this is one of the core requirements, I feel you should mention this specifically in the Search for Assignments sections"
1,"I found that their document was exactly similar to the previous implementation. http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018-_Project_E1861._Improving_search_facility_in_Expertiza Although their design includes all the functionality required, it does not include the changes that they are making over the previous implementation. This makes is harder to understand how their approach would be different from the previous implementation."
1,"The design looks fairly complete to me. The project purpose, design and the testing plan have been included. The only thing that I found missing was the design decisions to fix the previous implementation."
1,"I didn't understand the purpose of the ERD in your proposal. How are you using the ERD information to help your searches?
 
I also would've liked to see some mock-up of how you're plan on changing the views."
1,"A test plan is included, but it isn't very descriptive.  For instance, will the authors test for valid input/output to/from the API?"
0,"Yes, the authors discuss moving the API calls from the view to a response_controller, which is a more appropriate place."
0,They have given a flow diagram which very well explains what the coders have understood and it appears correct to me. They have also given pictorial descriptions of their anticipated view which is commendable and adequate at this stage.
0,The design appears to be simple and clear. They are going to move the existing code from a view to the controller file which sounds reasonable. And make some changes to make the code get rid of smells.
1,The design is very concrete and well-explained with figures and flow diagram for the reviewer to understand. They have worked on it after the first round of submission which shows in the detailed description of their solution. However I missed the mention of the design patterns in their solution. Maybe when they start implementing they would have a better hold on the what pattern to use and what not if any at all.
0,Well-explained in detail. Quite accurate and sufficient at this stage.
0,The flow chart for the Plan of action describes in a very clear and simple manner about what their final use will be for the functionality they are implementing.The Debug mode screenshot explains clearly about one use case.
0,The design approach used by them is pretty straightforward and I think the solution cannot be more simple.It seems to address all the problems of the project.
0,The design they have mentioned seems to be perfectly fine.Moving the code from the view to the controller makes sense and is the right thing to do.The view changes also seems to be appropriate as its useless to show everything returned from the API to the user.They only need to know the crux of the matter.
0,The authors have described about what all changes they are going to make and how they are going to do it.They have expalined how their changes will help with use cases.
0,they have talked about the test plan and include the test for controller and view.
1,"they have used the graph to show the workflow and the outputs of the design. However, the pictures are not placed well and hard to read. May need some adjustments."
0,The design is simple and easy to understand. they are using the web service to achieve the suggestion function.
0,It seems that they do not change the functionality of the previous work and only do the refactoring. They have also change the views of the previous design.
0,Although they have included the previous work which already archives the function stated. they have explained what they will do further clearly.
1,"The team has tried their best to make use of visualizations. However, there are some serious concerns. The team used the name flowchart instead of an application flow diagram but have actually given an application flow. Flowchart is useful when there is a logic and decisions are made based on them. Please note this difference even though it may not be a big deal in this case. Probably a use case diagram would have made sense too."
1,"The team has mentioned all the types of tests that they will be doing. However, the team has not mentioned about any of the scenarios. Atleast a high level overview of some scenarios would help. The team also does not mention any of the scenarios for manual testing. The team could have used the previous team's teat cases for reference and built on it."
1,"The design appears simple enough. However, there is always scope of improvement. There hasn't been much discussed in the document about the implementation part as there may not be a concrete plan in place yet. This makes it hard to judge the design itself. The team should include more information in this perspective. From what is mentioned in the document, the team looks to be on the right track."
1,"Good job overall. As a reviewer, I would like to point out some problems. The introduction section is missing. It would be good to have an introduction section with other sections like expertiza and introduce the peer reviews before describing the problem statement. Even the problem statement fails to convey the message. However, reading the other section conveys what this team will be doing but the problem statement only conveys a part of what will be done. Please have a sentence about what is there and what needs to be done and the motivation behind it."
1,The team have tried to explain about the changes but I feel that the information provided wasn't describing the changes required to the system in detail. Rather they have extensively discussed about the working part. The team could include more information about what needs to be changed and where. Just an overview would be sufficient. Note that the files to be changed section has one line notes. This could be made more descriptive for instance.
0,"All the changes have been well explained and to back up their document, there is a pull request which is active."
0,The document aptly describes what the team intends to do
0,They have added the information that is necessary and easy to understand
0,There is a neat Flow chart that explains the plan of action adequately.
0,The kind of tests that would be performed have been identified and elaborated upon. Good work
0,There are plenty of visual tools used in the doc. So much better than last time.
0,The document has completely transformed after the first round of reviews and now it looks great! the deign does appear to be sound.
0,"The team has indicated they will be testing both the controllers and views of objects they will change. Theire is no mention of testing models, however, if the team does not change/update models, there will not be testing required."
0,The team has a high level view at this point. Outlining their intend flow and potential changes to be made.
0,I believe the team has a well put together plan on how to proceed with their given project.
0,The team has done well at explaining their intended action plan from a higher level. I am assuming more details will be added at a later date once the coding is complete.
0,Very good use of visuals.
0,The design does appear to be simple/efficient.
0,Their explanations were enough for me to understand what they will be doing for this project.
0,"I'd say the design is sufficiently simple and could actually benefit from the addition of a class, as mentioned above."
1,"The test plan is an improvement on the previous design document version, but there is still a lack of details.  As mentioned in the previous review, given that the analyzed text will not be displayed on the page, manual testing will need to be performed to ensure that the analysis returned by the API corresponds to the text that it is associated with on the page."
0,Does explain how the information flows and what is been done to achieve this.
1,There is no explicit section or requirement on design pattern for this project. They are adding a new requirement in overall and it appears there are no multiple client requirements to adapt or factory the code in first place.
1,The authors do not use any visual aids.  A diagram showing how expertiza will interact with the suggestion-detection API would be helpful.  A use case diagram would also be helpful.
0,The design seems sound to me.  The authors plan to pull logic out of views and place in controllers where it should be.
1,"Some of the proposed changes could use a bit more explanation. For instance, how do the authors plan to evaluate execution time of API? How will they ensure that CORS does not need to be enabled?  The 'Files that will change' section doesn't seem to be comprehensive.  What views will be changed?"
0,"Yes, the 'Proposed changes' section includes touches on all requirements. It even includes additional items such as fixing grammar issues."
0,"No, I believe they are going to make the already smelly code unsmelly by fixing the grammar issues, writing unit tests, moving the API from view to controller. They have also mentioned the files that would be affected after their code change."
0,"I believe they are going to improvise upon the changes made by the previous semester students. I think that is a better approach and it will save a lot of time. They have clearly mentioned what they will be correcting like moving the code from view to the controller, fixing grammar issues. They are also going to do a performance analysis of the API which is commendable if they are able to make the code run faster by improving it."
1,"I could understand everything about their project reading the wiki page. They have very well divided the sections into the problem statement, the previous implementation , their solution and the files they will be making changes in.
1 problem I see is that I was unable to understand how this project will help students give better reviews. As in how will this be made available to students. In what format? an email? a report?"
0,I think the project purpose and project design is complete. They can give more details upon their testing plan. Like I am more interested on how they will do the performance testing and what is the metric they would be concentrating upon.
1,"The write up is good but it can be improved.
As they have not explained how they are going to implement the changes,the test plan also does not have required material.
More detail explanation about the existing functionality,why the previous project was not accepted and what different and how they are going to implement the changes."
1,The design is more about the refactoring... and need more details about how they implement the functions even though the previous work may cover it.
0,The design implementation looks straight forward and none of these points appear to occur.
1,The section is understandable but it is not structured well. The section has all bullet points listed but the points mentioned aren't ordered properly.
0,Yes. The design doc has all the functionality required.
1,There are no visual aids in terms of UML diagram
1,There is no design mentioned. They mostly emphasize on the previous code
1,Most of the document explains the previous work but there's no descriptive explanation on what the tasks in the proposed changes accomplish. They are 1 line bullet points that could be elaborated.
1,The document is missing information on how they will integrate Amogh Agnihotri's web service which was mentioned in the tasks to be completed.
0,The authors have not really mentioned if they are going to add methods but it seems so from the problem description. They have adequate test plans in place to ensure that the code is not smelly.
0,The explanation is more about the problems than the solutions. But I am still satisfied with the level of detail that the project explores.
0,All the requirements have been covered in the design doc.
0,The team captured all of the Exiting Feature as well as creating a bulleted list for actions they are going to take to finish the requested feature.
1,"The team did a good job with illustrations and diagrams for the Exiting Feature. However, there wasn't any diagrams or flow charts showing how the team was going to make improvements to the existing feature. I think a flow chart would do good to capture the thought process and flow of the future feature."
0,They seem to be signing up to do a lot; I hope they can finish it all!
1,"1. I think the call to the API should be implemented outside the controller so the controller simply calls a method in a separate class and gets the result.
2. Putting the API client code in the controller will introduce the ""large class"" code smell.  All of the HTTP client interactions and JSON parsing should be done by a class made for that purpose.
3. There are likely gems that make HTTP calls and JSON parsing easy to manage.  The current design does not indicate that such gmes wouldn't be used.
4. The response time will certainly be increased.  I played with the API a bit and it took ~850ms for a fairly small amount of text.  The additional content could be loaded client side by the browser to bring the page up more quickly.  The CORS issue could be addressed by having the expertiza app act like a proxy to the API.  In other words, the Web browser makes an AJAX request to expertiza and expertiza makes a request to the API on behalf of the Web browser.
5. If the current approach is used, the design should include a new class for handling interactions with the API instead of adding all of that logic to the controller."
1,"The changes seem straightforward, although there are a few things that are unclear.  For instance, the ""Include displaying analysis for each review as a ""debug"" option"" item does not indicate how this option would be enabled--is this an additional change to the UI?  The ""Fix grammar issues in response.html.erb"" item does not elaborate on what the grammar issues are and this doesn't appear to be covered elsewhere in the document.  Also, that item seems to be out of scope for this project."
0,The design appears to cover all of the required functionality and seems to be quite straightforward: call an API and incorporate the returned data into an existing view.
1,"The problem statement is good.  The design portion should include a diagram of what the UI will actually look like, not one with additional data that will not be included.  It should also describe how enabling the new ""debug"" option will be done. The testing plan should include more details, for instance ensuring that the data retrieved from the API actually corresponds to the question answer text.  If the comment text is not included in the analysis view, there's no way to ensure that the question answer text is what was actually sent to the API."
1,No tests were performed.
1,They have not tested any models or controllers.
1,The system doesn't have a test.
1,No tests for models or controllers can be found.
1,No test cases found.
1,"The code in the test/controllers directory appears to be the default auto-generated code(zero tests).
The code in the test/models directory appears to be the default auto-generated code (zero tests).
Could not find any text fixtures in their code but they have done a few validations"
1,"1) From the way they did it we wont be able to see the bookings done for a tour separately. So if the tour is deleted i don't think there is a way to see the booking lists. Because i couldn't find any links to see the list of all users. From their code they haven't written any dependencies.
2) If admin deletes a user the next user in waitlist gets the seats.
3)Admin account cannot be deleted.
4) End date after start date edge case has been handled.
5)If an admin tries to delete a customer who has bookmarked several tours then the bookmarks are also deleted,"
1,"README file gives basic navigation, it doesn't mention how edge cases are been handled. Agent  and customer pages are not being handled i.e. if I login in as customer and login in as agent in incognito, the page in customer is automatically switched to agent which should not be the case. if admin tries to delete tour then customer bookings, agent page belonging to that page are erased. customer in wait list is not moved to booked when seats are available. Admin account cannot be deleted in the app. The tour end is not earlier than start date. Customer deleted by admin doesn't show up in customer's list."
1,"1. it will still delete the tour.
2. the tour will be delete.
3. the admin cannot deleted
4. tour have the start and end date
5. if the customer was deleted, his booking will be deleted too."
1,"The README should have been more explanatory covering the edge cases.
I am able to create tours with deadline later than the start and end time of the tour.
When the number of seats are decreased by the agent,the customer is still confirmed for seats(which are more than provided by the agent)."
1,"1) Delete works on the second attempt.
2) This seems to be working.
3) Works as expected.
4) Works as expected.
5) Works on the second attempt.
Readme doesn't cover these."
1,"(1) What will happen if the admin tries to delete tour that has bookings? Bookings are also deleted (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? customers waitlisted are confirmed(correct behavior)
(3) Can Admin account be deleted? no (correct behavior)
(4) Can a tour have end date earlier than the start date. yes (incorrect behaviour)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? Bookmarks not deleted. (Incorrect Behaviour)."
1,"Admin is able to create tours, which shouldn't be the case. Search function does not work. Itinerary in some tours is empty. Only one image can be uploaded by the agent. Everything else looks cool."
1,The layout has been fixed a lot on round 2. But there still many problems with relationships.
1,"Updating the seats in a tour as an admin/agent is not reflected in the tour.
As and admin I am not able to book or bookmark tours.
The use of flash notice or messages or some of confirmation would have been better to use.
Contact and Email should have appropriate data type.
Cannot update the email id of customer once account created.
The wait-list scenario is not working.When the seats in tour was made available by deleting some tickets from the other customer,wait listed customer was not pushed up.Also it is showing incorrect number of tickets left.
Not able to delete the agent profile.I cannot test some more functionalities because of this."
0,The basic functionalities seem to be working as expected.
1,"They have'nt added some of these properties. For example a customer can book the same tour twice and when you try to delete the customer account in admin the tours that he booked wont be deleted, and by looking at their model code they have'nt written dependencies."
1,"The system almost doesn't have 1-to n, n-to-n relationships. For example, I could create a customer account which has same email address with the admin account.
The only relationship I found is in tour model:
has_many :itineraries"
0,Its is implemented correctly.
1,"Looking at the models, no such relationships were found. Not a single 1-to-n relationship was found. However, I see the functionality working in the app as expected. Maybe a missed commit."
1,Although I could not find any mappings inside models or schema.rb but I verified the functionality by creating multiple tours under an agent and then deleting that particular agent. All the tours do get deleted but I can't tell how the relationships are handled.
0,"Yes, the team pushed their changes regularly in round 2."
0,There were a lot of commits done in round 2.
0,Commits were made mostly on the last day.
0,"The team has been pushing all their changes regularly throughout the project period. Also, there were several commits in round 2."
1,The code is understandable. The only drawback is that the logic is not really there in the models.
1,"Some of the methods are too long. 
def book_tour in tours_controller.
def cancel_bookings in bookings_controller
def bookmark_tour in bookings_controller
def signup in login_controller"
1,"1) Found some methods in bookings and tours controllers performing multiple operations without calling other methods.
2) Naming convention is good.
3) Found extremely long methods in booking and tour controller."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
Following are my observations:
1) ""book_tour"" method is found inside tour_controller, ideally it should be in bookings controller and method ""bookmark_tour"" is found in bookings controller ideally it should be in bookmarks_controller.
2) Method ""cancel_booking"" in Bookings controller performs more than one operation i.e. it updates the booking details and also updates the tour details. The code to update tour details is common and can be DRY'ed out.
3)Model ""User"" should have been named as ""Customer"" as ""User"" of the system can be admin, agents or customer and what I can see from the code is that ""user"" model is defined to implement customers model.
4) Also, the method ""cancel_booking"" has too many nested if-else blocks."
0,"Yes, the last edit was 10 hours ago"
0,Most of the commits have been made in the last one week.
0,yes they have done 24 commits
0,"Yes, the team has been active and kept pushing their updates regularly. Since the code is separated into several controllers, it is easy for all the developers to work in parallel. I can see that the code is easily maintainable and the developers if they perform any updates or changes, they can easily push it."
0,They have committed very frequently.
0,The team has been pushing code from 22nd Feb onwards.
1,"The team has created 7 branches to carry out separate changes and then merged along the way as soon as a particular functionality is implemented correctly. The contributors have carried out their work individually then merged the project in the end.
Commit messages are pretty vague. A detailed commit message can help us to identify what changes were made in that particular commit."
1,Couldnt find any tests for any models and controllers.
0,yes they have
0,"The team has pretty much tested all the models and controllers.
All the features(which have been implemented) work well."
0,"Surprisingly tidy, someone boot strapped it?"
1,"The User Interface is intuitive and easy to use.
However, there can be few error messages that can be thrown when the username and passwords mismatch or the user already exists while signing up."
0,"Yes, the UI is pretty impressive."
0,Yes it is very good
0,"The User Interface is very easy to use and very well designed. Even though it looks simple, the UI provides very good guidance to the user. Navigating through the application is very easy because of the tabs that are present on the left. Moreover, the text on the tabs is very much relevant and is not at all ambiguous due to which the user never gets lost in the application."
0,Very easy to use
1,"user interface is very intuitive and easy to use. 
suggestion :
1. in admin login page, it would be nice to add a ""back"" button/link. for now we have to click ""back"" button of browser."
1,"The UI is quite impressive but there are a number of problems(doubts) while navigating around.Also no description in the README file created more problems.
I really like the display of the tours along with the information of number of tickets left.
Some sort of display in the front to differentiate who is logging in would be better."
1,No readme file provided. Credentials found on git readme.
1,"I tried to use the app and following are my observations 
Customer:
1) When I logged in with the customers I was not able to ""search a tour"" and ""delete a customer""; hyperlink was deactivated.
2)Also, I was not able to edit customers profile.
3) When I clicked on ""My bookings"" i just found booking ID's, It would be good to have all the booking details.
4) I could not find any option to bookmark a tour.
5) Also, a customer can give reviews only for the tours that are already taken but I found the option to give reviews on the ""details"" page of the tour; ideally it should be included in ""My Bookings"" section.
6) I could not find any option to cancel bookings.
7)The UI to handle waitlist scenarios was very intuitive and found it very easy to use.
 
 Agent:
1)Not able to upload image while creating a tour.
2)Multiple Text field ""Name"" on Create a tours page.Also, number of seats in a tour should be numeric but it is accepting text.
3)When I listed tours through agents credential, there is option to ""book a tour"" and ""write reviews"". Ideally agent should be able to see all the customers who have bookmarked the tour and see reviews of the completed tour.
4)I could not find any option to edit a tour.
 
Admin:
1) link to edit an admin is deactivated.
 
Could not find any link to log out a user. Session Management, can be used to handle sign in and sign out functionalities."
0,"Yes, the code follows good ruby and rails coding conventions."
1,"The code is easy to read and understand emphasizing on a good Ruby on Rails coding practice.
It would be better to have comments describing what the code is doing as I felt lost at some places.
Many functionalities of admin like editing his own profile,deleting a tour,user(customer/agent) and reviews is missing.Editing the profile is not available even for agent/customer should be present.
No Back/Logout option to come out of a session.
The validations for tour has a lot of problems.For instance I entered random text in the contact info while creating a tour and it accepted it."
0,"1) the classes that are proposed to, added in the proposal are correct
2) no the new design is lucid and does follow DRY.
3) the new additions that would be made in the project are easy to implement and are simplified
4) the new design is not yet implemented, though it deos it seems simple."
0,"As the issues required to be fixed have strict rules regarding design patterns, the fixes provided by the author comply with the above metrics."
1,"The writeup describes the reasoning and approaches used well.  I would note, however, that in some cases the code is actually changing the behavior of the application, which is strictly speaking not refactoring.  For instance, problem 1 now flashes an error for a previously allowed operation.  Problem 3 changed error message text.  Also, problem 6 simply added comments to a method that was seen as too long, which arguably does not solve the problem.  Problem 10 introduces the ""can_delete_topic?"" method which has side effects beyond simply returning a bool, which I believe is not really kosher.  A route was removed from routes.rb, which presumably also changes the application behavior."
0,"Yes, the team talked about each change they made and why.  They talk about the reason the change was necessary and what the impact was. For example, in problem one of their issues and fixes section, they clearly explained that the issue was that update was being called in the wrong place, and that the solution was to remove it and flash an error message. Well done!"
0,"They have listed the problems and how they will handle them. Also, it is a refactoring project so they have talked about how they do the refactoring."
1,The team hasn't mentioned about test plan.
1,There was no test plan section. Although as suggested above a video showing the passing of all test cases would be a great add.
1,"I found the document to be lacking of any test plan. They have introduced new functionalities, so it is expected of them to include test plans in their document. Although, I do find the sign_up_sheet_controller_spec to be containing the test cases, they have not been documented properly."
1,"The testing section simply states that all testing was covered by existing test cases, which would appear to not be adequate, given an instructor response on Piazza."
1,I do not see any documentation where the team conducted tests.
1,The writeup provides detailed information about the different fixes performed by the author. More information regarding testing could be added such as a video of the rspec tests passing to prevent any issues being missed during refactoring.
1,"I sincerely believe that the team has made a great effort to put all their design choices into their documentation and I find the code to be explained in an easy manner. I like how the team has made use of a problem and solution format to drive their point home and the document is to the point.
However, I would like to point out a few issues.
1. The document fails to mention any testing that they have performed on their new code.
2. The implementation has not been hosted on any VCL or Heroku app, so testing their implementation is difficult for me as a reader."
0,The writeup is well written and clearly describes what has been done.
0,The team did an expert job of describing what functionality was affected and impact it had.  I could clearly understand what their project object is and how they executed it.  Each issue talks about the functionality and what it is related to.
1,"Yes, many functionalities Some of the functionalities don't pass the test cases. I'd suggest the team adds more test cases and make sure the code passes these cases."
1,"The team does not document their test cases. They have not been hosted anywhere to check this functionality. However, upon my initial review, I believe that all features work as intended. But, I would like the team to show their results through test cases."
1,"There were no instructions on how to run manual tests.  Running rspec spec/controllers/sign_up_sheet_controller_spec.rb failed with a ""undefined method"" error.  The code needs to be fixed so that all existing test cases pass."
0,Each feature works as intended and functionality has improved with these changes.  No edge cases were discovered.
1,No way to test the work since the application was not deployed.
0,The code is easy to follow. It follows Ruby style and DRY principle.
1,"I'm not sure I personally like the @topic.update_attributes being such a long line setting multiple things at once. The old way of having each thing on its own line was more intuitive and easy to read.
Perhaps if keeping it the new way, each param can be put on it's own line and lined up, even if it's actually all one executable line of code."
0,"I could not find any issues with the current code(from what they have implemented so far).
The problems solved mainly are renaming, removing redundant code and updating flash messages.  Everything so far seems to be good"
0,The code clearly follows the above metrics.
0,"Since this was a refactoring project, the objective of the changes was to do 1-5.  They did a great job of improving the code in every way.  For instance, problem 10 was nicely resolved by moving duplicate code into the helper function can_delete_topic?  Very good job refactoring."
1,"some methods are relatively long and may need to be split. For example, if-else statements are heavily used in the method and make it hard to follow the code."
0,The code appears to be in good order and of good structure of what the team had changed.
0,"The team has followed good naming conventions for variables, methods and class names."
1,The team hasn't updated their build results in the PR.
0,"I believe that the variable, methods and class names have been appropriately named and it is quite easy to understand what they do. Renaming variable participants to team was a good choice in my opinion. All unnecessary variables have been refactored out. Great job!"
0,"Each variable name, function name, and class name was clear and concise. For instance, delete_signup and delete_signup_as_instructor are two function names that are easy to understand but not too long."
0,all names should be good
1,It appears the team has not submitted a pull request from the repository.
1,"I don't believe they need to add more tests, since they were only doing renaming, refactoring, etc. However, I also don't see that ANY tests ran on their pull request... I think they may be out of sync with the beta branch or something."
1,No Test Plan added yet
1,No tests were added.
1,test file is not included there
1,I do not see any testing.
0,"Yes, they included UI test plan in the document. Seems their test plan is comprehensive."
0,"The design document included a test section which includes in detail about the Rspec framework tests, capybara tests and UI tests and i think they have written enough test cases for the UI tests which will be necessary to test the system."
0,"Yes, the document did include the test plan. Manual testing cases are described and automated test plan is given. The automated test plan is brief, whereas UI test considers all the cases of testing the features that should be implemented."
0,"They have a good test plan in the design document with RSpec framework tests, capybara tests, and UI tests, all the test are well described."
0,detailed test plans have been included.
1,"The test plan has been well explained. I have some concerns though. There are no actual test scenarios for rspec and capybara. At least an overview of those would have helped. Although the explanation is good and conveys to the reader what will be done, a little insight on actual cases could help provide more information. The manual tests are mentioned but more could be mentioned like testing what happens when tester unchecks all check boxes."
0,"I think the test plan it very detailed with separate testing for Rspec, Capybara and UI tests."
0,"The test plan is amazing. I learned something new, related to Capybara tests. The team is yet to come up with the exact test cases they will implement, but I am sure that will be a cakewalk once they code it up."
0,"Yes, they have a separate test plan. Rspec, Capybara and UI tests are proposed and will be interesting to see how they go about implementing them for the final project."
1,They did include a test plan but i did not find it appropriate to what they are actually supposed to test.
0,They provide great visualization of their design. The diagram shows detailed of what changes they might do.
0,They have used proper flow charts to depict their design flow and they have also included screenshots to depict the proposed grade visualization. So the visualizations makes it a little easy to understand what the project is about.
0,The team used an old system display screenshot and new system design diagram to show what changes are going to take place in the implementation. The design flow shows navigation of reaching the visualization page.
0,Visualizations are pretty good and self explanatory. Good work here.
0,The flow of the design has been presented as a diagram and the idea is very clear and easily understandable.
1,"I'm really happy that the team considered my suggestion in this perspective and have now included visualizations for the how the graphs would actually look. Good job. I do have to mention a few things though. The class performance graph is unclear on what it means or is a little conficonf. Please have axis labels for that. You can have axis labels for the class performance graph too even though it's already explicit. The design flow diagrams could have small descriptions on the arrows to make it easier to interpret the diagram. Also, if possible, the team could put in examples of graphs for each or some of the frameworks mentioned in the document."
0,"As with the previous review round, the visuals are smart and effective in their usage and convey the intended meaning behind the design."
1,"There is a design flow chart which shows how to access the functionality. But I cannot find their idea behind how to implement it. 
It does not answer to question how to implement."
0,These are improvised on for this submission and I found them to have done a very good job. I have mentioned the details In the previous review and they remain the same. They have included more figures of the HTML mock up this time around.
1,They made use of visualizations here and there but i think they can add more figures to make their point more clear to understand instead of giving really lengthy writeup.
0,The design looks clear and simple. No redundant content involved.
1,"The design documents and the explanations are too big, but other than that it is good. The only problem is most of the explanations were too big. They could have written it in short and provided external links to read more about them."
1,I liked the way they have structured the document. But I thought there is too much information in one paragraph. It would have been nice if they have used points to explain the flow. Apart from that everything looks good to me.
0,"Yes, the design appears to be simple. Good work."
0,The proposed idea for the design sounds very simple and very easily understandable.  The tools and design choices part of the doc provides a much better way of understanding the topic.
0,The design is as simple as it gets. This is primarily because they have decided to combine both the single assignment ans multiple assignment into a single visualization.
1,"There are limited ways to see if the design appearance is simple or not because the team has not mentioned any specific information as to how are they planning to achieve the project.
Since the team has failed to mention the ""HOW"", it is very difficult to judge the simplicity of the design. However through the flow mentioned, I can assume the design is simple to be followed."
1,"The team has done the work in where changes need to be made, what files are to be changed, where the code needs to be added but I cannot find anywhere mention of how they plan to achieve it.
They have mentioned where changes but not how they plan to solve it. 
They failed to answer the question of how so I cannot judge whether the design is simple or complicated."
0,The design proposed is very easy to follow and understand . I was able to understand what has to be done. I have mentioned this in detail in the previous review.
0,The design looks sound and reasonable overall. The team has shown a clear design flow with good visualization. Looks very clear.
0,They have designed the project well with all essential information crucial for the project. They have given enough information on the proposed design and its tools and design choices which follow good design principles.
0,"Yes, it is good to look at and understand what the team is assigned and their approach to accomplishing the task. They have updated the document by adding a new view and some other sections of the document."
0,"The design appears to be sound, followed appropriate principles, provided many pieces of information and graph to help understand"
0,"Yes, the design appears to be sound and clear to understand."
0,The design appears to be very sound and following all the appropriate principles
1,"The design looks neat and descriptive. All the sections are well described and look perfect. As a reviewer, I am making some suggestions, which I think would make this overall document absolutely perfect. First problem I see is that the introduction section is too long and reviewers do not like to read a lot of text right in the beginning of the document. I would suggest you to have sub sections within introduction like motivation and others. Second problem is that I feel that the section proposed changes shouldsbe under roject design section. Third problem is that the table of contents should be before introduction. I suggest having it before the Introduction section."
0,"I think that the design is sound, The integration of rubric statistic visualization for both single assignments and multiple assignments into the assignment grade view is a good decision and is amply supported by good testing methodology and smart visuals."
1,"The explanation is easy to understand and gives a very good overview of existing and requiring tasks. The could improve on certain areas:
- A proper design pattern that they plan to implement or follow. But because it is a new implementation and not an existing refactoring of code base it might be difficult to come up with that. 
- A little more explanation on the code changes made in views to integrate both the views on one page would be great.
- A paragraph on what all needs to implemented or coded can be added. It can contain addition required in controllers interacting with grades_controller.rb."
1,"The team has given a good introduction to why this project is necessary.
The motivation seems apt. The authors have well-proposed files where changes need to be made.
However, what changes inside each file if mentioned could have made things easy for judging.
The design flow is well-structured showing how to access the functionality."
0,"The design document is done very well, they have completed all the functions by the previous review and have added more detail to the visualizations this time. The design flow diagram is also done very well."
0,There seem to be no conflict with the design. They did make use of appropriate patterns in their design.
0,"Yes, they have adequate description about changes and plan they would make."
0,They have properly explained the changes that they are going to make to the system with proper visualizations such as flow charts and screenshots. They have done some good work in properly explaining the changes that are to be made.
1,Not much information is shared about how they are going to make the changes i.e. the files they need to modify. Figures are used to show the difference between the old and new system.
0,"The authors adequately explained the changes to be made to the system by giving enough information of their task, what should be changed, what should be done, and how they make the changes with the proper graph help."
0,The changes have been explained pretty well and are easy to understand.
1,"Yes, the changes mentioned by the authors are well described but the explanation lacks a little bit in mentioning how the changes would be made to the existing system. I mean the team explained pretty well on what frameworks they will use and how the functionality would work but they haven't explicitly mentioned where and what would change. I know that it's too early but the team could have done a quick code overview and gave a small overview of the changes to the system. Well done otherwise."
0,"Through the use of ample visuals, detailed explanations and a solid test plan, the authors have explained the changes very nicely."
1,"No, I think they have figured it out but they haven't explained it well. They can give more explanation of the code added along with the screenshots of new code, explaining its need and how it follows the DRY principles and design patterns."
1,"The changes in the system are mentioned but with a few details missing.
Where the changes are made is mentioned, but why and how will the changes be made is not mentioned anywhere on the Wikipedia page.
Also, in the ""proposed code changes"" section, it would have been better if the team could have given a description of each change in the file rather than just providing the links of the file."
1,The changes are stated as to where changes are needed but how to do it is missing.
0,They have done a very good job. The first type of visualization allows instructors to examine the rubric statistics for a single assignment. The second type of visualization allows instructors to compare the rubric statistics between two different assignments when the criteria for each assignment is the same. They have detailed the steps and methods they are using to achieve the functionality.
1,The changes to be made are clearly explained but they seem to have not done much work on covering the whole project.
0,There is a UML in the wiki describing their design. They also include tools they will use.  The visualization of the design workflow is pretty good.
0,"They have some major visual aids of UML diagrams and a distribution graph. The diagrams are really helpful with very good quality. 
1. I didn't find any diagrams is unnecessary and do not help the reader understand this project.
2. The UML diagrams followed the conventions.
3. most of the diagrams are about high-level design with some details, but I think it provides enough details about their project."
0,"Visual aids are pretty helpful.
Mock HTML page helps us understand the implementation better. 
Design flow is intuitive as well."
0,All the diagrams used to explain the design flow or the types of visualizations are really good and easy to understand.
0,Good mock up and work flow diagram
1,"The team has used enough visual aids which include a mock-up of their implementation and a flow chart of the design flow. 
Both the visualizations provide specific knowledge on what is to be carried out. The reasons for visual aids have also been provided. The flow chart of the design clearly gives an idea of what is to be carried out.
I would suggest the team to include more information on how the implementation will be carried out and mention it on the design document."
1,"Team has come up with a good visualization of their proposal and has a flow chart of the design flow.
There is mention of why they need to provide visual aid which is a good thing.
The visual aid is on point providing specific knowledge on what is to be carried out.
I felt more information on how they plan to achieve the project could have been a complete case."
0,They have a design flow diagram and a HTML mock up set up that makes me understand the whole system better. Especially the Mock up is done very well and also showed how the final implementation will look like.
0,They have a good description of what they will do. They also include tools that will use.
0,"1) I couldn't find any error in their approach of implementing this project.
2) This new functionality that they have to implement will not make the code smelly
3) I could understand their design process and they have given some good explanation for their design process.
4) This new design will not increase the response time.
5) They have spent some time and put in good effort to complete this design document."
0,"1. no added method to a wong class.
2. I didn't see any potentially new design make the code smelly.
3. The new design doesn't look complicated.
4. The new design may potentially increase the response time."
0,"The design flow looks good. It would implement the functionality in a straight forward way. 
Looking forward to its implementation."
0,"The proposed design has been excellently written and very to understand, the team has done a very good job in explaining every step of their idea."
1,No implementation details or plan provided. It's difficult to judge based on the given documentation.
0,"According to their design document:

I could not find any evidence of the authors proposing to add method(s) to the wrong class.
The new design would make the code easier to understand.
Since the team cannot use any existing gems to add this functionality, making use of third part libraries makes sense here.
The team plans to do the following: ""Using a client-side rendering library will minimize the number of server interactions as the instructor changes which rubric statistics to display. This minimization of server interaction will maximize the response time of Expertiza."" I believe this assertion to be true.
I think the design is neat and does not need any improvement."
1,"I don't see any details about how the implementation will be done at the code/class/function level. It's current all visuals, workflow, and testing."
1,"The authors have not yet figured out/mentioned which all views and controllers they are willing to change. They have only figured the flow of UI which looks correct.
They have not mentioned any design/refactoring plans to remove smelly code or anythig that will potentially add smelly code () 
More feedback can be given once they come up with the final plan."
1,"The team has not mentioned anything about adding any code, that is creating or editing an existing method or class. Though the flow of the new design is provided through a flow chart which clearly explains the procedure of implementation. 
From what is mentioned on the design document no suggestions about code being ""smelly"" can be provided. Looking at the sample implementation provided the new design does not seem to be complicated. The team has put effort into planning the design."
0,"1) No the authors don't add methods to wrong class. 2) The new design will improve the system and make it easy for the instructors to address the problems that they might face. 
3) I think the tools that they use will be good for the design problem they are addressing. 4) The new design will definitely add more complexity to the system but will improve the layout for expertiza. 5) The effort put in will be justified because I feel that integrating rubric statistics with the assignment grade view is a good idea."
0,The writting quality are high. They have detailed description for problem statement and what they going to do.
0,They have proposed two types of visualizations such as rubric assessment for a single assignment and the other one is rubric assignment of two different assignments. They have also given proper information on the design part using flow charts and have also mentioned the tools they will use for this project.
0,The changes that the authors proposed have been checked. They wanted to implement the functionality i.e. visualizations for instructors in a better way using third party javascript libraries. They have cited some references to these third-party javascript libraries that they will be using in the implementation. They have provided the design flow in expertiza i.e. how an instructor will reach the visualization for a single assignment or comparison of two assignments with the same criteria.
0,"The overall quality of the explanations is very good with words and diagrams. Especially the diagrams, they are really helping me to understand the project."
0,The quality of explanations is pretty good. The visualization demoed helps us understand the solution better.
0,The proposed changes by the author are very clearly mentioned and are easily understandable.
1,Overall good explanation. Can improve a bit with restructuring using bullets to help make it look even better.
0,"I found that the changes proposed are relevant to the use case. They plan "" integration of rubric statistic visualization for both single assignments and multiple assignments into the assignment grade view"". For this, they provide adequate explanation in the document. The explanations are easy and intuitive to follow."
1,"The authors try to propose an initiation to a completely new project, which is great new take on it. But..
The changes could be better structured with the MVC flow diagram was explained rather than the UI flow. It is essential to check what all things hindered the past merge requests. 
Also, they are yet to come up with an entire complete project plan.
The proposal needs to include what all code changes the team thinks would be relevant or any refactoring choice the team makes.
But the part that the authors have mentioned, it is very clear, concise and easy to understand. They should maintain the current quality od wriitng and add more in-depth content to it"
0,"The team has provided an adequate explanation for the changes to be carried out. The team has mentioned the features that were previously implemented along with the new changes carried out. The new changes are also explained with an interactive mock-up of the visualization. 
Enough explanation is provided both visually and content-wise because of which it is very easy to follow the explanation. The team has followed good methods and techniques while proposing the changes implemented."
0,"The changes that are proposed is very clear. They have given visual mock-up which cleared many of my doubts. Also explained why this is needed.
Content wise it is a sound document.
The is sufficient information as to what changes are to be carried out. Along with the previously implemented changes."
0,The first type of visualization allows instructors to examine the rubric statistics for a single assignment. The second type of visualization allows instructors to compare the rubric statistics between two different assignments when the criteria for each assignment is the same. They have clearly explained well as to how they are going to proceed. The design flow is also done well and was helpful for me to understand the plan of work better. The HTML mockup was also helpful to understand the plan of work.
0,The writesup are well done. They almost includes all functionalities required.
0,"They have properly given enough information on what the project is about, that is allowing the instructors to visualize on the scores and also compare the rubric with an assignment etc. They have given info on what they should do in this project."
0,"Yes, the design incorporates all the functionality required. It has a good structure right from explaining what is the purpose of the project, previous implementation, task to be accomplished, design, test plan."
0,"The design incorporates all of the functionality required. They have a good project explanation, what is the existing views, and what they plan to do, and the test case."
0,"Yes, the design incorporate all the functionalities required."
0,The team is successful in implementing all the required functionalities for this particular project in their doc.
0,Looks pretty neat and good design doc.
0,"Yes, I found that the document was complete as it had a very informative introduction section where they detailed the topic that they would be working on and what kind of visualizations the instructors would need to understand the performance of the class. It includes a proposed changes section where they detail what strategies they are going to follow and also manage to include a decent test plan."
1,"The team should start with the existing code base in the merge request and see why it was not merged. eg. there are existing gems present to perform the tasks acquired by gems.
Some insights can be drawn from the previous implementation. There are a lot of things that are already completed in the previous implementation and the project does not need to start from the beginning. 
The team should rather concentrate on improving, refactoring and removing the merge issues."
0,"The design incorporates complete functionality which is required. The design mentions the changes required, details about the existing work done, the flow of design along with the test plan. 
The team has also performed mock-up of the visualization and added it to the design documentation. It was really good because it helped me understand the functionality easily. Everything was very clear."
0,"Yes, the design doc incorporates all the functionality needed.
They have mentioned about the existing views present in the expertiza and how they propose to do it in their project.
They have also presented the visualization of the functionality. 
The language used is pretty clear."
0,Yes the design document seems to be complete with all the functionality required. They have detailed the plan of work and how they plan to implement it very well. The Test plan has also been done well . They have spoken about how to integrate rubric statistics with the assignment grade view. They have also detailed and explained the design choices and tools to be used.
1,The design doesn't seem to incorporate all the required functionalities.
0,I think all things look good since we are still at the very beginning stage of the project.
0,They have given proper information on how to implement the project with enough flow charts to depict the project flow and the design choices and the tools they will use. They have also given details for the test plan in their wiki page.
1,"I like the documentation on the whole. It was simple and to the point. As I mentioned in above question, one suggestion is to add the diagram about how the new system is gonna look like. Apart from that everything is good. The authors are also advised to add the files where the changes are supposed to be made."
0,"The design is good and has all the important topics covered from problem statement to proposed solutions to test strategies.
Good work."
0,"I feel the doc is complete, the team has given all the required information for me to understand what they are doing and how are they planning to do it."
1,The document is mostly complete. I do think they should expand more on the defects in the previous implementation and how they plan to correct them.
1,"The design doc is not complete. The team has a lot of scope to improve and work on it.
The visualizations can be improved.
The design plan can include more in depth description of how the team goes ahead with the project.
The test planning covers a lot of information but misses some main points regarding - how will they test the new feature. What impact will the expertiza response time have on implementing the client call to third party server."
1,"The design doc has good content. Esp. the introduction part not only has information but it has good value with it giving why this project is necessary.
The documentation has sufficient information needed for designing in this initial phase. 
There is mention of testing plan in it on how they plan to test their project where they mentioned Rspec and Capybara.
 
I found one thing missing in the documentation which was How they plan to implement it. Rest I think the team has done a good job."
0,"The team's refactoring did not involve much of the team having to come up with new variables, methods and classes. That said, the team created one method in the questionnaire controller called ""create_quiz_question_choice"", the method naming and the variables used are adequately well-named for a reader to understand the usage of them."
0,"In the wiki page, there is a segment Test Plan which gives an extraordinary comprehension of what the group has executed and gives a decent view of the entire project. Likewise, I didn't locate any mechanized tests are fragmented or missing. the creators have secured every one of the obligations appointed to them in the submission."
1,The authors have not given a test plan. The video uploaded shows all tests related to their controller passing.
0,The team has made excellent use of visual aids. the UML diagrams are on point in assisting the reader interpret the context. The lottery specific diagram helps in understanding as to why the design for allotting reviewers is similar to assignments.
0,They have photos which show the before and after state of the project and I find that quite impressive!
0,"Their implementation steps mentioned int he document are simple, clear and easy to understand."
0,The changes made are explained decently. The photos added helped with this too
0,They have provided 3 tests for this project and I think these tests are enough to test the core functionalities of this project. I think these tests are good enough
0,I can understand what the whole project is about by just seeing their design document which is simple and clear and has screenshots which depicts how the project looks like after implementation.
0,From their design document i can see that they have given proper description on the current functionality and the tasks that are to be handled. They have properly given what tasks and how they are going to be handled.
0,They have explained well about all the changes that they are to be made to the system with proper screenshots which help the reviewer to easily understand the project.
0,Th design appears to be quite simple and straight forward.The design is changing the appropriate files and the solution to create a new table for keeping track of the review id of the instructors makes sense and I think the simplest way to implement the required functionality.
1,The design seems to be appropriate and clear now.The inclusion of the option for review by the instructor in different view requires changing the files which are being done in the appropriate places and thus makes sense.Some solutions to the task still need to be figured out like how they are going to bring out the required functionality.This can be seen in the Task 4.
1,"The author have described in detail about all the changes they are going to do for implementing the project.However,the score they have mentioned in the test plan is nowhere discussed about how they are going to check it in the code."
1,"They have just generally outlined the functionality to be tested as their test plan, but I would urge them to think upon more tests to test the code. Like RSpec tests."
1,The information provided seems to represent the work to be done but again specific design choices for each problem are not justified or addressed.
1,The team has made progress in adding visual aids to make sure that we understand what changes have to be made. They have added images to show what kind of visual should be made available in-order to solve the problem. But there are still not enough information on the design choices that they are going to take ignorer to solve the problems in hand.
1,"They have mentioned information about what changes have to be made, but still as I have mentioned the design choices are missing like for perform review option for Task 2, they could have mentioned more about how they are going to implement the same."
1,The test plan is quite shallow as of now. They need to test the spec files and mention those accordingly. And give an exhaustive test case list with all edge cases.
1,"The design appears to be quite easy to understand. However, like I commented on the previous review, I believe the solution part is still vague from the technical perspective. I think they can explore more to provide a better and a more concrete solution."
0,"At this level, I think whatever they have thought of is sufficient. As they start implementing they would come across several difficulties and understand what needs to be done at a higher level."
0,Included diagrams are explained.
0,The document is simple and clear.
1,The document lacks application flows and UML diagrams.
1,They just mention some of the parts to be tested. But they do not elaborate more on their testing plans or give any details regarding that matter.
1,"All the current design , its flaws and their design to rectify the problem in the problem statement. bUt they could have made it more simple by utilizing design patterns in them."
1,The changes they proposed seem to resolve all the issues listed by the problem statement. But they lacked diagrams of their ideas or UML diagrams to explain their ideas more.
1,They did mention a test plan which explains what are they going to test in future but have not worked on the code but it is understandable given the time.
0,I was able to find a lot of visual aids added to their document compared to their previous submission. I think they did work on the reviews they got for first submission. I think the diagrams they have now should be enough to explain their problem statement and its solutions.
0,"They tried their best to keep the design as simple as they can. I think as far as what they were able to do till now, it is pretty straight forward and easy to understand."
0,Their design seems to be appropriately sound. It does follow appropriate principles and patterns.
0,They have good explanations for all the tasks they need to achieve and the solutions for them. They gave more specific details for this submission by including the file names and the methods they are going to change.
1,"Yes, the team does include a test plan, however, I found it to be shallow. The team has not specified which files they are going to test, and they have not stated the Rails framework they are going to use to test their implementation. Overall, I found the test plan to be lacking and should be explained in more detail."
1,"I found the visualizations to be decent. However, I would still have liked to see a use case diagram, or can E/R diagram or a UML diagram or an application flow diagram. The provided illustrations, however, provide information for me to understand what the team is trying to achieve here."
0,"As far as I can see from the document, the team's design suggests that they will try to modify the least number of files possible for their implementation which is good for the purpose of not breaking existing code."
0,The team does a good job of explaining what are the problems in the current implementation and how they want to fix them. This is supported by good illustrations which helped me in understanding their design choices.
1,"Scope of Improvement:
The team has correctly mentioned some of the important edge cases. But I think adding the exact impacted files would have been more useful for the reader. Addition of impacted files helps to understand the exact test cases needs to modify. It also explains where new tests should be added. This is something I missed in the document."
1,"Suggestion:
Team has added screenshots which have now added more clarity to the design document. The screenshots were missing in the first round review.
The team could use UML diagrams which will put the functionality with better representation. Team could add Use-Case or Sequence diagram to elaborate on the features/future implementation."
0,"Good Work:
Team has designed the new functionality properly. The proposed implementation looks nice, understandable and robust. The modularization of the feature will help the team once the team has started its implementation."
0,"Good Work:
Team has implemented the suggestions given in the previous round. They have added screenshots which are helping reader to understand functionality quickly. Also, team has worked on mentioning ""how"" part which was missing in the first draft. Great work post first review."
0,"Great work:
Team has mentioned all the proposed changes in a simple straight-forward way. I really like the construction of the document - Task, Problem, Solution with the accompanying screenshot. This really helps reader to understand the proposed change easily."
0,"Yes, the team has added few ways in which tests can be carried out."
0,"Yes, the team has added diagrams wherever necessary and it's easy to follow."
0,The design seems understandable because of the way they have explained all the problems clearly.
1,"Yes, the team has written all the design problems and the solutions they're going to follow to fix these problems. However, they haven't added much about the patterns or principles that they're using. I suggest they add a bit about that to make their page complete."
0,"Yes, the team has done a good job in explaining all the problem statements and I like the way they've addressed each problem which makes it easier for the reviewers to get an understanding of their project."
1,"The team has included a test plan but the test plan looks very minimal, the team can extend it by including more test scenarios which add onto their document making it easy for the reader."
1,"I found the test plan to be inadequate as the plan includes statements which just describes ""what"" will be tested. A test plan would have been complete if the team had included ""what"" and ""how"" a functionality will be tested.
for example ""The score for the review should not change the score calculated from student reviews.""
The above statement does not explain what all things will be tested to verify the above-mentioned functionality."
0,"Yes, the team has provided a good visualization to describe the changes made to the system.
I liked the way the team provided the ""current view"" and ""revised review"" for each task as it clearly explains what changes would be done in that particular task."
1,"yes, the design does look simple (for the part where changes are clearly stated).
For some part, I am not able to determine the complexity associated with the design.
For example  ""Modifications will be needed to the files associated with the View Scores view. "". A reviewer won't be able to comment on the complexity of the design unless he/she knows what modifications the team is trying to implement."
1,"I liked the way the team divided the functionality and provided separate design for each task (makes easy for the reviewer to understand the design).
The design for task 3 could have been improved. I am not sure about this but instead of creating a new table to track the review_id numbers that are associated with instructor reviews an indicator (new column) in existing response could have been added.
The design would have been complete if the team would have mentioned the design principle/pattern used by them."
1,You should mention that you will test your controllers using RSpec instead of just manually testing the view.
0,Strong use of visuals to understand what the new pages will look like.
0,"The design appears to be as simple as possible, good job."
0,"Yes, the design makes sense."
0,The authors explained the changes well.
1,The team did include the test plan which is rough. Some details could be added giving few scenarios.
1,The team did not insert class diagram but did include before and after pictures of the existing system and the features they are planning to implement. I suggest the team to add UML diagram or ER diagram which will enable the user to understand which files are modified.
0,"It is clear and to the point. As said above, the team described tasks to be performed and their respective solutions. Images are used to aid the user's understanding."
0,"Yes, the design appears to be sound and to follow appropriate principles and patterns. I liked the way they structured the document i.e Task problems are stated and solutions are discussed respectively."
1,"On the whole, it is good. But more information could be added."
1,Adding some UML diagrams would have made the document even better. But the current explanation was enough for me to understand their project
1,I could not find any 'design' as such. They did provide solutions to the various tasks but I could not see anything about the patterns.
1,"I found the explanation to be clear and to the point. However, they might be a little inadequate. Maybe, more information about the existing work can be given"
0,All the tasks to be done are mentioned as per the google doc.
1,Did not find any information under test plan
1,Apart from any pictorial representation and some other stuff they have prepared a good design document. I think they could have given more information on how they will implement the functionalities. Like some design strategies they will use to implement this.
0,They have incorporated all the functionalites that are to be implemented for the project that is allowing an instructor to give reviews just like other students. They have splitup this as 4 tasks and with an optional 5th task which will show whether the review is given by an instructor or a student.
0,They have properly provided information on which are the problem statements and have provided solutions for each of those problem statements. For example for the problem statement the instructor should be able to do a review they have given proper solution which is to find the code that validates the TA as a participant. They have properly explained the project and it is easy to understand what they are going to do.
1,I couldn't find any UML or flow diagrams in the design document. I think they could have added a flow chart which will depict how they can categorize a student and an instructor doing  a review and a UML diagram depicting the functions that they need to implement.
1,"They have included the problem statement explaining what they propose to change.
The tasks are mentioned what they propose to change.However there is no explanation about why and how they are going to do it.
Th design document does not have any section explaining their design methodology."
1,"The have mentioned about the problems they need to address but the solutions are not explanatory.Most of them are incomplete.They need to find out what and where they are going to make changes.
Explanation could have been a lot better."
1,"They have not really explained about how they are going to change the design and how will they add the required functionality.
Explanation about the solution for each problem should be found out and explained here."
1,"There are no UML diagram or chart explaining their project and their proposed design.
Some sort of pictorial representation or screenshots about their proposed design should be included."
1,"The problems are mentioned but the solutions are not enough and somewhat incomplete.
A lot of explanatory material regarding the existing functionality,proposed changes and the test plan can be added for the reader to understand how the project is trying to solve the problem given."
1,The design doc need lot of work. They should provide more details as to how they are going to implement the whole design. As of now they have only the work that has to be done in the doc. But Im sure they will add the details in the upcoming submissions.
1,The design document talks about what work has to be done. They just mention the tasks at hand. There are no details about how the authors are going to proceed with the implementation of the project. The design seems very abstract as of now and I feel author have to give more information as to how to proceed with the project.
1,"The authors have given just a brief idea of what they are going to implement. I would like to see more details. For example in the place where they have mentioned that instructor should be able to review any team that has submitted the assignment, they could have detailed more on which files they will be working on, what UI they will be trying to attain for implementing this function and so on."
1,There are no proper design solutions proposed by the authors they have just mentioned what the work to be done is. The implementation idea is still now written so Im not able to comment on how they are going to implement the project.
1,"The authors have not used any visual aid to represent their solution, I would highly recommend them to design a UML diagram so that the reader would be able to figure out what they are doing. They could have also mentioned details about how they plan to design the UI which would have been interesting to see."
1,They should include design implementation and testing plan which is not complete according to me. May be once they start coding they can update the wiki page in parallel.
1,I like the way they have identified the problem areas that are pertinent to their project. I was expecting a picture to describe how would the problems when solved would culminate to the final aim of the project. The picture would better give an idea to the reviewer about what exactly is going on the implementer's mind.
1,"The solution part is somehow vague and doesn't really describe their approach to solve the problems or rather what their implementation would be. Like mentioned above, a picture is worth a thousand words. Even a handwritten diagram would have helped here."
1,"I don't really see an implementation design in the document. The solutions mentioned just speaks about an overview of what needs to be done. I think they need to dig a little deep in to the code to know where all they need to make code changes , or add files if any or make any schema related changes."
1,Their solution lags UML diagram or just a simple flow which would better explain what is the intention of the implementer. Here it is very difficult to get the picture of what the implementer is going to code.
1,"The document needs to have proposed changes, files identified, test plan and UML diagrams."
1,"Test plan, UML diagrams nothing was mentioned."
1,I couldn't find any changes proposed only the tasks which need to be done.
1,None of the points are covered by the author.
1,No Visual aids found.
1,"The design document was incomplete in a few places(eg: solution 2), no diagrams were included. And solution was mostly in one line which was not all that helpful."
1,"Most of the current design , its new requirements and their design to rectify this issue was written in the doc, but some of them were incomplete like problem 2 solution etc."
1,The explanations only had one line in the documentation some of them was even incomplete. There was no diagrams or screenshots for more comprehension. Some solutions was t be put up later as well.
1,The solutions werent that detailed they mostly comprised of only one line and/or incomplete.   There was no diagrams or screenshots for more comprehension. Some solutions was t be put up later as well. They could expand more on their implementation.
1,No diagrams or visual aids were used. They could have been included to increase understandability.
1,They have not provided any diagrams or mock ups of screens or tables for the help of the readers.
1,They have not proposed any methods to how they are going to achieve their objectives.
1,Their problem statements are very clear but they have not given any solutions to those problems.
1,Their design does not incorporate all the required functionalities. They have mentioned all the tasks that need to be completed but have not implemented anything yet.
1,Their design doc is pretty incomplete and they have not mentioned solutions to their problems.
1,"I did not find any useful visual aids. I suggest that the team include some diagrams in the code to improve their documentation. Some of them could include a use case diagram, a UML diagram, a workflow diagram, etc."
1,"According to the documentation:

I could not find any plan to add methods to any specific class.
I cannot comment on the design since there is too less information to find if their code feels ""smelly"".
I did not find any instance of complicated designs.
I do not think that the proposed changes, would, in any way, increase the response time of the system.
I firmly believe that more effort should be put into the design of this project."
1,I found the explanations to be lacking and I could not find the use of any significant strategies on the part of the author as to how they are going to implement their changes in the code.
1,"The document fails to demonstrate any significant design decisions. It instead, just lists the list the tasks and their proposed solutions."
1,"The document lacks many points:

The project purpose is not stated.
The project design has many flaws. Most of the topics in the document are placeholders rather than actual research into the code and how the components of the system interact with each other.
The testing plan is missing.
There are no visual aids
The proposed changes are inadequate in the explanations."
1,"Scope of Improvement:
 
The design document does not cover any diagram or flow. The project is straightforward to understand. But team could show existing flow or next flow via UML diagrams. This is something team could really add up to the document."
1,"Scope of Improvement:
Though the team has done a great job in figuring out ""What to do"", the design document does not cover much ""How to do"" part. It would have been better if the team could have included what exactly technical changes they are going the make. team could have include any technical research done regarding the project."
0,"Good Work:
The design looks good and capable to solve the existing problem and challenge. I really like the distribution of work in terms of tasks. Its always better when you divide a feature into tasks and then start working on it. In this way, you are not stuck and also work can be completed in lesser time."
1,"Suggestion:
Team could add the diagrams and flows in the document which will help reader to understand the existing functionality and suggested changes quickly.
Team could work on elaborating ""How"" part? (meaning how actually team is going to complete all tasks)"
1,Nothing much regarding the design plan could be made from the document.
1,"The solutions have been posted for each and every problem, but I feel they could have explained more about each solution and their plan of implementing it."
0,"Yes, the design incorporates all of the functionalities that are required."
1,The team has not included any diagrams in the design document and it makes it harder for the reader to understand what the team is trying to convey in the design document. Including a UML diagram would be a good update the team can work on.
1,"The design seems to be incomplete and the team should make sure they try to improve it. The new designs need detailed explanations on the implementation part. Also, there could be some gems that could simplify the process."
1,The team has mentioned good changes to the design but there could be more detailed explanations of the same. the team could include diagrams to explain what they want to convey.
1,The design is not complete and the team has to work more on the document as well as it seems has a lot of scope for improvement.
1,"There is a lot of scope to improve the document, wrt to functionalities, explanations and diagrams, test plan, all these areas have to be updated by the team in their next submission."
1,"The team has done a good job in specifying the ""instructor icon ""  that would be used to indicate an instructor review as it clearly explains what is expected.
Apart from this, the team did not utilize any other visual aids to help the user to understand the project.  
I would suggest the team to use the visual aids from the writeups of the previous teams that worked on the same project in the past as it makes the functionality more clearer."
1,"I am unable to comment on the above-mentioned points as the team did not specify the changes that would be made to fix the issues. The solution mentioned are very much generalized and does not provide content which can be reviewed.
I would suggest the team to put some more effort in clearly explaining the approach and changes that would be implemented."
1,"The team has divided the functionality into various tasks and each task has a ""solution"" section which would indicate the changes that team would be implementing to fix the functionalities.
I found the explanation for the solution to be inadequate because the team did not mention the code that would be changed.
for e.g. ""Find another way of indicating the review is an instructor review."" : This statement doesn't provide sufficient information.
I would suggest the team to include all the codes changes with adequate comments explaining the reason behind each changes."
1,"The team has done a good job in dividing the functionality into various tasks but as per the requirement description ""This project was done last spring, but was not accepted because the code was too messy and added many special cases to various classes that would cause confusion later on"".
The major task of the team would be to fix all the issues mentioned in the ""comments"" sections and it would have been a good design if the team would have touched all the issues mentioned in the comments since that would the major part of the implementation."
1,"The team has mentioned the project purpose but I found it to be quite inadequate because it just explains the functionality. The main purpose of the project is to fix all the code issues which were identified on the code changes done by the previous teams.
The team needs to work on the project design as the current design mentioned in the writeups lacks in specifying the details. Also, the team needs to specify the design details to fix all the issues mentioned in the comments section.
As per the requirement document, most of the testing is already been done by the previous teams but it would be great if the team can utilize the same testing plan in the current writeup to verify all the changes."
1,"Again, there is no specific design proposed."
1,There is no explicit design proposed.
1,"Expanding on your verbal explanations and adding visual aids would be helpful!
No testing plan stated."
1,"No visual aids are provided in the design document, so I can hardly comment about it."
1,As said earlier. I cannot comment on this section as I don't find the design document to be complete. I would like the team to update it in a detailed way.
1,I have checked the changes the authors have proposed. The design document hardly contains any information to go through and understand how the task is been accomplished. Only the problem statement is understood along with some info about which files have to be changed.
1,I have seen the design document of the team that is given the task of adding a review mechanism for the instructor in Expertiza. I see that that team just stated the problem and did not complete the design document as mentioned.
1,A lot needs to be included in the design documentation. Test plan and many other sections are listed but no information provided under it.
1,"No, the pull request isn't merged. The build did not pass in Travis CI. Looks like the Travis tests have failed and the team was asked to fix them."
1,"The Travis CI build failed due to two issues. However, from my own experience, I've seen the Travis CI build crash somewhere that was nowhere related to the functionality I touched... so I'm not sure both of these failures are this team's fault."
1,"The pull request was made before the first deadline. Currently there is a conversation discussing issues with the code. As of now, the Travis Cl build did not pass."
1,"After reviewing the pull request, I can see that the build did NOT pass in Travis Ci. Some issues which are to be resolved:
In the following lines of code, the Travis builds fail.
assignment_submission_spec.rb:71
review_assignment_spec.rb:36
sign_up_sheet_controller_spec.rb:344
topic_suggestion_spec.rb:55
sign_up_sheet_controller_spec.rb:79"
1,"Travis did not pass, but there are no conflicts to resolve."
1,No Travis CI did not pass. The controller and feature sections are failing. The controller is failing due to  Missing template sign_up_sheet/create. The feature section is failing due to each not being defined in child_nodes.
1,"I do NOT believe that the code is ready to be deployed into the production server. My concerns in this include some of their design choices and their failing Travis CI builds. However, I think that there is not need to start from scratch. Some of their implementations are actually good and require some more testing."
1,"It would be hard to make an exact determination if the is ready to be placed on the production server since there is not a UI to experiment with. However, from the information from the automated tests, Travis CI, I would say there are still some issues to be resolved before deploying."
0,"The write up is very good. It's very detailed and nicely organized. I like the consistency, how each problem they fixed is laid out and listed in the exact same format."
1,"Their writeup is decent and they do have some good implementations in their fixes. Using helper functions where the code was not DRY before was a good strategy to make it DRY. However, I did find some objections to their choices:
1. The team showed what solutions they implemented to fix the bugs in the code, however, they did not show a ""before and after scenario"" to argue why their code implementation is better now. Some of their code snippets are confusing as to what they are trying to accomplish in that code. 
2. They renamed ad_info to get_ad. However, I believe a more intuitive way to rename this would be get_ad_info, especially if we are not trying to use every ""ad"" information here."
1,"The writeup still references changes in application behavior as being ""refactoring"", which is not accurate.  The test section does not provide any testing information, which should be present given that the behavior of the application has actually changed."
0,The write-up thoroughly outlined the problems the team found and included the code they used to resolved the issues.
1,Unable to verify things work as intended. The group didn't provide a deployment of their code or a video showing their code being run.
1,"The team has not hosted their implementation on either VCL or Heroku and I cannot check the system operations from the UI. I do believe that some of their fixes were good and they have implemented them well. However, I cannot check them since there is no evidence that there tests cases are passing and even the Travis CI build fails. However, I would be more than ready to change my review about this if I am able to see this implementation hosted somewhere."
1,"No instructions given in test section on how to test the UI.  Travis build does not pass, including failures in the tests for the controller that was modified."
1,I don't see a link to where the team deployed the project. I am unable to verify the UI.
1,"The team did not provide any screenshots in their Testing part of the document. They state that ""As the project involved only refactoring variables and method names, only build tests and already existing unit tests were performed."" Now, since the Travis CI build is failing, I cannot actually check if the test coverage has increased. I believe that the testing should be done more thoroughly. Some evidence of testing performed should have been provided in the document."
1,Not a lot of information about tests could be gathered from the wiki page. The pull request page shows that the Travis Cl did not pass and the integration and feature tests seem to have issues that have to be addressed.
1,"No tests were added and travis did not pass.  Since new methods were introduced, corresponding test cases should have been added."
1,It does not appear the team added in additional RSpec within the spec folder.
0,"Yes, one commit was done during the second round."
0,"Yes, there were a few commits."
1,"I found the code to fairly well written. I dispute some of their naming choices and the lack of testing documentation makes it harder to review. Some design choices, on the other hand, like the use of helper methods, are good. I believe that they tried to make their code as DRY as possible. I still believe some of the if-else statements in the controllers should be entirely moved to a helper function."
1,"The new code does seem to be an improvement over the old code in terms of style, but with changes in behavior and failing test cases, it's clearly does not work as required by the project."
0,Code looks clean and readable
0,It follows good ruby and rails coding practices
0,The visual aids are quite helpful and useful for understanding what they plan to do.
1,"Use Case Diagram is very high-level diagram and very helpful in understanding of the roles of each user and how rubric changes can be done (by instructor) and regulated by affecting each relevant user (who has already start review). Data Flow Diagram on the other hand is a little confusing to me and I did not follow it right away. After I thought it through and spend some time on it, it was clear. Therefore, it whether should be improved or followed by detail interpretation of the diagram. Also I think it would be good idea to add another high-level workflow diagram to indicate possible if/else conditions for regulating rubric changes instead of describing it within a text in the ""Proposed Code Changes"" section. This would really facilitate with high-level design understanding of the problem prior providing reader with UML diagram.
Unfortunately UML diagram is missing and I think it is required for this project considering the changes that needs to be done. Please create UML diagram and include it along with Use case, and Data Flow diagrams.Along with Use Case diagram may be add a screenshot on the page where and how instructor may change a rubric while assignment is in the progress. It is not necessary, but again this would give extra information that can be helpful to someone. Hence, after analyzing ""Design Diagrams"" sections, I can conclude on the following points:
1) All provided diagrams (Use Case Diagram and Data Flow Diagram) are helpful and necessary for project understanding. Although Data Flow Diagram is a little hard to follow. However, there are some diagrams that are missing: UML and workflow (optional) diagrams. Please, whether re-work Data Flow Diagram or provide some interpretation on it.2) I'm not sure about Data Flow Diagram. I do not think it follows standard diagram conventions (all of the lines have single headed arrows, not sure this is the case for Flow Diagram).3) Use case diagram is high-level, but it provides required and necessary information about the project to the user. I would also add another high-level workflow diagram for better project understanding."
0,There are 3 visual aids in the wiki which aid understanding.
1,"Nice use of visual aids. Although one thing I found a bit confusing were the unnecessary two way arrows in the data flow diagram in some places. For example the two way arrow between ""Delete review"" and ""Send email to affected user"" should just be one way."
1,"Code changes proposed by the team in the document are appropriate and follow good RoR coding practice. However, I would like to point out few minor things in the code that can be potentially risky if not handled correctly and some other general concerns unrelated to the execution of the program can be slightly be improved.
a) Variable name num_of_existed_questions can be changed into something more meaningful. For example, existed_questions_count or something similar. In general, try to avoid num_ prefix to any variable. b) The case when questionnaire_id is nil is not handled properly in the add_new_questions method. Make sure your code handles nil cases appropriately. For example, consider the following code changes:def add_new_questions  questionnaire_id = params[:id] unless params[:id].nil?  existed_questions_count = Questionnaire.find(questionnaire_id).questions.size unless questionnaire_id.nil?  # Handle situation appropriately if questionnaire_id is nil.
I do not see any other flaws weaknesses, or vulnerabilities in implementation. After reviewing design and proposed code changes, I can conclude the following:
1) both add_new_questions() and update() method are planned to be added and updated respectively in the questionnare_controller.rb file (QuestionnareController class). This is correct place (class) where methods must be added and updated. The rest of implementation is a matter of finding correct leverages/methods for performing the res of functionality (e.g., sending email notification and deleting reviews as necessary per project description).2) New design may potentially introduce bugs in case when questionnaire_id is nil and nil is not handled properly in the code. However, I already mentioned this above and proposed solution to it. So, there should not be any code ""smells"" introduced within proposed changes.3) No, on opposite, the new design is very easy to understand and follow. I believe that team has chosen the most appropriate design for this project. There is nothing complex about it. Good work!4) New design may potentially increase response time of the system. However, this is not due to complexity of algorithm or inappropriate design. If this is going to be the case and response time of the system is increase when rubric is changed while assignment is in progress, it is due to the fact that now system must do some extra work (determining if rubric is replaced or the items/questions are changed, retrieve previously done reviews and email these previously done reviews to reviewers). Unless all these tasks are handled by a separate thread, it is possible that these changes may potentially increase response time (which should be very negligible if code is implemented correctly).5) I think design document looks very good, it covers enough detailed information and includes all necessary information. Of course, it can be expended even more, but it does not need to. It only misses workflow diagram as I described above."
0,The design appears to be solid and covers all the requirements.
0,They explained their goals and what happens now and what they hope to achomplish.
1,"Very clear and adequate explanation. I really like that some effort was made to think it through the problem, find appropriate solution that your team proposed, and break down solution into two different implementation phases with concrete examples (code snippets). Very well done.
The only confusing part of the entire design to me was Data Flow Diagram. If you do not want to change anything about that digram please at least provide some written explanations on how this diagram can be interpreted (provide some bullet points while walking through the diagram). I had to spend sometime until I understood it. However, if apposite explanation was given, it would be a lot easier to follow it.
Also please back up your design with a high-level workflow diagram to indicate possible if/else conditions for regulating rubric changes. This is really required to understand high level design prior providing reader with details implementation.
Furthermore, I noticed that not much was added into the Test Plan section. Please make sure to elaborate more on this section and test your changes appropriately with the following steps:
1. Code inspection2. Pass existing Rspec tests3. Write additional Rspec tests to test your feature4. Run some UI tests
I have no further concerns with other proposed changes made it by the team. Very nice work!"
1,There's a section titled Proposed Code Changes that explains in a paragraph what the team plans to do. Only suggestion I have is to bullet the action items taken instead of embedding them in the paragraph.
1,"The write up is detailed and the explanation of the proposed task is very clear. My one comment would be that while there's a description of a minor edit, there's no explanation of what would happen in the case of a minor change in the wording of the question. Is it handled in this project?  If it doesn't come under the scope of this project, please add a line stating that."
1,"Yes, the design incorporates all of the functionality required for this Project (to regulate changing of rubrics while projects are in progress). Even more, the document breaks down required functionality into next level of granularity by identifying 2 design and implementation phases (""Identification of edit"" and ""Email Notification"") with detailed approach of each phase (including code snippet). Great work bu the team! Very well-written document that has all necessary information about the features the team is implementing. The document reflects precisely on what needs to be done and furthermore, provides explicit details on how it needs to be done (by obviously having it thoroughly thought).
The only minor improvement can be done over Data Flow Diagram. I found that diagram a little confusing and I had to sit on it for 10 minutes or so until I understood it (still I'm not really sure if I understood it correctly). I think it would be very good idea to include workflow diagram to reflect two possible case scenarios (if/else): i) If there is a change in the number of questions, and ii) if there is no changes in the number of questions (also splits into two cases: whether if there was really a change or there has been equal number of additions and deletions). It is not required, but it would be very helpful and you would not to write all this information explicitly. And this would also help to understand Data Flow Diagram.
Since all required functionalities are incorporated into the design, therefore, I can conclude that the team did not miss anything importation and completed an excellent job on providing details for each functionality to be implemented."
0,Thorough explanation of task and changes proposed.
0,The design doc covers all of the functionalities mentioned in the requirements document
0,They discussed all the requested topics.
1,"Some important information is missing and needs to be added into the Design document. Although all the key parts of the design are present in the document.The ""Design Diagrams"" section is missing UML diagram and Data Flow Diagram is a little unclear to me (consider reworking it or adding interpretation of the diagram as a text below). Also consider adding workflow diagram to indicate possible if/else conditions for regulating rubric changes instead of describing it within a text in the ""Proposed Code Changes"" section.The rest of the project design section is clear and complete.
Project purpose stated at the beginning of the document is very clear, concise, and complete. No issues found there.
""Test Plan"" section is incomplete (not because information was not added, but because it does not cover required testing strategies). Please consider adding at least two sections within ""Test Plan"": ""Rspec Testing"" and ""UI Testing"". Also reflect on code inspection and how (if) it was done.
Include missing sections, such as ""Conclusion"", ""Team members"", ""References"" and etc.
Overall design this is very good design document! Great job!"
1,I haven't understood the test plan stated in the design document. The team says to run the code using one line of syntax. Could the team elaborate on this.
1,"Apart from code snippets, the team did not include any other visual diagrams. Try adding any other relevant diagrams."
1,The design layout is good but I think the team have added too much code in the project. Try to explain important lines in code either by highlighting it.
0,"The design appears to be sound and it follows appropriate principles and patterns. The document structure is pretty impressive i.e. layout of problem statement, changes to be made, test plan."
1,"The team doesn't seem to have added much information about the final project. They are still lacking all the details mentioned in my previous review, They could have at-least added a few diagrams or flowcharts to state their problems more coherently."
1,They have included the tests mentioned in the default servo. Im not sure if they can write separate functions to test their implementation but it would be help if the authors clarified on the same and gave us more information on how to test their functionality that has been implemented.
1,There are no visualizations for the final OSS Project. They can draw a flowchart alone to make it more sound.
0,There are no tests necessary for this project since it is a mozilla project. But they do have given instructions on how to run/test the project.
0,"They have explained what they are going to do but more detailed explanation could have been given for how they are going to do it. They have explained the change they are going to make , that is conversion of type from enum to trait."
0,"Yes, the design appears to be straightforward and easy to implement."
0,"Yes, they have explained in detail the work that they proposed and how would the implement it as they are working on it since the Project 3 so, the build should pass and the explanation is given in detail."
0,"Yes there is a test plan but as they have mentioned that the project does not have a direct output, they emphasize more on the build"
0,The details pertaining to the project are well explained.
0,"yes, they have adequately explained the changes made to the system in detail"
1,"They did not include any diagrams. Although it is a Mozilla project, they still could have included a diagram or two that shows their implementation process."
1,"They did not do a great job of simplifying their design in the ""Implementation to be done for Final OSS Project"" section. They included code samples, but no real simplification."
0,They did a good job of explaining the changes they need to make as well as providing code samples.
0,"From what I could gather in the design doc, it seems that the team has a good understanding of how they will go about refactoring bluetooth support, and the method explained seems as simple as possible."
1,"The implementation section is really short, and doesn't go into enough detail regarding how exactly changes will be made. The rough idea for discovery_session.rs isn't really explained, just code is given."
1,It would be helpful if you could provide any kind of visualizations
1,The explanation is good but can be improved as in more justification for the change.
1,"No diagrams are included and it is hard to visualize what the team has worked in the project. The team should include UML diagram, use case diagram to make it easy for the reader."
1,The code snippets seem to be complex and the team should have divided the code into more sections and further explanations should have been included.
0,"The design includes the test plan. They said if the refactor is pass, the test will pass, so they will test the functionalities."
1,They don't have any visualization on this document.
0,"Yes, the design is easy to read and understand, they could be simpler but so far is good."
0,"The design appears to be sound, followed appropriate principles and used the adapter pattern."
0,"Yes, they have described the changes they have made on the system by given the files of where they changed and the new idea of the new project."
1,"Great job explaining test running process. However, Test plan is not explained well and I suggest explaining what files you intend to change and what new tests need to be added for refactoring."
1,"There is no specific test plan established w.r.t to the project. Those testing section does not include additional details about what they are testing. Perhaps say ""Use ./mach test-wpt tests/wpt/mozilla/tests/bluetooth/ to run the existing bluetooth automated tests."" what does those test and what cases are they talking about"
1,I dont see any UML. Maybe they could have just added a chart to show function and class call across the files they are talking about.
1,This is a Mozilla project so I am not able to comment on a few questions. But the design proposed right now is just a small snippet which mirrors the implementation of the adapter.rs file. I was not able to see any specifics as to what the function does or what the intermediary calls do. They could have elucidated more on the same.
1,They have just proposed the implementation of a new feature BluetoothDiscoverySession trait. I think it is very similar to the work they should have completed for the 1st project.  I still feel that lot of work is left in the initial steps that were given for the first project. They could have also put in information about how they plan to solve the design for the initial steps. Are they going to stop that and pursue the final project without finishing the same? I was not clear about that face.
1,The team has added some information as to how the BluetoothDiscoverySession has to be implemented. They have just written a snippet of how the code should look like but have not given any information as to what function is to be performed. More details about BluetoothDiscoverySession could have made it easier to understand.
1,There was not much information provided by the group as to how the functionality of the trait of BluetoothDiscoverySession was to be implemented. They have also not addressed the problems with the implementation of the adapter.rs file and I'm confused as to how they are going to approach with BluetoothDiscoverySession before finishing adap
1,I couldnt find any UML diagrams and I think  they could included some flow diagrams denoting how the flow happens in their project .  They could have also added some images on how servo's design works.
1,As I said earlier more information could have been provided on how they are going to modify servo's integration to use this new trait and more explanation could have been provided in the implementation section where i had some tough time in understanding their design approach regarding the discovery_session.rs approach.
1,"the writers proposed to implement and modify the two files 
In servo repository,

servo/components/bluetooth/lib.rs

In devices repository,

devices/src/bluetooth.rs

1) they are just modifying the files so it is in  the correct class
2) no the improvements is just modifying the existing code
3) the new code has not been implemented nor tested so hopefully it might be the correct way to implement the modifications
4) the new design if works may or may not increase the time of the system
5) the design is very well explained and looks simple"
0,The requirements are well explained
1,I do not see any comments about the design but their idea is explained
1,UML diagrams and screencasts are needed
1,"There were no diagrams or visual aids. So, I suggest adding some."
0,They did a great job of explaining their ideas and giving rough ideas of the code too. I don't think there are existing gems that could simplify them because I don't think the Rust language uses gems.
0,It looks like the design incorporates all the required functionality.
0,Explanations go into sufficient detail and are 'to-the-point'.
1,"They have given explanations for the 3rd OSS Project, but I don't see any adequate information about the 4th OSS project , they have only mentioned the tasks to be done. Could if they could delve into more details. For example more info on how implementing a trait for BluetoothDiscoverySession  going to be helpful?"
0,All appears to be good enough to cover the task
1,"There are no visual aids however, some refactoring steps for maintainability could be better explained using a flowchart or something else."
0,Good description in each part
0,It looks complete but addition of diagrams can make it easy to follow.
1,Found no visual aids. Hope the team includes some diagrams like UML in the document which makes it easy for the reader to follow with what is written.
0,The authors have clearly stated about the functions they want to implement their changes for. The design looks good and I don't think there are any gems that can simplify the process.
0,"After checking the changes authors have proposed, I felt authors have worked very well on the implementation and they came up with good improvements."
0,"Yes, the design incorporates all of the functionality required. The functionalities have been thoroughly explained in the wiki document."
0,"1. The authors didn't plan to add method to a wrong class.
2. I haven't see any code ""smelly "" so far.
3. The new design is good, not too complicated.
4. I can not analysis the new design may increase the response time of the sysyem with a big amount."
1,"The have propose a code base but however I dont understand what the code block in the code does.
Code walk through could be helpful
 
http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Spring_2019_-_M1902_Refactor_bluetooth_support_for_better_maintainability#Rough_idea_for_discovery_session.rs"
1,explanation are hard to follow. No preface about the issue proposed. I have no idea about BluetoothDiscoverySession either. So please spend some preface to explain and give the need for the project or an intro would be nice.
0,The design incorporated all of the functionality required. They has described the OOS project 3 and the final project.
1,They made some effort in writing about the issue and a proposed code structure however I cannot understand the project document in first place to rate the project.
1,The build passed on Travis CI however it failed in codeclimate and there are 19 issues.
1,"The code is well written and if it werent for the codeclimate bot issues, it would be easily merged. The code is dry and uses better syntax than previously (example using a dictionary). The authors have improved the code and the testing documentation accordingly."
1,"The code contains Code Climate issues (19) to fix so it is not ready to be merged. However, it is a good starting place for a future team to pick up."
1,"Yes, The Travis CI build passed. The codeclimate issues  do not appear very major to me. - things like extra trailing lines and few lines exceeding from the convention of 25 lines.
They are only related to a few duplicate code that are non-functional and do not disobey DRY principle."
1,"I feel the code is ready to be deployed with a little modification that will help in improving the codeclimate responses. 
There is no need to redo it from scratch. Others might feel that some more refactoring can be done. For example, the naming conventions are improved keeping one thing in mind, the common goals can be self understandable, and not clog the function names. There can be many other directions of improving the  naming conventions such as -
The 'get_link_updated_at' function name does not make much sense or give idea of whatt it does.  - it could be changed to -> 'get_last_modified_link'
Many variable names could be refactored as well, not qouting examples as there are many.
But how much ever the team has done, it is functional, tested, working and improving piece of code which I appreciate."
1,"Write-up looks good. They have explained why they have refactored, what they have refactored.
They could have included a portion on why they 'have not' refactored certain functions, like what they thought made it a good function or pattern for not changing the existing code/name. I hope I make sense.
They claim to use strategy pattern, but I am not sure how. It would have been better if they had given a bit of description on which of their code implements strategy pattern and how.
To make the entire document more succinct, they could have added some more explaination to their screenshots, though they are self-understandable, but might not be so for someone who does not want to delve very deep into their code or implementation."
0,They have stuck to best Ruby coding practices and added comments wherever necessary.
0,Yes. There were many commits to resolve the code climate issues that were generated by the previous build. Much efforts were taken to fix the code climate issues.
0,The pull request suggests that the Travis CI build passes.
0,Yes they have added test cases in the spec/helper folder and the test coverage has also increased.
0,Yes everything works as intended.
0,They have improved a lot from the previous time in the sense that they included the test plan section this time and showed the output of their manual testing and rspec testing they carried out. They have added a new rspec file to verify their end-to-end testing. They have also given examples of how they have refactored the code which summarizes almost everything.
0,Yes I believe so.
0,System works as intended from the UI.
0,"Coverage increased by at least 0.2%, newly added tests certainly added coverage to the assigned range of the project."
0,Build passed through Travis CI
0,"Comments were added more than sparingly, and were detailed in the writeup on the expertiza wiki. Long and ambiguous method names were also modified to method names that were shorter and made sense in the context of what the method was actually doing. Problems from the first round seem entirely fixed."
0,"Yes, there were many commits made after the 1st round submission. Even to the last day commits were made."
0,"Code was well written, without any bad naming formats or complicated functions. The author has written the code in a DRY format by following best coding practises."
1,"No, I do not like the changes made to ""create_report_table_header"" method. The partial created by the team is still appending html tags to a string and rendering it, making the partial useless. Partials should have html tags of their own. Then, the places where this method was called should be updated to call the partial instead. 
Apart from this, the other changes are nice and are ready to be merged. Good job with the rest of the project."
0,"Good job with the write-up. I like the way before and after sections are used. Easy to understand. Could have explained the ""Function placed in the view as partials"
1,The good news is test coverage has slightly increased. Bad news is that there are shallow tests. Fix this by writing relevant expectations (not static contents like html code).
1,No testing link provided. Team should have deployed in an vcl instance to allow testing of changes by the team even though this a refactoring project.
1,"Looking at the pull request, I see that the build passed in Travis CI. However, there are unnecessary rspec gem require. Suggestion: remove it as it is already included. The expertiza-bot also suggests to avoid shallow tests by writing relevant expectations (not static contents like html code)."
0,"Yes, All the Travis CI tests have been passed by the PR"
0,"Yes, There are multiple changes made by the team in the second round"
1,"There is no much UI changes in the project and even if any there is no video attached in the submission. However, there are couple of screenshots added in the wiki page that might depict the UI changes"
1,"Write up looks clean and neat. For most part, it is easy to understand and the properly placed. One of my concern from Round 1 review stays. This was corresponding to usage of Strategy Pattern. Where exactly is the team using it. Wiki mentions that ""Strategy Pattern was very helpful in adding functions to views as partials."" However, there is no mention how is this helpful"
0,"Yes, Looks like the code is in great state and ready to be deployed"
0,"Team has followed standard practices when making any code change. Team has added comments for many methods that can help the user to understand what each method does. Also, many method names have been shortened for better experience"
0,Everything seems to work properly. Good work.
0,The writeup is very well written. It covers everything and explains everything in a good way.
1,I think the project will need some modifications before deployed onto the production server. The are many code climate errors that need to be addressed.
0,"The test has been added by the team, and the coverage increased by 0.2%."
0,The build passed for the changes performed by the team.
0,The number of commits is the same as the first part.
0,The code is good. The thing I liked the most is the change from the case statements to the dictionary implementation. It was a very good addition.
1,"At first glance, the documentation was neat and appeared well-formed.  The team included several charts, graphs, and a few screenshots of their results.  The flow chart in the Implementation section explaining the layout of their project is excellent.  The team provided the code used to create checkboxes and the accompanying comments in the document provided good details on how the checkboxes were added to the tagging report table.  The second code snippet shows how the created tags can be exported to a table and a table of the results is also shown.  The document also includes a Test section, References, and the names of the people who contributed to the project.
However, the document was a little confusing in that is lacked clear details in certain sections and the document does not have a good layout.  Each subsection that explains the tasks to be performed should be grouped together.  For example, all of the code and screenshots related to the ""Add checkboxes"" directive should have been included in one section.  
While the test section does a good job of explaining the methodology behind how their code was tested, no test code or results were shown.  At the very least, the team could have provided some extra documentation on how to perform the test for their code.
In the middle of the document includes a Design section and a Screencast section that seems to be out of place.  The Design section would fit better just under the Problem Statement section; if it is even needed at all.  The screencast should be near the top of the document or included at the end of the document in the references.  Unfortunately, the video from the screencast did not load."
0,Writeup is fairly simple and to the point. I liked how they added a chart to show how their implementation would work theoretically.
0,The documentation is well written
1,"Team has discussed that they might not need any additional test cases. As the team is refactoring, they might need  more tests to be moved along, but this shouldn't affect the coverage in any way."
1,"They haven't write any test plan. But they said when they close to finish the project, they will complete the test plan."
0,There seem to be no tests required for this project.
1,"as they are just merging the two files and as the two files does has its independent test plans the team has planned to go with the previous files, although I feel that they should come up with custom tests as the new controller is modified and does need testing, and the previous tests would not cover completely."
0,"since it is a refactoring project, functionality should not be changed so as long as they pass the original test case, it should be fine."
1,"Yes, throughout the design doc they make sure, they pay heeds to testing. I am sure they will figure it out better after the completion of coding phase. 
They have figured what they need to test but haven't laid out the exact plan.
They need to come up with the exact RSpec test they will implement and also manual testing including the visuals would be a good addition."
1,The design does include a test plan section but more information can be provided regarding the structure of the test among others.
1,The team mentions they are rearranging code which does not require test modifications. My suggestion is to add a screen recording showing the tests passing after implementing changes.
1,"The team states their intention clearly but the test plan seems generic. There is no concrete plan of action. They have mentioned they do not foresee a test plan yet but they could have identified and list out the kind of testing that's being done e.g, feature testing, manual, etc"
1,"Team has added 2 diagrams to explain the movement of import/export functionality from ""QuestionnaireController"" to ""ImportFileController"". This adds to the visualizing the project. However, addition of few data control or data flow diagrams might have helped. And also UML diagram to show various controllers using ""ImportFileController"" would also help in better understanding"
1,They have some visualization diagrams. The diagrams are very simple which is easy to read and understand. They could have more complex diagram to help explain their design work.
1,"The two visual aids provided in the wiki page are not clearly labeled and appear to be created in a disorganized/haphazard manner. Moreover, no explanation has been provided for each diagram and thus makes it difficult to understand it further. I would suggest to label each type of diagram, whether it is a use case diagram or a data flow diagram."
0,they have added some graphs to show the relationship between variables/class
0,They included visualization after comments on the last doc review! It is informative and works.
0,Yes. Plenty of diagrams and pictures of code.
1,I have understood through the visual aids what function is controlled by the controllers . but it could have been labelled properly in a more professional way.
1,"The design appear is quite simple but not enough, they need more information on what they will change and how they make the changes. This will make the design more understandable."
1,Based only on the visual aids provided the design looks extremely simple although a further explanation on each visual aid would be more helpful.
1,"the does seem to be simple as the work is straight forward, and i feel that the design could be made more simpler or kept as it was and not combining the two controllers."
0,the design is not complicated and easy to understand
1,"The design appears to be straight forward. I don't think there is any other better way to generalize the functionality. The design explained very nicely as to what they will be removing and adding. 
The design could be explained in a more sophisticated manner after they have completed the coding by introducing the new exact routing process of controllers for each functionality. Right now, they only explain it for questionnaires_controller
More explanation of the code can be given, only diagrams won't suffice."
0,"Yes, the complexity of the solution is as simple as it could be."
0,Yes. The team had a bulleted list of tasked items to implement in the Proposed Imports Changes section.
1,"It does appear simple, but I feel the latter part of the document is too simple. It needs more work. The export changes can be explained better so as to know what is actually happening. They mentioned they have not done a deep dive on this functionality yet, but a very brief outline of the functionality or a diagram could have been done. Overall, good document though"
1,"The design appears to be sound, followed appropriate principles, give a very clear layout of what they are doing. However, they have a lot of details about what should be changed but they didn't tell too much about what they gonna changes."
1,"The design does appear to be sound as they have clearly explained and justified the changes that they would be making in their work the work proposed does follow the correct design principles although they have unnecessarily complicated things, they are combining the import_file controller and the questionnaire controller together."
0,"Yes, the design is following appropriate principles and well organized."
0,"The principle followed by the team is correct. They have figured the common controller and targetting the right helpers to modify the code. 
They seem to take proper support from helpers and models to DRY out the code and minimalistic routing of controllers."
0,The design seems well thought of.
0,Yes. Great content in the wiki page. I had no concerns
1,"Yes, the document is well designed but one suggestion is to not put screenshots of code. Our mentor has advised us to avoid this practice and instead , paste the few lines of code"
1,"Yes, The explanations are explained properly. There are different cases mentioned and how the team is trying to pull out all the import/export functionality into ""ImportFileController"". Adding few more details on how the team is handling export functionality would be a addon. As the team hasn't started working on the Export functionality yet, this is completly fine at this moment"
1,"The authors explained what should be changed and what has been done before, but didn't talk too much how they gonna change in the design. They need to put more details on what they gonna do on the project."
1,The authors have adequately explained the changes made to the system although a bit more explanation on the visual aids and their types would have been very helpful.
0,"Ye,s the authors had explained in details the change that they planned to work on."
1,"Yes, they have explained the existing problems and changes that they have already made and will be making all very clearly. 
Cutting 1 point because the team is yet to figure out some changes that need to be made. Here are few:
1. ImportFileHelper, the ImportTopicHelper, and the QuestionnaireHelper helper functions need to have a common implementation, they have not given a plan for the same. 
2. There seem to be a change in view - I do not completely understand what they meant by that and why they want it changed (point 4 in the section ""What needs to be changed"")"
0,Yes. The explaination seems to be highly detailed and well written.
0,I had no questions or concerns.
1,"Yes, they have adequately explained what they intend to do. But the latter part of the document need a little work. Perhaps, that could be done after they finished the project"
1,There are no diagrams added in the wiki page.
1,"They don't have any visual aid like UML diagrams, mockups of screens or tables."
1,No visual aids
1,no visual aids are given in the wiki
1,no visual aids are post here and it's better to add them later.
1,"I could not find any evidence of visual tools, it would be great if the team could add some. Probably they are yet to figure it out.
Some basic examples of visual tools that would be helpful for readers are:
1) Basic structure of existing UI, and new UI if there would be any change (From reading their doc, it didn't seem like there would be a change in UI)
2) A flow diagram of MVC modules that would be called and used in order to implement the features.
3) A screenshot or screencast of the implementation in action"
1,"There are no visual aids. Also, the link published on which Expertiza is supposed to be running does not open."
1,Slightly lower rating here since there were no diagrams in the wiki. But I'm not sure that was an explicit expectation prior to writing the wiki.
1,There are no visual aids. It's suggested that there be some UML diagrams explaining the flow
0,"Yes, team plans to add ""Add ability for ImportFileController to import Question objects for Questionnaires. (Add question view to views/import_file, introduce Question logic into the controller.)"".
New code is planned to "" better use of polymorphism and eliminate large and unnecessary if/else blocks"" - so its clear that this code can't be smelly
Code changes are mostly into deleting functions, not sure a gem can use this"
1,"1. The authors don't plan to add method to a wrong class.
2. I don't find any design may potentially make the code smelly.
3. The new designs haven't start very much, so i cannot say the design look complicated or simplified.
4. The new design didn't show how they gonna effect the response time"
0,Appears to be sound
0,"the authors propose to implement the changes as and which are required, the classes are correct and the controllers are also in accordance to the changes proposed"
1,Their designs are not listed in details and may need to add more details about it.
1,"The new design has a good motive. The team aims to correct the right things. It would be better if they mention the code blocks where they can change to make it more DRY and what are the if-else blocks that they targetted. Basically the doc needs to delve into the code and walk the reader through the actual changes. that has been/will be made.
The import export gem of active records can be used and the though some helpers are deleated, a helper for routing different controller in different way (polymorphism that they planned on) would probably require them to use a helper which they have not mentioned."
0,Design as far as I can think of works.
0,I see no issues.
1,There are noo designs proposed but there are adequate descriptions of what they aim to do
0,They do have a test plan and know which tests are going to be affected by their changes when they make their new controller.
0,Yes. They have worked upon the testing quite thoroughly this time and explained in detail their plan of testing every corner cases.
0,"The test plan is very thorough, some example role mocking ideas are included, and lots of test conditions are mentioned."
0,The design document included a test plan. They have implemented original rspec test code along with some new tests.  The team also implemented a UI test to make sure all the features worked well. The test results are also given under this field. The code snippet of the test case is posted in the document as well.
1,"The team did include a test plan along with some test code in their document.  In the document, the team included a list of methods to be tested.  However, the team does not thoroughly explain their test scenarios and expected outcomes."
0,The test plan is foolproof. They have not only figured the test cases required for the current implementation but also for the previous implementation.
0,"The team has mentioned their strategy about how they are going to test. In writing it looks good as they have mentioned all the possible files that going to be affected, new code that will be added and also the UI in their Tests."
0,"Yes, the team has included activity and Use case diagrams which helps a reader to understand what the team was working on."
1,"The visualization makes their requirement but never talks about the overall information flow between the files and services. Try adding more details on information flow between clients and the functions. Say, github API calls are totally missing in your visualization. Depicting the functions in your requirements is not a showcase for the UML"
0,It does seem that this is most simple way to achieve better code. They are cleaning up the code while trying to maintain functionality. It was all easily presented in the wiki.
1,"I wanted to see a detailed explanation of the design. They have only explained what is wrong with the previous project which is mainly ""no comments"", ""complex code"", ""DRY violation"". This project seems more like a code climate fix rather than a new implementation. It would have been better if you would have explained the design even if it was briefly. Because I don't want to go to the previous submission to read their point of view or their complex design."
1,Some parts are vague--ex. Improve more details. That section should be explained more.
1,"It seems the group has really simplified it a good amount. However, I was getting confused with where the group plans for this to be displayed. They kept mentioning multiple tabs on the view scores page, but I thought the view scores page doesn't have tabs."
0,"Yes, only what is absolutely necessary seems to be added in."
0,The design document is simple and clear. It contains almost all the sections one could include for the project.
1,"Based on their description, the team design proposed by the team appears to be simple.  The team has explained the actions they plan to take to resolve each part of the problem.  However, it is difficult to tell if a simpler approach could be used or if the actions discussed by the team will solve all of their problems."
0,The given design is simple as possible
0,The team did a great job explaining the project. One recommendation I can make is to emphasize the design pattern used.
1,"Design document appears to be in a good shape. The problem statement is copied directly from the Instructor's explanation. This definitely needs paraphrasing
The metadata should be stored in the local Expertiza DB (we have a sample design here, which you may use or modify). For each participant, record should include at least include
Problem statement needs to be explained as the team is solving the issue rather than instructing the user to do the changes.  Use case diagram explains where and how the changes are getting affected. Looks good. Team has made lot of changes from the first phase."
0,"Yes, the team has worked on appropriate design principles and appropriate patterns but I would suggest the team to give more explanations on the implementation part."
0,"Not much to say here, the plan of work seems very thorough and adheres to good design principles."
1,"The team did a good job of explaining the tasks they expect to perform.  However, it is uncertain their solution will solve every problem mentioned in their project.  In one of the provided examples, the team proposes to clean up the code by putting all of the closing braces ""}"" on one line.  This really does not seem like a solution that would reduce code smells."
1,"The design and the plan for implementation seems good. They have figured out the proect, its subtasks very well.
Some issues that can be tackled are:
1. "" some code like the format below can be rewritten in the shorter line."" shorting up the lines might not DRY out the code, the older code seems more readable to me.
2. The movement of javascript code - I am not sure why it is required and how it will help."
1,Sounds reasonable but part of their requirement needs them as this is a refactor project which is different from other requirement. They have said possible code smells they are working on but failed to distinguish the use of exact design pattern or philosophy they are planning to use and achieve the requirement such as this
1,"The current design looks better than the previous one. The team has changed the design to resolve previous issues.
The only issue I could find that the team has given 2 UML diagram as a new and old one. They both are quite different and hard to understand that the functionality that exists in the old one and not in a new UML diagram, have they been removed or still exists. It would be better if the team could have mentioned this in the design doc as for why have they not shown those functionalities of the old design to a new one."
0,The authors have explained very well. It is very detailed and visually appealing.
1,"The team left the ""implementation"" part in the document empty and to be filled after the project. However, they have included ""our improvements"" field under which all the changes are given. They have indicated problems and solutions clearly."
1,"The team included many details about the actions they expect to take to solve the problem.  However, it does not appear that the entire problem is addressed.  It would be helpful to see images of Expertiza that show the results the team expects to be seen by the end user."
0,"Yes, they have jotted down the changes in code, test cases and refactoring very well"
1,"Somewhat lacking, 
Say, http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Spring_2019_-_Project_E1925._Refactor_E1858._Github_metrics_integration#Improve_More_Details
 
What does that mean? Could you please add any specific details on the project instead of try to be vague?"
1,"They have done good work explaining the changes. There were some things that I felt that need more explanation such as -
1. The one issue I mentioned about UML diagrams.
2. In ""Improve more details"" section they have mentioned about some test cases that last semester's team who was also working on this project missed are not quite clear as to which functionality was not covered while testing, what are other functionalities the other team missed that they are going to improve.
For this team could have mentioned the functionality that was not tested by the last team and can also mention the functionality that other team missed."
1,"Authors have used the Use case Diagram to explain their design. In both the use case diagrams added Instructor is the actor who is viewing the teammate review. However the Caption to the diagram shows us a different story. caption says "" Use Case diagram of two approaches to append 'GitHub contribution metric' in teammate review"", but the Use case diagram corresponds to the viewing of github metrics. It would be great if the Caption reflects the image being used to depict the Use case."
0,The team has included diagrams that are relevant to the problem statement and it helps readers to map on to what the team is trying to convey in the design document.
0,Visual aids were included in the design document and the diagrams are very relevant to what the team was working on.
1,"The team provided a use case diagram for the instructor.  However, the diagram is a little difficult to read and does not make complete sense.  Why include two separate use case diagrams for the same user?  It would be helpful if the font in the diagrams was a little bigger.  No UML diagram was given."
1,"At this moment, it is very hard to tell anything about the proposed design change. The major factor for this is, there is very limited information on how the team is making changes to the existing code base. For example
Move JavaScript Code
Problem: There are some JavaScript codes in inappropriate positions.

Solution: We need to replace JavaScript codes to 'assets' fold.
It is very hard for the reviewer to understand what changes the team is implementing. Also, the major design change of adding a new controller ""Github_Metrics_Controller"" is discussed in the document without much details on its implementation. Also, validating the reasons to add new model and how these models are attached to the existed ""Grades_Controller""  would be a great addition"
0,The team has definitely stated about the functions they want to perform their changes for. The idea looks good and I don't believe there are any gems that can simplify the process.
1,"Again, it is difficult to tell if the proposed solution will introduce any new problems or will degrade the performance of the code.  The team has not identified which files will be impacted by their changes."
1,"Authors have not proposed any design. However the Plan of Work do state some high level objectives. E1851 doesn't state what is it or reference a link so I have hard time in following where the come from.
Also consider adding and removing copy codes, for my project my teammate explicity rebased my commits so my commits and the changes I made would be reflected in his code. So you should be aware about the intricacies in reporting the project."
1,"They still haven't seemed to mention the new code design and the methods they wish to implement. That section is still saying ""Detialed improvemnts work here"". I hope to see more during the next submission."
0,team is focused on making design better then before.
0,They explained what the want to get done and what the previous group did. They explained what was wrong with that teams work and their plan to fix it.
1,"Authors have proposed multiple changes to be incorporated in this project. They have clearly mentioned the changes required, however each change has very limited data related with it.
 
For example:
<Refactor>: grades_controller
File location: app/controllers/grades_controller.rb

Project E1858 Issues
Issues description here.

Project E1925 Improvements
Detialed improvemnts work here.

<Refactor>: grades_helper
File location: app/helpers/grades_helper.rb

Project E1858 Issues
Issues description here.

Project E1925 Improvements
Detialed improvemnts work here.
This section in the document doesn't help the reviewer in understanding how the team is working on it. It would be really helpful if the authors add more details on how they want to implement and why they are doing these changes."
0,The team has proposed several changes and they seem to be very good. I did not find it difficult to follow or understand these changes as they were explained very well.
0,The explanations are very detailed and very relevant to what the team has planned to implement. All the important sections have been written well with code snippets.
0,"There is a good amount of information for the entire document, and there are use case diagrams and charts to explain their points further."
0,"They have mentioned testing and work on the controllers, models, and views."
0,They have explained the project very well starting from what the project tasks are which clearly lets the reviewer know that the team is very well aware of what they would be doing throughout the project duration. They have a clear understanding of what the project is asking for which is clearly seen in the way they have explained the flow.
0,"Yes, the design includes all of the functionality required. The functionalities have been completely described in the wiki document."
1,"The document discusses the problem statement and related tasks.  It also discusses a proposed solution with use case diagrams.  However, the details on how the team will implement their solution are incomplete.  It is not clear if their solution will resolve all the tasks associated with the problem statement."
1,"Project_E1858_Issues
  points to the issues available in your requirement but not translated into something actionable. ""Clean the redundant and inaccurate code."" doesn't say anything SMART"
0,It pretty well done. There  are plenty of details that help the reader understand what work is going to be done.
1,"The design doc is explained thoroughly for the most part. However, there are sections that are still incomplete and there are also some parts that are too vague. Example: moving javascript code...Explain why you intend to move them and how they are at ""inappropriate positions"""
1,"I believe the document shared is just the structure of the document. The authors may re visit this page in the next phase and add more details here. At this moment the document looks weak and needs more details to become a self-contained page.
 
Another suggestion is to para phrase statements from the Problem statement given by Instructors. One of the places where we can see this is 
The metadata should be stored in the local Expertiza DB (we have a sample design here, which you may use or modify). For each participant, record should include at least include:
Any statement added in the document needs to correspond to this document and the authors may need to changes the sentences before copying."
1,"I think the overall structure of the wiki is a little confusing. I think the problem statement could be shortened a great deal so the reader can more quickly get to the functionality you plan to implement.
The diagrams are a little blurry.
The test plan seems to have empty sections, it says below are the test results, but no implementation has been done yet."
1,"The test plan is incomplete. Project design is pretty good (more detail required), and project purpose/use case is very good."
1,"The document includes all of the right sections, but not in the right order.  The introduction section is good, but the Project Task section should be renamed to Project Tasks.  The text is a little disorganized as some of the text would fit better under a different section.  As an example, the text under Project Task might fit better under a separate section called Previous Work.  The Plan of Work section is a good start. However, it is missing many of the implementation details.  The Refactor and Improvements section should be moved inside of the Plan of work section.  The Test Plan section needs more details on how the code will be tested.  The References look good."
0,"Yes, it looks like they have added two commands to run tests."
0,They have added diagrams wherever necessary and this pictorial representation makes it easier to follow their work.
0,"Yes, they have clearly stated how they're going to implement the next steps. It is understandable."
1,"Yes, the write-up is very good. They have added almost everything that's required. The only drawback in their write-up is not enough explanation for the code snippet that they've added. I suggest they add comments or explain the code a bit to make their write-up complete."
0,Yes the diagrams added are simple. But their write up is good enough to do without it!
0,"The design looks simple. Their plan for the final project is understandable. If they could brief more on the steps in terms of the components involved such as PannerNode, StereoContext and so on, it would be even better"
0,"As it is a Mozilla project, getting the output as required seem to take the front seat when compared to the patterns."
0,"They have the standard Servo tests outlined in the test section. I'm not sure if they can have some explicit test in place to see the functioning of the DOM interface etc. So I am happy with the tests, They could have also mentioned this better in the document."
1,"The design document appears to have the necessary information for the steps to be followed. In the implement an audio node message that is specific to OscillatorNode, I would have liked to see more details as to what exactly the function does and how their functionality is going to improve servo's functions. They have also not mentioned as to how they are going to solve their previous problem as that solution is still open in the pull request."
1,"Yes and no, because even though they have added details as to what has to be done to the system, Im not able to clearly see what functionality is being carried out by the functions they are working with. It would have been nice if they had explained more on StereoPannerNode, OscillatorNode etc so that the user gets a clearer grasp on what exact function the authors are working upon."
0,"Since this is a mozilla project testing cannot be done for this project, but they have given some steps to run the project."
0,"I can see that they have explained things properly which makes me understand the concepts and what they are going to implement. Thus i feel that the design document is simple. But i think they could have created a new wiki page and display details only for this project instead of tagging along the previous project, because i felt that the design document was too big."
0,While reviewing the document i came across multiple block diagrams which incorporate the flow and the components that they are going to work upon. It made the design document much more easier to understand.
0,The document that they have written seems to follow good principles and is written with accurate and relevant information. I can see that they have properly given information on what they are going to do and how they are going to do the project.
0,They have properly explained the changes they are going to make to the system using proper block diagrams and more description has been given for the interface that they are going to implement.
0,"There is no test plan in general required, all the tests have to run as before, once after the code is modified."
0,Block diagrams are presented in order to explain the working and steps they have to implement to complete this task.
0,"As I said earlier, there is no design pattern in general, but their plan of work and their approach looks as if they are in the right track and their explanation about the implementation of certain methods looks promising and simple to understand."
0,Their project didn't really involve any design patterns in general as they are only implementing methods. So the details about the choices of approaches they had and the problems with them have been very clearly mentioned and explained the reasons why they are following a certain procedure.
0,The authors were very brief in explaining the problem statement and also the changes that have to be made to the code.
0,The document contains many figures that can help me to understand the project. The figures show the relation between the input message and the output message. It also has the figure to show interface.
0,"Yes, the design looks great and simple. The structure is easy to understand and contains all the things I need to know."
0,"The structure of the document is great. In the design document, it said that ""the project didn't use any design pattern since it's implementing methods."" I think they can introduce the design pattern about the controller."
0,The authors have explained the changes well. They provide details about the method they need to implement. I can understand the changes easily.
0,The diagrams are very informative.
0,The design is easy to understand.
0,"The design document looks good. It covers every point and has visualization. Only suggestion, can you reduce the code snippet to the part useful."
0,The explanation is good and easy to understand. Can add more details in the testing section.
0,"They mentioned that the UI can not be tested, and how to test the Servo. The tests pass from last project."
0,They claim there is no design since they are just making methods to do stuff related the Servo. The did the OSS project on this as well so they know what they are doing.
1,"My big issue with the design document is that the design part of the document is just tacked onto the end of the document. So, I need to go through a lot of text to get to the purpose of the document. You really need to put the design part of the document near the top, then talk about the previous work performed to get to this point. As it's written, this doesn't read as a design document."
1,The test plan is the shallowest. They did not bother explaning about them in detail. I need to google to find what exactly mach does.
1,"Though you did made necessary UML, please try explaining them. Say Pan Value[-1,1], what should I infer from this? Please try to be explicit as possible. Ask a classmate who is not in Mozilla to read the wiki before doing a final submission to make sure that it would understood by peer reviewers as  well."
0,The requirement by itself is clear. It would take learning the language and fulfilling the requirement. It doesnt sound very complex in first place.
1,I slightly misaligned with their testing section and the UML representation . Those webaudio API snapshots doesn't help in the context.
1,There were plenty of code snippets that explain what they tried to do but was did not work for whatever reason. Then there is a massive code block of what they did for the OSS project not much documentation about it.
1,I couldn't find any UML diagrams or any other diagrams to support the wiki page. They could have given some flow diagrams on how each functions they have to implement work. They could have used some depictions to explain how the project works.
1,"There aren't really any diagrams used to explain, the snippets of code put on the wiki page are informative but not completely helpful to understand it properly."
1,Visual aids not applicable
1,No mention of what changes are proposed in terms JS supoort.
1,I do not find any UML diagrams in the document. I think it would have definitely been better to list the functions that have to performed using a diagram. They could have explained how to create the DOM Interface or the backend for StereoPannerNode using a visual diagram. Could have made it easy to understand how they are planning to go about the implementation.
1,They didn't mention which controller they will use to add new methods. The new design plan is pretty conceived and need more details.
1,The team hasn't mentioned anything in detail to comment about these details.
1,"1) They have to implement some functions and i dont think it has been handled wrong and as this is a mozilla project.
2) I dont think the functions they will implement will create bugs to the project because they have to create new functionalities.
3) This is a mozilla project hence i cannot comment on this question regarding gems.
4) This is a mozilla project involving implementation of some functionalities, hence this doesnt involve increasing efficiency of response time.
5) They could have given more information on what the functions do."
0,The explanation is easy to understand.
1,Could not find design report
1,"The project is a Mozilla one so Im not able to give my views on a few questions posted above. But the authors have not detailed on how they are going to implement the functionalities needed off them, they have just given an idea as to what files have to be changed and what function it has to perform. The new design might make it easier to implement the constant source function from the servo browser because of the DOM API implementation."
1,"The author introduced what they will implement in the final project, but they didn't provide the detialed plan for the final project."
0,The have clearly laid out what they plan to implement. They also explained what the accomplished in the last project along with code snippets.
1,"In the writeup, it was clearly mentioned about what they want to do, but their proposed ideas on how they want to proceed are not clear, So I couldn't understand how would they like to proceed."
0,The goals are explained very well
1,There is not much 'explained' under each functionality.  A small description under each task would have made the page better
1,"Again, no mention of what changes are proposed in terms JS supoort."
1,explanation are hard to follow. No preface about the issue given. I have no idea about audio node either. So please atleast explain and give the need for the project or a intro would be nice.
0,"Yes, the document is well written. The document includes the statement, what needs to be done and test plan."
0,The team has incorporated all the design functionalities that are to be implemented.
0,They have included all the functionalities that are needed in the OSS design document in their wiki page. They have also mentioned a section called Planned work where they have mentioned all the functionalities they will be implementing and have also mentioned which ones involve which files to be worked on. They have given some description on how they will implement it.
0,All the required functionalities required for this project has been incorporated in the doc.
0,Yes the design contains the functionalities mentioned
1,"This looks like the documentation for HW3. I expected to see a design proposal for ""Implement JS support for several missing WebAudio node types"". There is no mention of JavaScript anywhere in the proposal."
1,The authors have added a section called the Planned work that explains more on the subsequent steps section that is given in the Mozilla documentation for their problem statement. They have given some details as to the file that they will be modifying but it would have been better if they had shown a representation as to exactly what changes they were going to implement. For example. the StereoPannerNode in the media crate is to be worked upon but no information is given as to what functions that it performs.
0,Everything is stated.
1,"The doc is complete enough as far as the required set of information is concerned. But, the provided information can be much more briefly explained as I felt it was hard to follow."
1,Like i said before they still have to elaborate on how to implement the functions and what they do. They still need to work on the document to explain the project's core functionality.
0,The changes seem to be correct.
1,Could not find the test plan for the new set of implementation. Otherwise the document contains all needed topics.
1,"I only see tests that were completed, but even these are related to JS support."
1,The author made some effort to understand and publish a wiki even then I am uncertain any efforts that corroborate to the project development
1,The design document is in the preliminary stage. They are still working on finding how to make the system work I guess. Would be better to see more information on what they are implementing during the next review.
0,The changes are well explained and the design is ready to be implemented!
1,"The authors seem to understand their problem statement well and have explained it beautifully. The implementation part is also described but looks the authors are yet to figure out how to make the changes as mentioned in the document. One suggestion would be to have a quick look at the code and give an overview of what changes the authors may be needed. After all, this is a design document. This is the only thing I felt was missing and rest of the things are well done by the team."
1,"The team did provide a few diagrams that explain the flow of the application and the use cases.  Also, the team described how the instructor should be able to add an assignment and configure it to allow students to perform peer reviews and how those reviews can be added to their score.  However, their description lacks details on how these changes will be made."
0,"With the Ideas that they have proposed, I could see that they have faced certain issues in build due to which they have changed their idea, their proposed idea looks promisingly to better the web audio, so I would say they have done a good job on that part."
1,"Test plan at this moment looks weak. This section needs a lot of work to be done.  Test section mostly talks about how the team is trying to implement rather than having a test plan. 
We shall Design a way to show them in the regular “View Scores” page and the alternate (heat-map) view.
For example, the above statement should not be part of test plan rather proposed changes. Test plan should only contain details regarding how the team is planning to test the features"
1,"The design doc does include a test plan, and from the given test plan it looks like all the necessary functionalities required can be tested effectively, but in one of the points they have said that they have to figure out the flow of the code which I felt shallow as they should have idea of the flow already?"
1,"They have included a test plan section in their design document and have mentioned that they will use Cucumber and Rspec for testing.They have mentioned about the functionalities which is what I think they will be testing and it seems appropriate.
Some test examples for eg. for invalid inputs or self_review score not given by the student or some test cases could have been explained to show how they will be testing their methods would have been better."
1,"The test plan is included as expected. Good job. However, the content of test plan section looks vague and incomplete. There is some content in the test plan that really should be in an implementation section. The only relevant point mentioned is that the team will write cucumber and rspec tests. This looks a little vague to a reader. The team could have created some scenarios that they plan to test and described it here. Even though it's too early, the team could have atleat put in manual test scenarios."
1,I found the test plan to be a bit shallow. It isn't specific enough about the controllers and models that are going to be tested and fails to make a solid argument for it.
1,The test plan still contains quite a bit of information that isn't related to testing but more related to the overall work flow.
1,The test plan has the same issues as in round 1. It lacked information about testing but had implementation details which don't really belong there.
0,"Yes, they provided two figures, one is to explain application flow and the other is to explain user case."
0,Visualization is great. Authors have visualized the project in a much better way. We have application flow and Use case diagram that clearly explains how the team is making changes. This really helped the reviewer in understanding the process in less time
0,The pictorial representations have made is easier for me to follow what they've done.
0,The presented flow diagram gives a very clear depiction of where the changes have to be done and also about the process of steps how it has to be followed.
0,The application flow together with the use case for both the instructor as well as the student is very informative and makes it crystal clear to understand their design and what their objective is.
1,"The visualization used is good but as I mentioned in the previous review, the application flow diagram and use-case diagram are redundant. They both have the exact same content in them. Either one of those could have been more detailed or the team could have just removed on of those. Apart from this, another suggestion would be to use a visualization for explaining the formula as that looks like the crux of this project. Wikipedia has visualizations that help readers understand better."
0,"As noted in the previous review, the use case diagram and the application flow diagram are top notch and help with the understanding of the implementation."
1,"I think the document would be better if you at least showed what the present view looks like and then described your changes. As it is, there is just a description and no way to see how the addition of a couple of columns affect the view."
1,"The team has good visual aids that describe the process, but I felt the work flow diagram was a bit redundant because it looks too similar to the use case diagram."
0,There are several illustrations and diagrams depicting the flow of the work.
1,"Design appears simple. However, we need more content in the proposed changes section. The content added is not self-explanatory and is very difficult to follow. Foe example, the statements: ""We have to come up with a formula to derive the composite score as below."" doesn't make sense as the team has directly provided formula in the next line.
 deviated_score_scale = (100 - abs(self_review_score - mean(all_peer_review_scores)))/100;
  derived_score =  deviated_score_scale * peer review score;
Overall, things needs to be explained a bit more and discussion might have to added for better understanding"
0,"Yes, it is easy to follow and understand."
0,Their design to calculate the composite score and make it visible to the students is pretty straightforward and it is as simple as possible which makes it very easy for anyone to understand what they are trying to do.
0,Based only on the visual aids provided the design looks extremely simple and the explanation provided adds sufficient explanation as well.
1,"It is difficult to determine if the solution proposed by the team is as simple as possible.  The proposed solution looks good and appears to address the problem.  However, it is difficult to tell if the solution could be further simplified as no code is given.  From the description, it is uncertain that all of the tasks associated with the problem are addressed."
1,The design looks good and simple as expected. It has been clearly explained but there are no examples provided. Team could provide an example to explain their concept to the readers which would make it more readable. Not all projects have opportunities like this where you get a chance to explain using an example which would make it easier for readers to follow and also makes it more interesting.
0,I think that the design is sound and the new formula is simple enough to implement without looking too complicated.
0,The proposed design is simple and clear.
1,"Design document is very clear in explaining problem statement and current implementation. The explanations are in better shape. There is no design pattern discussed and the document lacks in quality of proposed changes section. This continues with my feedback from phase 1
we will make some changes to the instructor’s page 
What changes do the team wishes to make. The content is very vague and is definitely not helpful to understand the proposed changes."
0,"The design looks to be very sound and they have also mentioned about the various changes they have to make in different pages very briefly, the flow they have presented looks very appropriate to the task."
1,"The designed proposed by the team looks good, but it has no depth.  There are no details about the implementation and how the different parts of their design address the different tasks in the problem statement."
1,"The design document looks nice but can look even better with reorganizing sections. For example: Instead of having so many sections, you could have had sections like Changes proposed and Implementation and have sections under them like use-case and app flow, and proposed formula respectively. The test plan looks incomplete and just mentions what will be done which should be located in Implementation section. Overall document looks good and is understandable."
1,The proposed formula still assumes that the peer_review_score and all_peer_review_scores are based on 100 points. Look at the first line and assume that the maximum value for these scores is 5 and that the actual scores are 0. Compare that to an example where the maximum value for these scores is 100 and the actual scores are 0. Those scores should be the same. If they are not meant to be the same then you need explain why they aren't the same.
1,"The design principles are sound. I felt the authors could have talked a bit more about the proposed code changes, like identifying the design pattern used."
0,The document is in good order and illustrates what the team plans to accomplish using diagrams.
0,Most of the explanations are at right place. But we still need some good work to see the document ready. Proposed changes section needs a lot of work (maybe after the team successfully implements the code changes).
0,"With the diagrams, the Idea has been very well presented and very easy to understand."
1,The visual aids provide minimal but sufficient explanation about the different aspects of the project. Another intuitive visual aid would be a data flow diagram as it delves further into the details of the proposed changes
1,"The diagrams included by the team does provide a better explanation of their logic.  The team did not implement a true UML diagram, but the did include an application flow diagram for both the student and instructor users.  However, their use case diagram does not seem relevant to their project.  While it is true the student and the instructor will submit a form for the self-review, the project should not cover logging into Expertiza or viewing the scores.
It would be good to see the proposed modified files laid out using a UML diagram."
1,"The application flow and use case diagram convey the same message. Remove one.
Provide more details/explanation for the same."
1,Authors hasn't provided any design about adding controller or how to implement new features.
1,"Based on explaination provided, it looks like new methods will be added but don't knwo where or how. The new design clearly explans steps to mitgate shortcomings from the current process."
0,They have explained the changes they are going to do but have not explained where the logic is going to be implement although they have mentioned actor and actions but detail explanation about this is required about where in the code they are going to implement this.
1,It is difficult to tell if the proposed solution will add methods to the wrong class or if the developed code will degrade the performance of the existing software.  The team is proposing to modify at least 10 files that are either models or controllers.  Will it be necessary to modify view files as well?  The appearance of the view score page may need to be changed too.
1,"Not enough explanation provided to judge points 1,2,3&4. More effort required in documentation about the proposed changes. The authors can explain further rather than just mentioning the changed files."
0,The proposed approach is solid and the team has identified and listed all the code that might be impacted by this project
1,"The changes proposed are very unclear at this stage. Though the team explains how the flow is getting changed and what is expected at each stage, there is lack of content in changes being proposed.
 
If the contents are added in the next phase, it would be easy for the reviewer to understand the work."
0,"Yes, the team has explained clearly what needs to be done, and it makes everything clearer."
0,"The writeup is very brief and very easy to understand, Problem statement has been very clearly stated and easily understandable, Thier Idea about the proposed process is very clearly understandable."
1,"They have explained the changes they are going to do in the project with well documented bullet points,diagrams and the flow.
Some further explanation about the formula would make someone better understand the logic.Where all this logic will go is also not mentioned.This information can be added for more clarity."
0,The explanation provided by the team is sufficient and is well backed by visual aids.
1,"As mentioned in the previous comments, it is difficult to tell exactly what the team proposes to do with the project.  The design looks good and their logic seems sound, it lacks implementation details."
1,Good explanation but missing more technical explanations like which models will be affected or in-depth explanation of what all changes need to be done.
0,"The changes that the authors propose are intuitive and easy to understand. They are trying to ""Provide a formula that takes both the peer review score and self-review score into account for calculating the composite score"". Their strategy of showing the composite score as a different type of score is a good design choice."
1,"For the formula proposed it looks like you're assuming that the max review scores are 100 points. Is that true? Will that always be true? I think you need to rework the formula to account for the fact that the review scores could be out of some maximum value and not assume that the maximum value is 100.
 
It would be nice to see what the instructor's view looked like. The description is rather nebulous."
1,"Overall, the document contains statements, what need to be done and test plan. But they didn't provide enough details for their plan to do in this project."
0,"I could see all the functionalities required have been implemented, and have been very neatly explained."
0,Yes the design doc incorporates all the functionality mentioned in the above link.
1,"The team did a good job of explaining their project and providing a proposed design solution.  In their document, they included several diagrams that explain the flow of tasks associated with the instructor and student users.  The team even proposes a formula on how the scores from self-reviews can be used in assignments.
However, there are a few concerns.  The design in itself is not explained in great depth.  It is difficult to know what code the team will modify or create to perform the described tasks.  Second, the use case diagrams are the same as the application flow diagrams.  The team's code should not be concerned with logging into Expertiza or viewing scores since those functions already exist.  Finally, is the formula the team proposes correct for calculating scores?  This should be a function for the instructor to determine how the scores should be calculated."
0,"The team plans to a new formula to combine the self review scores and peer review scores so that the scores can be a fair understanding to the students of their effort. I believe that the document includes all the functionality that is required. Also, complementing the design with use case and application flow diagrams, makes it easier for me, as a reader,  to understand their design choices. They also manage to include a decent test plan into their document."
0,"Yes, the design document explains all of the functionality mentioned in the project requirements."
0,I think for this stage of the Design Document the team has captured the required essentials. The has captured the current problem as well as laid out a strategy of improving the feature.
1,"It will be better to provide more details about your design. For test plan, it can be put in any project. You can write more test plan about your project."
1,"Design document has good information regarding problem statement and current implementation. But at the same time it lacks information regarding proposed changes.
we will make some changes to the instructor’s page 
One example is shown above, where in the document says ""some changes"". This clearly shows the docment is not complete. It is hard to understand the proposed design or the code changes team is planning to.
 
Additionally, Test plan section looks directly copied from textbook/other page. It would be great if the team adds relevant test plans on how they want to implement testing strategy and the kind of tests they want to add in this project.
 
Overall, the document is clear on what the team needs to do, but lacks atimplementation points. Expecting more information to be added in the next phase"
0,"Everything has been very clearly mentioned, and I felt it would be nice If I could see their Idea on what the individual classes should perform in order to implement this."
1,"The document contains several key elements, including a problem statement, problem tasks, design proposal, use cases, test plan, and references.  The problem statement and overview is done very well and may only need minor modifications.  The team included a current process section, which does a very good job of explaining the problem in simple terms.  The test plan section provided some good information on how the team proposes to check their code, but it still needs more details.
There are a few suggestions to be made for improving the document.  First, the section explaining the purpose of Expertiza should be removed as stated in the documentation guidelines.  Next, the files to be modified section should be moved closer to the design section.  Finally, the references are a bit redundant and some of the references may not even be used in the document."
0,"I found the document to be sound and complete. The team has included ample explanations about what they want to achieve with their implementation and through the use of visuals helped to make their point. The project purpose, design and testing plan have all been stated in the document. Good job!"
1,"The Test Plan contains a lot of information that has nothing to do with the actual testing of the code. If you want to include information about environment set-up, etc. the document will read better if you put that information in a separate area."
1,"The design document overall is very well written. The only section that was a bit confusing is the Test Plan. It had a lot of unrelated information, some which were implementation details. Example, ""Implement the functionality in a way that the author(s) should be required to submit their self-evaluation(s) before seeing the results of their peer evaluations"" . This should have been part of the proposed changes, not in the test plan. There were a couple more points like this which don't belong in the Test Plan section."
1,"Team has tried to explain things in easiest way. Some explanations are clearly at the point rather than hitting around the bush. Particularly, content added till today (4/15) looks great. There are code snippets added as example to couch for the statements."
1,"The design doc is voluminous and hard to follow. Please breakdown as where you come from, what is the problem, what is you proposal, how does it work, how would you know it works (test cases), show how would you know it works (test coverage or plan to record and publish a video)"
1,"Authors have tried explanaingthe rationale and the files they plan to change. However, at this stage there is less clear information on how the team is going to implement these changes. Also, some of the content needs to be explained a bit elaborately. For example: 
Additionally, Questionnaire relies on a helper that can import Question objects from a CSV and adjust the size of the associated QuestionAdvice
For reviewer, it is very hard to understand how the flow is explained. More explaination on what Question Advice and other things would help the reviewer to understand things clearly"
1,"The textual description of the project sufficiently describes the changes proposed by the team although a visual depiction of the changes, such as an use case diagram or a data flow diagram would be a more intuitive and detailed approach to explaining the proposed changes."
1,"Good plan so far, need more details around what is being refactored and how you are going to replace all the functionality you are removing."
0,the changes that the authors have proposed are sound and hopefully will pass the build
0,the changes proposed are quite easy to understand and follow.
1,"The proposed work by the authors is legit. The explaination is not hard to follow. But I think the team should expand on the part of ""proposed changes"". It would be a good way to take each of the functionalities that used to use import/export feature and explain them seperately on how they plan to handle it.
There can be a lot of addition which I will mention in the upcoming questions, then we can comment on the quality in a better manner. But for now, the documentation is explained in a very simple and basic language which is great."
1,The explaination is somewhat hard to follow as in why are they doing what they chose to be doing. It seems a plausible solution but the reason for choosing this solution is not mentioned.
0,I really like the bulleted functions and models in the wiki. Simple and explicit. There's a summary of code changes which is extremely useful to a reviewer.
0,The design document mentions the problem statement and the team wants to pull out all the functionality and put into one generic file. Based on the explainationit looks like all the functionalities can be incorportaed into the same file and routing for all import/export can be from a same file
1,The document just gives the task of the project and the description of the project. They have mentioned all the functionality required but without details.
0,Yes the design incorporates all the aspects mentioned in the above link
1,Yes but is very light on details about how its going to do it.
0,yes the design does incorporate all the functionalities required and mentioned in the file
0,"yes, the design includes all the functionality required.(new way to import/export )"
1,"The functionality has been well understood, described and laid a plan for. The design misses one thing - they plan to remove lot of existing import/export code, but they do not check if that will hamper any other existing code base. But apart from that they have figured it out on how to go about with the project."
0,At a glance it seems that the solution proposed works and checks all the functionalities needed.
0,Yes. The problem statement has been reposted in the wiki so that's good.
1,The design document does incorporate all of the functionality but the i cannot access the link mentioned in the deployment section.
1,Testing plan is missing.
1,"Overall the wiki page looks great. Some of the suggestions that can make this better are:
- Explaning how the team is trying to implement would be a great addon
- As the team is planning to change data route, it would be great addition to add data flow  diagram for every change
- How si the new code being added. what is the design pattern used? What changes is the team planning to make?"
1,"Their doc just starts with some layout. Still, need more details of each step and describe how it works."
1,"The only important part that is missing is the visual aids. You could add UMLs, Use case diagrams, data flow diagrams or activity diagrams to enhance the doc."
1,A lot more detail needs to be described
1,"the design document is fairly complete, test cases and the test plan are missing"
1,"They did not mention anything about the test, or maybe it's not required here?"
1,"Though they have figured out the basic structure of the implementation, yes, there are a few major modules which are yet to be written by the team.
- How the team plans to test the modules they refactor and add
- How or what other modules might the implementation affect
- As mentioned above, some visual tools can enhance the understandability of documentation."
1,"The doc seems to be written with care. Although some parts are rough and there are no visual cues, but the solution seems to be plausible."
1,It's good. I think adding diagrams and code functions in the future will complete the wiki. Good job everyone.
1,I think the description of the project can be split into chunks. It could include the project purpose and design. There is no test plan.
1,"Did not test the code as it was not deployed to my knowledge.  Without deployment, I would have to get this up and running on a local pull of the code.
Every time I have tried to get a Rails project up and running, it has been quite bothersome, and this is the experience I have heard from many classmates as well.  Honestly I don't think that I can afford to spend several hours on each of the review projects, to get them up and running.  It has never taken me less than an hour to fiddle and fumble my way through the various errors I get initially."
0,"Test cases are added, looks like they cover the project pretty well at a high level."
1,"Very clear, with the exception of how this requirement was met: ""In addition, functions code can be optimized to ensure that it follows DRY principle""
Also, one unneeded method was commented out.  IMO it is preferable to remove such a method entirely rather than commenting it out."
0,"Yes, The code is ready to be deployed. It passed the Travis CI  and does not fail on the test cases. It built successfully, they have added the tests necessary for the refactored methods and it worked correctly. 
The screencast showed that the tests passed and the methods they have refactored."
1,"The writeup is good and has well structured. However, I felt that design pattern should have been above the implementation section which makes the reviewer look for what kind of design pattern they have implemented and then check for the same when looking at the refactored code. And same with screencast. It should have been above the implementation section."
0,"The code followed good ruby methods. The previous naming conventions were in pretty bad shape and now they have done a good job in refactoring them. The previous code needed refactoring badly and now the refactored code works well. 
The methods after refactoring work correctly and perform the expected operation. I did a cloned their repository to test the changes and yes it worked as expected."
0,"The team did add 14 test cases which covered all the refactored methods names, a method which was moved to partials and a method which was refactored into a dictionary from switch cases. 
Code Coverage was increased."
0,"Yes, the build was passed in Travis CI and there wasn't any conflict that could have resolved. The code seems well structured. 
They have done good refactoring and have removed some switch cases into dictionaries which is a good idea."
0,"The team has followed well Ruby naming conventions. They refactored the code keeping in mind the DRY principle. 
I could not find a bad coding style or naming convention. The long functions were replaced to dictonary from switch case was a good idea. Overall nice job."
1,They have a good quality of the description of the project but need more details of the explanations of the project design part.
0,"yes, the changes that they have proposed does seem to go hand in hand with the visual aid that theyhav provide in the project wiki."
0,"yes, the changes are well explained and reasonable. and they have also include their progress in the wiki page."
1,"Travis CI is passing. Since the method names were changed and their usages have been replaced, the functionality has remained the same however the code climate shows 24 issues"
1,"I did not see any changes in the spec files, and the testing was left blank on the wiki."
1,"The code involves only name changes and replaces usages with the refactored names. I would recommend looking deeper and shorten methods that are long and redundant. Overall, a great start but the refactoring can be more extensive."
1,The names are definitely shortened which is good. However they still include the 'get' prefix where in most cases its not really needed. For example get_team_color can be replaced with team_color.
1,The writeup includes a testing section but is incomplete.
1,"The writeup includes before and after, and mentions the design pattern used. However, I would advise more explanation on the strategy pattern and concrete examples through screenshots. Overall good attempt!"
1,The writeup is very clear with flowcharts and enough context for the reader to follow. Testing is also included but is incomplete.
1,The written code is easy to read and understand and merges well with the existing code base. The function length can be improved and the DRY principles should be kept in mind. Some code get repeated which can be merged into a helper function.
1,The test plan section looks complete but they are yet to come up with the exact plan. We can provide more feedback when they come up with the test plan.
0,They have included and figured out Strategy design pattern for their work and they are following it throughout their documentation. The work is described very neatly module-wise which is extremely helpful to understand. Great work!
0,The writeup is great. The idea of including flow chart is amazing and this is the first team I saw doing it. The documentation is well planned and well written.
1,"They have changed the method names and added comments which should not affect the main platform. But if they have changed the method names, they should check the spec folder if those method names were present they should modify those and conduct testing."
1,They have not conducted tests as mentioned in the wiki page.
1,"The method names have been changed into shorter ones but they still seem long to me. They have mentioned something about refactoring the code to implement the DRY principle but I could not see that. Also there are a lot of issues reported by Code Climate for example trailing white spaces,use empty lines between method definitions etc which I think they can work upon."
1,Their Travis-CI build passes. However their code climate still fails which suggests that their coding practices need some rework to follow the best coding practices suggested by Ruby.
1,They have not done testing as mentioned in the wiki page.
1,They have given examples for the renaming the method names and adding comments to various functions which is good. However I felt they could have cut this down short by giving fewer examples and giving more examples for code optimization for implementing DRY principle which they mentioned in the problem statement.
0,They have mentioned the problem statement clearly and concisely. For a better understanding they have also given a flowchart diagram which help the reviewer to get a clear picture of what this project asks for.
1,"Some functions are too long and complex as depicted by the code climate bot. For example, get_team_colour has a complexity of 25 when only 5 is allowed, and has 27 lines of code compared to the allowed 25 (although I don't think this is nearly as serious as the complexity problem)."
0,"It seems that the variable, method and class names are all intuitive and make sense for their respective functionalities."
1,Test Plan included in format (table of contents) but has no content.
1,"A high-level overview is given in regards to what was done and why it was done, but it is not explained on a case to case basis exactly why things were named as they were. I think significantly more detail can be given here."
0,"The module seemed working fine, I didnt get any error messages."
0,"Their code was DRY, and  followed most of the protocol."
1,Some names seem too minimal to me(get_min_max_avg_value_for_review_report replaced by get_review_metrics). Others were fine
1,Test plan pending.
0,They expanded on what they did and the reason as to what they did it was clear.
0,Yes the problem statement and what they did was clear to me. The purpose of the project was also clear.
1,Moving the Create_report_table_header function's code to partials is missing in the code commits.
1,No tests added
0,Reafactoring of methods is done in a much better way by removing reduncdany information from the method name. The methods are easier to understand and makes more sense while reading
1,"There is no test plan included in the wiki. As per the writeup, looks like the team is yet to update testing plan and the corresponding tests"
1,"Authors have mentioned that the team has used Strategy Pattern in the last section of the wiki. Overall, there are just 28 lines of code added and I am not sure where this pattern has been used.  From the three partials changed, the method names are changed and in the helper file,  its mosly refactoring the method name and adding comments
 
Any inormation on how the team has used the Strategy pattern and why did they use this pattern would help the reviewer to understand the writeup in a better way."
0,The code works properly for the test cases I trie
1,It does not include a test plan.
1,"The test coverage was reduced by the changes. Also, there are a lot of code climate issues that came up. You can work on them to overcome that and it will help in improving it overall."
0,"The changes are valid for the name of the functions, variables, and classes. It is easy to follow the names."
1,"The writeup mentions the changes performed but not the motivation behind it. Also regarding the Design principle, it just mentions the pattern but not the part where it was used. It would be easy if you could point out the part where you used the pattern in the writeup."
1,The writeup is very well written and it covers all the changes they performed but not the reason as to why a certain change was performed. Can include extra information regarding the reason for the changes.
1,"Not able to manually test.
We couldn’t find any repositories matching 'upadhyaydevang004'"
1,No tests added.
1,"""Function placed in the view as partials"" mentioned in the wiki is not present in the ""files changed"" view of the pull request - doesn't look like this code change made it in?
Requirement ""In addition, functions code can be optimized to ensure that it follows DRY principle"" does not seem to have been addressed.
Only changes in pull request are some added comments and name changes on methods."
1,"Unfortunately, not able to check build or test coverage. 
We couldn’t find any repositories matching 'upadhyaydevang004'
No problems with newly-added code naming."
0,"Based on the writeup, the Strategy pattern was used.  This seems reasonable."
1,"The team has worked only on refactoring for now. This has not affected any other features and is working correctly. There is no specific code as such which is written but the refactored method names seems to follow a good naming convention. Basically, the refactoring has been carried out correctly. Proper comments have also been added. The code that must be added to the views as partials has not been implemented yet. Also, tests are not written."
1,"Currently, no test cases have been added by the authors for the work that is implemented."
1,"The writeup is well written and easy to read. The method names that have been refactored are done with a great meaning. It clearly explains what the method is about along with maintaining the meaning. The methods also include comments which gives a better idea about the method definition. But, the writeup is adequately descriptive of the work done. The writeup includes a code which is added to partials, but I am not able to locate any code. That part of implementation is still incomplete."
1,The writeup includes a Test Plan section but it is empty. No tests have been written for the implementation that has been carried out.
1,"Yes, the writeup explains why they did the work in the ""Problem Statement"" section and how they did it in the ""Implementation"" section.  The writeup also gives a better understanding on how will it be done through a flowchart. The team has also included a design pattern in the writeup which is the ""Strategy Pattern"". According to me, this looks correct because in this pattern, a particular object handles the request without hard-coding knowledge. The writeup does not include any information regarding the testing section of the project."
1,"The writeup is very clear and consists of adequate information about what functionality the work is related to. By reading the Wikipedia page, I could understand what the project does. The project involves refactoring ""review_mapping_helper.rb"" file where certain function names must be refactored and comments must be added to the the functions that are refactored. The writeup indicates all the methods name with the refactored names along with all the comments added. The writeup does not include all the work that the team should carry out. Testing section is incomplete."
0,"Since it is a Mozilla project, cannot comment on coverage. 
The team has added test samples that runs their changes to the code."
1,They had some unresolved feedback/issues in their pull request. My biggest concern is that they did not add any new test cases and so they may have inadvertently messed up the functionality of the system.
1,"The project is not ready to be deployed. The biggest concern is the build failure. Also, the authors have not provided a VCL instance to test changes and not given screenshots in the documentation of them having tested those changes. This makes me a little apprehensive of deploying these changes. I do think that the work that has been done is worth while. It just needs a little more effort to make the build pass. I don't think that this warrants enough work that another team has to be assigned this project. If this team could just complete this since they already are familiar with the changes they made, that would be perfect."
1,The build doesn't seem to be passing in Travis CI. They seem to be having problem with the test cases as well as something in the code as well because Travis CI finished with status error.
1,"No, the project did not pass the build in Travis CI. The build failed for several checks. So yes there are several conflicts that must be resolved before merging."
1,"The Travis CI build fails, and I am not sure why that is so. May be the team could show us the builds using a screencast if it was working for them and the PR messed something up. Nonetheless, they have put an effort to rectify the previous build issues."
1,"The build did not pass in Travis CI. Also, they did not submit a link to the pull request in their submission, which meant I had to go and find it on Github. It would have been helpful if they had submitted a link to it in their submission."
1,Travis CI failed but in the pull request 7 days ago. Please submit the pull request hyperlink as well. I couldn't find a new pull request for the second round.
1,"The write-up is clear and concise - it does the required job to make the reader understand the motive, goal and way of implementation of the project, however there are a lot of ways to improve it:
1) A demo of the working code could be given
2) A fllow of implementation could be shown to visually draw the MVC interactions used for the project 
3) The writeup could mention what more needs to be done to complete the project in its complete sense or any future refactoring needed.
Basically adding more visual components to it could have improved the quality of the wirteup"
0,The writeup is well written and they have maintained good structure for how they have performed their task.
0,Written clear and concise.
1,The writeup is very explanatory but they have not added any snippets of their code showing where and what are the changes they made. It would make it much easier for the reader to find the issues and understand them.
0,It looks like the system works as intended from the UI.
0,"Project works as intended, the tests work as well as the UI."
1,This project seems to implement a lot of new code and I am not sure how to test the working UI for it. It would have been helpful if the project was deployed on heroku or if the group show ed the working UI through screenshots or screencasts.
1,"The team has not deployed it on Heroku neither it has given a screencast of the project which shows that it does the task intended. 
I would have suggested that since it is difficult to set up someone's project and even there is no way mentioned well on how it was before and how it is now for the task to be done."
1,It does not look like they added any test cases for this project or increased coverage.
0,The tests cover the material that the students worked on. Code coverage was increased while also working properly.
1,"The buld failed, so we could not test if the test cases passes or  not. They seemed to have a test plan but I am not sure where they have been implemented. May be that could be written in  the documentation. The test plan seems to cover all the test cases for the functionalities they have included."
1,"The team has added test case using Rspec and covers a good range of the project which checks the email functionalities. 
I could not find CodeClimate in the commits. I don't know why"
1,No new tests.
0,"Yes, there were commits made during the second round."
0,New code was committed in the second round.
0,"Yes, 2 commits were done during the second round."
0,I see commits have been made for the 2nd round and the code seems to be updated.
1,"The documentation is very thorough and good so far. However, I suggest adding more detail about what changes your team made rather than about Servo as a whole."
1,"I am unable to see the pull request because the link submitted to expertiza is the github page of one of the team members itself, instead of the pull link. Although the pull request might actually be working, I apologize for the 1 star, but I have no clue as to what is actually happening."
0,Code is pretty good. Follows DRY principle.
0,"I did not find any bad convention before nor now. 
The project does a good job in maintaining the Ruby naming conventions."
0,Fairly DRY
0,The code seems to be pretty efficient and there seems to be no DRY problems or bad code style.
1,"Though their write up describes the process well and can be mapped to a few design patterns, they have not mentioned explicitly which one they would be using and why."
1,"They gave a very good explanation of their problem statement and their approach to solving each problem, as well as the progress they have completed for each part of the project. While they did not name specific design patterns, it looks like their approach was well-thought out."
1,"The motive although seems logical as to why this functionality is needed but they have not mentioned as to why they followed the method.
No, I could not find anywhere mention of the design principles or patterns written."
1,"The writeup is very clean and explanatory. They have mentioned the ways they are trying to solve their problems. However, they did not add any snaps of what their code looks like after and before the changes, which i think would have explained their project in a better way than explaining the code in words."
0,"There is some work left to be done. But as of now, they have used test driven development and they changes that they have made to the code make sense."
0,"Yes, Implementation approach specifies how the work was done."
1,"They used the testing section to explain their test for making sure email notifications come through. Besides that, there is nothing written here, but they did state it is yet to be done, so they know there is work to do."
1,test plan section is not included so
1,"They have thought about the test plan approach already, which is great. The plan misses edgecases and example inputs but they will probably complete that by the final deadline"
1,"The problem statement clearly explains what is missing from the project, however I would say not to talk about possible solutions in the problem statement section as it can get confusing as to if it is a problem or just an interesting talking point.
The implementation section was well written and I had no issues understanding what was added to the Expertiza project by them. They have nice status checks along the section, along with the rest of the write-up helping the reader know what has been done and what still needs to be done."
1,"code is clean and easy to understand, may need to add more comment to explain the function if possible"
1,It clearly explains all the functionalities that the work is related to. It also explains the functionalities that 'might' be possible source of error. The explaination is clear and intuitive. It could have been made better by  listing down all the places where email notifications are needed and then coming down to why they are only looking at the mentioned functionalities.
0,Problem statement written in the wiki is clear.
1,"The problem descriptions are not very clear. It takes a lot of effort to understand what the authors are trying to say when it can be said in a very simple manner. for eg: ""Including a specific link for the deadline reminders email functionality for reviewers"" is not at all clear. It will be much better understood if you say: ""Sending emails with links to reviews""
I like how you have mentioned how far along you have come to completing the task."
1,"The writeup is well-written; however I suggest they change the title of their wiki page to reflect the title of their project. It is currently just ""ahp project"" instead of ""Improve e-mail notifications"" or something like that. Other than that, their writeup seems comprehensive and gives a good description of the project."
1,"For the problem statement, it is not clear what is being investigated in the first bullet point. The other two bullets points, however, are more clear."
0,"They have a section named Problem Statement, which is pretty descriptive and makes it easy to understand what functionality the work is related to and what they are trying to do."
0,"The functionality is yet to be complete as per the documentation. Hence I wouldn't be fair to say that their code does not work. Also, they haven't deployed their project on Heroku or VCL."
0,The code works properly as far as I can tell.
1,No testing way has been described and I am unsure on how to proceed with manual testing. Steps to test needs to be added and deployment on herokuwould enable us to test the latest changes.
1,Half the functionalities were only implemented so was not able to test the project fully.
0,Most of the features are working as intended.
1,The work doesn't seem to be passing all the edge cases.
0,Code followed all the DRY principles
1,I really the like the additions to the code. I  would just like it better if you deleted the code by removing instead of commenting it out as I wrote earlier.
1,"More comments are needed and functions are occasionally too long. Not completely necessary to fix, however it would be nice."
1,"Few functions, like 'perform' in  delayed_mailer.rb seem to perform more that it should. In such cases the helper can be used.  The DRY principleshave correctly been used ad the naming scheme is good."
1,"The code could certainly be DRY'd out a bit more - particularly delayed_mailer.rb. For example, instances in which a method is called more than once for two conditional if statements occurring in immediate proximity indicates that the conditions can be combined into a single if statement."
0,The code seems to be fairly optimized and is in agree with DRY principle.
1,I cant see any pull request.
1,"I like the length of the newly introduced methods. They are very easy to understand. 
I would just suggest you to remove code not by commenting it out as you have done in lib/tasks/background_email_reminder.rake but by removing it alltogether. It gets very confusing for the next developer to understand why the comments exist."
0,"Their variable, method, and class names make sense and are indicative of the functionality."
1,"Overall the code was great and there was not any issues in naming convention. However, adding some quick comments stating what each of the methods do would be great. Along with that, offload some of the work in the methods created into separate functions that are called from the method. This will improve reading of the code as it does not look too cluttered."
0,"the variables, methods, and class names are good"
0,I did not find any bad naming in the variables or methods. And so far their progress seems at a good rate.
0,"Variables, methods, and class names are in good order - descriptive of the functionality."
0,"The names they have used for their variables, classes and methods seem to be fairly appropriate."
1,Not sure how to manually test this work because the project was not deployed and functionality was not changed. N/A?
1,"Code is definitely improving, some suggestions follow:
Some methods may actually be too short and not used enough to be standalone methods. Consider update_due_date_id and update_assignment_questionnaire_id. These are both 3 line methods that only get called in one place. Maybe they shouldn't be separate methods?
It looks like some methods that take a due date as a single parameter might actually be best refactored as instance methods on DueDate. Consider meta_review_allowed? or drop_topic_allowed? to be potential candidates. In other places, you do the type checking directly (such as line 291), at least be consistent with helper methods versus direct checking.
Why does assignment_staggered_deadline? set the variable to true always? Should @assignment_form.assignment.staggered_deadline be renamed? 
The array_traverser function looks like it does two different things with the options, both of which are kind of unrelated."
0,Names are a big improvement over former names.
0,Improvements section provides excellent justification.
1,"Please clarify what variables you will rename. Are these local variables in methods or instance variables? Aside from that, very thorough."
0,"As the Travis TI has passed, we can say that the features are working as expected"
0,Looks good to me
1,"The variable names and other stuff looks clear. I am not sure why the team used this line when compared to the previous version
['Super-Administrator', 'Administrator', 'Instructor', 'Teaching Assistant'].include? current_role_name
One major reason not to use this kind of coding is this line crosse 79 characters. The previous version that ran across various line was much easier to read and understand. In case, if you take up code review, you don't wnt long lines like these in your code"
0,There was no addition to test plan. The team has used the same tests
1,"In this case, there are no major changes need to be taken care and I beleive team has explained in a better way.
 
The only place I would like more explaination is in the Code Improvement section that exlains about delegation pattern. Some of the unanswered questions are

Why did you use delegation?
What made you think delegation helps here?
How did you use it?
Did it help make your design clear and easy?
Is the code you implemented really follows delegation?
How are you testing this pattern?"
0,"Yes, the authors have tried to explain most of the aspects clearly and is easy to understand. The problem statement is clearly mentioned and the steps taken is also mentioned.
Wiki is clear and easy to understand"
1,Could not find the deployment link to check the features manually.
1,"They have made sure the existing test cases are passing.
They have not added any test cases for the methods modified.
I think test cases are needed for the modified methods(not the name change)."
1,"They have renamed the methods as per the design document and this was one of their project objectives.
They have added a new method called array_traverser which is not very self explaining of what its traversing.It think it can be better named.due_array can also be named better specifying the array."
1,"They have not added any test cases but I believe they should have done that(unit test) as they have refactored some methods in an attempt to make them DRY.
They have not deployed their project so I could not test them myself but they have mentioned that their existing test cases are passing(Screenshot of it could be shown here)."
1,"The team have very nicely explained what they have tried to achieve in this project.They have explained how they have tried to make the code DRY.
But as stated above some more explanation about the changes they have done would be better.On example of the method showing why its named like the way they have done will be good."
1,"The writeup for the project do explains the motivation behind it and what they have tried to achieve in it.They have given examples of the methods whose name they have changed to make them more Ruby friendly.
But I believe some more explanation about why naming them like this should have been there.It was a little difficult for me to check the code in Expertiza and figure out what the methods are doing(to check if they have named correctly).Some screenshots or explanation  can make a third person to better understand what and how the implementation is being done."
0,While checking their Pull request all the checks have passed and there were no conflicts that needed to be resolved. The build passed in Travis CI.
0,"The Test Plan very much looks complete enough. Yes, the authors have considered all the edge cases and these edge cases have discussed in the wiki page. Invalid inputs and other possibilities have also been discussed in the wiki page. The team has covered all the scenarios."
0,I have checked the pull request. It looks it did pass Travis CI.
0,"The build was passed in Travis CI.
There are no conflicts."
1,"Yes, the latest build pass Travis CI tests. Great work by the team to ensure Travis CI passed. I see the following output in the Travis CI:
Finished in 6 minutes 0 seconds (files took 7.32 seconds to load)
79 examples, 0 failures, 22 pending

Finished in 6 minutes 38 seconds (files took 7.29 seconds to load)
122 examples, 0 failures, 24 pending

201 examples, 0 failures, 46 pendings

Done. Your build exited with 0.
There are no conflicts with the base branch and team's code changes done in in their repo in the beta branch. Again, great work! If there were any conflicts, team resolved it by synchronizing their beta branch with the expertiza/beta branch.
However, Expertiza-bot also reported 2 warnings (it reported no errors):
- You changed YAML (*.yml) or example (*.yml.example) files; please double-check whether this is necessary.
- You modified spec/factories/ folder; please double-check whether it is necessary.
That is something that needs to be checked and addressed with your mentor's help. Did you really change *.yml files? If not, then this is False Positive warning. If yes, why? Our team also faced some typical warnings and after contacting our mentor we were able to move forward by identifying them as False Positive. I suggest contacting your mentor and discuss the origin of these warnings and whether they need to resolved prior your work gets deployed onto production server (if you really have not changed *.yml files). If you did, you probably need to explain why and this would be required additional information in your Wiki page."
0,The build passes.
0,Yes!! all the tests have passed and build has passed in Travis CI.
0,Yes the build has passed and the author's pull request is also accepted.
0,From looking at their code and the pull request I can see that they written quality tests with good coverage and their build also have passed without any conflicts. Thus the code is ready to be deployed onto the production server.
0,"Yes, since the code works perfectly, it is ready to be deployed into the production environment. But the team should take care of the data that is associated with the production environment with respect to mapping of newly created instances."
0,The code is ready to be deployed onto the production server.
0,The project has increased the test coverage to 96% and have test all the edge scenarios.Thus it can be deployed onto the production server.
1,"The code is not ready to be deployed onto the production server until it will be clear why team made some additional changes in the unrelated files and why they are included it in the Pull Request. What is the purpose of all the following file changes and why commit message does not align with the changes:https://github.com/expertiza/expertiza/pull/1410/commits/43245cbbdf1926169f842949ca798141ac73be5c
To be clear, I see in the commit message:1. Update factories.rb:I see that in fact, the spec/factories/factories.rb file is modified. But I'm not really sure what is the purpose of this change? Is it required for popup_controller.rb?
2. Rename database.yml.example to database.yml:I do not see that database.yml.example is renamed to database.yml in this commit. Was it renamed and if it was, why? Either way, as I already pointed out in the 1st peer review, you should not rename the database.yml.example file into database.yml. The database.yml.example file is just sample for setting up database, and if you are missing database.yml file, then most likely you did not run ./setup.sh script. Did you follow the guide for setting up Expertiza:https://docs.google.com/document/d/1tXmwju6R7KQbvycku-bdXxa6rXSUN4BMyvjY3ROmMSw/editIn this guide you will find that setup.sh script is what setting up your database.yml file from database.yml.example. You should not do and manual renaming and especially pushing renamed files and include them in the Pull Request (if you done so, and if you have not done so, you commit message should not be misleading).
3. Rename secrets.yml.example to secrets.yml:The same concern as in the above example. You should not rename manually any of the example files. If you run the script, it should be sufficient to setup your environment. I do not see that secrets.yml.example file is renamed to secrets.yml in this commit as message states. Was it renamed and if it was, why? If it was not, the commit message is misleading.
4. Reset database.yml.example:What does ""reset"" mean? I believe you do not need to do anything else besides following the guide for setting up your Expertiza environment. You should not perform any additional actions on the database.yml.example file.
Moreover, in the Pull Request I see that there were additional changes in the app/controllers/popup_controller.rb file, which is expected. However, how did the team verify their changes and ensure that their changes do not break any existing functionalities and do not introduce bugs into the code?
 
I'd need more clarification from the team and in order to answer the question about their code deployment, I need to get answers on commits and code changes.
 
However, as soon as these changes can be clarified and properly tested, yes, this code would be ready to be deployed onto the production server."
0,I think this is ready to be deployed as it is readable and increases coverage.
0,The team has given and improved the test coverage in the project.
0,"Yes, the code follows DRY and is well written. They have addressed a few minor bugs also for the second review and made a good job of it."
0,"They have properly written their writeup which has all the details from  project introduction, team members and the files involved. They have also given links of videos running and files involved were mentioned. They properly wrote everything  in the first round itself and I couldn't find any missing information. They have also properly mentioned the test plan information."
0,"Yes, the write up does explain how and why the authors have composed tests for popup controller and the implementation is very well explained within several contents i.e. Testplan and Test outline. Going through these topics in the wiki page gives a good understanding of the tests."
0,The write is short and sweet. They have included the code of test cases and tried explaining it in simple words which is easy to understand.
0,The write up is really very good explaining the whole project with how and why they have prepared test cases to test the controller.They have included the test cases in their write up with explanation that makes it very easy to understand.
1,"The Wiki page has been improved and some of my suggestions were considered and applied. I see that detailed ""Project Introduction"" was added with multiple sub-sections. It provides really clear outlined information about the project, what exactly team is trying to accomplish (""What needs to be done"" sub-section), how team is going to do that and by what means (""Running Tests"" sub-section) and what it takes to achieve the goal (""Files Involved"" sub-section).
Wiki already looked good in the 1st peer review, but after additional information was added and some of the information re-organized, it looks great! It appears to be concise and very informative. There is no conflicting information in it.
Although Wiki was improved, some of my suggestion were not addressed, for example,
- Move ""Team"" section with their team members to the end of the Wiki since this the least information reader needs to know and it is not as important as all other information there. Also provide emails of each team member.- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages? This is important because you want to make your tests clean.- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).- No edge-case scenarios were added in the Test Outline or Test Plan sections. You need to reconsider this.- Were there any changes done in the app/controllers/popup_controller.rb file. If yes, why and what changes?- Were there any challenges the team has faced while working on the project?
Above is all useful information, and can be included in the Wiki for students to read and learn. However, since most of improvements are completed, I am taking only 1 point off. Good work by the team!"
0,The write-up is good and detailed.
0,"The writeup is well defined and explains every aspect of the project , the project descroption , test , the description of the tests , the test plan the test frame description the mock models to implement the tests and the outilne."
0,"The writeup properly builds as to what is the work that has to be done and after that the authors explain how they have approached the problem, which is also self explanatory. The test outline section is well written and I was able to understand the whole process clearly. They could have probably added a section on the issues that they faced while working on writing test and how they tacked all the corner cases. Could have given the readers like me a better idea as to how to approach writing tests for a controller. Just a suggestion."
0,"This is a testing project and after carefully reviewing it i can see that all the testcases work properly and they have even made a video of all testcases running  with 96.41% coverage. The test cases cover scenarios like testing action permissions, checking whether feedbacks exist, and calculating scores depending on the responses etc."
0,"All the system operations from the UI have been verified. All of these are in refactored as expected and the code is fixed. The tests don't fail. Yes, this is a testing project and as mentioned earlier the tests are cover all the scenarios."
0,"As it is a testing project, there was no change in the usage of system UI. But since test cases are added it looks like the experience of the front end did improve. Yes, it works as intended. This project is a testing project, it covers all the scenarios of the popup controller."
0,The tests seem to cover all the scenarios I could think of.
1,"Since this is testing project, I'd want to assume you do not need to change app/controllers/popup_controller.rb file (or any other application files), and you need to develop and add new test cases only in the spec/controllers/popup_controller_spec.rb file. However, based on the commits I found in the Pull Request, your team made some changes to the  app/controllers/popup_controller.rb and other files. For this matter, you probably should have deployed your Expertiza project onto Heroku or NCSU VCL and provide reviewers with clear instructions on how to perform UI Testing on the code changes you made in the app/controllers/popup_controller.rb file by using deployed Expertiza UI. This way reviewers can ensure that your code changes in the source code did not brake any existing functionalities and did not cause any other issues.
Yes, new Rspec tests cover most of scenarios, but missing some additional edge-case test scenarios. For example, while testing author_feedback_popup method. Why do not test @response_id with nil value (whenever respond_id does not exist). It is possible edge case scenario as follows:
describe '#author_feedback_popup' do
  context 'when response_id does not exist' do
    if 'does not get result' do
      ...
    end
  end
end
Additional tests should be added to test ALL possible scenarios. And certainly, it possible scenario when response_id does not exist.
Overall, if you intentionally changed the app/controllers/popup_controller.rb file (or any other application files), you should have deployed Exertiza project and come up with UI test cases allowing reviewer to ensure your code changes did not cause any problems and did not break any existing features."
0,"Yes, it covers all scenarios."
0,yes the UI is working as intended the test cases have covered all the test cases.
0,"Yes the UI works as intended. As far as I can see, the project covers the required test scenarios. The Rspec testing function works well when I tested the project on my local system. They have written tests for the popup controller methods and the documentation also outlines all the required functionality."
0,I think they added many testcases in the first review itself and thus they have a coverage of 96.41% which meets the requirements. They achieved this in the first round itself.
0,"It is a testing project, so, the team did add many test cases. Yes, the coverage did increase from 7% to 96% which is a drastic increase. The test cases pretty much all the edge cases, all scenarios of the popup_controller_spec.rb controller."
0,The test cases have been added and they have achieved their target of test coverage of almost 96%.
0,yes the test coverage has increased
0,Yes the whole project is about writing tests as stated in the last review. The authors have completed the task at hand and written tests to increase coverage to 96%.
0,"They have made some bug fixes, spelling corrections in the round 2 and as I remember most of their functionality was completed in the first round itself."
0,The team was regular in committing the changes to git. There were many commits being done after the first round of reviews which suggests that they have worked consistently after the first round of reviews for all the remaining functionalities mentioned. After examining the commits it is clear that work has been equally distributed among the teammates.
0,yes they have made commits for the second round
0,I couldn't find any problems with their coding style now and I think they have written some quality tests. One difficulty i had was in the description of some of their test names which took me a little time to understand what it is. Other than that they have done a good job.
0,"The flow used in the writeup was clear to understand what the problem is, what approach did they follow, and what is the suggested solution. They did follow the DRY principle once they have sorted out the issue."
0,The code was in line with the OODD principles. The test cases covered all scenarios in a proper format.
1,"Most of the code changes done are in the spec/controllers/popup_controller_spec.rb file as expected, however, there are several additional changes in the unrelated files that I have doubts about. The team has done great work on writing and developing additional Rspec tests for the popup_controller.rb! I did not find any obvious issues or problems in the spec/controllers/popup_controller_spec.rb file. All newly tests appear to be written well and follow good coding style. I also checked Code Climate results on your Pull Requests and ensured that there are no new code smells introduced by your changes. Great work on this part!
In general, I can conclude the following based on my observations for the spec/controllers/popup_controller_spec.rb file:
 
1. There are no too long lines.2. There is no DRY code in the tests and no code that needs to be extracted into separate tests. All the code appears to be written well and concise. 3. Some test-cases still would need to have comments. All necessary information in comments is usefull.4. Code for all tests follows the Ruby Style Guide. Great work!5. There are no code smells nor DRY code that I could find.6. All created Rspec test cases have clear and well-written descriptions.
However, there are still variable names used in the mocked models that were not improved and lack of meaningful names. I suggested to change some variable names in the 1st code review, but since these are Rspec tests, I guess it is not that important. For example,
let(:student) { build(:student, id: 1, name: ""student"") }
let(:student2) { build(:student, id: 2, name: ""student2"") }
Unfortunately, ""student2"" variable name is not very meaningful and it can be changed to a more meaningful. What about ""bob_student""? But again, since these are spec tests code, it can be left as is.
More concerning issue to me, as I mentioned in the above section, there are some code changes and commit message that I am confused about. The following is a list of problems that I found with the recent commit:
1. I see code changes in the app/controllers/popup_controller.rb file were not properly commented. If you change source code, you must comment on these changes and explain what the code does after you changes. I see no comments on any changes in the popup_controller.rb file. For clarity reasons, also add information why these changes are made.2. Commit message for the ""Fix travis ci (#4)"" contains some comments about actions performed that I could not find in this commit. For example, ""Rename database.yml.example to database.yml"", or ""Rename secrets.yml.example to secrets.yml"", or ""Reset database.yml.example"". Were these actions performed? If yes, why cannot I find them in the commits for this Pull Request? If no, why is this commit message misleading and contains false information?
 
Overall, good work by the team on the popup_controller Rspec tests, but take some points off for missing necessary comments and unclear commit message."
0,I didn't find any issues in the last round.
0,"the test cases are well written and the test coverage has significantly incereased in this case, so yes it should be deployed."
0,"The authors had completed the project during the first review itself and as I had mentioned they had done a good job, I didn't see any repeating functions. The naming was also good."
0,They have clearly explained the tests that they have written for different methods in the popup controller. They have written test code for all functions and it seems that from the writeup it is noted that code coverage is 96.41%
0,"In the problem statement, it is given that there are only two test cases which had test coverage of 7%. So as to increase it, they have made changes to pull it up to 96%. there are 10 methods in the controller which have to be tested including the edge cases."
0,They have explained tests they have created for the controller.They have explained mock models and test frame they have used which explains their approach and easy for a reader to understand.
1,"The Wiki does a great job on explaining how and why the team performed their work. Since the project is related only to test coverage improvements of the popup_controller, the team should not use any design principles or patterns. Only create and write additional Rspec tests to achieve at least 95% test coverage on the existing popup_controller.rb file.
Although team did great job on the write up, there are still some improvements can be made. The following is a list missing information, suggestions and information that can be reorganized:
- Elaborate more on the Expertiza project in the ""Introduction"" section.- What role does the popup_controller play in the Expertiza (you already explain this, but link this with the Expertiza project).- May be move ""Team"" section with their team members to the end of the Wiki since this the least information reader needs to know about.- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages?- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).- Include edge-case scenarios (if any) in the Test Outline or Test Plan sections. Per a given project (developing Rspec tests) your team must consider sone edge-case scenarios and report them in the Wiki. Also, I am unable to see in the Wiki whether the team tested invalid input parameters for the popup_controller. This may not add any test coverage, but performs necessary testing. Develop (if you have not done it so) additional Rspec tests for popup_controller to test it against invalid input parameters and briefly talk about it in the Wiki page.- You need to indicate an effect of your project on the app/controllers/popup_controller.rb file. How many changes did it require to have (if any). If there any changes you performed on the app/controllers/popup_controller.rb file, you need to run additional existing Rspec tests and integration tests to validate your changes and ensure it did not break any existing functionalities.- May be state any difficulties or issues the team has faced (if any) while working on the project.- Optional: May be mention any suggestions for further testing improvements. Identify files with the lowest test coverage and report it. Provide any suggestions on fixing it.
Above are only suggestions and do not have completed in your Wiki. However, the more relevant information you have there, the better any reader is informed on your project!"
0,Thoroughly explained mocking and conditionals
0,"the writeup includes how they did the test write up to finish the integration testing done by the team, they have mentioned what needed to be done and a detailed test plan has been given."
0,"Yes, they wanted to increase the test coverage from 7% to above 90% for the Popupcontroller. assignment_team_spec.r uses integration tests to test methods in controller. The design followed is good and the authors have used them properly."
0,"From the way they have written test cases i can see that they have put in a lot of effort to write good tests for the methods. Different edge cases such as existence of response maps, presence of no review questionnaire has been written. So they have done some good work in writing the test plan."
0,"Yes, the Test Plan very much looks complete enough. Yes, the authors have considered all the edge cases and these edge cases have discussed in the wiki page. Invalid inputs and other possibilities have also been discussed in the wiki page. Looking at the page I feel, the author has covered all the scenarios."
0,In the document i.e. writeup they mentioned that they have considered the edge test cases. The code seems to be using well-known variables which enables the user to visualize test plan.
0,"Being a test project,they have created enough tests for the integration testing of the concerned controller."
1,"The Test Plan in the Wiki also includes ""Test Outline"" section. Well done and have complete information on the test strategies performed on the popup_controller.
- The team considered different pre-conditions: Role of the current user varies from being student, ta, (super) admin, and super instructor. Calculating the score with and without responses. Testing tone analysis given varies pre-conditions (answer does and does not exist, and etc.)- The team has also considered scenarios with different users of the same type (i.e. ""student"" and ""student2"" are both of student type). Great job on running some scenarios with different users but the same type of users.- I did not find any edge case scenarios in the given Test Plan. May be team needs to elaborate on them more. If the team did not write edge-cases Rspec tests, these need to be developed. Please include any related information about them in the Wiki page.- Unable to see if the team tested invalid input parameters in the popup_controller. That's something that can be included in the Wiki as well. If such tests were not considered, the team must develop such test cases.- All other ""general"" case scenarios were well covered by the team in the ""Test Outline"" section!
For Test Plan please also consider adding the following information:
- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages?- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).
I did not find any other missing information in the Test Plan. Overall, great job by the team with giving that many descriptions in the Wiki!"
0,Edge cases thoroughly covered
0,"the test plan clearly articulates the controllers that are involved and the conditions that they have given to mock them , the DB and the factory of each controller has also been given."
0,The whole project revolves around tests and I was able to see that the authors have been able to complete the tests for popup_controller successfully and all the tests were understandable and it all worked.
0,They have properly given what the project is about in their introduction and have even given proper information on the files involved in the project and how to run the tests. Detailed information about the pop up controller has been provided.
0,The write up is very crisp and to the point. The author has divided it into several contents and has made it easy for the reader to understand. The wiki page has a good flow and leaves no confusion to the reader. Implementation has also been explained in a proper manner using snippets of code.
0,"The wiki page is to the point. It is a testing project where they have to make changes in the code to increase the test coverage.
the page is segmented into sections addressing what is the problem and what approach have they followed. The code was attached in page aiding the reader."
0,The writeup describes clearly what the project objective is.It explains in detail the tests it has created.
1,"The Wiki page looks great! Very informative, concise and detailed write up with snippets of pseudo-code for testing developed for and performed on the popup_controller.rb file. Great job on explaining and getting straight to the point on what is the goal of the project and what the team attempts to achieve!
The ""Project Introduction"" section explains well what is the popup_controller and what it is responsible for. It also provides information on the given test coverage (prior the project implementation) and what is the goal of the project (achieve test coverage to at least 95%).
I like that the team specifies how the Rspec test can be run on the popup_controller and what files the project implementation involved.
The ""Test Plan"" section does a great job on reflecting how popup_controller 10 methods are going to be tested. It provides a mock models for testing various conditions in the popup_controller. The ""Test Outline"" also is very comprehensive section explaining how each method is going to be tested and under what conditions by providing pseudo-code.
Also having ""Conclusion"" section is very helpful to understand how integration tests is performed utilizing the Rspec written by the team in the popup_controller spec file.
After reviewing the Wiki page, I can conclude that it contains enough information to adequately indicate the work that has been done by the team. However, there could be some improvements made to elaborate more on the testing strategy and introduction section in general. For example, the Wiki does not address what is the Expertiza project. Try to elaborate on it a little more, indicate that popup_controller is part of the Expertiza (not only it is responsible for data preparation that is displayed to the user, but the entire project is related to Expertiza source code).
The ""Test Outline"" section should also indicate what is getting tested in each method (i.e. incoming/outgoing query or command messages). Indicate why certain messages or methods are not getting tested directly like others (remember not to test private methods, sent to self messages, and outgoing query messages). Please refer to ""The Magic Tricks of Testing"" by Sandy Metz.:https://www.youtube.com/watch?v=URSWYvyc42MInclude that video in the references as well.
Also it would be very informative if you provide some specific Rspec tests samples that you written as samples or screenshots. you are doing great job explaining high-level details and specifying strategy utilizing pseudo-code. However, try to go into a little more details and provide some code samples of the Rspec tests.
For more missing information, please see below section."
0,"the write up clearly mentions about the increased test coverage and details about how they did it, and involved in the work. The desired goal of increasing the test case cooverage upto 90% has been succesfully achieved"
0,The writeup is self explanatory and I was able to understand the flow used by the authors. They have written detailed tests for the popup controller in popup_controller_spec.rb and have explained what has been done in the wiki. The Rspec tests are written to make the statement coverage 96% and I didn't have a problem understanding the work done.
0,"After manually testing, everything works as it is supposed to and i couldn't find any irregularities or errors. Test code coverage is 96.41% as mentioned in writeup. All features work as it is intended to."
0,The test cases pass so far. They have covered all the test cases.
0,"Being a test project and no additional functionality added,the features work as were doing in the initial version."
1,"I guess for your project, project deployment is optional. However, for manual testing of app/controllers/popup_controller.rb file (if it was modified), I suggest to deploy the project on Heroku or NCSU VCL. Team did not deploy their Expertiza project or did not provide information on their deployment in the submission.
For manual testing I used the same code that I cloned from forked repository ""https://github.com/YChen239/expertiza.git"". I did checkout ychen239 branch and ran the bundle server on my local environment. I performed short UI testing on the app/controllers/popup_controller.rb file and observe no issues in that file.
All existing functionalities in the controller seem to work properly! Great work.
This is completely optional: deploy Expertiza project on the Heroku or NCSU VCL."
0,Running rspec was successful.
0,"the features and the test result do align with the work of the author, the tests are well written and concise"
0,The code runs well and I was able to run the Rspec tests and got the output as described in the video. So I would say good job has been done.
0,"1) some of the tests found are too long.
2)tests have  been written correctly but some of them are a little long
3) Can properly understand what the test does and proper comments are done for example comments for tone analysis tests have been properly given
4) The code follows proper ruby style guides.
5) Code has been written properly"
0,"Yes, some functions are long but they are clear enough for a user to understand and comprehend. The author has very well separated the code into several small methods where ever necessary and I don't think more methods are needed. Enough comments are provided for each statement and the comments help a lot to understand the code. The code follows the ruby style and there are no code snippets that are repeated inconsistently."
1,"Team has done great work on writing Rspec tests! I did not find any obvious issues and also checked Code Climate results on your Pull Requests. There are no new code smells introduced by your changes. Great work! However, the Rspec that were developed need to be well-commented and documented. I did not find much comments in the spec/controllers/popup_controller_spec.rb file. Please provide sufficient comments on the test that you developed briefly explaining any necessary information (i.e. pre-conditions, edge-case, invalid input parameters) and other important information about the tests.
1. There are lines in the Rspec tests that are too long.2. There is no DRY code and no code that needs to be extracted into separate tests.3. Rspec tests in the spec/controllers/popup_controller_spec.rb file need some comments. Briefly in the comments provide any necessary information.4. Code for Rspec test follows the Ruby Style Guide. Great work!5. There are no code smells nor DRY code that I could find.
Overall, great work by the team on the popup_controller Rspec tests!"
1,"The context:
it 'build tone analysis heatmap' do...
is empty. You should either take it out or fill it in (for more test cases). Otherwise, your methods are appropriately sized and I could follow the code easily."
0,the edge testcases have been given and seem to be sufficient
0,The overall code looks good and I did not find any major problems with the implementation. Functions are defined well and comments explain why they have done a particular functionality very well.
0,"By looking at the code, I can see that all the variables used perfectly depict the functionalities and does not need any changes."
0,"Yes, I checked the pull request and the build passes successfully. Yes, the test coverage increased. I checked all the variables, methods and class names. I don't think that there are variables that are are not reasonable or not relevant."
0,The variable names are easy to understand and decode. The structure of coding is pretty much with the norms of the coding practices.
0,The test cases written are as per the RSPEC standards.
1,"There are few general points I would like to address on the code in the Pull Request and forked repository:
1. Your changes should not be done on the ""master"" branch (that's where I see most of the changes in the forked repositoryhttps://github.com/YChen239/expertiza/tree/master
2. You should not rename database.yml.example into database.yml file:https://github.com/expertiza/expertiza/pull/1398/commits/b2383543ad1fdea507fa5f30b9b5a5c4206b2a25The creation of the database.yml file should be part of the ""setup.sh"" script that you supposed to run as part of Expertiza installation. Did your team follow this guide:https://docs.google.com/document/d/1tXmwju6R7KQbvycku-bdXxa6rXSUN4BMyvjY3ROmMSw/editYou should not manually create or copy this file.
3. Travis CI build is failed on your pull request with the following errors reported here:https://travis-ci.org/expertiza/expertiza/builds/512099771?utm_source=github_status&utm_medium=notification""The command 'cp config/database.yml config/database.yml' failed and exited with 1 during .""Please make sure to follow the guide on setting up your expertiza project.
4. I cloned your code from forked repository ""https://github.com/YChen239/expertiza.git"", checkout branch ychen239, and manually ran ""rspec spec/controllers/popup_controller_spec.rb"" on the popup_controller file  to check the results and see the test coverage. This is result that I obtained:
Finished in 5.11 seconds (files took 9.52 seconds to load)15 examples, 0 failures
Test coverage has increased from 7.23% to 71.69%, which is expected and indicates that the team has performed their job.However, I could not get test coverage above 95% per the requirement specifications of your project.
5. Test coverage after running test locally on popup_controller only increased 71.69%. Please note that the same command running on the master branch breaks the code and gives the following error:
An error occurred while loading ./spec/controllers/popup_controller_spec.rb.Failure/Error: load_dependency(file) { result = super }
 
The following notes are related to code style on your changes, variable, method and class names, and other RoR coding practices:
- All created Rspec test cases have clear and well-written descriptions.- Variables names used in the mocked models can be improved and have more meaningful names. Consider improving the following:
let(:student) { build(:student, id: 1, name: ""student"") }let(:student2) { build(:student, id: 2, name: ""student2"") }
into the following Mock:
let(:alice_student) { build(:student, id: 1, name: ""alice"") }let(:bob_student) { build(:student, id: 2, name: ""bob"") }
Similar changes can improve the names on the mocked models."
0,"the team has clearly given the test work for the project and also, the tests have been added and written"
0,The naming used seems sensible to me and the authors have done a good job with commenting the work done so that it makes it easy to follow.
0,From the video provided i can see that they have automated all test cases and it has 96.41% coverage. They have properly written all test cases as mentioned in the test plan
0,"Yes, In the wiki page there is a section Test Plan which gives a great understanding of what the team has implemented and provides a good outlook of the whole project. Also, I didn't find any automated tests are incomplete or missing. the authors have covered all the responsibilities assigned to them in the project."
0,The project is entirely about test cases. They have worked on it and tried to cover as many edge cases possible for all methods in the controller.
0,"They have created tests as they have described in the Test Plan.
The video attached shows the tests have passed and increased the coverage as required."
0,"the have clearly followed the test plan and the tests are RSpec, also in total of all the 10 methods in the popup controller have been tried and tested by the team, and several differnt roles have been succesfully mocked by the users"
0,Yes all the tests pass and the authors also have a video that shows the Rspec testing.
1,"Testing section needs to be improved. Please include all of testing strategies team used to verify integrity and correctness of the code. Provide enough information indicating how the code improvements/changes were verified and tested against new issues that could be caused by your implementation? List all relevant testing steps performed on the fixes that you have done.
Ensure to test your code changes/improvement with at least 3 following steps and include results/observations in the Wiki page:
1. Code inspection
2. Passing/fixing existing Rspec tests (you still need to fix ""response_controller"" test)
3. Running through a live demo in the Expertiza instance through the UI that runs over changed/improved code in the controller (you may even record a short live demo and submit it here)
The above test strategies are sufficient to ensure integrity of the code and indicates that you did not introduce new issues into the source code. Complete this information into Testing section."
0,I think this can be deployed just after checking the climate code issues.They have properly refactored it and thus it can be deployed.
0,The write up has been improved tremendously from the previous round.They have added explanations about how and why they have refactored the methods.They have added the explanation for the design pattern they have used.It clearly explains their objective and how they have approached and implemented it.
0,"Team has added test cases which were missing their 1st submission.The coverage has also increased.
They have shown a video passing the rspec test 100%."
0,"Yes,the build pass the Travis CI.
There are 3 climate issues not fixed but they have mentioned in the writeup that their mentor told them to ignore it so its good."
0,"They have some changes to the code and comments in the 2nd round.
They have fixed some code climate issues.
They have added tests for their code which was missing in their first round."
0,"The project being related to refactoring the controller,they have done refactoring following the rules and procedures of Ruby.They have given suitable names to the methods.They have added explanation from their last submission which clearly explains why they have named methods as they have named.I really like the explanation in the write up.
Some variable names were not clear previously but now they have explained it all and it is clear now to understand the code."
1,Not sure how to test the code.
1,"Some methods do not have comments.
A lot of unnecessary new lines have been added."
1,Some method names are still too large and have increased after refactoring.
1,No info about whether manual testing was performed to make sure nothing breaks. The authors claim that there are quite a few test cases but the code coverage has reduced.
1,"Missing Refactor ”action_allowed?” method and remove duplicate code part in the writeup.
Create method refactoring was not required as part of this."
1,The code doesn't seem to be working for all the edge cases.
0,The code seems to be fairly optimized. I think they were in accordance with the DRY principle.
0,"The method, class and variable names they used seem to be fairly appropriate. I couldn't find any name that didn't fit its place."
1,They have mentioned that they did not add any new test cases to their project yet.
1,"Everything in their writeup is clean and understandable. But in the introduction part, i felt like they explained some things which are not so important and are really silly to understand and did not need that amount of writeup they gave for those things. I think they can still optimize it."
0,Their writup is very detailed and easy to understand. They have given the description of the project and later explained the changes they did in the various files to get the tasks done. I was able to understand what the project does.
0,The build passed and the PR does not appear to have conflicts.
1,"The team did add test cases but do not indicate an improvement or change in statement coverage. I'm not sure where you tested pagination, I could not find that in the spec files. May want to mention that in the writeup. In the test for list_pending_requested, you may want to give a better ""it"" statement. Such as ""it renders the correct view""."
0,"All operations appear to work as intended. Thank you for writeup in wiki, that was helpful for testing."
1,"Why did you change files in the bin directory (such as bin/rails)? If this was unintended, you should remove these changes. You also may not need to send the .coffee and .scss files; you may want to remove these."
1,"No. The tests seemed to have failed.  The message tagged on the pull request was
Travis tests have failed"
1,"Yes, they made many commits after the 1st review. But they even made commits after the 2nd round deadline, which shouldnt be allowed."
1,"Yes, they moved some of the testing modules and added test for new code. But coverage is not done well."
1,"From the project perspective, everything seem to work ok. No errors found as of now. But the test coverage is lacking."
0,the writeup was made clear and transparent. We get a good idea about what they are doing. They included repo links and pics to further explain what they did in detail. They improved from their previous writeup.
1,"No, the code is not ready to be deployed as the pull request is failing several test cases. So this project should be redone at the points of failure."
0,"Well written, couldnt find any glaring issues. Their code was minimal and DRY. Everything was sufficiently done(comments, code, explanations)."
0,"The team did write the code well following the design book i.e. adding comments, DRY principles, rendering partials in views, etc."
1,"It is an expertiza project. I have checked the pull request, build did not pass in Travis CI. There are few conflicts to resolve. ""Please click the following black triangle  in order to see the detailed information.
It'll be awesome if you fix what's wrong and commit the changes."" 
This is the comment seen in the travis CI section."
0,"The wiki page gives the test plan, Seems like the team has build some test cases or modified the older one. They have test cases to  spec/controllers/account_requests_controller_spec.rb file. Since this is not testing project, they haven't mentioned about test coverage in the wikipage. It looks like the team added additional test cases to check the account_requests controller."
0,"I did try to perform system operation from the UI. It seems to work fine. I have not given much input or tried testing edge cases but a simple work is working fine. this project is about refactoring users controller. The code was shifted from one controller to another, partial codes are written and are rendered in the views."
0,"the document is good. I thought the team should have included some code in order to explain in a better way, but the git says that they have modified 58 files which is like many files. So it is too much work for the project. good work team."
0,"Some commits, but nothing major."
0,"Test passed, good job... I wasn't able to get mine to"
0,"Things seem to work, and very impressive the team deployed their implementation."
0,Write up is awesome! Very clear and detailed.
0,Ready to rock
0,All the builds have passed
0,New test cases were added and the coverage increased from 15% to 26.27%.
0,The system operation from the UI works as intended and the features are working as they are supposed to
0,The write up is very elaborate and explanatory
0,All the builds have passed and I think it is ready to be deployed
1,"In the account_requests_controller, the roles_for_request_sign_up method does not need a separate method.
In the users controller starting on line 60, shorten the comments a bit.
Remove commented code lines in the users_controller (line 252-4).
Long comments on 226 would be better placed in the wiki. Remove the project number indication from comments.
For pagination, is there a reason you pass options and not a number (that being the number of records to retrieve)? Why have the mapping on line 242?
Aside from small details and comment changes, code looks good!"
0,"Yes, Based on the UI experience and the code changes and Rspec testing, this code changes can be merged with Master (after passing Travis for sure!!!)"
1,"Yes, writeup clearly explains one part of the project, that corresponds to Pagination of the User page. The reason to choose is clearly mentioned and the team provides enoughtinformation for the user to understand.
I would suggest explaining the problem statement at length (Separate all methods related to the workflow of a RequestedUser object). For a first time user, the explaination for user_controller needs to self sufficient. Also, as there was no RequestedUser controller, explaining the need of this object or how it is being handled and why do you need this to be moved out would help the reviewer to understand in much better way
 
The changes asked in Round 1 were not implemented in this round"
0,UI is seamless and looks great. The hint added in the text box gives the user a clear information on what needs to be done. This also seems to an optional field and can be used only when necessary.
1,"Team has created the new test file based on the requirements for this project. As the team introduced new controller in ""account_requests_controller"", a corresponding Rspec file has been created and the tests from users_controller.rb has been moved here.
 
However, there is no additional test cases added by the team. As there has been quite a few changes in the way account is requested, adding few tests here would have made more sense."
1,The team has pushed the code to Beta Branch and have not synced with master to run Code Climate/Travis or other services. I would suggest team to read through Piazza post that tells how to sync the branches in GIT
1,"There was no code changes in the 2nd round. Also, the changes informed in the first round of reviews don't seem to be made into Author's work.
 
Additionally, the number of commits is too high. there have been numerous failed commits. I would suggest testing the code locally and then commiting only when you are sure that the code is running as expected
 
866fd44
 @kunalnarangtheone
Comment get user list for testing purpose
f8eb234
 @kunalnarangtheone
Comment get user list for testing purpose try 2
480cf9c
 @kunalnarangtheone
Comment get user list for testing purpose try 3
702c09a
 @kunalnarangtheone
Comment get user list for testing purpose try 3
e4f557d
 @kunalnarangtheone
Comment get user list for testing purpose try 4
a7dfd02
 @kunalnarangtheone
Comment get user list for testing purpose try 5
e9cd8ba
 nikitaparanjape
Merge branch 'debug' into beta
5a3fb0a
 @kunalnarangtheone
Comment get user list for testing purpose try 6
fc3c246
 @kunalnarangtheone
Comment get user list for testing purpose try 7
dec02d7
 @kunalnarangtheone
Comment get user list for testing purpose try 8
40c497"
1,"Code looks clean in most of the cases. Almost all the changes are done in a reasonable way.
 
One of the concern I have is the usage of Parameterized query in users_controller.rb file (line 197)
 @all_roles = Role.where('id in (?) or id = ?', role.get_available_roles, role.id)
As Ruby Active record in inherently uses parenthesized query and the usage in this context, this line may not be required."
1,"There are changes to the schema.rb file which should not have been included in the pull request. This file should have been skipped. Otherwise, the project seems to be ready to be merged."
0,"This is very well written. The screenshots for the tests are informative. Their manual about how to use their app and see the changes that they made is very clear and it makes the task of a reviewer very, very easy."
0,"It works, and they have also neatly documented how to reach those pages in the write-up so I did not have any problems finding it. I really like that, as otherwise it would take me a lot of time to figure out where their code was being used in the UI."
0,"They mainly moved existing tests to the right place according to their refactoring. Apart from that, a few extra tests do seem to have been added and this has been neatly documented in the write-up as well, with good screenshots."
1,"The build passed, but there are still 9 warnings on the pull request. Most of them are warnings that are not under the team's control such as more than 500 lines changed, but one or two of them such as ""Your pull request has many duplicated commit messages. Please try to squash similar commits. And using meaningful commit messages later."" could have been resolved."
1,There are a alack of comments telling you what each part does or why it was necessary.
0,"Yes, the code has no issues and is merged already."
1,"The writeup is good. They've mentioned the problem statement and they've added solutions for each and every problem. They've also added the test cases that need to be checked. The only problem is that, no information has been given regarding setting up the environment for Expertiza. I feel they could have added that to ease the work for the people reviewing."
0,"Yes, everything seems good."
0,"Yes, the team added test cases and 18 test cases have been passed."
0,"Yes, the build passed in Travis CI."
1,All the tests have passed but a little more elaboration on what it is that they have tested would be helpful
1,"All the test cases have passed but they do not mention what exactly is being tested. If there is a little more elaboration on that, it would be perfect."
0,Every detail is adequately explained along with screenshots.
1,"It may not be directly related to this project, but when I tried to impersonate a student, I got an error that instructor_id is an undefined method."
0,Excellent write-up of the issues and the solutions.
0,The features work as intended. At least I could see some change in the view such as paginating list of users.
0,I think it is a lot of code to review. The team has done its best to serve the purpose of the problem statement. They even did change a few of the views.
0,the main purpose of the project was to split the controller into two for the sake of better understanding two different actions. The variable names that are been used in the project are sensible.
0,"The problem stated in the wiki page is that a single controller was responsible for all the action carried out. The team has split this controller into 3 parts each addressing specific action. For these controllers, they have written test cases. Apart from these, they have commented on the methods which did not have any comments.  They have used partial views to follow DRY principle."
0,"I am impressed with the wiki page. It included all details necessary for a lamen to understand what is the problem statement and how did the team approach it. I liked the way how it is structured. Thanks for the team for posting screenshots of pages on expertiza, it helps better understand what changes are been made."
0,Works fine all the general ui seem working.
0,none of the function names seemed excessively long. Code was fine. Their work seemed DRY
0,They namings were reasonable and according to protocols
1,They wrote about the current state of the tests and the previous state of the tests. The explanation is a bit short on that side as they only said they made changes without including what changes they did.
0,"Yes, they put up sufficient details to indicate what they did and why they did it with screenshots."
0,"Yes, the problem statement is to refactor the user_controller and the writeup was made clear and transparent. We get a good idea about what they are doing."
1,"In the users_controller, you may want to transform the block comments on lines 60-68 into method comments and make them a bit shorter (for instance, lines 62 and 65 are not useful. Would belong in wiki but not in code comments).
On line 130 of the users_controller, is there something in the creation of the AssignmentQuestionnaire that sets the default notification value? Because that seems like a roundabout way to set that. Is there a better way?"
1,"In the account_requests_controller, maybe 'create_approved_user' should be 'create_user'. It looks like this function also has the rejection condition.
You refactored names of 'requested_users' and maybe you should do the same to the method 'create_requested_user_record'. You might want to make it 'create_account_request_record'.
The method 'foreign' does not have a very instructive name (unless that is a special syntax or convention). 'find_user_roles' may be a more informative name.
Personally, I lean in favor of 'get_role' over just 'role'."
0,Very thorough details for changes made.
1,"What is the username and password for the test link provided? I assumed it was expertiza_developer, expertiza but that did not work out."
0,There are 2 pictures showing the test cases all passing.
1,"In the create method, on line 122 where prepared_mail is assigned, I think the method call is long. A suggestion is to have the method call with the parameters on multiple lines instead of having the method call all on one line."
0,I saw no issues
0,"Yes in the ""Design Choices"" subheading. They had the key word ""DRY"" in their explanation."
1,"The code looks pretty much ready. I could not find any issues with it. However, a new team could look into why the code climate tests say some methods are complex and  work on that"
0,"The write up is very clear. The most impressive part is their explanation - what they have to do, How they did it and why they did it for each task!
No complains here"
0,The team had to refactor and the changes code works just as intended.
0,"The team uses tests from a different project with few changes to the name to accommodate the changes they made to the code . For coverage, Travis Cl code coverage is 28%."
1,There was no deployment so could not test the UI functionalty. Would be great if a screencast was added as well. The code seems to work fine when tested manually. Screenshots in the write up would have also helped.
0,The build passed in Travis CI and there were no major issues. The code climate issues were also resolved.
0,New code was committed in round 2 and code climate chaanges were made in round 2 as well.
0,"Their code seems to be showing no errors in Travis CI  and they seem to have fixed every issue they were assigned in this project. So, this code can be deployed onto the production server. Their project could be a good starting point for a future team to pick up."
0,Their writeup seems to be pretty elaborative and explains their problem statements and their solutions pretty clearly and to point. They have added code screenshots of the original and the refactored code which makes it really helpful to understand what and why they did what they did.
0,All the functionalities seem to be working as intended and the testing was able to cover most part of their project.
0,They seem to have added test cases and were able to cover most part of the project.
0,The build does pass Travis CI. They were able to fix all the conflicts.
0,They seem to have made a lot of commits after round 1 and seem to have got almost every issue fixed.
0,Their code seems to be efficiently written and I did not see any bad code style or DRY problems.
0,"Yes, the code can be deployed onto to the production server as the code works fine from front end."
0,"I am impressed with the write up. It included code, test plan and is well organized by capturing important details required to understand what are the changes been made. Keep up the good work."
0,Since the project is concerned about refactoring the code and not optimizing it or adding additional features. The project did work as intended. The features intend to work as they are supposed to in this refactor project.
0,The code was modified a bit as they had to shift part of code from one controller to another which was responsible for it. They have followed most principles. Precise comments are added to know what is going on in the method.
1,"Yes, checking the pull request the build was passed in Travis CI. There were no conflicts as such but there were code climate issues after the commits. The issues weren't major, but I expected the team to resolve the minor issues which occurred."
0,"The code committed has followed a good naming convention which is properly commented as well. There were no long methods added. The code added had only short methods. 
According to me, the code does not have any DRY problems."
1,"According to me, the code looks good enough to be added to the production server. 
The only concern according to me was that it would be immediately deployed if the team could have added some new test cases rather than modification of previous ones."
1,"The writeup is structured with all the code and explanations added. The team has also mentioned the approach to the problem statement carried out which according to me was a different thing to do. 
Although, some screenshots that show that the code did not break after a new functionality added would have made the writeup even more clear. Overall a good job on the report."
1,"The writeup is clean and adequately explains all the required information.
The ""project task"" section tells us about the ""how"" the team approached and refactored the issues identified.
I could still not find any section explaining the design pattern used by the team to refactor the code."
1,"I could not find any deployed link or any screencast of the application and cloning the repository and setting up the environment is time-consuming hence could not verify the system operation from the UI.
Functionality would have been easily accessible if any screencast of the running application would have been added on the WiKi page."
0,"The team did not add any new test cases but I could see few existing test cases been modified.
I am not sure whether the test coverage increased or decreased but the coverage of response_controller.rb is 52% and the coverage of survey_deployment_controller.rb is 67%."
0,"Yes, I could see 3 commits after round 1 and all of which was done by a single individual."
0,"Based on the wiki page and the associate pull request work done, I think this is quality work!"
0,Well done. Has plenty of details on each of the requirement tasks that they had.
0,I ran the tests for response_controller_spec.rb and they passed.
0,They deleted the pending_surveys test inside response_controller_spec.rb and refactored the #redirect test section. Test coverage according to code climate is 28%.
0,"The write up is clean and well structured.
Also there is a provision of how they approached the project is a good thinking."
1,"If the team had given a screencast link it would have been an easy job for checking the system works as expected.
Or even a deployed link was a better option"
1,The build did pass on Travis CI. But there was CodeClimate issues but they were not any major issues.
0,I think that they have a good implementation of their project and it is ready to be deployed to the production server. I did not find any major issues with their code and the quality of the documentation has also improved. The major issues with Code Climate have also been fixed.
0,"Their writeup is an improvement over their last writeup and they made several changes to their test plan documentation, explanations were made clearer and I believe that the overall quality of the writeup improved. Great job!"
0,"After checking the pull request, I can confirm that the build passed in Travis CI. Their branch had no conflicts with the base branch."
0,"The code is very well written. I liked how the naming scheme of the some of the variables. For example, they changed from was_submitted to previously_submitted. Overall the code looks clean and follows good Ruby and Rails practices. Good job!"
1,There seems to be errors with travis cli
0,The naming convention does not have any problem in the newly added code.
1,The long functions could have been broken down to parts and called. The functions are moved around but not refactored. Comments have been added. And the code quality does seem decent.
1,"The write up does state what goes around in the project. Although, it would be better if the reasons for doing so are stated more clearly. What is done is enlisted but why each change is made could have been stated. For example: Moved the pending_surveys function to survey_deployment_controller.rb is stated but I did not quite understand why it is done so from the write up"
0,"Yes, looks like all the edge cases works fine."
0,"No, they haven't done it."
0,"All that I have seen seems fine, The code looks optimized, and the code also follows DRY principle."
0,"Yeah , everything has been briefly explained"
0,"The writeup is very detailed and very easy to understand , They team has done good work with explaining everything"
1,The wiki page does not contain adequate information regarding the project. I think the team needs to work on building a better wiki page.
1,"Since I could not find any test cases other than a few mentioned in the response_controller_spec.rb file, the authors have not converted the test plan into automated tests. More test cases need to be added to make sure that the functionality that is existing is not hindered in any way possible since that is a very important thing to be considered during refactoring."
1,"I didn't find any functions that are too long. No code was extracted to separate methods, but some code was removed. I would suggest the team to add more comments to the methods that are refactored since it gives the reviewer a better idea to understand what is being refactored in the code. After refactoring, the code still follows good Ruby Style Guide."
0,"There were several changes made to function names:
The edit_allowed method is changed to view_allowed which is a good change since the function checks if the response can be viewed by other person or not. Also, the team has removed was_submitted and assign_instance_vars method, which according to me is a good thought. Since, there is a method previously_submitted which clearly explains what the function is doing."
1,"The test plan is not included in the writeup but a few test cases were found in the ""response_controller_spec.rb file. I would suggest the team to include more test cases for the implementation that is carried out."
1,"The writeup did not have any section on what work they did and how they did it. I would suggest the team to include a section of ""Problem Statement"" which would list the tasks that need to be carried out. Because at times I had to go through the project description to understand the ideas of the project. Also, the team has not included a design pattern which must be added. I would also suggest the team to include ""Strategy Design"" pattern as it is used to DRY out the code."
1,"The writeup did not adequately explain the functionality. Although some information is been provided in the ""about response_controller.rb"" section. I can understand from the writeup that the team is trying to refactor to model to make the code close to a basic CRUD functionality. Since I could not find any section of how and why the code has been refactored, I am not able to understand how the project does what it does. I would suggest the team to include a ""motivation"" section in the writeup to give a clear idea on the project."
1,"I really like the before and after pictures along with the written descriptions of the changes. The table of contents is also nice.
I think it would be great if there was an explanation of what the http://152.46.17.33:8080 link is for. I assume this is the example to test. Also to provide the login information (in case the reviewer forgets)."
1,No test plan found. Please add a test plan section to the wiki.
0,"Yes, features are working"
0,"Yes, the test plan is taken from the originabranch and the same has been implemented"
1,"The team has tried explaining why they are making copies of few files in the Design choices section. The teams explaination "" Even though the two forms happen to be the same right now, some time in the future, they may deviate. This option gives some flexibility to the accounts_controller to modify the form without affecting the User's form."" does not convince me.
 
The partials copied are not the entire files rather email, password etc. As an application, there is hardly any change that we make to these fields and if made, would like to see the changes on all the pages. Copying these partials misses out the advantage. In case, there needs to change these partials (say email form), I would see a same kind of change in the entire application. In my understanding, using the same partials would give us an edge when compared to copying the files"
1,"Pull request is sent beta branch, there is no information with respect to Travis or Code Climate. The test coverage details is also not available. If the pull request is made to Master, we can see these information.
 
The team has changed the object name to account_request. And the same object is used to reference ""account_request.role_id"" to get more details about the user. Though the name makes sense when used individually, but looks like a bad naming convention when trying to access its contents"
1,"The team has copied the tests from user_controller Rspec file  and have tried running the test. Based on the screenshots, it looks like all the tests have passed.
 
As this is a new controller, I would suggest the team add a couppleof specific tests that trigger usage of account_request_controller in a specific way. Using the same tests may not cover all the voundary cases"
1,"Yes, writeup clearly explains one part of the project, that corresponds to Pagination of the User page. The reason to choose is clearly mentioned and the team provides enoughtinformation for the user to understand.
 
I would suggest explaining the problem statement at length (Separate all methods related to the workflow of a RequestedUser object). For a first time user, the explaination for user_controller needs to self sufficient. Also, as there was no RequestedUser controller, explaining the need of this object or how it is being handled and why do you need this to be moved out would help the reviewer to understand in much better way"
0,"The efforts put into this project was really appreciable, as the test cases that I could think of all seem to be covered well."
1,"some of the functions are long, but they are pretty much sticking to the point and performing the required action appropriately The length of the function isn't under the control of the team here as the functionality has to be implemented one way or the other."
0,"The code is very well formatted. Their code spans over multiple files, and all of them have a neat ruby-like feel and guidelines to them."
0,"There has been a good amount of thought put into the test plans, and seeing how they have even implemented most of it already this is a good development."
1,"Although there is no particular mention of a design pattern itself, the explanations are good enough towards what they have performed , and this seems to be well thought out."
0,This write-up was very clear with what was happening in the project. the clear description of what they have done as part of their solution was very helpful in understanding what the code is meant for as well.
0,"Some parts of the code have been extracted into separate methods wherever necessary. It was not difficult to follow the code. Also, the code follows Ruby principles and DRY principle."
0,There's nothing in particular to mention. The team has done well.
0,The team has done a good job in explaining all the problems and the solutions for each problem. They have also clearly mentioned the design choices that they took and why they did so.
1,The write-up is clear. Each and every section explains what the issue is in the users controller and what approaches have been done to overcome the issues. The only suggestion that I have is to add a bit of information regarding what kind of tests have been performed.
1,Since the Travis CI build is not passed. The team should make some changes in the code to be working appropriately then it could be merged onto production server. It need not be done from scratch but there are few changes that must be made to pass the Build.
1,"While the code looks very good and seems to solve the problems addressed by the project, it is probably not ready to be deployed.  The issues detected with the Code Climate and Travis CI bots need to be resolved first before closing (completing) the pull request."
0,The code looks neat and can be deployed on the server. The refactored methods cut down a lot of the unnecesary code and I dont think there is much to work on in the future in this project.
1,as both code climate and build failed. these things have to be handled before deploying or merging
0,The build did pass in Travis CI when I checked on github and there were no major conflicts that needed resolution. I als see that all the code climate issues were resolved as well.
1,"Travis tests have failed
This branch has no conflicts with the base branch"
1,The code did not pass the tests from the Travis CI and Code Climate bots.  See the response to the previous question for additional comments.
1,The Travis CI bot shows that the build failed. It should have been updated after the first submission.
1,"No, the code didn't pass Travis CI and codeclimite. It seems like some tests failed."
1,"I'm giving the benefit of the doubt on ""does the build pass?"".  I actually got an error beginning ""Fixnum is deprecated"".  However, I don't have any reason to believe that this is the fault of the code.  Rather, every time I have tried to get a Rails project up and running, it has been quite bothersome, and this is the experience I have heard from many classmates as well.  Honestly I don't think that I can afford to spend several hours on each of the review projects, to get them up and running.  It has never taken me less than an hour to fiddle and fumble my way through the various errors I get initially.
Do not know how to evaluate test coverage, as there is no ""coverage"" directory in the application.
High score is for variable / method / class names.  These all look fine to me."
0,"Yes, from the writeup, they show the result of test. All the test passed."
0,"Yes, all the test cases passed."
1,"The team did an outstanding job in writing and documenting the test cases.  All of the necessary test cases seem to be present.  However, it is unclear if all the tests passed."
1,"I'm giving the benefit of the doubt on whether the automated test assignment_spec.rb passes.  I actually got an error beginning ""failed to load command: rspec"" when executing ""bundle exec rspec spec/..."", even though this works flawlessly on my team's code.  However, I don't have any reason to believe that this is the fault of the code.  Rather, every time I have tried to get a Rails project up and running, it has been quite bothersome (as noted further up in this review), and I simply lack the time to fight my way to a running state for several reviews.  The TAs are practiced in this and I'm sure they will execute the automated tests on every project."
0,They have created test cases for each newly added class
1,There are a lot of CodeClimate issues that needs to be resolved.
0,Writeups are good and detailed
0,"Yes, the build passes and it can be merged."
0,Yes. There were commits made during the time.
1,Code Quality as far as CodeClimate says is not good. It still shows that there are 67 problems pending.
1,The code is working and it passed the build but the only concern that it has a lot of code climate issues. It that is being handled then the project can be deployed onto the production server.
0,The writeup is very well written and it explains every change and it can be easily understood.
0,Everything seems to work well. Good work team.
0,"The build passed. Also, the pull request had no conflicts with the base branch."
0,Some commits happened after the first submission and it was basically to improve the project based on the first review.
1,"The code is very clean and it is very easy to follow the changes. However, it has a lot of code climate issues."
0,Ready to be deployed
0,The wiki page is quite informative as to how they have approached the refactoring of the code.
0,Yes they have provided a demo to prove it.
0,Yes they have done rigorous testing which can be seen in their video. Also they have added test cases.
0,Yes. They have focused on fixing the code climate and rspec related issues in the second round.
0,They have implemented Ruby best coding practices.
0,"I felt the code is ready to be deployed onto production, i couldn't find any potential bugs or errors in the code. The team have given proper comments of what they have done, so it will be easier for any other team to pickup from where this team has stopped."
0,The writeup done by the team explained all the functionalities and clearly showed the problem statement. They have improved the writeup based on the previous feedback.
0,The team added test cases in Rspec testing suite. They did well and tested their modules.
0,There were no build errors or conflicts in the pull request.
0,"Yes, there are commits during the 2nd round, the team have refactored the code to reduce occurrence of certain words. They have fixed some rspec issues. The code climate issue that was identified before has been fixed in this commits. The code climate and Rspec has been modified."
0,"Yes, the code follows all the ""good Ruby and Rails coding practices"". After looking at the code on git, I felt the code was well written, it was readable and follows the DRY principle. It would be easy for any developer to understand and make updates he wants to.  Going through controllers and model code, I felt all the functionalities of the application have been divided into several modules which makes it easy to map between code and its respective functionality."
0,"Good Work Team !!!!
The document is clear and concise. It properly shows what the problem is and how the team has solved it. I really like the idea of putting the code snippets in the documentation which gives a clear idea of what the code has been refactored.
Suggestions from Round 1 were implemented by the team"
0,"Good job..!!!!
The code works fine and general UI is good and flowing. It is necessary that the functionality should not change after refactoring and team have followed this fact. Good Job..!!!"
1,"Scope of Improvement:
Test cases would not have been added in the proportion of the code added. This has reduced the code coverage. But I believe it is fine if all the required features are covered in the given tests"
1,"Scope of Improvement:
The pull request seems good. The Travis CI build passed successfully. There were quite a few number of code climate issues. I am not sure whether they were introduced or already existed, they needed to be taken care at some point of time."
0,"Though there were no commits, but it looks like the team has completed all the changes."
0,"Good Work Team !!!!
The document is clear and concise. It properly shows what the problem is and how the team has solved it. I really like the idea of putting the code snippets in the documentation which gives a clear idea of what the code has been refactored."
1,"It is almost ready. The changes look fine but there is not enough evidence of testing performed on the new controller. Even though the test cases pass as shown in the video, the code changes in the pull request dhow a lot of tests being removed. Maybe a good write-up would have helped."
1,"No link provided to test. Team should have hosted a VCL instance for reviewers to test the changes thoroughly. Looking at the code, the changes look fine."
1,The build seems to have passed but there are some open code climate issues like usage of global variables or class variables. Team should try to fix them.
0,"Yes, there were 6 commits."
0,The code seems to have been written to meet the expectations. Comments are provided and naming convention is easy to follow. Functions look short and readable. No instances of DRY violations found.
0,"Yes, there is a very nice video included on the team's wiki showing that the features work as expected."
0,"No test cases were added, but since this is a refactoring project, that wasn't necessary.  The team has displayed that all existing test cases still pass after refactoring."
0,"Yes, Travis CI build passed."
0,"Yes, there were commits made 2 days ago."
1,The code was refactored and made DRY-er.  The only possible issue I see is confusing and long if conditionals.  I think creating a helper class containing methods with meaningful names for those conditionals might be helpful to understand what the code is doing better.
1,"The team has not uploaded a link to their version of Expertiza. Hence checking the system operation is not possible. In addition to a link of the VCL instance, I would have also liked to see a section on the documentation on how to test the code."
0,The team did not add any test cases. But I agree with their explanation in the documentation. They did not add new methods. Just moved some methods into a new controller. So all the tests that had been written before are valid. Just new paths needed to be configured in tests and and all tests relating to new controller should be moved to a new spec file. This has been done and can be seen in the video that they have uploaded.
0,The build passes in Travis CI. It merges in the base branch without any conflicts.
0,Very little new code was added. But I have no complaints since they did most of their work in the first round.
0,The code was very well written in the first round. The changes that were made in the second round were great too.
1,"No tests seen,"
1,Should have provided with the PR link.
1,No test plan. No github link given. Cannot see tests for the same reason.
0,The writeup seems to be adequately detailed.
0,The project was working with my personal test cases in my VM.
0,The test was copied from the previous file into the new to test the new controller.
0,The newly added code looks good. It covers all the points needed.
0,The author did a good job in providing the detailed explanation of the changes and also the reason for making those changes.
0,Well written with the explanation of the changes.
1,No test plan included
0,They have explained their problem statement very well. And given pictures to describe what changes they have made.
1,The test plan has not been mentioned in the wiki page.
0,"1. All the long functionalities were correctly broken up and refactored into smaller methods. 
2. The create method has been optimised properly using switch case which is now easy to understand.
3. The code follows all the DRY properties properly."
0,"The writeup explains most of the work that is done, They have implemented all the design patterns correctly."
0,"The project description is clear and understandable. The problem statements are given in simple words which made it easy to understand the work. They have clearly cited the code before and after the changes, so i could easily find the changes."
0,The code works fine and general UI is good and flowing. It is necessary that the functionality should not change after refactoring and team have followed this fact. Good Job..!!!
1,"I could see the changes done in test. But the build is failing which needs to be corrected. Also, I mentioned above, it would have been great if the team could have include test plan in the documentation."
0,"Good work done by the team...!!!
The code looks clean and following the Ruby and Rails guidelines. The method names are concise and methods are also not long. Great job...!!!"
1,"Scope of improvement:
Team could add more test cases to increase the coverage. Its a judgemental decision as you should not add tests just to increase the coverage. All you should care about is whether all the edge cases are being tested or not."
1,"Scope of Improvement:
There was no proper mention of the Rspec testing. This is something team could improve upon for the next round. I could see some of the commits related to Rspec which means the team has worked on it. It would be more presentable if the team could include the Rspec work in the document."
1,Routes.rb picture is missing.
1,There was no test plan.
1,There were some very well thought out changes in the methods so as to make them smaller in length. I especially liked the way you changed the camelCase to camel%Case. There are some functions that are way too long. But refactoring them was not a scope of your project. You have commented in some places that the method to handle quiz_questionnaires has been moved to that controller. I do not understand the need to do that. Naming that controller correctly will ensure this understanding.
1,"The functions previously existing in another controller were moved to a newly created controller. All the methods are named as [CRUD]_<controller_name>. I can understand why there was a need fro this when all the methods were existing in the previous controller but now in the new controller, you can refactor the function names to [CRUD] only. That would make it a lot more in line with ruby on rails style of naming."
1,There are no test plans included in the section.
1,"I understood clearly the questions as well as the solutions implemented from the documentation.
The documentation could have been better formatted. (Also there are a few 'to be completed' remarks in the documentation)
I also would have liked to see a screenshot of all tests of both controllers successfully pass so that I would know that no functionality as broken because of creation of a new controller and changes to routes."
1,test is not discussed
0,They have a great job refactoring the previous hardcoded method.
1,rspec test is mentioned but not discussed in details.
0,the code is explained thoroughly and could be understood easily.
1,"I could not find any Test plan in the writeup but I checked response_controller_spec.rb and I can see few test cases written over there.
More test cases needs to be added to make sure existing functionality is not hampered."
0,"1) Renamed edit_allowed function to view_allowed in the response_controller.rb file: I found it to be quite reasonable as the function here checks if the response can be viewed by other person or not.
2) Removed assign_instance_vars section as it was not needed and combined in Edit and New sections: Team can mention in the writeup that Stratergy design pattern is being used over here to DRY out the code.
3) Removed was_submitted. Changed to previously_submitted in the in create method: I found it to be reasonable as method nanme ""previously_submitted"" more clearly explains what function is doing over here"
1,"I could not find any Test Plan in the writeup but I could see few existing test cases modified in the ""response_controller_spec.rb"".
More test cases needs to be added."
1,"No, the writeup does not include any section to explain how and why the authors did the work they did. 
I have to look at the OSS project description given by the professor to understand the functionality that team is trying to implement over here..
I would suggest team to please include design pattern/principle  section as it makes easy for the reviewer to review the code."
1,"I think the code written in the controller is well written. Only suggestion I have is in the ""redirect"" method. There is a if params[:return]...else if params[:return]...else if params[:return]... code block section. Perhaps use a switch statement to have ""cleaner"" code."
0,I did not see any method names to change.
1,"The ""what changed"" is clearly shown in the wiki which is good. But the ""why it was changed"" is not quite clear on the wiki page. I Ctrl-F on the page for ""pattern"" or ""dry"" and did not see any matches. A kind and very polite suggestion is to add one of those key words."
0,"Yes. The writeup states exactly what was accomplished in the ""Tasks Accomplished"" section complete with sections of code and what the response_controller does. Very convenient having the pull request link right in the wiki page. I will add that to my group's wiki page also."
1,I could not find any test plans in the writeup. Also very few test cases are written as mentioned earlier. I recommend the team to add more tests for the functionalities that are being added or refactored.
0,The team has removed two methods namely assign_instance_vars and was_submitted. I found this to be reasonable because another method previously_submitted explains clearly what a function is doing. The team has also refactored a method name from edit_allowed to view_allowed which looks like a logical decision.
1,There were some test cases found in response_controller_spec.rb file. Other than that I could not find any test cases. I suggest the team to add more test cases for the implementation.
1,"The writeup does not include any section to explain how and why the authors did their work. Also, the team has not included a design pattern section in their writeup for the implementation that is carried out. I would suggest the authors to include information from the project description."
1,"The writeup adequately explains the functionality of the work in the about section. The team is trying to refactor the model to make the code close to CRUD functionality. The team has not added a section for how and why the code is being refactored in the writeup. I would suggest the team to include a ""proposed approach"" section for refactoring the model."
1,I could not test the team's features since they were not hosted on a VCL or Heroku app and no such link was provided on their wiki page. I would be glad to test it out if the link is provided to me.
1,"I do not find any mention of testing the response_controller_spec which was supposed to handle the test cases for this controller. Even though, I find tests being present in the said file, I cannot test it, since their implementation has not been hosted anywhere.
I believe that the team could have included screenshots of their testing and documented them on the Wiki Page."
1,"The write up is concise and to the point, and explains most of the functionalities implemented. I was able to understand the reasoning and the idea behind the team's implementation. However, I would like to point out the following issues:
1. The explanations are too concise in some parts of their documentation. For example, I believe some screenshots regarding code climate should have been provided so as to understand that there were no issues in the team's implementation.
2. In the same section, code climate and Travis CI, the team mentions ""There are only cyclomatic , cognitive errors with code climate whereas there are no integration errors with Travis CI"". However, they do not mention what these errors are and do not provide and documentation as to why these were failing. This according to me was a missed opportunity on their part."
1,"No, they didn't pass the Travis CI. They have one failure is 
AssignmentsController#edit when assignment has staggered deadlines shows an error flash message and renders edit page
     Failure/Error: all_topics = SignUpTopic.where(assignment_id: assignment.id, private_to: nil)"
1,"Build did not pass the Travis CI.
However they have fixed all the climate issues which is good.
They have mentioned about a number issues not yet implemented."
1,"The build did not pass in travis CI, There are few errors in the build which is why the project didn't pass the build."
1,Yes there are some conflicts that need to be resolved and some build that are passed in Travis CI.
1,"The travis build is failing.  Some of the major issues to look at to help the build pass are: 
1) `#<SignUpTopic(id: integer, topic_name: text, assignment_id: integer, max_choosers: integer, category: text, topic_identifier: string, micropayment: integer, private_to: integer, description: text, link: string) (class)> received :where with unexpected arguments 
         expected: ({:assignment_id=>""1""})
              got: ({:assignment_id=>1, :private_to=>nil})The argument requirement got messed up.2) To undo the changes you can cherry pick the commits needed for your new pull request. Also if you just remove them manually it shoudl work, I am not sure of the exact issue faced. 
`"
1,"No, the build doesn't pass in Travis CI. They seem to have failures in AssignmentController and GradesController. There is a detailed explanation of the failures that they should have worked on."
1,The pull request from Github shows the Travis CI build failed 3 days ago. But I see the team has made a commit that fixes one of the build issues. Not sure if it passed after that.
1,"The Pull Request was built in Travis CI. The only section that is showing failing is controllers. It appears the controller section is failing due to the ""SignUpTopic.where"" having too many arguments passed into the method. Maybe there was a typo in one of the parameter names."
1,Seems their pull requests were rejected.
1,"The code is not ready to deployed onto the server unless they fix the issues showed on the Traver CI. I think they don't need to redone the project, just need to fix the issues that they have."
1,There are a lot issues that still needs to be implemented in this project.I think its a good starting place for a future team to pick up from here and add functionality for the issues missing.
0,I think the code is perfect and is ready to be deployed as well.
1,"It looks like it is not ready to be deployed because it failed the Travis CI build. Once they get that resolved, I think it will be ready to be deployed onto the production server."
0,"Yes, the code is ready to be deployed into the production server, this project is I would say a good starting point for the other team to work on as well as no need to start the project from scratch. The code is well maintained and readable. For other team users. This project team members have referred code from the previous teams' code and have built on that as well as improved the implementation quality of the code."
1,"The team has made quite an effort to make the changes required but it seems that they faced more issues than they were hoping.
My biggest concern right now are the addition of test cases, that will help us analyze the written code in a better manner and help us to understand the missing chunks int the code.
The code also needs to be completed on certain dimentions like  - 'auto dropping' from wait list and preserving history, which are some major implementation that is remaining."
1,"I don't think this is ready to be deployed onto production server because for the main reason that they have errors and they have not fixed them yet. They have also not finished all their tasks assigned to them in this project. So, this can be a good starting place for a future team to pick up and complete the tasks assigned and also fix the errors present."
1,The code works for most part. My only concern is that it's not clear what kind of testing was done. I just think it needs to pass a set of automated tests before it's deployed to prod.
1,"I do not have a link to verify functionality myself. From what I've seen from the video supplied and Travis CI, I think this could be deployed to production server. Provided that the one issue in Travis CI is resolved first."
0,Generally the writeup is good.
1,"Their writeup is good overall. Need some more details of the work, and how they solve the code problem."
1,"They have added very little explanation after their 2nd round.
It explains about in a very clear way how to recreate the Issue 98 but they have not explained in the write up their approach how they have solved it.They have not explained their code.
I think the write up could have been better with some more explanation and screenshots."
1,The writeup done by the team is very detail. They have included almost all the sections that were asked to include. However a few fields were missing from the page. Nothing has been mentioned about the testing. The writeup included fields to show which features are not working which made my work easier to check the code.
1,The writeup was well-written. They explained the improvements they made and how to recreate the issue they solved. My only complaint is that the writeup could have used more background information on the project rather than just assuming the reader knew what a certain Expertiza issue was.
1,The writeup could be improved a bit as to it could be well explained a bit in detail and more points could be given to explain the problem better.
1,"The writeup looks good to me. They have explained the motive and implementation well. Also a part on 'Other related issues found' is a great addition for a new bug/implementation like this one.
They do have a lot of scope to improve.
1) A test plan could be made more  full proof if they has added the automatic tests on the code that is modified.
2) A flow diagram of MVC model that was touched for this project could be included for better understanding of the implementation.
3) The document does not talk about the technicality of the changes done. Some major code snippets could be explained rather than only explaining the working of the project."
1,"Their report seems to be pretty straightforward and to the point when considered from project point of view, However i feel like they should have added a little bit of background like explanations about their project and should have talked a little bit of what the issues talk about because if i was a first time reader of their report, i wouldn't understand what the actual deal is, what are they trying to do and why they doing what they doing."
1,The team has made some improvements to the write up. They have added more information in a few lines and also added a section where they explained the features they were unable to complete.
1,The team put some effort into the write-up. Creating sections outlining such things are recreating a known issue. I believe more time could had been spent discussing the problem more and how they went about resolving the issues they were able to fix.
0,Seems most of the code work well.
1,"Their project is code fix. Their feature works almost as they are supposed to. The code climate is all passed, only the Travser CI didn't pass with one fairlure. They should be able to fix the problem and pass all the test."
1,"The Issue#98 has been resolved and that has been shown in demo video.They have not deployed the project where I could test it.
However as some issues are still not implemented,they can not be tested."
0,"The team did not add a link to the site, but they have included a video which showed the functionalities , all the desired features are correctly working and the code is also complete."
0,The system seems to work as intended from the UI based on what they said they accomplished in the writeup. They even included a Youtube video demonstration of the system.
0,"Yes, the UI works as intended"
0,"It does work as intended. They do list down the portions that they couldn't get working. But I am not considering that as a point to reduce grades because as much they have implemented, they have done it well.
It might be possible that they faced more issues while debugging the code than it was thought of, and thus the work load increased.
The UI is depicted clearly working on the screencast."
1,The features seem to be working properly except some problem with the AssignmentController.
0,The fixes and the features that were added as part of this project work as expected and I did not find any new issues.
1,"I did not see a link to verify the UI functionality for myself. However, there is a video showing that the UI is functional within their local environment."
1,Didn't see testing part in their Wiki page. There is no way to estimate the coverage increase.
1,They don't have test case.
1,"They have showed in a video how their new code is implemented with a nice example covering the edge cases.
However they have not written any test cases for it.Thus it will be difficult to comment on test coverage."
0,"The team did not add any test cases in the code, however they seem to have tested the code thoroughly to remove any edge cases present."
0,"It looks like they did not need to add any automated test cases or increase coverage for this project, but they did perform a lot of manual testing."
1,"No in the wiki page no test cases have been mentioned also, so the test cases have not been run so the question of test coverage does not arise here."
1,"I could not find any RSpec testing but the manual testing of the features implemented has been done in a very detailed manner. The documentation quotes the testing ways very well which enables any new-comer to the project understand testing mechanisms of the implemented tasks very well. They have also depicted the manual tests in the screencast which shows that they have actually done what they claimed. 
But because they have not included any RSpec tests, and the build was not passing, we cannot comment if the test coverage improved or not."
1,This team has not showed any test cases. They seem to have not worked on it.
1,No new test cases were added.
1,"It does not appear that the team added any additional RSpec tests into the spec folder. However, the team did upload a video showing the functional operation of the code that was updated."
1,No new updated commits for 2nd round.
0,Yes. there were some new code committed during 2nd round.
0,"Some commits regarding their methods were done during the 2nd round.
They have done commits solving the Code Climate issues also."
1,"The team was regular in committing the changes, they have made considerable changes in the code done by the team, I found most of the commits were done only by a single person in the team, it would have been better if the work was divided among the teammates."
0,"Yes, new commits were made during the 2nd round."
1,"A lot of essential commits has been  made after the second round of review. The best part about the commits are, they are well described and focus on independent and functional changes.
They also made changes to rectify the TravisCI failing builds,  but it's sad that it's still not building.
I am not sure how many team members are contributing, that information cannot be deduced."
0,"Yes, after checking the commits, i think they have been making changes to their code and have done a lot of work in the 2nd round. I can see many changes."
0,"The team has made a number of commits in round 2 that improve the code and add some functionality like clearing the waitlist after assignment deadline has passed.
They also removed from the code a method that (Auto dropped from waitlist) which was not completed in time and didn't work."
0,Yes. The team continued to make code improvements/changes through the second review period.
0,Most of the codes look good.
1,"Their code written style is good. No bad name, long functions. Probably need some more useful comments."
1,"The code they have written for solving the Issue#98 is pretty good and follows all the Ruby principles.They have made it neat and clean after their first submission.I still believe there could more more comments explaining their code.
They still have some issues not implemented."
0,The code follows all the dry principles. The team has fixed all the bugs that were encountered in the first round.
0,The code was well-written. Their method and variable names and commit messages all made sense.
0,"The code is well written, is concise and accurate the comments are well written and explain the code well, the coding style is good and there are no DRY problems."
1,"The code was written well. The code climate does not make much noise over the coding styles.
The db has been changed a lot, I am not sure how they will affect the other parts of the code. IT might cause some alarms. 
Some of the names have been refactored, like - remove_team_from_waitlist to remove_from_waitlist. Proper reason could be added along with proper test cases to make sure that related functionalities do not fails."
0,"I did not find any such problems in the code for the first round, so anything they improved is possibly positive for the second round."
0,The team has fixed some code climate issues and improved the quality of the code.
1,"For the code that was added by the team, it appears to be properly formed and variables named appropriately. I believe that some of the comments could have been removed as they are unnecessary. For instance, the comment above ""self.clear_waitlisted_teams_for_topic"" method in signed_up_team.rb"
1,They gave an detailed instruction step by step about their work. But I didn't see design pattern.
1,The writeup explained how and why the authors did the work. They don't mention any design pattern.
1,"They have nicely explained the Issue#98 about how to recreate it and check that the waitlist is being cleared after the topic drop deadline has passed.I could not test it as they have not provided any deployed link for their project.
I believe they should explain the objective of their project in wiki so that other team members could understand what the project is about."
1,The writeup does not explain how the work is done but it clearly explains why it is done. It also  discusses step by step process to recreate expertiza issues. The accounts used for testing are also given in the writeup.
1,The writeup does not explain any of the authors' methodology. It just explains how to recreate certain issues that they are improving. I suggest that they add more detail on the design patterns they used and why.
0,"Yes, the documentation clearly mentions that they refactored the previous year implementation of the code and how they found out that it was not implemented clearly as they were not allowed to check-in.
They have clearly mentioned about other related issues that they found - 
1. When editing an assignment's due dates, the drop topic deadline won't display unless the signup deadline is displayed
2. When a student is on the waitlist for more than one topic, only the row for one of the topics is grey
3. There seems to be about a 20-minute drop topic deadline lag, some of the time
The writeup clearly mentions how they performed that work, by checking whether a team needs to be removed from the waitlist, they looped through all waitlisted teams on all topics for which the drop topic deadline has passed."
1,"No, the writeup needs to go deeper while explaining it. They need to make the motive clear. It can be done by taking help from a design pattern or oodd pronciple mentioned in class. But the reason that it has not been done in the initial stage is because, it is solving an existing issue and I think there can be only one good way to acheive it which they have come up with.  The team can explain some more on what other solutions they had thought before and why they finally came up with the written solution."
1,"The writeup is pretty much in detail but as i mentioned earlier, they need to work on including details about the files they are working on and what are their functionalities in the expertiza as a whole."
1,"The writeup explained how to re-create the problem this project was addressing, but there weren't enough details about how the authors went about fixing the problems. There were bullet points specifying the things that were done, but the reasoning behind them was missing in half of the cases."
1,The team only gave an overall bullets of what was modified. The concept of how and why issues were resolved was not discussed.
1,There is no test section in the Wiki page
1,They haven't start with their test plan.
1,"No tests were added.
Nothing is mentioned about the existing tests as well."
1,The writeup does not include test plan but they mentioned about testing and the various accounts used for testing. They have mentioned all the features that are being tested and working as per the requirement.
1,The writeup does not include a Test Plan section.
1,"They have mentioned that they did test things to ensure that things work if the deadline is staggered, also the accounts used for testing has been mentioned clearly.
But, a detailed test plan and a test plan section are missing."
1,They seem to have not come up with a test plan yet. The feedback can be given better when they do.
1,Test Plan is not included in the writeup.
1,"A section for Test Plan was not mention explicitly. However, the team did appear test the code changes using impersonate user in expertiza."
0,The writeup is generally good. They mentioned what they have done and gave example.s
1,"Based on I'm the class of ECE517 student, the write up clearly indicates the functionality the work is related to. I can understand what the project does. And how the project does what it does.
If I'm not familiar with expertiza, I need take some time to figure out what they are working. So, give a description of expertiza and how it related the work will be better."
1,"The writeup starts with the description of the modifications done under this project.
But they have not explained what is the objective for the project.
They have explained some Issue in detail how to check what they have implemented.They have not provided any deployed project link to check it.
I think they should update the wiki with all changes they have done with an explanation."
1,"The write up does not mention much about the project or the problem statements much, but they have provided enough information of what modifications are made in the code which helped me understand their project and problems. They have even included a section to indicate the pending work which is commendable."
1,"The writeup clearly indicates what functionality the work is related to. However, it would be nice if they could add a section table of contents to the top of the writeup with hyperlinks so that the reader could easily navigate to a certain section. They give a good explanation of what they have done so far and what still needs to be done."
1,"The writeup mentions about the issue #98, also it mentions, they successfully recreated Expertiza issue #98. But, the issue is not mentioned clearly and what the issue is about."
1,The writeup indirectly makes clear the functionality that the team in working on. I would suggest making a seperatesection like problem statement to make sure that the reader understands what the team tries to acheive.
1,The issues that are to be solved as a part of the project are explained in detail with proper specifications and also the issues they faced while solving them are also explained in an easy to understand way but i think they lack on explaining the controllers or the other files they are working with. As a new reader i would be unable to understand that part.
0,"Yes, the write up is very clear about what changes were made and features added. It also identifies other related issues that were found while working on this which is always nice to identify."
1,"The team did discuss modification made, however, no mention of the overall task that was to be accomplished."
0,They considered edge cases.
1,"All the basic functionalities are working properly some case don't work, There is still some conflict need to fix."
1,I could not found the deployed project link to test the cases manually.
1,There is no link included to test the application. It would have been great if the application is deployed and a link is provided to test the application for required features.
0,Yhe issues mentioned in the writeup that they say is fixed has been fixed and does not have any error. The edge test case have been taken care of and the issue is resolved.
0,The manual testing of code works as mentioned by the team in the documentation.
0,All basic functionalities work properly with the code.
1,"Yes, the features work as mentioned. It would have been more better if the testing site is also mentioned."
1,I do not see a link to the deployed application so I am unable to test the UI for the new features.
0,Their codes are good.
1,"1. The function is not too long.
2. The code don't need be extracted into separate method
3. There is a TODO issue found by code climate.
4. They have some issues of coding style about missing space 
5. There is a nissue of if usage when having a single-line body."
1,"Whatever code they have added does follow good Ruby Style guide.
They have included comments explaining their methods but I feel more comments need to be added as it was difficult to follow the code especially for the code they have copied from old pull request."
0,All the functions are kept short and to the point. The code has been refactored well to divide the functions into smaller methods. The code seem to be following DRY principles. The comments in the code are appropriate and they made code easy to understand.
1,"(1) The code is written in precise and small
(2) The code does not need to be extracted to separate methods
(3) More comments can be given to make the code more readable and understandable by the user.
(4) The code does follow the Ruby style guide
(5)The code does accurate and does not repeat, the code is written is well commented and explained"
0,"The code changes has been done very mindfully at the right places, The DRY principles has been  maintained and the funciton length are very maintained."
1,"For a couple of commits related to the drop topic deadlines, there were comments made on the commits, but the code itself could have had more comments about why that was done. Overall the code follows the Ruby conventions and is refactored well."
1,"the code that was added/modified appears to have unnecessary comments. For instance, s""ign_up_sheet_controller.rb"" has the comments ""Bobby"""
0,They pull request is generally good.  I didn't see obvious bad code in their pull request.
1,"They have 4 code climate issues when they do pull request. The write up is easy to read. It highly descriptive of the work done, and give very detailed steps how they did the work of some issues."
1,"They have renamed the methods to indicate of their functionality like update_is_waitlisted to remove_from_waitlist.They have added a field auto_dropped_from_waitlist which is somewhat weird and it not explained why they have added.I was not able to understand its functionality.
Code checking the assignment to be staggered deadline is duplicated which can be corrected."
1,"The team have included link for github pull requests, where i can see the commits. The test coverage is not included in the wiki page."
0,"The variable, method, and class names are reasonable and suggestive of the functionality."
0,(i)The writeup well explained (ii) The comments are well-explained and descriptive from the comments (iii) The approach and the reasoning are well understandable from their code.
1,The build and test fails right now. But they have implemented the requirements well and with some modifications they should be able to pass the builds. But the test has been manually done and made sure that the code works.
0,"I don't think there are any variables,methods or class names that are not reasonable or suggestive of the functionality."
0,The variable and method names used were pretty descriptive of what they did. I didn't find any confusing naming convention in the code.
0,the new code added/modified appears to be in good structure and is descriptive of their function.
1,No test mentioned.
1,They haven't start their test plan.
1,No tests cases are added or mentioned about.
1,"The team has not converted all the tests into automated tests, however they have done the tests manually and included the functionalities that are working and the functionalities that are not."
1,There were no test cases discussed in the Test Plan because there was no Test Plan at all.
0,"The team has recreated the issue #98 and have also fixed the mentioned issue after verifying it.
They have also tested the issue."
1,They have not mentioned anything regarding the Test plan.
1,No tests were added and the test plan is missing from the write up.
1,"I don't see where the team created new tests. The Travis CI is failing the controller section due "" SignUpSheetController#list"" because of unexpected arguments."
0,The writeup is detailed and all information is provided along with snips of code which implement the writeup which made it easy to comprehend the changes done.
0,The code was very well written. There has been significant improvement from first round.
0,Yes. There were good amount of commits.
0,Yes it was successful.
0,"Yes, everything works fine."
0,Write up is pretty good and self explanatory.
0,The code is looks fine to me and can be deployed to production.
1,The code quality is great. But the tests have not passed until now. Maybe the other team could take up the project and see why the tests are failing.
1,The application was not hosted and no link was given to test it.
1,"For the last commit, the build didn't pass. But the build is still running for the last commit."
1,Only one test has been written. There is no test plan as such. I would definitely like to see some more tests or atleast explanation that all scenarios are covered in tests.
1,no test plan is discussed. and rspec test file is not shown in spec folder.
1,"No, the tests have not yet been converted into automated test. It is failing because of adding or making changes to crucial files. They are already making correct changes but are yet to test it again."
1,"Could not find any.
Just how they plan to implement the testing is written"
0,Some automated testing has been carried out.
0,Just 2 commits were made as far as I can see.
0,"Code quality is really good. Yes, they have followed best practices in their code."
1,The code is not ready to be deployed onto the production server because there are unsovled test issues. The code don't need to redone from sratch using a different approach. They just need to find the way to fix their issues.
0,The writeup is very good. They showed all the issues they met and with detailed code. They improved the writeup accordingly.
1,The team has test cases. They have one failure on the test. The coverage is 18.08%
1,They didn't pass the Travis CI. The last pull request is still pending. There is one error on Traver CI because they have debug code on the pull request.
0,They have committed during the 2nd round.
0,"The code written is very good. I didn't found problems in the first round of bad names, long functions, bad code styles. The authors made the code better."
1,My biggest concern is that travis is not passing.
1,"The write still has clarity issues where the issue description and code changes do not align.  The ""Parameters should be whitelisted for mass assignment"" section does not actually show a change that whitelists parameters.  Also, unrelated changes are seen in the examples.  For instance, ""show, edit, update, destroy are not explicitly defined in the controller"" shows changes unrelated to the issue."
1,"Interestingly the PR page shows the travis check as still being in progress.  However, when clicking the link to get details, the build is shown as failing.  There are no conflicts to be resolved."
0,"As stated in the original review, the project didn't involve the types of changes that involve code style.  Everything I saw indicates that the changes improved the code quality."
1,"It seems that the issues with Travis CI still need to be ironed out, but I think this is a decent place for another team to pick up working."
1,"The write up is quite good, but it lacks detail in terms of explaining why the team did what they did. In other words, there is much high-level information but not much that goes into why things were done the way that they were."
0,"The project given is a refactoring project. Looking at the system manually, it seems that previous functionality is maintained."
1,"Travis CI did not pass, although it was integrated into the project build in github. The status returned was 'errored'."
0,There were many commits done during the second round.
0,"I think the code is written quite well, and the majority of problems in the first round were fixed. The writeup details the laundry list of changes that were made, and it seems that the changes made abide by best coding practices for the most part."
0,"The writeup is very well written. I liked their approach of addressing the major issues of their code and they included illustrations of their changes which helped me better understand their changes. It includes all the necessary information like testing and nicely formatted problem statements. Overall, this writeup is excellent. Good job!"
0,This is Code Climate project and the team has attached a video showing their test cases running. Their code refactoring activity is very good and they have made use of good Ruby and Rails practices. Some cases asking them to DRY out their code have been successfully addressed.
1,"After reviewing the pull request, I can see that the build did NOT pass the Travis CI. 
This is the error message from the Travis CI.
Danger has failed this build. 
Found 1 error.
The command ""bundle exec danger"" failed and exited with 1 during ."
1,"Yes, two commits were made in the second round. However, one of them did not pass the Travis build and the second one is still executing."
0,"Since this was a Code Climate project, it was their job to fix bad names, long complicated functions, lack of or no comments, bad Ruby practices and DRY problems and the team has implemented all these changes very well. i especially like their implementation of ""Unprotected Mass Assignment"". Their code follows the Rails guidelines and I was not able to find any issues with their code."
0,"The writeup is very well written. It explains all the changes, the reason to make those changes."
1,I was not able to run the project as it was giving me an error after running the rails server
1,There were no new tests and also it does not show any increase or decrease in coverage.
1,The build failed as per Travis CI on the pull requires on Github.
0,"The code looks good and since it was handling code climate issues, it follows all good principle."
1,"Almost... Well. Unfortunately, I consider the project to be incomplete without proper testing per corresponding OSS project requirements and the amount of code changes and refactoring that has been completed. It can be deployed, but I'm afraid it may break some existing functionalities if the team did not perform proper and adequate testing on it. However, it does not mean that the project should be passed to the future teams since most of the work has been completed and of course, should not be redone from scratch by any means. Team has done an amazing job by resolving most of the Code Climate issues and only missing proper testing that can be done by Expertiza software engineers. Of course, if it will be determined that it breaks existing functionalities or tests, it may be passed to the future team to broken code and test it. The following I list my biggest concerns why this code is not  (well, almost is) ready to be deployed:
1. Lack of proper and adequate testing (as other teams that worked on the Code Climate issues). The only testing was performed by running following command:bundle exec rspec spec/controllers/[p-z]*.rbIt does not guarantee correctness of code changes and fixes in the controllers. There are no new Rspec tests developed by the team to test code changes. Team did not deploy their project for UI testings of existing features and functionalities. Wiki page contains very minimal information regarding testing that should be improved and all necessary information must be added (can be done by Expertzia software engineers).2. Three remaining Code Climate issues that were not fixed or unintentionally missed by the team:
app/controllers/popup_controller.rb: Block has too many lines. [35/25]: 139-143, [79/25]: 195-199app/controllers/reports_controller.rb: User controlled method execution: 17 
These are my biggest 2 concerns with regard to why refactored/modified code is not ready to be deployed onto production server. And the 2-nd concern is my least concern since these missed issues issues can easily be fixed and properly tested."
1,"There are not many changes in the structure of the Wiki since last time I've read it. The content was slightly updated, but the structure remained the same. There minor improvements, but team did not consider my suggestions to improve the Wiki.
Overall, as I mentioned in the 1st peer review, the Wiki page is well written and well structured. Team explains how the they have completed their work and why it has been completed. Great job providing all the details in the ""Implementation"" section by providing detailed information on code improvements and fixes as general case for 16 Code Climate issues! Great work! Great details along with screenshots from Git diff tool!
I see that team added ""Team Members"" section where they stated all team members. Great work! Also, a lot more information was added in the ""Implementation"" section by providing more examples and explaining the root cause of the issue and how it can be fixed. 
Unfortunately ""Testing"" section as important as implementation remained unchanged. No new information was added and existing information on testing is not enough to cover all Code Climate fixes. I strongly believe your team should spend more time on ""Testing"" section and not only in the Wiki page, but for the project completion. Again, runningbundle exec rspec spec/controllers/[p-z]*.rbdoes not guarantee correctness of your code changes and fixes on the controllers. For this project and amount of the code that you team has modified, the ""Testing"" section should be addressed more adequately and thoroughly.
All other sections appears to be completed and well organized! This is very informative wiki page. Great work!
There are still some suggestions I provided for this Wiki in the 1st peer review round to be improved, but remained as before:
- ""Introduction"" section can be re-organized to combine definitions of Expertiza, Climate Code and include all new terms such as code smells and etc.- Details about trivial solutions with screenshots still remain in the ""Implementation"" section, but should be removed to make the Wiki page clear and concise. Providing trivial solutions does not give any advantages.- Were there any difficulties or issues the team faced while working on the project? You should've stated how team handles such issues?- Mention all remaining Code Climate issues in the controllers and explain why you did not fix them. This is information is important and still missing.- Are there any further suggestions for improvements by the team?- Team did not elaborate on how they verified that issues reported by Code Climate are resolved with their fixes. What was the way of checking it?- ""Conclusion"" section is still missing with all important points of the project.- And of course, ""Testing"" section is still incomplete in my opinion. Any changes done on the controllers must be tested with full set of all Rspec tests. New Rspec tests should be developed and documented in the section.
Overall, the Wiki page appears to be completed."
1,"As I have already pointed out in the 1st peer review, team did not deploy their Expertiza project or did not provide any related information on their deployment of Expertiza project. Unfortunately, I'm unable to test the work manually and team ignored my request to deploy the Expertiza project on Heroku or NCSU VCL for the 2nd peer review round (as all other teams did). Since UI testing is a crucial part of testing any changes and fixes done by your team on controllers, it is necessary to deploy your project so other peer reviewers can run simple live demo to ensure that all corresponding features and functionalities provided by controllers (p-z.rb files) still work and the app does not crash.
Either way, I've completed manual testing in the same way as for the 1st peer review. I used team's code from Github repository that I cloned and pulled the latest code usinggit clone https://github.com/Ziweiwww/expertiza.gitgit checkout beta
and ran Expertiza app locally on my environment.
I performed short UI interaction by running Expertiza instance based on team's latest code on the beta branch to cover as many controllers of interest as possible that were refactored and fixed by the team. I did not find any issues, nor encounter any errors, nor break any existing functionalities in the controllers. All refactored and modified code appears to work properly and as expected. However, it takes long time and effort to run through all possible UI scenarios to test your team's code changes on the controllers. I've completed only small part of UI tests out of all possible, to test controllers with names beginning with P through Z. Hence, do not rely purely on my observations. It is possible that I missed some of scenarios that can cause problems. This part of UI testing should have been completed by your team and results should have been documented in the Wiki page. Unfortunately, I do not see anything related has been done for this project by the team.
 
As I mentioned previously. running ""bundle exec rspec spec/controllers/[p-z]*.rb"" is very poor testing and does not guarantee correctness of your code changes and fixes. I'm taking few points off for not deploying the project and not testing your changes thoroughly (I did the same for all other teams)."
1,"No, team did not add new Rspec test cases. No, the code coverage was not increased. Team has 1 failing test that they claim to be not responsible for and not required to fix:
$ bundle exec rspec spec/controllers/[p-z]*.rb
..........

Finished in 3 minutes 27.6 seconds (files took 7.21 seconds to load)
141 examples, 1 failure

Failed examples:

rspec ./spec/controllers/response_controller_spec.rb:70 # ResponseController#edit renders response#response page

Randomized with seed 6188
Unfortunately, such statement as ""We were not required to fix the issues for this controller"" is unexceptable. Let's assume that your code changes cause the App to crash on some of the functionalities not in the controllers, but caused by the controllers changes that you did. Would you be not required to fix that as well? In our team we consider all possibility for the errors and addressed each error responsibly and carefully. 
Team did very a little validation on the files that they changed by running Rspec tests on enclosed set of controllers [p-z]*.rb. This is slightly incorrect approach for testing your changes and verifying that your team did not break any existing functionalities or other Rspec tests. Team's Wiki page contains Testing section where they provide information on running existing Rspec tests. Team also provided recorded video where they run existing Rspec tests on set of files with names starting with P through Z.
Please consider the fact that some of the existing Rspec tests are integration tests, and not only Unit Tests. Hence, the tests that you run [p-z]*.rb are not enough to guarantee that your changes did not break any existing functionalities or did not cause any issues. You tested only controllers specs starting from P through Z, assuming that all tests in these specs are only Unit Tests controllers for corresponding files. This is wrong assumption. You should at least test all controllers and models as well, because models specs use some controllers to perform integration tests. Your team should execute at least the following command:
 
bundle exec rspec spec/controllers spec/models
and fix all of the issues regardless if it was caused by change or not. The above command runs tests on all controllers and models. Some models run integration tests that validate code in the controllers of your interest and since you changed the code in these controllers, models may fail. This would be wrong assumption to make that you are not required to fix models.
Moreover, I see that team did not write any additional Rspec tests to validate their changes even for controllers with P-Z names.  Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources on writing additional Rspec tests that directly tests all your changes in the controller. This would help to ensure integrity and validation of the code changes that your team is proposing over Code Climate issues. Otherwise, this becomes one of the biggest concern for not deploying your project into production server.
Since there are no new Rspec tests developed or written, subsequently, the code coverage cannot be adequately increased to reflect new tests rather than refactored code that was done by the team.
The following are suggestions for your team regarding testing:
1. Test all existing controllers as well as models by running bundle exec rspec spec/controllers spec/models command and fix all the failed test cases. You will be surprised but some of failures may caused by your changes.2. Develop additional 5-10 adequate and proper Rspec tests that can cover broad range of the controllers that your team has worked on. Without additional Rspec tests, there is no way to know for sure if your changes  did not cause any problems in the existing code. As I suggested in the first peer review, there are 3 types of tests that your team should have performed and report the results in the Wiki. I still suggest to complete them.3. Perform code inspection on your changes5. Run through a live demo in the Expertiza instance through the UI that runs over changed/improved code
After all of the testing steps performed and results are documented in the Wiki, only then it should give some confidence that your changes did not cause any issues and can be deployed into production server.
Also I see that team still did not deploy their project as I suggested in the first review (in fact most teams who worked on the Code Climate issues did not deploy their project and I'm not sure why). Running UI Expertiza instance is crucial part of testing. Did your team validate changes by running Expertiza instance and trying to perform some actions on it? There is no related information in the wiki with regard to UI testing.
Unfortunately, team could have taken multiple approaches to test and validate their changes, besides running existing Rspect tests on specific set of controllers. No such approaches were taken by the team. Therefore, testing is performed poorly by the team and it becomes the biggest concern not to deploy your changes without adequate testing."
1,"Unfortunately, Travis CI tests have failed with the following error(s):
$ bundle exec danger
........
Dangerfile:71: warning: already initialized constant Danger::Dangerfile::BIG_PR_MESSAGE
Dangerfile:45: warning: previous definition of BIG_PR_MESSAGE was here

Danger has failed this build. 
Found 1 error.
The command ""bundle exec danger"" failed and exited with 1 during.

Your build has been stopped.
5565:signal-handler (1554145229) Received SIGTERM scheduling shutdown...
Fortunately, our team faced the exact same Travis CI build failure, which indicates a possibility that neither of our teams introduced that issues. However, we contacted our mentor regarding this failure and verified with him our further actions. I'd suggest to do the same. Please contact your mentor and ensure that the Dangerfile failure is not caused by any of your changes.
There no conflicts of the team's branch with the base branch in the Pull Request and the team re-synced their beta development branch with the latest expertiza/beta branch on March, 27.
Expertiza-bot also reported 5 Warnings and 1 Error:
5 Warnings:
  - Your pull request is more than 500 LoC.
    Please make sure you did not commit unnecessary changes, such as schema.rb, node_modules, change logs.
  - Your pull request touches more than 30 files.
    Please make sure you did not commit unnecessary changes, such as node_modules, change logs.
  - Your pull request has many duplicated commit messages. Please try to squash similar commits.
    And using meaningful commit messages later.
  - You are using global variables ($) or class variables (@@); please double-check whether this is necessary.
  - There are code changes, but no corresponding tests.
    Please include tests if this PR introduces any modifications in behavior.
1 Error:
  - You are including debug code in your pull request, please remove it.
Again, fortunately my team faced the same warnings and the error, except ""There are code changes, but no corresponding tests..."" warning. We actually spent some of our time and resources on adding a lot of newly developed Rspec tests to validate all of our changes and make sure we did not break any existing functionality. Similarly, for all other warnings and the error, we contacted our mentor and clarified with him that the error is reported False Positive and we did not include any debug code in the Pull Request. I'd suggest to contact your mentor for that matter as well. Most likely the error reported is False Positive for your team well. All remaining warnings we decided to ignore at this point. Of course, we did not have any warning regarding missing tests.
The last warning suggests, that your team did not write additional Rspec tests to test your changes. Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources to validate all your changes by writing additional Rspec tests to validate all of your changes."
1,"Since the goal of the project is to Fix Code Climate issues in controllers with names beginning with P through Z, I expect not to find problems in the code, but to see that all Code Climate issues reported on the controllers of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate that all Code Climate issues are resolved, I cloned the team's Github repository from https://github.com/Ziweiwww/expertiza/tree/betahttps://github.com/Ziweiwww/expertiza.gitUsing beta branch registered it with my Code Climate account, and performed Code Climate validation on your cloned beta branch.
I'd like to confirm that your team did an amazing job! I found that your team missed only 3 Code Climate smells in the following files (probably unintentionally, which is totally fine):
app/controllers/popup_controller.rb: Block has too many lines. [35/25]: 139-143, [79/25]: 195-199app/controllers/reports_controller.rb: User controlled method execution: 17
Which is very negligent number of issues compare to the work that your team has completed. Of course, there are a lot of unresolved Code Climate issues in the questionnaires_controller.rb, review_mapping_controller.rb, response_controller.rb, signup_sheet_controller.rb, users_controller.rb. However, your team was explicitly asked to leave them out and do not fix them. Moreover, there some remaining Code Climate issues in the controllers with names starting with P through Z (e.g., Assignment Branch Condition size for [method name] is too high), but again your team has been explicitly told to ignore these issues. Amazing job fixing all, but 3 Code Climate issues in the controllers of your interest!
There were great improvements made in the code. All changes, fixes, modifications and refactoring of the code is acceptable and adequate. It appears to be well written code that follows good RoR coding practices.
The last minor suggestion for the future development:Please provide more comments on some of the fixes and describe what code is doing after you modified it (as I mentioned in the 1st review, this is how you find bugs in your code, i.e. code inspection). For example, changes in participants_controller.rb, popup_controller.rb, suggestion_controller.rb, reputation_web_service_controller.rb could be well-commented and documented.
All other issues that I reported during the 1st peer review period are resolved and I see no other issues! Great work!"
1,"It is not ready to be deployed. The tests can not run due to an error, maybe the debug code."
1,There is no link to a deployed project so no way for me to test if everything is working. The last commit needs to be fixed.
1,"The entire build failed due to some code climate issues that I can't see. I think ""You are including debug code in your pull request, please remove it."" this is the reason the tests are failing and will not run."
1,"There are three new comments, the last one broke stuff and Travis did not run."
1,I'm concerned with the failure of response_controller.
1,They seem to have the same issues that the other projects have; false positives from expertiza-bot and issues with the dangerfile when testing Travis CI.
1,"I still don't like the explicit examples of the code changes in the write-up. But, that didn't affect the scores I gave you."
0,Good code practices have been followe
0,Names are very intuitive.
0,It looks fair enough. Will be checking on completion after the final submission.
0,IT very much conveyed about the functionality!
1,"Some of the commits are superfluous in my opinion. The commit messages of Ziwewww and NilayKapadia do not help at all. Please write commit messages so someone can understand what is happening in that particular commit. NilayKapadia has made a seperate method which takes care of the flash messages, I dont think that was needed. NilayKapadia again has some commits where he/she just changes the print messages."
0,"They have made good changes, and they have used intuitive variable names throughout their commits. Looks fine."
1,The test plan does not involve a lot of details in it. Just says that they did tests and stuff. But their tests are passing.
0,Yes. Although most of the comments are basic syntax changes! But good work guys!
0,Yes. The writeup seems to be written perfectly with detailed problems found.
0,They fixed the issues and all the issues they have fixed is working well. I didn't see any edge case because I think they don't need to talk about this on their existing issues.
0,"Yes, the authors converted all the case in Test Plan, since this is issues fix project, It is very clear and direct to test."
0,"The write up is well written and easy to read. They used the reasonable name of variables, methods, and class names."
1,"They have well tested their project and followed with a video. The author didn't consider different pre-conditions, edge case, invalid input values, and other possibilities."
0,The write up is very clear and indicate they are working on the issues fixed project. I can understand what the project does.
1,No cases were discussed in the test plan.
0,"Again, I would say the same thing here.  This question does not really apply."
0,"I would say that the question does not apply to this project, because no new logic was really introduced.  Things were just changed to fix issues reported by codeclimate."
1,"There is a ""Testing"" section which is good, but it really just provides information about existing test cases and shows screen captures of tests being run.  Since no new function is being implemented, it's is difficult to know whether that is sufficient.  I would note that there is a test case that is failing and the writeup seems to imply that the test case was already failing before these changes were introduced.  However, our team is also working on Expertiza and in our branch that test case passes."
1,"The intent of the project is very clear--simply to fix code climate issues in some controllers.  There is a long list of issues being addressed which is good, but it is a little confusing, because there are screen captures that show multiple changes and in at least one case it's not clear how the changes relate to the issue: in the ""Parameters should be whitelisted for mass assigment"" section, there is an change from using the ""update_attribute"" method to using the ""update_attributes"" method and the ""user_params"" method (which whitelists parameters) is removed.  The first change appears to be unrelated and the second change appears to be going in the wrong direction.  It would be better if only the changes related to the issue being addressed were shown."
1,"Seems very good for the most part, it seems that the create method in teams_users_controller may need to be refactored based on its length, but otherwise all seems fine."
0,"These items are intuitive for the most part. For example, a method that clearly populates local items was changed from author_feedback_popup to questionare_details_populate, which makes lots of sense."
0,"The team seems to have not generated any new tests based on what was changed, but the old tests are covered in the testing section. In addition to this, a video clip was provided in the expertiza submission that shows tests being run and passing."
1,The authors have documented their test cases and used a video clip showing proof of their test cases passing. Only one of their test cases fail but they have done a good job testing their code.
0,"Upon reviewing the document and the pull request:
1. There were no fixes that were asked by the team regarding long functions.
2. Such code was not asked to fix by the team.
3. No such code was asked to fix from them.
4. There were several instances where the team was asked to fix bad Ruby practices, such as ""Avoid comma after the last item of an array"" and ""Use the new Ruby 1.9 hash syntax"" and many others, which have all been corrected.
5. The team was also asked to DRY their code in the case ""Similar blocks of code found in 3 locations. Consider refactoring"" and they have handled this case very well."
0,I think the authors mention all their design choices and those pointed out by Code Climate and have fixed them appropriately.
0,I believe that the documented is very nicely written in issue-solution format which makes it easier for a reader like me to understand what changes have been implemented by the team. Clear illustrations along with descriptions help me to understand the functionality. A useful video clip including their test results has been included by the team.
0,It seems to work fine on my test cases.
0,No test added but all the available tests passed. The video was very helpful guys!
0,The code is nice. I think it covers all the instructions required to handle such issues.
0,The changes are mostly around solving the code climate issues and are done very well.
0,The writeup explains most of the changes and others were self-explanatory. It was easy to follow the changes.
0,The writeup is very well written. It has all the changes and description as well.
1,"Unable to test the work manually, since the team did not deploy their Expertiza project or did not provide information on their deployment in the submission. Please deploy your Expertiza project if you have not done it, so other reviewers and I may test it remotely.
I am also unable to test the project locally on my VM since the team did not provide their working git repository where they have all the changes. Please, at least provide your working git repository, so I can pull the code and run it manually on the local VM environment for manual testing.
Also make sure that you perform manual testing as well that cover the changes you performed over the controller files (again, running and passing Rspec tests does not guarantee validation of your changes). Manual testing is important part of the project and I suggest to document that in the wiki page."
1,"No new Rspect tests are added and 1 existing test fails (141 passes and 1 fails). The ""Testing"" section in the wiki page explains how existing Rspec tests ran and one of them failed, and team is not responsible for fixing the issue. Although, I believe the team is responsible for any failures in the existing Rspec tests for the  controller as well as models, and I encourage the team to fix all the issues.
There are no additional/new automated or Rspec tests added per this project. Existing Rspec tests have about ~53% test coverage on the code and do not guarantee the correctness of all your changes.
Moreover, I see there are no changes performed on the rspec/controller directory where all the Rspec test files located. This indicates that changes performed by the team to fix Code Climate issues did not have any effect on the existing Rspec tests and did not break them, which is a little suspicious since my team and my changes for Climate Code issues broke some of the existing Rspec tests and we had to fix them. I see that team has verified correctness of their changes with existing running/passing Rspec tests in the controller by running through the tests with names starting with ""p"" thorough ""z"". Having changed files only in the controller with name starting with ""p"" through ""z"" does not guarantee that other files in the controller would be working properly. Team needs to do additional verification with all the controller Rspec tests, not only from ""p"" through ""z"". 
Also, the team needs to verify changes with existing running/passing Rspec tests in the models as well. Please run the following command on existing Rspec tests in the models and report the results:
bundle exec rspec spec/models
If your team was not explicitly asked to write additional Rspec test cases, indicate this in the write up. Good job on recording the video on running and passing Rspec tests in the controller, although controller is tested only partially, which does not guarantee that your changes did not break anything outside of the controller scope. Please consider full testing of your project."
1,"Are you sure you fixed the ""app/controllers/participants_controller.rb"" correctly? There was a block ""unless params[:participant].nil? then do something"". Meaning if params variable is NOT nil do something. However, your fix now returns UNLESS params[:participant].nil?. Should not it be ""return if params[:participant].nil?"", not unless!? Meaning if params variable is nil then return (not other way around) Please revise this code! There are a lot of similar changes that I have concern over. Here is the link for these fixes that I have concern over:
https://github.com/expertiza/expertiza/pull/1371/commits/f71c3cc899ccc0d1dfef4491f7e1afbc40a3be8f
https://github.com/expertiza/expertiza/pull/1371/commits/3199b764864d2d71cd5dca8ca6bbc2ad9ca5db01
Refactored code resolving Code Climate issues appears to be well written and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code (as expected), and pull request mostly contains refactored code that already existed in the repository.
However, while looking at the changes in the provided pull request, I noticed few very minor things that can be improved (please also double-check ""participants_controller.rb"" whether you fixed it correctly). Please consider following for improvements:
- Use new Ruby format for parameters that should be whitelisted for mass assignment (app/controllers/roles_controller.rb). Example, use ""without_protection: true"" instead of "":without_protection => true""
- Please provide comments on some of the fixes and describe what code is doing after you modified it (believe it or not that is how you find if your changes are correct, i.e. code inspection). For example, changes in participants_controller.rb, popup_controller.rb, suggestion_controller.rb, reputation_web_service_controller.rb
- Remove commented out code (site_controllers_controller.rb). If this is not a comment and just unused code, delete it.
https://github.com/expertiza/expertiza/pull/1371/commits/aef44be7320b65124a74f137f3f256cbc7d7d432
- Method name ""get_role"" should be renamed into ""role"" excluding the ""get_"" prefix. Instead you combined the method name into single word: ""getrole"". Consider fixing it:
https://github.com/expertiza/expertiza/pull/1371/commits/3e22a6ae1ff8f7587e664ae3d0b6370c9acd8639
There are few fixes team has made by renaming existing methods with more appropriate names (e.g. ""get_role"" into ""getrole""). I suspect this relates to fixing ""Do not prefix reader method names with get_"" Code Climate issue. However, the more appropriate name for method would be just removing ""get_"" prefix (renaming ""get_role"" method into ""role"").
All other existing method and variables names within the scope of modified code are reasonable and should not be changed. There were only few cases when the team added new methods (submission_records_controller.rb). However, these are just CRUD methods. Keep in mind that this is not the case for some other variables and methods in the files that you modified. If variable or method names can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
1,"The Wiki page very well explain how the team has done their work and why the work was performed. Great job providing all the details! Since the work was performed is related to fixing Code Climate issues, the team did not use any design principles or patterns. The team simply attempted to fix the code smells (issues) reported by Code Climate tool and proposed these fixes via Pull Request.
Although team did great job on the write up, there are still some improvements can be made. The following is a list with suggestions, missing information, and information that is hard to follow:
- May be start the Wiki page with ""Introduction"" section where you can briefly explain what is Expertiza and Climate Code (although you're doing it but information can be more organized). 
- In the ""Introduction"" section (if you decide to include it) address all new terms, such as Code Climate, code smells, and etc. That is where you can also briefly talk about what is Expertiza (instead of ""About Expertiza""). Do not forget to include useful links.
- Great work on the ""Implementation"" section. However, consider removing trivial fixes since they do not contain any important issues readers needs to know about.
- May be state any difficulties or issues the team has faced while working on the project? How the team handles such issues?
- Please mention (if any) remaining issues and further suggestions for improvements. Did the team has fixed ALL of the issues reported by Code Climate?
- Additional improvements section if your team has done any would also be useful section to read about.
- How did the team verified that issues reported by Code Climate are resolved. Elaborate on that more. 
- Testing section is incomplete in my opinion. Try to elaborate more on the testing that your team has performed. What testing strategies your team used to verified that your changes did not break any existing functionalities? Simply stating, ""We passed all the Rspec tests except for 'response_controller', however, we were not required to fix the issues in for this controller"" is not enough. In fact, fixing broken issues in the Rspec tests is still part of your assignment. Any changes you performed on the controller must be tested against existing Rspec tests. 
- Include ""Conclusion"" section into your Wiki, where you can highlight all important points.
- May be include ""Team Member"" section if anyone in the future would have any questions regarding your fixes and improvements. Also you may provide more information on who worked on what issues?
Above are only suggestions and do not have to be completed in the Wiki. However, as a reader you appreciate having as much information as possible regarding the project some team was working on."
0,I don't know how to do that but based off of the video the tests seem to pass.
0,There were no tests discussed in the spec and no tests were failing except the one that was dismissed.
0,They had to clean the code they were assigned so the code looks much better now.
0,No new variables or method names need to be added for this project. The code was cleaned up across many files and made more legible. There is no commented out old code so thats good.
0,Their work did not involve making new functionality so there is no need for design classes. They followed the DRY principle to make the code cleaner and more legible.
0,They have given plenty of information and images related to what they have done and why.
0,I'm not sure how to run your code from my Windows box.
0,Not sure if this is applicable for you.
1,It doesn't look like the maintainers have submitted your pull request as of this writing. I'm happy to reevaluate when they do.
0,Overall their writeup is good and they have good example for their work.
1,"The write up is good overall. Still, need more details on each issue and solution.  There no lack of explanation of functionality, the author improved the writeup accordingly."
1,"I see that you changed redis.rb, but you didn't remove the global variable.
I also couldn't find where you refactored the duplicate code."
1,"I think you need to ensure that all the tests the passed before you started making changes, also pass after you made changes. Just because you weren't responsible for making changes to the response_controller doesn't mean that the changes you made to your controllers didn't affect the response_controller.
You should also have tested the specs in the models directory. Again, any tests that passed before you started making changes should also pass after you made changes.
I don't see where you tested the UI after you made your changes. I would think that changing controllers could have a huge affect on the application if the changes weren't compatible with the rest of the code."
0,"Good Work:
Changes looks fine to me on high level and after reviewing the code, it looks like team has done good work on implementing this feature. The aim of this feature was to fix code climate issues and from travis report, it is clear that team has done some really great work"
1,"The writeup is good and very easily understandable, I just felt they could have added few screenshots for the test cases they have done."
1,"The content of the Wiki was improved since last time I read it. This improved version looks a lot better! Great work by the team spending time on documenting more useful information, such as ""Example"" and ""Results"" section! Team did great work by providing more details on the work that they completed. Unfortunately, ""Test Plan"" section still missing important information about testing. Great work on describing how Code Climate tool and Rubocop analyzed your code. However, these tools are not enough for thorough testing. Did team run Rspec tests on all models and controllers as well? Were any new Rspec Tests added to test your code changes? If not, why? All this missing information about Testing is the biggest improvement that should be done in the Wiki.
There are still some suggestions I provided for the Wiki in the 1st peer review round to be improved, but remained unimproved:
- Avoid including ""Files Modified for this requirement"" section. All this information can be found in the Pull Request.- State why not all Code Climate issues were resolved. What is your proposal to fix them?- Were there any challenges the team faced while working on the project? How did you handle them?- ""Test Plan"" section must be reorganized and all missing information about Rspec tests added. State output of running existing Rspec Tests. State why you did not write new Rspec tests to test your code changes. 
Overall, the Wiki page looks good even though some important information is still missing."
1,I think the writeup is good for what this project is doing which is making small fixes in lots of files.  The original writeup had a discrepancy between the number of files listed as modified vs. the number of files changed.  The writeup still has this issue: it lists 55 files as having been changed but later on states that 42 files were changed.
1,"There is still a discrepancy between the number of files listed under ""Files Modified for this requirement"" and the number of files listed under ""Total Modifications"""
1,No test part.
0,There is no new methods and functions added.
1,"No. The Pull request has failed both Travis and Code Climate. None of the tests were successful. looks like the changes made to the ""DangerFile"" was not successful and we have the same error for all the Test Suite
The command ""bundle exec danger"" failed and exited with 1 during ."
1,"It was an Expertiza project, therefore the pull request was checked. The build did not pass in Travis CI.
There were several code climate issues that could have been fixed. Some of them are ""extra empty line detected at method body end""; ""trailing blank lines detected""; ""line is too long"". There were also certain issues that could have been ignored."
1,"Build failed in Travis CI and I think it needs to be resolved.
I could see 3 code climate issues (none of them looked alarming) which are mostly related to blank lines and extra space"
1,"The build did not pass, and there are lot of code climate issues and Travis CI errors left to be fixed."
1,"Write up looks clean and easy to understand. From the first round, team has made changes to the write up to make it more understandable.
 
I would still be interested in reading ""Proposed Solution"" section (removed in round 2). Task Identified section clearly explains what the team wants to do. The explanation for the solution taken could have been added for better understanding. 
 
At the end of the wiki, ""Design"" section has been introduced with no explanation what so ever. Was this due to the pressure of adding one into the project? I couldn't find where the team has used delegation pattern. It would have been great if the team explains more about the usage of this pattern in the project"
0,"Yes, the feature does work as expected. Checkboxes are added on the UI which are appropriately placed. 
Also, it is evident from the screencast that the data is been exported to CSV files."
1,"There wasn no explanation in the writeup that told us which pages to check to see their implementation. The screenshots in the writeup do seem to show that they work in the required manner. I would recommend using a string ""yes"" and ""no"" instead of 1 and -1 in the csv as this would not require any explanation for future programmers going through this code."
0,The UI works as intended and the features work as they are supposed to
1,"No. There is no mention of any test cases in the write up. Also, no new test cases are part of this Pull request. 
 
Coverage was reduced by 1.9% after first commit. But I am not able to find any information regarding the coverage after the final commit. As the Travis CI failed for all test, I am assuming this coverage to be reduced to 0%"
1,"The team did discuss their test plan and its expected results in their document.  However, the team did not discuss which files were created or modified to test their code.  The team also did not mention the results of their tests.  In fact, according to the Coveralls bot on GitHub, testing coverage from their code actually decreased!"
1,"The team has not added any test cases. However, a section in the writeup says that manual testing is carried out for exporting a CSV file if no option is selected in the checkbox. According to me, tests could have been written in the views to check the export button as well as for the click event. 
Since no tests were written in the tests folder, I was not able to check if it covered the range of the project or not."
0,I'm not sure how to run the app from their repository using my Windows machine.
1,"The team had added a test plan section in the writeup but I could not find any new test cases for the added methods.
Since no test cases are been added the coverage is expected to decrease. 
In my opinion, the team should have added test cases to test the query that is fetching the data from the database."
1,I do not see where the team added any additional RSpec files for testing in the spec folder.
0,"Yes, there are 5 commits after Mar 31 and before the deadline. Looks like most of the work has been done after the first submission"
0,"Yes, there were five commits added during the second round. The query was added to generate the CSV files and the form was updated according to the new feature. Most of the coding part was carried out during the 2nd round of submission."
0,"yes, I could see 5 commits in the second round."
1,There are still changes that are to be made to the code. the code now doesn't pass the Travis CI build and the code is also not formatted according to Rust so I would encourage them to run rustfmt after writing code and before submitting the same for pull request again.
1,Writeup is simple and explanatory. I would have liked to see more details on what the problems faced while building were. I would have also liked to see more information on how they figured what to work on and how they approached the initial steps.
1,I tried to build the project from my system and it throws a few errors for me. They have also not made the changes proposed by the reviews of the pull request. So Im not able to verify the functionality. They have also not run the Web Platform tests as mentioned by one of the reviewer. I would have got a better grip on the project if they had completed the requirements or atleast given an idea of how to test the DOM interface.
1,There is a command given to test the build but there is no UI testing as its not an Expertiza project. It would have been better if the authors had evaluated how we could check if the DOM interface was working as expected.
0,The team has been working on constantsourcenode.rs and have created the DOM interface for ConstantSourceNode and implemented the CreateConstantSource API for BaseAudio Context. They have added a lot of code during the second review.
1,Code written is done well and they seem to have answered the problem well. They need to accommodate the changes proposed by the reviewers and it should look better. I would also ha
0,"From what i know of Rust code, everything appears to be in good order with variable names named appropriately."
1,"I think overall the write up looks in good standing. However, for me, since I did not work on the Servo application, it would be nice to have a broader introduction to the team's task, Servo, and the overall expectations to be achieved. The team did identify issues and how they were resolved, but me not being well versed in the subject, more details would been good."
1,This is a Web Audio assignment. I'm not sure if the team was to deploy the UI or not. I do not see a link in which I can test the UI.
0,Yes. The team continued to make code improvements through the second round of reviews.
1,I would not have a clue as to where to begin to state if this project could be deployed to production. I have not seen a working UI or any server side Continuous Improvement code validation such as Travis. I think it may be quite risky to deploy this to a production environment at this point.
0,The code seems to pass all the tests. The team has done a very good job.
0,The team has improved the write up with more information since round 1 and explained how the testing process works.
0,The project cannot be tested from a UI. But the command line testing passed all tests.
0,Existing tests in the servo project were sufficient. No new tests were required
0,Not an expertiza project
0,There were some minor refactoring and the ConstantSourceNode implementation was added in round 2. Fixed the parent node issue.
0,The code is very well written and the coding conventions are all followed.
1,"The tasks to be completed is not done yet. Since its a Mozilla Project, I am guessing there is more time.
The Mozilla team has accepted the changes made so far by them. They have given few more suggestions and tests for the team to try before their code can be merged"
0,"The write up is good and easy to understand. It covers all necessary information about the project. It gives a clear standing of how much is completed and how the implementation is done. 
 
No negatives about the writeup!"
0,This project cannot be tested from the UI
0,The team added the necessary tests that have to be run in order to test their implementation. These tests seem to have been recommended by the Mozilla team.
0,Yes New commits along with the pull request was found during the second round
0,"The code seem to have been written by taking previous servo code as samples. The naming, and the functions are all done catering to the Servo team's requirement."
0,"Yes, the team has done a good job."
1,"The team has added a lot of content during the second round, but I think it'd be easier for us to review if they add a bit more on what the problem actually is, and what are they doing to overcome the problem. For example, they could brief us a little on DOM interface for ConstantSourceNode, CreateConstantSource API for BaseAudio Context. Another problem I had was, not many instructions were given for how to build and run the project."
0,"Since this involves Servo, it cannot be tested from UI."
1,There are a bunch of test cases that needs to be passed in order for the pull request to get merged. Looks like some of the test cases needs to be passed in order to merge their code.
0,Not an expertiza project.
0,"Yes, there were many commits during the second round."
1,"Compared to the first round, the team has added code in many of the files and they've neither given bad names nor added complicated functions. However, I can't say more because there's not much explanation for the code, which makes it harder for me to understand what is actually going on. I feel comments could have been added for the code or a code walk-through could have been done on the Wiki page."
1,"It doesn't look like it's ready to be deployed to production since the TravisCI check passed.  However, looking at the comments from the Servo team, it looks like they are pleased with the work."
0,"The write up is well written and has improved since the first review.  Details about design, completed work, and testing have been added."
0,I'm not able to run this project since I don't have the Mozilla environment set up.
0,I'm not able to check for this since I don't already have the Mozilla environment set up.
0,This is a Mozilla project.
1,"It looks like the last commit was made 11 days ago, so no.  However, it does look like the team has been in contact with the Servo team pretty recently."
0,I'm not able to find any problems with the code.
1,I can see that they have done some good work and the Team has even got some good feedback they just have to do some little changes and some of the checks were not successful. Because of some minor problem some of their checks failed but the changes have been approved.  Other than that they have done a good job and i think this project can be deployed on the production server.
0,In the earlier round 1 of reviews i remember that they didn't have information in their writeup except the details given in the documentation. But now i can see that they have given proper details on the methods they implemented and why they chose it and the mistakes they did and how they rectified it. They have even given proper information on how to test their project
0,"This project is not a testing project and it is a servo project and thus we cannot test the system operation from the UI and cannot do tests to cover all the scenarios. But I can see that they have put in a lot of effort to implement the functionalities. Some of the checks don't pass, but the changes they made have been approved . I can see that the methods they have to implement have been implemented in a correct manner."
0,Since this is not an expertiza project this project doesn't involve coverage. This project can't be tested from a UI since it is a servo project.
0,This is not an expertiza project
0,I can see that they have written new codes during the second round. I can see some commits in which they implemented some ConstantSourceNode methods.
0,The code was written in a good manner and it properly follows a good coding style.  I didn't find any bad naming styles or long functions.
0,The write-up is so much better.
0,It looks like all tests passed which it appear that way before.
0,"I only see 1 commit (3 stars), but that may have been all you needed (5 stars).  I averaged the 2."
1,"They did submit PR here, https://github.com/servo/servo/pull/23152 but ferjm comment states that they need to  test the implementation and I see no comment or update on this here."
1,"I would suggest to add more explanation on the function as well as code block. Lets take
	    pub fn Constructor(
	        window: &Window,
	        context: &BaseAudioContext,
	        options: &ConstantSourceOptions,
	    ) -> Fallible {
	        ConstantSourceNode::new(window, context, options)
	    }
 
 
What exactly does this code block does? As an peer reviewer I assess codes that can't be tested by how well you could explain. For Rust projects I guess all the peer reviewers would be scrambled to understand your code block as they are no where near to each others projects."
0,"From, https://github.com/servo/servo/pull/23152 I see the code is ready with minor changes
Not an Expertiza project. This is a mozila project. http://wiki.expertiza.ncsu.edu/index.php/M1900:_Implement_missing_WebAudio_node_support#Testing  cites Test cant be performed."
1,http://wiki.expertiza.ncsu.edu/index.php/M1900:_Implement_missing_WebAudio_node_support#Testing  cites Test cant be performed.
0,Not an Expertiza project. This is a mozila project.
0,"Yes, it is passing and all conflicts were resolved."
0,All checks passed in Travis CI and there are no conflicts in the branch.
0,Travis passed and no conflicts to resolve.  Cool!
0,"Yes!! after checking the pull requests, the build has been in Travis CI, there are no conflict to resolve."
0,The project did pass the build in Travis CI. All checks have been passed which shows there is no conflict that can be resolved.
0,Team has worked well on this front and all the steps have passed including Travis CI.
0,"I checked the pull request and build passes in Travis CI.
Did not find any code climate issue."
1,"This code makes significant improvement over what was there before. The team has done well to identify the trace of all the calling methods and rectify them. I would strongly support integrating these changes to the main branch. However as the team mentioned, one of their sub topics was really vast and needed changes in many places well beyond the scope of their problem statement. Hence they have not changed anything pertaining to that problem. That could be picked up by a future team."
1,"My concern is that the HTML hasn't been verified.  It may be sufficient for existing test cases to pass, but that does not mean that everything displays and operates the way it should."
0,The code is well-documented; I think it is ready to merge.
0,"The code is of good standard is ready to be deployed and of good quality, the code has achieved its desired work."
0,"Yes, I believe the code is ready and deployable. Once the through testing is done, it is good to go."
1,"Yes, the code is ready to be deployed onto the production server.
The only thing that I feel is missing is adequate comments on the refactored code."
1,"The writeup is fairly descriptive and code is well separated from the description. I would suggest more description on the testing section because at first glance there is not much description, and there is only code which leaves the reader confused. Also, the problem with the 'complete' method' is listed but I would suggest emphasizing the solution more."
1,The work that the team has done has been well explained in the documentation. I would prefer if entire contents of HTML files are not pasted in the documentation as it becomes really hard to go through the entire code. It would be better if you only give a link to the pull request. The person who is going to read the documentation will refer the files directly.
1,"The writeup does a good job of describing the problems to be fixed.  As noted above, the testing section is lacking."
0,The write-up is much better than last time.
0,"the writeup is very good and the writeup explains clearly about the project the problem statements, about the pull requests, the methods along with the proposed solution and the implementation of the solution."
1,"Team has improved the writeup a lot from round 1. The suggestions that were given were implemented. Good work done on write up part.
 
Scope of Improvement/Suggestion:
There should not be too much code in the write-up. It is necessary that you convey what you have done. But I would not prefer to put long method codes in the documentation. This is something I feel team could improve upon."
1,"Writeup looks clean and all the required information are properly explained.
The team has explained each and every method that they are refactoring which makes it easy for the reviewer to understand the project.
The ""implementation"" section explains ""why"" and ""how"" the code would be refactored.
I could not find any section of the writeup which tells us about the design principles or patterns used by the team."
0,The project was a refactoring project and the features seems to work as intended. I did not get any exceptions with the UI in general and the checks with Travis CI is passing.
0,"Yes, the UI works as intended."
0,"Good Job team...
High-level functionalities are working fine. The passing of the build also suggests that the refactoring is done properly. The operations are working as expected. Good work.."
0,"The team has provided a deployed link and everything looks good to me and the application is working as expected.
I tried to manually check the functionalities that were mentioned in the writeup and I did not see any error."
0,"As the team has explained in the documentation, the team did not add any test cases. They removed the tests that were now invalid which I feel is just as important."
0,They deleted test cases.
0,"It is mentioned in the documentation that the project is a refactoring project and no test cases were required. But even if, you will have to refactor existing cases and team could have worked upon increasing existing test coverage."
0,"Yes, there were some new commits."
0,New commits were added in the second round.
0,"Yes, there were several commits."
0,There were many commits in round 2.
0,"Yes, new codes were submitted during the 2nd round."
1,"The team did commit the new code after the first round of the review. The commit messages were also meaningful.
The only problem I felt was the contribution was made only by one person rather than the entire team."
0,"Yes, there were several commits in round 2."
0,"The code is a dramatic improvement over what was originally there.  Given that the work was basically moving HTML-rendering logic from ruby files to erb files, style really didn't enter into it."
0,Team has done enough tests for controller.
0,Methods are appropriately-sized.
0,Tests are very well written and it covers almost all functionality. It covers adding users with same email id.
0,"the code is well-written and, as well as the build, has been passed, the code is of good quality."
0,"The team has thoroughly tested the user model and controller. The test cases are meaningful and have a good coverage of presence of all fields, uniqueness of emails, etc."
0,The code is well tested.
1,"The code was written to refactor four methods edit, view_question_text, complete, view_completed_question. According to me, the ""complete"" method is very long which could be refactored. It could be broken down in two methods which would have been a better option as a refactoring method.
The comments have been added appropriately for the code refactored. And coding style also seems to be good."
0,"Good Work:
Team has tested at least one controller and one review. Good work was done by the team on this front."
1,"Reviews can be given even if not enrolled for that tour and also even if the tour has not yet been completed.
As a customer if I am trying to ""show"" and book the tour which I have created as a new agent,I am not able to do it.I did not give the operator name while creating the tour and I think the problem lies here.Tour operator is optional so code should handle this case as well.
Not able to delete the tour as an admin.
The wait list scenario is not working.I booked max seats as Customer 1.Then as customer 2 and customer 3,I booked tickets where I was wait listed. Then when I decreased the booked seats for customer 1,the customer 2 and 3 were still in wait list."
0,It handles edge cases very well. Good luck to you too.
1,"The team has done an amazing job of handling most of the edge cases. Furthermore, they have attempted to identify the remaining edge case in the design. However, the validation of the tour dates has not been handled. A tour can be created with the end date being earlier than the start date."
1,"The test cases above have been thoroughly tested although when an admin tries to delete all users, including him/herself(using the select all checkbox) it throws an error."
0,The edge cases work. README.md is detailed
1,"The admin cannot change his profile now also.I tried to change the name but can't do it.
""Show in the app"" still throws error.
Who is logged in right now should be indicated through some way in case of customer and agent.
As an admin I am still not able to see who all have booked the tours,who have bookmarked,who are in waitlist.
As an admin I am not able to book or bookmark tours."
1,All the functionalities work very well. One thing that caused problem was that every time I tried to edit the tour the price automatically added a decimal value and then it gave me an error that integer required. The database expects a decimal value and validation is done of Integer.
1,"The application works the way it is supposed to. However, the tour status is taken from as an input from the agent/admin, so a tour in the future can be marked as completed as well."
0,The system works as it is supposed to and all issues in the first round have been fixed by the authors.
0,All the functionalities worked!
1,"Scope of Improvement:
Team has fixed most of the issues like issues related to tours, search, and photos.
Broken functionalities:
Agent should be able to delete booking or review or bookmarks. 
While Clicking on remove, the system is giving error ""UncaughtThrowError in CustomerBookingsController#destroy""."
0,These are fine.
1,"All the relationships are present. However, there is something which is missing. Bookings and Bookmarks do not belongs_to user."
0,The DB relationships are properly designed as indicated by the models. The team has also identified the relationships in their README
0,The code does handle the above cardinality relationships correctly in the models.
0,All the relationship seems to be in place correctly in the application!
0,"Good Work:
All the relationships like Agent-Tours, Customer-Bookings, Customer-Bookmarks, Customer-Reviews, etc were handled correctly and also documented in Readme.md"
0,Yes the commits were done during round 2.They were all spread throughout the whole project time period.
0,The commit history shows the team committed changed throughout the project including the time-frame between submission 1 and 2.
0,The team kept on committing changes regularly as well as in round 2.
0,"Good Work:
Team has regularly pushed the changes to the git. The team also have worked during round 2."
0,Code is really impressive.
0,The code is very well written with comments which make the code very readable.
0,The code is written in a clean and clear manner. One method handles only one task.
0,"The code is well written, clean and follows the guidelines mentioned above very clearly."
0,"Code was clear, concise and most of the good practices for code quality were followed."
1,"Overall Good Work:
In all the code, Ruby and Rails guidelines were followed.  Good Job team...!!!!
You could remove the logic for booking from the controller and put it into a model and then call this model into the controller. 
Rest of the implementation is really good."
1,Seems they didn't pass Travis CI.
1,"The pull request shows that the travis build has failed. But the team has added a video showing the build passing. However on further examining the pull request, the failure was not due to the code changed by the team. So yes, the pull request passes the Travis CI."
1,The build did not pass but they have video of tests passing. The had a error about debug code being committed.
1,The official pull request show the Travis CI build failing but they have uploaded videos showing the Travis CI build passing along with the rspec tests results.
1,"No, they didn't pass in Travis CI. They have the issues that can not run the test correctly. 
 
The command ""bundle exec danger"" failed and exited with 1 during ."
1,The Travis CI did check did not pass.
1,"The project doesn't pass the travis-ci, there initial pull request was fine during the first review but they have made some changes and are addressing them now I guess."
1,"There is some error for Travis CI, so not sure if the code is ready for production server."
1,"The code itself is good enough, but it still exists Travis CI bugs. They need to check the error for Travis CI. Except this, all things are doing well."
0,"Yes. Since they've not implemented any new features, since all the existing tests passed, the code is ready to be deployed on to the production server."
1,Some code that is commented out needs to be removed but other than it it seems good to go.
0,I believe that this code base is ready for deployment. With all the improvements and testing that these guys have performed I believe this is ready to be merged.
1,"No. The code didn't pass the travise CI. I cannot see what is the exact problem they have. I think they need to go over what they changed, and to find the problem that cause the problem."
1,Code still has some issues to be handled but it should be deployable as soon as the authors address the minor issues. Their method of implementation doesn't seem to be a problem and they have definitely increased the test coverage so I think they have done good work.
0,Amazing writeup. The team has a very good document for their efforts. The writeup is impressive.
0,The write was properly written. It covers enough explanation and details about the project. They improved their writeup by adding more tests than the first submission.
0,"As mentioned in the last review, they have outdone in every aspect. Their wiki page is one of the most detailed ones which explains everything they have done since the very beginning. They have included the testing section where they have mentioned how they have improved the already existing spec files. Also they have included new test files to test the model files that they have changed. They have also improved variable names, followed DRY principle wherever possible and added meaningful comments."
0,The writeup was very detailed and was worded well. It explained most of the things they've done in a neat way and covered a broad range of details and events happening in their project.
0,"I was impressed with the writeup as it was very detailed and gave us all the required information. They have elaborated the tests, explained the code climate issues, moved on to how to solve them and given a detailed explanation as to how to do the testing. I would have actually liked it if they had cut short a bit on explaining all the testing and just focussed on the most important ones, but that is not an issue."
0,The project is fixing code. The feature now is work as they are supposed to.
0,"Yes, everything works as expected on the deployed server link that they have provided. Nothing unusual there."
0,Yes the UI works as intended. The team has fixed all the code climate issues.
0,"Yes, all features work well from UI test. The team itself did rspec test and UI test in the project."
0,Code generally seems good.
0,I tried to run the code and check the tests and all the results were as reported by the authors. The authors have also detailed very well as to how to check their work and all the results match. All the features also work as intended but as described they have shown how code climate works properly.
0,"Yes, the team has neatly documented existing test cases as well as newly added test cases, and even provided a good amount of screenshots to the writeup. This is detailed and helpful."
0,yes they have added new tests and as shown the teams_user.rb is now 100% covered for example. They have also done lot of Rspec testing and explained it clearly in the documentation. Overall test coverage increased to 68.19%.
0,Although this project was not meant to add test cases since this was not introducing new code but they have worked on adding new test cases in the spec folder for the model files that they have touched. They have worked on the testing rigorously in the second submission round and shown the passing results through a video. Commendable job with testing I believe.
0,"Yes, the team added test cases. The coverage increased. From the write up, the coverrange is 100%"
0,They did add test cases and coverage did increase across many files.
0,"Yes, the team added new test case and the total coverage increased."
0,They have updated a test video.
0,"Yes, the team keeps on working after the first submission. They made their code cleaner and add some rspec tests"
0,Yes. The team has added new commits in the second round.
0,There were many commits in the second round.
0,Yes they have made many commits even after their project being complete in the first submission itself.
0,"Yes, there are some new code committed during the 2nd round."
0,"Yes, there have been commits during the 2nd round, but most of the work seems to be done before the first round itself."
0,Yes the authors have made some changes during the second review and improved the code functionality. But I guess they completed a chunk of work before the 1st deadline itself.
0,The code was well written. There are no bad names and it follows the ruby principles and didn't have DRY problem.
0,The code and the write up was well written.
0,"The code was written well, they improved the consistency and legibility of the code."
0,"Extremely well written code following the best Ruby coding practices. They have added meaningful comments, improved the variable names and followed DRY principle throughout and all these are apart from the Code Climate issues that they have fixed."
0,"The code is well written. I didn't find the further bad names, long or complicated functions, bad code style, Dry problems. Probably need some comments."
0,The code has followed ruby style guides appropriately.
0,The code follows DRY and authors have done a good job explaining all the code in their writeup and I didn't have any problem with the naming or the flow of the code. Good job done!
0,"They have good explaination on their work. Because it is a code climate issues work, they don't need any design principles."
0,"Yes, it explains well what issue they solved. 
Yes, all the changed code follows design principles."
0,"The assignment was to fix the code climate issues and the write up covers it. 
This project does not have any requirement to use design patterns or principles as this project just involved code refactoring."
0,They were fixing code climate issues so design principles does not apply here. Thy explained everything they did in great detail and made it very clear what they did.
0,"They have mentioned a list of issues they have fixed and I liked that they did not mention the trivial ones. They have explained the important ones in detail. They have worked on fixing the issues complained by Code Climate analyzer and incorporated the latest Ruby code semantics and snake case variables etc.
They have gone out of their project scope and attempted to fix the class variable names and also implement DRY principle which is commendable."
0,The writeup explained how and why the authors did the work by giving the common issues they have and provide the solution. They didn't use any design pattern because I think they don't need design pattern on their project.
0,The writeup describes all the metrics mentioned above and is well written.
0,"The writeup is self explanatory, but the fact that they have also attached a video with one of the members narrating the changes and the things happening there is a very happy surprise. This video infact helped me catch up with the Code Climate issue fixing project as well."
0,Ye the authors have clearly mentioned why they have made the specified changes and how they proceeded when there was a problem. They have also given a good and a bad instance to make us note the difference which I feel was done well.
0,They have shown their test results.
1,"Yes, the team uses two frameworks to do the test. 
In the Rspec test, there is the failure in the result. But from the document, it seems like this failure didn't affect this project."
0,"Since they've not implemented any new code, there is no hard requirement for them to come up with new test plans.
However the team has documented the RSpec testing to ensure that the changes they made didn't break the system"
1,They ran rspec and Travis CI for the code changes they made and attached the video output. Everything passes except for a file which they haven't touched. But you might want to take a look into it if your other changes  have impacted that code or not.
0,They have test plan section and list the steps of the test and provide a video about their test.
0,The authors have a test plan that describe the tests passed in the form of a video which is more than sufficient for this type of a project.
0,The testing is also clearly done and documented on the work done by the authors. They have also fixed and run existing Rspec tests and also made a video for the same which was also done well. UI Testing was also done and two main problems were identified and fixed.
0,The writeup is very detailed and complete. They clearly describe their problems and what they did.
0,"Yes, the writeup document is clear enough that I can understand the project and the problem in the current code.
I can understand what is code climate and what kind of code is good. 
In writeup, it shows what issues they solved and what issues are remained so far."
0,"The Write up is well written.
The team has put utmost effort to document their entire work in the wiki page.
In addition, the team has also documented the common code climate issues they found and provided the ways to avoid them. This would be helpful for the future contributors as they can easily find the best solution from this wiki."
0,They go into great detail explaining all the bad code and showing the correct way to code.
0,This is one of the most detailed and crystal clear write up I have seen so far. It exemplifies every issue that they have fixed in their project. I believe they have worked on the wiki page in parallel to the every commit that they made or every step they took in their project. I can get a clear picture of what they have done in their project from day 1 till the submission date. They have also given description about expertiza and code climate which is a good thing along with explanation about every issue that they resolved. It helps the reviewer get an idea of what's going on.
0,"The write up is very clear to understand what the project does. It describes the expertiza first and then talked about the project, give the guideline, and analyze the typical questions they meet."
0,The writeup is thoroughly detailed and has a lot of information about the project. The team seems to have understood the core concepts of the project assigned to them.
0,The team have clearly indicated all the functionality and work done. I was able to clearly understand the changes that were made by them and they have also provided good explanation for the changes made. They have also mentioned the remaining changes to be made and suggestions for future code that has to be written. The overall work looks neat and good and explanation provided makes it easy to understand why certain changes have been made.
0,They did a really good writting work.
1,"All the issues have been fixed except for one issue. If I understand the document right, this issue can be ignored in this project. If that's, I think all things have been done."
0,"The changes created by the team did not break the system. As far as Fixing Code Climate issues goes, the features work as intended."
0,They did not add any new code and all test passed.
0,I had added their repository to Code Climate and saw that they have fixed all issues.
0,"As the build and tests are passing, it is clear that the work is correct."
0,"The project is really great, and I enjoyed the opportunities it gave me to interact with their implementation."
0,"Yes, I was able to compile the code and run the required tests and author's code works as described."
0,The team did great on this.
0,"1. No too long functions
2. No need to be separated
3. Most of code is used to improve the current code, no more comments are needed.
4. It follows
5.No, all the code follows DRY principles."
0,Does Not apply to this project.
0,The code is cleaner now that they have gone through it and resolved some code climate issues.
0,I did not find any obvious issues with the code. They have fixed whatever Code Climate has reported.
0,All contributions follow the guidelines mentioned above.
0,"The names and methods definitely follow the ruby guidelines, such as renaming of is_leaf to leaf and so on."
0,The author has followed good Ruby on Rails programming practice and the code written was comprehendible and I did not fund any major issue with the same.
0,There are no new code added. But they have fixed code climate issues in code.
0,"The writeup is good enough and covers enough details. 
The team did fully explain everything in both writeup and video.
I don't think the team need to give other options in this project."
0,The team has worked in reducing the number of code climate issues and have succeeded in doing so
0,"They have not only fixed the issues reported by Code Climate with proper variable naming, method naming and class naming but also fixed other naming conventions and improved the modularity of the code by incorporating DRY principle."
0,"Because this is the issues fix project, I didn't see any variables, methods, and class names are not reasonable or suggestive of the functionality."
0,All the metrics mentioned above are met.
0,"The team has made a lot of changes over the course of the project until now, and looks like it is already reaching a near-completed state."
0,All the added methods are comprehendible and I did not find any issues with the code.
0,Test plan is well explained and shown.
1,It only has one failure in the test which is not related in this project. It's great to have different test methods. UI testing makes sure the project is complete.
0,Does not apply to this project.
0,They thoroughly tested their code to see if their changes broke anything but they did not add any new tests. There were no failures when they ran rspec.
0,I do not think this is in their scope but whatever they could test using rspec for their files they did that. I think that was more than enough.
0,"Yes, so far, they can pass all the test with dry, ruby style guide, commented, no long methods, and properly named code."
0,This is not a required parameter for this project.
0,"Yes, they have converted all the cases discussed into automated tests and the documentation on testing seems clean and understandable."
0,Yes. I see multiple commits. This wont be as much as rails projects but I dont understand that the code is Rust so takes lesser code bu ta lot of time to understand and test the.
1,They dont say anything about code or coding guide. Indeed they don't explain what is the code block they implemented as well.
1,"The author has not added any new functionality, I setup the environment and tried the code but I guess more changes have to be made."
1,"There is only some skeleton code written for now and I am not able to comment on how good the code has been written. If the authors had made more changes in their local repo, they could have also committed it so that it would have been useful to review."
1,The code added seems to be some basic skeleton code and the functionalities does not seem to be implemented.
1,There is no test plan that is described by the authors.
1,"There is no explanation for the work the authors have proposed to do, it would have been interesting to see explanation on how the constant_source node works and why they are creating a DOM interface etc."
1,The team just introduces WebAudio. All the material in the wiki seems to be directly from the open issue in the Mozilla projects page. The team seems has also not included any information about the progress made by the team so I was not able to evaluate the work done.
1,A link to the deployed application was not provided. I am unable to test the UI.
1,I do not see where tests were created on existing tests ran.
0,The code that was added appears to be well formed and following appropriate practices.
1,It does not appear the team made a pull request to expertiza/beta or a pull request in general.
1,The documentation did not explain what tests were performed to validate changes/updates.
1,The write up did not explain how and why the team made changes/updates.
0,I'm pretty confused about the whole project. I believe the team is to be was to be working on WebAudio driver.
1,Unable to test the working of the app since I had some dependency issues while setting up the environment. So I was not able to review this part.
1,I couldn't find any automated tests that were added by the team.
1,The commits and the code changes themselves lacked comments and I was not sure why the changes were made.
1,Not sure if all the features were implemented. The commits lacked comments.
1,The test plan is not included in the writeup.
1,"The ""how"" was listed as a series of stops but the ""why"" was not addressed well. A little background info on OscillatorNode, PannerNode and other classes would have helped understand."
1,"The writeup lists the steps involved in this project, but I feel it is too heavy on specific terminologies used in the project and was difficult to understand what exactly was being done."
1,No tests added!
1,I could not find any commits
1,No code to check yet
1,No tests added yet
1,"I could not find any information about the implementation process or what they have done so far. 
I am guessing they are still working on their code.  Hope they are done by the next deadline"
1,"The write up is clear. It needs more detail and information. 
Maybe they could add a link that gives more information on the servo browser that they are working on."
1,"As far as I saw, the team hasn't implemented anything yet."
1,"The team has written the steps that are to be done by them, but nothing is mentioned about their approach or the implementation."
0,"Since this is a Mozilla project, I'm unsure of how to test the work."
1,There isn't a Test Plan
1,It is difficult to determine which files were modified for this project.  It would be helpful if the wiki listed specific files pertaining to each step.
1,There doesn't seem to be a pull request
1,There isn't a Test Plan section.
1,The writeup doesn't really explain details of the implementation or design principals. The 'Initial steps' and 'Subsequent steps' sections would be more helpful if the steps were more descriptive.
1,"Writeup describes functionality, but implementation details are a bit lacking."
1,I couldn't find any code in the first place to check and so i am not able to manually test the author's work. So even i couldn't check any feature's correctness.
1,I couldn't find any codes or any pull requests. So i am not able to check whether it follows good coding styles or whether the functions have been written optimally with proper comments.
1,"I couldn't find any code in the pull requests and thus i am not able to check any variables, methods or class names."
1,"I couldn't find any test plan section in their writeup, Because of that i was not able to see any preconditions, edge cases, invalid input types and other possibilities as mentioned in the question. I can see only the details present in the OSS design documentation."
1,"From seeing their writeup page and the OSS documentation for their project it seems its exactly the same. They haven't written anything new apart from that. The writeup does contain initial steps and subsequent steps about how to approach the project, but i don't think they have mentioned any design patterns by themselves. This material is already available in the OSS design documentation."
1,They have given detailed description of what the project does and they have mentioned the two issues that they need to implement/fix. They need to implement two node types oscillatorNode and ConstantSourceNode. They have even given detailed information about initial and subsequent steps. However while in the introduction they could have mentioned more information about Servo possibly a external link to know more about it.
0,Pass - very good
0,The build passed in Travis CI without any issues and there are no conflicts that are needed to be resolved.
0,"Yes, the build passed in Travis CI. No, I don't see any conflicts that must be resolved."
0,Yes the Travis CI build passed.
1,It did not pass Travis but when they ran the tests themselves nothing failed.
0,Yes. The most recent commit with SHA 20dc75a has passed the Travis build.
1,"Unfortunately, Travis CI tests have failed with the following error(s):
Failures:
  1) assignment function creation page is able to create with review visible to all reviewers
     Failure/Error:
       child_nodes.each do |node|
         initialize_fnode_update_children(params, node, tmp_res)
       end
     
     NoMethodError:
       undefined method `each' for """":String
     # ./app/controllers/tree_display_controller.rb:209:in `children_node_ng'
     # ./config/diagnostic.rb:11:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
	 
	 ..................
179 examples, 1 failure, 44 pendings
Took 320 seconds (5:20)
The command ""export DISPLAY=:99.0 && RUBYOPT=W0 bundle exec parallel_rspec spec/$TESTFOLDER 2> /dev/null"" exited with 1.
Although there is possibility that the failure is not caused by your changes, your team should have investigated the root cause of the failure and report it to your mentor or at least state it in your Wiki page. Did you try to re-sync with the latest beta branch per Zhewei Hu suggestion? If this issue was introduced in original beta branch, I assume that the fix is delivered by now.However, it could be that your team caused this issue even though all your Rspec tests has passed (I watched the video linked to youtube, great job on running these tests!). The error is caused by Capybara. Therefore, you must have validated all your changes with UI testing as well to make sure they did not break any existing functionalities.
There no conflicts of the team's branch with the base branch in the Pull Request. Although I suggest to re-sync your branch with the latest beta branch.
Expertiza-bot also reported 3 Warnings:
- Your pull request has many duplicated commit messages. Please try to squash similar 
  commits.
  And using meaningful commit messages later.
- You are using global variables ($) or class variables (@@); please double-check 
  whether this is necessary.
- There are code changes, but no corresponding tests.
  Please include tests if this PR introduces any modifications in behavior.
Again, this may not be your the issues your team introduced. You need to contact your mentor and discuss how these warning can be properly handled. These warning could have been addressed in the Wiki in write-up document.
The last warning suggests, that your team did not write additional Rspec tests to test your changes. Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources to validate all your changes by writing additional Rspec tests that tests your changes."
0,"Since they've not implemented any new features and all the tests have passed, the code is good to go in the production server."
0,Overall the team did a good job.
1,"It looks good to go other than that one failing test. There are still a few commented out lines of code that need to be removed.
 
It is mostly done just some clean up to the commented out code."
0,I believe that this project is ready to be merged because the Travis CI build is passing and also the Code climate changes look absolutely fine to me. No issues there.
0,"Yes, the code is ready to be deployed into the production server for the corresponding OSS project, The team has done a very good job of working on all the edge cases."
0,I think the code is ready to be merged as the team has done a successful job in making it better and moreover it has passed all the test cases.
1,"Unfortunately, the project is incomplete and it is not ready to be deployed per corresponding OSS project. However, this is very good starting place for a future team to pick up and it should not be redone from scratch. I am sure that most of of the Code Climate issues were resolved by the team and team has done amazing job by resolving the issues. However, there are several reasons why their code is not ready to be deployed:
1. Lack of adequate and proper testing. Running ""bundle exec rspec spec/controllers"" does not guarantee correctness of code changes and fixes in the controllers. There are no new Rspec tests developed by the team to test code changes. Team did not deploy their project for UI testings. Very a little information with regard to testing was added into the Wiki page.
2. Unresolved and remaining Code Climate issues. Team did not fix all of the Code Climate smells that should have been fixed per corresponding OSS project. I think future team can pick up on left over work and resolve following issues that still remain in the controllers:
app/controllers/advice_controller.rb: Unprotected mass assignment:36; Use next to skip iteration:20-23app/controllers/application_controller.rb: Method ApplicationController#current_user_role? is defined at both app/controllers/application_controller.rb:26 and app/controllers/application_controller.rb:70;  Rename is_available to available?:97app/controllers/assessment360_controller.rb: Method populate_hash_for_all_students_all_reviews has 7 arguments (exceeds 4 allowed). Consider refactoring: 123-127; Similar blocks of code found in 2 locations. Consider refactoring: 52-58app/controllers/assignment_questionnaire_controller.rb: Unprotected mass assignment: 42app/controllers/assignments_controller.rb: Parameters should be whitelisted for mass assignment: 381; Convert if nested inside else to elsif: 371; Line is too long. [180/160]: 362; Use a guard clause instead of wrapping the code inside a conditional expression: 309, 359app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21; Useless protected access modifier: 99; protected (on line 99) does not make singleton methods protected. Use protected inside a class << self block instead: 101, 105, 118, 130app/controllers/automated_metareviews_controller.rb: Line is too long. [171/160]: 27app/controllers/badges_controller.rb: Unprotected mass assignment: 21; Inconsistent indentation detected: 27;app/controllers/bookmarks_controller.rb: Unprotected mass assignment: 66; Use %r around regular expression: 23, 24app/controllers/content_pages_controller.rb: Unprotected mass assignment: 54, 74app/controllers/controller_actions_controller.rb: Unprotected mass assignment: 42, 61; Useless assignment to variable - site_controller_id: 74; Prefer each over for: 102, 106, 112;app/controllers/due_date_controller.rb: Unprotected mass assignment: 48app/controllers/impersonate_controller.rb: Avoid too many return statements within this method: 68, 77, 88app/controllers/import_file_controller.rb: Avoid deeply nested control flow statements: 124-128, 145-146, 148-152; Similar blocks of code found in 2 locations. Consider refactoring: 102-106, 113-117, 208-212, 224-228; The use of eval is a serious security risk: 76, 93app/controllers/join_team_requests_controller.rb: Unprotected mass assignment: 48app/controllers/late_policies_controller.rb: Unprotected mass assignment: 66, 96app/controllers/markup_styles_controller.rb: Unprotected mass assignment: 28, 44app/controllers/menu_items_controller.rb: Unprotected mass assignment: 49, 57, 100, 117, 118, 129, 130; Similar blocks of code found in 2 locations. Consider refactoring: 112-116, 124-128
3. Wiki page still can be improved with suggested information that still missing.
These are my biggest 3 concerns with regard to why refactored/modified code is not ready to be deployed onto production server."
1,"Overall, the Wiki page has been improved a lot since 1st peer review and certainly contains a lot more useful information. Good work by the team updating the Wiki and providing missing information from the 1st peer review.
I see that team added missing information for the Test Plan section (although, information that was added is not enough to cover Test Plan for Code Climate issues). Your team should've elaborate more on the testing part and provide more information and results. Again, running ""bundle exec rspec spec/controllers"" does not guarantee correctness of your code changes and fixes. This should be very first statement that appear in the Wiki under Test Plan section along with description on additional testing performed by the team.
The ""Typical Issues and Improvements"" section is improved the most! Great work is done by the team by providing additional (if not all) examples, and solutions with code samples as you have done it in the code. This is very informative and descriptive section and readers have clear idea on what the team has worked on, why it fixed the issues and why it fixed the issues. Great work!
There are still some suggestions I provided in the 1st peer review round that were not addressed:- Adding ""Introduction"" section where team can briefly explain all new terms, such as Code Climate, code smells, and even what is the code that team is working on. Single ""About Expertiza"" section does not provide enough information to the reader.- The ""Main issue files"" section is still unclear and confusing. Still it is unclear what exactly is in that section and what does the team try to address?- No difficulties or issues the team has faced while working on the project are stated in the Wiki.- Any information about remaining Code Climate issues (since not all was fixed), issues that were ignored by the team (and why), and further suggestions for improvements.- ""Conclusion"" section is still missing in your Wiki.
Overall, the Wiki page looks decent and was improved to the point where it meets requirements."
0,Very well-organized.
0,The wiki page gave a good explanation about the project. The problem addressed in the wiki page was a redirection of the code and explained all the functionalities implemented. The questions were clearly stated and the solution was presented properly.
0,They have improved upon the writing from the previous submission definitely. They have provided more examples of the code climate issues that they have worked upon and also provided the testing section to corroborate their test plan.
0,It is very thorough and every kind of problem and the corresponding solution has been given. Plenty of examples. Information about testing was sparse but they didn't do any testing so makes sense.
0,The Write up is very well written. The team had put in significant effort from the last submission to describe all the issues they found and how they fixed it. This wiki would definitely serve as a guide for the future contributors. Kudos.
0,The writeup is well-written
0,"Yes, seems no errors for their code fixed."
0,The UI Works as expected. Same is corroborated by the spec testing results.
1,There was no deployed project so no way to know if it works but all tests expect one is passing.
0,This project is about fixing code climate issues and I see they have fixed all the possible issues reported by the code climate analyzer.
0,"Yes, the system operation from UI and all the functionalities and operations work fine as intended. Yes the code has been refactored well and the test cover all the expected scenarios."
0,All the features are working as they are supposed to and also all of  there code passed all the required test cases.
1,"I was unable to tell the UI or if things work as expected. Since this team was working on fixing Code Climate issues, I would think we would have to see the code climate test passed. They seemed to be running the rSpec or Travis CI tests. I could be wrong though."
1,"As I have already pointed out in the 1st peer review, team did not deploy their Expertiza project or did not provide any related information on their deployment of Expertiza project. Unfortunately, team ignored my request to deploy the Expertiza project on Heroku or NCSU VCL for the 2nd peer review. Since UI testing is a crucial part of testing any changes and fixes done by your team on controllers, it is necessary to deploy your project so other peer reviewers can run simple live demo to ensure that all features work as expected.
However, as I've already done in the 1st peer review, I again used team's code from Github repository that I cloned and pulled the latest code usinggit clone https://github.com/ece517-p3/expertiza.gitgit pull
and using master branch ran Expertiza app locally on my environment.
I performed short UI interaction by running Expertiza instance based on team's latest code to cover as many controllers as possible that were refactored and fixed by the team. I did not find any issues, nor encounter any errors, nor break any existing functionalities in the controllers. All refactored/fixed code appears to work properly and as expected. However, it takes long time and effort to run through all possible UI scenarios to test your team's code changes on the controllers. I've completed only small part of UI tests out of all possible, to test controllers with names beginning with A through N. Hence, do not rely purely on my observations. It is possible that I missed some of scenarios that can cause problems. This part of UI testing should have been completed by your team and results should have been documented in the Wiki page. Unfortunately, I do not see anything related has been done for this project.
 
As I mentioned previously. running ""bundle exec rspec spec/controllers"" does not guarantee correctness of your code changes and fixes. I'm taking few points off for not deploying the project and not testing your changes thoroughly (I did the same for all other teams)."
1,"The team hasn't added any new test cases. However the project being code climate fix, the motive is not to break any existing code while implementing good ruby standards and the team seems to have achieved that."
1,"They did not add new tests but tried to make sure that fixing code smells did not break functionality. I do not know if code coverage increased, the code climates tests did not run."
0,"Yes, the team added test cases. The coverage increased after all the tests were implemented. The added tests cover most f the important parts of the project."
0,"Yeah, the team did add the test cases and all the controller tests passed without any failures . These tests are only verifying the functioning of the controller and I think it covers everything of this project."
1,"The team didn't add test cases, however, I'm not sure their project warranted that."
1,"Team did a good job validating that their changes did not break any existing functionalities or Rspec tests in the controllers! Team's Wiki page has section about running existing Rspec tests and team provided link to the youtube video where they provide brief demo on running existing Rspec tests.
However, these tests are not enough to guarantee that your changes did not break any existing functionalities. You tested only controllers specs assuming that all tests are only controllers Unit Tests. You should've tested models as well, because models specs use some controllers to perform integration tests. Your team should've execute at least the following command:
bundle exec rspec spec/controllers spec/models
 The above command runs models as well (although you did not change any models). Some models run integration tests that validate code in the controllers of your interest.
Moreover, I see that team did not write any additional Rspec tests to validate their changes.  Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources on writing additional Rspec tests that directly tests all your changes. This would help to ensure integrity and validation of the code you are proposing over Code Climate issues.
Since there are no new tests developed or written, subsequently, the code coverage cannot be adequately increased to reflect new tests rather than refactored code that was done by the team.
The suggestion for your team regarding testing is to write additional 5-10 adequate and proper Rspec tests that can cover broad range of the controllers that your team has modified. Without additional Rspec tests, there is no way to know for sure if your changes  did not cause any problems in the existing code. As it was suggested by me in the first review, there are 4 types of tests that your team should have performed and report the results in the Wiki:
1. Code inspection2. Passing/fixing existing Rspec tests3. Write additional Rspec tests that run directly on the code that was modified4. Run through a live demo in the Expertiza instance through the UI that runs over changed/improved code
In addition your team should have developed new Rspec tests to be completely sure about your changes. After all of the testing steps performed and results are documented in the Wiki, only then it should give some confidence that your changes did not cause any issues.
Also I see that team still did not deploy their project as I suggested in the first review. Running UI of Expertiza instance with your code is one of the crucial parts testing. Did your team validate changes by running Expertiza instance and trying to perform some actions on it? There is no related information in the wiki with regard to UI testing.
Unfortunately, team could have taken multiple approaches to validate their changes, besides running existing Rspect tests on the controllers. But no such approaches were taken by the team. Therefore, testing is done very poorly."
0,"Yes, there is new test cases."
1,"Yes, there were 10 commits during the review period starting from March 25-th. There are 77 total commits performed by the team. Unfortunately, all round 2 commits are done by the same person: Shuai Wang. In fact, I see that most of the work was done by 2 students: Shuai Wang and HHHarden. There were almost no contribution from the 3-rd person.
Also, at least 1 commit (the latest one) introduced new Code Climate issue:https://github.com/ece517-p3/expertiza/commit/20dc75ad09f64204133a65e2d4ef3f79854cbe27This introduced new Code Climate issue that I reported above: app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21
However, there was an attempt from the team to fix as many issues as possible during 2nd round. Good work for attempting it!"
0,"Yes, the team has been active after the first round and kept pushing their updates regularly. hroughout the project, the team has been making several critical changes."
0,Yes Shuai Wang committed all the changes in the second round.
0,They have worked on the project in the second round.
0,Yes the team has committed new code for the second round
1,"No, the build did not pass Travis CI. There are three errors which can be fixed pertaining to an empty line, a trailing blank and a lengthy line."
1,"I am not sure. As there is test plan and all the Travis CI tests are failing, I cannot at this moment say whether the code is ready for deployment. However, the screencast is promising with the feature working. Better option would be to check if the feature is working for all the scenarios and clear the Travis tests. IF this clears, then the code can be deployed"
0,The team has definitely fixed the code climate issues that existed
0,"They have cleaned up code and made it more legible and consistent. The code is more DRY, and reduced bad style."
0,"According to me, this code is ready to be deployed onto the production server because a new helpful functionality has been added for Expertiza which has also not affected the existing functionalities. The only small concern for me would be if the team would have written tests at least for the views or the data which is generated in the form of a csv, it would have been a perfect project implemented. 
This project could definitely be a starting place for the future to pick up by writing tests for this feature implementation."
0,They have followed Ruby best practices and adhered to the syntax and semantics of Code Climate analyzer and solved all the issues; barring the ones mentioned by the instructor; in the best manner.
1,"The team had done a good job in implementing the functionality and from the screencast, it is evident that the feature is working as expected.
Following are my concerns and due to which I am not sure whether it can be deployed or not.
1) I can see a lot of changes in the ""DangerFile"" and I could not understand the reason behind those changes.
2) I could see screenshots but could not find any rspec for the added method."
0,I didn't find any problems with the code since the code was well refactored and all the class names and instance names were very relevant. We can understand the code by looking at the files refactored.
0,"Overall, the code is very well written and they have been constantly correcting he mistakes and making it better , though there are few warnings regarding usage of some variables but I don't that's an issue at all."
1,"Since the goal of the project is to Fix Code Climate issues in controllers with names beginning with A through N, I expect not to find problems in the code, but to see that all Code Climate issues reported on the controllers of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate that all Code Climate issues are resolved, I cloned the team's Github repository https://github.com/ece517-p3/expertiza.git , using master branch registered it with my Code Climate account, and performed Code Climate validation on it.
I found that some of Code Climate smells still exist in the project as they were not addressed properly, and some of them were introduce at later stage by team. I report them all as follows:
app/controllers/advice_controller.rb: Unprotected mass assignment:36; Use next to skip iteration:20-23app/controllers/application_controller.rb: Method ApplicationController#current_user_role? is defined at both app/controllers/application_controller.rb:26 and app/controllers/application_controller.rb:70;  Rename is_available to available?:97app/controllers/assessment360_controller.rb: Method populate_hash_for_all_students_all_reviews has 7 arguments (exceeds 4 allowed). Consider refactoring: 123-127; Similar blocks of code found in 2 locations. Consider refactoring: 52-58app/controllers/assignment_questionnaire_controller.rb: Unprotected mass assignment: 42app/controllers/assignments_controller.rb: Parameters should be whitelisted for mass assignment: 381; Convert if nested inside else to elsif: 371; Line is too long. [180/160]: 362; Use a guard clause instead of wrapping the code inside a conditional expression: 309, 359app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21; Useless protected access modifier: 99; protected (on line 99) does not make singleton methods protected. Use protected inside a class << self block instead: 101, 105, 118, 130app/controllers/automated_metareviews_controller.rb: Line is too long. [171/160]: 27app/controllers/badges_controller.rb: Unprotected mass assignment: 21; Inconsistent indentation detected: 27;app/controllers/bookmarks_controller.rb: Unprotected mass assignment: 66; Use %r around regular expression: 23, 24app/controllers/content_pages_controller.rb: Unprotected mass assignment: 54, 74app/controllers/controller_actions_controller.rb: Unprotected mass assignment: 42, 61; Useless assignment to variable - site_controller_id: 74; Prefer each over for: 102, 106, 112;app/controllers/due_date_controller.rb: Unprotected mass assignment: 48app/controllers/impersonate_controller.rb: Avoid too many return statements within this method: 68, 77, 88app/controllers/import_file_controller.rb: Avoid deeply nested control flow statements: 124-128, 145-146, 148-152; Similar blocks of code found in 2 locations. Consider refactoring: 102-106, 113-117, 208-212, 224-228; The use of eval is a serious security risk: 76, 93app/controllers/join_team_requests_controller.rb: Unprotected mass assignment: 48app/controllers/late_policies_controller.rb: Unprotected mass assignment: 66, 96app/controllers/markup_styles_controller.rb: Unprotected mass assignment: 28, 44app/controllers/menu_items_controller.rb: Unprotected mass assignment: 49, 57, 100, 117, 118, 129, 130; Similar blocks of code found in 2 locations. Consider refactoring: 112-116, 124-128
Unfortunately, there are more than 30 Code Climate issues that your team did not address on the controllers with names starting with A through Z. All of the above issues can easily be fixed and tested. For the ""Unprotected mass assignment"" issue your team could have used attr_accessible to limit mass assignment or explicitly whitelist all query parameters via permit to allow being used in mass assignment as follows:params.require(:args).permit(:arg1, :arg2, ...)This is the most frequent and also major issue that still needs to be resolved. For the rest problems you can just follow hints that Code Climate provides you. For example, ""Line is too long"". Break that line into multiple lines.
I also looked at some of your code and I see that some issues were introduced by the developers in your team:https://github.com/ece517-p3/expertiza/commit/20dc75ad09f64204133a65e2d4ef3f79854cbe27was committed at April 1 and changed find_by() to find_by_login at line 21.This introduced new issue that I reported above: app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21. You should've left find_by() and did not have to change it.
Overall, there are some improvements made on the code. However, not all Code Climate issues were properly resolved and some of them were introduced by the team at later point."
1,No detailed description.
0,"Yes, the writeup explains how and why the authors did the work the way they did and the authors have used all the necessary design principles or patterns in the right manner. The authors have covered all that has been expected and I don't think they have missed anything."
1,"No, proper description has been provided regarding the work they did apart from mentioning the files they have modified."
1,"It does describe generally what was done, but only gives one specific example."
1,The writeup and the code explains how they did the work although they only mentioned one issue as an example. They should've atleast described and given an example for each unique codeclimate issue.
1,"The wiki very briefly explains how the authors did the work by providing a single example with the Code Climate issues (Use a guard clause instead of wrapping the code inside a conditional expression). The wiki does not adequately explain why the authors did the work due to confusing terms (Code Climate, code smells, and etc.) There must be more issues that the team has resolved in the code source. Try to identify at least top 5 most frequent issues Code Climate reported, state these issues, provide solution to them with some brief explanation how and why team's solution approaches were used. Trivial improvements, such as ""Extra empty line detected at method body"" or ""line is too long"" can be left out. However, remember at least to mention them and indicate that they have been resolved.
The team should elaborate more in the wiki on how and why they have done the the work. Please consider the following list of improvements I provided below:
- Always start Wiki page with Introduction section where you can briefly explain what you're working on.
- In the Introduction section address all new terms, such as Code Climate, code smells, and even what is code you are working on? Is it Expertiza source code or something else? Briefly talk about what is Expertiza as well in the Introduction section. Do not forget to include useful links.
- In the ""Project Task"" elaborate more on the issues that the team has resolved. Provide code samples and explain why did you use that approach and it can be improved further (if it can).
- The ""Main issue files"" section is unclear. What exactly is the team trying to address there? If you want to demonstrate the main issue, do not just state the file names, provide these issues and explain what the issues.
- ""Typical Issues and Improvements"" section is what you are looking for in the entire wiki. This is good section, but not fully written yet. Try to provide more examples, and solutions with code samples as you have done. This will be very informative and descriptive.
- Testing section is completely empty. Try to elaborate more on the testing that your team has performed. What testing strategies your team used?
- Please state any difficulties or issues the team has faced while working on the project.
- Please mention any additional improvements if your team has done over the project (if any).
- Please mention remaining issues and further suggestions for improvements.
- Also have ""Conclusion"" section in your Wiki.
- May be move ""Project Team Member"" to the end of the wiki since this the least information reader needs to know about.
- May provide more information on who worked on what issues?"
1,"Scope of improvement:
The writeup gives idea about how and why part. But the descriptions are not enough. Team could add up more on this part.
 
Liked Work:
I really like the way the team has documented the pending part. It always better to document the status of the work. I really appreciate that."
1,There is no testing information here. Though I understand climate issues are not require to write their own Rspec testing case but TA mentioned they could still run existing Rspecs to show their modification didn't destroy other code
1,The write up does not indicate if the team tested the code after making changes to the code.
1,"There is no information under the testing section, just a section header."
1,You have added a Testing section but there is no content under it. You could have added rspec testing related to your files and also the code climate result after the modification in your files.
0,"Yes, the wiki page does have a section in the wiki page that is similar to Test Plan and that section is named as Project Task which gives a very good understanding to the user. The team has covered all that is expected and I don't think they have missed anything."
1,There is no Test Plan section at all.
1,"There doesn't seem to be a ""Test Plan"". Although, perhaps for this specific project the testing is just running Code Climate."
1,As such codeclimate assignments do not require extensive testing although the team should have downloaded and verified whether all test cases are passing using rspec. They could also make a video showing the test cases are passing.
1,"Test Plan section is missing. There is a ""Testing"" section header, but the body is completely empty and has no relevant information.
Please, update that section, fill it up with the testing strategies team used, and indicate how the code improvements/changes (fixes for Code Climate issues) were verified and tested against new issues that you could introduce? List all relevant testing steps performed on the fixes that you have done.
Ensure to test your code changes with at least 3 following steps:
1. Code inspection
2. Passing/fixing existing Rspec tests
3. Running through a live demo in the Expertiza instance through the UI that runs over changed/improved code"
1,"Team could have added something in Testing section. If your feature does not demand test fix, you can mention that as well in the documentation. As nothing is mentioned about the testing, it is somewhat difficult for the reviewer to guess whether the testing is necessary or not required."
1,The writesup lack a lot of information.They only copy the description from project requirement. And just gave a small example of their modification.
1,"The write up is not elaborate.  The wiki does not give an overall idea of what Code climate issue is. From what I understood, there are many available code climate plugins such as Brakeman, Rubocop, each looks for issues in certain aspects of code. The team did not specify which plugins they used to identify the issues in the code. Though this is not a deal breaker, this would help the reader to appreciate the effort put in by the team."
0,"There does not seem to be a way to test the Servo project from the UI. Additionally, their project does not seem to change anything the end user would notice; it just changes the type of the BluetoothAdapter for ease of development later on."
0,It does not seem like they needed to add new test cases for this project. The testing section of their writeup explains this. The existing relevant automated tests all pass.
0,"Yes, multiple commits were made during the 2nd round."
0,"The code was well-written. Their variable names and methods made sense, as did their commit messages."
0,"The code was written well enough, they don't seem to be disobeying ruby guidelines."
1,The code is well written but can avoid the code climate errors
0,"The code is well written and tested, so the code is ready to be deployed onto the production."
0,The writeup is well written. The team members have included everything including how to setup the environment. The problem statement is well defined.
0,There are new commits done by the team in the second round. Most of the commits are done by a single person.
0,"The code follows all the DRY principles, there are proper comments for all the code that is implemented."
0,I don't see any code issues that are of concern. All the coded added/modified by the team appears to be of good form with variables appropriately named.
0,As i said before from seeing their pull requests some changes have to be made to their code in order approve the pull requests. They have done some good work writing the functionalities and with some changes the project will be ready to be deployed on the Production server.
0,This is not a testing project and moreover it is a Mozilla project and thus they need to implement a functionality and not to write test cases. Thus there is not test case and no coverage for this project. But they do have some Bluetooth automated tests to run which is specified in their writeup.
0,It is not an Expertiza project
0,From their commit history i can see that they have written new code which is significant during the round 2.
0,From looking over the code they have written it style is good and function namings are mostly already given. So i couldn't find any bad namings or bad coding style.
1,"No, the code need a lot of work before it can be deployed in the server as it even fails basic build as of now. given that BluetoothAdapter is supposed to be a trait now, some functions (like new and show) in adapter.rs don't seem to be using the trait functionality properly and team should fix the same.I think they have finally understood how to proceed with the project and I think with more time invested on it they should be able to complete it."
1,The writeup clearly explains what a trait is and how it should be implemented. They have also added the source code for the new functionalities added. They could have tried to add more information about the repository they are working on and how their work will add a more dynamic nature to the servo/devices functionality. Because a trait is made to make it easy to access certain functionalities which I feel they could have elaborated more on.
1,The code written seems like a template and only a few real changes have been made by the team. They should try to fix the issues and try submit to Mozilla because I find the
1,"The authors have tried explaining the motive behind the proposed solution. There is no mention about the design principle or the pattern and I believe, we might not need one for this project. 
 
Explaining a bit more on how the solution can help in redution of Instructor's work or on what basis did the team finalize on this solution might help in easy understanding"
1,"The team presents their solution to one of the objectives to the project and shows an image of the results.  However, the description does not show where in the file code was added.  Additionally, it is not clear on which files were modified."
1,"The authors have carried out a minimal part of their project. But whatever is carried out is clearly mentioned in the writeup. The authors have not mentioned a design pattern or principle for their implementation. According to me, the project exporting tagged comments does not use any particular design pattern, which might be the reason for not including in the writeup.
The implementation of the project requires an additional method to be written which will export the tagged comments in a .csv file. However, this part of the implementation has not been carried out yet. A checkbox button has been added for the tags that will be exported."
1,"I could not find any section of the writeup which explains why the authors came up with this approach or which design principle or pattern the team would be implementing.
It would have been a better approach if the team had specified the design principle in the ""Future works"" section (since most part of the implementation is yet to be completed) to indicate the plan of work."
1,"The work that the authors did was adequately explained. There is just probably a misplaced title ""definition , demo code and snapshots"""
1,"The team did explain what and why they were making changes. however, the submitted a link to Expertiza Pull Request. I am not sure how to navigate to there repo to make any further code reviews. Also, it appears the forked from master branch instead of beta."
1,"No , I do not think it is ready to be deployed since all the checks and Travis-CI build have failed."
0,"Their write-up is very descriptive and to be honest, their project seems complex than the others."
0,I do not have a link to the UI
0,The code is well written and they are in constant communication with the developers to rectify their errors which is a good sign. Great effort by the team!
1,"There are some application issues as well as both travis CI build and continuous-integration/appveyor/pr — AppVeyor build failed for the pull request.
Which makes it clear it that the code can not be deployed as it will not work properly."
0,The write-up now includes instructions on how to set-up environments in Windows and Linux.
1,"This seems to be a functionality, which is under progress at this point. I believe tests will be in line later."
1,I could not find any Test Plan section in the writeup and hence could not comment about any of the mentioned points.
1,The authors have currently not implemented any test plans for any of the scenarios of their project!
1,No test plan was included in the write up.
1,"No, at this moment there is no Test Plan section. The team is yet to come up with the RSpec tests for the project and I beleive that can help in the increase of test coverage"
1,"The team has explained the problem stattement in easy english (Under Motivation Heading). I would suggest adding a problem statement tab and move these contents to it.
 
Additionally, proposed solution is explained in a single line and is a bit ambiguos (hence in order to solve this issue a new idea was proposed as to select on the students which did not create outliers in the predictions and hence, therefore, it is a good proposal.) Maybe breaking the sentence or exlaining a bit more can help a user to understnad how the team wants to solve the problem.
 
Overall, the description gives a clear idea on what the team wants to achieve"
1,"The documentation was good and provides a good explanation of the project.  It states the objectives of the project and the work that still needs to be completed.  The objective that the team did complete appears to be well documented and functional.
One suggestion, in the problem description where it says ""manually fire queries"", the word fire should be changed to ""executed"" or ""performed""."
1,"Can also reference to implemention of Trait in Rails or Java language so it would greatly ease us to understand the concepts. Instead of pasting ""A snippet of the code in adapter.rs"" please consider explaining them block by block as what each code does. This helps in handholding the peer reviewers or the next batch that might refer the wiki.
Consider adding to showcase how the test cases or your code works or tested"
1,"The Wikipedia page clearly mentions the functionality the given work is related to. The section of the ""Tasks Implemented"" which also includes a code snippet is enough to understand what the project does. However, no exact method or a technique is defined on how will the implementation be carried out. That is, the task is identified but detailed information regarding the task is not provided."
0,Not an Expertiza project. So I can't comment about it
1,"The writeup does not have a lot of content in it, but it does explain the problem in context here clearly. This being only the first submission there is still time to add a lot more content to the wiki page. I look forward to reviewing their pages again after the final deadline."
0,Not an Expertiza project
0,"Rust by itself DRY. The team have covered that test cant be done but refactoring is done as required at http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Spring_2019_-_M1902_Refactor_bluetooth_support_for_better_maintainability#Running_the_tests
 
But also adapter.rs calls several fn's, say,get_uuids(), which appears to be following good guidelines but I can't verify is that their thought process or they just reused/called an available function."
0,I built the project in development mode and it built successfully.
1,"The writeup is missing a section describing what the team actually did. It goes into a lot of detail about the Servo project and how to run it, but I cannot tell from the writeup what the team has actually contributed. I suggest adding a section that describes that."
0,"The functions followed DRY principle. I have not found any inconsistencies through out the code. Since,the code was modulated properly, it was easy to comprehend."
0,"Yes, the variables, methods and class names are very relevant to their respective functionalities. By looking at the code I could understand why each variable was defined."
1,"Authors work cannot be tested at this point. As this is a new feature, I believe deploying the solution on Heroku/VCL can help the reviewer to verify the feature. In case, this is a bottleneck, a short video can help the reviewer in better understanding"
0,This project does not require any test plan and hence nothing is expected out of them.
1,It was not possible to readily test the team's work since no test environment was available.
1,The authors have carried out only 1 of the 3 tasks mentioned on the Wikipedia page. The task of adding a checkbox for each row has been correctly implemented. The other two tasks have not been carried out. The code is insufficient because some features are not implemented at all. The work is largely incomplete.
1,The write up should have included code snippet for better understanding of the implementation. The team divided into different sections. But the sections are not presented in detailed manner. The team should work on the document for the next submission.
1,I couldn't find any newly added code in the github and there is new new contribution or pull requests from the author.
0,They have given the files that have to be modified and given the steps that need to be done to do the project. Other than that i can also see proper steps to build and run the project.  They have provided the details about the implementation under the Implementation heading.
0,They have written their writeup very clearly and it has good description about Servo and Rust. They have also written the problem statement and from that i can  properly understand the issue and the feature that has to be implemented has also been given.
1,"The team has currently only added a checkbox for each row in order to select students whose tags are to be exported.
I could not find any button to export the tags and hence could not verify the required features
 
Following edge cases can be tested once the implementation is completed:
1) What happens if none of the checkbox is selected. Ideally, it should not create any CSV file.
2) If all the checkbox are selected, everything should be exported into CSV file."
0,"The checkbox works very well, and seems to be a good idea to select what to export."
1,"I do not see a link to the deployed application, so I am unable to verify the UI."
1,"The view code for  answer_tagging_report.html.erb was formatted well and readable. Only suggestion I have to change line 41 and have the one liner <th> ... </th> code to look like this:




<th class=""sorter-true""># taggable answers
<img src='/assets/info.png'
 title='As set up in the assignment setting, 
 the authors can only tag answers of <%= tag_dep.question_type %> 
 question type that are more than <%= tag_dep.answer_length_threshold %> 
 character(s).'/>
</th>"
1,"There was no code written by the authors that we could use to evaluate the above functionalities. If authors had made local changes, it would have been better if they had shared the files for evaluation so that we could give suggestions."
1,There was no pull request or commits made by the team. It would have been better if they could have shared the work they have done till now so that we could have judges it better.
1,The writeup doesn't have a test plan section.
1,There us brief writeup on the use case of Servo and WebBluetooth but I was not able to see any implementation of the functionality they had mentioned. They had explained the advantages of their problem statement but again no information about the progress made by the team was available.
1,"The writeup introduces the concepts (Servo/WebBluetooth) the team is going to work with and what their work to be done is (Refactoring vale from enum to trait). They have listed the steps to be followed and files to be worked with. The build procedure of the repository is also mentioned with which I was able to set up the environment. 
But that is all I was able to see in the wiki page, there were no details about how much progress the team has made with respect to the project and even in the links submitted I was not able to see any commits or pull requests. It would have been helpful if the team had mentioned the amount of progress/problems they are facing while implementing the above project."
1,"I cannot judge because in both the github links that they have given, there is no pull request and there is no Test Plan mentioned in the wiki doc."
0,"From the code that is visible in the Pull Request, the code appears to be in good order and form."
1,The writeup does not explain anything in terms of testing the functionality. The code has not been entirely implemented for the project. Only a checkbox button has been added. The problem-solving approach seems to be lacking because tasks have been identified but the process of implementation is not thoroughly explained.
1,There  answer_tagging_report.html.erb had no method names to check.
0,The names are intuitive.
0,"From the code that is visible in the Pull Request, the code appears to be in good order and form."
1,I cannot judge this because they haven't included a test plan section but they do run automated tests
1,"The Team did not specify any test plan in the writeup and hence could not verify it.
Although, I checked the code for automated tests but could not find any."
1,The authors have not yet added any tests for their project!
1,"As of now, there is no Test plan nor RSpec tests. Once, we have the tests added, we can check for the failed/missing tests."
1,I am not able to track any new test cases or the changed one and nothing specific about tests are mentioned in the wiki.
1,They did not mention anything related to the Test Plan.
1,The team has mentioned that they need to add some new fils and have to modify them. But they don't mention that in which folder they have added the file if they did and I am not able to locate any changes done in the files that were supposed to be changed.
1,I do not see where the team made tests or ran existing tests.
0,It appears that most stated features work.
0,Appears that all tests pass and are automated.
0,All additional code is well-formed with names suggestive of functionality.
0,"Yes, there is a section titled ""Implementation"" with a subsection titled ""Steps"" with bulleted descriptions of how the refactor was carried out."
1,"While the write-up has a section on how to build and test the code, it's only for the Mac. I have a Windows box so I can't build it. At a minimum you could've provided a link to building the code for other operating systems."
0,I don't think you would need to write any new tests and you documented how to pass existing tests.
1,"I have absolutely no idea how to run this code, since there is nothing in the write-up that describes how to do run it."
1,There is no mention of testing.
1,"Again, I can't tell what code has been added. The latest merge to the branch that was linked is 8 days ago. I spent about 5 minutes browsing the repo, but with 66 branches I'm not going to peruse each of them to figure out IF any code was added."
1,"The link is just a link to the servo repository and there are no current pull requests. Maybe the pull requests are already merged, but I don't see anything in the documentation that explains what code has been added."
1,No code available in wiki or in repo. if you're working on a branch or PR or commit history please add to wiki. Its difficult to track otherwise with 100s of commits everyday.
1,There is no documentation on how the new software is tested.
1,"Since I didn't understand the background, the initial steps are confusing. What is DOM? Why do you need an interfact for ConstantSourceNode? What is ConstantSourceNode and why is important? There is a ton of background information that you assume that the reader knows. I think the idea of any documentation is to give the reader enough information to understand the rest of the document and I don't see that information."
1,Having no background in WebAudio I don't think that I have any better understanding of WebAudio after reading your background. How does Servo help your goal? What is the WebAudio standard? Why is it better than what we have now?
1,"No, the build didn't pass in Travis CI and it didn't have conflict. It seems like one gem ""danger"" isn't correct."
0,"Very clear, with the exception of how this requirement was met: ""In addition, functions code can be optimized to ensure that it follows DRY principle"""
1,They mentioned the code climate issues they did not fix because the specs told them not to and the files that they did touch while fixing the issues. They mentioned the typical issue and they fix they used to solve the problem.
1,The wiki page surely explains the project description quite clearly. However I felt as if was reading the assignment page given to us by the professor. I thought you could have reworded it or skipped that part because I can read the same thing in the assignment document.
0,The review is good and to the point. The writer has partitioned it into a few contents and has made it simple for the reader to get it. The wiki page has a decent stream and leaves no disarray to the reader. Execution has additionally been clarified in a legitimate way utilizing bits of code.
1,"It looks not very descriptive, I couldn't really understand what they have done in the project."
1,"The wiki page does not contain enough information on the project. Therefore, it does not fully indicate or reveal what functionality the work is related to. The wiki has very limited information regarding what the exact issues the team has faced, and attempted to resolve. What has team already resolved and what are the approaches of resolving issues?
The ""project task"" section in the wiki states, ""There is some code smells detected by the code climate"". This is very confusing and abbreviated statement and not everyone can understand what exactly is ""code smells"" and ""code climate"". These terms were not covered in the Wiki. Please, try to elaborate more on the work that has been done, fully address new terms, provide set of solutions the team has performed and list the issues the team has faced.
Below is the list of improvements that can be done over the Wiki page:
- Always start Wiki page with Introduction section where you can briefly explain what you're working on.
- In the Introduction section address all new terms, such as Code Climate, code smells, and even what is code you are working on? Is it Expertiza source code or something else? Briefly talk about what is Expertiza as well in the Introduction section. Do not forget to include useful links.
- In the ""Project Task"" elaborate more on the issues that the team has resolved. Provide code samples and explain why did you use that approach and it can be improved further (if it can).
- The ""Main issue files"" section is unclear. What exactly is the team trying to address there? If you want to demonstrate the main issue, do not just state the file names, provide these issues and explain what the issues.
- ""Typical Issues and Improvements"" section is what you are looking for in the entire wiki. This is good section, but not fully written yet. Try to provide more examples, and solutions with code samples as you have done. This will be very informative and descriptive.
- Testing section is completely empty. Try to elaborate more on the testing that your team has performed. What testing strategies your team used?
- Please state any difficulties or issues the team has faced while working on the project.
- Please mention any additional improvements if your team has done over the project (if any).
- Please mention remaining issues and further suggestions for improvements.
- Also have ""Conclusion"" section in your Wiki.
- May be move ""Project Team Member"" to the end of the wiki since this the least information reader needs to know about.
- May provide more information on who worked on what issues?
Above are only suggestions and do not have to be done in the exact the same order. However, as a reader you want to have as much information as possible on the project."
1,"Scope of Improvement:
Team could improve work on problem statement. It would be more understandable if the team could give examples of code smells within their observation and how team has fixed them."
1,They didn't create new features so no edge cases were considered.
0,Manually ran RSpec testing and they seem to pass.
0,I am not sure how to manually test this code but you weren't adding new code only updating old code so 5stars for you!
1,I have added their repository to Code Climate analyzer. They have worked well on the code smells mentioned by the tool. I see they have fixed all the issues except for a few files for example menu_items_controller.rb which i am sure they should be done till the resubmission date.
1,Not all the  Code Climate errors has been rectified
1,"Team did not deploy their Expertiza project or did not provide information on their deployment in the submission. Please deploy your Expertiza project if you have not done so. Hence, other reviewers and I may test it remotely.
For testing purposes I used the git repo provided in the wiki page (https://github.com/ece517-p3/expertiza), pulled it and ran it locally (which I am not required to do).
I performed short live demo on the UI and can report that all of the existing functionalities in the controller seem to work properly. Although keep in mind that I am not able to run all possible UI scenarios to test your code changes. I did as much as possible to test controller files with names beginning with A through N.
Also, I've ran the following command to test your changes against existing Rspec tests:
bundle exec rspec spec/controllers spec/models
Unfortunately, existing Rspec tests in the controller and model are failing. Please fix them (that is part of your assignment/project). 
The following are results of the tests:
Finished in 37.61 seconds (files took 11.07 seconds to load)
119 examples, 1 failure, 2 pending
Failed examples:
rspec ./spec/controllers/tree_display_controller_spec.rb:130 # TreeDisplayController POST #children_node_ng returns a list of course objects(public) as json
Randomized with seed 33855"
1,"Sorry, I was not able to test as deployment link was not provided."
1,The code follows all the required parameters. Although the build passing has not been done yet so it is difficult to verify the correctness of the code
1,"There should not be any issues mentioned here, since your team is assigned to resolve all code smells reported by Code Climate tool. In fact all existing such issues must be resolved by your changes and no issues should be introduced. Team has done great work (although, I see most of commits are done by 2 people, Shuai Wang, and HHHarden) on fixing all the code smells, refactoring and improving the code! No new issues are detected and code looks great! However, the code that has been changed needs to be well-commented. Please provide sufficient comments on some complex functionalities that you've improved.
1. I've noticed that code has been improved by the team removing some of DRY code and placing it into separate method (assessment360_controller.rb, defining new method calculate_avg_grade) and eliminating any lines in files that are too long. Great work!
2. DRY code is moved into separate methods.
3. Needs more comments (for example, import_file_controller.rb). Please provide such comments.
4. Code follows the Ruby Style Guide.
5. There are not code smells nor DRY code.
Overall, great work on changes, but it obviously missing Test Plan and test strategies on the improved code!"
0,The code seems to be well optimized and all the defined names for the functions are easy to understand
0,It was the purpose of the project to make it more DRY and that has been achieved.
0,Not applicable. Fixing code climate issue should result in better adherence to Ruby Style guide.
0,"Good Job..!!!
The code is concise and clean. All the ruby and rails guidelines are followed. 
Names are proper and indentation is good"
1,"The team has rectified the problems that were identified in round 1.
The name of the partial is been changed to the method that is been implemented.
I feel that more comments needs to be added for the refactored code."
1,"Since the team worked on fixing code climate issues, no new methods, variable or class names were created.
However, I'd like to address that the team did not follow the procedure to trigger the travis build. Thus not sure if the changes made by the team broke the system."
0,All names look appropriate to their specific functions.
1,The writeup doesn't explain all the issues. It should explain atleast the unique issues with a small description.
1,"Refactored code resolving Code Climate issues appears to be well modified and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code, and pull request mostly contains refactored code that already existed in the repository. However, while looking at the changes in the pull request, I noticed few minor issues that can be resolved and improved. Please consider fixing them:
- Remove commented out code (assessment360_controller.rb, app/controllers/grades_controller.rb, and import_file_controller.rb). If this is not a comment, but just unused code, delete it.
- Use new Ruby format for parameters that should be whitelisted for mass assignment (assignments_controller.rb). Example, use ""without_protection: true"" instead of "":without_protection => true""
- Remove any white space added
- Please provide comments on some of the fixes and describe what code does after you modified it (believe it or not that is how you find if your changes are correct, code inspection).
All existing method and variables names within the scope of modified code are reasonable and should not be changed. However, keep in mind that this is not the case for the some other variables and methods on the files that you modified. If variable or method name can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
1,Either sync your code to trigger the Travis Build or document the result after RSpec testing that way we can identify if the refactoring broke the system.
1,The team didn't do any testing.
1,There is some commented out code that is old code that was never taken out. That needs to happen.
1,I am not sure how they have tested it. Maybe locally adding their repository to Code Climate tool. Since there is no mention of test plan on the wiki page I am unable to give any comment here.
1,"I feel like the code is not yet ready to deploy as there were few failures regarding the code part, but there has been a decent amount of progress that has been made from what is before. So, I feel this can be a good starting place for a future team to pick up."
1,"The writeup does a great job presenting the problem and shows the original code. However, the writeup does not emphasize the solution with concrete evidence of the changes made and why they made it. My suggestion would be to either screenshot changes in git, or add code to show a before and after since this is a refactoring project."
1,"The code is great, but it still has some bugs to merge into expertiza project."
1,There is no Test Plan section provided.
1,"There doesn't seem to be a ""Test Plan"" but again, for this type of project, it seems they don't really need to adding new tests or running anything elaborately. It might be enough to just run Code Climate and compare to past runs."
0,"Explained why the authors did the work they did, but did not explain how they did it. Write-up is not complete."
0,"The writers have clearly mentioned about their proposed work and have also given how they would edit the HTML code to fullfill the task and also make the structure more MVC oriented. 
They have refactored the criterion.rb"
1,"There is no test plan section or link to any testing that has been performed. As the code is not merged, it is difficult to determine if it passes codeclimate tests. There is no video or screenshots of rspec testing. A suggestion would be to rspec test the new code and then upload some screenshots of the test passing."
0,The write was properly written and it does explain the project well. It contains the links I need and enough explanations about the code and solution.
1,"Since there is no ""Test Plan"" in the Wiki page, the authors obviously did not cover tests nor convert them into automated tests. Moreover, I did not see new automated or Rspec tests added in order to test all the modified code.
Moreover, I see that no changes are done on the rspec/controller directory where all the test files located. This indicates that there are no changes or fixes for Code Climate issues that broke existing Rspec tests. Did the team at least verified changes with existing running/passing Rspec tests? Was the following command executed to perform validation:
bundle exec rspec spec/controllers spec/models
Please run existing Rspec tests and report the result (upload the video of running and passing Rspec test to submission board).
If your team was not explicitly asked to write additional Rspec test cases, indicate this in the writeup. Record short live demo showing existing Rspec tests passing as indication that your team did not break any existing functionalities (although there is only ~53% test coverage).
Explain your Test Plan in the write up."
0,The code is very well written and easy to understand. It's one of the best writeup I reviewed
0,"Good Job:
Team have figured out the required changes and also have documented the required changes. The proposed solution is clearly mentioned. 
Suggestion:
Documentation does not provide any information for below methods. You can either remove them or add one-liner like ""Analysis under progress""
The complete method &The view_completed_question method"
1,"Yes, the problem statement section and About Criterion.rb section clearly explains why the authors did the work the way they did.
I could not find any section of the writeup which tells us about the design principles or patterns used by the team.
I would suggest the team to please include the design pattern used as it makes the code more understandable to the reviewer."
0,The written is impressive. The team covered all the topics in a organized matter. The screen shots make it easy to understand.
1,The writeup explains why they have implemented partials and in which scenario. It would have been better if they had described in the write-up taking a design pattern strategy to explain their implementation.
1,There is no mention of testing in the writeup. I would recommend adding how you changed the tests to reflect the things you have refactored. Ex. Added a test case to test a new method you added.
1,There is no mention of a test plan neither in the writeup nor in the pull request. No test files were changed or run.
0,Write-up is good as noted in round 1 review.  Screenshots were very helpful.
1,There is no test plan
1,They have not mentioned about the test plan.
1,The authors have carried out partial implementation but no test cases have been added for the refactored method as well as the partials.
1,"Scope of work/Suggestion:
I could not find any documentation related to test cases. If the project does not deal with with testing. You could just mention about why the testing is not needed in this case so that user gets clear understanding of the feature testing."
0,writeup is good they have explained it will as also have attached screenshots which expains as what is changed. which is good to understand.
1,"I could not find any test plan section included in the writeup but I would suggest team to utilize ""criterion_spec.rb"" (spec file to test criterion.rb model) and include some additional test cases for each methods to verify negative cases."
0,"Yes, it works. Review stage and submission stage all work well in the deployment project."
1,Test plan has not yet been included in the writeup.
1,"Everything seems to work using the deployed version provided. But however, the build falied."
1,"First of all, great job going into detail about what is wrong with the current implementation I think you need to provide more context to the user about what the criterion.rb is associated with, and what it does. You listed the methods and how the HTML should be separated into view (which I agree 100%) but my suggestion is to go a bit more in depth and explain a use case scenario about that function."
1,"The writeup is very detailed as far as the problem statement goes. But from what I can infer, all the actual work of refactoring has not been done still. The last section clearly states that."
0,I have checked the system operation from the UI. Everything seems to work fine. I have not tested any edge cases. It does work as intended. The features that are supposed to work do as they intend to.
1,"What is in the writeup looks good and describes the issues being addressed well.  However, two sections only have headers and no body, and the proposed solution only provides a general plan on how to approach these issues, rather than concrete steps that have been taken.  The two empty sections need to be fleshed out and concrete solutions should be described."
1,"Scope of Improvement:
Team could improve the documentation based on team's understanding of the problem. The problem statement was just copied from OSS project description. It would be more readable if the team adds up based on team's understanding of the project."
1,"The team did add some new tests however, the coverage was not being shown on the pull request page."
1,"The team did significant work on adding and revising test cases for the project.  However, it is not clear if their code passed all the tests and if the test coverage increased."
1,"Test cases were added.
Coverage decreased (-5.9%) to 45.111% when pulling 7928db5 on jwboykin:master into d361591 on expertiza:master."
1,"All the functionality has been mentioned related to the work. Although, the description could have been slightly more elaborate. Even so, the problem statement is understood and an idea of what the project does is stated."
1,"I wasnt able to locate the link on expertiza or the wiki. Since the spec files did not have changes, the test hasn't changed. One suggestion would be to include a test plan in the wiki and explain how to test."
1,The link to a VCL or heroku instance was missing in the submission and the documentation. Hence I could not test your functionality.
0,The authors have only proposed their solution.
0,The team has just moved the edit method from the model and major part of the assignment is yet to implemented hence could not manually test the teams work.
0,After testing manually the feature does work without any breakage.
1,"The criterion.rb still has a method called ""complete"" that is way too long and contains more HTML code. The html string addition is also not very DRY. My suggestion is to go over criterion.rb and break methods into smaller chunks. The redundant code can also be handled using other methods or even Procs. More comment is also needed. The code currently does not follow ruby guideline because HTML code is still in criterion.rb and it should be in views."
1,I would like to see more comments as it is not evident from the functions what exactly it does. There are functions left commented out. I would like you to delete them.
1,"It looks to me like the implementation is not really complete, but what's there looks more or less OK to me.  Code has been commented out; it would be better to simply remove it so the code isn't cluttered up with unnecessary comments."
1,"The code looks like it should work, but I think more comments are needed because I had some trouble following."
0,They have proposed to refactor to the required format and move them to appropriate partial.
1,"The code which is added to the partials file is extracted correctly and also called in a few places. I would suggest the authors add comments to what the function does on the code too (even if it is written on the Wikipedia page) because it will be easy to follow what is the method exactly used for. The code does follow the Ruby Style Guide that is rendering a partial is carried out in a clean way. Whatever is implemented, does not ""smell"". So overall a good job for the work done. But would recommend the team to complete the other features too."
0,"Good Job..!!!
Code is concise and clean. All the ruby and rails guidelines are followed."
1,"Only edit method seems to be refactored by moving it into a partial. I would suggest to add comments on all the methods which are been refactored since I could not find any.
Code does follow the ruby style guide as once the code is refactored Model would not concern itself with how the data is displayed.
Instead of commenting the code, I would suggest once the functionality is checked it can be removed."
0,The code required to be extracted and implemented in views has been done properly. It is clearly understood why the author chooses to do so. The code follows the norms of the Ruby Style Guide.
0,"The newly added code removes html code but it comments it out. Instead it should be removed completely as the point of refactoring is to make the code better as well as clean it up. I can also see that the html code was added to the views however, since no methods were added everything else follows proper coding standards. One suggestion would be to look deeper and see if more refactoring could be done."
1,No code to review. Cloned repo exist. Probably add more fn's and send for review.
1,No code to review. Cloned repo exist. Probably please add more fn's and send for review.
0,The code really didn't impact the nomenclature.  It simply moved logic from a model to a view.
1,No code to review. Cloned repo exist.
0,They have edited the criterion.html.erb and refactored it.
1,"No code or implementation available. However they laid out some high level steps, breaking into identifiable code blocks would be helpful."
1,"Please explain what is the issue about. I would also appreciate if you could provide some background about ""standalone media backend implementation"". The references are not hyperlinked either so I would advise to improvise on that as well.
If someone with n background could start reading your wiki should be understandable. So probably starting from what is a webAudio would be helpful"
1,"The writeup is easy to read but is lacking in terms of explanation of how to test the functionality thoroughly. Out of 4 methods, 1 method has been implemented, that is, it is added to the view as partials. The change which is carried out is mentioned correctly. Also, the writeup explains the problem-solving approach and reasons to why it is carried out. I would suggest the authors refactor the method names, for example, the name ""edit"" does not give exact information about the method."
0,"Good Job team!!!
The names are proper and indentation is good."
1,"Following are my observations:
1) The partial(_criterion.html.erb) seems to have code related only to edit method and hence the name should be something which would indicate that it is for edit method.
2) I checked the HTML code that was moved to partial and all the variable name looked reasonable to me(major part of the code is HTML code)"
0,The naming convention is done properly.
1,"There wasn't a test plan in the wiki, but I do see changes in criterion_spec.rb that involved removal of code although it was made after the deadline."
1,It would be great if you could run tests and put screenshots of your tests running successfully in the documentation.
1,No test plan.  Travis is not running.
1,"Currently, the authors have not added any tests for the implementation carried out. Therefore, I am not able to check if any of the tests fail."
1,"Scope of improvement:
I couldn't see any code addition related to testing. If the feature does not require testing, its always better to mention upfront in the feature documentation."
1,"The team did not include Test Plan section in the writeup. Although, I checked the code for automated tests but could not find any."
0,"No new test cases, but existing refactored"
1,I didn't see the new code was added. It will be better to fix Travis CI bugs.
1,"It was surprising to see that there were no new commits and no attempts made to resolve the issues detected by the bots on Github.  Many of the Code Climate issues were with the alignment and formatting of the code that could be easily resolved by making a few modifications in another commit.  The commits from the Travis CI bot show a few of the test cases for the code had failed.  At the very least, it was a little disappointing to see no attempts were made to resolve the Code Climate issues."
0,"The code is great. There are no bad names, long or complicated functions. The code follows the ruby code principle and DRY principle."
0,There are no commits since the first deadline so that implies not any changes have been made.
1,"Though the code looks fine, the build failed so ti will require some modifications to be ready to deploy on the production server."
0,The team has done good work in following OODD principles while writing the code.
0,The code that was modified for this project looks really good.  The variable and method names are very intuitive.  Everyone on the team appeared to do a good job of making the code more DRY.  It looks like changes that were made to the code resolved all of the stated problems.
0,Added code is pretty straight-forward.  I had no concerns with the code in the first round of review.
0,"Yes, it gives me several problems and solutions for this project. All the problems and solutions are described clearly."
0,There is no link provided for a writeup
0,"The changes are explained with the motivation, was easy to follow the changes."
0,Nothing was missing (that I could tell) or hard to follow.
1,"Yes, in the document, it gives me the plan for testing with rspec. It both shows the result for already existed test and the test they added. But in the PR, it seems the total coverage decrease, which I don't know why."
0,The test plans are well defined in the writeup. The reason is also explained well.
1,"The tests look really good and appear to be through.  However, it is not clear which test files were modified and where the test files were located in the project."
0,Tests seem to cover several angles.
0,Very well written. The changes are very well written and explained.
0,The documentation looks good and explains the problems addressed by the team.  The background on the Expertiza project looks very good and the team explains the purpose behind the Staged Deadline feature.
0,Screenshots were very helpful.
0,The writeup is extremely elaborate and very well written.Everything done in the project is explained in a very systematic manner and the wrriteup gives a clear idea of what is done in the project and what the problem statement is.
0,Wiki clearly explains all the problems with the current implementation of staging functionality and what does the team do to resolve them.
1,"Yes, the current stage shows correctly. I didn't see some edge cases in this part, but all the test pass which means all the cases in the test passes."
0,since the author deployed the project it was very easy to test the project and it passes every test case I tried.
0,"AFAIK, this project did not involve any changes to functionality, so I did not perform testing."
0,The code does not break after the changes have been implemented.
1,"There is an issue with the existing assignments Staging deadline. On the main page of assignment staging deadline is different whereas in the particular assignment show page staging deadlines are different.
I think there is a sync issue with the update, which the team can look into as they have made some changes related to staging."
0,The code is very clear and follows all the DRY principles. The comments are given to all the functionalities. The comments made code more readable. I found most of the code is following ruby style guide.
1,"Overall, the code looks good and appears to be well developed.  However, a few parts of the code could use a few more comments on what was changed or the purpose for a specific section of the code."
0,Added code is pretty straight-forward.
0,The functions have been shortened appropriately
1,"1. some functions are too long in Assignment.rb which the team is refactoring -
response_map_to_metareview(metareviewer)
Score
delete
review_questionnaire_id(round = nil)
2. all above method could be refactored by calling some a new method
3. every method has good number of comments
4. Follows Ruby style guide
5. Code follows DRY principle"
0,The names look pretty appropriate with the functions
1,The changes seem fine. Some method can be still improved.
0,"All the variable, method and class names are refactored in a neat and concise manner. They also cover the idea of the function in the name."
0,good naming convention
0,Tests have been added to the created methods and also previous method tests have been modified as per requirement.
0,"Yes, all the team members have contributed and kept pushing code with intelligent commit messages."
1,"Admin cannot destroy any user/customer nor any tour. Also, no destroy functionalities have been performed. When posting a tour status can be added anything one wants and no handling done for the negative wait list value. User/Admin cannot log out. Multiple admin accounts can be created. A customer can also edit himself as admin or agent. A customer cannot book any listed tour. A customer has an option for deleting and editing a tour. A customer cannot search for any tour. A customer can perform all functionalities of being an agent or admin. Pages haven't been linked properly. A page doesn't redirect to correct webpages. A customer can post new tour."
0,UI is pretty decent and straightforward for the functionalities that have been implemented so far.
0,The interface is simple to use.
1,"There's no README so I'm not quite sure how to book seats or get put on a waitlist.
There's a link for Tour Interest Lists. Since there's nothing called that in the requirements, without the README I'm left guessing it's true nature.
When I log in as a customer, the page tells me I'm logged in, but then there's a link below that says I must be logged in to edit users."
1,"The user interface is intuitive and easy to use. It was easy to find the various functionalities which have been made available by the team. The issue was with the functionalities that weren't correctly implemented. I would suggest taking care of the pages which are being redirected to when a particular option is clicked/selected. Mostly, the landing page after the login doesn't redirect to the correct page. Some of the session management functionalities haven't been correctly implemented. Search functionalities haven't been implemented yet. In some cases edit and destroy needs to be updated. Multiple admin accounts can be created. A customer can also edit himself as admin or agent."
0,Testing needs to be done thoroughly.
1,"No, the team has not tested any one controller or model completely. Every functionality is working partially, hence, writing tests would be a good idea to easily debug errors."
0,I see a single person committing changes in the repository over a period of 12 days.
0,"Yes, the team has been active and kept pushing their updates regularly. Since the code is separated into several controllers, it is easy for all the developers to work in parallel. I can see that the code is easily maintainable and the developers if they perform any updates or changes, they can easily push it."
0,"The commit messages are clear in informing the reader as to the changes done before the commit. However, the progress towards the completion of the project could have been initiated slightly earlier. Overall, the progress in the timeframe with only one contributor is remarkable."
0,There were 26 commits.
0,There are several commits done over the period but only by a single person. Maybe the team was working collectively (pair programming) or only a single person was working. Issues were tracked and closed as they were being resolved.
0,use model and controller
1,"The team must have missed certain things while testing, like some of the functionalities, were not fully implemented. For eg: edit user information is missing. Many basic functionalities should have been tested more as there are several minor faults a user faces. However logout session functionalities were very well implemented. Logout of a session is working properly, it doesn't get logged back in if we click the back button of the browser."
0,They keep pushing their changes throughout the project period.
0,There are test cases for controller and model.
0,The team has been pushing changes regularly.
1,"No, firstly the user module needs to be rectified."
0,Yes the team has been pushing changes to the repository on a regular basis.
1,"The team has done testing for some functionality. There are tests available for some of the functionality on the git repository, and those functionalities also work.
But could not find any page which is tested entirely(example - tour can be created, updated and destroyed by anyone which is partially correct, here accessibility can also be tested as what functionality should be available to a customer or an agent)."
1,"It is easy to use, but not well described. In README part, no details are provided for how to use the app. There is some issue that I find in the app.
-No Admin Account is provided in README
-When I create a new account, I can see my own password, which is not reasonable.
-I can create review even when I didn't book the tour.
-Even when I am a customer, I can create tour with link tours/new"
1,should not the readme have at least the admin login credentials?!
1,"I did not find the Read me helpful. You can improve the readme file by adding the information about the implementations details about your project in a gist so it helps the reviewer check those implemented functionalities only. You should add details regarding the admin credentials in your read me file.
Adding a section of things yet to be implemented always helps!"
1,"I didn't find admin user ID and Password in the Readme file, hence couldn't check if all the functionalities of admin were implemented. However, the User Interface is very easy to use and very well designed. Even though it looks simple, the UI provides very good guidance to the user. Navigating through the application is very easy. Moreover, the text on the tabs is very much relevant and is not at all ambiguous due to which the user never gets lost in the application."
1,"The UI is basic and straight forward to use. The readme describes some code required to run the software, but is not thorough about it's use or caveats.
From a user perspective it seems to require some training to use. For example, I would expect to be able to book a tour via a link from the tours page, instead of going to a bookings page and having to enter a tour id. While the core functionality is there, it needs work to be usable."
1,"The coding is pretty much in line with the best coding practices of Ruby and Rails.You should add comments for a third reader to better understand the logic of the functions in a jiffy.
I liked the fact that you are mentioning the role in the Welcome message. Literally the first project I saw this. Makes life easier for the tester.
There are a few points I would like to highlight here : 
When I edit the profile of a customer I get logged out (when I have only changed my name). And when I sign back in I land up back to the edit profile page.
As a customer I was able to edit and destroy the tours which is wrong. I was also able to create a new tour.
I did not understand where I could book seats. 
As an agent I was able to destroy tours created by other agents.
I was able to create users with role = admin."
0,"The team seems to have used scaffolding, which is a good coding practice."
1,"User interface is somewhat intuitive.  As a customer, it's difficult to see which bookings are mine on the Bookings page because only the User ID and Tour ID are shown.  Also, I was able to delete a Booking that wasn't mine.  Same for Reviews and Bookmarks.
Creating a tour is a bit confusing without a drop down menu for 'status' or separate fields for State and Country for location/itinerary 
There was no Admin account information in the Readme so I'm not able to test that functionality."
0,"The code was well written, it was neat, concise and follows the DRY principle. Variable names used were relevant to their purpose. Models and controllers code were well indented. Also, it is easy for a developer to understand the code and make further developments on the application. I felt all the basic practices of Ruby and Rails coding were followed. All the functionalities were modularised precisely.
."
1,"README do not have any information about how to access the app.
application's accessibility is above average, few improvements can be done - 
Every link is provided on the main page so, to access any page have to first access the home page which can be resolved if added in the header section for all pages(ex- as a nav-bar).
There are few links and functionality that can be removed for the customer(ex - can remove Add Tour, edit and delete tour functionality)"
1,"After reading the code. It is obvious that there are a lot of code didn't finish. As for me, the manifest part is unnecassary. The code for testing the seats can be put in model in booking. Model can be used to set the function of different object and it will be more clear to call function in controller and view.
 For using github, branch can be used for teammates to build the same project. It is more easier to do the project in branch and merge together. After finishing one function, you can commit it to github."
1,"The code generally follows good Rails practices. The flow between models, controllers and views is easy to understand. However, I would like to point out that the team should consider moving the logic from the controllers to the helpers. Also, it was advised to us to use Postgres SQL in the production environment which has not been done. Instead SQL Lite 3 has been used."
1,"Good practice of MVC pattern, but business logic should be stored in the model instead of the controller"
1,"The code is in line with the best coding practices of Ruby and Rails. However, addition of comments can always help in the understanding of a third person completely unaware of the code.
There a few points I would like to highlight : 
The password as well as password confirmation is visible which is a high security breach for any web page.
The customer is able to create,edit and destroy the tour. Along with fixing this I would suggest you to remove the buttons of Edit and Destroy the tour as well. I was also able to review a tour that I did not book/take.
I did not find the Admin email or password nor could so I was unable to test it's functionality.
As an agent I was able to destroy tours created by other agents. 
As an agent when I destroyed my own tour, I was still able to view the bookings made by the customers for that tour. Same case for the bookmarks. The bookmarks and booking functionality needs to be revisited and tested thoroughly. Agents should not be allowed to create a bookmark just view the bookmarks for the tours created by them. Agent should not be able to provide reviews.
Validations should be revisited as I could see dates till 31 in the drop-down for the start,end and deadline dates for the month of February.
On destroying the bookings as an agent or a customer for a different tour that I did not create or book respectively, it ends up giving an exception instead of a proper error message.
There are issues with the waitlist and seat booking logic. For example , I created a tour as an agent with 30 seats. Next I booked 20 seats as a customer. Then I booked another 10, 20 and 20 seats. So I got waitlist = false for the first two bookings and waitlist= false for the next two which is correct. But then when I destroyed my first booking , my fourth booking got confirmed instead of the third which is not inline with the First Come First Serve. So now I have 10 seats , waitlist = false, 20 seats , waitlist = true and 20 seats , waitlist = false. Next I went ahead and deleted the 10 seats booking. Both my 20 seats bookings got confirmed meaning i was able to overbook as the tour had only 30 seats."
1,"As a reader, the code logic is written clearly enough to understand except for few places(eg- manifest_controller.rb). I suggest adding comments for each customized function as to what it does. The business logic could be moved from the controller to the models. These tiny changes, and you're good to go."
0,"The helper module could be used in certain cases without increasing the controller size beyond a point, but overall DRY principles have been followed and well commented. The code is well organized and as it grows it will be easy to follow the DRY principles"
0,"The code is readable, look easily maintainable. Issues are tracked and maintained which is a good use of a facility provided and also helpful for others to understand the flow of how the issues were handled or are currently present with the application."
0,Very simple to navigate. Very cool looking tables.
0,"Yes, the UI is intuitive and easy to use."
1,"There seems to be many more controllers, models, and views than needed."
1,"The code is decently structured and follows most of the Ruby practices. The flow between Models, Views and Controllers is quite apparent and suggest a good design practice.
However, there are a few points that I would suggest:
1. The conditional logic should be moved over to the helpers to clean up the code in the views.
2. I have learnt that when deploying the application to the server, the Gemfile should not include the Ruby version so that is picks up the default Ruby version. The code here, includes ruby '2.5.3' which does not allow older Ruby versions to run the code. It should instead be moved to ~> ruby '2.3.3' or some older version to allow support for older Ruby versions while debugging."
0,"Yes, they did push their changes throughout the project."
0,Almost everything works flawlessly. I'd guess this team thoroughly tested more than one model/controller.
1,"Looks like there are a lot of commits, might want to still do PRs instead of just merging."
1,"The code on Git does follow good ruby and rails coding practice. The code is easily readable and the changes via the commits have been maintained properly on GitHub through proper push messages. This makes it easy for the team to track any changes in the future. The only drawback I felt was in the ReadMe file, which is not correctly updated according to the implementation."
1,It appears the team has not pushed since around February 21. Perhaps they are waiting on feedback from the reviews to further modify/improve code.
0,"There hasn't much been implemented, but as far as they have, there are proper practices implemented."
1,"While I was using the application, I did not find any problems with sign in and log in, also editing the profile was working fine, but the team must have missed certain things while testing, like some of the buttons, they don't redirect to their respective pages. Many basic functionalities should have been tested more as there are several minor faults a user faces. For eg. The back button on several pages of the application doesn't work properly. Logout of a session is not working, it gets logged in if we click the back button of the browser after we log out."
1,"The code that was there seems to be in order of Ruby practices. The controllers contained mostly CRUD functionality, however, there did not seem to much if any validations within the models. I did not note any logic in the models either"
1,I do not see a test folder in the git repository
1,"It appears that at least one controller has test definition defined. However, I do not see test definitions for at least one model."
0,Yes Travis ci build is successful and no conflicts with the base branch.
0,It is pretty good and follows Ruby principles.
0,Yes video shows the app the test cases working.
1,The project was to write a test file so yes. I couldn't find the coverall statistics about coverage.
0,Good number of commits were done.
0,It is pretty good and follows Ruby principles.
0,Definitely
0,The tests seem to work beautifully.
0,"The team did add test cases. Then again, that's the whole point of their topic."
0,Passed! Very impressive
1,There were a few commits during the second round.
1,"Some large chunks of code with no line breaks or comments explaining what's going on. Other than that, things look pretty good."
0,From seeing the test cases that they have written and moreover the build passes in Travis CI i can say that the project is ready to be deployed onto the production server. They have done some good work in doing this project.
0,"The writeup has nformation about the project description , the team, the problem statement and background information on Expertiza and RSpec. They have proper information on how to run the tests that they have written and also given information on the Test plan. They have given a sample test code in their writeup which helps to understand how their tests look like."
0,"By testing the project i can see that the testcases they have written mostly covers all the scenarios like checking controller permissions, when a course doesn't have participants etc. All of these tests work properly and covers around 97.94%."
0,From seeing their commits and code they have added some extra test cases for roles and due to that the coverage has increased to 97.94% which meets the requirements. The newly added tests checks the controller permissions which is essential and relevant to the project.
0,By checking their pull request I can see that they have passed all the Build in Travis CI. Moreover there was no conflict found with their branch.
0,"In the second round they have done some commits which added some tests for roles, did some db changes. Most of the work was finished in the first round and they added some more tests in the second rounds."
0,The code was well written with good coding styles and looking over the tests everything is written with good namings and tests doesn't seem to be too long. Hence they have written their test codes with good practices.
0,I think the code is ready to merge and deploy as it works as expected and also passed the Travis CI build.
0,The writeup is good and easy to understand. It also includes the changes made which is good to understand as what files are changed and what is added.
0,Have added test cases to existing file assessment360_controller_spec.rb for first and second methods. Overall coverage increased.
0,Both travis CI BUild passed.
0,There are commits made after 1st submission
0,"Being a testing project,their test project can be used and deployed onto the production server as they have included all the relevant test cases.Their tests cover many edge cases and thus is perfect to be deployed."
0,I do not think this belongs to the project which fixes the code climate issues mainly because they aren't adding any new piece of code. But in this submission they have updated the wiki page with the testing section where they have covered the rspec portion which they missed out in the first submission.
0,"The write up is written in a very clear way.They have included the objective,the explanation of what and why they have done."
0,"Tests they have written seem to cover all the scenarios.
They have test coverage of 94% which is pretty good."
0,They have added test covering the edge cases.Their test coverage has also increased as shown in their video demo.
0,"The build have passed in Travis CI.
I cannot find any conflict in their project."
0,They have added few tests after 1st round.
0,They mentioned the usual issue and their fix for it and they files they touched. Since they weren't creating new code and just updating there is no mention of design principles.
0,"The code is well written.I could not find any errors.
They have added some more tests after their first submission and code looks good."
0,For testing project. I think it is not necessary to deploy the project.
1,"Over all, the writeup has enough delivers. But for test explanation, the details are less. It will be better to give the framework of the test and give us some examples."
0,"It didn't cover all scenarios, but close. In the project document, they were asked to improve coverage to above 90. I think this is great enough."
0,"No. For test project, I don't think it need to add more test cases. They achieve coverage at 95.88, which is great enough."
0,"Yes, the code passes Travis CI and have no conflict with expertiza project."
0,"Some new code was added. New commit is about adding role test, covering final conditions and reverting db changes."
0,"There are no bad names, long or complicated functions. It follows the ruby code principle and has no DRY problems."
1,"There was no new names added, mostly removing spaces or condensing code to be more compact"
1,I do not think this question is meant for this project since this was focused on improving ruby coding style and semantics. I see they have very well implemented the best coding practices as suggested by Code Climate analyzer.
0,They have PR open and Travis CI passed. Not sure why something would be problem unless they missed a part of their requirement.
1,"The wiki is written good but say "" * Super useful file that aided in mocking variable"" could be explained why it useful. I am aware about factories and the requirement for mocking during sessions but unsure they are used in conjunction with anything else as well.
Also please link to the beta/master of your repo instead of file names. Can't figure out the commits and code's thats done by the team. ""The code we created can be found below. "" doesn't state what code test what lines/fn's explicitly"
0,No UI to test but they did write test cases for the controller. They appear to work.
0,"They do have explicit section here
http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Spring_2019_-_E1922._Write_tests_for_assessment360_controller.rb#Test_Outline.2FPlan
 
as well as Video. Thank you for the test video. Can comment on coverage though."
0,"yes they passed the Travis CI.
https://github.com/expertiza/expertiza/pull/1366#issuecomment-477359847
and states ""Hey @jasminewang0,
Your changes look good to me! """
0,"Seems a decent number of commits happened in the second round.
https://github.com/jasminewang0/expertiza/commits/beta substantiate this."
0,Rspec by definition is dry and they are more readable.
0,They have made a video which shows all tests passing.
0,The code seems to follow good practice.
1,Travis CI and Codeclimate haven't been run for the pull request.
0,They have included few cases.
0,Well explained write up.
0,"Didn't test manually, but watched their video."
1,There is a block of commented out code that should be removed.
1,"There isn't a specific ""Test Plan"" section, although they do talk about their testing."
0,When i try to manually test the work they have done i can see that every feature/test works perfectly fine as it supposed to work with coverage of about 95.88%. They have done some good work while writing test cases.
0,They have properly converted all test cases and the coverage is around 95.88%. They have properly implemented all test cases.
0,"1) None of the functions/tests are too long.
2) Code has been written properly, no need to write them in separate functions
3) Comments have been properly given
4) The code strictly follows ruby style guidelines. 
5) The code has been written efficiently and properly"
0,"All the functions, variables and the tests have been written properly with good styles and all the names have  been named properly according to their functionality. The code added follows good naming conventions."
0,They have taken care of writing about the different tests that they have to run for this project. They have written proper tests for some edge cases such as course review participants.
0,They have given enough information regarding the tests that have been run for different functions . They have also specified the files that have been tested and thus I can better understand the work they have done.
0,"The writeup has been written clearly and it is descriptive and has more background information about Expertiza, RSpec. They have given separate information regarding the Problem statement and the overall tasks. They have even given information about the work they have done which helps  me better understand the project's outcomes."
0,The team's pull request completed test run successfully with the beta branch which indicates their test ran successfully.
0,They have covered all test cases with 96.6 % coverage
0,"As the team's work was to write test cases, not to add any functionality.
The test cases added by team works perfectly"
0,"Per the pull request, it is clear that the test coverage increase above expected."
1,"I am not able to find some test cases as what happens if all functionality work file for -course_student_grade_summary
I am also not able to find any test case that covers the last to unless conditions."
0,They clearly stated the function they need to test and all test cases are covered and completed successfully
0,"The team clearly indicate the function for which they had to write the test case and the purpose which is to increase test coverage.
They have added test cases for the mentioned controller."
0,coverage increased as expected.
1,test plan is not discussed in details so.
0,code is well written.
0,all the names should be good.
1,wiki page only indicates that all the method will be covered but the detailed test plan is not included.
1,"The writeup covers the method name in assignment360 controller which they need to write tests for, but not talk about the details of how they write the test."
1,"From the wiki page, could only know this project is about writing rspec test for assignment360 controller but not discussed how this controller actually does."
0,"I tested no participants, assignment participant does not exist, no team id, and no reviews.  All these edge cases were covered and passed.  The code does cover the intended functionality and edge cases."
1,"The tests cover only two of the tests mentioned in the test plan (all_students_all_reviews, course_student_grade_summary).  The other tests still need to be written or clarified how they have been covered in the test plan."
1,"Each test is written well and no major changes need to be made.  However, some lines of code are too long.  They should be broken up into separate lines so that it fits in a text-editor or terminal better."
0,"All class names, variable names, and methods have good names that are suggestive of the functionality."
1,"The team only explained what tests they would be writing, what coverage they expect, and that they will be covering edge cases.  I would have liked to see what edge cases they were testing.  Also, what pre-conditions and invalid inputs are you testing?  The test plan could use expanding but it is off to a good start."
1,"The team explained what RSpec is and what it is used for.  They do a good job of describing BDD and TDD.  I would have liked to read more about how those principles tied into what they did.  For instance, how does their tests tie into BDD and TDD?  Also, how did they follow RSpec best practices in making their tests?  All things considered, they did a good job explaining how and why they did the work they did."
1,"The team clearly explained the background information for the project. However, one thing I would have liked to see was more information about the tests they implemented. Aside from trying to read the test names it's hard to understand what each test is trying to accomplish.  It is also unclear what the assessment360_controller is.  The team did do a good job of explaining the task expectations (i.e. 90% test coverage)."
0,"As it is testing project,the features work as intended."
0,They have successfully prepared automated test cases.
1,"Test code is fine.Could not find any errors.
I dont know it was needed but there were some more methods in this controller which are not being tested."
0,"The specs they have written follow the RSPEC guidelines.
Their commits do tell about how they have approached this problem."
0,They have tested methods course_current_grade_summary and all_students_all_reviews taking into account different cases.
0,"They have explained about Rspec that they have used to test the controller methods.
They have explained about the coverage they targeted and what they achieved."
0,They have explained very clearly what their objective is.
0,"For test project, there are no more features added. But for the code, it works great and correctly."
0,"Yes, the test covers most of cases in the controller, which can see in the coverage rate."
1,"1. All the test is short enough
2. No code need to be spearated
3. Yes, more comments may needed(but for test project, I'm not sure whether it needs more comment.)
4. The code follows the Ruby Style
5.No"
0,"For test project, the team doesn't need to give any new name. For the rspec file, all the test follows rspec principles. They used context, it correctly."
1,"I think the mean considered most of the possibilities. Actually, for test project, all you need to do is to follow the logic in the controller, which I think the team did a good job. The only thing left is 'action_allowed?' method, which will not add coverage, but need to be tested."
1,"Actually, I think the write up covers everything I need to know but less details. It seems like in the controller, it has 'action allowed?' method, which may not increase the coverage, but I think it needs to be tested also."
1,"Yes, I can understand the project. But I think in the writeup, they lost some details of the project, like how they do the test, what is the test frame like and how many models they mocked, ect."
1,This code doesn't cover edge cases as this is not their requirement. Probably the question rubric should choose question based on the 'class' of the project. The coverage shows 96% but I have no way to test the previous code so all I could do is test their build.
0,Yes They did and the video does that as well
0,This is testing and rspec which is mean to be descriptive of nature. Doesnt really need to be DRY expect the cases. They do use factory girl/factoryBot to cover the initial parameters which by itself makes huge leap on DRY
1,The name do make sense. Another suggestion to compare two commits in github to showcase code change and add that to your wikipedia. This show total change in code and the names side by side. It took me over 30 mins in just going over each commit history to look for names from the main code to that of the change.
1,The wiki is slightly lacking as pointed above. Their code do run and showcases improvement.
1,Please add what code you did in there. Probably commit comparison in screenshot would help. This would make it easy to evaluate your code in wiki.
1,"Excellent. I appreciate you for linking the blobs and codes. Its pain otherwise to browse on to the repo. I cant add all start unless you can compare the before and after in say ""course_student_grade_summary"". Please add what code you did in there. Probably commit comparison in screenshot would help."
0,"I believe the team has stuck to the OO-principles for the entirety of the project in their design and decisions to refactor. The test coverage has improved. The code with more comments is readable and understandable. Long methods have been broken down. Some methods have been pulled up into the helper methods.
I think the code is ready to be deployed onto the production server."
0,"The write-up from the very first round of submission of the team has been very good and easy to understand as stated in my earlier review, ""The team does a good in hand holding the reader in understanding the issues and the fixes made by them such as moving some lines of code from the controller to the helper. The authors also do a good job in adding images to the description which makes the reader to understand the changes right of the bat"".
In the first review, I had suggested adding some metrics such as change in coverage stats and a little more writing on test plan. The team has included all these points in this review."
1,"No new tests were added. To be fair, the team has explicitly explained that there was no new public methods added, hence there was no reason for them to add new test cases. However, the team has been able to achieve an increase in coverage from 49% to 53.3%."
0,The build passed on Travis CI with no conflicts to be resolved. The team has also done a good job on trying to reduce the number of code climate issues since the last submission. There are only 3 issues on code climate yet to be fixed.
0,"There were many commits after the first round of submission. While few commits were dedicated to commenting the code or condensing some functions, majority of them were related to fixing the code climate issues which can be tested by committing."
1,"The authors have improved the code with most of the suggestions as stated in the previous question. However, i take away the one star because as a reader i would have liked a UML diagram or any relationship diagram convincing me that moving some functionality from assignment controller to the helper did not affect any other controller. If the team could have stated that there is no other controller using this helper method, or if other controllers did, then the team should invest a little time and understanding if their actions caused ripples in other controllers."
0,I feel the code can be deployed once more test cases are written for the method. Once this is done the code is good to go and can be deployed. The team has done a good job in refactoring and adding comments.
1,"The writeup is well defined. It has all the necessary fields needed.
However instead, of adding the screenshot of code adding the whole code snippet can be considered a good practice. The image sometimes is not very clear and hence the code snippet can be a better option.
Also they have mentioned about design pattern but that could have been in a separate section that makes it easy to locate information."
1,"looking at the code and changes in commit it does seem that the team has done the necessary task but it is not easy to clone and set up a new environment into my system for every project I do a review. Instead, I would recommend to either deploy such changed project on Heroku and provide a link or link a screencast showing the test cases running. It makes easy to check such stuff by a video rather than setting up the environment."
0,"The team added one test case for their refactoring project and change one, where saving and updating the assignment.
The new test case was an assignment was saved successfully but fails to update. This is a good test case which was covered well by the team.
I felt the test covered a good range in the project."
1,"Yes, the build did pass in Travis CI and I did not find any conflict that needed attention. I saw the commits they were good but again just the comment needed some good naming rest was good."
1,"Yes, after the first round the team did keep on committing the code and shows that the keep was constantly working on the project and has made significant work for refactoring the methods. 
Although the commits are high but I would suggest for better comments for the commits since I found many another test change named commits which is a bad practice to keep track of what was updated. If i want to revert the commit this will be very difficult to keep track of where to revert and where not to."
0,I did not find any bad naming convention during the first round and the team kept the same expectation for the second round with good naming practice. The methods are refactored well and necessary short comments are also provided.
0,"Yes, the code is ready to be deployed onto the production server as they have implemented all the tasks that were assigned to them.
The refactored code with comments looks clean and understandable.
Also, Looking at the screencast it is evident all the functionality are working as expected and the changes did not break anything."
0,"I can clearly understand what and how the project does by looking at the writeup.
 The team have included all the required sections int the writeup.
They have provided proper justification that how and why did they use the delegation design pattern.
The methods are clearly explained which makes it easy for the reviewer to understand the task."
0,"The team has provided a screencast of their implementation and everything looks fine to me.
The refactored code does works as expected."
1,"Yes, the team has added one test case ""'when assignment_form is saved successfully but fails to update'"" and it seems meaningful to me.
I was unable to verify the code coverage but since the team has refactored the existing code most part of the code was already been covered by the existing test cases."
1,"Yes, the build passes in Travis CI.
Also, I could see 5 CodeClimate issues but none of them looked alarming to me."
1,"Yes, there were several commits after round 1.
I would suggest the team to have better comments on the commits as I found many commits with the same message."
0,"I could not find any issues with the code.
All the methods after refactoring seems to be of appropriate length and the team have done a good job in commenting the methods which makes it easy to follow the code.
Code looks clean and I could not find any DRY problems."
0,The code looks ready to be merged as it is just refactoring and all the necessary changes have been made.
1,"Good write-up. The reasoning behind ignoring code smells is missing and in-depth analysis behind the reasons to ignore refactoring ""action_allowed?"" method missing. Please try to explain the reasons as it will benefit the reader in understanding better."
1,No testing link provided. Should have deployed in vcl to allow reviewers to test existing functionalities. The changes look fine when looking at the code.
0,One new test with various checks added leading to an increase in code coverage. The newly added test seems to have been missing and the team did a good job in finding it even though it looks like a corner case.
1,"Build pass in Travis-CI. Small code smells, but most of them are fixed. Commits to db/schema.rb are not required for this project but this pull request has changes to schema.rb. Remove it. Also, please avoid using same names for commits. Preferably use an identifier number."
0,"Multiple commits. Almost on the same day, March 30, which is fine."
0,action_allowed? method wasn't refactored but it looks okay as it does not look to be duplicate. New comments were added in round two and code smells have been fixed. Good job.
1,"I don't think this code is ready to be deployed onto a production server because they have not yet resolved all the errors and have not showed the Travis CI build pass successfully. However, this project could be handed over to a future team to pick up because the errors they got are not difficult to solve and they got almost all of their project tasks completed."
0,There is a detailed explanation of what they are trying to do and why they are doing the changes they did. They did add code snippets wherever necessary and also explained what they did to get the codeclimate issues fixed.
0,The system seems to be working as intended. They have done a good job in getting the branch condition to be lowered. There are no discrepancies as such with the code and its functionalities.
1,"They seem to have added tests and they showed that they pass. However, I do not think the test cases they mentioned were able to cover the range of this project. they could have added more."
1,Their build doesn't seem to pass in Travis CI. They did get few errors and conflicts in code climate as well and they worked on getting them done but they don't seem to have done anything about Travis CI errors.
0,They seem to have made lot of commits after round 1 and most of them seem to be regarding test cases change.
0,The code seems to be written cleanly and efficiently without any unnecessary or long functions and it seems to be in agreement with the DRY principle.
1,"Looks like you accidentally changed the db/schema.rb file. You should undo these changes. Also, be sure to push to the right branch. After these fast fixes, changes should be good to merge."
1,"Proofread to dress up. Some places have grammatical errors such as no subject/verb agreement and lack of apostrophes (see Description of the current project section). Also, I do not think you are using the delegation pattern. The delegation pattern involves a wrapper class and a composition relationship (think about example with wrapping Java generic stack to create a ""pure"" stack). Using helper methods is not an example of the delegation pattern, although you may be delegating the task to a different method.
Content and overall message well organized and informative."
1,Please deploy project and create test users for UI tests.
1,The team did add test cases but did not considerably increase statement coverage.
1,"Build did pass Travis CI. (See message in writeup to ignore code climate issues.) No conflicts, but it is being merged into the wrong branch (you need to be pushing to the beta branch, not master)."
1,Clearly updated code to reflect first reviews and updated names for improvement. Overall this looks good! May want to remove some old comments.
0,Looks great. Code can be deployed onto the production server
0,"Authors have tried explaining the context, description and the changes made in clear and easy way. The explanation contains images for the better understanding. Couple of changes asked in Round 1 review has also been implemented."
1,"There is no video attached in the wiki (or submission) that shows the flow of the project. But as the test cases pass after the changes, I believe that the UI should work.
 
One suggestion that might have been implemented is to post a video that shows the flow of the program (maybe through the links that specifically goes through modified files). This might have shown the reviewer that the UI is working properly. Optional though"
0,Team has added few test cases and have claimed that the code coverage was increased to 53.32% after their changes
0,Yes. The PR passes all the tests from the Travis CI.
1,"Team has undertaken the code changes as well as updating wiki in the second phase. My only concern is with multiple commits by a single teammate on a same file. There are exactly 19  commits on the same file (spec/controllers/assignments_controller_spec.rb) and all of them correspond to the same test. 
If the team is trying to check whether their small edits are functioning properly, I suggest them to test these locally, rather than committing for every edit. It also makes life of the developer who is merging easy and is easily trackable. This is not an issue though, just a improvement in the subsequent projects."
0,In general code is written in a well structured way. Best coding practices has been implemented. Most of the longer and not so understandable method names have been changed to much shorter names that clearly depicts what the method is doing. Authors have taken the review into consideration and there have been improvements made.
1,"The developers explain that none of the features of code flow is affected by the refactoring because of which the code-base has not been deployed. However, I suggest adding a video showing the usage of the UI."
1,The developers have not added any tests or made modifications to any of the test related folders.
1,"The team has done a good job in identifying long methods and refactoring them by breaking them up into multiple methods or pulling-up some code into the helper such as action allowed method in particular. The code has comments added which makes it an easier read. However, i would have suggested if the team would have explained if the helper method into which the code was pushed into was being used by other controllers. If so, how do we know if it doesn't impact other controllers"
0,"The team has uniformly well named methods and variables. The names are fairly intuitive to reflect what the methods do, the team has even added ""?"" for the required method names."
1,"The way the modifications are made, seemed like there would be no modifications needed for the existing test plan as stated by the team in the write-up. However, just to attest this philosophy to a reader, I suggest addition of a video link showing that the existing tests pass along with a difference in coverage statistics."
0,The team does a good in hand holding the reader in understanding the issues and the fixes made by them such as moving some lines of code from the controller to the helper. The authors also do a good job in adding images to the description which makes the reader to understand the changes right of the bat.
0,The authors do a good job of stating what the objective of the project is what the team is hoping to achieve.
1,"When I tried to manually test the features which were implemented while refactoring, all of them seem to be working correctly. I suggest the team could write some edge cases to ensure that they do not break the existing functionality of the code."
1,"Since no new tests have been written and test cases from another file are used as a reference, I am not able to check if the cases mentioned are converted into automated tests. I recommend the team to write more tests for the refactored methods."
0,"No long methods were used while coding. The code has been refactored but not extracted into separate methods. Also, the best part of the team is that they have done a good job in commenting the methods of the refactored code. This has become a very easy job for me (reviewer) to follow the coding structure."
0,"The team has refactored several lines of code and mentioned in the ""Files Modified in the current project"" section. According to me all the changes seem to be reasonable. Proper naming convention is used while refactoring the method names. Good job by the team."
1,"The team did mention in the ""Testing Details"" section that they have used ""assignments_controller_spec.rb"" to make sure that no test cases were failing because of their changes. But no new test cases have been written."
0,"The writeup provides all the essential information on how and why they have carried out their implementation. The team has also mentioned a design pattern ""Delegation Pattern"" and provided appropriate justification for it."
0,"The team has adequately mentioned what functionality the work is in the ""Code Improvements"" section of the writeup. I am able to clearly understand what the project is just by looking at the writeup."
0,"I tried to manually test the refactored method using ""assignments_controller_spec.rb"" and all of them passed. I could not find any new test cases but I think the cases mentioned in spec file is suffiient to ensure that code does not break any existing functionality."
1,"I could not find any Test cases in the TEST PLAN but the team had mentioned in the ""Testing Details"" section that they have used ""assignments_controller_spec.rb"" to make sure that no test cases were failing due to their changes.
if possible, I would suggest the team to add more test cases and include it into the TEST PLAN section."
0,"All the methods after refactoring seems to be of appropriate length and the team have done a good job in commenting the methods which makes it easy to follow the code
The code does follow the ruby style guide as methods does what they are supposed to do."
0,"The team has refactored following methods:
 - handle_assignment_directory_path_nonexist_case_and_answer_tagging 
   -- missing_submission_directory
 - assignment_form_key_nonexist_case_handler 
   -- assignment_submission_handler
 - Handle_current_user_timezonepref_nil 
   -- timezone_handler
 - update_nil_dd_deadline_name 
   -- update_due_date_deadline_name
 - update_nil_dd_description_url 
   -- update_due_date_description_url
 - assignment_form_assignment_staggered_deadline? 
   -- assignment_staggered_deadline?
 - check_due_date_nameurl_not_empty 
   -- check_due_date_nameurl
 - update_feedback_assignment_form_attributes 
   -- update_feedback_attributes
I found them to be quite reasonable as they clearly explains what they do"
1,"I could not find any Test cases in the TEST PLAN but the team had mentioned in the ""Testing Details"" section that they have used ""assignments_controller_spec.rb"" to make sure that no test cases were failing due to their changes."
0,"Yes, the writeup does explains clearly that why the authors did the work they did. Also, they have provided proper justification that how and why did they use the delegation design pattern."
0,"The ""Code Improvements"" section clearly and adequately indicates what functionality the work is related to. 
I can clearly understand what and how the project does by looking at the writeup."
1,"No, because the tests are not passing."
1,There were no conflicts but the build is still not passing.
0,"I would say this project is the most ready, compared to any others, for being merged with the production server. Hopefully their code is eventually used as it seems to be well written and working."
1,It says that controllers and helpers passed which the models and features Travis CI checks failed.
0,"The code does not seem quite ready to be merged with the existing project.  While the code seems to pass the tests created by the team, additional verification by the Expertiza team would be needed to make sure the code performs the intended tasks.  A few additional revisions are needed to make sure the committed code passes the Travis CI and Code Climate tests."
1,"The documentation for the project is excellent.  First, the team provided a good background of the problem and the tasks that need to be completed to resolve the identified issues. Additionally, the team included links to the different files that were referenced in the document.  In the middle of the document, the team covers some of the helper files used in the project and their intended purpose.  Then, the team presents its test cases with no failures.  The paper was concluded with the names of the team members and a few sections for references.  The references provide links to their project on GitHub and two screencast sessions that show the results of their work.
It would be nice to have seen more of a division between each of the problem and solution sets.  Additionally, it would be helpful to provide a little more explanation about their solution that ties in the information related to the helper files."
1,"The team worked very hard on the project.  Alas, there were errors detected by the Travis CI bot that was never addressed by the team."
0,The code appears to be stable and clean and it's ready to be merged.
1,The build passed Travis CI. There were a few tests that failed Travis. Not sure they were fixed
1,functionality is working but the travis CI build is not passed so it is not ready till the build passes.
1,build failed.
1,"I'm not sure about this. I think the project can work well but in Travis CI, it seems like there still have some bugs."
0,The writeup is good and it explains enough details for this project. The video link below is great to make the project more clear.
1,"No, in the PR, I see Travis CI failed in two cases. It seems like they changed too many files."
1,"I can endrose this unless I have background on this
https://github.com/expertiza/expertiza/pull/1364
 
Please revise this and update the code base."
1,"https://github.com/expertiza/expertiza/pull/1364#issuecomment-477354426 appears that the code is not passing Travis.
 
Fails at rspec ./spec/models/role_spec.rb:13 # Role role instance to be valid scenario for student
 
Please feel free to send me a feedback revision notice if this is incorrect."
0,All passes.
1,"CodeClimate says there are some issues with the commits. But as far as I say the code, it seemed fine. There is no link where I can run the system and check so. But their build fails."
0,"It was a long PR. But, as much as I saw, the code was very clean and there were comments included if it deemed necessary which was really helpful."
0,Yes. In almost all they cases they have written a reason for doing what they did!
0,The writeup is perfect! They have included code snippets of the changes as well! Good work.
0,"The author has clearly given adequate amount of testcases for the problem sattement and all the possible edge testcases have been clearly all the testcases for the controllers have been mentioned and given and the logic behind each testcase has also been explained, The author's work implements all the functionality described in the assignment with no errors. All the edge cases work as expected."
0,"The code has all 5 of the following characteristics:
(i) DRY, the code written is concise and clearly according to the logic
(ii) follows Ruby style guide 
(iii) is commented
(iv) does not contain long methods
(v) variables and functions are properly named."
0,"(i)The new code written is well edited and articulate for the users to both understand as well make use of it in future, it is well commented, except some places where it could have been clearly explained writeup is well written and easy to read.
 
(ii) The style of code and the problem-solving approach is well versed and easy to understand for the readers.
 
(iii) The writeup also explores other options that the authors could have taken and reasons that they didn't end up picking an alternative solution."
0,"bout Yes, a detailed and well-explained test plan had been given in the writeup by the writers, they have used different test cases to make sure that their code does not break anything that was previously working. 
A link to the previous code and the modified and the test cases used has been given."
0,"yes, they have clearly mentioned what new implementation they have made to the project, they have explained the logic and the existing work to use the DRY support and clearly explained the rationale behind each of the code snippet articulating why the felt the need of doing that and why it was correct to use that."
0,Features work as intended and edge cases were checked for by the authors ahead of time. Easy to go through and check for stuff.
0,All of the tests that the authors added are automated and pass as their intended purposed was to check for old code still working after being altered and new code doing what they were designed to do.
0,"As previously stated, code was well written and in different sections of the wiki, the authors stated the code guidelines they followed throughout the process."
0,All of the names are clearly written with purpose and were thought about as to not confuse any programmers who will alter the code in the future or people reading through the wiki.
0,The test plan details what was done to ensure nothing was broken during development and what was done after development to increase code coverage. Edge cases were covered in each of the sections they created ensuring that there are no flaws in their commit to the github.
0,"The authors went above and beyond in the work they did along with the explanation for each and every step. There is nothing that is hard to follow unless you are trying to understand the code itself, but only because it may be new to the reader. Even in the test plan, the authors explain the reasons for testing in certain ways and their thought process throughout."
0,The problem statement is straight to the point and very clear about what the project was trying to achieve. The current implementation is well written and organized making it easy to parse through to find relevant information pertaining to the commits on github. The way that the team wrote out Problems and followed them up with their Solutions is fantastic and doesn't leave any confusion as to what they decided on doing. The links to different parts of code also helped to understand what the authors were discussing at different points of the wiki.
0,The developed code works very well and no issues were observed.
0,It appears that the test cases were well written and the tests were completed with zero failures.
1,"The code is well-formed and appears DRY.  However, a few of the modified sections could use some extra comments for explanation."
0,The names for the methods and variables are intuitive and follow Ruby conventions.
1,The test plan shows the code that was used for some of the tests as well as the results.  Perhaps it would be better to swap the helper and the results sections so the results are shown at the end of the test section.
1,"The authors did explain the problems and what actions were taken to correct the previous code.  However, the problem section could be improved by adding descriptions indicating the snippets that refer to the old code and the modified code could be highlighted."
0,The documentation is very well organized and contains significant details about the project.  Each section was well formed with just the right amount of information about key parts of the project.
1,"The app behaves as expected mostly, I just wish there were better instructions about steps to follow to test the features that have been affected by these changes."
0,Yes there are automated Rspec tests added for all the proposed steps mentioned the test plan.
1,The DRY principle has been the main focus and followed well throughout the code. One thing that could be improve upon is adding more comments in the code in some of the refactoring process like the questionnaire controller.
0,All the method and variable names are pretty descriptive and the names match their functions.
0,Yes the test plan looks exhaustive covering all the different edge cases like testing if it matches string versions of user id for authentication.
0,"Yes. The reasoning behind making the project DRYer was explained clearly. One example is the problem with the user privileges. It was very easy to understand how the lack of privileges for users who are above ""Student"" is a problem and their solution was very straightforward."
0,Excellent writeup. The were clear descriptions of the problems they were addressing and the proposed solution to each of those problems.
0,The code is working as expected.
0,"Yes, they have created tests for all Test Plan."
0,"All functions are good and less than 25 lines of code
The team has already done a good job with extracting the code that is repetitive and can be put in a new method
The code is easy to follow, so I don't think there is any need for more comments.
The code follows the DRY principle, naming conventions"
0,"All Variable, method and class name looks fine"
1,"They have tested - test missing input, test bad input, test various acceptable forms of input, test scenarios that lead to ""true"" and to ""false"" return values.
They could have added more test cases about the preconditions."
1,"whatever this team has implemented are explained clearly. they mainly focused on making the code follow the DRY principle, except that the Wiki doesn't mention any use of any other design principle or pattern."
0,The details are clearly explained as what problem was(as the logic for action_allowed? was not-DRY and had few issues) and how they have solved it (created helper methods to remove repeated work and make the program more easy to read and understand).
0,"Yes, the code works well in all the test, which can see in the test part in the write-up."
1,"Yes, it has 'automated testing with RSPEC'. It's great to see all the test passed. They even write some new tests for the code. If the team can offer the coverage, it will be better."
0,"1. All the functions are short and simple. 
2. no code needs to be separated so far.
3. The comment is well enough to explain the code.
4. Yes, it follows.
5. No, code follows DRY principles."
0,"The structure of the writeup is great and easy to understand. The reason that I give four stars is that in advice, five stars need to explore other options, which I think is not that necessary."
0,"I think the test plan is complete enough. They used current exist rspec to test the code. Besides, the team writes some new test for the new method(all changed methods)."
0,"Yes, this project shows DRY principles clearly. In authorization utilize, there are many repeat code and useless logic, it seems like the team solved these problems perfectly."
0,"Yes, the statement is clear enough. It includes the tasks for this project and the problem of the current code and the solutions. It is easy for me to know their project."
1,I ran twice and it appears to be working okay.  The edge cases are not documented or added as comment into the code on what exactly each test they wrote do. I can infer from the code but it takes a toil and a lot of time to read and understand what they are through. Would appreciate if you could point what test exactly in each codebase and what each code test as wiki say so.
0,All tests pass as in the video.
1,"Though the names make sense but another possible name for ""current_user_has_super_admin_privileges"" would be ""is_user_super_admin"" as its understood that 'user' does say 'current_user' and 'has' is past, use 'is'."
1,No pull request in Wikipedia and this code is not meant for increasing test coverage I think so
0,Yes. They simply used an adapter for the existing code
1,"Not surprise. Well laid documentation. However the question is the helper method may take out come functionality if the hierarchy of authorization is not required. 
say   ['Super-Administrator',
  'Instructor',
  'Teaching Assistant'].include? current_role_name, cant be made possible with present helper method. Since 'Administrator' would be in the hierarchy below 'Super-Administrator'. What you could do is to disallow if certain user type is not required in the hierarchy"
0,"They did commit changes in round 2; however, their project was almost perfect when I did my initial peer review and I did not find any issues then. I think the main changes they made since round 1 were in regards to updating their README; it is now extremely thorough and their project is well-documented."
0,"Looks like the team has followed best practices. The best part if the whitelisting of role string with either of admin, customer and agent in user.rb model. Code is structured well"
1,The models and controllers are not very well tested. had problem updating bookings and bookmarks . many required validations like date check and destroy objects ar not working well. Some required functionalities are not working well.
1,"There has been some lag in the testing. While creating a new tour, it would accept the alphabetic values in ""price"" field. Does not throw an error."
1,"The team has tested the code manually for errors and missing validations, but no code was written to test it."
0,Tests are thorough.
1,I don't see any proper tests written in the code other than the preexisting ones.
1,"start date can be set ahead of the end date for tour.
I can make reviews for unrelated tours. Cant delete admin object, which is correct.
After making a booking, the number of seats are not decresing, after deleting a booking,  my booking are not immediately being updated.
A successful booking of 0 seats are being shown for my bookings for tours not having any seats
After deleting a user with bookings , his bookings are still being displaye for the admin, seats are  not being reallocated."
1,"Almost all of them were covered. However, I could see that ""Agent"" cant edit his/her profile."
1,"The README does not cover how the system handles edge cases; however, I tested with most of the aforementioned edge cases and the system behaved correctly.
Unfortunately, I was able to create a tour with an end date earlier than the start date, so that is why I took off a star."
1,"I can't figure out how to delete a tour!
I also can't delete a user
End date can be earlier than start date :("
1,"The edge cases seem to be a problem. Anyone is able to delete bookings, A customer is able to delete another person's bookings/reviews. A customer is able to sign up as a new user before logging out. If customer is deleted, his bookings don't go away from db. Admin is not able to delete users. There is a dummy destroy button."
1,"search using itinerary , and date filter missing
logout is having issue , crahing site
I can make reviews for unrelated tours.
After making a booking, the number of seats are not decresing, after deleting a booking,  my booking are not immediately being updated.
not able to bookmark tours.
not able to edit admin profile
Destroying objects having trouble as it is still in the listings
social media signup not implemented
email not being sent for related bookings status.
No image upload"
1,"Performs almost all the functionalities!
Wasn't satisfied with ""waitlist"" functionality. It puts all of the seats requested in waitlist even though there are seats available."
1,"- The system shows login options even after logging in as a user.
- The edit profile feature has not been implemented properly."
0,"They drastically improved their app since my initial peer review. I am now able to log in as admin, sign up, actually do stuff, etc., which I wasn't able to do last week."
1,"This project previously had little-to-nothing so it works much better than before!

Logging out creates an error page for all users
Photo uploading is still plain-text and not uploading
Tours usually have more than one location, so I would have more than Location1 as a text field
""NOT TODAY ISIS"" is probably not an appropriate error message for incorrect email/password combinations
Why can't a guest bookmark without entering # guests?
I was able to book more seats than available by editing a booking I made and increasing the number of seats"
1,"The system preforms the basic functions, it is not possible to log out from any user. (Ack that it is mentioned in the readme). I am able to book tours etc. but lot of edge cases don't seem to be handled."
1,They mad sure to include blongs_to relationships in any of the models. But I couldnt find the counterpart (has_many ) in the corresponding models. The db construction was well done from my point of view.
1,"I could see ""belongs_to"" usage in the models. However, I could not see any usage of ""has_many"", ""has_and_belongs_to""."
0,The team took care that they didn't miss the relations between the entities. Almost all the relations were defined perfectly.
1,"Users have no mapping to tours, even though it seems like they should"
0,All the relationships are handled in the models and functionality seems to work fine.
1,"Yes, the team pushed commits throughout the project period. They also pushed commits after the 1st submission, though most of the commits were on the last 3 days of the deadline."
1,"The team has been submitting their changes throughout the project. However, one of the team members has not been consistent with the commits."
0,The team was regular in committing the changes to the project
0,They committed a lot of changes and drastically improved their entire app and UI since my initial peer review. It was totally broken but now it works for the most part!
0,The team consistently committed!
1,"There is only one contributor to the project and I addressed this even during the last review, would have been nice to see the other teammates also contribute to the code source."
0,"The code is minimal and is readable one function fulfills one purpose. They included much of the code in the model as it should be. The functions wernt that complicated. I couldnt fid any issue with the coding , naming methodology or logic involved."
0,"Yes, the code has been written in a clean and readable manner with proper comments. Good job !"
1,"Each method handles exactly one task, which is a good design strategy.I found that each method handles exactly one task, which is a good design strategy.The code is well organized. There are not much comments in the code, which i felt was a drawback. Names of some of the variables are also out of meaning making it hard to understand the working of code. Some of the code could've been implemented in models."
0,The code is easy to understand and concise. Variables follow good naming conventions.
1,"The code doesn't use references while creating the tables but adds a separate column by a string (eg in reviews table). 1) As these references aren't present, it was not possible to carry out the functionality. All the testing and assignment was done in the models whereas I thought it would have been better to carry it all out in the controllers. 2) The naming seems fine in the project. 3) The problem I had was with the bulk of coding done in the models, other than that the code looks good. The way the functionalities are well split between functions in the models is actually good."
0,"Yes, last edit was a day ago"
1,They were able to keep pushing their changes throughout. Just the code contribution just seemed a little bit skewed.
0,"Yes, there has been incremental change in the code from 15th Feb onwards."
1,There are very few commits done and few were very trivial.
1,"It is possible to see a listing of the contributions to the project along with comments on those contributions.  However, it is not clear to tell by reading the comments on what changes were made to the project."
1,"There are not many commits throughout the period, just concentrated in one timeframe"
0,hey have 11 commits and out of which three are dummy
0,17 commits
1,"There is only one contributor to the project and there are only minimal functionalities implemented. Probably, the team will work on all the other features before the final submission."
1,"The Tour model seems pretty well done, only a few date validations and destroy, + itinerary is missing"
0,"Yes, team has thoroughly testes ""tours"" model and controller.
The seat allocation works quite precisely.
Tours modification is also working fine."
1,most of the modules were in-complete. The testing has not been done properly for the remaining modules.
1,"It appears that the tours view works well.  This views performs most of the required functions.  However, it does not appear to be fully functional as noted in the previous comments.  It is not possible to search or filter through tours.  There does not appear to be a direct link to view the bookings and the waitlist, but the list is available through the bookings / bookmark page.  The contact information of the agent for the tour is not shown."
1,There are a lot of pieces of functionality missing so I don't think it was tested.
0,Thoroughly tested at least one controller
1,The project is incomplete. I can't book the tour. I cant upload a photo. There is no login for anyone.
1,Could add more tests for a model class.
1,The testing functionality has not been implemented yet
1,"Seems pretty rough, not sure how to register and which account I'm using"
1,Navigation involves going from page to page there is no major navigation bar.
1,"Yes the application has been deployed on heroku. 
YEs user interface is intuitive enough. An additional thing which could have been added is the borders to table on the home page. That would make it easy for us to distinguish between various fields."
1,"The interface is quite simple with a table on the home page that display's the display tours, instead of a login page it directly took me to a page where the tours are displayed. This might confuse the user."
1,"The user interface for the tours page works.  It is possible to view a tour, add a review, edit a tour, and delete a tour.  However, the site does not have users, it just lists the tours.  The controls, for the most part, are intuitive and works as described.  However, the booking / bookmark page is a little confusing.  Plus, the user is not able to specify the number of seats they desire for the tour.  The waitlist feature is not fully implemented."
1,"The readme file does not list an admin login or anything like that. In fact, I didn't see a login button anywhere on the app. This program was clearly not finished."
1,"On Heroku. I'm not sure how to log out, but the interface is intuitive otherwise - I'm not sure what my role is"
1,Your readme is practically the assignment description. Add some value to it.
1,Probably should have decoupled booking from bookmark. Need to add log in and user functionality.
1,I can see the tours page on startup and it directly gives me an option to create a new tour and the reviews and bookings are the only other functionality that I can access but even that is not readily available on the front page. The concept of admin/agent/customers have not been implemented and that creates a lot of confusion when navigating the UI. It would have been better if the team had at least finished the admin functionality so that all the different tables could have been accessed from the same place.
1,Rather incomplete yet
0,They stuck to basic coding pratices in ruby on rails
0,The code follows good Ruby coding practices very much. Naming of all the variables/classes and other conventions are followed.
0,The git code was readable and easy to understand. Comments are meaningful.
1,"The code on GitHub looks OK.  However, there seems to be a great amount of commented code that is still being developed.  Also, it was observed a puts statement was used for testing purposes when logging or other alternatives should be used.  Best debugging practices are referenced in this video from week 4 here: https://www.youtube.com/watch?v=permo-RzbhQ"
1,There are just a lot of pieces of functionality missing.
0,Good design
1,Improve your RoR codebase please. Looks a lot of instance method instead of using ORM layer provider by Rails object
1,Probably should have separated booking and bookmark functionality.
1,"The code on git follows good Ruby on Rails convention. Though I see that only the tours, reviews and booking tables to be completed. The team might want to provide details as to how to check for the admin/agent/customer functionalities. Otherwise, as of now the naming of all attributes of the tables etc. seem to be okay."
1,"1.  When the admin deletes the tour all bookings are wiped out.
2. The waitlisted customers do not get booked.
3. It seems the admin account cannot be deleted
4. The tour end date can be earlier than the start date.
5.  The user is removed from the interested users list.
6.  There are several edge cases that do not behave as expected.  For instance, none of the date fields are validated and a user can book any tour, regardless of whether it is in the past. These are not described in the README file."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Booking is deleted (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Not able to test this, because I'm not able to see that there are customers waitlisted properly.  On a tour with 10 seats, booked 1 seat as first user.  Booked 10 seats as second user.  Both appeared to be accepted.  No indication that anything is waitlisted.  Tour now has ""Total seats: -1"".
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Bookmarks removed (correct behavior)
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases.  README does not cover how the system handles edge cases."
1,"(1) What will happen if the admin tries to delete tour that has bookings? 
Deletes the respective bookings (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? 
 The seats does not get updated (incorrect behavior)
(3) Can Admin account be deleted? 
 No admin cannot be deleted (correct behavior)
(4) Can a tour have end date earlier than the start date. 
 Yes, it is possible (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? 
 Yes (correct behavior)
(6) You can come up with more edge-cases.
This took a lot of time so I didn't try more."
1,"I seem to be unable view my original review, which is making this task more difficult.  An admin appears to be unable to delete a photo on a tour created by someone else or remove a bookmark.  The booking do not check to see if the current date is past the booking date and the user is prompted to provide the tour ID, which is not ideal.  User could book the same tour twice or at least create a waitlist the second time around even with a booking pending.  The user was not prompted to partially book a tour and waitlist the rest if not all the requested seats were available.  Tours cannot be cancelled."
1,"There are some changes which have been implemented that weren't previously built in the application like, admin didn't have privileges of the customer and an agent in terms of booking a tour, and viewing seats and review of a particular tour. Initially, the agent wasn't able to perform basic tasks like creating a tour, view bookings and reviews of a customer. Those basic functionalities have been added and implemented correctly. 
Other functionalities like session management haven't been carried out correctly. For example, when a customer account or an agent account is created through an agent, the page isn't redirected nor a message appears on the screen to confirm the activity. Also in some cases, validations haven't been implemented correctly. For example, seat availability can be -1 and also negative seats can be booked. When a booking is unsuccessful due to incorrect tour ID entered, the page gets redirected to ""Page not found"", some kind of a server error, rather than a message. Such things could have been handled correctly."
1,"Problems seen in the first round that are still present (possibly in a different form):
Admin ""Can (s)he edit his/her profile name?"" - Not able to test this because the form would not submit due to password length (but did not want to change password as that would inconvenience all other reviewers).
Admin ""Can the admin list new tours?"" - Yes, but can enter only 1 location, and tour status is free entry rather than required Future / Completed / Cancelled.
Admin ""Can the admin delete reviews from the system?"" - not able to test this, because I was not able to create a review.  Logged in as customer, click ""Submit a Review"", the page you are taken to does not offer any way to write anything or actually submit a review.  ""Edit/Delete a Review"" shows a list of tours, not reviews.
Admin ""Can the admin view the list of users booked in a tour and their detailed information? - Sort of.  ""View Booked Tours"" appears to show a list of all tours, not just those that have been booked.  If you click on them, and there is a booking for that one, shows you who booked it (but not how many seats each person booked).
Admin ""Can the admin view the list of reviews and detailed information?"" - Not able to test this, because I was not able to create a review.  Logged in as customer, click ""Submit a Review"", the page you are taken to does not offer any way to write anything or actually submit a review.  ""Edit/Delete a Review"" shows a list of tours, not reviews.
STOPPED MY TESTING HERE.  It was clear at this point that there are many issues remaining in the code (although a lot has been done since the first review).  I didn't feel that my time was going to be well spent clarifying exactly which of the requirements are not met.  I'm sure the TAs will see which are met and which are not.
Other issues noted this time around:
When you select ""Book"" next to a particular tour, you still have to specify on the next page which tour you want to book.  And you must enter a tour ID rather than selecting from among the available tours.  This is fairly onerous."
1,"Previously the admin was not given functionalities of performing several tasks, like booking a tour and review of a tour. Also some of the agent tasks like viewing bookings of tour etc. Such tasks have been implemented now.
Some issues which I found is that the number of seats while listing tour can be negative. 
Also while booking a tour customer has to write tour id, which is not a feasible idea. One possible solution that was possible is to give per tour link for booking that way tour id could have been passed to the next page and the customer could just write the number of seats needed for booking. 
Waitlist functionality not well implemented, options were not provided to the customer as to whether he wants available seats to be booked and remaining to be in waitlist such cases were not handled."
1,Wasn't able to find the test for model.
1,I did not see a test for the model or controller aside from the autogenerated ones.
1,"It seems that most of the relationships were handled properly. But when I deleted an agent, his/her tour was not deleted. So they are missing something in that case."
0,The team consistently kept adding to the codebase throughout the time of the project.
1,"The commits made on the GitHub repository are not very clear in the first place. This sometimes becomes very difficult for a developer to track the code and identify the changes made during a particular commit. Also, most of the commits have been contributed by a single person rather than the team. When considering commit changes in round 2, several commits and changes have been made. The app is made much better through the changes made after round 1. In case of some functionalities, the team has shown very good efforts as compared to the round 1 application. 
I would suggest the team to make use of all the team member and its contributors in the upcoming projects."
0,There were several commits in round 2.
1,"The commits are important as it helps in tracking the changes made during the phase of development. 
Looking at the contributors there seems only one contributor. 
The app is now in a better position as to what it was during round 1.
The team has made a lot of efforts in this week between two round for implementing many functionalities. 
But it seemed the team as a whole has not made efforts just one member."
1,"1) Looks good. Did not find any methods with multiple tasks.
2) Naming convention is confusing. Booked is a confusing verb.
3) All methods are small and concise."
0,Good code practices seems to be followed!
1,"The code is quite readable, that is the models, controllers and views have been correctly placed with proper code. It is easy to find the code of a particular function looking at the name of a file. When a spelling convention is considered, the team has done a good job. The models must be singular, which are in its place. In one particular case, ""bookeds_controller"" is set as a file name, which is a misspelling instead of ""booked_customer"". The same spelling error has been repeated in views too. In case of function calls, the team has taken careful measures to call the functions implemented correctly. But in case of a bookmark, that particular functionality has not been correctly implemented. In coding a particular method, no long and nested methods are called, that shows that the team has tried to work with simple method calling correctly."
0,"The code is quite readable. 
Models and controllers follow good coding structure. For spelling convention, they have done a good job. 
The team has done a good job in function calls. There are less nested blocks which make the complexity less to read and understand.
They have implemented one single user model which has one column for user_type which manages agent and customer."
0,All the changes were pushed at once
1,I was able to see regular commits for the last 4 days in a line but not more than that.
1,The team started working from 17th February and seems to be pushing changes consistently till then. But not much has been implemented.
1,"Yes, the team definitely kept pushing their changes throughout the project period. Also, separate branches were created which were later merged to combine the work done. Each contributor has worked and committed the contribution of their work on GitHub. The changes made were not legibly mentioned in order to keep a progress track. Except this, it was a thumbs up."
0,The only functionality that was implemented is Signup and SignIn.
1,"Not one model nor controller has been properly functioning , though the agent was able to open the page to create a tour, there was an issue with the tour being created and so the tour is not getting registered."
1,"The only controller test (SessiosControllerTest) that looks like it may not have been generated by rails does not fully test the controller.  The rest of controller tests do not look like they would pass, because no support has been added to implement mock sessions.  The model tests were just the ones generated by rails and do not test anything."
1,I do not see testing code in their github repo. The test folder just contains scaffold code.
1,I did not see any tests.
1,"No, the team has not thoroughly tested any one model and controller. 
The partial functionalities working under a model and controller but everything doesn't work properly for at least one model and controller. Several functionalities are not yet completed."
1,"The UI is simple to understand which is good. No documentation is really required. However, the UI is also not complete so I could not test the functionality for an Admin or a Customer."
1,"UI is good. The login page idea is good. The current functionalities are all working except posting a tour. It shows error on posting a tour. Pages are well linked and found on apt pages. Sign out is working well. 
Overall good job so far"
0,It is very easy to use.
1,"Except for session and users controllers and users model there were no other controllers/models present in the code, as a result no function is working apart from  loging in of the users."
1,Indentations missed in users controller and some useless comments in sessions controller.
0,"The functionality that has been implemented seems to follow the standard Ruby and Rails conventions: the logic in the models, views and controllers appears to be in the right places.  For example, a controller isn't doing something that its corresponding model should be doing instead."
1,"The code on GitHub follows good ruby and rails coding practices. The code is readable and elegant. The work focuses more on the task and less on the technology. On the other hand, when maintainability of the code is considered, the GitHub could be maintained better. For example, when a particular commit is made to update the code, the comments could be more clear, in order to identify and keep a track of the changes in the future."
0,The team did not carry out any testing for either of the models or the controllers. All the code that was found was auto-generated. I couldn't find any code that was written by the team on models as well as controllers. The team could have implemented basic test cases like email formatting and password validation.
0,The team has not tested a model or a controller thoroughly.
0,They have test on most controllers and the user model
1,"I found that there was ample evidence of testing being performed in the controllers. In particular, I found that booking_waitlists_controller_test.rb was tested thoroughly and included enough test cases. However, I found that the models have not been tested at all and they should also have been tested."
1,"After deleting a tour we are not redirected to a homepage or a user message page as expected. Instead, we are still on the same page without any confirmation message. This could cause confusion to the user.
- The agent is unable to delete the tours created by his own.
 
- The delete button for the tours in the agent module is performing the same operation as view button."
1,"The customer and agent can not delete their account. 
The waitlist and book seat could be negative if changed by admin."
0,Mostly all test cases are working.
1,"1) If an admin tries to delete a tour that has bookings, then all the customer bookings get deleted.
2) In this case, the waitlisted customers are not allocated to the seats that become available which is not the correct functionality.
3) The admin account cannot be deleted. Well done!
4) The tour cannot have an end date earlier than the start date. Kudos!
5) Yes, in case the admin deletes any customer, they will be removed from the corresponding interested customer's list."
1,"The dates of tours are required to be consistent.
If I destroy a tour with a waitlist, it looks like the waitlist and bookings go away.
There's no hook to delete admin account."
1,"When an admin tries to delete the tour that has bookings, the entire booking data is deleted. In case a user is deleted who was enrolled for a tour and customers are waitlisted for the same tour, the booking is not deleted nor are the waitlisted seats confirmed. No, the admin account cannot be deleted. No, the tour cannot have an end date earlier than the start date. Bookmark functionality is not implemented. Even though an option for photo upload is specified, it does not seem to be working. Also, partial cancellation is not implemented."
1,"I was able to log into the admin profile and edit the user settings, effectively changing the password. This ends up in no one being able to log into admin later on."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Works correctly(bookings deleted)
 (2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
The booking is not deleted and nor waitlist moved (In correct behavior)
(3) Can Admin account be deleted?
No(works correctly)
(4) Can a tour have end date earlier than the start date?
No(works correctly)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
No bookmark functionality (in correct behavior)
(6) You can come up with more edge-cases.
If a customer has booked seats with confirmed status and waitlist, he cannot delete #n of seats and move some waitlist to confirmed, but the system results in the entire cancelation of booking. 
I could not upload any kind of photo while listing tour (tired png and jpeg).
Rest looks good!!"
0,I did not note any edges cases that did not work.
0,It pretty much works apart from admin functionalities.. If something does not the team has already mentioned in the read me file.
1,"There are few features that were missing. The search feature is not implemented. The user can neither bookmark a tour nor give review for a tour. Agents cannot view bookmarks for the tours posted by him/her. Other than the above mentioned points, the team has done a good job."
1,"I feel the team has updated a lot, they have implemented many essential functionalities. Also, the 'read-me' file was drafted in detail which assisted me to use the application and also know how it was developed. There are many edge cases the team has to work on like the login session and tour booking, waiting list also has to be implemented as a fully developed functionality."
1,"The system works most of the functions as it is supposed to. But the bookmark function is wired and inconvenient. Also, they don't have the search and filter function."
1,"Some links were broken like there was a link for edit booking. It was broken.
 
In waitlist i got this output
Booking: #<Booking:0x000055734b13e200>
Tour: #<Tour:0x000055734b126998>
Quantity: 4"
1,"Here are my comments from last time. I added comments in CAPS. Sorry for the yelling.
====================================================
When I edit the admin profile it immediately logs me out.
NOT FIXED.
I CAN CHANGE THE ADMIN PASSWORD.
AS AN ADMIN, I DON'T SEE HOW TO LIST ALL USERS
===================================================
When I try to log out it gives me an error.
FIXED.
====================================================
I was able to put 123.451 as a price.
NOT FIXED.
I COULDN'T FIGURE OUT HOW TO CANCEL SEATS IN A TOUR.
===================================================
Besides being able to create a tour, there's not a lot of functionality in the app. I can't create an itinerary, I don't see how to bookmark, etc. If you decide to resubmit, I'd be happy to review it again.
STILL DON'T SEE HOW TO BOOKMARK A TOUR.
=================================================="
1,"The system wasn't implemented as such in the first round of the project so it was very difficult to test the system. However, there have been some issues in the system after the second round too like if an account is created by an admin, it automatically logs out of the admin account and gets logged in by the account which is created. The waitlist option doesn't seem to be working properly because if extra seats are added, they go the waitlist but on partial cancellation too the entire booking gets canceled and the waitlisted never gets confirmed. Also, according to the application and the readme file, the search option is not implemented, review and bookmark functionality is also not implemented."
1,"For the first round, there weren't many functionalities ready to be tested but this is the new list of failing ones
If an account is created by admin either of customer or agent then you directly move to the account without being logged out of admin and start as a customer/agent.
Let's say if there are 10 seats available in a tour and a customer books 12 seats with adding 2 to the waitlist. If the customer deletes booking, the waitlisted doesn't get confirmed and entire booking gets canceled. Also in doing so the number of seats gets reduced from 10 to 8 maybe because you might have not handled waitlist option well. 
A customer cannot cancel n number of seats from his booking, which was mentioned in README file. Also no search option.
The readme states Admin can view reviews but Customer cannot post one, so how will an admin see the reviews?
Also, no bookmark functionality implemented."
1,Most of the functionality appears to be in working order excluding being able to enter negative tour cost.
0,Did not see any obvious problem with this.
0,All the relationships were very well designed and I found no discrepancies while executing insert and delete operations while using the applications. The outputs while implementing these operations were on par with what was expected.
0,They have proper 1-to-n and n-to-n relationships. I didn't find the clear problem on these relationships
1,"The mapping relationship seems to be good enough for the functionalities to be implemented correctly. For example, the agent-tour relationship was found to be 1 to n appropriately. However, while implementing the waitlist functionality, booking model could be used instead of creating a separate one.  This would have been an effective technique since a whole separate model need not be created in that case."
1,Everything is well mapped and looks good. Except I'm not sure whether another bookings_waitlist.rb model was needed to add. You could have simply used the same bookings model to implement the waitlist functionality.
0,Yes they have been committing the changes.
0,"Yes, the team kept pushing their changes regularly."
1,"Yes, the team keep on submitting their changes throughout the project.
They finished the booking system and waitlist system. But they still didn't finish the bookmark."
1,"Regular commits have been made to the GitHub repository including several merges from different branches to the main branch. It seems that main functionalities like booking and waitlisting have been committed to the code after round 1, i.e, they still committed changes in the round 2. Application functionality has been clearly improved after round 1 evaluation. Looking at the contributions on the repository, it seems that one contributor has worked a lot as compared to the other person on the team with just 1 single commit all throughout the project. This could have been improved as a team."
0,The team was making updates/changes to their application right up until March 1
1,"The coding is pretty much in line with the best coding practices of Ruby and Rails.You should add comments for a third reader to better understand the logic of the functions in a jiffy.
I loved the fact that you guys tested your application and updated the same in the read me file which makes the life of the reviewer way easier.
I liked the fact that you are mentioning the role in the Welcome message. Literally the first project I saw this. Makes life easier for the tester.
There are a few points I would like to highlight here which is from the last review : 
When I edit the profile of a customer I get logged out (when I have only changed my name). And when I sign back in I land up back to the profile page.
Could not log in as an admin hence could not test anything related to it."
1,The code is understandable and straightforward. Most of the code seems to be present in the controllers and the views. Some of the logic could have been implemented in the models.
1,"The code is well constructed and easy to understand, however, I felt it would've been much readable if there were more comments to represent what each block of code does. The team has done a good job of evenly splitting the code into appropriate methods instead of stacking all the operations into an individual method. The naming convention they followed is also pretty straight hence making the code easy to follow."
0,The code is clean and readable. There is no method is too long and no bad namings.
0,"The variable names makes sense.
The code looks good."
1,"I found the code to be generally following good Rails practices. It is easy to read and clean.
1) I found that each method handles exactly one task, which is a good design strategy.
2) There are some examples of bad naming in the project. Instead of hard coding the userr ID in the controllers, instead refer to them by their user types. This would help make the app more flexible.
3) I found long nesting statements inside the controllers which is a wrong design strategy. This should be moved to the helpers instead.
However I suggest the following:
1) I believe that the controller should be free from the logic statements and those should be written inside the helpers. I could only find users_helper implementing this logic.
2) The app lacks comments which does not help me while understanding what a particular piece of code does.
3"
1,There's a lot of business logic in bookings_controller.
1,"I found the code easy to read and was not confused by the code structure.
 The email format regex /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i is defined well in the model. 
The Bookings controller has long methods with many nested blocks in create method.
Could have used helper to reduce the conditions in controller.
Rest looks good"
0,The overall code is in good Ruby format. The controllers are performing mainly CRUD operations while the models are handling the business logic.
1,Tour Model has been tested but not Controller
0,"The UI is simple and very easy to use. Since the application was easy to use, I never had the need to open the read me file figure out to use the application. After using the application, I felt it was well developed for any kind of user to understand and use it."
0,Pretty well written code. Most of the work is completed by one person (ngtitov) . Has followed simple but clear approach while writing code.
1,Most of the activity happened on Friday and one contributor did most of the work.
1,The code does seem to follow good practices. There are no validations in place in the model for the tour.
1,"The tours page appears to be well tested in that a user can create and edit a tour.  However, many of the features associated with the tour do not work properly.  As previously mentioned, bookings and bookmarks do not work.  It is not possible to add a photo to the tour.  Not all of the fields in the tour are validated. It is possible to list a tour that does not have a location, start time, or end time.  There is no wait list for the tour nor is it possible to view the waitlist.  It is not possible to search for a particular tour.  The reviews and waitlist functions are not present."
1,"The design of the site looks very good.  The user is able to view tours, book tours, add tours, and view users.  It is easy to navigate through most sites, but the booking site was problematic.  It was not possible to book a tour as the errors, tour must exist and user must exist, were displayed upon attempting to book.  If the book fails, the user is stuck and they are not able to navigate back to the tours page or any other page. It does not seem possible to delete a tour.
The logout feature does not work.  When the user attempts to logout, the page just crashes.  There is also not an option for the user to delete their account."
0,The information posted on Git looks good.  The file structure appears to be well organized and the code looks very clean.  The project has several commits with comments and two branches.
1,"Many of the attributes of forms hhave not been validated properly. For example, when creating a tour I was able to add negative value of seat to available seats"
0,The user interface is very well made.
1,"After seeing the code on Git, i was able to understand that they only had code for the login of the admin, agent and customer. No other functionality is been coded and hence i was not able to do anything apart from just logging in and logging out. They still have a lot to work on."
1,"Yes, they have test for bookings, sessions, tours and users controller. They have test for can't use the same name and email. For the bookings controller, they have test for change bookings and whether the customer can book the tour."
1,"There are no test cases for models both in the test and spec directory.
The controller tests in the spec directory seems to be auto generated."
1,"They have not tested any controller or models. The tests present in them are test which are created while scaffolding.
The models are also not tested."
1,Basic test cases found. Not all cases for validations tested.
1,The models are not tested at all. The controller tests are auto-generated without any improvement.
1,"-couldn't test since I couldn't login admin account after deleting.
-same
-I think yes When I click delete admin, it gives me wrong page and logout. Then I try to login, it fails.
-Yes. When I set  end day at March 4th and start day at March 5th, it works.
-all the information is deleted
In README file, there is only some description of functions. However, some of them didn't work."
1,"The README does not address how the edge cases are handles but they were taken care of. Nothing crashes when a booked tour is deleted or a user is deleted. When a user is deleted their bookings are not and therefore seats are taken up on tours by no  one.
 
I could not log in as admin so I can not test that functionality."
1,"Most of the edge cases wee not handled.
1) Admin can delete tours that have bookings and those bookings are also deleted.
2) The waitlist functionality doesnt work as it is supposed to. As i said earlier it showed negative values.
3)Admin account cant be deleted which is a good thing.
4)A tour can have end date earlier than start date. That edge case was not handled.
5) When a customer is deleted his bookings and bookmarks are also deleted."
1,"The README file should have been more explanatory.
As an agent I am able to create a tour with deadline later than the start and end date.
If I login with a wrong email ID I am logged in as admin.(Very strange)
Because of not able login as customer or agent,I was not able to check the edge cases."
1,"1) Gets deleted successfully.
2) Successful.
3) No option to delete. Looks good.
4) Failed. Successful in creating a tour.
5) Success.
Readme doesn't talk about edge cases."
0,The system works fine with the edge-cases I came up with.
1,"(1) What will happen if the admin tries to delete tour that has bookings?
-After, creating a tour that had bookings and then deleting them as admin the complete tour was deleted. The booking of the customer who had booked that booking was also, removed.
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
-After, deleting the user, I could not log in back as that user. Secondly, the waitlist for the next customer for that particular tour was updated.
(3) Can Admin account be deleted?  - NO
(4) Can a tour have end date earlier than the start date.?
-Yes, this check was not given so it seems that the app accepts those tours that has ending dates before the starting dates.
 (5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? 
-Yes, after deleting the customer account all the interested candidates are also removed.
 
I would rate the application 3Stars out of 5 as most of the functionalities are fulfilled however some few edge test case are not taken care of like (4) edge test case."
1,"-The Admin Part. I can see the list of tours and customers. I can create tours and customers. 
-The Agent Part. I can create and edit tour. I can see the bookmarks from customer.
-The Customer Part. I can see the list and details of tour, but I can't book the tour. I think they might have the wrong link with booking. The link makes me go to booking list page.
-Others.

Couldn't sign in with Google account. When I click sign up wi google, it gives me 404 page. It might because the devise gem.
Couldn't search tour properly. Even when I search the tour that exists, the page went wrong."
1,The first page you see is the sign up page and it as a back button for some reason which leads to an error page. The admin log in information doesn't work. When booking as a customer and you book more than the number of available seats it automatically takes the extra in the waitlist instead of asking the customer what they would like to do. The frowning faces after make a tour as a agent is fun. The show/edit/destroy functionality is there for tours. Review functionality is there.
1,"They have made a lot of progress and some of the waitlist functionality are'nt working. At a certain point of time the waitlist goes negative and booking functionality has not been done properly.  Other than that other functionalities like bookmark,reviews are done which was not done in first round."
1,"As an agent I am able to delete and edit other agent's tours.
While creating a tour,available seats show -3 no matter whatever I do or set which is weird.
While testing I came at a point where I am not able to login as customer or agent.I really can't test the functionality at this point."
1,"Most of the functions work well. One thing I'd like to point out is that the system should not let agent to decide whether a tour is completed/ in future/ cancelled. Instead of that, the system should decide that based on the date of a tour."
1,They have fixed a lot of issues since round 1. But I'm still having trouble booking a tour as a customer. The no. of seats available remains unchanged even after booking
1,"Most relationships are properly handled with appropriate associations in the models.  However, in the waitlist.rb model there's a belongs_to relationship for :user and :tour, but I don't see the corresponding association in either the tour.rb or user.rb model."
0,The relationships are clear and the logic looks good.
0,Yes. All relationships are defined in the models.
1,The tour can have many customers.This relationship is not implemented correctly.
0,The relationships have been handled properly. That is if an admin deletes a tour then the bookings done by the customer for that tour is deleted. Even when i try to delete the agent all the tours by him and the bookings are being deleted
0,The model reflects the 1-n relationships in their application.
0,Yes. The team did a great job in this part. All members in this team are keeping on working all the time and fixing the bugs after the first round of review.
0,They worked and got most of their functionality done after the first submission. Two students did most of the work out of the three.
0,The team has regularly submitted changes to their project throughout the round 2. They have also committed changes with proper summary details which describes the functionality that was done.Overall all team mates have contributed properly.
0,There are a lot of commits done in round 2.
0,There are effective commits during round 2.
0,"Yes, there are many commits during round 2."
0,The team has committed and fixed a lot of bugs since round 1.
1,"The business logics are applied on the controller, while it would have been meaningful if implemented in the model.
For instance, in the bookings controller, the update and create methods are too long and the entire business logic is applied within those methods."
0,The methods are named correctly and functionality is split between the model and controller. There are a few nested blocks but are necessary to get the functionality. It is readable and clean.
1,"After reviewing the code written by this team, I can see that they have written it in a clean and in a readable way. They have provided comments then and there in order for the reader to understand. They have perfectly mapped function calls and have written separate controllers and models for bookings, bookmarks,reviews etc. One thing that they could have done better is avoiding the usage of Flag as variable names in the controller. Some methods that i found in Bookings controller were long and just found some bad naming such as flag. Other than that they have followed good practices."
0,The code looks neat and functions are named properly.
0,The code written is clean and understandable.
1,"I saw only two contributors in the app, is that right?
It seems that you commit it  at 19th and didn't do anything after 22nd Maybe you guys are busy, but please make the app complete before final review."
1,"No, the repo was created on Sunday and the most activity happened on Thursday and Friday. One contributor seemed to push more than the other."
0,Yes they have done around 34 commits
1,No tests for models were found at the time of tasting
1,No tests found
1,There are no tests written for this app
1,"In README, there is no admin account and password, so I can't test it. Remember to add admin account in README in final review!
I don't know why all the links you provided guides me to user layout. I mean I can only see the user and can't find other functions in the app. Please check those links."
1,"Very bare minimum UI and it was not intuitive. 
Was unable to find the admin credentials to test the features of the account.
README file was not updated."
1,"None of the pages are connected to each other, so all the pages url were listed on the README individually. One of the links was broken. There was no admin listed on the README so I don't if the functionality is available or not."
1,Either there is no admin account or the credentials are not provided in the readme file.
1,"Creating an account and logging in is intuitive, but once logged in, I'm not able to figure out how to view or book tours.  There isn't any description in the README file either."
1,"The only page visible after logging in is the list of users. I am not able to navigate to any other page properly. Even if I type the routes as mentioned in the README, most of the pages don't work. The app doesn't seem to differentiate customers or agents. There's just one type of user login and that user can edit the names of other users. I was not able to test the any of the functionalities"
1,"No validations were present in the model.
All business logics were done on the controller rather than the model."
0,The code strictly follows Good Ruby and Rails coding practices
1,"The variable names used makes one to understand the code but the there are a lot of problems relating to Rails on Ruby code flow.
After logging out from user I was directed to a page which just option to login,no option for the Home page.And even after logging out it still shows that you are Signed it.There was dead lock here because no matter what I do I am still logged in as User.Even after opening the link again shows me signed in.
Even after logging as a customer I can see all the user details and this even shows the options to Edit,delete and destroy which is obviously not what is needed.
There is no place to login as an admin."
0,They are following MVC. The code is maintainable and readable.
1,They have written tests but should have tested thoroughly per the admin point of view.
1,Wasn't able to find the model test. Controller was tested though.
1,"No. None of the controllers are being thoroughly tested, except default tests created by scaffold in the test directory. There are some tests there, but it does not test controller thoroughly, only partially. 
Neither any of the models were thoroughly tested.
There are no tests perform edge-case scenario and none of them have potential to fail.
README contains no information about tests performed on at least one model and one controller."
1,The team has used scaffold to create basic tests but have not added new tests of their own either in the model or in the controller.
1,It doesn't look like any testing was implemented.
1,I do not see any tests implemented by the team.
1,Admin is unable to delete a tour so edge case testing cannot be done.
1,"(1) I'm unable to book a tour as a customer, or delete a tour as a the agent who created it or as the Admin. (2) I'm unable to delete an account as a user or as the Admin. (3) The delete account link doesn't work so it doesn't look like it. (4) Yes, a tour can have a start date that is before the end date. (6) The Admin doesn't have the ability to delete customers. (7) The README does not describe use cases."
1,"(1) What will happen if the admin tries to delete tour that has bookings? Not able to delete the tour and hence could not verify the functionality (Incorrect behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? Not able to delete the tour and hence could not verify the functionality(Incorrect behaviour)
(3) Can Admin account be deleted? There is an option to delete the admin profile but I got an error message stating ""The page you are looking for does not exist""
(4) Can a tour have end date earlier than the start date. yes (incorrect behaviour). No validations while creating a tour
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? Not able to delete the customer hence could not verify this functionality(Incorrect Behaviour)."
0,I wish I had a better review to give.
1,"(1) Not able to delete a tour at all
(2) Cannot delete a user
(3) No
(4) Tour can have end date earlier than the start date.
(5) Admin cannot view users at all
(6) Able to create an empty tour (without filling any fields). No field was validated during tour creation. 
Admin is not able to bookmark a tour. Admin is not able to view any users of the system."
0,"I cannot test as an admin, there are no details in the README.md"
1,"The admin panel doesn't work for me so I'm not able to check these functions. The admin info is also not accessible, hence Im not able to delete the account to check. All the admin functions are inaccessible right now."
1,"Again the readme file does not help much. Readme should clear specify as to which functionality has been implemented and which aren't.
Admin cannot edit profile, cannot create agents or customers, cannot view the list of customers who have booked / bookmarked.
Admin unable to delete tours instead shows details of the tour.
Validations regarding start date being lower than end date fails.
I stopped at this point. I am sure the TA's can figure what is succeeding and what not."
0,"Yes, users are now able to edit their profiles and Admin is able to login"
1,"Admin credentials are added into README file and Admin functionalities can be tested this time as opposed in the first review.
However, there are still a lot of failing functionalities that cannot be properly performed. It would be nice if you looked over and fix them. At this point I have recorded still failing test cases as follows:
1. As Admin I want to edit my profile name. Unable to do it. After clicking on ""Profile"", I get the error: ""We're sorry, but something went wrong.""
2. As Admin I want to create customer and agent accounts. Unable to do. After clicking on ""AdminPanel"", I get the error: ""We're sorry, but something went wrong.""
3. As Admin I want to list new tours. Unable to do so. After clicking on ""New Tour"" in Tours page, I get the error: ""This page isn't working""
4. As Admin I want to delete tours from the system. Unable to do so. After clicking on ""Destroy"" link for a tour in the Tours page, it redirects me to this tour page as a view. If I try to edit, it gives me ""Insufficient permissions to edit tour"".
5.  As Admin I want to delete users (customers or agents) from the system. Unable even list all customers. Not such link or option is provided.
6. As Admin I want to delete reviews from the system. Unable even to view reviews of the tour. ""Review"" of the tour redirects me to ""welcome"" page.
7. As Admin I want to view the details (except password) of other users. Unable to do it. No such option is provided or could not be easily found. README file does not specify it.
8. As Admin I want to view the list of users booked in a tour and their detailed information. Unable to do it. ""View Booked Users"" redirects me to ""welcome"" page.
9. As Admin I want to view the list of reviews and detailed information. Unable to do it. No such option is provided or could not be easily found. README file does not specify it.
10. As a Agent, I want to upload picture of the tour that I am creating. Photo is the text field and not link uploader. I cannot upload picture using text field.
11. It allows to create a Tour with end date be earlier than start date.
12. When creating new Tour, status must be determined based on dates unless it is canceled. You should not have Agent who constantly updates the Status of the Tour.
13. When creating new Tour it asks for contact information. Contact expects integer. But it does not specify what that integer means. Is it agent id? is it number of agents that listed this tour?
14. When creating new Tour, available seats must be determined based on how many total seats are given for this tour and how many seats are booked by customers. You should not have Agent update and manually enter available seats.
15. Tours' total seats and available seats must be integers, not decimal point numbers.
16. As Agent I want to remove a tour from listing (previously created by me). But after clicking ""Destroy"" link, it redirects to me to ""Edit Tour"" page. Agent cannot removed a tour from listing.
17. As Agent I want to view ALL the customers booked for any tours listed by me. This functionality is not implemented. As Agent I can only view customers who booked in particular (one) tour. As Agent I want to view ALL customer per any of the tours.
18. As Agent I want to view all reviews from customers. Review functionality is not implemented or cannot be easily found in the App. Unable to do it. README file does not address any issues with Review functionality.
19. As Agent I want to view all the customers interested in any tours listed by me. Bookmark functionality is not implemented. Unable to do it.
20. As Agent I want to view all the customers interested in any tours listed by me. Bookmarked users have some users who actually did not book any of the Agent's tours. This functionality has a bug.
21. Validations are not in place for each attribute. Tour can be created without Name, Description, Price, Contact, Seats, Available Seats, and etc. This should not be a case.
22. Tour must consist of at least one country and state. It contains no country/state itinerary.
23. Search functionality is not completed. After clicking on ""Search Tours"" link, I get the following error: ""We're sorry, but something went wrong.""
24. Moving Wait List sears to booked seats functionality is not working properly. As Customer I cannot even destroy my booking. Update booking to 0 seats gives me an error: ""The page you were looking for does not exist""
25. As Customer I want to cancel the entire reservation or partial number of reserved seats. Unable to cancel the entire reservation. It redirects me to ""Edit Reservation"" tour. Once number of seats is edited and I click on Update, it gives me error: ""The page you were looking for does not exist"".
26. None of the extra-credit functionalities are implemented, or it is not easy to test/find them. I was not able to find a link to login with either LinkedIn/Google/Facebook account.
The app still has lot more bugs that I also do include in this list. But the above findings are the main ones to resolve."
1,"In round 1, I could see options to create, delete and edit a tour for customers which ideally should have been an agents functionality but the team has resolved this issue in round 2.
Also, I was not able to book a tour in round 1 but this issue is also resolved in round 2.
Admin Functionalities are still failing. Apart from listing all the tours, I am not able to verify any of the others functionalities of admin like creating/booking a tour, listing all the users etc.
When I logged in via admin and clicked on profile/admin panel I got an error saying that page that you are looking for does not exist. Also, I could see an option to delete an admin profile.
There are no validations while creating a tour. I kept everything blank and still was able to create a tour with empty details.
Got an error page when I tried to edit a booking.
Not able to delete tours via agents or via admin"
1,"The search my tour is not working and I cannot access the admin. The customer list is not being displayed by names. Not able to upload photos. There is an option for waitlist but upon entering a number that is supposed to waitlist me, there is an error. Corresponding change does not appear on agents. Can't login as an admin as there's no info on how to login as he admin."
1,"The basic functions like booking a tour works, but again updating of a booking doesn't work and price is also negative for a particular tour. Search tours tab also leads to an error. 
The team might have implemented these functions (I can tell from the code) but the working is not testable since it renders an error for me. Please look into the same."
1,"Since all the code is kind of scattered among 5 branches, I'm having hard time to find the main branch. For purpose of this question, I am using all 5 branches to find answers. May be in future would be good idea to specify what branch is the main branch. Per my observations, I see the following:
Tour belongs to agent (many-to-1) and has many bookmarks and bookings (1-to-many). However, tour is missing relationships with customers (and also admin). Tour must have many customers (1-to-many), however, this is not handled. But instead I see that customer handles many bookings, bookmarks and reviews. This is how relationship with Tours is done.
User does not have any relationships with other tables. Models/user.rb only validates parameters. 
Agent has many tours (1-to-many). Correct.
Customer has many bookmarks, bookings, and reviews. Correct.
Booking belongs to customer and tour and has one review (1-to-1). That is how tour-booking-customer relationship is built. However, why does it have only 1 review? This design is already a little too complex and overextended. If booking has only one review, why don't make a review as column in the booking table instead of creating separate table? If this is not the case, then relationship is stated incorrectly.
Bookmark belongs to customer and tour. Correct.
Review belongs to customer, tour, booking. Correct, but booking has 1-to-1 relationship with Review. Why don't make review as column in booking?
Overall, I conclude that DB design could be improved although it would probably work for this app. First of all, the fundamental flaw is that you separated users into admin, agents, and customers. It would be a lot easier to have one table for all users and make relationships with other tables based on this one."
1,"The booking model is specified as has_one review. I did not understand the need for this. Nor was it specified in the requirements.
A lot of validations could have been done in tour.rb and in user.rb
Rest all relationships have been correctly established."
0,Did not see any obvious issues with this.
1,"There's a belongs_to :tour association in location.rb, but the has_many :locations association is missing from tour.rb.  All other relationships seem to be handled properly."
1,"The team indeed handled most of the mappings in their respective models. 
The mapping for reviews is very well handled as they have used has_one relationship between bookings and reviews(every booking can have only one review)
 The only problem I found is that the admin model and user model did not have any mappings defined. I did not understand the use of these models. Although, user models did have few validations defined."
1,"The relationships seem to be handled while going through the code in some places. But the model should have been worked on more. For example, the tour has only belongs_to agent and has_many bookings, there are a lot more relations that can be checked in the mode for tour.
  has_many :bookings, dependent: :destroy
  has_many :reviews, dependent: :destroy
  has_many :tour_locations, dependent: :destroy
  has_many_attached :images,  dependent: :destroy
  validates :name, presence: true
  validates :description, presence: true
  validates :price, presence: true, numericality: { greater_than: 0 }
These are some examples, which they can address in the models.
But Im not able to check these functionalities as lot of pages render an error. For example, only the tours details is accessible from the admin page and all other links throw an error. The admin panel also doesn't work and I'm not able to check the functionalities. Maybe a bd problem after the other reviews. The team should look into this and fix the same."
0,Yes they created branches and kept committing changes
1,All the commits were in branches and the changes were not pushed to the master.
0,"Yes, team (all members of the team) kept pushing their work throughout the entire period of time, including the round 2 time period (fixing bugs).
The repo contains 82 commits on the dev branch and has 5 different branches. There are at least 40 different commits starting from Feb 24 through march 3, which happened during the round 2 period and clearly team has attempted to fix some bugs in the App. The team did very well in terms of maintaining the code, fixing bugs and pushing their code on regular basis. Very good idea to have separate branches for different features allowing each member to work independently of other chages. Very first commit took place on Feb 11 and from then the team started their development process."
1,"The team started pretty early developing their code. They stopped a little in between for a few days and picked back up.
One very commendable thing is that they have taken all the feedback to heart and made considerable changes after the first round of reviews. Good work!
I would have preferred if they had gotten a lot of functionality working in round one itself and made a few UI changes or bug fixes in round two!"
1,"Commits seem to be sparse, however, there are recent commits indicating that changes were made in round 2."
0,"yes, All the changes and add ons to the code seemed to be pushed to the git regularly with clear commit messages explaining these changes.
I can see 82 commits with 5 branches.
There were several commits in round 2."
1,"The team did commit a few changes in round 2 but before that, it was sparse."
1,"There are 3 contributors and regular commits have been made, I would urge the team to push the final project onto the master so that the main app can be a bit more easily accessible."
1,"The code follows the best practices of Ruby and Rails. However adding comments can always help a third person to better understand the code and it's functionalities when he/she is completely unaware of the nitty-gritties.
Some essential points I would like to highlight - 
Mentioning the role of the user always helps.
As an admin, the adminpanel button throws exception and so does the profile page.
I was not able to create agents,customers. Search tours,Delete account buttons throw exception
As an agent on creating a tour I should not be asked to fill in the available seats. This should be an internal logic to calculate."
0,All the good coding practices were followed
1,"The code is clean, readable and follows good RoR coding practices to a certain extent.  Unfortunately, there are no substantial comments for any of the code and very a little documentation in the README (only admin credentials).
Controllers files are overwhelmingly bulked with ""if/elsif/else"" statements and contain some of the nested ""if"" statements. For example, the users_controller.rb file is too extensive and complex file that has way too many ""if/elsif/else"" statements. Method ""create"" that supposed to handle only one task, which is to create new user, instead does at least four tasks: 1) Check if the account already exists. 2) Check if passwords matches. 3) Checks if user is Customer. 4) Check if user is Agent. There no function calls to handle these tasks since it can be checked within a single line. I see that check the type of the user is necessary for the system, but it could have been done simpler way in the create. For example:
if user_params[:type] == ""Agent""
  create_agent()
end
Moreover, controllers/reviews_controller.rb has bulk of debug print statements (lines 27-34):
print ""\n#########################\n""
For debugging purposes, you must use logs as more reliable way instead of simple print statements.
Models files are almost empty; however, that's where all of the logic of the app should be stored. Please code all your logic in the models instead of controllers and views.
There are some bad naming in the project. The /controllers/bookmarks_controller.rb show the table named ""Array"" (line 8). What does this table mean? Array of what? In the views/tours/search.html.erb there are some variables with names ""avlseats_check"". What does this variable mean besides that it has something to do with available seats? Naming of variables should be done in better way."
1,"A lot of debugging code is left in the reviews controller. You could have cleaned that up! It just makes for easier reading.
In the Tours controller, you have definitions for a review, booking, bookmark etc. This defeats the purpose of having separate controllers for each! This looks more like a design issue than a coding issue.
Otherwise, the method definitions look clean!"
1,"Bookings, Bookmarks, and Reviews are handled in separate methods and/or controllers.  However, most of the logic takes place in the controllers rather than the models."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
The team has defined four separate models for Agent, Admin and User and Customer. A single model User could have been used to implement all the individual functionalities.
I did not understand the need for the ""user"" model
I found the controllers to be heavily loaded with business logic. Logic can be moved to models or helper methods. Also, I could not find proper validations in models(for eg. there are no validations in tour.rb)
The are many if-else block in create method of bookings controller but I found code to be easy to understand."
0,"1) The code is readable and most of the functionalities are implemented in the controllers which I feel is done well. The team have defined multiple functions to perform different tasks and have kept the naming consistent. 
2) The naming is also pretty standard and functions are clearly defined. The tour controller has been designed well. 
3) I didn't find any problem with the length of the code and segments were split accordingly."
1,"The code follows the best practices of Ruby and Rails. However adding comments can always help a third person to better understand the code and it's functionalities when he/she is completely unaware of the nitty-gritties.
Some essential points I would like to highlight - 
There is some issue with the profile page for both agent and customer. It throws an exception. You should also think of displaying a welcome message with the role mentioned ( admin or agent or customer) 
As a customer I was able to see the destroy, edit buttons for the tours which is wrong. Although I wasn't able to destroy the tour but showing the buttons itself is incorrect.  I can also see the New Tour button as a customer which is incorrect. On clicking on this button there is an exception.
The bookings tab should be improved by giving better names to each functionality. Because now I am confused what Booked and Waitlisted means? I as a customer should be typing the booked and waitlisted seats. Plus you can put a drop down on the Tours because it is cumbersome for a customer to write the tour name. Or you can give an option of Booking beside the tour only like you have given for bookmarking. 
I did not find the admin credentials anywhere so couldn't test it's functionalities. 
As an agent I was unable to to view the My Tours tab as it throws exception. In the Tours page I could only see the tour I created.  On creating a tour I was asked to enter the available and waitlisted seats which should not be the case instead you should populate those values in your code logic."
0,"Yes, it's good."
0,"Might have used scaffolding, good file structure."
1,"I think the code has followed decently good its that not many functions have been implemented ,like I could see there was no code in the admin controller at all ."
1,"Looking at the tours controller, it seems that generally good coding practices are being used. I think, however, some areas where print statements are being used, this could've been handled in the .html files in the views folder."
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Remove all the ""puts"" and ""prints"" statements form the app/controllers/tours_controller.rb as I suppose it is for debugging purposes.
print ""\n####################################\n""
For debugging purposes enter all relevant information into the logs. Utilize logs instead of simple print statements as you lose them when application stops.
2. app/controllers/users_controller.rb is a little too extensive that and can be considered to be too long for controller class. Avoid bulk of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and contain no logic whatsoever. Consider refactoring it. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
Other than that controllers files are very clean and follow good coding practices.
3. All of the Model files are empty. But that is where all your logic should be stored. Consider revising your logic part of implementation and bring it to the Model classes.
4. Views look good, but that's where all job to improve UI should be done. Please improve all the fields that require input from a user here in the Views."
1,"The code is only scaffolded models. Nothing has been written in the controllers.
I suspect that you have submitted the wrong git link."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
The code shows readability and maintainability which is an elegant way to code.
I could not find any validations in model. Validations can be added to prevent user form adding incorrect data.
seed.rb was entirely commented( it can be used to specify admin credentials.)"
0,The code does follow good ruby and rails coding practices
0,Appears to use DRY Ruby and Rails practices.
1,The user has followed good naming conventions and the functionalities of the controllers were understandable. They have implemented separate controllers for users/agents/customers. I feel it could have been done with a single controller called users and they would have been able to save a lot of extra work.
0,Yes. They kept on pushing and merging their changes with detailed comments.
0,Yes the team has been working on the commits for a sufficient period of time.
1,Only two commits were made.
0,"Yes, I could see constant commits and the members commiting the changes."
0,"Yes, based on the github it seems that changes were pushed on a semi-regular basis."
1,"Team did really good job with pushing their changes throughout the project period. There are 4 branches, dev branch with 42 commits, dev_main with 20 commits. dhamang with 12 commits. Commits on the dev branch are spread out from Feb 18 to Feb 23. Whereas in the master there are only 2 commits stated at Feb 11 and Feb 13. SO, it looks like team dedicated most of its time from Feb 18-23."
0,YES! All the changes and add ons to the code seemed to be pushed to the git regularly with clear commit messages explaining these changes.
0,"Yes, there are commits throughout the project period."
1,Only 2 commits on this project.
0,There are 2 contributors and they seem to have been pushing changes whenever with clear annotations.
1,They tested the controllers but not the model.
1,Testing needs to be performed thoroughly. There are many missing pieces yet to be resolved.
1,The login part of the users was implemented almost perfectly apart from the function that the account was unable to be deleted
0,Yes the testing seems thorough enough on multiple controllers and models.
1,I do not see any indication of testing thoroughly at least one model and one controller. No additional tests are added into test directory.
1,"Since the github repo is empty, I cannot check if they have any testing in place."
1,There didn't appear to be any tests
1,Team as thoroughly tested agents controller but The code in the test/models directory appears to be the default auto-generated code (zero tests).
1,I could not see a test file in the repository
1,The testing functions seems to have not been implemented still.
1,"The README file has no content. Anyway, the user interface is easy to recognize except for the booking. It's confusing to book a tour by inputting user name and tour name."
1,I did not find the read me useful . You should work upon improving your read me file because it is the first thing a reviewer looks into to get a better idea of your implementation. It is okay to not implement features given the small time-frame but if you mention those in your read me file it saves a lot of time for the reviewer.
1,But there were no details in the Readme file about the information required to test as an admin.
1,"Not a bad UI. It makes sense that the tours links are at the top of the page, and there exists a link to bring me back to the home page in addition to a profile link. Unfortunately, the README contains no information."
1,The user interface seems fairly intuitive. I would have appreciated it more if you had a book tour link in front of every tour instead of having it separate.
1,"I tried to use the app and following are my observations:
when I logged in through customer. I could see options to create, delete and edit a tour which ideally should have been an agents functionality. when I clicked on customers profile I got an error page.
Also, I was not able to book a tour.
When I tried to create a tour through an agent there were no validations on the form also photos was declared as a text field.
I could not find any login credentials for admin in README file."
1,"Signing up for an account is very intuitive, but there is no usage description for the application in the README file."
1,It has a neat look but the readme file does not provide any detail of the admin login.
1,"Didn't quite get everything completed as indicated in the spec, but what is there is well formatted and intuitive."
1,UI seems to be very minimalistic and there are no complications in the way they have implemented. The admin details are not mentioned (if implemented?) in the readme file so I wasn't able to check for the same. The booking function also seems to be missing.
1,"1. The tour will be deleted with the bookings
2. The user will be deleted with his booking.
3. The admin cannot be deleted.
4. The tour have end data earlier than the start date.
5. The bookmakrs will delete with the customer
Problem: 6. When create a tour, the available seat can larger than the total seat."
1,"1) when an admin tries to delete tours, all associated bookings and reviews of the tour are also deleted.
2) The person's bookings are not automatically cancelled. They have to manually cancel bookings and then only will the customer be able to delete their account.
3) Admin account cannot be deleted.
4) tour's start date, end date and book before date have been correctly validated.
5) When an admin deletes a customer, all their bookings are automatically deleted. 
6) The admin has very limited access. The admin cannot create new tours. bookings, bookmarks, reviews etc. The requirements document clearly mentions that the admin should be able to do everything that an agent or a customer are able to do. I think the problem with your code lies in the fact that you did access control by mainly creating three different databases, one for each role. The agent and the customer clearly had different functionality so that didn't pose a problem then. But when you go to the Admin, you can neither classify that as an agent or a customer because an admin has to be both.  I think that instead of dong this, you could have created a users database and added a field named role which would take the values ""Admin"", ""Agent"", ""Customer"". You could have done you access control based on this role."
1,"1. The bookings and waitlists for the tour appear to get deleted if the user deletes his own account, but they must be cancelled if the admin does it.
2. Automatic booking does not occur under any circumstances.
3. No
4. No
5. Yes
6. Reviews are deleted when a customer is deleted.  I'm not sure if that is desirable."
1,"1 - successfully deletes.
2 - Cannot delete a user who is enrolled in a tour
3 - Admin account cannot be deleted, no where to do so
4 - Admin cannot create a tour. The end date cannot be before the start date.
5 - bookmarks get deleted when the user is deleted
6 - README talks about multiple cases which is why this review is a 4/5 and not 3/5"
1,"If an admin tries to delete a tour that has bookings, all the data for that particular tour is destroyed. The details of all the booking for every customer will also be destroyed. If a user is deleted who was enrolled for a tour, a message is displayed on the screen while deleting the user which says ""Please cancel all related bookings before delete account"". No, an admin cannot be deleted. Yes, a tour creation is possible which has an end date earlier than the start date. Yes, if a customer has bookmarked a certain tour and then later deleted, he/she will be removed from the corresponding interested customer's list too, but the same case is not possible for bookings of a customer."
1,Good Work: Most of the edge cases are implemented. But they are not documented in Readme.md
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Booking is destroyed (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Cannot delete such a user - ""Please cancel all related bookings before delete account""
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
No (correct behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Cannot delete such a user - ""Please cancel all related bookings before delete account""
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases.  The README discusses several edge cases but not all possible edge cases (which I don't consider to be a problem for a project with this timeline)."
1,"They have handled the edge cases nicely. for example, changing the agent ID to null for a tour if the agent is deleted."
1,"I think one of the very primary requirements of the system is that an admin can do everything an agent and a customer can do. This is completely missing in the project. 
The admin is able to do all the functions that are exclusively it's own. So can the agent and the customer. But when it comes to sharing functionality in the system, it is missing.
See point 6 in the next question's review for a detailed explanation on how you can resolve this."
0,No changes were made after the initial submission.
1,"Most features work, however search is bugged where it takes me to a page that says ""we're sorry, but something went wrong"" when using ID search
When I put that I wanted 12 out of the 11 remaining seats and not being together was okay, it still booked 12 seats on the tour"
1,"The system works as it is supposed to work. There are some minor issues like an admin profile cannot be updated. There was also one particular functionality where an admin wasn't able to view the reviews posted by the customer through its profile. That particular glitch has been updated. Apart from that, all the other functionalities seem to be in place. A customer is able to carry all the basic tasks like searching and booking a tour, an agent is able to list a tour and an admin is able to perform all the functionalities of a customer as well as an agent."
1,"Scope of improvement:
Basic functionalities are working great. But the errors found/suggestions given were not implemented in the second round. Otherwise, this project would have me ""excellent"". But very good work done by the team before round 1."
1,38 non-extra-credit checkboxes in round 1.  30 were checked by me as working properly.  Score for this part therefore ~ 79%.  Did not take a second look for round 2 because there are no commits to the repo since February 23.
1,"Again, the project already seemed complete in the first round itself. I had not found any problems that they could change later on.
 
There is one thing that I found, that when I booked a seat out of range, and then went to waitlist, when I tried to edit that to lesser seats which was available in the list of seats, I got the usual heroku error which says ""We're sorry but something went wrong."""
0,"The project has proper relationships for 1-ton and n-to-n,"
0,The relationships are handled correctly. Even the itinerary  relationship which is a tricky one.
1,I did not find any problems with the models.  The tour type has the necessary relationships with the other types in order to meet the requirements. The way the locations can be specified when creating and editing tours is slick.
0,"Yes, the database was correctly configured. Based on the application working properly, I would assume it is fully covered."
0,"The team has handled some relationship property really good. Several relationships have been mentioned regarding tours and customers, agents and admin. The best part of the database design is assigning relationship is an easy task since the users of the system have been assigned different controllers and models.  In this case, even if there is a sperate relationship from one user to the other, it becomes quite easy to identify and implement."
0,"Good work: All the major relationship like Agent-Customer, Customer-Booking, Agent-Tour, Customer-Bookmarks, etc are managed properly"
0,Didn't notice any obvious problems here.
0,I reviewed this project before the first submission and it already had all the necessary relations back then as well.
0,The last changes for the project was 10 days ago. It seems they finished the project before 1 round end. So they didn't make any changes on round2 based on the peer review.
1,You seem to have completed most of the project in a week at max. Rest of  the commits are updating the README.  There were no changes committed in Round 2. I think that is because your project was very good to start out with in the first place that there was hardly any room for improvement.
1,No commits after February 23rd.
1,No more commits since the initial turn in date.
1,"Yes, the team definitely did a very good in submitting their changes throughout the project. The team carried out their task perfectly, and way before the time limit. Even the commits that were made had proper names in order for the team to track down their changes. The team had almost entirely completed the project before the first review deadline. Therefore, the team did not commit any further changes in round 2. Overall, the team performed really well in maintaining their code on GitHub."
1,Scope of improvement: Team pushed changes regularly before Milestone 1. There are no commits for round 2. Commits are 10-12 days previous commits
0,There are no commits to the repo since February 23.  Before that it was pretty good though.
0,"I am unsure of how to interpret this question. The team has made constant commits throughout the project in the first half, and they have made their last commit almost 10 days ago. They seemed to have completed their project well in advance."
1,"The create and update method on books_controller are too long. Also, it has multiple tasks in these two methods. 
I didn't find any bad naming on the project"
1,"The code is extremely clean and readable. I could understand what was going on in the code by just looking at the function names and sure enough the function did exactly that! The code organization and the functionality is well thought out. There was a place in the bookings part where there was a lot of nesting, but the nature of the controller is such that it is unavoidable."
1,"The name ""booking"" would be preferable to the name ""book"" for bookings, but that choice of name may be due to a lack of familiarity with the term ""booking"".  The books controller does seems to be doing a lot in the create and update methods; I also struggled with finding ways to separate out code, since there necessarily is a fairly tight coupling between what is happening in the model and what the ultimate outcome of these actions are and thus what needs to be presented to the user.  There is duplication between the admin, agent and customer models; perhaps a common ancestor class could have been created?"
0,"Code was very clean, easy to read. Functionality was split into multiple methods making it understandable what each method was meant to do. Much like last time, code was well written and was split up among the group members."
1,"One of the good practice followed by the team would be to focus more on the technology rather than facing on the user interface, but the team has kept both of these in mind and implemented everything in a correct manner. The code shows readability and maintainability which is an elegant way to code. All the details have been taken care very minutely, including validations at several places. The code has handled one as well as multiple tasks. If there are multiple tasks, they have been handled by function calls. According to me, there is no bad naming in this project. Also, I couldn't find a code with long methods and several nested blocks. Overall a good job is done by the team."
1,"Overall Good Work:
Ruby guidelines are followed throughout the project.
The missing thing is - logic should be model rather than the controller. Eg . like the one for Booking"
0,Same rating as in round 1.  Did not take a second look for round 2 because there are no commits to the repo since February 23.
0,"There wasn't a lot of issues to be found in this project, it was cleanly written and understandable. The methods were well defined as well."
0,"The team has 92 commits so far, they keep pushing their changes throughout the project period very frequently"
1,"The team;s first commit was 10  days ago and the testing commits start 5 days ago which indicates that they did their project in five days which is impressive speed. however, you could have added more missing features such as viewing and creating reviews if you had a lot of time on hand. Anyway, getting a rails project up and running in five days is impressive!"
0,"There were multiple commits throughout the project duration, making me assume that the group had a schedule they were following with consistent meetings to ensure everyone was up to date."
0,Commits were pushed from 2/11 through 2/23.
1,"The team has been pushing all their changes regularly throughout the project period. The team has also created branches to carry out separate changes and then merged along the way as soon as a particular functionality is implemented correctly. GitHub is handled in a very good manner except for the messages for each commit. It would have been a perfect project according to me if only the messages had been correctly done. Each contributor has carried out work individually and pushed it, which shows that work is carried out regularly by every individual. This looks very positive on the team members and the team as a whole."
1,"The tours and bookmarks shown can be made better by just adding few details at listing page and you can add ""show more"" link which expands this."
0,Looks like commits started February 15 but after that point they were very frequent.
0,The team has tested the customer model and customer controller
1,"The controller validations look great. However, the model validations could be made more detailed by giving regular expressions to match an email rather than giving examples."
1,"The model test appears complete.  However, the controllers test appears to be missing testing the code path of an admin creating a customer."
0,Thoroughly tested 1 controller and 1 model. Great work by this team.
0,"The team has carefully tested the model and controller. The functionalities implemented are working correctly and appropriately. Each link has been correctly redirected to the mentioned functionality.  Testing has been carried out for every model and controller. The code for testing has been added correctly to all the models and controller, because of which each functionality has been carried out perfectly. I truly liked the amount of work and time spent on testing equally for all the minute tasks carried out. I could learn a lot from the testing carried out on every model and controller. This also in a way helped me to carry out my tasks in a better way and get an understanding of what should be exactly carried out."
0,Yes. Good work
0,"Of the 4 projects I have reviewed, this has by far the most thorough testing."
0,"The interface is very easy to use, and well described in the ReadMe file."
0,The user interface is very intuitive.
1,"I have to say that I am impressed with the UI in terms of look and feel.  One concern I have is with the search functionality: although it appears to be quite powerful, it might be a bit confusing for a casual, non-technical user.  I would suggest data-specific fields (name, date, available seats, price, etc.) and more basic functionality (for instance assume ""contains"" for strings instead of providing tons of options)  Also, the 'log in' link could be a bit more prominent; I didn't notice it at first and wondered if it was possible to log in at all.  The JavaScript used to manipulate the dates was pretty cool, but I would have chosen to use Rails' built-in date-field functionality because it is a little easier to use.  Creating a review was counter-intuitive in the sense that it needs to be done from the booking instead of from the tour details."
0,"Although it was not needed because the website was so easy to go around on, the README file provided so much information regarding each of the choices one could make depending on the user type."
1,"The user interface is very easy to use. Very brilliant work is been carried out by the team by focusing on each and every functionality minutely. Starting from the home page to the tours, and its details everything looks perfect. All the details have been taken care very minutely, including validations at several places. The only minor problem faced was during the review. Finding an option to write a review for a completed tour is difficult. Once the review had been added, to view for the agent as well as an admin then can be an easy job. Kudos to the team for an amazing job!"
0,"Its nice to see that you have added CSS, though its not in scope for this project."
1,"I really liked that you took time to add some styling to the application.  This made the application feel friendly.
I also really liked that you have a menu drop-down, this made it easy to navigate.
A few things I noticed:
When filtering tours, it is possible to create nonsensical filters, such as ""Description less than 2"" or ""Availableseats contains apple"".  In the latter example, when I attempted to search, I was taken to a page that said ""We're sorry, but something went wrong."".
It is possible to edit an existing tour that is still in the future, to give it the status ""Completed"".  I would suggest either disabling this, or calculating the ""In Future"" versus ""Completed"" status, rather than allowing a user to explicitly set this status.
It is possible to create a tour with -1 seats.
When logged in as a customer, on the page titled ""Editing Booking"", I reduced my booking seats from 10 to 8 and clicked ""Update Booking"".  I saw a message ""something went wrong"".
Very well-written README file!"
1,"The interface is really pretty, as they have added styling to each element rather than just html fields. I did not find the necessity for a readme as the interface was very easy to understand. One thing I would suggest is to change homepage from signup to login, because I will sign up only once, but I will log in a lot of times."
1,"Bookmark model has belong_to has agent. It is unreasonable as a bookmark can only belong a tour and a customer. That is, when a corresponding tour or customer is deleted, the bookmark is deleted. However, a deletion of the agent should not delete the bookmark directly.
Furthermore, the schema file shows that the Bookmark table has only the agent_id as the foreign key which further provides evidence to the above mentioned anomaly."
0,"The put up has_many and belong to in the models of the app, they mapped as many  relationships  as needed. Thus we can say that the db design is reasonably well done."
0,The team has handled the relations perfectly. They have fulfilled all the mappings.
0,Yes! The model files have all necessary 1-n and n to n relationships in the form of has_many and belongs_to. Could not find any problem
1,"Noticed a weird 1-to-n relationship between tour and customer models. Customer should have many bookings and not tours. Also noticed the relationship is written twice(no harm). Apart from this, everything looks good."
1,I don't think an agent should have many bookmarks
0,The system does handle the basic relationships properly
0,The DB design is appropriate and handles the relationships properly. There was a mapping table for such 1-to-n relationships and the models handle the relationships correctly.
1,"Model is tested thoroughly but the controller is not. ALso, it tests the presence of everything while creating a new tour."
1,"According to the README file, the team thoroughly tested one model and one controller. The team used RSpec Rails to thoroughly test Tour model and Tour controller.
However, all tests but one in /test/controllers/tours_controller_test.rb file are commented out in the Master branch. There are 7 tests in total, but 6 of them are commented out. They are all in place only in yzhu branch, but not in master. Therefore, I cannot count that these tests were delivered.
The only test in tours_controller_test.rb is not commented out is test ""should get new"".
Things do not look better in the test/models for tours. The tour_tst.rb file is pretty much empty and contains no tests (master branch).
Therefore, give only 2 out of 5 points."
1,"I thought they tested it before the initial peer review, but they seem to be experiencing a regression when it comes to not being able to view any tours at all."
0,"yes, at least one model and one controller are tested although the model could be tested more extensively"
1,"I was not able to add photos for the tour as an agent. When I mad a customer, I didnt get the mail regarding the status of a booking the customer did.
The Itinerary country and state is not mandatory.
I couldnt delete a tour, no response.
Had many issues regarding deleting objects (cust, tour) the application showed something went wrong error"
1,After deploying the application on AWS most of the functionalities are not working properly.
1,I don't see any comprehensive testing been added.
1,"Customer Search Tour by destination State/Country functionality is not implemented. The account creation also allows passwords that are too small. This reduces the account security. The functionality of notifying the customer on enrollment is not implemented and photo upload is also not supported.
All other basic functionalities seem to have been implemented with good User Interface."
1,I can add a tour with start data after the end date. Could not perform other edge case test because I deleted the admin and therefore its a very big issue
1,"All given Edge cases were tested and there were problems found running following scenarios: 
1. Admin deletes tour that has bookings: All corresponding bookings for booked customers are also removed. Agent does not have this tour listed any longer. The system behaves properly and no issues observed. Passed!
2. User is deleted who was enrolled for a tour and there are customers wait listed for the same tour: None of the customers who wait listed in the same tour were moved from wait list into booked. I do not think deleting customer actually free up the seats that customer booked. For example, As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it placed that 1 seat into wait list as expected. After that I completely removed the Customer1 from the system (that customer had 5 seats reserved for the Tour). Hence, I expect Customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. This is again big bug. Hence, Failed!
3. Admin account cannot be deleted. Passed!
4. Yes, tour can have end date earlier than the start date. Failed: As Agent I can create a tour that has end date earlier than the start date. No validation is performed correctly.
5. If Admin deletes a customer who had bookmarked several tours: I am unable to see what is going to happen and whether the customer and his/her bookmarks are removed from the list of bookmarked customers for corresponding tours. This cannot be tested because as Agent I cannot see who bookmarked my tour. ""Agent Center"" page does not work, it results in error with ""NoMethodError in Hone#agenttourlist"" error displayed on the Web. I count this as Failed test case.
6. If Admin deletes agent that had listed tours: It breaks the App. Now as Admin (note that Admin deleted Agent1 from the system), or Agent2 I cannot view any tours anymore. As Admin or Agent2 I click on ""All Tours"" link placed at the bar on the top of the page. But it results in error ""NoMethodError in Tours#index"" error displayed on the Web. This test Failed. Please make sure you have correctly stated dependencies on delete action. This will not work if any Agent will be removed from the system.
README contains some edge-cases scenarios, but for above failed ones it did not work properly.
Therefore, out of 6 edge cases tests, 4 Failed and only 2 passed. Since 2/6 passed, I give 2/5 score for edge cases.
Unfortunately, no further code changes are allowed and there is no possibility to fix anything."
1,I can't test these things since I can't view any tours (see above response).
1,"Almost all the basic functionalities have been implemented by the team. In the agent module, an agent is given options to delete or edit tours created by other agents. However it says we cannot edit them after pushing the button. But i felt this functionality could have been used to differentiate the tours created by the agents."
1,"1) The reviews, bookings, and bookmarks are removed
2) The other customers get taken off the waitlist and added to the tour but the number of available seats isn't updated
3) The admin account gets deleted :(
4) Yes
5) Yes"
1,"(1) What will happen if the admin tries to delete tour that has bookings?
-After logging in as an admin and then selecting the admin dashboard the Tour button on the left is broken
-The Agent center button is also, broken.
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
-The admin, cannot view the customers who have booked the tours.
After creating an customer account I cannot create a tour as the tour button is broken. 
""NoMethodError in Tours#index""
(3) Can Admin account be deleted? 
NO
 
 (4) Can a tour have end date earlier than the start date. 
Yes, this edge testcase was not taken care of.
 
(5) Yes, the customer is removed from the wishlist of the tours."
1,"Most of the functionalities were implemented. But i could not find the following,
The admin was not able to create a tour or book/bookmark a tour. I also found that after deleting a tour it was still  present in the admin page.
They missed out on creating a status field of the tour. This allowed all customers to review a tour instead of just the ones who have booked and where the status of the tour was completed. I believe the team might have misinterpreted a few features, for example, only the agent was able to see reviews. I could not find reviews of each tour when logged in as customer."
1,I was not able to try the edge cases as the the links inside login page don't seem to work for me. but some of the above mentioned featuresmworked in previous review as I said.
1,"Logout wasn't working, it was fixed.
There was no photos options for tours, which is still not working.
Admin creating new customers and agents wasn't working but it is fixed now.
Delete a tour doesn't work.
Admin cannot post a new tour.
No country and state validation in place."
1,"Tours page is not viewable so cannot perform this action 1 and 2.
3. admin cannot be deleted
4. tour can be created with an end date earlier than the start date
5. cannot perform as user not able to book the tour
6. most of the action can not be performed as TOurs, bookmark, reviews pages are not loading and throwing errors."
1,View all tours not working
1,"As an agent, I cannot delete a tour I previously created.
Reviews can be created for tours that have not started yet or have been booked by the user
Admin can't book or bookmark tours
I can't delete a booking as a customer - it leads me to an empty page"
1,All the functionality are performing very well. There was an error when I tried to click on Agent Centre or Customer Centre using admin login.
1,"I see some (only few) improvements since my first round peer review. The app was successfully deployed into the AWS Amazon. Well done. I also see that extra credit has been done and user can login now with Google account and the app sends an email when the status of the customer moves from waitlist to booked (however, your wait list functionality does not perform correctly. See point 14 below).
However, there are still bugs in the system that I reported in the peer review 1 period. Did you read my comments in peer review 1? Most of the issues are still not resolved. Below is the list of some issues that I still observe. Along with old issues I also noticed there are few new issues in the app that were introduced after peer review period 1.
1. As Admin I should NOT be able to change my preconfigured credentials. However, I can do that. Someone can easily mess up your admin user credentials.
2. As Admin I want to list new tour from Tours page (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/admin/tours/new). Filled in ALL the blanks and clicked ""Create Tour"". However, I see 2 errors prohibited this Tour from being saved: 1) Country can't be blank. 2) State can't be blank. But there are no Country neither State fields in the form. README file does not address this problem. You are missing country and state in this form. But if I create tour from ""All Tours"" page, it works fine.
3. As Admin or Agent I try to go to ""Agent Center"" by clicking on the link placed at the bar on the top of the page. But it results in error with ""NoMethodError in Hone#agenttourlist"" error displayed on the Web. This is pretty big bug unfortunately and users will not be happy to see it.
4. As Agent I want to view all the customers booked for any tours listed by me (their profile details except password). Unable to do it may be because all this information is stored in the ""Agent Center"" page that cannot be accessed. However, in tour page this information is not visible to the agent.
5. As Agent when I create new Tour, I should not enter/maintain number of available seats (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/admin/tours/new). Number of Available seats should be maintained by the system by finding the difference of total seats and seats that were booked by customers. Just completely change this form of the new tour with the form in the ""All Tours"" page.
6. Tour can be created having end date earlier than the start date.
7. As Agent I should not see ""Bookmark"" or ""Booking seats"" options for my own Tour. I am agent - not a customer.
8. As Customer I should be able to submit a review for a tour that that I've already taken. But I can submit a tour review for Tours that not I have not taken yet.
9. As Agent or Customer I want to edit my name. Although I can edit my profile, but I cannot edit my name!
10. As Agent or Customer I want to see a Wait List of each listed tour. This feature is not implemented or not easily found. Wait List of the tour is not visible to anyone! As Customer I can only see my own wait list for a particular tour.
11. Search functionality is not working. In the following page: (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/tours), I enter the name of the tour I want to find in the search box (""Search By Tour Name"") an click ""Search button, but nothing happens. I cannot display the tour that I am trying to find.
12. Search functionality must be implemented using filters, such as start date range, price range, tour name, slot availability, and locations visited during the tour (itinerary). At this point I only see that Tours can be searched by names, but this functionality does not work properly. (See point 9 above). Moreover, none of the filters were implemented.
13. As Customer I want to cancel partial number of reserved seats. If I have reserved 5 seats and trying to reduce it to 4. I choose ""Edit"" in the Booked seats section and enter 4. Then I click ""Booking seats"" button, but I creates additional reservation for me! Now I have 2 reservations! When I try to repeat that procedure, now it shows ""Entered seats greater than aval seats""! Basically, with update it creates new booking each time until it runs out of space in the Tour. This is a big bug that needs to be fixed.
14. Wait List functionality does not work! As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it placed that 1 seat into wait list as expected. After that I completely removed the Customer1 from the system (that customer had 5 seats reserved for the Tour). Hence, I expect Customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. This is again big bug.
15. As Admin I want to go to ""Customer Center"" by clicking on the link placed at the bar on the top of the page. But it results in error with ""NoMethodError in Hone#customercentert"" error displayed on the Web. This is pretty big bug unfortunately and users will not be happy to see it.
The above bugs are still not fixed and no improvements are done to eliminate them. In some cases system does not perform as it supposed to or expected to."
1,"Issues seen in round 1 that are still present in round 2 (possibly in a different form):
When I did start poking around, I came upon a few ""dead ends"".  For example, after modifying a tour, I was on a page which offered the options ""Logout"", ""Edit"", and ""Delete"".  It didn't seem that I could navigate from this point to anything I wanted to do.  I had to use my browser's back button to get back to a place where I could do more useful tasks.  - Not able to retest this for round 2, because attempting to modify a tour produced an error.  Modified name only, no other tour attributes.  Saw this error: ""Cannot set seats less than total existing bookings!"".  Also saw on that page: ""Available seats: -3/ 5"".
When logged in as a customer, after deleting a booking, I was taken to http://rails-p2.herokuapp.com/bookings/36, where I saw ""Henlo"" and no available links.
Admin - ""Can the admin list new tours?"" - Yes, but price must be an integer.
Admin - ""Can the admin delete tours from the system?"" - No, clicking ""Delete"" shows you the tour instead of deleting it.
Admin - ""Can the admin delete users (customers or agents) from the system?"" - No, ""We're sorry, but something went wrong.""
Admin - ""Can the admin delete reviews from the system?"" - No, couldn't find a review in order to delete it.  Logged in as a customer and left a review, this appeared to succeed.  Logged back in as admin and looked at this tour - no reviews were listed for it.
STOPPED MY TESTING AT THIS POINT.  This is due to the high percentage of unmet functionalities.  I didn't feel that spending additional time would give additional benefit.  I'm sure the TAs will see exactly which requirements are met and unmet."
1,"The system does seem to work as it is supposed to. There were some issues in review 1 which have been addressed. The customer review functionality does not seem to work as per the requirement. The customers are supposed to give a review only for the tours that have been booked by them and are complete. 
The my bookings part does not contain all the information and upon partial cancellation it does not confirm or tell the user anything.
Admin is not able to delete tours. Many bugs in delete and update functionality of tours."
1,"I am having an issue where I cannot view any tours. When I sign in as an admin and click ""Agent Center"", I get an error - ""NoMethodError in Home#agenttourlist"". The same thing happens if I click ""Admin Dashboard"" and then ""Tours"". I believe this functionality worked when I did my initial peer review, so it looks like a regression. 
I can't verify whether they fixed the issues I found in the first round since all the issues I found in the first round were related to tours (and now I can't access tours at all)."
0,No basic functionality is missing.
1,"Error while I am trying to access All Tours, reviews, bookmarks, Agents center, and Customer center while logged in as Admin.
As an Agent -> not able to access All Tours page.
As a Customer -> not able to access All Tours Page, so cannot perform any booking, bookmarking, reviews."
1,"Admin account cannot be deleted
 Yes, we are able to make todate  denote day befor start date
I couldnt delete a tour, no response or feedback.
 when i tried to delete a customer with booking the application broke.
 when i tried to delete a customer with bookmarks the application broke."
0,All models have proper relationships. Bookings and bookmarks are correctly linked with users and tours
1,"Admin on deleting a tour with a booking, does not delete the tour nor does it display any appropriate message for the admin
Admin cannot even view the customers who have booked/waitlisted for an tour. Hence, find the check for this edge case fails at this point itself
No
Yes, a tour can be created with end date earlier than start date which is wrong
When a customer with a bookmark is deleted by the admin, a page not found rails error is arises. This edge case is not handled by the team
The README does not explain about not handling these edge cases."
1,"- After deleting a tour we are not redirected to a homepage or a user message page as expected. Instead we are still in the same page without any confirmation message. This could cause confusion to the user.
- The agent is unable to delete the tours created by his own.
- The delete button for the tours in agent module is performing the same operation as view button."
0,"All relationships among the tables are found in Models files and /db/schema.rb file. No obvious problems are found. In fact, this design is probably the best that I've seen so far (except my own design which does not differ much). There are no unnecessary tables are created and makes this design clean and well understood. Only tables that are required by the system were created. Very well done and smart approach!
By examining the DB design I concluded that all relationships among tables are correct and properly handled in the system.  
Tour belongs to user, and has many reviews, photos, books, waitlists, bookmarks. Also tour has many users through reviews, photos, waitlists, books, and bookmarks. This indicates that Tour can only be created by agent user and belong to agent user (agent to tour 1-to-many relationship). However, customers may have many tours through reviews, photos, waitlists, books, and bookmarks. This indicates many-to-many relationship of customers and tours.
User has many tours, reviews, photos, waitlists, books, bookmarks. This indicates 1-to-many relationship to other tables. That does not necessarily meant that agent may have bookmarks or books, it means that some users (customers) may have it.
Book, Bookmark,  Photo, Review, and Waitlist are all belongs to user and tour."
1,"Was able to create a tour with a start date later than the end date. Could not check deletion(of tour, user) as it seems to not work."
0,Yes the system does handle the 1-to-n and n-to-n relationships properly.
0,The database is well designed and the dependencies have been taken care of.
0,The relationships were handled well in the code and made it easy to read.
1,"1) Cannot even delete a tour.
2) Cannot delete an agent.
3) Admin cannot be edited though.
4) Tour end date before start date works. Should have failed.
5) Cannot delete a customer.
Readme claims all test cases thoroughly tested, but these were missed."
0,good work with db design.
1,"I cannot delete customers as an admin (error page)
I cannot delete tours as an admin
I cannot delete tours I created as an agent
(AKA delete button on tours does not seem to be functional)
The agent can create tours with end dates prior to the start dates
As a customer, I booked 2 seats when there was only 1 available and chose to book available and waitlist the rest. When I updated the booking to 0 booked, my waitlist seat disappeared as well."
0,The team made commits regularly and most of the commits came after round 1 submission. One of the members had very few commits though.
1,"(1, 5 & 2 ) Delete on anything does not work.
(3) No
(4) Yes
6. The partial waitlist needs to be implemented"
1,"The team committed frequently throughout the project and into round 2.  However, the commit messages are not useful and therefore other team members cannot easily see what was committed."
0,"Yes, the team did commit."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Not able to test this because tour deletion is not working.  Clicking ""Delete"" shows you the tour instead of deleting it.
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Not able to test this because user deletion is not working.  ""We're sorry, but something went wrong.""
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Not able to test this because user deletion is not working.  ""We're sorry, but something went wrong.""
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases.  README does not cover how the system handles edge cases."
0,The team has made branches and have been submitting code regularly to GitHub. 2 of the contributors have all the major number of commits though.
0,Yes. The team has done a lot of commits in round 2.
0,"Code is very well written. It is very readable. Only suggestion is that the create method has a lot of code and it can be reduced. Otherwise, it is nice."
1,"Overall, the code is clean, readable and follows good RoR coding practices to a certain extent. As I noticed several things in the peer review 1, some of them were actually worked on to improved code quality of the App.
a) All hard-coded values from controllers/users_controller.rb are gone. Good improvement.
b) controllers/books_controller.rb is a little too extensive file. It is overwhelmed with bulk of ""if/elsif/else"" statements in the controller (starting at lines 18 and all the way throughout the file). As I previously mentioned, controller should be as simple as possible and should not contain any logic. Refactoring was not done and even more complexity was added into the controller.
On the other hand, Models files that should contain all of the logic are pretty much empty. Indicating that most of the logic was performed in controllers and views, which is incorrect RoR paradigm.
Code is well commented in some places, but it is hard to follow. In some cases one method handles more than one task without additional function calls. For example, when new booking is getting created, it calls ""create"" method in the app/controllers/books_controller.rb file. However, instead of creating booking, it checks
1. Whether there are enough seats for a booking. The logic now has a lot of nested if/else statements inside of this if block. It updates available seats in the tour based on some logic and saves the booking info into books table
2. Whether there are not enough seats for a booking. This block also contains bunch of nested ""if/elsif/else"" statements that based on the choice perform different operations, such as if wait list is selected, add the booking info into wait list table. If continue is selected, book available seats and move the rest to wait list table. Then it updates book table and then it also updates tour table for available seats. If cancel is selected, it redirects to the tour page.
Therefore, a simple function that supposed to create a booking, handles at least five different tasks without doing any function calls. This makes the code very hard to read and follow.
The same applies for the ""update"" method call in the ""books_controller.rb"" file. It checks (line 181) if (booked seats - bookOld) > tours availabe seats it does something, else it does something different. Again, very complex and bad naming for variables.
 
There are some bad naming I found within the project:
1. bookOld - app/controllers/books_controller.rb, line 177
2. w - app/controllers/books_controller.rb, line 201
3. old_total_seat - app/controllers/tours_controller.rb, line 116
4. old_aval_seat -  app/controllers/tours_controller.rb, line 117
5. old_status - app/controllers/tours_controller.rb, line 118
There are some other minor issues with coding, mostly too many nested if/else blocks especially within controller.
Unfortunately, code quality still can be improved."
1,Admin is not able to delete any tour. Corner case not handled as well. Admin is not able to delete anything neither customers nor agents. Admin account can be deleted. The start date and end date are just input boxes where the validations are nt placed properly. User does not know what format to give. Basic functionality has many flaws. Corner cases not handled
1,"Yes, customer model hasd the uniqueness constraint on the email attribute. Many validations were put in the model, from what i could tell customer model was amde and tested well. But deleting objects caused issues."
1,The team has not written any tests.
0,"I couldn't find any code for testing the application, however after using the application it is clear the team have done it manually. They have covered almost all the edge cases and the functionalities. Validations have been made to check if the user email already exists or not."
0,Code quality has remained clean and readable.
1,Could not find any test cases in the code.
1,"No controller testing
No model testing"
1,"The model or controller has not been tested. Manual testing is also lacking, probably because of time constraint."
0,"The code is readable and well written, there are proper naming conventions followed. 1) The function calls all seem to be handled properly and separate functions are used. From what I saw the code follows DRY. 2) The naming is done well and is easy to understand. 3) I particularly do not find any issues with the code. The way they have referenced other tables and written clean code is good, I was able to learn from it. The tour controller is also well written and all initializations look clean."
1,There are no model or controller tests in the project.
1,"The code is readable. one method is handling one task, others are called as a function call. The naming convention is good. There is only one issue - Long methods, too many nested block ex - books_controller.rb, there are lot of nested if-else for booking, updated and deleting the booking."
1,Tests have not been done for any controller or model
1,They still made commits after submission one but most of them are on the last 2 days of the deadline and the commits before that was 10 days before.
0,"Yes, the team consistently committed changes in round. Though there were only a few commits, it was distributed among the team members equally which shows good collaboration and responsibility among all the team members. The commits also seem to implement the significant changes mostly based on their feedback from their first round."
0,"The team was regular in committing the changes to git, Although there were only 53 commits each commit brought a major implementation of a functionality to the code.  There were many commits being done after the first round of reviews which suggests that they have worked consistently after the first round of reviews. After examining the commits it is clear that work has been equally distributed among the team mates."
1,Yes. But I see all commits on the last day only.
0,The team consistently committed in round 2.
0,"Yes, the team has commited changes throughout the project. All the memebershave put an effort to contribute, which is great."
0,Several commits in round 2.
0,"Yes, the code is succinct and to the function they are trying to implement, the functions were basics like create, edit show ect which did exactly as they are expected from their name. The models had good mappings and and bare minimum code here and in the controllers, which makes the code easily readable."
1,"Update and destory method in Bookings controller are too long. Similarly Update and book methods in Tour controller have multiple responsibilities handled in a single function.
The Book method could have been refactored to multiple function calls. Having long function calls is a bad coding practice as it hinders both code maintenance and modification."
1,"The code is well organized and easy to understand, however i felt it would've been much readable if there were more comments to represent what each block of code does. The team has done a good job of neatly dividing the code into appropriate methods instead of stacking all the operations into a single method. The naming convention they followed is also pretty accurate hence making the code easy to understand. I found long nesting in agents_controller.rb which i thought could've been avoided. The bookmarks_controller class takes care of the bookmarking tours."
0,"The code follows good Ruby practice. The variable names  are clear and folls good naming scheme. Could not find a lot of method calls, they have implemented a few for login logout. 
The code was easy to understand and readable."
1,"1) Noticed in some places that the methods are too big and handling multiple tasks. Ex: update in bookings controller is huge.
2) The naming looks good, apt and readable.
3) Same as point 1. Some methods are too long."
0,The code is written in a clean and readable way. Separate method calls are used as well.
1,"I think some of featres they have implemented are not working on production, still. A basic one is, deleting the tours and users are not working. Also for editing and creation the validation would be an easy and useful improvement. Regarding the the code quality, the amount they have implemented seems readable and following the DRY practices."
1,"Variable names are clear and concise.
 
I really liked the copious use of custom flash notices!  This could really help the user when they make mistakes.  For example:
 
flash[:notice] = ""Cannot edit other customer's booking!""
 
A few things that I noticed:
 
In app/controllers/admin_controller.rb, the admin email and password is hard-coded.  I would suggest pre-populating the database with the admin user instead, and checking the log-in credentials against this pre-populated record.
 
I would suggest adding some more comments into the code to assist a reader of the code in understanding what methods are intended to do.
 
In app/helpers, there are many files that don't really do anything.  Ideally such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: the same problem probably exists in my own code!
 
I expected to see more code in app/models.  From my understanding, in an MVC project, the ""M"" should do a lot of the heavy lifting.  I would suggest moving any SQL queries into the applicable model."
1,"Some landing pages have less options, no profile button. Some links didnt work (especially delete options and booking didnt update)"
0,There are 36 commits so far and everyone is equally participating
0,"They have split the functionalities for admin, agent and customer and i am guessing each member of the team pushed their features separately."
0,There were 36 commits by the team.
1,The team needs to make many more pushes to implement the remaining features. They can certainly do better with consistent commits in the future.
1,"No, they seemed to have only worked on the project for about 5 days consecutively, but it was consecutive. Would be helpful if you had at least one extra branch to keep your master branch cleaner."
0,The commits are from February 17 to February 23.
0,Some Users check were implemented
1,No test cases where found for both model and controller
0,Found a couple of fixtures for bookings
1,All of the test cases for the models and controllers seem to be empty.
0,"The program was deployed in heroku and it had an intuitive design, with most of the basic functionalities implemented. The UI was well done."
1,"The UI is very intuitive and the README provides the essential information about the required functionalities.
One suggestion is to use text field for phone numbers and prices instead of a number field."
1,The user interface is very well implemented with login forms and different colors for buttons for easy differentiation. I felt it would've been better if there was a back button or links to previous pages instead of using the browser's navigation buttons.
1,"Inspite of the fact UI does not carry points, the website created had a great interface. A 'back' feature or 'Home' button could be included as I was not able to login as both customer and agent. The read me file was very clear"
0,The readme is nicely documented and explains a lot of the features making this easy to review. The team has spent time making this project look especially nice given the time constraints we have had. The forms provide useful feedback and have drop downs instead of text box where appropriate.
0,I like the 3 separate login buttons
1,The README is not very extensive but it successfully mentions the required information.
1,"While being logged it, it's confusing to ever be redirected to the login page. You should redirect the user to their role's landing homepage at root. Also, when you create a customer/admin account, it doesn't make sense to login as that newly created user. If an admin wants to create other users or tours, this is very inconvenient. There doesn't seem to be any way to edit admin information (such as name or email or password)."
1,"The CSS styling of the application was fantastic - definitely beyond what we did on my team to be honest.  This friendly and clear styling put me at ease and made me confident to poke around in the UI.
When I did start poking around, I came upon a few ""dead ends"".  For example, after modifying a tour, I was on a page which offered the options ""Logout"", ""Edit"", and ""Delete"".  It didn't seem that I could navigate from this point to anything I wanted to do.  I had to use my browser's back button to get back to a place where I could do more useful tasks. 
Another example is that after viewing a user, and clicking ""Back"", I was taken to a page which offered the options ""Sign In"", ""Sign Up"", and ""Log Out"".  Again I had to use my browser's back button to get back to a place where I could do more useful tasks. 
I would suggest adding to app/views/layouts/application.html.erb to provide common useful links regardless of which page the user is currently viewing.
I tried ""Can the admin create customer and agent accounts?"" but this looks like I was signing up as a new user, and after doing so I saw ""Greetings, Customer Q. Public"", indicating that I was no longer logged in as the user.  I would suggest adding an alternative way to create a new user, when you are the admin, that does not automatically log that new user in.
After this experience, I logged out, and found that I was not able to log back in as the admin - ""Invalid email or password."".  I noticed that the URL was now http://rails-p2.herokuapp.com/customer.  I would suggest having a log in page that is agnostic as to user type.
When I attempted to delete a user, I was instead taken to a page that showed me that user's details.
There were many tasks that it was not clear to me how to accomplish / whether they were implemented.  These can be seen by which checkmarks I have checked (or not) in the review.
When creating a new tour as an agent, I found that the ""Contact"" input was an integer, which confused me.  I would suggest making this free-form, or a drop-down of user names.
When logged in as an agent, I attempted to delete a tour that I created.  The delete button did not appear to do anything.
When logged in as a customer, I attempted to cancel partial number of reserved seats.  I went from (not sure of exact numbers) 99 to 98 seats.  Instead, my booking dropped all the way to 1 seat.
When logged in as a customer, after deleting a booking, I was taken to http://rails-p2.herokuapp.com/bookings/2, where I saw ""Henlo"" and no available links.
Overall, unfortunately I did not find the interface intuitive and easy to use, for the reason that it was often unclear to me how to get to a place I wanted to be, and I was often surprised by what I saw after clicking something.
The README file did offer a few tips, but none that helped with the issues I was experiencing."
0,The UI was easy and convenient to use. The ReadMe consisted of everything that was implemented and also mentioned the features not implemented yet as well.
0,"Yes, the last update is just minutes ago"
0,"Yes, I see all 3 team members were updating Get repo. Moreover, I see 3 branches. It looks like each student has been working on his own branch and pushing to the master. There are 3 branches (except master):
1) hao, 2) shuai, 3) yzhu. 
There are 48 commits on the master branch, 34 commits on the hao branch, 49 commits on the shuai branch, and 17 commits on yzhu branch.
Very well done team!!!"
0,"It looks like they did a few major commits every few days, rather than smaller commits more regularly. But that's totally fine and they did push their changes throughout the project period."
0,The team have been consistent in pushing all the changes onto GitHub and there are clear annotations provided for each change that is made in the code.
0,all teammates have done commits throughout the project period.
1,README file tells that users model and searches_controller are tested. In users model only presence of the name is tested.
0,"I believe so, not much bug found"
1,It will be easy if you can mention the name of the test you performed. Had to check every file to see which was tested.
0,"Yes, they do"
1,"No, I did not see any controller being thoroughly tested, except default tests created by scaffold in the tours_controller_test.rb
Neither any of the models were thoroughly tested. Give 0 points for it."
1,"The customer is unable to book more than one tour. There is no way for the customer to cancel the booking. Waiting list cannot be seen in customer's window. Admin is unable to delete a tour listed by an agent. I was able to delete admin account, and cannot create another in signup as customer and agent are the only two options. In this app the tour can have date earlier than start date. Though edge cases are mentioned in README file I highly doubt if any one of it works."
0,It looks like they tested it.
1,"pictures aren't displayed, few links such as review, edit are displayed for some tours and not all. there is inconsistency in the page. view my bookings is wrong terminology as admin can view bookings made by customers. Home link takes to login page even when admin is logged in. there is no link to view all users at once. There are no validations while creating tours."
1,I see only placeholder code in the controller and model test cases.
1,"I don't see the test function implemented as of now. So, maybe the group can finish the same before the final submission."
1,"cardinality is not mentioned, but foreign key dependencies are used."
1,The team updated their changes to git. There are good number of commits in round 2. Whatever changes are made they were not in timely fashion.
1,Some function calls can be made in users_controller rather than embedding code at one place. Everything else looks good. There were too many nested loops in tours_controller.
0,"Very nice layout, looks pretty, did someone bootstrapped it?"
1,"controller testing is adequate, it seems that positive test cases are covered. It seems that more negative test cases could've been created, however. Model testing isn't very thorough."
1,"Partially intuitive. Some of the options, example booking ones [nothing, wait, continue, cancel] could make more sense by some description."
1,"Tour deleted with a booking present will remove the booking without warning, admin account cannot be deleted, tour can be created where end date < start date, tour removed with bookmarks by user will be removed from that user's bookmarks, the most critical seems that removing your own account results in the user being able to view other user's accounts - overall seems that error handling is good."
1,"Most things seem to work as intended. Some things are off such as I'm not able to view a picture uploaded for one of the tours, admin can't see all bookings, reviews don't show, cancelling seats on a tour doesn't work. Overall looks very good."
0,There don't seem to be any issues with database mapping.
1,"This App is very attractive and I've already reviewed with very similar layout. Things to point that I really like this UI layout. Homepage is very intuitive (especially it includes Admin account and password, cannot miss it) and really easy to navigate from. I really like the top bar with all the links on the top. It makes IU very clean and very user-friendly for people who does not know what this App is about.
As mentioned all important links are on the top bar and UI looks very clean and not bulky with links.
Customer UI for creating/deleting tour reservations and cancelling partial number of reserved seats is a little unclear. For example, as Customer I want to cancel partial number of reserved seats. It was not clear how to do that. If I have reserved 5 seats and trying to cancel 1, I enter 1, choose ""Cancel"". Press ""Booking seats"", but I creates additional reservation for me. Now I have 2 reservations. This is something that needs to improved.
Also, there is important point, please deploy your App externally I had some problems getting it running with conflicts of existing gems on my system. Just try to make it easier for reviewers and graders."
0,There seemed to be no issues with committing changes throughout the project period.
1,"Code is written cleanly for the most part. In some instances, for example in the cancel method in the tours controller, the 'if' statement evaluating newSeatsAvailable is a bit long, and could likely have used some additional method calls."
1,"I would dynamically generate some of the view based on the user role. It doesn't make sense to show an agent to make a booking on the tour page, for instance. This will also make permission errors less likely to happen from the front-end, though you still need controller side validation if users make requests via something like Postman."
1,The user interface is self explanatory and team seems to have done a good job with reference to the same. The admin account and password is listed even when we log in as an agent and maybe the team should correct that as the agent should not be able to access the admin's details.
0,Interactive UI. Easy to use. Links are easy to find and do what they suppose to.
0,Code is clean and neat
0,It follows the practice fairly well.
1,The code is very well written and it follows the principles of Good Ruby on Rails coding practices. One thing that I felt was that there were some mistakes in the comment and you can add some more comments and also the spacing is not consistent. It's not something important but it might help in making the code more readable.
1,"They have performed testing on the user controller and model.
Just the user has first name is although not a sufficient testing to be carried out. Many more things needs to be checked."
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Remove hard-coded values from controllers/users_controller.rb
2. controllers/book_controller.rb is a little too extensive file. Avoid bulks of if/ elsif / else statements in the controller (lines 49 - 112). In fact, controller should be as simple as possible and should not contain any logic. Consider refactoring it. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
3. Model files look great
4. Views files look great"
0,The code follows good coding practices. The code is modular and the folders and files are named appropriately.
0,The code follows good ruby and rails coding practices
1,"Within your controllers folder, you have an admin folder that enumerates the list of controllers again, accept you have an added ""valid_action"" method that checks whether you have permission. This is not a DRY way of doing this, and is confusing to follow as well. If you're looking for a way to handle permissions, I would recommend writing a check that validates that the current user has the proper role to conduct the action. You'd then only have to write the check once in each controller, and it would help clean up your work space by combining the more sparse files into one controller that's still centered around a resource."
0,Good use of Git. Code maintained with continuous commits. Branch and marge functionalities are used beautifully. Good work.
1,"(1) What will happen if the admin tries to delete tour that has bookings? 
Deletes all the respective booking (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? 
I did not see anywhere waitlisted booking 
(3) Can Admin account be deleted?
Cannot be deleted directly, but can be edited to be an agent and then can be deleted (incorrect behavior)
(4) Can a tour have end date earlier than the start date. 
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? 
Pages were broken (incorrect behavior)"
1,"The functionalities have not been covered thoroughly. All tours cannot be destroyed.
Several things are similar like show all reviews is not working as expected, review link seems to be broken, also roles can be changed to be an admin.
Admin is supposed to be preconfigured and cannot be edited(except name) or deleted but editing the admin is possible and even its role can be changed"
0,"The team did keep committing their work on the github repository during the two rounds. 
They had followed a good habit of naming the commits well, which not only kept a track of how they proceeded but also made easy for others to understand how they are approaching.
They also had a good README file updated."
0,"The team focused on implementing the functionalities. 
I did not find any bad naming convention in any of the controllers or models.
I also did not find any kind of heavy nested blocks or too long logic methods.
The coding followed good DRY for having only one model of users and not having different for every kind of user."
1,"Rigorous testing has been carried out on the user controller and model. URL directed testing has been carried out in various files such as ""searches_controller_test"" and ""tours_controller_test"". Some more basic test cases like email uniqueness and validation, password limit validation could have also been implemented. This would have added better test cases as well as helped in running some basic functionalities too. Several test cases have been added to the rspec file."
1,"The admin account could be edited, i.e, the password can be changed along with the user profile. The admin could be made an agent as well as a customer while editing. The customer booking functionality is not available on the ""Show Tours"" page as mentioned on the Readme page. Due to this, I am not able to check customer waitlisting after deleting a user enrolled for the tour. The bookmarked tour has been marked as ""False"" by default, so no bookmarking is possible by a customer. Therefore f a user has a bookmarked a tour and the same user is deleted by an admin what would happen cannot be checked due to lack of implementation."
1,"Several functionalities have been implemented, but partially. For example, in the admin profile, destroying a tour is possible only for a single tour and not all the tours. Also, editing an admin is now possible, but the admin can be edited as an agent as well as a customer too. The ""Show All Reviews"" page also doesn't seem to be working as in the first round of the review. The same review button also doesn't seem to be working for an agent. Also, an agent can be edited to become a customer or an admin. Session management is not improved. Clicking back button sometimes opens invalid pages. Booking options must be implemented with waitlisting. The entire functionality is not implemented. Validations are also not correctly handled."
1,"The good part I found in their project in accordance with the database is that a single model and controller for a ""user"" is created, and their roles are changes depending on the situation. This would be helpful since, we would not need three different tables in the database for a customer, agent and an admin. Some relationships are correctly implemented like the agent-tour relationship, which correctly shows the 1 to n mapping. Other relationships are not implemented due to the lack of different functionalities like bookings and reviews. If this would have been implemented a 1 to n relationship for user-booking and user-review could have been mapped."
0,"The team kept submitting changes throughout the project. Along with the changes, the team also mentioned the commits made in a proper manner. The commits were made meaningfully, which would have made it easier for the team to track the changes made on the repository. The readme was also updated according to the changes made, which shows that the team used to regularly make updates. Even after round 1, several commits and merges were made to the main branch of the repository. After round 1, the team has focused more on the testing functionality."
1,"Yes. They tested all the controllers. However, most of them are auto generated. Didn't see the test for testing the same email to register twice."
1,"-All the related information is deleted. 
-When I deleted the user, the tour they book has negative number of booked seats. I create a tour with 5 seats and use a customer to book 5 seats. When I delete this customer, the booked seats shows -11
-The Admin account cannot be deleted
-Yes. When I created a tour with start date March 8th and end date March 4th, it works.
-The bookmark will disappear
In the README file, it well explains how some edge cases work. It's great to write which item is deleted in DB."
1,"-For Admin. The admin account cannot be deleted. All the functions, like see the list of tour and user, work.
-For Agent. All the agent functions work. I can upload a picture to a tour.
-For Customer.

When I create a review, I couldn't bake to the previous page and the review part cannot be opened.
When the booked seats are deleted, I still couldn't be moved from waitlist to booking.

-Others.

When I use Apply filters, it still can't search many things together. Even for the basic search, it can only search the tour with the same name in the filter."
1,"It seems that they didn't generate bookings and bookmarks in the model. They just used methods to add customers.
In the model, 1-n and n-n are obviously and reasonable. There are 4 models. Use, tour, review and search. But I didn't see user has ""has many"", the tour belongs to user, review belongs to user and tour and search just a desperate model."
1,"The code is clean and readable. I'm not sure about the sessions and static_page controller. It may control the user sign in. The interest customers are added in one method. Booking, bookmark and waitlist are three different parts. But there are some method is too long, like the cancel method in user. There is no bad naming."
1,"As admin I booked 100 seats. I then edited the tour to 90 seats and while the tour said that there were only 90 seats booked, when I went to cancel the seats it said I had booked 100. I would've expected that i would've had 10 seats on the waitlist."
1,"Here are my comments from before. I put additional comments in CAPS. Sorry for yelling.
=====================================================
I was able to change the password of the admin.
PER THE PROGRAM 2 FAQ, #18, ""Admin should not be able to modify his login or password""
====================================================
I have no idea if the searching works. I tried to search on one of the dates but I got an error. You need to go through the app and see which things return errors and document them in the README. It's really hard to review the code when I end up just finding what works and what doesn't work.
BASIC NAME SEARCHING WORKS, THOUGH I NEEDED TO INCLUDE THE ENTIRE NAME TO MATCH A TOUR. WHILE YOU HAVE SORTING I COULDN'T SEARCH ON ANYTHING ELSE.
===================================================
You also need to either fix the UI of document how to do different activities. For example, if I'm the admin, how do I list all the users?
HAVING THE README MAKES THINGS MUCH EASIER. HERE A COUPLE OF THINGS I FOUND.
I CAN HAVE A PRICE OF 123.451
THE ITINERARY CAN BE COMPLETE NONSENSE, PROBABLY SHOULD BE TIED INTO THE LOCATIONS.
WHEN THE ADMIN CREATES A NEW USER THE APP SWITCHES TO THAT USER.
AS ADMIN, I WENT TO CANCEL MY BOOKING AND IT RETURNED AN ERROR. THE BOOKING WAS CANCELLED, BUT THE WAITLIST DIDN'T CHANGE.
===================================================
I got about 1/2 way through the tour checks before I stopped. So, blank checkboxes above there is functionality that didn't work.
WITH THE NEW CODE AND THE README I DIDN'T FEEL LIKE I WAS HAVING TO WORK EXTRA HARD TO FIGURE OUT THE FUNCTIONALITY OR WHICH FUNCTIONS WORKED. NICE JOB."
1,I didn't see any 1-n mappings in any of the models.
1,"Yes, the edge cases are handled decently. The admin's account cannot be deleted. If an admin tries to delete a customer, the corresponding bookmarks and bookings will be destroyed. There were few drawbacks such as, the tour has end date earlier than the start date and I couldn't find about those in ReadMe."
1,"Yes, the team has implemented most of the required functionalities. However, I found that few of them aren't working. As an admin, I wasn't able to destroy tours. As an agent, I couldn't edit or update tours that I created. As a customer, I couldn't search for a tour and find review option. Also, customers from the wait-list couldn't be enrolled. Apart from these, the team has done a good job."
1,"Was not able to delete admin under ""All Users"" view.
Was not able to delete tour that was booked. After deleting user who had booked, I still was not able to delete tour."
1,"I am able to see the different views available in the program. However, to do so, I must navigate to Account->Profile page. 

I was able to create a new User (agent) and then change to customer
I was able to create a tour (with picture) and book as customer
I was able to delete User
I was able to create a review and delete it."
1,"The tour and review model each have a ""belongs_to"" association however I did not see a has_one or has_many association in  User or Tour. This may result in extra complexity for model queries and model management. For example, given a User, if an Admin removes that User, the associated Tour(s) and Review(s) may not be deleted."
0,Regular commits can be seen based on the Network graph.
0,The code quality is good. Models are described well and the controllers methods are understandable. The README is very descriptive as well.
1,good RR practice except didn't implement business logic in the model code
0,Very detailed commits
0,"Yes, a lot of controllers and a model has been tested."
1,"The team must have missed certain things while testing, like some of the buttons, don't redirect to their respective pages. Many basic functionalities should have been tested more as there are several minor faults a user faces. For eg. Back button doesn't work properly. Logout of a session is not working, it get logged back in if we click the back button of the browser."
1,"The UI is very easy to use but there is a minor issue I faced when I was using the application. When I press the home button on top right corner, it takes me to the sign up or login page, but when I again press my profile, I log back into my profile. This is a minor page directing issue and can easily be looked into by the team. I used the read me file for admin user ID and Password, however read me file gave a very informative introduction about the application."
0,"The code follows Ruby coding practices like Do not Repeat Yourself, Readability and Maintainability. The code on git is very well separated into different modules. It is easy for any developer to navigate through the code and make any changes he would want to make."
0,It seems that pushes to the github are being made on a regular basis.
0,Multiple controllers and models are being thoroughly tested.
1,"It seems that generally there are no problems with the user interface. The website is set up in such a way that there is a logical flow of data. The readme is also clear, but there are some grammar issues that can be misleading."
1,"Looking specifically at the tours controller in the index method, it is very easily readable. There are some parts (for example in the waitlist method) where macros could have been used to more easily understand what's going on in your code, but otherwise it is quite good."
0,"Yes, the team kept pushing the code constantly. The commit messages are also pretty clear as to what has been implemented. 
They gave created sufficient branches to implement functionalities. They didn't push code on the last moment and that's a good thing.
Every contributor has carried out individually and constantly pushed it to Github."
1,"Yes, Some of the controllers and model have been tested by the developers. 
Models like users and one controller have been tested by the developers.
They need to complete the testing for at least one model fully. 
Rspec tests have been written.
Rest of the code is auto-generated"
1,"The README file is defined well with admin credentials and functionalities that have been implemented so far. 
once booking is done seats number is not being updated. Status field is missing when listing a tour.
customer can write review straightaway since you haven't provided a status field. 
Bookmark functionality link is missing and some tours cannot be deleted by admin.
Rest looks good."
0,The code follows good ruby and rails practices. The team not only focused on functionalities but also worked on the front end. The code shows readability and maintainability. They have made a good number of commits throughout the development cycle.
1,"Yes. The team has tested the models and controllers. RSpec tests have been written. Considering models and controllers, proper tests have been carried out for the controllers, but not for the models specifically."
1,"The README file specifies the details accurately which includes admin credentials and the functionalities that have been implemented. In some cases, most of the user interface is kept the same for the customer, agent and the admin. That is, even the customer can edit a tour, admin can give a review and also an admin view his booking which is not possible. Except this, the basic user interface for login and logout has been carried out in a proper way. I would suggest making the specified changes as mentioned above."
1,"I saw some auto generated test model in the test, but not some specific functions. I assume that you guys haven't finished the review part yet."
1,"I have to say the layout is very beautiful and I find you use bootstrap. I can find where is to sign up and login. But the problem is I don't know how to book and remark my tour. I saw there is controller in the code, maybe it is not complete or something. In README, it's great that you provide admin account and others mentioned in the documents(the other two team I make review didn't follow that). As the comment on piazza, it would be better to write the connection with link. This is also the problem of my team. I think it will make the whole README file more clear and understandable."
1,"From the code, I can see the effort in this project. There are a lot of commit here and whole team involved the work. The whole structure of code is nice and I can find the relationship between each object through the name of object. I t is easy to figure out how the code works. The only problem is that you haven't fully used model part. You can define functions in model instead of controller. It is more reasonable in MVC model and it will make the whole structure easy to work and maintain I think. All above is my understand of MVC model, FYI."
1,"I found the model spec and it looked great. I couldn't think of anything you didn't test. But, I didn't find a controller spec."
1,"The user interface isn't very intuitive. When I logged in as an agent and created a tour I didn't see an intuitive way to get to a page where I could do something. The home link took me all the way back to the login page. The back link took me to the same place as the edit link.
And nothing in the README addresses how to navigate around.
This seems to be true about most of the sections. When I went to edit the admin, it took me to a page about tour, reviews, and deleting accounts. What if I want to look at the users again and see that the action truly occurred?"
1,Your tours_controller and users_controller has way too much logic in it. According to Rails best practice you should move most of that logic to the model.
0,"Yes, the team has been pushing changes regularly."
1,"Interface is decent. One suggestion I'd give is to add a 'Back' button to go to the previous or the required page. Also, I wasn't able to go past more than a few functionalities."
0,"The code follows good Ruby and Rails coding practices. All the models, controllers and views seem to have been created using scaffold,which is good. The code is understandable and the logic seems to be present correctly in the model."
1,"This isn't necessarily a failing functionality, but there seems to be a lack of navigational buttons in the project. I find myself having to rely on the back button in my browser to move around. eg: hen you click sign up, you cannot go back to the login screen without changing the url in particular."
1,"The README file claims that the user model ""has been tested"".  However, the user_test.rb file does not contain any actual test cases. The controller test cases appear to be rails generate boilerplate."
1,"1. All bookings for that tour are deleted.
2. Nothing happens in terms of changing who is waitlisted.
3. No.
4. No.
5. Yes
6. The README file does not describe more edge cases.  Reviews of a tour are deleted when a tour is deleted."
1,"The login is still via username instead of email address.  The admin cannot create new users from what I could tell.  Photos still can't be uploaded.  Other features marked as not working appear to have been fixed.  The itineraries implementation is not very intuitive.  The associated tour appears to be stored in the session, but it is not at all clear which tour a location in the itinerary is being created for until you actually list all of the locations.  Locations are not listed with their associated tours, but rather all together in a single table."
1,"The relationships between the tables seemed OK to me.  I did notice that some fields intended for more text (e.g. tour description) were type ""string"" instead of the better suited ""text"".  I also noticed that there seemed to be redundant fields: for instance, the ""bookings"" table had string fields for ""username"" and ""tourname"", which could just be derived from the user and tour tables using the foreign keys.  Presumably when a tour name changes, the change would not automatically be propagated to such fields.  The ""bookmarks"", ""itineraries"", ""reviews"", and ""tours"" tables all contained such redundant fields."
1,"The tours controller index view contained logic to calculate the tour status based on date fields; ideally this would have been in the tour model instead.  The use of the ""access"" class variable in the reviews controller was creative, although maybe not particularly reader-friendly.  In general, the use of constants instead of literals would have been good in terms of the user roles: it's not clear which of the roles is represented by 1, 2, and 3.  The search functionality was implemented in an interesting way, by setting values in the session.  It would have been more straightforward to have the search form be submitted to the controller that actually initiates the search instead of a controller that populates values into the session and then redirects to the tours URL.  The booking model contained the logic for booking vs. waitlisting, which is preferable to having it be in the controller.  Here again was the use of integer literals to drive logic when constants would have made the code easier to understand.  There was also an ""if/elsif/elsif/elsif"" block which was driven entirely by the value of a single variable, so a case statement would have been a better fit.  The method was also rather large, so it would have been good to break it into smaller ones--the equivalent method in my project was also larger than ideal."
0,Yes they have tested the user model. They have made the username unique in place of the email id. So it works perfectly based on that.
0,They have handled all the edge cases perfectly. I wanted to test with the partial seats cancellation to test the waitlist and confirmation functionality thoroughly.
1,I found the relation between the tour and users a bit confusing because a user can have many tours when he/she is a customer but the tour would belong to one user when he/she is an agent or an admin.
1,"The coding is in line with the syntax and semantics of Ruby and Rails. I liked the function names. My only problem was a lot of coding on enumerations and the reader could get confused as to what integer value corresponds to what state. So adding comments can always help. 
These are a few points which I still feel from the last review : 
I felt the UI was a bit mundane. You can implement some styling here and there to better the look of the Welcome page at-least.
On logging in as a customer, I was given an option to destroy and edit a tour which is not good. Although it does not allow me to edit or delete the tour but giving an option itself is wrong.
I was confused initially on where do I book seats for a specific tour. It took me a while to figure it out that this can be done via the show tab. You can modify the name of the button to ""View and Book"". Similar thing I found with Admins page where the profile page showed the list of customers and agents which is a bit unclear and not obvious from the button name.
I wanted to point out that when a customer deletes his/her profile I am redirected to the main page which prompts ""You are trying to login when not authorized."" where in if I log in with the same user profile I get a flash message saying ""Logged out successfully"" which should not be the case as I have already deleted the profile. I should be logged out of the page as soon as I hit delete profile.
I could not find a way where in I could cancel partial reservation as a customer."
1,Model has been tested. Appears controller tests are scaffold.
1,"2) Tour bookings not updated on user deletion.
5) Cannot find view of users who bookmarked tours.
6) When I edited my profile and changed a customer to an agent, I cannot list tours."
1,"System appears to work well.
Tours should display the itinerary.
Having contact info as a phone number instead of a foreign key to user is awkward.
Admin cannot create users.
You should probably have a link to bookmarks and bookings from the tour index page not just the show page."
1,An itinerary does not really need to belong to a user.
1,"The bookmytour function in Booking does not appear to be streamlined. What is the point of mode 4? Perhaps an ""allow waitlist for seats"" option would be better than 4 somewhat related cases. Also makes for sloppy code in the bookings controller.
For Tour filterOutResults, it might be better to pass a dict of search options and use the keys and values in the where statement. Current version with a bunch of if statements is sloppy and you could not easily add/remove search terms.
When creating a search, why do you store things in the session?"
1,"The team must have missed certain things while testing, like some of the buttons, don't redirect to their respective pages. Many basic functionalities should have been tested more as there are several minor faults a user faces. For eg. Back button doesn't work properly. Logout of a session is not working, it gets logged back in if we click the back button of the browser."
1,"Edge cases: 
Deleting a tour that has a booking deletes the tour by removing the tour details from the database.
If customers are waitlisted, their waiting list gets updated with the number of seats that have been deleted.
Yes, Admin account can be deleted, details of the admin get removed from the database.
No, a tour cannot have end date earlier than the start date, gives an error.
Yes, Customer deleted reflects all the other tables since the database is consistent.
Interested customer list has not been implemented yet."
1,"Most of the problems I mentioned in the previous review have been taken care of and the team has been consistent with their updates. Previously, I mentioned the LOGOUT issue, where the profile comes back when we press the back button of the browser."
0,"All the relationships in the project are very well implemented following all the database principles. This, in turn, helped the team to develop their tour management application without any discrepancies. Also, the team has very well implemented the user logging and tour listing. Looking at the code, models and controllers were very well sorted and separated."
0,"Yes, the team has been active after the first round and kept pushing their updates regularly. Since the code is separated into several controllers, it is easy for all the developers to work in parallel. I can see that the code is easily maintainable and the developers if they perform any updates or changes, they can easily push it. Throughout the project, the team has been making several critical changes."
0,"Yes, after looking at the code in Github, it looks readable, elegant and follows the DRY principle. It would be easy for any developer to understand and work on it. 
I see that each module handles only one task. Function calls have been made to handle multiple tasks. Also, separate method calls have been used for different requirements. 
Also, all the names of the variables used were relevant and make sense when we go through the code. I didn't find any issues with coding."
1,"It is stated in the README file that only one model has been tested i.e users model, but users controller is test and not users model."
1,"when admin tries to delete tour that has bookings then it is erased from customers list who booked for the tour and agents list who was responsible for this tour. If  a user has deleted the tour which he/she was enrolled for then customers in wait list are confirmed. admin account cannot be deleted. A tour cannot have end date earlier than start date. If the admin tries to delete a customer who has book marked several tours, then he/she is simply removed from customer's list. Unfortunately, README file doesn't cover how it handles edge cases atleast not to a full extent."
1,"Admin is given additional functionalities such as book tour, bookmark tour, etc which should not be done by the admin. Creating users and agents by the admin is not developed. There is major problem in traversing through the app. Many extra links are been added which do not have any functionality such as in customer there is create tour, but when clicked on it it shows customers cannot create tours. There is no link to bookmarks directly, the customer must click on any of the tours then my bookmarks will show up. There is no link to homepage which requires the user to always logout and then login."
0,"Yes the project code consists of relationships that are one to many, many to one, one to one and foreign key dependencies."
0,According to the commit graphs and contributions seems like all three members in the group have put in effort to make changes to the code in round 2.
1,"Too many else-if statements with repeating lines in block in bookings_controller. Everything else looks good. The naming convention used in the project is pretty clear. The README file was filled up with project narrative which I felt was verbose, navigation details were missing."
0,Review has been thoroughly tested. Testing is done to ensure that no blank review with blank subject or blank tourid is added by the user.
1,"1) Deletion occurs and all the respective reviews, bookmarks and bookmarks are also destroyed.
2) The customers who are in the waitlist get confirmed seats based on how many seats got empty. The seats are added to the available seats when no user has waitlist less than the canceled seats
3) The system shows an info ""Admin account cannot be deleted""
4)No, validations are provided to prevent the tour being created when end date is earlier than the start date
5) Yes, the list of bookmarks are updated. There is no place where we can see all the bookmarks for the tour, but the bookmarks are deleted along with the user.
Other edge case I checked was, I created a tour using admin and tried to edit it using an agent account and it failed.
I found all the basic requirements working fine in the system"
1,"Yes, most of the functions work as expected. In the first round most of the options were not accessible and they were fixed in the second round, but I still couldn't find certain customer and agent options from the admin login
 
One of the problems I found was, When a review is added there is no option to select the tour for which the review needs to be added. Instead, it gets added to the most recent tour. I checked this from the admin login
 
Also, photos part was not implemented."
0,"All the models were implemented in a very good manner with all the required validations and relationships.
Relationships that were mentioned in the project description including tour-customer, customer-booking, tour-booking and other relationships between tour and customer with review,bookmarks and bookings were addressed."
0,"I couldn't find many commits after the first round of review. But all the changes required were implemented. For eg, certain views which couldn't be accessed during the initial round were made accessible."
1,"1)Yes, each method handles only one task in most of the places. But, inside the tours controller, validations were added in the create and update methods. It would be better to implement them as separate functions and placing function calls within the controller.
2)Yes, controllers and models were implemented separately to address bookmark functionality. Also, a separate method call does the job"
0,The first commits were on 2/3 and the last were on 2/24.
1,There were no model tests.  The users controller test seems to be a valid test.  The rest of the controller tests appear to have been generated by rails g and did not include any accommodations for logged in users so most likely they do not pass.
1,"The interface was good in terms of being able to get to the various features from most pages.  It would be good to add the navigation links to the pages associated with the user profile.  Also, it would be good to send the user straight to their profile instead of a profile list if the user is not an admin.  The ""itineraries"" view was a bit confusing to me.  I believe that itineraries should be associated with specific tours, rather than being peers to tours."
1,"A lot of the business logic was in the model, which is good.  I believe the logic that filtered resources by user role would have ideally been put into the model as well."
0,"Yes, the team has been pushing in changes since Feb 9."
1,"The readme file could have been made better by giving the reviewer a clear demarcation of what you have implemented and what you have not. Because the readme file suggests a lot of things that you have missed out. 
You can add a section always to state clearly what is left to implement."
1,"The coding is in line with the syntax and semantics of Ruby and Rails. I liked the fact that you have provided an option for the Role in the sign up page instead of giving 3 tabs on the main page. Nice Idea! 
However, these are a few points to improve upon : 
I felt the UI was a bit mundane. You can implement some styling here and there to better the look of the Welcome page at-least.
On logging in as a customer, I was given an option to destroy and edit a tour which is not good. Although it does not allow me to edit or delete the tour but giving an option itself is wrong.
I was confused initially on where do I book seats for a specific tour. It took me a while to figure it out that this can be done via the edit tab. This could be improved by listing the options of the customer of his/her privileges on the index page itself.
Another thing I noticed was I was able to create two customers with same email-id which should not occur as email id is supposed to be unique as per the requirements spec.
I wanted to point out that when a customer deletes his/her profile I am redirected to the main page where in if I log in with the same user profile I get a flash message saying ""Logged out successfully"" which should not be the case as I have already deleted the profile.
As an admin I was not able to view the list of customers or agents or was not able to delete a tour.
Also I was checking whether or not I am able to delete the admin account. And I could. You might want check on this immediately.
There are a few problems with the waitlist functionality. On cancelling an entire reservation, the wailisted people do not get confirmed. Also there a few cases where your available seats can become negative. (Basically it can number of bookings exceed total seats)"
1,May want some additional navigation links. See additional comments.
0,"I worked on the project only once and I couldn't check if the team was regularly pushing the changes. But I can see that the code is easily maintainable and the developers if perform any updates or changes, they can easily push it."
0,"Yes, the team has very well implemented the user logging and tour listing. Looking at the code, models and controllers were very well sorted and separated. After signing up and using the application, I felt the team would have definitely tested the application."
0,"After looking at the code on git, I felt the code was well written, it was readable, elegant and follows the DRY principle. It would be easy for any developer to understand and work on it."
0,"Yes, commits were done everyday."
1,"It was simple and clean, but I found difficult to navigate certain pages which could be addressed in the readme

You have to go into list of tours to create a new tour or review
In add review I was unable to select the tour(I'm not sure if I missed something)
Certain pages were not provided with 'back' and I had to use browser navigation
In agent, when tried to edit tours of other agents it showed browser error instead of handled message"
0,"Yes, the team kept pushing their commits throughout, which shows that they have been working on the project regularly."
0,"Yes, the team has tested a few models and controllers completely."
0,It is pretty straightforward.
0,The functionalities used seems to have followed good Ruby and Rails coding practices. The code is readable and the ReadMe is good too.
0,Good use of Git's functionality to maintain code.
1,Some functionalities are still remaining. ex - different views for different users(edit/delete tour options can be removed for users)
1,"the user interface could be improved.
ex - links can be placed on top of the page for ease of access.
-search options can be shown on the same page as tours for better search.
- a back/home option can be added on USERS page."
0,Commits are done for every change which shows good use of git to maintain their code.  README is also provided and mentions all the details that every actor is supposed to do.
1,"The team has tested a model, but not any controller."
1,"The team has handled the edge-cases pretty well. The admin's account cannot be deleted. If a customer's account is deleted by the admin, the customer's bookings and bookmarks will automatically be deleted. Only one problem is that, a customer can give review for a tour even when the tour hasn't even begun."
1,"Most of the functionalities seem to be present. However, I faced a few issues. I had issues when I tried to search for a tour based on available seats and also, I was able to find tours only by entering the full name. I could give reviews for a tour when the tour status is 'In Future'.  As mentioned in the ReadMe, one feature that is supposed to be implemented is missing(Agent uploading a photo while creating tours). Apart from these minute errors, the team has done a pretty good job."
1,locations are not added to all tours. Able to provide reviews randomly which are not attached to any tour.
0,good clean code.
1,"The admin, agent, and customer type code and actions are not all working properly."
1,"The team has used paperclip gem to create test cases for controllers and models. All the files have been automatically generated by paperclip. The team have not added to the test cases.
The README also does not specify if the tests have been written or not.
The searches controller looks like some test cases have been added manually..but no new test cases have been thought of."
1,I do not think that the team has done a thorough testing of the models and controller. I found the testing to be the one that was automatically generated by the app. It is why I have been getting many errors in the app.
1,"No model testing. Searches controller test has minimal (scaffold?) testing, other controllers test for success responses only."
1,"No, there werent any model that was tested by the team.
the code in model and controller was all auto generated.
Hence, i don't think any model/controller was tested by the team."
1,"Edge cases: 
Deleting a tour that has a booking removes the tour by removing the tour details from the database.
If customers are waitlisted, their waiting list gets updated with the number of seats that have been deleted.
Yes, Admin account can be deleted, details of the admin get removed from the database.
No, a tour cannot have end date earlier than the start date, gives an error.
Yes, Customer deleted reflects all the other tables since the database is consistent.
 
Interested customer list has not been implemented yet."
1,"1) The deletion of a tour leads to an error page but in the background it does delete the booking of the customer and the tour.
2)  The deletion of the account of a customer leads to a view which is not correct. But the deletion leads to correctly changing another booking from waitlist to confirmed.
3) The admin account cannot be deleted.
4) The editing of a tour's end date to set it before the start date does not generate an error but leads to wrong page.
5) This case works correctly except for the slight glitch deletion.
The README does not cover any explanation regarding edge case handling."
1,"1) In this case all the bookmarks and bookings for that tour get deleted.
2) In this case all seats booked to the customer are transferred to the next customer, which, according to me, is not the correct implementation.
3) There was no option to delete an admin.
4) It allows us to create tours that have end date earlier than the start date, which should not be allowed.
5) In this case all their bookmarks get deleted and the interested list gets deleted too.
The readme does not document any edge cases."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Admin could not delete or edit any tour (incorrect behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Admin could not delete user (Tried deleting customer himself, since I could not add waitlsit there was no movement in waitlist and neither the tour seats updated) (Incorrect behavior)
(3) Can Admin account be deleted?
No (correct behavior)
 (4) Can a tour have end date earlier than the start date. 
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Admin could not delete customer/agent/tour from the system. it always threw an error to me (incorrect behavior).
 (6) You can come up with more edge-cases
I had couple of edge cases in mind but could not implement since functionalities are either broken or they haven't state it well in README as to how to use them."
1,"Almost all the basic functionalities have been implemented by the team. In the agent module, an agent is given options to delete or edit tours created by other agents. However, it says we cannot edit them after pushing the button. But I felt this functionality could have been used to differentiate the tours created by the agents."
0,"Looking at the ERD, the structure of the database has the 1 to n and n to n defined properly. The models also support associations as well as deleting dependent records."
0,"Yes, the team has been consistent in submitting the reviews throughout the project. All the commits were regular and most of the important functionalities of the project have been working on after round 2. The team has been active after the first round and kept pushing their updates regularly. Since the code is separated into several controllers, it is easy for all the developers to work in parallel."
0,"The team was very consistent with working on the project. They started on time, and continued to commit even after the first submission and the round of reviews."
1,"Admins, agent options controller, customer options controller, options controller, welcome controller are all empty. They were perhaps scaffolded and they the team realized that they made a bad design decision by creating them and abandoned those controllers. I would suggest that you could just delete the controlled. You can un-scaffold the creation of controllers. If the command for scaffolding is
rails generate controller ...
the command to delete it is rails delete controller ..."
1,"I created a new agent account:
Name: AgentTest
Email: agentTest@gmail.com
Password: testtest
 
When I went to log in with these credentials, I got an error.
 
I even logged in as the admin and made sure the password was testtest."
1,"There were a few things missing in the first submission that I had pointed out in my review last time. Some of those have not been implemented. They are as follows.
1) The admin cannot edit their own name.. but instead of having the link to some page, it leads to an error page.
2) When an admin tries to create tours, they can only create on behalf of an agent and not on their own. 
3) The admin can delete tours, but after deletion it leads to an error page instead of an intelligible page. The admin cannot delete a customer.
4) The search functionality and adding photos of tours has not been implemented.
5) The admin cannot book tours."
1,"It does not look like they fixed the problems I found in the first round.
The admin is still not able to edit his/her profile name. Tours cannot be searched. Clicking ""View pictures of tours"" does nothing. So there are still a few issues with the app. I also keep getting an error that ""Agent must exist"" when I try to create a tour, which is not explained in the README, so I can't figure out why I can't create a tour.
I originally thought the admin was not able to list or delete tours, users, or reviews from the system, but it looks like he/she just has to do it in a roundabout way, by clicking ""Go to agent options"" rather than just ""List all tours""."
1,"Although, some features have been improved, there are still some issues that could be found here:
All the basic functionality works just like the last time. I found that the app gives error when I try to destroy a user. Cannot create tours as an admin.
I get this message on destroying a user:
Sessions#show
Find me in app/views/sessions/show.html.erb"
1,"There are a lot of improvements from the first round , but searching a tour functionality is not working when I login as a customer (page not found error). I cannot view any photos."
1,"Admin couldn't delete any agent/customer. It redirected to a page and Heroku threw an error for page not found.
An agent could not delete or edit any tour he listed. Once a customer books the tour the number of seats left in tour does not get updated. An agent could not delete or edit any of tour he listed.
Booking seats for waitlist were kind of difficult to under and there was not anything clear as to how shall a customer add more seats to a waitlist. I tried to figure out but could not add any customer to a waitlist. And customer could write reviews to any tour even without booking the tour.
And I don't know why but I always had to double click on links which was irritating to me and was not an appealing UI."
1,"I was not able to:
-Upload/view photos of tours
-Agent was not allowed to book a tour/review tour/book mark a tour etc. due to agent not being in customer table
-The link to the Search Function is not working
-I could not find how to add tours with Admin account
-I could not find how to modify an existing tour with admin or agent account"
1,"The code follows a good ruby and rails structure.
The models of customer-agent both handles email address well with the regex /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i but this doesn't follow good DRY skills of RUBY and hence I believe this is the only bad thing in the project which I came across."
0,It works if given the list of functions.
0,From the commit history the team had been pushing almost daily for the last 9 days.
0,"Yes, the team members have frequently pushed their codes and have contributed equally."
1,Yes they did but one person seemed to be committing more than the other.
1,Team has worked well on the project and has code commits at regular intervals. The only drawback is only one person has done a lot of work. Would have been really great if the work was divided propotionately.
0,The members of the team were regular in pushing their updates to the git and updating them. They made sure to commit even the smallest changes. Each of the team mates divided the task and worked on separate modules which shows they are very organized.
0,The commit log reflects the teams efforts in pushing changes regularly and starting well before the deadline. The commit messages are clear in terms of representing the functionalities being built.
1,The team tested most of the models and controllers. most of the validations are in place. But destroy objects dont work. The booking cancel dropdown is  sometimes empty.
1,The team has thoroughly tested the reviews controller. The readme didnt mention which model was tested and couldnt find them in the code base.
1,"Based on the code, it looks like team has handled testing well, but hasn't made any changes to RSpec files. Would be helpful if the application is live"
0,"Almost all the features of the admin model has been implemented, after using this website if felt like i used a real completed website."
1,The files in the folder and commit history do not show any rpec testing files.
0,It's good
1,"UI is simple and without any formating so, its a bit difficult to understand what is written. Sometimes the navigation goes from page to page and I got lost in them but the main tabs at the top helped."
0,Yes the README was well written and the UI was intuitive.
1,The page is a little basic but easy to use. Some of the buttons are a little small and the text is hard to read. On the sign up page the decision between agent and customer is easy to miss and should be a more conscious decision. On the sign up page when I put in bad information it did not let me sign up but there were not any errors on the page.
1,"The user interface is a bit primitive and i believe under development. The validations were done after the button is pressed which requires the user to fill the entire form again for a small blunder he might have made while filling the form, which can be a little frustrating. The ReadMe file was organised so clearly with sections of what they have included and what has to be implemented. This made checking the application for features easy."
1,"The user interface is very intuitive and easy to use. Additionally, the missing features have been highlighted in the README. Separating the role/user specific views and functionalities was a nice touch. However, there are chances of missing the bookmark and book buttons, because its at the very bottom of the page. I would suggest moving these buttons to the top or making them bigger."
0,Excellent UI.
0,The basic functionalities were implemented using the conventions followed while developing in rails. They adhered to the DRY principle and used minimum code to cover the functionalities.
0,The code does follow good practices. Functionality seems to be split between the model and controller. There are validations in place.
1,"The code is very clear and there are comments for each module implemented. In the users_controller, refactoring can be done to put each function in a different file . The team seems to have skipped implementing DRY principles, almost same conditions are being checked multiple times which might slow down the web site."
0,The coding seem to adhere good practices in terms of moving the business logic into the models and the role based access related checks in the controller. The variable names and style of coding makes it easy to understand.
0,Code is clearly DRY. Also appears that much of the code checking or updating object state is handled in the model classes.
0,Controllers have been tested.
1,"Edge cases like tours cancellation is handled well. All customer bookings get deleted, bookmarks and so does the reviews.
Only thing I wanted to test thoroughly was the waitlist and booking confirmation functionality but as mentioned above it lags careful coding."
1,"Admin cannot create customers and agents.
I still don't see an edit profile button for customer/agent.
An agent is able to delete tours created by other agents.
Validations like start date always being lower than end date fails.
I don't see a search tour button.
Customer cannot cancel partial reservation.
Waitlist functionality fails as mentioned with an example in the first question."
1,"The code is in line with the best coding practices of Ruby and Rails. I also felt the UI was pretty clean and easy to understand.
However, addition of comments can always help in the understanding of a third person completely unaware of the code.
I still see these points from the first review : 
The password as well as password confirmation is visible which is a high security breach for any web page.
If a certain action is being done against the pre-set rules, you should flash it as notice instead of a message. (When a customer is attempting to create a new tour) Also I felt you could remove this button altogether as it is of no use.
As an agent I was able to destroy other agent's bookings of their tours. 
Validations should be revisited as I could create a tour with end date lower than the start date.
There are issues with the waitlist and seat booking logic. I booked all seats in a tour comprising of 50 seats in a breakdown of 10,10,20 and 10. Next I made two bookings of 20 each and put them to waitlist. Then I deleted my first booking with 10 seats as a result of which all my bookings got confirmed. So i could see 80 seats booked for a tour having just 50 seats."
1,"Yes, an honest effort is put towards writing test scripts though a lot of cases could be added."
1,"The basic features are all up, which is great. Some fine tuning is required with testing the cases like changing or updating passwords should not be allowed to the admin."
1,"Admin user gets an option to delete his account, but thankfully the link doesn't work.
Validations are not in place, start date should always be before end date, etc. 
Partial waitlist gives an error page. For eg, if tour has 4 seat and 6 seat are partially requested.
The uploading of photos to the tours is not implemented."
0,"Yes, but it seems like only one member did the entire project single handed (from the commit), which if true, that member is pure genius :). The commit messegesare clear and use of issue tracker is awesome."
0,I think the coding practices have been improved. The code looks much cleaner and accountable in the second round of review.
1,"The team has tested one model ""users model"" thoroughly including but not limited to checks such as presence of fields, uniqueness of email address."
1,"PROS
1. The bookings for the tour get deleted with the tour
3. The admin account cannot be deleted
5. Bookings and bookmarks get deleted when a user is deleted
CONS
2. When a user is deleted, the next user in a waitlist is not enrolled in a tour
4. Tour can be created with end date earlier than start date"
1,"There are a lot of fixes from round 1 to round 2. Most importantly, i was unable to check few functionalities last round cause of lack of admin account credentials. However, there are still some holes from last round which could be fixed. One cannot see available seats in a tour. Tour status is taken as a string from the agent/admin who can type in anything."
1,The system handles the relations properly as indicated by the script in the models. The itinerary which should have been a many to one relationship with tour is currently a textbox in the tours controller.
0,"The team kept committing changes, including the time period between round 1 and round 2"
1,The code for the most part is written clearly and readable. A user can understand the logic intended by the script on reading the code. The business logic though is still being performed in the controllers. Some functions such as create method of manifest controller is quite long with a lot of logic which could be broken into multiple methods
1,"The team must have missed certain things while testing, like some of the buttons, don't redirect to their respective pages. Many basic functionalities should have been tested more as there are several minor faults a user faces."
1,"Edge cases
- After deleting a tour we are not redirected to a homepage or a user message page as expected. Instead, we are still on the same page without any confirmation message. This could cause confusion to the user.
- The agent is unable to delete the tours created by his own.
 
- The delete button for the tours in the agent module is performing the same operation as view button."
0,"Yes, after looking at the code in Github, it looks readable, elegant and follows the DRY principle. It would be easy for any developer to understand and work on it.
I see that each module handles only one task. Function calls have been made to handle multiple tasks. Also, separate method calls have been used for different requirements.
 
Also, all the names of the variables used were relevant and make sense when we go through the code. I didn't find any issues with coding."
0,"The team was regular in committing the changes to git, Although there were only 53 commits each commit brought a major implementation of functionality to the code.  There were many commits being done after the first round of reviews which suggests that they have worked consistently after the first round of reviews."
0,Yes. Based on the network graph shown in https://github.ncsu.edu/sbasnet2/TourManagement/network.
1,"Design went above the program requirements with some sort of UI kit which looked good and definitely better than plain HTML. However, every action that I needed to take was centered on first navigating through Account->Profile."
0,"The code inside the controllers and views as well as models was readable when I looked at it.Function names followed the standard format, class names were singular instead of plural, erb code in the views was indented."
0,"Yes. In the test model, they test all the controllers. They test the basic function and emails and password validation."
1,"-All the bookings are deleted
-All the information related is deleted
-Can't delete Admin. When I try to delete it, it makes me down one fail file.
-It can be created. When I try to create a tour with start date March 3rd and the deadline on March 1st. It works
-All information related is deleted
-"
1,"-The Admin part. All functions work.
-The Customer part. I couldn't find how to edit my profile. I can give review for the tour that I didn't book. Didn't see waitlist when I book seats more than tour's total seats. The booking and waitlist part is not that clear. 
-The Agent part. Couldn't find how to edit my profile. Can't upload a picture in a tour. Couldn't see waitlist
-Don't have search method
- When I signup, I can see my password."
1,"Yes, the relationship is pretty clear and reasonable. User has many tours, reviews and bookmarks. Tour belongs to user. Reviews belongs to user and tour. Bookmark belongs to user and tour. The only one missing is tour has many reviews. The whole mapping is well organized with a little miss."
0,"The team keeps on working on the project. Not that frequently, but never stop."
1,"-Yes, the code is clean and well structured. But I didn't see many methods except the basic method(create, show, new, destroy) 
-It's great for ""user"", ""customer"", ""bookmark""name. But there are some names like, ""manifests"" ""session"", are not that clear.
-In the controller, I don't think session controller is necessary. Devise gem can be used to generate user. Static_page controller is totally unnecessary. You can just add home page in views."
1,"Bookmarks and Bookings are handled in separate controllers ensuring those tasks are separated. However, there is some logic for creating a booking in manifests_controller.rb that could be moved to the manifest.rb model."
0,"It looks like commits are spread out pretty far. But there was a commit after the first round of reviews, showing that they were still committing changes in round 2."
1,"It doesn't seem like there's a n-to-n association between users and tours. The Manifest model class shows belongs_to :tour and belongs_to :user associations, but neither the User or Tour model have has_many :manifests associations. Both the Bookmark and Review models have belongs_to :tour and :user associations, but the Tour model is missing a has_many association for both Bookmarks and Reviews."
1,"Admin information was added to the README, so I was able to test the Admin functionality.  Able to book and bookmark a tour.  Bookings successfully get added to a waitlist.
When creating a tour, the Itinerary is a bit confusing. There isn't a separate field for State and Country.  When creating a booking, I'm not able to see how many seats are available. I wasn't able to figure out how to edit my user account when logged in as an Agent or Customer. I was able to leave a review for a tour I didn't book."
1,"(1) Associated bookings get deleted when a Tour is deleted. (2) When a customer who has a booking is deleted, the booking(s) get deleted and the next waitlisted customer successfully gets booked for the tour. (3) There is a 'Delete Acount' link when logged in as the Admin, but I was too scared to test it out for fear that I would delete the account. (4) Yes, I was able to create a tour where the start date was before the end date. (6) The README does not describe use cases or edge cases."
0,"Yes, it looks like the User model has been thoroughly tested and multiple controllers have been tested."
0,Yes from the validations and checks implemented at the model and frontend and testing the app I can say that the app was well tested.
1,I do not see any tests.
1,User model looks to be tested but not controller
1,Testing covers almost everything however there is no test to see if the user has the email that is already present in the database.
1,"The team has done rspec testing for the users controller and model. While the unit testing for the existence of fields is covered , the cases where 2 customers may use same email is not tested. However, the validations in the model does indeed ensure this case is handled."
1,"I am abl  to set  to date earlier than from date for a tour.
When deleating a customer all his bookings, bookmarks and other info seems to be deleted. ANd the seats become available for the next person again.
 
No, we cant delete the admin"
0,"The team has handled all the edge cases mentioned. 
They've used dependent destroy clause while creating the model, which handles in deleting the dependent records. For instance, when the user is deleted, all the bookmarks associated with the user is also deleted."
1,"I deleted an agent and the tour created by them should have vanished but it didn't.
I can make a start date after the end date on the tour.
I made a user and they were waitlisted for a tour. I deleted the user and their spot vanished."
1,"Most of the edge cases are handled, The tour can't have end date earlier than the start date. The README.md did not describe how the edge cases are handled. If the users who booked some of the seats are deleted by the admin, the seats he booked are being added back to the tour and the customer details are removed from the tour."
1,"The team has done a good job in handling most of the edge cases. However, the validation for the dates is missing while creating the tours, and therefore one may create tours with end date earlier than the start date. Also, i found that when an admin deletes a user, his/her bookings are deleted, but the wait-listed customers' seats are not confirmed. The README should include these points."
1,"Most of the required functinalities other than sending mail and signup through social media were implemented well, the Ui wan not well built and the navigation was a bit difficult."
1,"The system didnt have features like uploading or deleting a pics / listing customers who have bookmarked a tour / searching using a filter etc during the first review. 
However, those functionalities are now currently working fine.
Cancelling partial tickets did not work. Cancelling a partial tickets is resulting in the entire booking being cancelled."
1,"start date doesn't not have to be before end date.
after sign up you should already be logged in.
There should be password confirmation
I should be able to try and book or waitlist more seats than the total seats."
1,"Appliation was down while round 1reviewing, so for sure team has fixed few things. Few of the basic functionalities are not working. - Search on the start date and end date is coded in equal relation not before and after relation. The query would give results only if the dates match perfectly with the entry in Active Record not range"
0,UI is very good and easy to use. All the functionalities are working very well.
0,They have included most of the has_many and belongs_to for the models where required so I can  say that relationships between tables were well defined and the db seemed optimal without any complications
0,"The team has thought through the DB design and there are multiple migrations through which the final DB design has been created.
All the models define the has_many / belongs_to relationships properly and the same is reflected in the migrations as corresponding foreign keys are generated between the tables."
0,The model handles these relationships.
0,Functionalities are working as expected and relationship are maintained well for the models used
1,The model relationship is very well handled by this projects. There is no model for bookings and bookmarks though.
0,all the relations are well described and implemented.
0,The Database design in terms of relationships amongst them seems to be designed correctly.
0,"The team has been working consistently ever since the start of the project. The contributions seem to be uniform between the team members. 
And Yes, the team seemed to have made changes to the code since the first review and mode commits in round 2."
1,Yes they did. One contributor has more commits than the other.
0,"Yes, Team has worked throughout the period"
0,The team made a lot of changes after the first submission. And it was continuous throughout the project lifecycle.
0,The team has been regular in committing the changes. The messages while committing were very helpful in identifying the changes for each commit.
0,"Yes, the commit history shows the team continued to work through the last week to improve their application. The team did commit changes in round 2."
1,"Tour controller had functions that were long and a bit had to understand but most of the other code were genreated by scaffolding , hence readable and simple."
1,"The team has understood the architecture of MVC well. All the business logics are implemented in the model and the controllers are only used to dispatch data to be rendered in the views. The code is well organized and easy to understand. 
A few comments would have helped in better understanding. However, the method and variables are meaningfully named so the lack of comments didn't affect the understandability."
1,"The method names are accurate and do what they claim to do.
There are nested blocks but they are necessary for functionality."
1,"Ovearll looks clean, few of the possible issues I could find are:- Destroy in the tour is used to destroy tour and also to delete the image from the tour (uses same route and is implemented in the same function)- The user_from_params method from user_controller has variables storing
 redundant data. the values could have been directly saved to 
Clearance.configuration.user_model object rather than saving to email, 
password etc. variables. - The index method in the tour is used for querying search/all tours/waitlist/bookmark/booked tour - No controller corresponding to user_tour model. Most of the work is done by Tour controller.- Unnecessary looping structure in Reviews Controller. Logic could have been implemented using a single branching constraint

# GET /reviews/1/edit
def edit
if current_user.role != ""agent""
else
redirect_to home_url, notice: ""Agents cannot modify reviews""
end
end"
1,"The code is readable but it is a little difficult to understand. For example, the booking part was very confusing. I was unable to understand how the booking was done."
1,"The code is readable, the variable names are all given according to the operations that variable performs. For most of the functions separate methods are written which is a good practice. There are not much comments written to explain the blocks of code. A helper could've been used in the controllers to reduce the number of lines by reducing nested conditional statements."
1,"Application crashes when tried logging in. Used the Credentials provided in the README file, but application keeps crashing. Nor was I able to Sign up. So Couldn't test the features"
0,"Yes, the team kept pushing their changes in round 2."
1,"The code is clearly readable with appropriate use of variable names being easily understood. The code is good example of modularity and makes use of small snippets of code wherever possible. The code is using different methods to do a particular task. Although, the code is not well commented. The methods and functions are named properly and do not use unnecessary long names. There are not too many nested blocks and the code doesn't seem to be redundant."
1,"The code conforms with good rails coding practices. However the business logic can be moved from the controller  to the model for better readability.
The variables are named meaningfully"
1,"The code can be more readable by being consistent in the use of new line between functions and blocks. Apart from readability, the code does a good job at implementing the functionalities."
1,"There seems to be a lot of extra logic in the controller when this should be delegated to the model. For example, you can write many of the functions to determine the validity of tours within the model itself, as well as functionality for adding references to other types of objects. Otherwise, it seems like you've tried to make your code DRY, which is important. Could be dryer by trying to combine the controller functionality of the different user types within one general controller. If you use inheritance, you can reference one table for login so you don't need 3 different views."
1,"The code followed most of the good coding practices for Ruby on Rails, all the modules are well sorted. However there are too many if-else conditions written which might slowdown the website. 
Tip : scaffold can be implemented instead of checking everything manually"
0,This code looks well organized and follows MVC.
0,"They followed the ruby and rails conventions in making the app, they didnt go for any complicated coding approaches."
1,"Yes, the code commits are done from time to time for each feature although could work on the comments while commiting. For example I came across two commits update model and model update which is not very clear as to what the commits were for."
0,The code follows excellent Ruby on Rails practice.
1,"Variable names are clear and concise.
I really liked the copious use of custom flash notices!  This could really help the user when they make mistakes.  For example:
flash[:notice] = ""Cannot edit other customer's booking!""
A few things that I noticed:
In app/controllers/admin_controller.rb, the admin email and password is hard-coded.  I would suggest pre-populating the database with the admin user instead, and checking the log-in credentials against this pre-populated record.
I would suggest adding some more comments into the code to assist a reader of the code in understanding what methods are intended to do.
In app/helpers, there are many files that don't really do anything.  Ideally such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: the same problem probably exists in my own code!
I expected to see more code in app/models.  From my understanding, in an MVC project, the ""M"" should do a lot of the heavy lifting.  I would suggest moving any SQL queries into the applicable model."
1,Location Model has been tested but not controller
1,The team has written tests for the app but they aren't sufficient.
1,"The code in the test/controllers directory appears to be the default auto-generated code(zero tests).
The code in the test/models directory appears to be the default auto-generated code (zero tests).
Could not find any text fixtures in their code."
0,"The location_spec tested that all fields where had valid values could be entered for the Location model. The group did test one controller thoroughly, StaticPagesController."
1,"(1) Tour and booking gets deleted
(2) Waitlisted Customer gets booking
(3) Not from GUI
(4) Yes, No validation on End Date
(5) Bookmarks gets deleted"
1,"Two edge cases I noticed are not working as desired:
1. The price of a tour is allowed to be negative
2. The amount of seats is allowed to be negative
3. While logged in as the admin, I was able to change the name and email of the admin. Not sure if this is an issue or not."
1,The app hasn't been tested for edge cases. Cases such as multiple admins negative price and seats are still present and have not been addressed.
1,Validations are not working for creationof tours. Seats should not be in negetive and start date cannot be after the end date.
1,"(1) What will happen if the admin tries to delete tour that has bookings? Bookings are also deleted (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? customers waitlisted are confirmed(correct behavior)
(3) Can Admin account be deleted? no (correct behavior)
(4) Can a tour have end date earlier than the start date. yes (incorrect behaviour)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list? Bookmarks deleted. (correct Behaviour)."
1,"1) Booking is removed from that user's profile
2) The waitlisted user is booked
3)No
4) Fails in this case. I was able to create a tour with end data earlier than start.
5) Yes, the customer was removed from the interested customer's list."
1,"- No user can see waitlisted bookings. But the functionality is coded and has been removed from UI
- Couple of validations asked were not implemented in round 2."
1,"The basic functionality works very well.
One thing I don't like is that you can't just list all tours. There is the search tours button, but it won't let you just not search anything."
0,There is not a single missing feature in the app!
1,"None of the flaws highlighted in the first round have been fixed by the authors. Moreover, another flaw was discovered where I was able to create multiple administrators."
0,All the basic functionalities are working.
1,"All the functionalities were already implemented in round 1 and there weren't any major issues that needed attention.
Although the tour iternary does not consist of atleast one country and state which still persist and needs to be fixed."
1,"The app still has the issue where the user sometimes doesn't see the ""book"" option for certain tours created by agents."
0,"During the first review, it appeared that photos or destinations could not be added. I was able to upload photo and destinations this time."
0,The code handles all relationships perfectly. This allows for all dependents to be destroyed correctly.
0,The models clearly indicate that cardinality constraints have been taken into account by the author.
0,The team indeed handled most of the mappings in their respective models with correct 1-to-n and n-to-n relationship and as a result all destroy methods worked properly.
1,The agent-tour relationship was not very clear and there were no mapping tables related to that in the schema.
1,I could not find the ERD  model of the database. I'm not sure if the design is set properly.
0,"Yes, Changes were done quite regularly. Based on my/our comments from review 1, I see changes in readme file during round 2."
1,The team only had one commit during Round 2.
1,Yes the team kept submitting changes regularly but did not update any changes after round 2 besides updating the readme.
1,"Though the commits have been consistent, a few changes seem to be commited after the deadline."
1,It appears the team has not may any code changes since February 22.
0,yes the kept pushing the code on github from 15th Feb onwards.
0,"Yes, the graph of contributions on github as well as the commits clearly indicate that the team kept pushing changes throughout the period."
0,It is seen that there were continuous improvements made by the team throughout the project. There are more than 100 commit in master and each team member has a different branch where they got work done.
1,"UI is very nice.  Sometimes when some links like ""show"" or ""edit"" are clicked. It leads to some ruby error page. You can add custom error pages. But it is not in scope  of this project. Overall very good work done on UI side."
0,"The team has tested the a model and controller using rpec, factory girl and capybara."
1,"- Code Quality is pretty good. Follows good naming conventions and can understand what each function is doing when read through. 
- Schema wise, I see a bit of redundancy. For this project ""location"" was not needed to be a model and could have been implemented with Tour.
- If used OAth, by default user is given ""googleuser"" password. As they will be logging in using Google Key, this default password could have been removed or a random value that admin cannot see would have been a good option"
1,"The code seems to be well tested although there are certain attribute validations that need to be checked more thoroughly. For example, I was able to add negative seats when creating a tour. Another example of lack of validation, In case a tour with 100 seats total and 20 booked(thus 80 available) I could book 101 seats in the waitlist but this should not be possible as total possible seats are 100."
1,I do not see test code for models or controllers in their github profile. All the code in test folder is autogenerated using scaffold.
0,"Yes, team has done testing and login module works correctly."
0,"User interface is pretty attractive, intuitive and easy to understand.
Good Job team !!"
1,"The UI is quite impressive.I really like the whole look of the application and how 
The filters option could be placed a bit closer to where you fill the text as it took me a long time to find the filter options.
It would be better if the page could display whether I am logged in right now as an agent or a customer.
The operator field in adding Tours is not explanatory.There are set 4-5 operators which are showing up and I have to chose it mandatory."
1,"The code is reasonably clean and efficient.
One thing is I don't think there needed to be a separate class and controller for Photos, Locations, Waitlist, etc."
0,The code follows excellent ruby practice. The team has followed DRY principle throughout. I found a lot of method calls and definition for all models. The code is very easy to understand and is efficiently implemented.
0,The code is well written and follows the guidelines mentioned above.
1,The dashboard is really good. This is different from others and easy for the admin to manage the website. It's not a big thing but the reviews page has an eye icon and I thought it was 'show' function but it gives an error and 'show' function was the 'info' icon.
1,"The UI is very intuitive and easy to use. The README is a good read which assists a user when he/she may get stuck such as when I used my gmail account for Oauth. However, i was a little confused on how to check the reviews of the tours. I suggest showing the reviews of the tour when you hit ""show"" for a tour."
0,Yes. The interface is easy to use. They have buttons in place for everything. Which is nice.
1,User interface is very nice and intuitive. It would have been great if you could have deployed it on some safer platforms. flazzle is unsecured and I will not prefer to signin google account this platform. But really good job done on UI side.
0,The code is readable and methods contain only code that perform what the names describe.
1,"Yes, it's easy and intuitive but I have a few suggestions and observations. I noticed that I'm already logged in when I opened the link after a day. It's a minor issue, but a suggestion would be to time out the session. Also another minor issue I noticed is that when I logged in as a user and wanted to edit my details in the profile, there's a password prompt that says ""leave blank if you don't want to change it"" but when I left it blank, I get a validation error that password can't be blank. Other than these, the UI is really good."
1,"I believe the overall coding objective was completed successfully! However, a lot of the logic is performed in the controller rather than the models. For instance, the search functionality contained a lot of business logic that was somewhat length. This may have lived better in tour model and just simple make a call to the tour model."
0,"Yes, team has followed all good ruby and rails conventions!"
1,"Variable names are very concise and easy to read and understand.
The code presents an excellent Ruby on Rails practice.
However a few things which could be improved are:
Not able to create the Tour-Throwing the error for InvalidAuthencityToken.
""Show in app"" tab throws out an error.Either it should be removed or do what you suppose it should do.
The admin can't delete the customer review which it should be.It throws out an error ""Customer Review is an admin"".I can't understand this.
As an admin I was not able to look who all have booked a tour.
In tours the Dates show Time as well which I can't edit.
While creating a new Tour,I got the option for Customer Reviews for other tours which I find absurd here.
There is no demarcation of which tour is of which agent.
As an admin I am able to book tickets which should not be the case.Please check this.
 
Agents can't see the who have bookmarked their tours or who have booked."
0,The coding reflects good coding practices with the business logic implemented in the models and the role based authentications in the controllers.
1,"The git code follows majority of the best practices.
The code follows the fat model skinny controller coding paradigm.
The application was appropriately packaged into gems."
0,The code seems to be well written and follows standard Ruby on Rails code practices. The models and controllers have code in them divided equally which is a good sign.
0,The methods are readable and acheive doable functionalities. The naming scheme seems fine and the DRY principles have been followed well.
1,"There were two repos uploaded. I checked the one with more recent commits
In all the code, Ruby and Rails guidelines were followed.  Good Job team...!!!!
You could remove the logic for booking from controller and put it into a model and then call this model in to the controller. 
Rest of the implementation is really good."
0,"Yes, the code on git does follow good ruby on rails practices."
0,"The team has sufficient commits with meaningful commit comments, and over a timespan that is appropriate for this project. There are also plenty of branches and merges, and the github timeline is easily to follow. Github contributions were made on a regular basis."
1,Most of the work is done by one single person
0,Yes! Lots of commits.
0,"Yes, as a team the contributions have been made throughout the project period."
1,"The rspec model does not have enough test cases to fully test the model thoroughly. I would recommend testing the validations and controllers more extensively, and have more test cases to encompass a variety of use cases. Right now, it seems as if the controller only has one"
1,"Very minimal testing is done. Majorly, testing o functionality should be done for better flow"
1,Majority of the code has been thoroughly tested except for validations which need to be tested in further detail. Cases such as ability to enter negative prices or seats may create larger problems in the database as well.
0,"It looks like all of the views were well tested.  In particular, adding a tour works very well.  An agent is able to post details about their tour and make changes.  They can also upload images and remove them.  The agent is able to see all the tours, but they are only able to edit or delete their tour."
0,"Yes, the user controller and model test is implemented."
0,All the controllers and models which are created uptill now are being tested. I truly liked the amount of work and time spent on testing equally for all the minute tasks carried out.
0,Yes they have tested location_spec model and static_pages_controller.
1,"I can see where at least one controller has been tested, but I do not see where at least one model has been tested."
1,It's a little bit hard to find some functions by intuitive. Like when I want to
1,"The UI was confusing as a user because the available tours were not visible upon logging in, and I could only search for tours. As a customer, I was not able to see View Tours.As an agent however, I could see the tours. The only workaround I found was to create a bookmark, then show all bookmarks, pick a tour and show it. Then hitting back showed me a list of all tours."
0,Very intuitive. Very impressive.
1,"When logged in as agent, it is difficult to navigate to the right place to add a tour. But the read me file has a clear description as to what has to be done"
0,"The user interface is simple, intuitive and very easy to use."
0,"The site works very well.  It was easy to create a user and login.  The user is able to see the tours and book them.  The user is able to change their account through settings.  The bookmark page works as well.  When the user is done, the user can logout out of the site, which takes the user directly to the home page.  The administrator credentials work and it is possible to view and delete users."
1,The user interface is quite intuitive. A more detailed readme would anyway be very helpful.
1,"The UI was intuitive most of the time and the README was descriptive. There were some features that weren't obvious. Like, editing the profile name, is under ""Settings"" option. I feel it should be an option under the Profile link."
1,"The overall flow appeared to be mostly ok. For the Tours Show view there seemed to be a lot of links you had to click to get to view photos and destinations of where the tour was going. Also, I could not find the operator information as a user."
0,"The team has done a great job separating controllers, and the code is also very readable as it uses comments throughout and sanity checks as well. The class name also favors convention over configuration, and the use of scaffolding is evident. Overall, the code follows ruby standards pretty well including naming conventions like appending a '?' on methods that return boolean."
1,"Most of commits/work is done by one student (jwarren3). Parameter whitelisting is not used in all the controllers, resulting in applicaton accepting malicious paramters.  Few of the edit functionality doesn't check access. That would mean any body can send the request to that URL and can edit or destroy without having enough rights. You might want to check user_controller.rb and implement access control on major functions that involve some kind of data addition/destruction"
0,This looks very good.  The code appears to be well formatted and in good shape.  The readme file is very detailed and provides useful information about the site.  There are several commits and branches.  It seems the team members have made several contributions.
1,"The code follows good coding practices. The code was also very clean, readable and commented to enhance understandability. It would be better if the ocde was divided into proper modules - like helpers are used for creating methods like user authentication."
0,All the coding conventions were followed and the method names were descriptive of what they actually did.
0,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
The code shows readability and maintainability which is an elegant way to code."
1,I feel the overall flow of the code was in accordance with Rails practices. The tours controller appeared to have quite a bit of logic in it for the search function. I would if this could be moved to the model instead?
0,"The whole team keeps on working all the time. After the first submission, they fixed some bugs and adds test model. There are some braches which makes whole work clean."
1,"1) In this case, the customer booking who booked the tour, gets deleted.
2) I get the following error when I try to make a waitlist for a customer.

We're sorry, but something went wrong.

If you are the application owner check the logs for more information.
3) The admin is not listed in the list of users, hence there is no option to delete the admin.
4) I am able to create tours with end date earlier than the start date. This is not the intended functionality.
5) If the admin deletes the user who has made a bookmark on a tour, then all their bookmarks will get deleted."
0,The code appears to be in good Ruby format and is easy to follow.
1,A few corner cases have not been handled. If the customer is booked a tour the admin can still delete the tour. Also if several ustomers have book marked a tour the admin can delete that tour aas well. Date validations are in place. Most of the corner cases have been covered. ReadME mentions all the edge cases elaborately.
1,"Some edge cases work well. Two that I found out that don't work:
1. Although it says the admin cannot change things, I was able to change the ""role"" to customer. Then because the customer doesn't have admin privileges, I couldn't change it back or see the list of users.
2. It allowed a customer to book twice for the same tour."
0,The project has a basic test for tour_controller and tour model
0,I didn't find any clear functionality that is still failing.
0,"Yes, the project handled most of the 1-to-n and n-to-n relationships."
1,"- Cannot book more number of seats than the total seat. Error ->""Cannot Book and Wait list 60 seats with only 50 total seats in the tour.""    - Idealy, application should handle one user adding more seats- No user can see waitlisted bookings."
1,Yes. but most of the work is done by one single student
0,The controllers handle most of the logic and the models have all of the validation. the code looks pretty good!
1,"As I understand it, Rails coding practices encourage putting practically all business logic into the model.  The logic dealing with bookings (model name 'book') and availability of seats, etc. was all in the 'book' controller when ideally it would have been in the book model instead.  In general, the models contained mostly just validation rules, like minimum length of fields, etc."
0,"Their code followed all of the ""good Ruby and Rails coding practices"" decisions. Code is placed into the proper areas, it is easy to read and the commit messages only make it that much better."
1,"The README does not handle how the system handles edge cases.
1) The admin can delete any tour. The corresponding bookings are being deleted for the customer.
2) The functionality to delete a user does not exist to test this edge case.
3) No.
4) This has been handled while creating a tour.
5) The functionality to delete a user by the admin, does not exist to test this edge case."
1,"The code does follow good ruby and rails coding practices. One of the good practice followed would be to focus more on the technology rather than facing on the user interface, but the team has kept both of these in mind and implemented everything in a correct manner. The code shows readability and maintainability which is an elegant way to code. Indentation is also an important practice which has been carried out perfectly during coding. The only minor backlog felt according to me was committing the code. The commits in the code have been made without proper commit messages. This can sometimes cause difficulty in tracking the changes in the code."
1,"When I book for more seats than are available in the tour, I am correctly redirected to the page where I will have to select how many seats I wish to book and waitlist. It is also prepopulated with the correct break up of the seats. But when I try to book it, I run into an error which is totally unwarranted.
Even though the README states this, the search functionality works only on one parameter at a time, there could have been a workaround for that. What you can do is that check that a filter is not empty, and in the model method find the set of records that apply conform to that filter. Now you can check if the next filter has been filled and apply the find on the result of your earlier find. Do this for everything you need to search on.
Waitlist size is not visible to everyone.
The problems that I had run into in the first round have not been resolved in the second round."
1,"Good use of Ruby Syntax and coding conventions.
Business logic should be in Model. Eg. Booking and wait-listing logic should be Booking.rb, its given in controller. Instead of this, you can create a model method and then call it from controller."
1,"For the most part, I found the code easy to understand.
Variable names were clear and concise.
A few things I noticed:
Many of the files in app/helpers don't really do anything.  Ideally, such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: such ""dead code"" is probably present in my project as well!
There were a few places that had non-obvious code but were lacking in code comments that might help the reader, e.g. app/helpers/application_helper.rb.  I would suggest adding a comment above each method that briefly describes what that method is meant to do.
The email validation regex was duplicated 3 places in the code.  I would suggest centralizing this, perhaps in a helper."
0,"I have been able to see the practices in the files as far as I've been through, and they all seem really good."
1,"It covers all the feature. However, I could not login with pre configured accounts."
0,This system has the test for customer controller and model
1,"Team has been regularly pushing their code. However, one of the team members did not seem consistent in commits."
1,The team has tested the customer controller and model. They have covered all the cases in the model and the controller.
0,"YEs, the code is readable and understandable."
1,No changes in the tests since the original submission.  The customer test does verify that e-mail address is unique.
1,"Good Work:
Team has made the repo public and have fixed most of the issues.
Still I am not able to upload the image and its not showing anywhere (showing as just a thumbnail icon)
But issues regarding search and tour were fixed. Good work team !!!"
1,They test MOST of the stuff in the model file and everything in the controller
1,"Scope of Improvement:
Overall code quality is good with below improvements needed:
1. In Booking Controller, I see some logic handling. You can keep entire logic in Model (Tough you have kept almost, but not 100%) and return some value Eg. some inter value or string and use this return value to show notice or redirect to another page
2. Some of the methods within Models are bigger. like Scope method in Tour_search.rb. Such methods can be divided into smaller methods.
But overall good work done."
1,"Yes, the team has tested the customer controller and model. The testing has been carried out for basic functionalities and not carried out thoroughly. The testing is carried out for a name which shouldn't be null and exist. An email address which should be in a proper format and unique too. Also testing for the password is carried out which has a validation set for a 6 character limit."
0,"Good Work:
Team has thoroughly tested one controller and model. Good work is done on this front."
1,"Commits are on a regular interval with meaningful commit messages. There were only 3 branches in total, and it would be more effective if there were branches (possibly based on features) so that the flow is clear. The team posted their code throughout the project period and made use of issues on Github."
1,The testing for the tour model is pretty thorough and involves numerous test cases that validate the model. The controller test were also meaningful and had several cases. Some of the fields in the application could be tested more (such as specifying more seats than available in the waitlist page leads to a negative available seats).
0,The tests done are completely thought out and are looking towards a lot of edge cases and exceptions.
1,The README file was extremely well explained and depicted everything implemented in a very informative manner. The application was user friendly and easy to navigate around. The UI could be slightly improved by implementing some bootstrap but the functionality was working perfectly so I guess that's okay.
1,Pretty intuitive and easy to use. Can't give it perfect because the stacked black text and links sometimes gets a bit confusing.
1,Tour Model is testing pretty well. No particular tests were found for Controller.
1,"Has used basic GUI, that is neat and clean. Pretty easy to understand and flow eases out. Landing page is a bit cluttered on the top corner. Can you bootstrap and CSS to elevate UI/UX. Flow is elgantly constructed, can use with ease.
 
Usability: While canceling tour, popup has 2 options OK and Cancel.  It's a bit confusing because pressing ""cancel"" doesn't cancel the tour rather cancels the pop up. I understand that this is how pop up works, would be great if osme clear words are used."
1,"The team has thoroughly tested the model.
The controller need some more work."
1,"The interface is not as smooth as you would like it to be but since this is not a UI course,  all the operations are where you would expect and extremely intuitive. i did not have any difficulty navigating the website."
1,"Team has pretty well ""tested"" tours and customer controller and models. 
Minute things were missed (explained in later section), which can be covered up quite quick."
1,"No. The customer can't destroy the tour. keeps showing as same number of seats. 
When I reserve seats over n>n+10, it keeps looping back to the same page and dialogue"
1,Use of code in model is sufficient and carries validations. But you did violated and edge case with devise implementation. Admin can delete himself. Check the other team which they implemented.
1,Not able to check this as GitHub link is not accessible
0,The Signup and Signin module is working great. The validations done are nice and upto real world standards
1,"I really like the link placements and the use of "" | "" to separate the links.
You could remove the links for functionalities that you are not intend to provide like ""forgot password"" or May be its broken
Also if you could rename some link texts, it would enhance the user experience.
Eg. Customers with Bookmarks of my Tours -> My Bookmarks
User Page -> Profile or User ,   Tours Page -> Tours"
1,GitHub repo is not accessible. May be it is not a public repo. That is the reason admin credentials are not accessible.
0,"The team made commitss and kept pushing them throught the  the project period after the first submission, they were nearly regular in their commits."
1,"1) Bookings controller has create and update methods that doing multiple tasks and are really long.
2) Naming looks fine
3) Bookings controller has really long methods."
0,"The code is understandable and easy to follow. Most of the functionalities have been implemented correctly. The logic is mostly written in the model, which is the right way to do. There is no bad naming in the project."
0,"They have tested all features in models- bookings, bookmarks, waitlist, reviews,locations"
1,The tests are still not updated during round 2.
1,There are no model tests. I looked at the bookings_controller_test and it looks like the auto-generated one. If they added to the test it doesn't appear like they added anything to test the added functionality that was also put into bookings_controller.
1,"Testing of users part was complete with all edge cases working properly. But there were options to change the user type with within each user. Also,
admin account was allowed to be deleted though the validation for admin account works even after deletion."
1,I don't see the test functionality implemented.
1,Most of the edge cases seem to work. I found that any customer can review a tour and not just the ones who have attended the trip. Also a tour can have a start date later than an end date
1,"The dependancies seem to be handled in most cases. 
Problem with bookings: If we book a tour and add partial waitlist and then update the seats to include more number of seats than the booked seats, then the seats get updated in the bookings table. So if there are 0 seats available and if we update an existing booking to more number of seats, then the booking is successfully updated. 
If customer is deleted, all his related tours are deleted and similarly other dependancies are also handled to my knowledge."
1,"1. Passed. Booking is deleted for user that has booked
2.  Failed. It doesn't updated the waitlist of waiting customers.
3) Passed. No it can't be deleted.
4) Failed. It let me create a tour with end date earlier than start.
5) Failed. Can't tell since the bookmark doesn't display the customer details."
1,"The admin login seems to be fixed as I can now log in as an admin. Creating a tour with empty field still results in an error, and I was not able to create a tour with valid format without getting errors (possibly due to the format of the data fields). The new tour creation would be easier if the date was a drop down menu. Admin cannot see accounts."
1,"From what i can see in the admin login i cannot see any links to see reviews or see bookings. The search functionality was also not working.Validations are not properly done and i can see many broken links because of no validations being done.
If i book a tour i cannot see that in my booked tours link for the first time. But when i try it again it works, could be some sort of glitch."
1,"Yes most of the basic functionalities work. It would have been perfect if the search functionality had worked too. I was not able to get the correct results. while entering a tour name that already exists, i still got no positive search results."
1,"I listed the issues I had below. I put my comments in CAPS to differentiate. Sorry about the yelling.
======================================
I was able to change the admin password.
NOT FIXED
======================================
There are a number of places where I get errors. After the third one, I gave up reviewing. I suggest you go through the app and either fix them or document them. I was able to get up to deleting reviews but when I went to edit the tour (assuming that was where I would add a review since there's nothing in the README) I got another error. The below issues are also valid.
ABLE TO EDIT TOUR.
CREATED TOUR WITHOUT LOCATION.
CREATED REVIEW
CREATED BOOKMARK
CREATED BOOKING
THE INTERFACE WHEN WORKING WITH TOURS IS A LITTLE FUNKY. I ONLY GET TOUR_IDs AND USER_IDs, NOT THE ACTUAL NAMES.
===============================================
While trying to create a user, the boxes say that the Email and Password are optional, but when I try to save the user I get an error that they can't be blank.
NOT FIXED
===============================================
When I change an existing user from agent to customer I get an application error. It was user two@two.com.
NOT FIXED
===============================================
I couldn't enter the cost as a decimal number and there's nothing in the README about it.
NOT FIXED
===============================================
When I try to save something all boxes are listed as optional, but are clearly not.
NOT FIXED
================================================
For tours, what's the difference between seats and available seats? Without a README it's impossible for me to figure out.
NOT FIXED"
1,"It was good, but there were problems with many functionalities.

There was no navigation for admin to reach the options provided for agent and customer
Admin account UI had options for switching account to agent or customer, but I felt a user shouldn't be allowed to change his type of account once created
Editing of a particular tour was not redirected to the right page
From the customer side, during a new booking, the waitlist functionality had problems. I tried to check the available waitlist options, but it showed ""OOPS something went wrong"" when I gave a large number to check with partial waitlist option

I could realize from the code that all functionalities are being considered and handled. So, I think navigation was not implemented in an efficient way."
1,"The system performs the basic functions.  The reviews can be exploited I feel, as all users are able to write reviews(even if they have not completed the tour). The status of the tour is also not implemented."
1,"Yes, a lot of issues since round 1 were fixed. 1)Bookmarks don't show the customers name or email. 
2)Admin cannot view or update users
3) The edit feature seems to be broken in most cases when I log in as an agent or an admin."
0,The logic and relationships are clear and proper.
1,"There tended to be a flurry of commits during the project, all by the same person."
1,There is only one contributor for the project. It would have been nice to see more commits from other members. But minimal changes made after 1st review.
1,"One thing I noticed is that the tours controller contains code that interfaces with the database. I think that the SQL commands should belong in the models with a separate function so that the code between models and controllers is isolated. Similar situating in Bookings controller. Booking controller also has a lot of conditions that have very similar code, and can be DRYed out a bit more. The methods may also be smaller once similar functions are put into a method."
0,They have written their code with good practices and they have followed proper ruby guidelines. The controller and model code has been written well
0,The team uses clean ruby practice. The code is easy to read and understand.
0,The code looks neat and each function is named properly.
1,"Bookings_controller is huge. You should be putting most of that in the model.
Tours_controller has a big if-else statement. One way to get rid of a lot of that logic would be to use a DateTime object, rather than a string."
0,"The code seems to be readable and the naming convention seems standard. 1) The tasks also seem to be handled in separate functions. 2) I couldn't find bad naming in the project. 3) There are no unnecessary complications in the code, it all seems pretty straightforward."
1,"Overall, the commit history documents changes made throughout the project period and I can see one pull request as well as branch. I would recommending making more branches as per feature and merging it to master so it is easier to see changes throughout the project period."
0,they have done 30 commits
0,Works than other teams but a lot of fix
0,The team have been kept pushing code.
0,I cannot fill this now
1,There seems to be contribution to the repository from only one member of the team who has updated git properly when the changes were added to the app. The others could also should feel free to push the functionalities added by them so that they can also get to work with a version control system.
0,Regular commits were made by the team.
1,I wasn't able to locate tests for the model or controller other than the autogenerated tests.
1,"I couldn't find a model test. It looked like the controller tests were simply the system generated one. The README doesn't say anything about the tests so without downloading, etc. I would have no way to ascertain if tests were even run."
1,Used unittest/functional instead of rspec. Please do testing with roles rather than just GETs. No models tested.
1,"Login and signup were working perfectly, but logic was implemented in views.
Bookmarks controller and model was working perfect"
1,The testing functionality seems to have not been implemented yet.
1,"The application is deployed on Heroku, and it is overall fairly intuitive. Readme could be more descriptive in terms of which field we need to fill in while booking a tour and making an account. Waitlist and Booking steps would also be beneficial as I was not able to do either. On the flip side, the UI is pretty good and looks modern. Sign up page is also simple and effective. Profile edit feature is a great and easy to update as well."
0,The UI is easy to traverse
1,The user interface looks good. The only recommendation I have is to put some description on README file.
1,"After initially registering with the system, I'm immediately taken to a screen to update my profile. But, I just registered. I would've expected to be taken to a screen to interact with the system.
 
Also, while I really like the design of the opening page, unfortunately, the ""Welcome to SAS"" header partially masks my choices."
1,Meah. Missing. I have added in additional comments
1,"Yes, it was deployed and working.

User interface was very attractive and advanced. But, I would suggest including more information on readme, because it was complex and difficult for me initially to figure it out where I should find the options available. For eg ""options are provided at the top"", ""for these options go here"" in readme might help
No, readme file didn't describe anything about the flow. It just provided with the username and password for the admin"
1,"The interface was well designed, and very easy to understand. The team have taken care in making the UI visually interesting. But sign in with google seemed to just be dysfunctional and bookings by customers was also absent but other than that the UI was done well. Also the given admin details seems to not work for me when I try it out, so I was not able to check the admin functions."
1,"The UI looks appealing, but the responses to user interactions are vague Example:When the customer creates a new booking, it says new booking created, but doesn't show up in my bookings. README doesn't describe much except for the admin credentials and the link to the app."
1,"One improvement you can make is isolate the SQL code to the models by making a function in the models, and including the filters such as the search in Tourscontroller. It is good practice to put the database code in models rather than the controller itself. Overall, DRY principle seems to be followed, and the code is easy to follow."
0,it follows good practices
0,The code is neat. The design is clear.
1,ToursController has a huge if statement in it. There has to be a more better way to do this. Maybe take advantage of DateTime class instead of using strings.
1,yes. Add more methods in your model though
1,"It has followed pretty good practices, but felt some of the things could be refactored

Tours controller is clumsy. 'delete image' could've been handled in a controller which handles rest of the image functions.
'my tour' and 'set tour' and similar functions could've been added to helpers instead of controllers
Regarding the models, you can add validations here to check the fields before getting stored in the database. I can see that you have handled them in logic but it might be easier
I felt waitlist need not be that heavy because it is needed only for updating the booking. It can be added inside bookings controller itself
Regarding the views, so many validations and operations are preformed in views. For eg, validating the minimum length of the password. It is better to add validations in models and use views for rendering.

I can see that you have done a lot of work, but as a peer seeing the code for the first time it took a while to get used to the flow"
1,"The code seems to be well written. The structure of the controllers was easy to follow and the models also had all the required attributes. However, the booking functionality seems to be absent."
0,"I did not find any such issue during the initial review period, and there was nothing to complain about then or now as their project was already almost complete back then."
0,"The team had a consistent amount of work done in the beginning, and seemed to have completed the entire project before the first deadline itself."
0,"There was no such issue, the code was perfectly in sync with ruby object oriented guidelines etc."
1,The validations seems to be fairly in check. Although the testing could have been more robust.
1,"When I removed an agent, the tour for that agent was not deleted. Instead the agent's name from the tour just went away and the tour had no agent then. This was something weird. Although, when I deleted a customer, everything about that customer including bookings and reviews went away."
0,The mappings seems to be on point for all the relationships.
0,Yes. It seems that the team kept up with the work fairly throughout the time of the project.
0,Yes. Most of the coding practices for Ruby on Rails seems to be followed in the code. Their routes.rb is just so simple. Just 3 routes. They used all the predefined routes which is awesome!
0,Tests are thoroughly done using RSpec for the locations controller and bookmarks model.
1,Few of the edge cases are not implemented. When customers are bookmarked or booked in a tour admin is still able to delete the tour. Validations for date are in place. The ReadMe is very elaborate and handles all the corner cases. Also I appreciate how the known bugs were mentioned. ReadMe was extremely well written.
0,The basic functionality works perfectly fine. Most of the features had been completed in the round 1. Bugs were fixed in round 2.
0,The team has been commiting changes in the round 2 and throughout the project. Commits were made from time to time and changes were being well commented and pushed to github properly.
0,The README.mdfile sets an example on how to document a working code and software. They have provided each and every detail required for an user of the web app.  The validations are in place. The edge cases have been tested and give proper errors when and where required. The waitlist and booking manifesto works perfectly.
0,They had implemented this correctly from the first round of review itself.
0,The team member kept submitting changes after the second round. They have been consistent and also the fact that both members have contributed toward writing the README.md is appreciated.
0,Code quality is exellent. The members have shown innate knowledge of Ruby practices and implementation basics. I don't find any bad namig schemes. The code is readable and understandable.
1,There are many tests to test different models and controllers. The only thing I'd like to point out is there should be one model and one controller thoroughly tested.
0,The program worked fine with the edge-cases  I came up with.
0,"From what I tested, the program worked with no problem."
0,The relationships and logic are looking good.
0,"The code looks clean and readable, functions are organized."
1,"All functionalities work as expected and as documented in the README. During the first review, I have encounter some difficulties in creating Tours by Agent and Admin. However, after difficulties were resolved via short conversation with the owner of the App, I was able to perform all required functionalities. Whenever I tried to create a Tour, it could not pick up the itinerary from the drop-down boxes and creation was failing due to missing itinerary. It turned out to be that all itineraries must be created prior creating a Tour.
I let the application owners know about this issue and recommend to resolve such dependency by stating that ""we should not expect from graders/users to resolve such dependencies. We need to provide them with the app that could be easily used"". This is the main issue I found within the app. There are also few minor things I still would like to point out as it remained from the first review period:
1. As Admin/Agent/Customer I want to edit my profile. Profile means not only my name and role type, but also email and password. I am unable to do so for any type of the user.
2. As Agent I want to view all the customers booked for any tours listed by me (their profile details except password). I can see Booking information and Guests' names along with how many seats each guest booked. But I do not see Customers' emails which means their profile (except password).
3. As Agent I want to view all the customers interested in any tours listed by me (their profile details except password). As it's pointed out above in (3), I can see Bookmarks information and Customers' names, but page does not contain Customers' full profile (email is missing).
4. As Customer I want to submit review for the Tour that I have taken. I see that it is possible, but I'd have to wait until the Tour is Completed (past event). Since Agent may not create new or update a Tour to be in the past, it is not easy to verify Review functionality."
1,"The system properly handles all relationships among the tables. No obvious problems our found. All relationship data is found in the models files. For example,
User has many reviews, listings (for agent), bookmarks (for customers)m bookings, waitlists, tour (through listings, bookmarks, bookings, waitlists)
Tour has many reviews, photos, visits, bookmarks, bookings, waitlists, listings, starts_ats and etc.
I see that some tables in the system are unnecessary, such as starts_at. Since each tour has its own starting date and starting location, this relations is 1-to-1 and could be stored within Tour table. However, the team has chosen to do it different way. Give full credit since no obvious DB relationship errors are found."
0,"Yes, team (all members of the team) kept pushing their work throughout the entire period of time, including in the round 2 period.
The repo contains 454 commits and 3 branches. There are multiple commits starting from Feb 24 through Feb 28, which happened during the round 2 period. The team did very well in terms of maintaining the code, fixing bugs and pushing their code on regular basis. Great amount of work has be done throughout these commits."
1,"The code is clean and readable. Each method in the code is very well documented and commented, providing in some places references to different resources (e.g. open-stack and etc). The comments for each method describe in details how method works and what exactly it does.
Each method in the source code handles exactly one task and I was not able to find a code snippet where method would perform more than one designated task.
For example, adding the customer to the tours's interest customers is completed within single method call ""create"" in the app/controllers/bookmarks_controller.rb
All variables naming are good and reflect what they actually are used for.  For example, in the /app/models/review.rb there is a loop iterates over each entry in the Review table. Hence, each entry team named as ""review"", which reflects the entry in the table. There was one instance where name of a variable could be improved. In the /app/models/listing.rb, team used ""matching_user_id"" and ""matching_user_name"". Probably could be used simply as ""user_id"" and ""user_name"".
Some minor coding problems:
Looking at the controllers files, I've noticed that there are a lot of ""if/elsif/else"" statements, almost at every file. Probably, it is good idea to avoid bulks of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and should not contain any logic. Refactoring the code would fix this and may be bringing some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of ""if/else"" statements would be good practice. However, overall the code looks very clean and this is very minor thing to notice."
0,"Yes, at least one model and one controller are thoroughly tested (and then some)."
0,"Yes, I didn't find any missing features in the first round and the functionalities still exist."
0,"Yes, the DB design complies with normalization standards and there are appropriate associations defined in the models to handle 1-to-n and n-to-n relationships."
0,Code is very clean and readable.  Comments are very thorough.  Bookings and Bookmarks are handled in separate controllers ensuring that those tasks are separated from one another.  Method and variable names are descriptive and appropriate.  Methods are of appropriate length and handle one task.
0,"Their project handles the edge cases well, and their README explains how they tested their edge cases."
0,I did not find any major problems in the first round. I believe all the functionality is working for this project!
1,"It is extremely simple and straightforward, and I had no issues in testing out the features at all.
 
There is one thing I could suggest if I may, that the search fields were at the very bottom of the tours page. At first, there were a lot of tours and I did not realize that was where the search was, a better positioning would be a little nice. A user might not want to scroll through an entire list of tours to eventually reach the search bar."
0,There have been really strict and accurate implementations of the naming conventions.
1,tested but not thoroughly
0,perfect RR practics!
0,There are a lot of commits from the team. There are 3 branches as well with a lot of commits in them throughout the time. So the team did great work and used all the time they had!
0,Yes. they have used Heroku to deploy their application.
0,The code seems nicely written. Follows good Ruby practices. Evenly distributed code between controllers and models.
0,The team has thoroughly tested the locations controller and bookmark model using rspec.
0,The README file was extremely well explained and depicted everything implemented in a very informative manner. The application was user friendly and easy to navigate around.
0,The information posted on Git looks good.  The file structure appears to be well organized and the code looks very clean.  The project has several commits with comments and two branches. The comments were well structured.
1,"I l ike the way the team has listed down the known bugs, it helps both the user and the developers. But a more thorough tester is required. The edit booking of tours for all user is not working accordingly (I think)."
0,"Yes, and it also has a well written README file."
0,"Yes, the code follows good Ruby and Rails coding practices. I also like how the helpers module is not underused."
0,There are many commits overtime.
1,"There are some test cases added to model tests and controller tests. For model tests, I think there should be more tests to thoroughly test the functionality. I would say the controller tests are good."
0,The interface looks straight forward. It is good to have all the related links listed.
0,The code looks very neat. Design seems all good to me.
0,"EDIT: Yes, as in the first review period. There are already 450 commits. Great amount of work has be done throughout these commits. 361 commits on the DebugBranch.
All three members of the team has done and pushed their work.
As of February 24-th (first review):
There are 440 commits on the master branch and 3 branches. All 3 team members contributed  to the project. Mainly all commits are done by Aurora and George.
Good job and it is easy to see involvement of the entire team (oppose to my team)."
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Avoid bulk of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and contain no logic whatsoever.
2. Keep all the logic in the Model.
3. app/controllers/tour_controller.rb is a little over-extensive, which makes it a bit complex. May be consider refactoring it. May be bring some of the methods out of the file, or create additional helper or even new model classes.
4. Model looks clean and with enough comments in it. I've noticed it has a way too many relationships with other tables. But this is your team's design, nothing can be done to improve it."
1,"User interface is intuitive and the README is very well documented.  Only recommendation might be to place the Bookmark button next to the Book button when tours are listed, but it's not a big deal."
0,They made commits almost daily throughout the project period.
0,It looks like you did a good amount of testing.
0,"Yes, the UI is intuitive."
0,It follows good coding practices.
0,I see the user model is tested and controller tests are up.
0,The code looks good to me. The functions are named properly.
0,There are commits during round 2.
0,The relationships are mapped correctly.
1,"Yes, the customer controller has been tested and the edge testcases have been taken care of.
But, after using the gmail login, the user is logged in as a customer, however after logging in as a customer and then booking a particular tour, and then I was able to edit my account from a customer to been an agent and then I was able to modify tours, this is a bug in the application"
1,"(1) What will happen if the admin tries to delete tour that has bookings? 
-After booking a tour as a customer and then logging back as admin and deleting that particular tour, I faced an error page which said ""
We're sorry, but something went wrong.
2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour? 
-After deleting the customer, the list of the booked customer for that tour is updated and the previous customer is removed from the list and the waitlist customer is given the seat.
(3) Can Admin account be deleted?
-NO, the admin user Id cannot be seen in the user's list, so it can neither be edited or destroyed.
(4) Can a tour have end date earlier than the start date?
-NO, this edge test case has been taken care of.
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
-the customer name is removed from the list of that particular time and the waitlist is updated as well."
0,The database table is created properly and the dependencies are taken care of.
0,"They thoroughly test the user model and the controllers have tests in all of them. I'm assuming that these are the default generated test cases, so I've given 4/5."
1,"1) successfully deletes.
2) The waitlisted customers get moved into the tour.
3) cannot see the admin account anywhere or a delete button so deletion is not possible.
4) Start date must be before end date.
5) They get removed from the tour they bookmarked.
6) README does not explain edge cases."
0,"The team was consistent with updating their projects, we can see updates ranging from 10 days to 3 days ago for the day the reviews are due. Very nice to see work flow like this."
0,It seems everything is working very smoothly. I believe they thoroughly tested all of the models!
1,"The system crashes if the admin tries to delete a tour that has bookings.Because of this I am not able to check the case if the admin deletes an agent then what happens to the customers who have bookmarked/booked tours of this agent.
If a user is deleted who has bookmarked/booked tour and then if the user is deleted,list of bookmarked users/booked users option is crashing in the admin profile.After this now I am not able to delete the customer logged in as admin.
As an admin I am not able to change the password of the agent."
0,Team has done tests.
0,Team did a lot of commits in round 2.
1,"I deleted a user and they had some bookings and those were not removed.
When a agent is deleted their tours do not vanish
There are validations for start date and end date."
0,The code is thoroughly tested
0,The team kept committing changes regularly and they also made changes in round 2.
0,The code is well written and there is no bad naming in the code.
1,Logging in was difficult. You had create a role in which you wanted to sign up for. Then you would have to log in and select the corresponding state of the user you are logging in as.
1,"Sign up has been implemented without password verification I would suggest making use of password confirmation.
A customer is not able to edit his profile or delete the account. Either the deployed project is not working or links are broken. For delete, links make use of button for making functionality work.
While listing a tour you have provided a text box as status and because of that,[ I was not able to list a tour since it always threw an error for invalid parameters. I would recommend the use of drop down for this thing.
Searching and booking a tour functionality isn't yet covered by the project deployed.
Since booking hasn't been implemented wait list and all also needs to be done."
0,The team did a really good job of phasing commits throughout the timeline of the project!
0,There are many commits throughout the project period.
1,Neither the models nor the controllers is tested
0,"The code looks neat, and the design looks good too."
0,The interface looks pretty clean. It is also easy to use.
0,"MVC Architcture is followed.
The code is maintainable and readable."
0,"They started a bit after the initial start date, however there were multiple commits continuously after the initial one. It was nice to see the project get improved as time went on rather than stale for multiple days."
1,"It is very easy to work, however when I went to edit my user page and decided against updating it, I pressed the back button. Instead of going to the home page, I was sent to this page with a list of all the users <https://i.imgur.com/LDm2Hot.png>. Luckily, when pressing edit or destroy on the users, it took me to a page that didn't exist, however I noticed when going there while on the admin account it also didn't took me to the page that didn't exist. One thing I noticed was while creating tours, there's a ""pickup"" option, I'm not sure what that means. Also, why is available seats one of the things that the tour creator gets to choose from? It should just be total seats minus the number of seats signed up for."
0,"They followed the ""good Ruby and Rails coding practices"" guidelines excellently. There was no repeated code, it looked clean much like coding poetry, and commit logs were simple yet informative."
0,"Yes, I see many periodic pushes of their changes and seemingly from all three users."
1,"Very intuitive and easy to use.
However, I logged in as a customer and when I listed all users, I was shown 'customer = false' 'agent = true'.
Also, I went to book a tour, entered 3 for number of seats, and it gave the error ""Tour must exist"".
Then back goes to a page where your only option is New booking... and that link is dead. So you get trapped with no proper back button."
0,Yes the progressive work could be seen through the whole period.
1,I could not find the tests.
0,"The styling of the application is quite impressive and very clear and friendly to navigate around.
I really like the navigation with Home and Logout buttons present wherever required."
1,"The whole application follows good Ruby on Rails coding practices.
However there are some problems here and there.
The admin should be able to edit his/her profile but the option you provided asks to select for Customer/Agent.I could not understand the need for it here when I am just editing the profile as an admin.
The admin has an option to show interest in a tour but that link takes admin to Bookmarked Users/Bookmarks which is empty.Could not get hold of this thing whats happening.
As a customer I should not be able to add a tour but your application gives me that privilege.Need to check on this.
Listing of the tour does not show me the available and booked seats just the total seats is shown which should not be the case.I am not able to book the tour.An error ""Tour must exist"" always pops up.Also there is a dead lock here.After I get this error I only have option to go Back and this takes me to a page for New booking which I felt a little lost.The New booking option is not taking me to anywhere.
The READ-ME file could have been more explanatory."
0,The commits where not all at once they are frequently happening.
1,"From what I have seen not one model and controller has been completely implemented, like the the models for the agent and customer apparently everything about logging in and creating new user is working fine apart from the users are unable delete their profiles."
1,"Interface is easy to use, but could be be better, One of the changes I felt like needed is giving a back button in all of these view pages in order to direct them back to the previous page would have been nice."
0,"Flow of the code looks good, for what that has been implemented."
0,The basic functionalities have been working from review round .1. It's time to delve into edge cases.
0,There are commits in round two.
0,"All Edge cases were fully tested and no problems were found within following scenarios:
1. Admin deletes tour that has bookings: All corresponding bookings for booked customers are also removed. Agent does not have this tour listed any longer. It appears as tour never existed. Passed!
2. User is deleted who was enrolled for a tour and there are customers wait listed for the same tour: All users who had seats in the waitlist < available seats of the tour were moved from the wait list into the booking with requested number of seats. Works as expected. Passed!
3. Admin account cannot be deleted. Passed!
4. No, tour cannot have end date earlier than the start date. It will prompt the user to re-enter conflicting dates (shows as 2 errors: start date must be before or equal to end date and end date must be after or equal to start date). Passed!
5. If Admin deletes a customer who had bookmarked several tours: Customer and his/her bookmarks are removed from the list of bookmarked customers for corresponding tours. Passed!
6. If Admin deletes agent that had listed tours: Tour remained in the system and customers may book this tour. Contact information or Agent left as blank. Passed!
README contains some edge-cases scenarios."
0,"I see that per requirements team has thoroughly tested locations controller and the bookmarks mode using RSpec. RSpec specifications were found in the spec/controllers and spec/models directories for locations and bookmarks, respectively. The team used simplecov gem to assess the coverage of the modules (can see in the Gemfile)."
1,"They have not thoroughly implemented testing.  In ""Test Agent"" they have tested the agent model if the validations for creating user was done correctly. Could not find tests for controller."
1,"According to the README file, the team thoroughly and successfully tested one model agent_test.rb module. However, team did not use RSpec Rails to thoroughly test at least one controller.
Moreover, /test/models/agent_test.rb contains only 3 tests: ""should not save user without email"", ""should not save user with invalid email"", and ""should not save user with password less than 8 chars"". These are all meaningful tests and have potential to fail.  However, 3 tests cannot thoroughly test one module. It must contain other possible ""good case"" scenarios.
Since model is tested with some limits and not thoroughly, and no controller is thoroughly tested, I give only 2/5 points."
1,I do not believe that the team has thoroughly tested any model or controller. The code for testing is the one that was automatically generated by the application. I did find some decent testing for test/models/agent_test.rb but I do not believe that it is thorough as it lacks several test cases.
1,"The code in the test/controllers directory appears to be the default auto-generated code.
The code in the test/models directory appears to be the default auto-generated code, with the exception of test/models/agent_test.rb.  This file has 3 tests.  However I'm not sure that they are as meaningful as they could be.  For example, the test ""should not save user without email"" also does not provide a password - so this test could pass even if the system didn't correctly detect a missing email.  This model test does not test validations for email uniqueness, name presence, or password presence.
I did not see any other model or controller test directory."
0,"At least one controller has been tested fully. At least or model has been tested fully, Agent."
1,"Majority of the functionalities work as per the requirement. It would have been perfect if the following had worked too: 
The search for tour with respect to date does not seem to work.
The app allows for a tour to be created with a start date later than the end date"
1,"All given Edge cases were tested and there were problems found running following scenarios: 
1. Admin deletes tour that has bookings: All corresponding bookings for booked customers are also removed. Agent does not have this tour listed any longer and see no customers that previously booked this tour. The system behaves properly and no issues observed. Passed!
2. User is deleted who was enrolled for a tour and there are customers wait listed for the same tour: None of the customers who wait listed in the same tour were moved from wait list into booked. I do not think deleting customer actually free up the seats that customer booked. For example, As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it gave me an error: ""We're sorry, but something went wrong"". However, in the bookings for customer3, it shows that it place that customer3 into wait list. After that I completely removed the Customer1 from the system by Admin user (that customer had 5 seats reserved for the Tour). Hence, I expect customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. I triple checked this scenario and it fails for every time. Hence, Failed!
3. Admin account cannot be deleted. Passed! However, Admin account credentials are edited and could easily be jeopardized.
4. Yes, tour can have end date earlier than the start date. Failed: As Agent I can create a tour that has end date earlier than the start date. No validation is performed correctly.
5. If Admin deletes a customer who had bookmarked several tours: Customer and his/her bookmarks are removed from the list of bookmarked customers for corresponding tours. Works as expected. Passed!
6. If Admin deletes agent that had listed tours: The tours are removed from the list of tours and Customers who booked and bookmarked these tours before, no longer have these tour in their bookings nor bookmarks. The tours are completely gone from the system without causing any further errors. Passed!
README does not contains any edge-cases scenarios and corresponding information on them.
Therefore, out of 6 edge cases tests, 2 Failed and 4 Passed. Since 4/6 passed, I give 4/5 score for edge cases.
Unfortunately, no further code changes are allowed and there is no possibility to fix anything, but most of the edge case scenarios work as expected."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Bookings are also deleted (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Waitlist not affected, seats do not roll over to confirmed bookings (incorrect behavior)
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Bookmarks deleted (correct behavior)
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases, because testing is already very time-consuming up to this point.
A minority of the edge cases listed in this review prompt are documented in the README file."
1,An Tour Ending date can end before the Tour Start Date
1,"after image upload cant see the image.
I didnt get the mail regarding booking or cancellation, 
search functionalities need the date range for searh, it cant be excluded
no way to login therough gmail account
I didnt get email regardin my booking or cancellation , checked spam as well."
0,"Yes it does! They have pushed a lot of changes after round 1. They solved for most of the edge cases, like adding improved waitlist/booking cancellation functionality, made all the dependents of the model to be destroyed properly. 
Even though the app showed me that the admin password was changed when i tried to edit it, however when i tried to login again, it did not allow the updated password."
1,"I see some a lot of improvements since my first round peer review and some issues were addressed and fixed. I also see that one extra credit feature has been also completed and the app sends an email notification when the status of the customer moves from wait list to booked (however, in some cases wait list feature is not working as expected, please see below). Overall, very well done!
However, there are still bugs in the system that I reported in the peer review 1 period and not all of them were fixed and addressed accordingly. Some issues are still not resolved and can easily be reproduced. Below is the list of some issues that I still observe. Along with old issues I also noticed there are few new very minor problems that could have been adjusted (not real issues but would improve the App functionality).
1. In the Login page, I don't think user needs to choose who he/she is logging in as into the system. The system must identify if a user is Admin, Agent, or Customer without extra given information. In fact, I can login as Admin indicating that I am admin, but if I do not indicate this, log in fails.
2. As Admin I should NOT be able to change my preconfigured credentials. However, I can do that. Someone can easily mess up your admin user credentials by changing password or email you should avoid Admin from doing it.
3. As Admin when I create new User, it kicks me out of the App and makes me to re-login into the system again. Ad Admin I want to create new user and remain logged in the system. This is very minor thing and does not have to fixed. This is more for the Admin convenience.
4. Price for the tour must include cents. It is complains that 99.99 for example is not a valid price. It should've been changed to allow having 2 decimal digits.
5. As Agent when I create new Tour, it should not ask me Status of the Tour, unless I want to cancel it. Status of the tour must be determined in the run time by the system based on the start and end dates. Agent must not maintain the status of the Tour manually, unless he/she wants to cancel it. Again, this is minor note but could've been improved. 
6. Tour can be created having end date earlier than the start date.
7. The Review feature is not implemented. As I stated above in the DB design section. Reviews does not have any relationship with other tables, so it is not possible to retrieve any reviews. As any type of User I want to view reviews of any tours in the system. Unable to do since the feature is not implemented.
8. As Admin I want to delete reviews from the system that belong to the tour I listed. The Review feature is not fully implemented and therefore this cannot be done.
9. As Agent I must not see ""Cancel entire Booking"" and ""Cancel seats"" options when I view Booked Customers of my Tour. However, I do see these options and I can act upon them.
10. As Agent I want to view all reviews from customers. This feature is not fully implemented as DB design for Reviews is broken.
11. Search functionality is not implanted for Agent users. Only for Customers.
12. Search functionality works well for Customer, but it enforces customer to enter the start date and end date. Dates should be optional filters.
13. As Agent I want to see upon Customer seat cancellation, next Customer in wait list get enrolled. It works well in some scenarios, but it creates 2 different reservations for the same Customer. For example, if I am a customer and had 1 seat reserved and 1 seat in the wait list. If I moved from the wait list I see two different reservations for the same tour with 1 seat each. As it was stated in the peer review one period, it is minor note, but would be nice if it was fixed. Moreover, this functionality does not work for other scenarios. For example, As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it gave me an error: ""We're sorry, but something went wrong"". However, in the bookings for customer3, it shows that it place that customer3 into wait list. After that I completely removed the Customer1 from the system by Admin user (that customer had 5 seats reserved for the Tour). Hence, I expect customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. I triple checked this scenario and it fails for every time. 
14. One extra-credit functionality is implemented to receive email confirmation about seats moved from wait list to booked. However, the other one login with either LinkedIn/Google/Facebook account has not been implemented.
15. As Customer I want to book (wait list) seats on the full Tour. I choose 1 seat and in preference I choose ""book Available seats and add remaining to waitlist"". After clicking ""Create Booking"" it shows an error: ""We're sorry, but something went wrong"". However, in the bookings for that Customer it shows that it place that customer into wait list. It could be a bug.
Hence, there are still some issues that need to be addressed. It is not necessary 15 issues, since some of the above points are only suggestions and must not be implemented. However, some points are still refer to an issue in the system and were not properly addressed. I was glad to see that major issues were actually resolved and the App behavior was improved. Since there are still some issues within the App as described above, I give 3/5 points. However, the app behaves much better than it was in the peer review round one."
1,"I have been able to find a lot of bugs that I not anticipate during the checking but after a thorough inspection, I found the following bugs:
1) I am able to delete customers even without logging in. I can do this after pressing the back button on the sign up page.
2) I am not able to create reviews for a tour as an admin. As an admin, I can create tours for an agent but not tours belonging to he admin.
3) I can create tours ""In future"", with putting their dates in the past.
4) There is no waitlist option while creating a tour."
1,"Issues noted in first review that are still issues now:
It is possible to edit a tour, which takes place in the future, and to set that tour's status to ""Completed"".  Perhaps this option should be disabled if the tour start date is in the future.  Or, another option is to calculate the tour's ""In Future"" versus ""Completed"" status, rather than allowing a user to set it explicitly.
Issues noted in the second review which were not seen in the first review (possibly due to missing functionality at that time):
On the tours index view, the ""Booked Customer"" and ""View Reviews"" links appear to be per-tour links, but actually show all bookings and all reviews respectively.
On the tour show view, ""Contact agent"" gives a number rather than a name or email.
On the review show view, ""Tour Name"" gives a number rather than a name."
0,All functions are working as described within the program documentation
0,"They successfully included belongs_to and has_many to indicat4e relationships in models and the  tables made seem optimal to me, hence db design was very good."
0,"All the models make use of the has_many, belongs_to relationships. Hence all 'destroy' commands work properly"
1,"All relationships among the tables are found in Models files and /db/schema.rb file. There are few problems that I found with current DB design that would make the App perform incorrectly or incomplete. Although proposed design is concise and there are no unnecessary tables are created, which makes this design simple and clean, it is missing few necessary relationships for the App to work as expected.
By examining the DB design I concluded that there was a separation of User into 3 (three) completely separate types Admin, Agent, and User with its own tables and relationships with other tables. This would probably make things a little harder, although this is not necessary wrong. It is still correct design, but for simplicity all the users should be represented within a single table User instead breaking into 3 separate tables. The issues I found as follows: 
Admin does not have any relationship with other tables. This draws attention and some questions on how Admin user interacts with other tables to retrieve information, if Admin acts on behalf of the Agent or Customer. This is not clear and probably design flaw that was overlooked by the team.
Agent has many tours. This is correct design indicating 1-to-many relationship. However, for the agent it is not enough information for full and correct performance of the App. Agent must also have 1-to-many relationship with Reviews through Tours, but this relationship is absent indicating that there is no way Agent would be able to retrieve reviews for his/her listed tours (and all the tours in general). This is indication of incomplete Review requirement, or it was implemented incorrectly.  
Customer has many bookmarks and bookings. This is correct design indicating 1-to-many relationship of customer with bookmarks and bookings. One customer may have multiple bookmarks and bookings.
Tour belongs to agent and has many bookmarks and bookings. This is correct design indicating many-to-1 relationship of Tours with Agent (one agent may have multiple tours). Also, since tour has many bookings and bookmarks, it indicates correct 1-to-many relationship of Tours with Booking and Bookmarks (Tour may have multiple bookings and bookmarks). However, this is not enough information for full and correct performance of the App. Tour must also have 1-to-many relationship with Reviews, but this relationship is absent indicating that there is no possible way to connect a Tour with its reviews. Thus, this is already alerting sign that reviews functionality would not work properly.
Both Booking and Bookmark belongs to customer and tour. Correct design indicating many-to-1 relationship of booking and bookmark with Customer and Tour. (Multiple bookmarks may belong to 1 customer and 1 tour; Multiple bookings may belong to 1 customer and 1 tour). No problems with this design.
Review does not have any relationship with other tables. This is very suspicious and indicating that no other table in the DB design can access reviews and use foreign key to make any type of relationship. This indicates that Review functionality were not implemented or implemented incorrectly.
Search also does not have any relationship with other tables. This is also alerting, but Search can be simple queries and do not have to maintain any relationship with other tables. Simply performing a DB query for a given data would suffice Search implementation in the project. So, this is not as alerting as Review functionality.
For incomplete design of Review, I give only score of 4/5."
0,I believe that all the relationships are handled properly and I did not find any evidence of a mapping done wrongly.
1,"The database ERD appears to be of good design. However, there does not seem to be any relationships formed within the database itself. The models are handling the associations and taking care of the relationships. This could lead to issues if this database where exposed via the network work to other applications. Relationships and and constraints would not be up held."
0,The team managed to keep pushing their changes throughout the period of development. After the first submisson they continued pushing their changes to github.
0,Every member continuously pushed all changes to the git. The proportion of commits was lesser in round 2. But they managed to have all the features implemented.
0,"Yes, the team (all members of the team) kept pushing their work throughout the entire period of time, including round 2 time period (fixing bugs).
The repo contains only 1 branch - master.
Master branch has 64 commits and more than 12 commits are performed after peer review period one (Feb 24 - March 01). This indicates that team has attempted to improve the App functionality and fix the bugs that were reported during the peer review period one.
 
The team did very well in terms of maintaining the code, fixing bugs and pushing their code on regular basis. The very first push (initial commit) took place on Feb 13 and since then all 3 team members worked on the code. All three members of the team (drupadhy, ajain32, amody) performed relatively the same amount of work based on number of commits, which indicates contribution from all three members.
Great work by the team!"
0,There were several commits in round 2
0,The team was performing updates to their application up until March 1.
1,"The code follows good ruby practices. The have not used function calls for handling tasks. Yet the code is very understandable and easy to read. Had they made use of DRY throughout the code, it would have been a better."
1,"Overall, the code is clean, readable, easy to understand and follows good RoR coding practices to a certain extent. I pointed our several things in the peer review 1 that needs to be reworked, and I see that no improvements were done to clean code and improve code quality. Specifically, I pointed out
a) The controllers/bookings_controller.rb file is a little overloaded with bulk of ""if/elsif/else"" statements and some of them are are nested ""if/else"" statements, which makes reading a little harder to follow. As I mentioned, in general avoid bulks of ""if/elsif/else"" statements in the controller. Try to make your controller as simple as possible and move all the logic into Models. I see that the same ""if/else"" statements are there. 
b) The tours/index.html.erb is bulked with ""if/else"" statements and can be improved
On the other hand, Models files that should contain all of the logic are pretty much empty. They only contain relationship among the tables and validate input from the user. This indicates that most of the logic was performed in controllers and views, which is a little off with RoR paradigm.
Code is not commented at some places at all and with excess of ""if/else"" statements, it is a little hard to follow. In some cases one method handles more than one task without additional function calls. For example, when new booking is getting created, it calls ""create"" method in the app/controllers/books_controller.rb file. However, instead of simply creating booking as intended to, it handles a lot more tasks:
1. Checks if tour seats >= seats booked for this booking. If it is, it creates new booking.
2. If (1) is false, it check the preferences. If preferences are equal to ""Book available seats"" and tour seats > 0, it seats tour seats to 0 and booking status to 1. But if it equals to ""Book Available sears and add remaining to wait list"", it also handles the option with the wait list. Else if preferences are equal to ""Book only if all seats are available"", then it does additional task.
Therefore, a simple function that supposed to create a booking, handles at least 2 (depending on evaluation of if/else statements) different tasks without doing any additional function calls. This makes the code very hard to read and follow.
All these additional tasks could be refactored and some of the logic could be moved out of the controller into Models to keep things as simple as possible.
The same comments apply for tours/index.html.erb. This file is also a little overextended with ""if/else"" statements. Although this file has some comments, it still hard to read it. I understand that view of the Tours page depends on the user's role (since admin, agent, and customer will have different views of the tour), but still it could be done in more simplified way. May be create index file specifically for each user and render common parts?
 
There are only few instances in the code that I could find that have bad naming:
1. ""tp"" - app/controllers/bookings_controller.rb, line 72. What does tp mean?
2. num_1 - app/models/search.rb, line 3
3. num_0 - app/models/search.rb, line 4
 
There are some other minor issues with coding, mostly too many nested if/else blocks especially within controller. Also I see that for debugging purposes ""puts"" statements were actually used (controllers/bookings_controller.rb line 128). Although there is nothing wrong with it, but it is not good debugging practice. All of the print statements will be lost and it always better to rely on logs.
Other than what has been mentioned above, the code looks clean and readable. Due to problems mentioned above, I give 4/5 points."
1,"I believe that the code is messy and needs to be cleaned up in the following way:
1) The logic should be moved from the controller to the helper methods. A lot of conditional statement that has been implemented here make the controller code difficult to understand.
2) The code should be properly commented. I found the amount of comments to be lacking and hence I could not understand many parts of the program especially inside the controllers.
3) No helper method has been used to clean up the code other than the session helper. This, should be cleaned up in my opinion."
1,"For the most part, I found the code easy to read, and was not confused by the code organization!  A few suggestions:
The email format regex /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i is defined in the code in 3 places in app/models.  To be more ""DRY"", you could define this in just one place (perhaps in a helper).
There are 42 occurrences of ""<%#"" when I search in app/views.  Ideally once code is known not to be useful, it is removed rather than commented out.  This can make reading the code easier.
I was expecting to find more code in app/models.  My understanding is that in an MVC app, the ""M"" should do a lot of the heavy lifting."
0,All the members consistently pushed changes and the commits were not made at last minute (throught 9 day)
1,"Regular commits. But only used master branch, should have utilized multiple branches when developing new feature."
0,"Yes, the last update is 8 hours ago"
0,"Yes! Great work by all team!! All three students made equally the same  contributions! There is only 1 branch - master that has 52 commits.
drupadhy made 16 commits. ajain32 made 15 commits amody made 14 commits starting 2 weeks ago.
Great work by the team!"
1,"I would like to commend the team who have been consistent with their updates with all the members contributing to the project. However, I found the frequency of commits to be lacking. Moreover, in a big project like this, which involves a lot of teamwork, there should be more expected commits and I can only find 52."
0,"Yes, they seem to have pushed new code about everyday according to the commit history."
0,"I see commits from February 13 through February 22, on a near-daily basis."
0,54 commits
1,I am unable to locate any testing code
1,"Some validations at frontend seems missing and absence of popups asking for choice not present - booking page lets u overbook and it will not remind u if it will be waitlisted or confirmed before booking, considering seats remaining)."
1,Could not find any text fixtures in their code but they have done a few validations
1,"No, I did not see any controller being thoroughly tested, except default tests created by scaffold in the test/controllers. All of the test files are auto-generated by scaffold.
Neither any of the models were thoroughly tested. All of the test files are auto-generated by scaffold. Give 1 points for auto-generated files.
Please write additional test-cases where you test edge-case scenarios."
1,"I found that the team has tested many controllers and has thoroughly tested the tour and customer controllers. All the necessary tests were there for the basic functionality. However, all the controllers have not been tested thoroughly and I did not find some edge cases for a few of them."
1,"The code in the test/controllers directory appears to be the default auto-generated code.
The code in the test/models directory appears to be the default auto-generated code (zero tests).
I did not see any other model or controller test directory."
1,Looks like more testing could be done.
1,"It appears that at least one controller is being testing. However, it does not appear that at least one model is being tested."
1,"Sort of, would be better if we don;t have to select our role by ourselves."
1,"No readme. ""back"" button doesn't work as expected, showing error most of the time"
1,The UI was simple and intuitive but it had many redirection issues as it always goes back to landng page after each action and after destroying objects we get logged out
1,"Admin account cant be deleted, 
When I deleted a user with a booking the no of seats werent updated.
When the custome rwas deleted the bookmark was not visible anymore.
start date can be set ahead of the end date for tour."
1,"Interface is simple, somewhat user-friendly and somewhat intuitive. I liked the home page ""Dream. Explore. Discover!!! Click the button to get started!""
However, as Customer and Agent it was a little inconvenient to navigate between pages. For example, as Customer when I made reservation for a tour I have 3 links available to me: Edit, Back and at the top right corner Home Page. ""Back"" link has some troubles. So, the only possible way to get out was using ""Home Page"". The same analogy for Agent. Using single link to Home Page is slightly inconvenient. Please consider adding more link for users' convenience. Let user have choice where he/she wants to go next. Also, finding Review section for customer who booked a tour (completed) was a little challenging. Please consider to rework that section a little."
1,"I believe that the UI is very bare bones and that is why it does not confuse me at all about what I need to do with the application. I can navigate easily to all parts of the application. 
However, the readme does not provide any instructions about how to navigate throughout the application which should contain information about navigating throughout the application."
1,Fairly easy to use; would recommend having a home button available across all views so you don't need to press back all the time. Pressing back can cause problems especially if resources you were accessing get deleted and no longer map to anything.
1,"I poked around, just clicking semi-randomly among the links that were shown to me.  Here are some things that I noticed:
Clicking on ""View all Agents"" takes me to https://tranquil-cove-49961.herokuapp.com/agents/1, where I see ""We're sorry, but something went wrong.""  This bug should be addressed.
The home page offers links ""Edit | View all Customers | View all Agents"".  Clicking on ""View all Customers"" takes me to https://tranquil-cove-49961.herokuapp.com/customers/1 (shows me just one customer rather than all customers).  This was a bit confusing based on the name of the link.
This customer view offers links ""Edit | View Tours | View Bookings | View Bookmarks | Destroy | View Reviews"".  I think it would be ideal for the home page to include some of these options as well.
Clicking on ""View Bookings"" takes me to https://tranquil-cove-49961.herokuapp.com/bookings, where I see ""We're sorry, but something went wrong."".  This bug should be addressed.
Clicking on ""View Reviews"" takes me to https://tranquil-cove-49961.herokuapp.com/reviews/1, where I see ""The page you were looking for doesn't exist."".  This bug should be addressed.
Clicking on ""Log Out"" takes me to https://tranquil-cove-49961.herokuapp.com/logout, where I see ""The page you were looking for doesn't exist."".  This bug should be addressed.
It is possible to edit a tour, which takes place in the future, and to set that tour's status to ""Completed"".  Perhaps this option should be disabled if the tour start date is in the future.  Or, another option is to calculate the tour's ""In Future"" versus ""Completed"" status, rather than allowing a user to set it explicitly.
Clicking ""Destroy"" next to a listed tour shows you the tour rather than destroying it.  Same experience when attempting to destroy a customer account.  These bugs should be addressed.
I do not see any option to review a tour.  This could be included either in the tour ""index"" view or in the tour ""show"" view or in the reviews ""index"" view.  I think as long as you have some path to this functionality, it's fine.  The README file could clarify which place you chose to implement this.
There are other functionalities that I could not figure out how to accomplish / whether they were implemented.  I won't list all of them here.  They can be inferred from the review checkboxes where I answer questions of the form ""Can the... ?"".
I was not able to check any of the ""Can a customer... ?"" or ""Can an agent... ?"" questions because after logging in as the admin, I was unable to log out (and thus unable to log back in as an agent).
Overall, I admit I found the user interface confusing, in that I wasn't sure why I was seeing the links I was seeing, and I was often surprised by what I saw when following a link.
The README file contains only the admin credentials.  You may want to include lots more information in the README file to help a user understand how the UI is organized."
0,Rather clean.
0,They followed the rails conventions while coding.
0,"From what they have completed, they seem to have decent Ruby and Rails coding practice. The commits show that they have implemented certain glitch fixes as done in class"
1,"The controllers/bookings_controller.rb file is a little overloaded with bulk if/else statements. In general, avoid bulks of if/ elsif / else statements in the controller (lines 3- -54)). Try to make your controller as simple as possible and move any logic out into Model. If it becomes too bulky, consider refactoring controller. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
Model look great.
But consider refactoring some Views files. For example, tours/index.html.erb has a lot of complexity with if statements.
I gave full credit because I know it is kind hard to keep track of all the things, especially in such short time. We are trying to make things just to work.
Otherwise, really good app."
1,"The code generally follows good Ruby and Rails practices. However, there are some suggestions that I would like to make:
1. Other than the session helpers, there is no code that has been moved from the controllers to the helpers. A good Rails practice would be to move the logic statements from the controllers to the helpers.
2. The same can be done with the views."
1,"There appears to be a lot of code in some of the controllers; The most pressing example is the bookings. You can create methods within the Model that handle this logic in order to simplify code, then save the object within the controller. I think it is a little odd to create new ""Search"" objects. It might be more intuitive and less wasteful to filter results dynamically using select with appropriate ruby blocks. I would also recommend abstracting common validations/attributes between your agent/admin/customer classes. This would help your code become DRYer. Also, agent should not be dependent on Tours, but tours should be dependent on Agent."
1,"For the most part, I found the code easy to read, and was not confused by the code organization!  A few suggestions:
The email format regex /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i is defined in the code in 3 places in app/models.  To be more ""DRY"", you could define this in just one place (perhaps in a helper).
There are 42 occurrences of ""<%#"" when I search in app/views.  Ideally once code is known not to be useful, it is removed rather than commented out.  This can make reading the code easier.
I was expecting to find more code in app/models.  My understanding is that in an MVC app, the ""M"" should do a lot of the heavy lifting."
1,It appears that a lot of the logic was embedded into the controller versus the model.
1,Admin still cannot login. Booking and Waitlist is not working properly too.
0,The models handles these relationships.
1,"Yes, there were some improvements that I noticed while testing the site features in the review duration which included modifications to view list of all houses created by company of which realtor is a part. The program has scope for minimal improvements to make it function as needed."
1,I am unable to view real estate companies from the admin account
1,"While there are test files, I don't see any completed tests (especially for Models) outside of what is provided by default in Rails."
1,"After deleting a user from the admin account, I am being signed out of the application"
1,"While a thorough controller test exists, there is no model test."
1,"The readme file is blank, so I cannot get access to the admin functions. The user interface is clear but not so well-structured. For example, the title appears after the different choices. And all the choices are list in a single line."
1,"While links and navigation were generally easy to find, several links rendered broken pages and several got stuck in a loop asking me to log in as an Admin to edit a user when I was already logged in."
1,Yes. The UI is easy to use. But the dashboard could be made better . As every task is written on the same line
1,"The user interface has a very basic look and feel. The sign up links being on every page is not ideal. There should only be a log out link. Also, the company in the realtor page is showing the id, not the company's name. I suggest you use a drop down menu for the preferred contact of the house hunter who is signing up. It would be much more intuitive to have a single sign-in page for all users. There were also missing back buttons."
1,There are a lot of not-so-important comments in the controllers. And a lot of DRY code
1,"There are some indentation issues, but otherwise the code has method names in line with convention over configuration and the spacing and line spacing are reasonable. Also, IDs should not be on the UI. The house hunters and realtors should not have to sign in after signing up."
1,last moment commits.
1,"This team claimed to have fully tested the RealEstateCompany Model and Controller, but there were no tests in the RealEstateModel tests. I didn't check every file after since I don't like being lied to :)"
1,"The model test just tested the email attribute of the real estate company and the controller test mainly tested for successful responses and redirects, and not page content and method calls."
1,"Upon testing the system for edge cases, the following results were obtained :
1. The real estate company is destroyed and the realtors houses and houses inquiries for the same are removed.
2. The realtor can switch to another company. They will be prohibited to remove the houses listed in the previous company though.
3. The house hunter accounts are deleted without their inquiries .
4. The System does not check for regex fr phone number input during signup."
1,"The Readme file does not specify any information about how edge cases are handled but the edge cases were properly handled. when the real estate company was deleted all the houses and realtors under it were also deleted.
However the role switch option between realtor and househunter is not available, further this operation cannot be performed manually also as the code resticts a mail id from being used for two accounts."
1,"Here a few things I found:

I could list a house that was built in the future. I was also required to give a full date instead of just a year.
I was able to edit a house as a House Hunter"
1,"3) The admin encountered an exception when trying to view potential buyers of a house after its only potential buyer was deleted.
 
The README.md did not describe how the system handles edge cases."
1,The search button in not there. No way to add new house. Realtor is given some destroy privileges which are not meant for him.
1,"Overall this was a usable system. However, This app did not do a good job of keeping track of my session. Once I edited that admin account, I could not navigate via links to the home page and was also asked to sign-in again if I clicked ""admin sign-in"". Even if I signed up as a different user, my admin account was still signed into. I also was not logged-in upon signing-up as a Realtor or House-Hunter.
 
Some other comments are:

An Admin should be able to set the password for realtor or house-hunter. That is a security vulnerability. 
When I tried to use the ""Reset password link"", I get an error.
When creating a house as an Admin, I shouldn't have to know the ID of the company, I should be provided a drop-down of existing companies - the same way for how a realtor chooses a company to join.
Asking a realtor to choose or create a company before signing up is another security vulnerability - you leak the existing companies and allow someone who isn't a user of your system to create a company.
The Inquiry and Interest flow in this application is really well done."
1,"As a house hunter I could edit houses. Also, anyone can create a company, and a realtor cannot create a company before signing up. A realtor could not submit a reply to an inquiry. A realtor could not drop his or her company and could list a house without choosing a company. Last, table IDs are all over the site which is confusing and not helpful to the user. These IDs should not appear to the user or have to be used to create new entities."
1,The models had the correct relationships. The database seemed to have missed some of these. There was not table for potential buyers (n-to-n house-hunter relationship).
1,"Some methods were long and there was a lot of commented-out code. There was at least one instance of bad indentation. Otherwise, the methods were overall fairly short and the naming was sensible."
0,Simple design
0,They provide pictures of their sound waves.
0,The design document includes proper visualization. It included appropriate flow charts and screenshots which made it easier to understand the design document and the project.
0,The flowcharts included in the design document clearly explain the changes that need to be done.
1,"They only presents a flow chart, it will be better if there is a UML diagram."
0,The test plan section properly describes the flow that needs to be followed by each actor involved in the process. This could be enhanced either by providing a flow diagram or adding certain test case snippets for the scenarios.
1,"The test plan gives a black box testing view which is good and easy to understand. But it would be helpful to give more details about what functionalities are tested. Like a new DB table is added. So tests related to that and corner cases such as an old assignment gets removed , foreign key constraint so how will that test be conducted would make it better."
0,No test cases
0,"I like the Use Case Diagram, but I would like class diagrams or a database visualization too, so it's easier to understand how the cross-course assignment linking will work."
1,The usecase diagram is helpful but does not help much as it just explains what is provided in the approach section. More in-depth functionality of what each user will do or how will the design flow (flow chart) would be more helpful.
1,"The Use Case diagram added is drawn well and helps explaining the system.
Team could have added, screenshots of the Expertiza pages, that would have helped us understand whoch part of the system is changing well."
0,The team has not used any class diagram.
0,The design makes it clear to understand the procedure adapted to realize the goal. The authors have made it a point to describe the tasks carried out in a simpler manner allowing the reader to realize the approach towards the issue.
0,"The design looks simplified but there might be some edge cases that needs handling such as - What if a student makes his/her review public, this review is selected by the power user to create a sample and then the student wishes to make the review private?"
0,It is simple enough and also achieves the required features
0,"For as difficult a problem as linking assignments from one year to the next is, they present an admirably simple design."
0,The design is concised and clear. Only makes the required changes and introduces no duplications.
0,Design doc is not complex and every section of the menu explains the itself with simplest term possible.
0,"The steps taken by the team to implement the functionality is very clear and detailed. as stated above, the approach discusses the  step wise action that the team is going to take for the implementation."
0,The design and fixes are coherently described and are logical to be implemented for the given functionality. The issues are stated properly allowing the reader to understand it and the fixes suggested are enlisted in an appropriate manner.
0,"Confronted with a tricky problem in creating links between different assignments across semesters to aggregate the reviews, I was really impressed with the way they plan to accomplish this feature."
0,The design is proper.
0,"The overall design looks good. However, the author can add more details about the design principles being followed and appropriate patterns to be used."
0,The authors have adequately mentioned the desired changes in the approach and design section. The problem statement gives the gist of the issue at hand including adding feature to make student's reviews public. The proposals specified are effective to deal with the issue by creating a new MVC framework.
0,Yes. The design is clear and the details are succinct.
0,Yes the approach is explained in detail.
0,"While I'm awaiting to receive the details which are pending on the implementation, I feel the general nature of the changes is well-explained."
0,They have used a USE case diagram to explain flow. I found it quite understandable and all the steps are clearly drawn out in the diagram. It clearly explains the steps required to approach a situation.
1,Would be nice to see a sample test plan
1,"No UML diagrams included in the document.
Please include application flow diagram, state diagram or sequence diagram or Use Case diagrams to make the document for readable."
0,The team has done a commendable job in creating a very detailed UML diagram and explaining the case of every user very well.
1,The design proposed by the team looks complex in terms of the functionalities desired. They must backup these changes by providing a pictorial representation of the task like the one described in the documentation. This can help to understand the project in a better way.
0,The design looks fine but no explanation as to why this is done? Is it already existing or is this a new feature?
0,Implementation details haven't been added yet but that's fine as it hasn't been started yet.
0,"As mentioned in their Approach section, the team decided on adding some functionalities like checkboxes and views. I find these changes perfect for the problem statement given."
0,"I don't have any issues with the design, looking forward to seeing some code snippets to understand it better."
0,"1. Authors solution do not seem to create methods to wrong classes.
2. New design code does not make the code ""smelly"".
3. No new gem required. Explained solution is adequate.
4. Proposed design should not hamper system performance.
5. Well efforts expended on the design"
1,The implementation plan is not there
0,The proposals given by the team are reasonable and adequately cover the features to be established during the course of the project. The changes suggested follow the desired requirements.
0,The authors have explained the workflow very well with respect to the different types of users involved in the particular feature. The language is simple to follow.
1,What is wrong with the current implementation is clearly not stated.
0,The step by step instructions are detailed and is good.
1,"Though an approach has been mentioned of the proposed changes, but they do not have a test plan."
0,The proposed flows and project tasks are sufficiently detailed that I can understand the relationship between the issue and how they're going to solve it in each step.
0,"Document is explained well.
Also the flow of document is good.
Team can add screenshots of existing documents, also some diagram to explain the solution well."
0,It's not a great explanation
1,Team has not proposed any solution for fixing the issue. They should add their approach in the documentation.
0,The design does incorporate the functionality required of making reviews public allowing the students to toggle the visibility of review submitted. It is descriptive and easy to understand.
0,Authors have a clear idea of what details need to be included to make the audience understand the purpose of the project. The design document is sufficient to get the basic idea and implementation.
0,Yes. The design document incorporates all the functionalities stated in problem statement.
0,"Includes everything, as far as I can tell."
0,"Yes, it does"
0,Yes the design looks complete
1,Test Plan is not present.
0,"Test plan is to be added, but the purpose and the design are coherent and easy to follow."
1,"Document is explained well with clear understanding of the issue.
Problem statement, design plan is explained well.
Team can work on adding test plans.
As well as well diagrams and screenshots to make the document more explanatory."
1,So far the best write up
0,The wiki documentation has been updated and is thorough. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes have been well documented with code snippets. They have added screenshots of working functionalities that they have fixed which seems a good idea to convey the working functionality properly.
0,"The write up is good as I was able to understand the issue to be fixed and the implemented approach. 
I would like to suggest the team to standardize the size of their screenshots though."
1,There are not enough information to help me understand what the design looks like.
1,Test plans are present but have not explained in detail. A brief description  of the use case with the test plan and RSpec would be perfect
1,"The team has included the test plan design but the documentation is missing on the scenarios that will be tested after the implementation, How the team will be testing it , what are the automated test that will be created and also the manual test plan. How an end user can test the end-to- end requirements should also be a part of the design."
0,The tests are really in depth for each issue the team will be fixing.
0,"Yes, they have a working test plan in mind and also they have thought of the ways in which they are going to test the various edge cases for the various issues at hand."
1,"The author has made a test plan, but it is ""reactive"" instead of ""proactive"". The test plan for the changes to be incorporated could be improved a bit further by further consideration about the usage scenario."
1,"Testing plan is not included. However, somewhat of an idea can be obtained from the steps to reproduce."
0,"The team has included a lot of visual aids which complements the document making it a lot easier to understand. 
Great work with the UI mockups / project design / UML diagrams."
0,This team consistently uses great diagrams that add to their documentation's clarity significantly.
0,"Yes, the diagrams are clear to show how the system works. They have even gone a step ahead to show how they have thought of resolving the problem at each and every step of the Expertiza review section and the message popups they receive for the same."
0,Great work by the team on UML diagrams.
0,"A lots of visuals, very helpful when viewers walk through the design."
0,"The visualization is by far the best part of this writeup. Also, it's visualization is among the best I've reviewed till date. The author has put in a lot of efforts for the same. The diagrams make the architecture and the problem statement very simple to understand."
0,"The visualization is great.
All the flow diagrams and required screenshots are in place as required."
0,Great use of mock ups and UML diagrams. It makes understanding the issues easier. Looks like a great amount of thought has gone into making it.
0,"The design appears to be simple and straightforward to implement. The team has also included all the changes that will be made to achieve the desired results. 
Great Work !"
0,"It was weird that two of the bugs they were assigned don't exist, but that's not the team's fault."
0,"Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the review section."
0,"yes, only a few files are being modified."
0,"Yes, the design is very simple, lucid and efficient."
0,"The design does not seem that complex.
The team has clearly mentioned the issues and the way to go about it."
0,"Yes, simple straightforward solutions."
1,Mostly yes. But the working flow could have been explained better with the flow diagrams.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !
0,"Since the project is aimed at fixing the issues, no design patterns need to be used."
0,Clearly explained with diagrams and UML diagrams.
0,the design is sound with appropriate principles and patterns.
0,"Yes, the deisgn appears to be totally sound. The changes proposed are very standardized, and follows appropriate industry standards."
0,"The design looks good.
All the issues are stated and addressed nicely."
0,"As far as the issues are concerned, the solutions do seem logical."
0,I understand what the team is supposed to do to the expertiza system.
1,"The problems are described very nicely. When it comes to changes to be made, files to be modified are given. I feel more explanation needs to be given with respect to changes in these files for each problem stating why this file needs to be changed and what the impact will be."
0,Very well written document. Good job team.
0,"Yes, they look well written and easy to follow with all the visual aids."
1,"The author has very well given a background of the system and the problem, which forms a lucid idea of the changes intended by the author in the system. However, the author has only given a very high level view of the changes to be incorporated in the system. There is not much of an explanation, nor an implementation."
1,UML mockup and tables are absent.
1,only the issues/problem statement is included in the documentation as of now. The tea did mention that they will be adding the detailed design in the upcoming submissions. No use of visual aids/ diagrams as of now.
1,"No diagrams, have been mentioned and they have said that they would implement a diagram in the final design doc and thus that part of the project has been left in the air. 
1. No diagram present.
2. No conventional flow since no diagrams present. 
3. Not only no high level but no diagrams are are even abstractly specified."
1,No visual aids have been provided by the author.
1,only the issues/problem statement is included in the documentation as of now. The tea did mention that they will be adding the detailed design in the upcoming submissions. No design were added in the documentation.
1,No details of the proposed design.
1,"As for the designs proposed by the authors it proves to be a redundant check since there is a minimal amount of Design aspect in their doc. 
They haven't even defined an application flow. 
1. Nothing about adding a method to any class has been suggested. As per them most important things are going to be given in the final doc design. 
2. The design hasn't been implemented to the depth to make it a code let alone make it smelly. 
3. Nothing mentioned about the design to make it complicated and the piece of code which they would delve into to ascertain of any pre-existing gems for simplification. 
4. This too is hard to reach a conclusion on since not enough details to answer it with certainty. 
5. Yes. Absolutely, a much more thorough investigation should be carried out and relevant previous work exploration with help solve the cause."
1,"no design proposed, can not check any mistake of the design decision."
1,The author has not written any plans about the implementation. It only states the problem statement. The author needs to do more work in the writeup.
1,"There were no such solutions listed on the basis of which I could suggest some better solutions.
A couple of test cases or issue resolutions would have been handful for further suggestions."
1,"Since no solution has been proposed yet, this couldn't be reviewed."
1,Author has not proposed any changes.
1,The changes are not yet proposed.
1,"Changes are not proposed to a suitable extent as they have mostly elaborated on the problem statement. 
It yet remains for them to implement them and explain in explicit details their action plan to arrive at the solution. 
They have even yet to work on the most important part that is figuring out the solution."
1,"no implementation proposed in the design document, only placeholders. Need more detail for it."
1,The author has not suggested any changes as of now.
1,"There are no solutions proposed. Just the issues are listed and explained.
A possible screenshot or a flow diagram would have been better to catch the proposed solution."
1,"The author hasn't mentioned any prospective changes. So, this couldn't be looked in to."
1,The design document has mentioned the issues which need to be fixed but why these issues are occurring and what will the solution be is missing.
0,"The design proposed by the authors appears to be sound. Since this project is only to sort the views, there will be no code added to either the models or controllers. I hope the team only adds one sorting function per view and allows that one function to handle sorting for different columns in that view."
1,"I believe more effort should be expended on the design. Currently, it is still not so comprehensive. A lot of details can be added in terms of how each file should be modified and how the sorting will be implemented."
1,"As mentioned above, the design part is pretty weak for a writeup, and needs to be further worked upon."
1,Solutions have been proposed. How they are going to do that is not mentioned.
1,"Yes, all the functionalities, including viewing submission, viewing scores, viewing review report, author feedback report, teammate review report are all available.
I believe a more intuitive, detailed explanation or description might be even more useful, while describing the functionalities in the design. Here, such design is still just simply stated as the project goal."
1,They explained what design pattern they use but not how they use them.
0,They have explained everything nicely. I don't think any specific design pattern needs to be followed here and they have mentioned as well that they are not following any as such.
0,"They have discussed everything.
The way they have split the features and explained it one by one with the code is good."
0,Good job explaining your work and talking about staying dry.
0,"Yes, The authors have done a great job in explaining their work with code snippets."
0,"The team has a good understanding of the code and issues, they found there are two issues fill in the same category and gives good explanation of what jobs the code they have added do."
1,"For the first two issues, the team gave different conditions but no codes or demos are presented in the wiki for this test, I can only know the results by the description. For the later issues, the team gave the comparison between the old version and new version, which is easy to understand."
0,They showed their work with screenshots which contain some edge cases.
0,Yes they have explained everything in detail.
0,"The test plan has covered various cases and completely explainable in simple terms
Small suggestion, The first paragraph could have been itemized for easier understanding."
0,Good detail covering how you test different issues in the code.
0,The test plan seems to be good as they've included test plan for every issue.
0,They explained the problem very well.
1,"The team gave clear explanation of what functions include in this project. Besides, they gave some examples to help us to understand how the functions work and should work in the system , so I can point out the issue easily by following their instruction."
0,"They have explained every aspect of the project really well. Plus the video also show the changes they have done. One thing you can add is audio in your screencast videos, telling what is being done so that its easy for the user to understand."
0,"The review is clear and explanatory.
They have discussed all the essential topics needed - Test plans, MVC, DRY principles."
1,no URL for testing
0,"The project has been explained in great detail. Just feel instead of using issue numbers, if the team had explained the issue in brief before elaborating on it, that would have been great."
0,The codes work well as the team described in wiki.
1,"They did not deploy their code on a server so I cannot test it manually. However, they upload a video about their work and all the function seems work well."
0,The features are working good as shown in the screencast
0,"They haven't deployed it but have shown in the video and documentation the edge cases, so i think it might just work."
0,The features seem to work well
0,The code is well written and follows DRY principle.
0,"The code changes are majorly html changes and not Ruby changes
The DRY principle explained in the document is clear and talks about DRY being handled"
0,Its nicely written and follows dry principle. They have used existing functions where required.
0,Maybe some more comments will be helpful.
1,"The team should give more comments for the review strategy part, especially for the ruby codes part to help viewers understand what is going on."
0,The names suggest the functions properly.
0,The code changes are majorly html changes and not Ruby changes
0,Their code is clear and reasonable.
0,The code seems to have been well written with the reasonable variable names.
1,I couldn't get it to build but because rails repeatedly failed to find the config.yml. I don't think this is your fault
0,Mostly looks good. Can change names like this is_selfreview_enabled to is_self_review_enabled and assignment_form_assignment_num_metareviews_allowed to assignment_form_assignment_num_meta_reviews_allowed. selfreview shouldn't be a single string.
1,The code is not commented which they can for future developers to understand better.
1,There is no automated tests about the test plan were found. It seems the tests were all done by themselves.
1,There were no test files added in the pull request
1,They did not do any automated tests.
1,Could not find any test cases. The team should implement test cases for the issues they've fixed.
1,I do not see any changes made to the spec folder in this repo so it would appear no tests have been written.
1,There wasn't any link provided to check if the UI was working fine. But there was a video showing the project successfully running. And also the tests did seem to cover almost all the scenarios.
1,"The team provides some test cases, but it seems the tests were all done themselves and they didn't write codes for it and make it automatic. The test shows the feature work properly."
0,"The names and the structures of the functions are all used properly. Besides, the team gave comments on the codes, which makes it is easier to understand."
0,"Code is well written, DRY."
0,"When a realtor changes real estate companies, they are able to edit houses listed from the new real estate company, but not from their old one. When a user with inquiries gets deleted, so do the inquiries."
1,"1. When the admin deletes a real estate company which has some realtors and houses, (s)he can no longer view the list of other realtors, house hunters and users. The view button redirects to an error page.
2. Admin was able to view realtors/hunters/ users before any deletion happened. After the above step 1, it seems taht admin is unable to view users, realtors and hunters. So, admin cannot delete any users, realtors and hunters."
1,"This system has almost all needed functionality, but it's by far the best I've seen. Replying to an inquiry does not seem to work properly."
0,It includes all the sections
1,There is no description of what the team plans to implement.
1,"It does list out all the functionality, but there seem to be no solutions for them.
Only a basic layout is present.
An insight into the solutions to be implemented would be suggested."
1,"The design doc for now, specifies only the issues. No approach has been given yet on prospective solutions."
1,"The project purpose is explained with examples but no design or plan to implement is given. 
Again under the Test Plan section, a generic method is given but is not specific to the project."
1,UML diagrams and the solution proposed by the authors to solve the issues is missing.
1,"Implementation details are missing, but the testing plan is ready."
1,Only problem statement is explained and nothing about how the team will design the solution. Please add design and UML diagrams.
1,Seems like all parts of the design document need more details.
1,"The project writeup is not complete at this moment, as there are a lot of things missing. Like what the team plan to do, and what concretey are its testing techniques. It only mentions the problem statement, and an overview of testing."
1,"The project design and the testing plans are well laid out.
Solution part does not have any description in it, says it will be given in the detailed design.
Could have given some idea on the solution with some flow diagram."
1,The project's purpose and issues are well stated. But the project design have not been included.
0,It incorporates all the functionalites.
0,I think the authors have incorporated most of the functionality in the design document.
0,Design document contains all the functionality required.
0,The wiki is detailed enough that it mentions all the functinoalities required in the project. The team has made sure to not miss out on any functionality and they even took out time to list the column names in each report they would add the sort feature to. Good work guys.
1,"Though the pull request has been passed, but the writeup does not explain the details of the implementation, like what sorting algorithm the team has implemented using jQuery etc. The design part of the writeup is very hollow, and needs further refinement."
1,"Please add more details about the solution.
How to code for that functionality is yet to be thought of."
0,"The design document lists every issue that is being addressed in the project, providing comprehensive details on the functionality that is required for each one."
1,"Yes, their design seems to cover all the intended functionality requested for the project. But how the team will achieve the few not so straight-forward sorting such as the one indicated in ‘Author feedback report’ is not clear to conclude, their approach will achieve the intended functionality"
0,Changes look good.
1,"The explaiantions provided by the author are at a very high level view, and needs further drilling down into the implementation."
1,could use more detail
1,"The proposed changes section of the wikipedia clearly mentions the column names the team would implement sort on. But, how they want to implement the sort could be explained a little more in detail. They mention they would use tablesorter JQuery, but I would suggest to add some sort of a pseudocode that would explain better how exactly does the sorting work."
0,It is easy to follow the changes that the authors have proposed.
0,Adequate explanation was given
1,"The changes being proposed including the modification of 6 files: submission, team title, view, review-report, feedback report, and teammate review report. I think the lists of modifications are comprehensive. But more details needs to be stated:
How should we change this list_submissions.html.erb file? Should we only change some lines or should we change the entire pattern?
In which file will the sorting be implemented? there does have information on how to sort by JQuery, but there's not yet information, in terms of which file, which part needs to be changed."
0,The explanations can be more detailed. Overall understandable.
0,Team have shared the link for the TableSorter which explains the functionality
1,"The authors have taken efforts to identify the right places for making the identified changes. It seems that they have already done some changes.
Suggestions:
I feel that the proposed changes on a high level. You might want to go a level deeper to explain what will your changes be like. You might also consider adding use case for your changes."
1,The authors provide a list of files that will be modified in the scope of this project and a high level overview of what needs to be done. The rationale behind using a tablesorter jQuery library and defining the code in the script seems reasonable but the team needs to discuss more details to further clarity the solution.
1,"It states the internal jQuery library they plan to use to achieve the sorting, again more details on implementations are required to be documented to assess the quality of the solution."
0,The solution seems right.
0,"The solution looks like it doesnt add any overhead and the doesnt make the code ""smelly"""
0,"I don't think the authors plan to add methods to the wrong class. They are modifying the right files.
The new design does not appear to potentially make the code ""smelly"".
The team is using one of the existing gems in their design."
0,Mainly needs html files to be changed and they have mentioned them which looks good
1,how to encapsulate that sorting table for future use?
1,no visuals at all
1,"The authors have not included any diagrams.
Though the purpose and proposed changes are understood, the team could have mentioned use case diagrams or a flow chart explaining the flow of the functionality."
1,"Although screenshots are available on the Projects page, it would have been easier to visualize if the page mockups were added in the design document too."
1,No use of any visual aids.
1,Did not find any diagrams in the Wiki.
1,"Although the write-up explains the things clearly, visual aids will leverage your proposed changes.
Suggestions:
You can include UML diagrams like use cases, application flow to elaborate more on your additional changes.
You can mock the changes ( editing html page to show proposed changes) which will really help in a better understanding of your design."
1,NO UML diagram
1,"Unfortunately no visual aids are provided in the design. I would suggest providing the simplified UML diagram that does not necessarily capture all of the classes that interact with the ones that will be modified by the team, but the ones that the team finds will be most relevant to the reader."
1,"The design document is comprehensive and covers most of the relevant topics.
General problem statement is defined clearly and then divided into multiple specific subtasks which will be addressed by the project.
The solution to the problem specifies the library that will be utilized in the implementation and classifies several types of sorting that needs to be done. This is followed by the files that will be modified in the scope of this project.
The primary problem is that the document does not provide any extensive discussion about the possible design decisions and implementation strategies. It is stated that scripts have been added at the top of the file to sort the contents of table. I would suggest elaborating on the specifics, what functions are called and how will the javascript function be tied to the html table contents."
1,"The team provided sufficient information on the project purpose and design. The test plan is adequate.

 

 

It would be better, to provide a solid reasoning for incorporating different sorting. Few sorting implementations, ie) by name and team are intuitive. But the need to sort the Author feedback report and teammate review report, in the way suggested by the team, the reasoning is not very apparent. Need more problem statement elaboration."
1,"The design document has clearly mentioned the problem statement and the subtasks that need to be performed. However, it looks a bit incomplete to me.
Suggestions:
Try adding what were your proposed approaches and a clear reasoning as to why did you choose a particular approach.
You can simply remove the statement on Expertiza, as the professor has clearly advised us to avoid doing it."
1,"The design doc for now, specifies only the issues. No approach has been given yet on prospective solutions"
0,Design doc contains everything in clear explanation
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A use-case diagram will be useful to add.
1,"The team has done a good job in listing down the project requirements and design. However I suggest the testing plan be improved. In place of giving steps on how a reviewer should test the project, the team should instead list how they wish to write tests for the functionality added, for example-: list down a dummy set of data in any one report view, mention how they would like to write a test for this. Say using capybara, and then how to corroborate the result from the view."
1,"The project purpose is stated in detail, in the Introduction part. Starting from the background and problem statement ( to improve the quality of report views""). The purpose is stated in five different small goals separately: make changes in view submissions, view scores, view review report, author feedback report and teammate review report five different parts. In terms of project purpose, it's comprehensive and detailed.
As for project design, it is carefully outlined in the ""Solution"" and ""Modification of files"" part. I think the project design might needs a bit more description, in terms of what steps needs to do first, and what steps needs to be done next. It seems that all the changes are for the UI, but is there any UI that can be served as a pattern, for the usage of others? Or is there any implementation of one UI dependent on the implementation of another? Here, I think there needs to be more detailed steps.
The testing plan includes detailed steps in terms of how to test the implementation as a  end user. I like it very much because it is both succinct and very intuitive. It will be good to add some sample pictures when the project is over and some pictures that display the functionality becomes available."
1,The write-up is very minimal. I think it should elaborate made
0,"Document is very well written and contains all the details like problem statement, solution, files to be modified, testing plan."
0,"The UI had good directives between operations, functionalities and was easy to use. The admin profile was available in the README file."
0,"All files they provided are clearly structured, especially for the routes file. They provide clear routes for different conditions."
0,The Git code did follow the good coding practices using Ruby and Rails.
0,The code seems very good. And the code is very clearly.
1,"This team has done a good job of following Rails conventions. There are DB migrations, common layouts of the application structure and proper use of ActiveRecord helpers."
1,"No test plan added, they where missing the last time as well. You guys should add them telling how you exactly plan to test the changes you make, even if its a small change it should be mentioned how it was tested."
1,No test plan is included. They can have manual testing for the ui at least if automated is out of scope.
1,The team hasn't included any test plans in the design document. I feel testing is really important in this project as there are many 'if's' in the use-case.
1,Haven't included the test plan
0,The test plan is provided in the functionality implementation describing the functionality and how it will be tested.
1,"No, it doesn't. 
Suggestion: Team should add a test plan which includes tests for testing the required changes."
1,"Visualization offers only a flow chart, but other UML diagrams like class diagram would have been more helpful.,"
0,Clean flow chart
0,"great diagram, explains everything."
0,The flow chart is good and aids in understanding better.
0,"Yes, the given flowchart describes the sequence of events and how the application behaves in response to those events."
1,As such the project description does not ask for any visualizations.  But visualization in terms of UML diagram or a CRC cards would have been a helpful way to make the description better.
0,Great flowchart! It helps to see all the possible scenarios in a compact manner.
0,They have include a flow chart to illustrate how the part gonna work.
0,The provided flowcharts are visually sufficient to display the changes made to the system.
0,The design appears to be simple and is easy to understand.
0,yes it does. they have given the proposed solution which appears to be simple.
0,It is clear and simple.
1,"The design isn't extremely simple to understand at first glance. But given that the feature to be implemented is slightly complicated, the team has made efforts to make it as clear as possible."
0,"Yes, I think so."
0,Yes the design is simple and detailed thus explaining the required changes that would be implemented
0,"The design follows a clear approach to the functionality, avoiding any uncertain flaws."
0,"Yes, design appears to be sound."
0,yes it does appear to be following appropriate principles.
0,"The design seems pretty accurate, the schema of the database table records all the necessary details with reasonable granularity."
1,The team has clearly defined the objective of the project. The have also stated the approach that they are about to use to solve the problem. They have also clearly added the schema for storing the time information that the user will spend on a particular review. The only thing the team could have added was to create a UML diagram defining the classes that are changed or added  and adding what attributes are added and what functions modified/added. The team haven't mentioned any design pattern as such but the proposed  plan explains the idea well.
0,Yes the design is quite well understood and properly explained in a detailed manner through the flow diagram
0,The design follows the required principle and the exact required patterns.
1,"The design seems to follow appropriate principles and pattern. It is simple and clearly explains what needs to be done and where the changes will be made.
Suggestion: addition of screen mock-ups to document will help reviewers a lot."
0,"The design document was well-written initially too, and still is."
0,Explained very well.
0,Yes the changes are well explained
0,"Yes, the author has explained the scope of the project very clearly and has specified the changes to be made in the project to accomplish the goal."
1,the design design dicument seems to be written well and organised into nice categories so as to be easily readable. Though the team hasn't  made any changes since the last update. The team could have added a UML diagram and test plan in order to better explain the project.
1,Actually they talked a little about previous work from E1791 project and a lot about what they gonna do. But it's better to have some contrast.
0,The authors have explained the changes in depth and with proper details.
0,Enough visual aids used to make understanding the project easier.
1,Diagrams are used from previous project. No diagrams explaining newer functionality.
0,"Uml looks good, follows the convention."
0,"The flow diagram is good, makes understanding easier"
0,The given flow-chart describes the flow of the project and how the implemented system will work
1,They have included the flowchart of the flow of the functionality that is being added which seems to be designed properly and readable. Also database table whichthey are going to change is depicted. They could add Class Responsibility Collaborators cards to further illustrate the code changes they are about to make.
0,Good use of both diagrams and tables!
0,"visual aids are very nice, especially for the flow diagram."
1,"As mentioned earlier, the flowchart and simple ER diagram are helpful, but I believe these changes would benefit greatly from having low-fi sketches, and actor diagrams instead of flow-charts."
0,The UMl diagram mentioned her is a flow chart representing the flow of the functionality . It is designed in details  which explains the flow of the functionality quite well.
0,The visual aids used are precise and explain the in-depth functionality of the project. The diagrams and flowcharts ensure there is no ambiguity in the functioning of the project.
0,The provided flow diagram and db table are enough the explain the functionality of the project.
0,The changes provided appear to be sound.
1,It isn't clear what all the Review statistics will be shown in the column. If it is just the time spent then that's fine. But if there are other details as well then it needs to be explained how so much data will be shown in a single cell w/o affecting readability.
0,they have specified the files they'll be making the changes to and it looks good
0,The design appears to be sound considering the expected outcomes of the project and it doesn't seem that it will create any dependency mismatch as well.
0,The Design is properly designed
0,The design is accurate; The changes suggested are minimal and ensure that DRY is followed.
0,The design seems to be precise. The description of the changes are provided in detail.The team also has mentioned about the API that they will use. They have clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it.
0,Authors have proposed solutions in detail and is understandable.
1,"The Introduction was a little confusing as to what this team is going to do. Rather the ""Objective of the project"" section is what clarifies the change the are doing and from that I was able to understand what already exists.
The Objective of the project section contains the proposed solutions when the proposed solutions ought to be a separate section."
1,The autosave feature is a pain right now and it is buggy(not sure if it is in the scope of this project) so an option can be given to choose autosave the data after a set of intervals like 5/10/15 mins
0,The expected outcomes of the project have been clearly explained and requirements well understood.
1,"While I understand conceptually, I don't believe they explained their changes in appropriate detail. Simply describing additional columns and a flow chart misses the biggest part of these changes which is user experience. How will windows pop-up? What will the new data look like after a review is complete?"
0,The explanation given is quite easy to understand and explains the solution to the point
1,"Organization of the document is missing. It quotes a problem statement, presents a flowchart, and states a pair of objective-solutions yet again.
From this write up, I could understand that they're trying to do 3 things: log the time that each review takes (by improving an earlier project), auto-save reviews, and merge data of details page on report page.
I cannot find these clearly separated."
0,The explanations provided are granular and do not leave any lingering questions in the readers mind.
0,Enough explanation about how the team will tackle the problem statement has been given. Overall explanation is good.
0,Yes the functionality is explained.
1,No all functionalities are not incorporated. Design and implement a solution that handle GitHub is missing.
0,Yes the design tries to cover all the requested features.
0,"Yes, they've decided to do all there is in the scope of the project"
1,The design incorporates all the required functionalities. The team could have added Use cases or CRC cards to help convey which parts of code they plan to change and how. Overall the team conveys their objectives.
0,Yes I believe so. They discuss what they need to track during a review and what they need display after a review is complete.
0,Yes the design is having also the functionalities that is been required . it mentions also mentions a proper proposed solution for all the required tasks
1,"The introduction paragraph contains bullets that are identical to E1791 which is surprising. 
The flowchart does not cover ""No"" or negative cases and is thus incomplete. What is logged in the DB and how exactly is ""start"" and ""end"" time is very ambiguous. 
Apart from a mention of ""merging the data of the details page on the current report page."" in the introduction, I cannot see any further discussion of this particular objective.
For auto-save, you could think of using the on-unload event of JavaScript (like onload event). Also, setTimeout doesn't seem to be an efficient idea, since that would make too many number of calls from the page (I guess you would be sending an Ajax request, which is asynchronous). A next call might be made before a previous call response is handled.
When you say ""For each time the reviewer starts a review, it will check whether a previous record for this review already exists in the database. If it does exist then it will update the end time of this record"" - what if I open a review that I had done two days back? As soon as I open the page, will it mark end_time as now() .? In that case, does that mean I have done this review for 2 days..?"
0,The document incorporates all the functionality required and explains the same with an ever so accurate reasoning.
0,"yes, the design incorporates all the functionalities that are required."
0,"The design document is very thorough, indicating what's the problem, how system works and proposed soluion."
1,"I felt there was just too much overlap and with the doc from previous year: 2017 Project .
Even if the current project is to extend a previous one, the documents aren't supposed to be copied almost word to word. The only major addition I see is the last section.
None of the diagram correlate to the new changes being made; they are contextual to the older project.
Testing plan is missing from the document. From what I know, even the development projects need that section.
Even when the older document was used, no references have been provided for it."
1,"everything looks great , you can add test plan for this as its a big change in functionalities."
0,The design doc is well written and the points to be completed are clearly expressed.
1,"There are no sections titled project purpose, project design, or testing plan. However, much of the information required to create those sections is provided."
0,all basic elements are included.
1,The placement of the document could be changed to make it more readable and the flow of the document to be proper for example the objective should be shifted above the database schema. They have also not included the test cases
1,"The write up could've been organized in a better manner and the authors could've given more attention to detail. For example, I see they mention the project E1791 but without a hyperlink, it was a little difficult to reach the documentation of that project (the search bar didn't help matters too). It could've been stated more clearly what requirement the earlier project implemented, and what improvement this one does.
Also, the document does not cover testing - even some basic test cases.
(A little formatting inconsistency - the heading ""Flowchart"" always has a colon attached to it but none of the other headings do!)"
0,The design document is well planned and does not miss any of the significant details.
1,The Travis build passed but there are a lot of warnings and issues that have not been fixed. MAny of them are trivial and easy to fix.
1,The travis CI build did not pass. But the tests on which the build fails has no direct relationship with the code that the team has changed or added.
1,No link of the pull request provided.
1,"One of the Travis CI tests is failing, https://travis-ci.org/expertiza/expertiza/builds/449165455?utm_source=github_status&utm_medium=notification
 Found many ""code climate"" issues."
1,The build fails. there are 3 warnings which needs team's attention. there are no conflicts with the base branch.
1,"The view file contain 200 more files so it is quite difficult to figure out the structure of the View. It is better if independent component is introduced to construct the whole task view. And the commits contain the Gemfile, which is considered not secure to deploy for it alters the production environment."
0,"The code seems very well written and approach seems correct. If they improve the documentation and add test cases after thorough testing, it should be good to be deployed. As it stands, another team in future can pickup the code and implement these improvements."
1,Not able to see the changes done by the team. Test plan could have been explained better. If the URL or the screencast was provided it would have been better.
1,"No. i can not see any link of video to check the changed functionality or system, hence it is difficult to pass the changes to production.
Yes new team can take up remaining changes and provide a working system."
1,"Code looks okay, and the spec is written in detail. But as mentioned earlier, I'm not in a position to judge due to lack of video or deployment link or even some screenshots proving the work."
0,"Yes, the code has been written aptly and to the point. The intention is clear."
1,"lacking necessary UI description, eg, the final appearance of the task list or the pathway to show a task list."
1,"The write-up is very detailed as to what features have been implemented but lacks on explaining how they are implemented. It can be improved by adding how the features have been implemented, why they chose this logic to implement the features and how to test the code or show how they have tested the code."
1,"Detailed.
But the screenshots of the manual testing are missing in the test plan."
0,Write-up is explained pretty well.
1,Write up is too brief. No detail description of approach taken as well as no picture to relate to changes as suggested to add in last review.
1,"- The write-up does mention the files changed but misses out on adding code snippets.
- Little formatting inconsistencies found like ""-- Expertiza Project"" in the introduction, and a "":-"" only for Overview but none of the other headings.
- Looks like ""Separate the list of 'teamed with' students from the current tasks box"" needs to be a heading rather than plain text!
- Now we have created a separate table for assignments"" sounds ambiguous - does it mean a new database table or a html table..? Please be specific.
- ""A helper function was also added to format a string into multiple lines"" - please mention what the string is about (what it represents), what are these multiple lines that it is getting split into, and why you would want to split them.
- Test Cases are not stated. Test Plan does mention one as ""for example"" but the testing process could've been given a little more respect. :)"
1,"The write up is lacking screenshots, for example, the colour coded views etc and the test plan to verify the issues. Only the test plan for colour coding has been mentioned. The issues and the plan of action have been described properly."
1,Write-up needs serious attention of the team. The approach followed is good but it still needs to be worked on. the write-up should include contents which makes it self-explanatory.
1,The bug fixing does work according to the screenshots provided by the authors. They have provided a step by step screenshot of the issue that they have fixed. The authors haven't hosted their version of the expertiza so it is very difficult to actually check the functionality. They could have hosted expertiza on VCL or they could have put a screen cast of the working functionality to help in reviewing.
1,No Screencast or deployed URL provided.
1,"I can not see any link to test changes as well as no video to watch the changes.
Team could have shared implemented part to test and review."
0,Test are written
1,"There have been only two commits - one on 30th Oct and second on 31st October. There have been no commits since. It would have been better if you people had given one more commit resolving the issues given by code climate, since most of them are trivial."
1,No new commit has been added since the last submission. The commit messages are not descriptive. They should commit small portions of code one by one with proper description of the changes in the commit  message. Also their functions seem to be very long. they may consider refactoring and creating more cohesive code. Each function should do only one task.
0,The code is clean.
0,The code is very well written and comments are properly given. Also the variables are descriptive and ruby guidelines are followed.
0,"The code is well written.
No issues with naming conventions or coding style."
1,"The code written is following the Ruby on rails guidelines. The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a little more descriptive names for variables for example inside app/helpers/student_task_helper.rb  they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities. Also they have added to few commits for the amount of code change that they have done. The commit messages  are not descriptive enough about what changes have the authors committed."
1,"Code Snippet added. 
Still, Git link is not of the pull request.  
No link provided for the change. Either screencast or the URL of the deployed application would have been ideal."
0,"Code is written very well, comments are detailed and functions and variables are named appropriately.
(would just like to point out, in student_task_helper.rb#due_date_color , the variable ""rtn"" could've been named better!)"
0,"The code is well written, the way the list function was split into multiple modular functions is appreciable. A great amount of effort has gone into fixing the issues."
1,"there is no code included in the write-up,but the team had mentioned the changed files in the write.As a reviewer, it is difficult to find out which code has been added by the team. The team should clearly explain what they are doing."
0,"Yes, the writeup explains what the authors did."
1,"The writeup only tells what is to be done and how it is done. The rational behind choosing the approach is not mentioned, neither are any of the principles mentioned."
0,They have explained how they have implemented each task by adding/editing files.
0,"Wiki has been well written, with enough clarity and description"
1,The authors have documented the steps they did to solve the issues. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They should have  explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
1,It only explains how they did but not why they did. The various approach could have been mentioned in the WIKI.
1,"Yes, Writeup explains the approach taken by team to solve the issue, theoretically.
Team could have explained the issues and resolution practically.
Also no design pattern or principle were used."
1,There is no edge case.
1,"It feels like test plan only covers one aspect - ""changing of the background color for tasks as we approach the deadline.""
 
here are other aspects which can be automated for testing, perhaps by Rspec or the likes:

Add past due assignments to the student’s task list (on Student View). -- Verify if they are being added/saved
Check for correction in due dates of assignments (when an assignment’s due date is edited, it should be appropriately moved from the “Past assignments” list to the “Current Assignments” list if needed) --- Check if the functionality works.
On Student Task page, separate the list of 'teamed with' students from the current tasks box. -- test if this works
Write the required tests before implementing/refactoring the methods in the above-mentioned classe"
1,"I could think of 1 missing test case, where an assignment due date changes from future to past, that assignment should now appear in the past assignment section,
 
apart from this test case, all edge cases have been covered."
0,They seem to have included a testing plan have mentioned it in their report. They seem to have considered edge cases and other possibilities.
1,Few test cases are missing context and it block so it is difficult to understand what the test case is doing unless you read the entire code.
1,"Wiki page does talk about test plan.
But it is explained in brief, but no details of test scenarios or testing technology to be used."
0,"The test plan section is present, and it is covering all the scenarios."
0,The writeup is pretty clear.
0,It is clear what the project does and why it does it.
0,The wiki documentation has been updated. All the information has been documented in a neat and logical manner. The write up adequately provides what functionality the work is related to. The project changes to the code have been described in paragraphs which could have been better if they could have updated with code snippets and screen shots of the tasks at hand.
1,Screenshots are missing under Test Plan section.
1,Thee writeup page is concise and easy to understand but there is no insight into the code.
1,Whether the task is due is determined by a date str and it may be go wrong under different timezone.
0,The code works as it should.
1,Couldn't test it manually as no link/guide provided for the same.
1,"Student dashboard
 
Please see the dashboard.
The UI elements are not properly aligned. The title ""Current Assignments"" is not where it should be."
0,the features added seem to be running good .
1,Can't test as the link to the deployed application is not given nor the screencast video link is provided. Please include either of them.
1,"Can not find any video or link or Ip address link to manually test the changes.
I would request team to deploy the changes so that we can test the system partially."
1,Not possible to test - neither a deployment nor screenshots provided.
0,"1. Functions are of appropriate length
2. Codes are in approriate methods
3. Code is very well commented.
Overall, great work."
1,"In the due_date_color(due_date), instead of hardcoding the color vs interval, it would have been more useful if those are pulled from a config file. That will make the implementation more flexible
 
Similar hardcoding found in 
1. list_student_tasks: per_page: 10
2. breaking_word_wrap: breaking_word_wrap(student_task.assignment.name,40 )
 
 
Use of inline CSS element, could have avoided by using a simple css class. Such harcoded stuffs make the view strongly coupled with the style elements, which could have been avoided.
<hr style=""height:2px;border:none;color:#e3e3e3;background-color:#e3e3e3;""
 
Also, the UI changes are not showing up properly aligned. Please see the attached screenshot"
1,Pull request not created / link to pull request is not found in this submission.
0,The code changes are well organized and nothing is out of place.
1,"No pull request has been created as I can see from the link provided. The commits have been made, though. I think they are just one step behind creating a PR. Some variables like, @students_teamed_with, seemed ambiguous as to what do they represent."
1,"@all_task vs @student_tasks 
 
The name 'all_task' does not sound appropriate. It should be student_all_tasks.
 
1. all_tasks => student_all_tasks
 
2. student_tasks => student_available_tasks
 
3. current_student_tasks => student_current_tasks
4. past_student_tasks => student_past_tasks
 
 
Also, the filename will_paginate_array_fix.rb seems misleading to me. A better name would have been support_array_pagination.rb.
 
Also, I am not sure this file should be in the initializers, as it is just a require statement. May be this should be included in the places where the pagination is required, instead of loading it during app initialization."
1,Link to the pull request is missing. Please add it.
1,"I could only see 3 commits with no significant file changes.
I would request team to add and contribute the changes as soon as possible.
With the present changed code, methods names and variables and class names are proper with reasonable naming conventions."
1,The pull request link is not provided to verify the tests.
1,The test plan needs to be significantly improved.
1,Couldn't see any testing being done.
1,"Both the specs fails
spec/controllers/student_task_controller_spec.rb fails
spec/features/airbrake_expection_errors_feature_tests_spec.rb"
1,Though the authors have included a thorough testing plan Inside the commits I couldn't find any commits for adding testing files. they could have added basic UI testing using Capybara and cucumber.
0,Good work on including test cases.
0,The team thoroughly tested the Admin model and controller. The tests for admin performed checks for admin functionality to be able to view the list of houses created by the realtors as well as look up for realtors and house hunters information that are involved in application.
1,"they have just tested signup. controller looks good, but model testing isn't complete."
1,"Some very basic testing is done for controllers, nothing in models"
0,"Yes, I feel the team has done pretty well in testing at least one model and one controller."
1,"No, they did not write the test code."
1,"Team has written test cases , but they need to few more rounds of testing, including positive test cases as well as negative test cases."
1,No test cases apart from default test cases.
1,Models have not been tested. Controllers are partially tested.
1,"The edge cases lead to following results :
1. It asks for confirmation before destroying the company. After that the company is deleted even for those with some realtors and houses.
2. Unable to test due to failure for realtor signup.
3. It asks for confirmation before destroying the house hunter account. Unable to test for inquiries due to failure for house hunter signup.
4. The system does not allow new realtor or house hunter to sign up for application."
1,"not able to login other than admin. not able to register myself. edit option is not working when admin is trying to edit.
inquires/respond to inquiry etc i am not able to test as i am not able to register myself. search not working on heroku but they have mentioned its working in local."
1,"Couldn't check the base cases, edge cases. 
Also found high similarity of program2 doc that detailed the requirements with readme"
1,Functionalities work fine but could not find inquiries form after logging as an admin.
1,"1) If the admin tries to delete a real estate company which has some realtors and houses, it would not delete the record, because a dependent realtor exists.
 
2) The realtor can change his real estate company and he won't be prohibited from removing houses.
 
3) If admin tries to delete a house hunter who has submitted several inquiries, the inquiries will be deleted and house hunter will be removed from the buyers' list."
1,"Actually, all these edge cased list above are not realized at all.  And the mapping relationships between the models don't work at all. For example, when I delete a real estate company, and I look back to realtors' list, nothing happened, because the company id in the realtors' list looks like some random number, such as a company id 6, which is not appear in the company list. And so does the house list."
1,"1)Admin is able to delete the company which has houses and realtor associated with it.
When you try to edit houses associated with such company, the add button does not perform any action. where in if you try to edit houses, houses get edited successfully. It seems like relation between model and tables is not maintained properly.
2) While creating new houses realtor is asked to enter id of company and realtor.
  These id's are back end data with system incremented numbers and not given to user after       registration. Hence we should restrain displaying such back end information to users. 
3) Not able to submit inquiry. Posting an inquiry and reply to the inquiry is on same page, visible to house hunter.
4)  With this release team has written README file very well and neatly. Also provided admin credentials.
     Below are few major functionalities team can work upon:
     a)House hunter can create new company.
     b)Can not register as realtor.
     c)Search functionality not working.
     d)Potential buyer functionality not implemented properly. It does not connect houses with potentials           buyer. It seem like listing all the buyers."
1,"In the first round, the application was slightly performing better as compared to the final one. The team may have had troubles while merging and unresolved conflicts lead to error pages for signups."
1,"Able to login with admin and use all functionalities .
But unable to signup for realtor or househunter it shows the heroku page ""we're sorry something went wrong"""
1,"I am unable to signup so could not login and check for functionalities. But, UI is improved a lot and the confusing sign up page in round 1 is fixed."
0,I think the authors did a good job in developing the system. The system is working as it is supposed to work.
1,"They fix part of the problems showed in round 1. All kinds of user still cannot edit his own profile, even though admin can perform CRUD of hunters and realtors. And the realtor can not replace and create a new company. The hunter can not make inquires and realtor are not able to reply them. Besides, the search filter for the houses are not working. And when a realtor views the house's potential buyers, he/she will see all the hunters registered in the system."
1,"1)In the first release there was a issue in user registration. The issue still persists.
Team has kept both realtor and house hunter registration on the same page that only allows house hunter to register.
2)Can not register new realtor using registration link. For simpler design, team could have simply give 2 links for 2 types of user registration.
3)Team tried covering many functionalities as compared to last release and succeeded partially.
4)Team has provided admin credentials and admin functionalities are working fine."
1,"Search functionality for houses not found.
Asking for company id and realtor id which is difficult for the user to remember. A better would be to associate house based on a company name or add the house to the company associated with the realtor.
Admin not able to add realtors.
Admin not able add inquiries or reply to inquiries or add himself as a potential buyer.
Unable to sign up as a hunter or realtor. Only admin is able to create the users."
1,"No form validation in the create new company page. For example, when 'Founded' field is given as text and updated, it succeeds but the value is saved as a 0.
Admin is unable to add new realtors. Throws up an error.
Admin is unable to add new house hunters. Throws up an error.
Not able to sign up as either a realtor or house hunter. Gives the ""something went wrong error"".
Something is wrong with the deployment. Please look into it."
0,The code procedure and application justified the 1-to-n and n-to-n relationships between the realtor and house hunter model as well as real estate company and realtor relationship mapped as 1-to-n.
1,there is only one relationship in the whole project. Not a good database design. Plus destroying one entity won't delete another as i can see from the code. Rest i am not able to test as i am not able to login other than admin. Not able to register as well.
0,I think the system handles the 1-to-n and n-to-n relationships well. The relationships are clearly defined with no problems.
1,"Not really. First of all, as I was mentioned above, the relationship between house_hunter and query didn't handle properly. Second, a realtor should belong to a real estate company, not ""has one"", and the real estate company should has many realtors, and the mapping of two models does not work. The company id of realtors in realtors' list look like a set of random number, which has nothing to do with the table real estate company."
1,"Team has tried implementing relation between model, but they does not seem to work well.
deleting one branch of relation does not affect other branch though they are associated."
1,"Relationships have not been properly defined in the models. For example, in the company.rb file, the relationships have been commented out. Also, in the case of house model, it had only been related to a realtor and not to a real estate company."
0,The team improved upon certain aspects of their code. This included establishing the admin functions and actions as adding new companies and to view various participants involved.
0,yes about 83 commits.
1,Yes they committed a lot of code after first review which can be due to the fact it wasn't deployed by review 1. But overall the number of commits is higher than average i believe
1,The team committed the changes in round 2 but overall the commits were not consistent.
0,"By looking at their github page, I could see they submitted their changes actively and also they continued submitting changes in round 2 as well."
0,"This team is keep on submitting their changes throughout the project, and not only one or two members of the team, but all of them are playing a role in this project. Besides, they did commit changes in round 2."
1,"Yes. Team is continuously pushing changed on the github but not distributed equally among team mates.
I could see 81 commits till now."
0,The code was committed throughout the project and code was committed in the second round too.
1,"Yes, the changes were committed throughout, but the commit messages could be a bit more descriptive."
0,The code follows the general guidelines for quality and concept of clean coding. The models and controller were designed with general practice approach using Ruby and Rails coding methodologies.
1,functions are not named properly. example getphoto in photos_controller.
0,"The code is well written. It is neat and easily readable. The function calls are very well done. Also, there is no bad naming the project. Code very well follows the DRY approach."
1,"In general, the code of this system is clean and readable, but there are some problems in it. For example, author didn't handle the interest list properly. When a realtor wants to see the potential buyers of a house, it does not mean he wants to see all the hunters registered in the system. Besides, the realtor can not edit his own profile can change real estate company, because the edit method in the controller is not realized. And in models, some relationships shouldn't appear because one of the model is not created, such as the model house_hunters, which has many queries, but the model query is not created."
1,"Code is written properly. Simple and clean
Every function is simple and has distinguishing work.
Did not understand the need of creating MVC for search, photos separately. 
Many functionalities could have been merged together and made a defined solution.
Eg house search function could have been added in House MVC."
0,Code looks neat and clean.
0,Code is well written. All the conventions of the rails framework have been followed. The functions have been properly defined and does only what it is supposed to do.
0,"The website did not seem to work at first. Now I was able to access it. I also noticed some features that were included in the meantime like testing by adding house hunters. Overall, the team did work on updating the site functionalities."
0,"Yes, the team kept pushing changes throughout the project period"
1,"I find few changing records from github, but I can't show the process of development."
0,Excellent commit history. Contributions from all team members could be seen.
1,The house hunter model seemed to work according to most of the tasks mentioned. Not for the admin and realtor ones. Was unable to login as admin. Was unable t signup as realtor.
1,You guys haven't implemented unit test for your project yet.
1,I don't think the test part of this website is working.
1,"Team has tested hounse hunter functionalities but not admin and realtor functionalities.
Register page asks us to put credentials twice.
We are able to register for house hunter only irrespective of choosing any field (house hunter or realtor).
Hence I am not able to login into realtor account.
Also could not find any credentials for admin, realtor or house hunter in readme file. 
Hence not able to login into admin account also.
 
New link provided in document is not working.
If would be great it team could check the link and come back."
1,No model test cases. Controllers not tested exhaustively.
1,The UI seems to be flexible. It could include trace back to the home page. The README file could include the details to login as email. This would be helpful to use the site to it's full potential.
1,"You haven't specified anything in your Readme file. Plus you have given a link to heroku app but its not working. Please make sure its working. I saw you guys had been committing code to your master branch, have you guys pushed it to heroku. That might be the reason it got broken."
1,"Admin credentials not provided, realtor and house hunter signup throws error so unable to use app."
1,Only the registration page is working and the interface is quite confusing as it has sign-up for both realtor and hunter on the same page which is bit confusing.
1,A little confusing as there are two sign up forms one under the other and it is not clear what they are for.
1,"No, the README file is an auto-generated file, and there is no details in it."
0,"yes.
User Interface is good and easy to access."
1,"Readme file is not updated. Couldn't find admin credentials. The UI looked promising on the login page but the signup fails, i am not able to sign up either as a house hunter or as a realtor. Tried so many times in all possible ways. Without these I couldn't test any of the functionalities. The error message was ""Sign Up failed, Please retry"""
0,The Git code included almost everything that follows good coding practices using Ruby and Rails.
1,"Looking at your code on github , you guys are following good coding practices. Just at some places you have repeated you code, for example in /myaccounts/show.html.erb you are repeating alot of code. You can create one html file for the repeated code and call it based on the object or move the repeated code to a section and use it."
0,"It does well to follow the ""good Ruby and Rails coding practices"". It follows the DRY code approach."
1,"First of all, this website doesn't work at all. I can't sign up as any role. And I also can't get admin's info from README file, which is an auto-generated file."
0,"yes. code is written properly.
followed dry principle.
added comments where possible.
followed mvc with rails framework."
0,The code is very well written and organised. All the framework conventions have been followed such as the naming conventions. Comments have been added at appropriate places which improved the readability.
1,"The project is complete and sound enough in its approach and the implementations and the test plan has been well devised and just shy of application. Even so, in their project they lack two sections of key note, i.e. one is the project design and the solution approach."
0,Contains all the required explanation.
0,"Overall, it is well written."
0,The writeup has adequate screenshots to help understand the problem statement
0,The video explains the new functionality and the functionality is working as expected. all the scenarios are covered in the rspec test as well. Good job!
0,The system works perfectly as intended.
0,Works as intended. Features work as they are supposed to. Tests cover all scenarios.
0,Coverage has increased.
0,Yes. Twice during the second round.
0,"Yes, new commits were done."
0,"yes,  2 commits were made in round 2."
0,"Yes, improved the code."
0,The code follows the DRY principles correctly
1,"There is no test plan. For this project it could be difficult to test the exact time returned. However, it would be a good idea to test that the report page in fact shows the statistics."
0,"As approach described by the authors, design appears to be the simplest. It is concise and easy to understand."
0,Design doc includes the test plan but more detail on negative test cases would have been better.
0,Test plan is as simple as required for the problem statement in question.
1,"I think that there is a huge scope for test plan improvisation. The current test plan is just a step-by-step procedure to test if the reviewer receives a mail fir conflicting reviews. The test plan should also include test cases to test whether the link is present in the email notification. Also, is the link correct and navigable?
The test plan should also cover the pits where the functionality may fail, so as to ensure smooth functioning of the system."
0,some additional tests can be added
1,"The test plan section unfortunately lists no concrete test that the team would write. Checking the functionality manually, and writing rspec tests for the code written are extremely different, and I would suggest the team to have a dedicated test plan section, mentioning the controller/model they wish to test, the objects they would need to mock etc."
1,"There's a testing plan. Although the testing plan seems to cover the fuctionalities, it is not clearly stated. The tester should log in as what role? how to select a teams assignment and review it? How to log out and check the instructor's email? which instructor email should the tester check?
These questions should have been answered in the test plan."
0,The document does contain a test plan which can definitely be extended to incorporate certain negative test cases.
0,Proper diagrams are used by the team.
0,"There are UML and application flow diagrams included with the design document, which serve to make the proposed design changes much clearer."
0,"As mentioned, the team has provided UML diagrams stating the two actors in their system- Student, Instructor and their interaction with the email module and database."
0,"Yes, the use of visualization is great."
1,"There are a lot of diagrams, but the application flow and the UML Diagram doesn't look very clear. We can hardly see the words in the UML Diagram.
Also, the diagrams seem to not fit each other. How does the application diagram and the Uml diagram connect to each other? There's no clear instructions.
Also, I don't think a screen shot of code in the design doc is a good idea. I think it could be better if the changes expected to be made can be described in a more abstract fashion."
0,The author uses the UML diagram to properly describe the system.
0,The design seems simple.
0,"The design and application flow appear to be as simple as possible, as well as the proposed code changes snippet provided."
0,The team has provided diagrams that make it easier for the reader to understand the workflow of the system and the changes that they have proposed to implement the solution.
0,The design seems to be pretty straightforward.
1,Author could have provided the design pattern they need to implement.
1,"As they have provided a very high-level idea of their proposed solution, there is no pseudocode or any class diagram which helps explain the design adequately. You can improvise the design by including flow of the methods, to highlight how and where will your new method come into picture.
However, looking at the intended modifications, it seems that the changes follow DRY principles, and changes are not unnecessary. There is also no need of using any design patterns as per the required changes."
0,"By looking at the flow-charts and UML diagrams submitted by the team, their solution appears to be sound."
0,It seems as though this team's approach was well designed.
1,"Yes, but they didnt show their principles and pattern very well."
1,"The design is sound because it follows the problem statement and the instructions.
I doubt if it follows the DRY principle while looping through each review, because that might be already done in the Expertiza.
In terms of patterns, I think here it needs to use the factory pattern, altough it's not stated in the design."
0,Design is okay
0,The design has improved and updates has been done and it is easy to comprehend the changes to be made to the system.
0,"Yes, the problem statement and the proposed changes have been clearly explained."
1,"The design document contains all the necessary sections but fails to provide adequate explanation of the changes to be made. The authors have done a good job at explaining the current scenario, also identified the code where the changes are to be made.
They have identified the need of a new function and its purpose, but fail to provide a design of the intended changes, i.e. new functions or modifications in the functions, any need to use different variables etc.
The authors have not added any changes relevant to the previous suggestions."
0,I know exactly what this team is doing.
0,The team has provided a code snippet which includes solution to their problem statement. They have described the code and their proposed changes
1,Not well structured and less content
1,"No, their didn't include enough text explanation."
0,A format of the proposed email to be sent would be helpful
0,"After the first review, the design has improved significantly. The proposed design clearly defines the changes being made by the team."
1,The design explains much of the detail about the problem but classes which will be affected or needs changes are not provided.
0,The design appears to be complete.
1,"Frankly, I can not see their concrete designs from their doc."
1,"5) more effort should be expended on the design.
I think there are a lot of problems in the design. The changes to the controller, where the notification is implemented, such questions are not addressed.
Also, the questions listed in the above answers are not addressed."
1,No plan introduced
1,The design is specified to a certain extent but does not provide where the changes will take place or what classes or tables will be affected.
1,Solution and class level details are missing.
0,"The explanations are brief and to the point, thought that seems to be due to the nature of the problem statement itself."
0,"It looks to me from the document that the authors are clear about their implementation.
Suggestion:
They can elaborate more by specifying how do they intend to store the URLs to the reviews, how are they identifying the two distinctly different reviews. They can also add a basic flow of their proposed solution. This will enhance the explanation."
0,The authors have explained the changes in a brief manner which are easy to understand
1,Their explanations are not detailed and sometimes it's not easy to understand.
1,"The changes being proposed is not comprehensive. The changes in the controller is not mentioned at all. The current issue and end picture are also very hard to follow.
I have the following questions:
1. How will the UI look like when the conflict- mentioning implementation is resolved? Or only email notification and no changes in the UI?
2. I cannot understand clearly the meaning of this sentence: ""loop through each review not for calculating the average but to compare the new review score with each review score""."
0,Have explained the project as according to the given description.
0,"The design is rather straightforward, incorporates all the functionality required."
1,"The requirement here: https://docs.google.com/document/d/1Br9hm-SWIvl5ibWSfRVjmiYTQl5j27l8slWhv2iUCqQ/edit#heading=h.654oe3xw5p73 
totally appeared in the design document. This is very good because there's a high-level goal being stated.
However, the ""important files"" part which includes the Open github issue, delayed mailer, response controller and response model, only model is mentioned and the other four are not mentioned at all. It should be great if all of these can be mentioned."
0,Everything checks out.
0,Travis CI runs smoothly and no errors occurred. No conflicts occurred.
0,The build has passed and has no conflicts with the base branch.
1,"There are a few warnings thrown by other tests that must be rectified, but otherwise ready to deploy."
0,code can be deployed on production server as necessary test cases and implementation has been carried out succesfully.
0,"Write up is elaborate, and elucidates the test cases and tests well."
0,"authors have added a new doc in addition to wiki. i think that is not required, they could have simply added that in the wiki. 
as in review 1 would have liked a. link to the issue in problem statement 
2.  more details in why this sidekiq was used and not other message queue"
0,The test section has been improved with more detail.
0,The writeup is comprehensive and includes code that was added so it is easy to understand.
1,"writeup is too concise code were addded.
But the implementation was not explained in detail."
0,"The writeup has been pretty well written by the team. Introduction to the problem statement, the implementation details, and the test plans have been stated."
0,The refactored mailer with the use of Sidekiq works as intended.
0,Functionality seems correct.
0,"The features work as they are supposed to, only problem is with the code using excessive if-else like structure. Code is brittle in this sense. Could have made functions and passed parameters to make it more flexible."
0,The team has implemented most of the required functionalities
0,This project is based on emails which cannot be tested in test environment.
0,Features work as expected.
0,Yes everything does seem to work properly. Since this was a refactoring project every feature worked as it was supposed to.
0,"Coverage is present, slightly increases the overall project coverage."
1,"Test coverage has increased by a very small margin. More tests would have been better. There are only 2 tests. There are various other scenarios that could have been tested like missing or wrong attributes in request,email."
0,test cases were added to increase the coverage.
0,No new commits during the second round.
0,No new commits in 2nd phase
0,No new code was necessary.
0,The last commit was made on Oct 31
0,no new commits.
0,"Yes the code has been well written and very ruby like. The usage of existing gems is good. Functions have were good. I did not find many issues with the first review. So authors have kept it the same. very well done.
 I wanted few more comment in code but thats okay."
1,There's still some minor style issues in the code regarding unnecessary parenthesis.
1,Issues related to not mentioning the functionality of each method have been resolved. The wiki now mentions what each method does and what issue does it fix. Only issue with the current codebase is that it contains very long functions that could have been refactored and broken down. The 'perform' function contains a lot of lines and has tons of if-else statements.
0,The project follows most of the DRY principles
1,"The code has been written as per the coding standard. The code written by the team adheres to dry principle. However, as per my first review comments it is advisable to follow better naming conventions. The team could rename their function names such as the below one to something smaller such as get_time_diff. The code needs refactoring in names and addition of comments. 
 def get_time_diff_btw_due_date_and_now(due_date)"
1,"No proper commenting .
authors havent improved as expected."
1,No mention is made as to why the changes were made in which specific files.  The code is well written but hard to follow (what is the functionality of the code is tough to decipher). It would have been better had there been some comments or documentation as to what those respective methods do.
1,The team have explained why and how they did the work they did. Feel they should elaborate more on the tests that they have implemented.
0,The wiki has been documented with a lot of details explaining the problem statement as well as the approach.
0,writeup explains in  brief how and why the functionality of sidekiq was implemented.
1,Need to include a test plan
1,No test plan is included. Testing is mentioned briefly but does not mention what tests were added.
1,The tests look detailed and clear. However no edge cases or failing cases are tried. Simple and straightforward  tests are implemented. They could have tried more corner scenarios more..eg. fields are missing etc
1,Test cases are failed
1,nothing mentioned about test plan only snapshot provided.
1,The test plan is not present.
0,Perfectly explained write up along with the design document to get the better understanding of the issues and flow.
1,The method names and variable names are very well defined ! The best I have seen so far ! No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given.
0,the related functionality is mentioned.
0,The team have done a good job in explaining their work.
1,"Yes features work as intended but I would like to see tests as well as testing case were job addition to queue fails. I understand this would be edge case and not likely to happen but still needs to be handled.
Other edge cases such as participant_mails is nil have been taken care of."
0,Did not find any problematic edge cases.
1,The authors work functions well but the code uses redundant/bad logic in some places. Code could have been put into methods and reused. The code functions as expected in almost all cases
1,"The issues in the code has been resolved.
But the wiki only addresses the technical changes done. It does not address the functionality details; which makes it difficult for the end user to test all edge cases.
The project deals with the emails which can only be tested in production and not in test environment by any end user."
0,They do work as intended.
1,Function length is good. General convention of having function length < 20 has been followed. What I found lacking was additional 2-3 lines of comments before each new function to understand what has been implemented.
1,"At several places, the code used a lot of nested if else statements and some methods were very long. These lines could have been refactored. Also more comments are needed that explain what a method/variable does (just good naming is not enough). The code is DRY compliant and follows style pattern well."
1,"The code has been implemented in a modular fashion. However, the team can improve the readability of the code in mail_worker  and assignment_form. Currently it lacks readability because of too long comments between every line of code and poor alignment, which makes it difficult for user to understand."
0,The code follows the DRY principle.
0,The write up is well formed and structured. The entire flow is explained along with files changed/methods implemented in each stage. Could have described the approach a bit more.
1,"The team has followed Ruby coding standard. However, function names could be refactored for example the function ""get_time_diff_btw_due_date_and_now"" name is just too long and can be modified into ""get_time_diff"" or any other meaningful name.
Also, it is advisable to keep the function name singular or append the name with list; so instead of using ""find_participant_emails"" the team can use ""find_participant_email_list""."
1,Too long if statements are  written.
0,The variable and method names are apt.
0,"Yes, very well done on adding tests."
1,"A few tests were added, though I'd like to see more tests regarding edge cases or invalid functionality."
1,All the test cases are passing however code coverage is low. Various different scenarios must be tested thoroughly. Travis CI build is passing and efforts were taken to work on this. Appreciated!
1,The team has leveraged the existing test cases to align with the changes implemented; they have not created any test plan.
1,The test plan was not present. But the team have done a good job in implementing tests.
1,"I feel that the test section is in adequate, the users have only listed 3 scenarios with no details on how to implement that. Also missing are detailed steps on how to execute the tests if required."
1,"The document does include a test plan section . However, it just includes what framework they plan to use for testing. No solid test planning was described in the test plan section."
1,The test plan seems to be fine. It basically outlines all the functionalities that the team will test. The different cases the team will test is also outlined though not many. I guess there will be more test cases to be added once the project is on the roll.
0,"Yup, because it only tests the ability to change the language."
0,Test plan have been shown clearly and tests are easy to understand.
0,The test plan is compatible with the problem statement.
0,"A testplan that covers the entire functionality has been devised, it seems sufficient to test the change."
1,"The test plan is clear and effective but shallow. Manual testing is good, but more description should be provided for the automated testing."
1,"The screenshots for the view are great, they help in understanding the problem statement and the solution. however the design document lacks use case or class diagrams on how extenral entity interacts with the system and gets response. 
Since the authors are using external api's it would have been good if they could give more details request and response"
1,"Though this project doesn't require any UML diagram as such. However, a flowchart showing the work flow would have made the design document better and efficient."
1,The images of web pages clearly describe the changes to be made to the system however there are no class diagrams or use cases diagrams.
1,"The authors have shown screenshots of example output as a part of visualization. This shows the original page, the updated page with the facility to change language and the translated page to Hindi. Though this visualization displays the final output, there is no visualization that shows the design and implementation of this new feature."
1,Maybe add some design diagrams rather than just have screenshots.
0,mock UIs screenshots give a perfect picture of how the system will be after the required changes.
0,The necessary visual inputs to aid explanation are present.
0,"Yes, the provided diagrams deliver sufficient information about the implementation."
0,The visualization clearly and effectively conveys the translation capability which the project proposes to provide to Expertiza.
1,The team have an image of what they plan to implement. The team however have-not used any helpful visualizations like UML diagrams that would aid in the understanding.
0,Yes the current design looks simple and wholesome. Seems they have done a good job in implementing understanding how rails internationalization works. Good job
0,The design is really crisp and easy to understand. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well.
1,The authors have explained well regarding their design approach to support Hindi language but it has not mentioned if their design is flexible enough to add another languages in the future. I think they can mention if their design can accomodate other languages easily or not.
0,The design appears to be very simple. The team has avoided unnecessary complications by adhereing to the Rails Internationalization guide. They have also avoided making unnecessary changes to many files and kept the changes to the minimum number of files required.
1,"The design is simple- the authors have discussed the changes like allowing instructor to change language of a course and adding multi-language support in the design. One suggestion is that the authors could have described the difference between static and dynamic strings used in this context. Especially since they specify that only static strings will be translated, but dynamic strings will remain in English."
0,Yes. Only view files are involving since this topic is about changing the language.
0,Simple and easy to understand steps.
1,As mentioned no design diagrams are present.
0,"Yes, simple straightforward solution."
0,The changes have been explained well enough to minimize the complexity. The implementation seems extremely clear.
1,The need for two translation APIs was not justified.
0,"Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it."
1,"Design looks good at high level though specific details about implementation are still missing. I would expect that here. 
they also state that they are using google translate details on what api they will be using would have been helpful"
1,"The design is quite good. It clearly explains what needs to be done and where the changes will be made. However, the only suggestion would be to include more UML diagrams so that the design becomes more clear and understandable."
0,Looking at the design there seems to be high use of cohesion  and low coupling. It's good that all the changes are restricted to the routes.rb and config/locales files so that the resulting changes won't be messy and ruin the rest of the system. Also this helps in refactoring if needed in the future as there will be limited number of files to be changed.
1,The design appears to be clear. The inclusion of a visual aid that shows how the control transfers from the view to controller to model and back to controller and view whenever the language is changed could have been shown to help readers better understand the design.
0,It is sound.
1,The authors have not mentioned any design pattern that they will be using. They have mentioned the files that need to be modified.
1,No design found on the wiki. Not sure if any design diagram is needed but a flow diagram to test the changes can be helpful.
0,"The design is as required, following the appropriate patterns."
0,Adding a languages column to the Courses table makes sense and so does leveraging third-party APIs to handle the translation.
1,Yes the design appears to be sound following the appropriate principles and patterns. Fell the team could have explained in more detail.
1,"Yes authors have done well to explain the changes being done in the project. I think I wish they would have added is the details of languages they are supporting. 
 Also they do mention that they will add extra column to languages table, they could have pasted the new schema in the doc"
0,The explainations are succinct. The description in technical design section and before-after images clearly shows what the project intends to do.
0,The explanations provided by the authors seems to be good. They have referred the Rails Internationalization API guide which provides sufficient explanation for multi language support. They have mentioned the different elements that will be changed and how an instructor would proceed to change the language of the course verbally. In addition they have also added mock-ups to visually represent this information.
0,"Yes, the authors have specified the changes to be made in the system under the proposed project design. The changes have been included as sub heading with sub points under each. The authors have also included a relevant files heading that includes the files where changes are made.The changes involve allowing the instructor to change language for a course. In the process a separate language column will be added to the Courses table and a dropdown of languages in the Edit Courses page where a language can be chosen. Once the instructor updates the Edit Course page with the chosen language, the static strings in the Expertiza application will be changed to the chosen language. For adding multi-language support, Google Translate and Rails Internationalization API is being used. Also, two yaml files- en.yml and hi_EN.yml contains the translated strings for the respective languages. The routes.rb file and all the view files will be correspondingly modified to show the different languages after reading from the yaml files."
1,The authors have not explained properly the modifications that needs to be made. They have just written the objective.
0,"Yes, the project design is meaningful and clear. The solution is well laid out."
0,The authors have explained the required changes in a concise manner.
1,"Overall, the report was concise and fairly clear about what changes were being made to the system. However, the need for the Rails Internationalization API in addition to the Google's Cloud Translation API was not explained. Also, the report mentioned that strings in the actual code were not changing, which should have been explained in more detail."
1,The team have done a good job explaining their project. But I feel the team should have detailed their explanation of the implementation more. Also the test cases should have been included in more detail.
1,"The authors have included all the necessary sections of the design document. However, the document seems to be a very high-level explanation of the problem statement and proposed solutions.
Suggestion:
You can try elaborating more on the problem statement and the current scenario of the project. e.g. Try explaining what is the threshold for sending an email notification to the users."
0,The team has included all the topics required for the documentation.
1,"The test plan can be more elaborate and complete.
This will help as part of the behaviour driven design process and also help you test whether every change made works correctly."
1,"The team has an outline of the test plan and the test scenarios which they are planning to take care of. It would be suggested that the team takes care of all the exhaustive scenarios which are related to the functionality. They could also add the step wise description of the scenarios they have mentioned or the test cases they are planning to implement.
Test driven approach makes sure our code is exhaustive of all scenarios."
1,"The design has been listed with a few test plans.
I feel that there could be more tests included.
Suggestion: Test plans need to be explained more and could provide the code if TDD approach is used."
1,Yes the test plan is included but the test plan appears to be very shallow as it gives the which functionalities must be test but doesn't mentions it inform of test like what should be the actions taken when a certain condition arises it can be more clearly stated by mentioning the test cases in form of context and it statements
1,No tests
1,There is no proper test plan. The authors have just mentioned the required tests that needs to be done. No proper explanation has been given about how these tests will be implemented.
1,Test plan is very shallow. Only the headings are mentioned. A proper description of what is the test for and what to expect from each test will be helpful in understanding.
1,The current tests written are good but it would be good if the team had pointed out the corner cases as wel such as - what happens if the deadline for self-review is exceeded? Does that mean the peer-review scores cannot be seen? Or is a default score of 0 is set?
1,"No, not really, the design is does not implement the test plan but rather goes on to show how the pre existing Expertiza algorithm works. So it would help if they showed the same."
0,A test plan is included in this design doc.
0,The team has done tremendous job in adding visualization aids. They have added application flow diagrams for every actor along with the UML diagram of the student and instructor. They have also included screenshots to explain the code functionality implementation of enabling self reviews and score pages. This makes the document descriptive and very easy to read and understand.
0,"The visualizations seem to be complete. The team has included an application flow diagram, a use case diagram and also a screenshot of how the actual result should look. So, in my opinion, good job done!"
1,The explanation and the diagrams don't match exactly. The explanation says user should be able to see composite and peer review scores only after he completes his own review. That is not captured in the flow diagram. Else it is self explanatory
0,Some UI screenshots are added along with design diagrams which describe the system. The UI or mock UI helps in better understanding
0,Basic UML used
0,The chart and diagrams are well done and help explain how the code will work.
0,The use case diagram and application flow diagram very well explains the changes made to the system.
0,Yes the visuals provided with this doc are clear and just by that a lot can be understood.
0,"Application flow, use case diagram are both very useful to describe the changes,"
1,"As stated above, the team has not explained any design pattern they are following. However they have mentioned all the code changes they are making for this functionality implementation. The code snippets they have included is very useful to understand the exact code changes they are making and the files which are getting impacted. This would help the future developers to understand the  code in a simple manner."
0,"Yes, the design appears to be as simple as possible. The team has mentioned what needs to be done and how they plan to implement it. Hence, it is easy to understand."
1,"The design looks good.
But from the implementation details given and the amount of use cases listed, I feel there could be some more implementation details that are left out."
1,Complex design
0,es the design is very simple and explains the changes required in a very clear manner
0,The design is simple and very much in depth. and follows the principle
0,Yes the design is simple and easy to understand for others too. The explanation along with diagrams provides enough information to understand the use-case.
0,"Yes, the design looks simple , no complications and the screenshots are really helpful."
1,"The team has very well explained the changes they are making in the project to achieve the functionality. However, they have not included any design explanation explicitly. They have not described the approach they have come with. It might be helpful if they could add the design approach as well in the wiki link so that its easier to understand the code changes by having a glance at the design pattern."
1,"The design does appear to be sound.
The team has put most of the use cases, actors and explained them well.
The screenshots of the UI are also present.
Suggestion: Could have explained the implementation a bit more in bullet points."
0,"The design seems to be following the appropriate principles and uses the appropriate guidelines.
They usecase diagram mentions each actor and the role associated."
0,The flow and UML diagrams are well designed and explain a lot about the system flow. addition of detailed use case helps support the diagram
0,Yes the design is very simple and explains the changes required in a very clear manner
1,"The overall design looks good. The score calculation formula still looks a bit weird. Using the current formula, it is possible to have a higher  composite score than each of the individual scores , which should not be the case."
1,There is no mention for the design strategy or design pattern to be used in the implementation.
0,The design appears to followed appropriate principles and patterns.
1,Yes the team seem to have a clear idea as to what must be done and how the result must look. It would be helpful if the team gave some insights as to how the composite score formula was decided as this is the heart of the project.
0,I like the part where the peer review has been given more weightage in comparison to self review in the composite score.
0,The documentation done by the team is very detailed and explains the problem statement very clearly. They have described the functionality change in bullet points which makes it very easy to understand the sub parts required to achieve the main functionality in simple terms.
1,"It seems to me that the implementation of the project has not started yet. Hence, the exact place in the Expertiza code where they plan to make changes is missing. This should be added in my opinion.
Additionally, they have explained very well as to what changes need to be done and how they will be done. So, good job there."
1,"Yes, the changes to be made are nicely explain.
The diagrams and screenshots are in place.
Suggestion: There was more scope to the test plans"
0,Yes the author has made a great attempt to explain the changes by trying to explain the changes required with the help of the application flow diagram and the use case diagram and how the changes were implemented by giving screenshots of the changes.
1,No. Not clear
0,The authors have clearly mentioned the changes to be made using Problem Statement and Use Case Diagram.
0,Yes the required changes for the reviews is explained clearly. The design for each required change is also explained in depth now.
0,The wiki page is very explanatory and the authors have explained the issue and fix very well
0,"Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the ""Implementation"" section."
1,The design doc explains the project in detail. I would suggest that the description could be modified by removing redundancy to make the doc more succinct. Also what MVC files are being touched could have been mentioned.
1,The authors haven;t given the files to be modified or the changes they are going to do to the system.
0,The team explained everything required and not leave anything behind.
1,The team has provided the application flow diagram which helps to understand the working of the project. It would be helpful to add design details and the diagram for same so that others can understand the implementation as well.
1,Application flow is present and done well. UML diagrams need to be added.
0,"The application plan diagram has been shown.
It distinguishes between Instructor and Student."
1,"Same comments as earlier. A flow chart diagram is provided, but it provides little benefit and the presentation for the score algorithm is vague and simple. I would like to see more details about the process in an actor diagram."
1,As mentioned above the flow diagram should be completely modified
1,No UML diagrams or screenshots have been included currently.
1,"There is a hint of visual aid in terms of the section of Application flow for the Instructor and student and thus we can say that it does slightly help get a sense of putting things into perspective. 
1. None. Both the diagrams seem important enough for the scope of the project and in conjunction with the intended functionalities.
2. The UML diagram is in line with the conventions and follows suite.
3. The diagram of the instructor can be said to be bordering on one to be too high level and should go a bit more into detail."
1,No UMLs given
0,The flow diagrams are well written and it is easy to understand just looking at them.
1,"The application flow help understands how your design work, but maybe you can add more visual aids to help understand your design more easily."
0,I really like the flow graphs! The helped me understand what you are aiming to do.
1,"As for the designs proposed by the authors it proves to be a redundant check since there is a minimal amount of Design aspect in their doc. 
Sure, they have defined an application flow, but that is all there is to it. 
1. Nothing about adding a method to any class has been suggested. Only a simple formula for composite score has been written. 
2. The design hasn't been implemented to the depth to make it a code let alone make it smelly. 
3. Nothing mentioned about the design to make it complicated and the piece of code which they would delve into to ascertain of any pre-existing gems for simplification. 
4. This too is hard to reach a conclusion on since not enough details to answer it with certainty. 
5. Yes. Absolutely, a much more thorough investigation should be carried out and relevant previous work exploration with help solve the cause."
0,"Yes, the designs appears to be good to me. I believe the diagram shown in wiki helped me to understand their understanding"
0,The design looks reasonable for me.
1,"This logic to calculate composite score :
composite score= Max score -[self review score - peer review score] is basically taking the min scores. Not sure what you are trying to achieve here . It is not a good measure to calculate composite score."
1,"From what I can gather, nothing sounds too complicated individually, but the practice of a workflow across multiple pages can become very cumbersome and complex. I don't see any details on how this team plans to mitigate those issues."
0,The design gives a proper explanation of the behavior of the system/functionality
1,"It would have been good to show the comparison of the scores calculated with the old model and the new model.
This will check if the proposed design is acceptable or just falls in the ""smell"" category."
1,"The team has discussed the implementation details of calculating the composite score. However, as stated above the documentation lacks the detailed design that they are planning to implement."
1,They have mentioned the method to calculate the composite reviews. But where this method is planned to be added in Expertiza is unclear. This needs to be mentioned.
1,"Similar to my earlier comment, I found this document lacking on details. I also don't think their explanation for deriving the ""score"" to be sufficient. Their explanation is expressed as code, not as a mathematical equation."
0,The changes are much that is required just some calculated approach of the score which the author has mentioned and seems will be working
1,No detaiiled design on how to do proposed solution no visuals
1,"Both the project purpose and the project design are not very well stated. 
In terms of project purpose, although I was expecting it to appear in the introduction part, it actually did not. The part just stated a high-level abstract goal, being transmitting the conflicting message to the grader. But it's not at all stated in detail. So I went to the proposed solution to find the project purpose.
In the proposed solution section, Neither project purpose nor project design was well put. It talks about changes that are expected to be implemented in the file. But they are not talked about in detail. This sentence: ""loop through each review not for calculating the average but to compare the new review score with each review score""    seems to be not so easy to be understood.
The project design seems also to be in the proposed solution section. There's no detailed modification plan, workflow statement, or anything. 
The testing plan looks succinct and helpful enough for a tester to use and check the functionality."
1,"No UML diagrams present. 
Suggestions: Although the wireframes make it really easier to understand how the end product will look like, the team could have mentioned a use case diagram, or a flowchart depicting the flow of the functionality."
0,Screen mock up's are good.
1,The only visual aid provided is the screenshot of the before and after page. More UML based diagrams could increase understandability.
1,There are mock-ups of the end result. But there are no other UML diagrams. There should have been some UML diagrams to help explain their design better as well as the flow of the implementation.
0,Screenshots are helpful to understand the flow and their work
1,"nice mockup for another language, it is clean. The menu bar for translated language screen is still in English, I assume it is just a careless mistake when make the mockup."
1,No diagrams present to explain behaviour design.
1,"The UML diagrams are missing, but they are compensated by suitable explanations. I could follow it very easily."
0,The diagrams describe the functioning of the project exceptionally.
1,"The screen mockups were very nice. Good job! I would like to see a UML diagram for the implementation, i.e. how a reference to a static string in a view eventually maps to the correct yaml file. That would make the design more specific and clear."
0,The team have showed what they plan to do in the diagrams.
1,"I do not think that the design will increase the response time of the system. The team also has mentioned about the API that they will use. Enough efforts have been taken to convey what is to be done and how the team will do it. 
Suggestions: No information about the methods that will be implemented has been given in the design document. Availability of such info would have been helpful."
1,"Lower level design changes are missing. 
Authors have only talked about config changes. 
No mention if the db requires any changes"
0,well designed
0,"Looks good, only view files are involving the changes."
1,No code is mentioned to be checked
0,"The design proposed is the natural way anyone would go around solving those issues, for example creating separate yaml files for different languages and then picking up the strings from there."
0,"Looking at the doc, it seems like the design is precise. The description of the changes are provided in details ensuring the satisfaction of the reader."
0,The design seemed good.
1,changes could be explained in details. i think that is missing a bit.
1,"The changes proposed are quite understandable. However, I would suggest them to clearly provide a clear path how they are going to reach their result. The initial planning is quite appreciable though."
0,Good explanations for all solutions
1,need to edit test plan and add more test cases.
1,The explanation for changes are just an overview of what needs to be done and does not focusses on the changes to be made in the files.
0,The changes are apt and easy to follow. It makes sense.
0,The explanation provided is on point to the requirement of the project. All the steps piece up the project completely.
1,"The explanations are done well but they could be more thorough. Why is the internationalization API and Google Translate needed? Also, will you use a script to edit the views? How would you do that? It seems like too much work to do manually."
0,"The design incorporates everything that the project document has specified about the project. 
No suggestions."
0,yes the required functionality is adequately explained. Good work in that
1,"The document shows how they will be using the API. However, since it is initial they have not clearly mentioned the functionality required."
0,The design does incorporate all of the necessary functionality.
0,Implemented major of them
0,"implementation looks just like what the requirement asked for, no removing of English code."
0,"Yes, it covers all the functionalities."
0,"Yes, The design document contains all parts of the functionality, ensuring that nothing is missed out."
0,"Yes, I believe they have included all of the required functionality."
1,"I think technical design lacks details. the section should be more detailed on how this internationalization will work, where will the string be kept.
what are the effective changes required across the project
test plan should have more tests"
0,Good work. Good documentation
1,"All parts are presented, but need little fore explanation in test plan part."
0,The doc mentions the changes to be made in a detailed way along with a proper stepwise explanation of the solution or the approach to be taken plus the screenshots which help in better understanding.
0,The project design doc is complete and specifies both issues and prospective solutions.
0,The entire project flow is well documented along with the basic structural requirements. The document aligns with the plan of action and showcases the exact purpose of the project.
1,"The design document was clear and concise; however, I would like to see more details on how routes.rb and the views will be edited to pull static strings from the en.yml file. The test plan section is not detailed enough."
1,The team have done a good job explaining their project. But I feel the team should have detailed their explanation of the implementation more. Also more test cases should have been included in more detail.
0,yes the test coverage seems good
0,An appropriate test plan is included in this design doc.
0,"I have to say their test plan includes user interface testing, performance testing, database testing etc. I have to say they have worked really hard for it. I have not yet come across any team who has a test plan like this."
0,"The Test Plans are thorough and they gone ahead and shown it in detail by breaking them into steps such as pre-steps, Functional, UI and Performance Testing. This is a very good way to achieve in-depth analysis of the problem and check how effective the solution is."
0,The test plan is thorough and contains lots of detail that will make it easy to design RSpec tests in the future.
1,A through test-plan is described. I do think Test Case-2 could be described more efficiently so that it is clear and easy to understand. Overall looks good.
1,"Yes the design includes the test plan. However, the test plan could have been more low level, instead of just writing 'it should' statements."
0,They have covered all the test plans along with detailed steps.
0,The test plan is comprehensive.
0,"Yes, design does include a well-described test plan. The provided tests will surely test the functionalities which will be implemenedt. The test plan is represented in a wonderful manner including pre-steps and different testing expectations.
Great work. No suggestions are required."
0,The diagram is perfect and clear
0,"Yes, design is informative. Change proposal is detailed. It describes well about how changes are to be implemented."
0,The team has added their mock UI which shows they have thought about the changes and modification. Mock UIs of the screen shows they are halfway the project.
0,Lots of great visualizations are provided that outline a good amount of detail.
0,Very good use of Class and Sequence diagrams to explain the entire design flow. It clearly conveys the thought  process of authors and the overall design.
0,Yes the diagrams clearly illustrate the proposed flow. Different diagrams are provided for different issues. One of the best wikis I have seen
0,"Yes, they have added mock UI screenshots which is exactly what they are going to and should do."
0,Great use of mock ups. Really appreciate it.
0,flowcharts are drawn which describe the flow how the system will work after implementation.
1,The team has discussed their plan using flowcharts. But they have not used any class diagram.
0,"Yes, the provided diagrams deliver sufficient information about the implementation.
Flowcharts and mock UIs screenshots give a perfect picture of how the system will be after the required changes.
No suggestions required."
0,very clear
1,Design is informative. But too detailed. One UML would have been apt.
0,The design seems simple and clear.
0,"Undoubtedly, I like their color coding approach. It's something very simple and apt for the current system."
0,"Yes, the design is a very simple and effective representation of the problem statement and they serve a good representation on how they are working and implemented the changes to the staggered deadlines assignment section."
0,The design appears to be simple given the task at hand.
0,Yes the design is straight forward and easy to understand.
0,Yes the design is robust and simple to understand. Each class and view only handles a specific functionality i.e it is modularised.
0,The diagrams are very basic and covering the entire scope which is a good work by the team
0,design is simple and easy to understand.
0,"Yes, it is the simplest design and minimal work which is required to resolve the issues. It is very clearly explained. One can clearly understand the problem statement and the proposed solution for the same. The design document is properly structured as well."
0,sound. so many diagrams.
0,The design appears to be sound following the appropriate principles and patterns.
0,The design appears to be neat.
0,The design is perfectly well depicted in the form of the Logical Flow diagram they have been thorough in pointing out the application flow in the Proposed Design section so as to elucidate the problem statement.
0,All good design principles are being followed where necessary.
1,Yes the design is pretty good. The patterns followed avoids any duplication of code. But I had made a suggestion in Review One to take a look at Project 1843 and it's code. The problem statement is quite similar and the code could be reused. I don't see any mention of it. I hope you do take a look before starting to code as it will avoid any re-work.
0,Yes the design appears to be sound and the flow diagrams illustrate the flow of control very well.
0,The design is apt following the principles and are self-explanatory
1,"design is fine. some minor errors like no stop phase.Moreover no design patterns used.
Just flowcharts are provided.If some sequence diagram or use case diagrams were provided it would improve the design a lot."
0,"Yes, the document seems to be perfect. It does follow all the appropriate principles and patterns.
No suggestions required."
0,"Well explanation on problem statement. UML diagrams, flow charts given. Detailed explanation on problem statement."
0,The design was well explained in this design doc.
0,"In round one, Team has well explained their approach and how are they going to do it. In this round, they have included detailed information and mock UI. It was easy to relate their approach. Their test plan is also thorough. I think the team would definitely be able to incorporate the new changes. Good job guys!"
0,"Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have not only given proper UML diagrams and the like, but they have also implemented the code and showcased in the ""Test Plan"" and the ""Proposed Design"" section."
0,The changes are very well documented. For each issue what are the files that needs to be changed is mentioned appropriately. The overall design looks efficient and avoids any duplication. Good Job!
0,Yes the authors have adequately explained all the changes that need to be made. Each issue has a separate list of changes to be made and which files need to be edited.
0,"They have explained every change they want to make to fix the issue. The diagrams, in turn, help a lot to understand the flow of the system."
0,The document is clearly and neatly written. All the necessary sections are present with good explanations.
0,yes the authors have adaquately explained the changes to be made in the system.
0,Changes are well explained with good visual aids.
0,UML diagrams are well formed. Flow charts are easy to understand. Looks like the team has thoroughly understood the problem statement.
0,Their visual aid is well designed and high quality. It helps the reader understand their total design very well.
0,They have used UML diagram and flowcharts which aided in understanding their approach and the logic
0,The flowcharts used are very good and do a great job of conveying the intended purpose of each solution presented.
1,The diagrams follow the conventions and are detailed and self explanatory. Suggestion : Test Plan is not so clear. Especially the second testcase where it is stated that the dates will be changed accordingly. What dates will be changed and how should be mentioned. A similar flow-chart  will make it very clear as to what you plan to test.
0,One of the best wikis I have reviewed with good diagrams and explanations. The flow diagrams are really good. Kudos
0,Diagrams are very clear and well explained!
1,The UML diagrams does seems to be a bit at a high level. I couldn't get a clear idea of how it would actually be implemented.
0,Uml diagrams mentioned are excellent and to the mark.
0,Clearly defined UML (+1)
0,not show which method
0,The design they have right now looks good to me. It does not have any issue.
0,Their solution sounds good.
0,All proposed changes seem to be in line with good coding practices and the expertiza system guidelines.
1,"More effort could have been expended on the design because in some places, they are not sure of the direction and just state that they might have to look into the code and discuss with the professor."
0,"Though I couldn't follow everything, overall, the design seems to do the right thing."
1,"The only issue i feel is iapproach to issue 1 is a bit  complex  or not clear which may lead to
increasing the response time of the system."
0,Adequate information given on implementing the solution. Flow charts are impressive.
0,They explained their plan very well. Both the visual aid and the word they use are very clear.
0,The team has explained the solution with flow charts and code snippets. They have even considered the feasibility of their solution which is a good thing as this is a big project so feasibility is a big factor.
0,Everything is explained well and easy to understand.
0,The flowchart makes it very clear.
1,"The explanations given show that they have put thought into their project however in Issue 1 solution 2, they are not clear about the path ahead. They have vaguely stated that the solution might be complex."
1,proposed changes are well explanatory but every function change is in sign_up_sheet controller whereas there are many references present in a few models and other controllers as well
0,"Very clear, very well organized."
1,The Issue 2 explanation ans Issue 1 solution 2 explanation is a bit hard to follow or seems to be at a high level. It needs to be broken down. All other descriptions are easy to follow. It would have been more helpful if some screenshots of the tables or the screen shots of the screens were included.
1,"The overall quality of explanations is precise and clear.
Isssue 3 and the test plan can be addressed in more detail.
How the testing will be performed must be addressed."
0,"The explanation provided is on point to the requirement of the project. All the steps piece up the project completely.
No suggestions."
0,"Yes, it is complete"
0,The design contains all of the functionality that required.
0,"Design document has outlined the project requirement and issues. They have proposed a solution to each problem. they have even figured the files and methods to be modified. Overall, it looks good."
0,Yes all the issues mentioned in the project description are covered along with their proposed Solution. Good Job
0,Yes the design incorporates all the functionality required. All the issues are explained clearly and their required solutions are also given.
0,The design incorporates all the required functionality to a good extent.
0,"Yes, the document incorporates all the functionality,ensuring nothing is missed."
1,lack of group members.  The design process is not very clear.
0,The design documents contain all required part.
0,"Design document has all the necessary information like project design, test plan. The team has gone through their topic deeply and can be seen by their illustration of their implementation. Also, they have included code snippets which show thoroughness of their approach"
0,The document is quite comprehensive in its descriptions of the design proposal.
0,"The design doc clearly explains the project purpose, project design and the test plan."
0,Document looks complete.
0,The design doc is complete. All the relevant sections have been added.
1,the design covers all tthe major aspects well. I feel that the testing plan could be explained and elaborated in a much better way.
1,"The problem statements are much detailed, but they could be more concise.
The test plan could probably be elaborated for better explanation."
0,"The Design document states all the required things right from project design to test plan. Files that will be changed along with how functionality will work/flow are included in the doc clearly. 
Suggestion: great work! no suggestions required."
1,"They have test plan section, but too few test cases."
1,"They use ER diagram to describe the changes, but I think it is not very intuitive for me to understand their task."
1,"Design approaches are clearly explained (yes, the 2nd approach is the correct approach).
Any design patterns used???"
0,They have explained in detail about the proposed changes with individual diagrams for each case. It is very thorough in explanation
0,explained details about their solution and what will be changed after their implementation.
0,Yes they have
1,"The explanations are good.
But a layout in the issue-solution form listed sequentially would have looked better."
1,"The authors do not have a section for proposed changes. Hence, it is not completely clear which changes they are proposing and which changes are already existing."
0,The team has suggested reasonable changes to address the problem statement and has given explanation for each solution they have proposed for the implementation.
1,"I think you explained the change they want to make clear, but maybe you can state which file you want to make and how you guys want to change that file."
0,The changes are clearly stated and represented.
1,"In my opinion, they have included the application flow but where in Expertiza they are implementing this logic seems to be missing. They should include the same in round 2 when they have completed the implementation."
1,"Yes, the functionalities are present.
It would have been good if the issues were listed sequentially following its solutions."
1,The team has discussed the solution which is required for fixing the issue but has not proposed any design for their approach.
1,Yes all the requirements mentioned in the Problem Statement are considered. Also the corresponding solutions are explained . A flow diagram or screenshots explaining the solution jsut like the problem statement is explained would have been helpful.
0,"Yes, the required functionality is covered with details in the document."
0,Yes it incorporates all the required functionalities along with the test cases
0,"Yes, their sections Method to calculate Composite Score and Application Flow sections have a flow chart as well as at least a targeted section of the code which they have planned to work upon."
0,The design incorporates all of the functionality required.
1,"All the required part is in their design. However, maybe you can add a little more detail to your test plan."
0,The project is complete and sound enough in its approach and the implementations and the test plan has been well devised and just shy of application.
1,There are no sections titled project design or project purpose.
1,"The problem statement is nicely explained with the help of flowchart. However some screenshot of the screens where changes need to be made as well a similar flow diagram for solution will be helpful. Test Plan is not stated in details. It just mentions Bullet Points.  In Test Driven Development, adequately defining the test cases is as important as developing a solution as per the problem statement. This should be corrected."
1,"I don't think anything is missing from their document, but it is in general ""lite"". I would prefer a few more details on how they plan to limit reviews from being viewed until a self-review is complete, or which places they plan on making changes."
1,The doc is well written with all the necessary explanation. More detailed test plan would suffice the need of the document
1,"The design document is good which covers every aspects from project purpose to the test cases . However, there are some things which I found incomplete. In the problem statement they should first of mention a proper definition  of what is meant by self review as the term is a bit ambiguous and in the flow diagram they have mentioned the flow which represents the UI aspect of the the project and not the flow of how the task would be implemented and thus the flow diagram must be changed"
0,The doc is very succinct and well written!
0,No everything is properly described.
1,"The design documents looks very crisp and clear.
The work flow, proposed solutions and test plans are all listed. Good work.
A screenshot or two of the test cases would have made it even better."
1,The design related information is missing. The team has mentioned the problem statement and application flow. They need to add UML diagrams and in the first stage at least the proposed changes are expected.
1,The problem statement is not clear
0,"Two types of testing are listed, and the authors list all the cases they need to test."
0,The test plan is designed efficiently. They have described the UI tests and automated tests which cover most of the cases.
0,The test plan is pretty good and it has both UI tests and automated tests.
0,"They include a very described test plan. It has everything proper. What framework, what tests all this information is well included. They clearly specify what they aim to test."
0,Yes this is done very well.
0,A concrete test plan is also added and it has both UI and automated test details.
0,The test cases described will cover the functionalities described given that they write multiples tests with the same structure as described for all search criteria.
0,test plans walk through necessary functionalities.
0,The authors add more diagrams to help to explain the change they are going to make. The relevant tables are really helpful.
0,The team has described changes using use case and ER diagrams to clearly explain the system.
1,"Not enough!
Add use case diagrams and flow diagrams."
0,The project has great visualization. A lot of UML diagrams have been included which makes the understanding the project easier. The UML diagrams also clarifies what work is to be done.
0,"Yes they do explain everything. The er diagram, use case diagram, relevant tables explain everything."
0,Excellent use of visualizations. They already had an overall flow chart and this time additional tables and UML has been added. Best of what I've seen.
0,The team has communicated their design clearly via use-case diagram and a class diagram with a description of various database tables involved.
0,Necessary diagrams are included.
0,They have used apt visual aid like UML diagrams and screen shots
0,"Yes, the design is simple and feasible."
0,The design has been explained in a simple way. The team has explained the design using use cases which is easy to comprehend.
0,"Yes, easy to understand."
1,The design appears to be simple. However any code modifications is not mentioned yet as work project might not have started so far. it would be nice if a list of files to be modified were added.
0,YEs based on the proposed solution it appears to be simple as possible.
0,The design is simple and quite comprehensive covering lots of methods of searching.
0,"Yes, the approach described in the design document is easy enough to understand. They have also backed their decision to go with the second approach with appropriate reasoning."
0,Yes it is fairly simple
0,"Yes, they provide solution for different problem situations."
0,"Yes, the design is appropriate."
0,The design appears to be sound and clearly indicates the proposed code changes.
0,The design appears to be sound. It is really well structured. It is easy to follow. It clearly states the changes to be made and the files affected by these changes.
0,Yes it follows appropriate principles.
0,Yes the proposed changes make only required additions.
0,The design follows appropriate principles and patterns as required
0,"With er diagram and database details, the design looks good."
0,Their introduction and problem definition are clearly enough to explained the changes.
0,"Yes, the problem definition and the proposed solution are pretty clear. They also provide some diagrams to explain their project which is helpful."
0,The author has explained extensively about the changes to be made to the system.
1,"The documentation looks great as a high-level design document.
Low-level technical details(code level) should also be covered."
0,The authors have prepared the design document quite well.
0,"The design document is really well written. It clearly describes what needs to be done, how it needs to be done and what code changes need to be made. The files and tables affected are clearly listed."
0,They have documented it in a very rehearsed manner
0,"Great documentation. Tbh, the best i have seen yet."
1,"The changes to be made to improve the existing system have been adequately explained in the design document. The filters by which the data needs to be curated have also been stated. However, it would be better if they started by giving a short description of the problem statement and then going into specifics."
0,"Yes, changes to be made are clearly explained"
1,"The authors have visually represented the system by depicting the method through an ER diagram. However, the diagram is a little high level and does not completely explain the flow of the system."
1,"I feel the diagram is more complex, team could have gone with some usecase/UML/CRC diagrams"
0,There is an ER diagram which defines the relationships in the system.
0,Not required for this project
0,The E-R diagram seems to deliver the task
0,"The ER Diagram is very well done. It encompasses all the classes and their attributes.
Also the use of different shapes like diamond, square etc is great."
0,The diagrams are succinct and well-understood.
0,The team has added sufficient diagrams for the reader
1,"The diagram show relationships between different models involve in the project, helped to give a clear vision of what should be implement. But no implementation design is visible."
0,Yes they have provided an UML diagram which follows convention and explains their approach
1,"The authors need to provide more detailed procedures about how they going to implement their solutions, instead of the results after they done it."
1,"The author has not yet presented how the work is going to be done, as work on the project might not have started yet."
0,"Yes, the changes are completely feasible"
1,can't say in what file they'll make change as its not specified in the document. You can add what changes you'll be making and explain a little more for better understanding.
1,They didn't add the code change details or the files in which they might work. That's still fine as those details can be filled once the implementation is done.
0,"Overall, the design proposed seems good."
1,"Code snippets are not mentioned, but design is properly done."
1,need more detail of design to show any future suggestion
1,"The authors explain the project pretty well, they also provide a diagram to show the relationship between different sets. However, the solution can be more detailed and maybe cover some edge cases."
1,"The changes proposed by the authors are elaborate overall. They have defined the changes extensively. However, the ""Search for Reviews"" section could have elaborated more about the search functionality. The authors could have explained what could be searched and how the search functionality can be used a little more elaborately."
0,Good explanations. Easy to follow.
1,Team has given information on how it will work after the the project is done. Could have given more detail on Design using UML diagrams and Files invovled in the Project
0,The changes proposed are good and clearly meet the objectives of the project.
1,"The authors have proposed changes that they are planning to implement. However, they have not included how they will go on to implement these changes."
1,it could be better if you tell in which files you'll be making those changes and if you'll create new functions or make change in existing functions.
0,The proposed search features are good. If all of them are implemented it should more than suffice.
1,"The explanations seem very clear. Although, splitting the ER diagram into 1 or 2 more sections would have made the design simple to understand in my opinion."
1,search questionnaire and search reviews don't have detailed explanation of what should be done.
0,The quality of explanation is good and adequate.
0,"Yes, the design incorporates all of the functionality required and also gives the possible solutions."
0,The design implements all the defined functionality elaborately.
0,"Yes, almost all types of search functionalities are covered."
0,The design incorporates all the basic functionality.
1,The writeup does not talk about the functionalities . However they include what is missing and what they will include.
0,Yes it does. They have explained the propose solution as well for each issue.
0,The design document covers all the possible cases and should be fine.
0,"Yes, they've included all functionalities."
0,"All functions required are stated in the design document, which include search for user, assignment, questionnaire, and reviews."
0,Yes everything is incorporated.
1,"The project purpose and possible solutions are clearly described in this design doc. However, the author only talked about the solution but no exactly what they need to do to implement the solutions. Also, there is no testing plan."
1,"Project purpose and the proposed solution is defined in the documentation. However, the test plan is not stated in the documentation."
1,"The design document describes the problem statement and the expected flow.
But the approach section doesn't have any technical implementation details. It just explains the flow that is going to be implemented.
Test plan is missing."
1,"The document clearly states what is missing and how they are planning to implement that thing , they state how many new criterion are they going to add to the search feature, However, I would suggest them to include how will they implement it. There is no explanation of how things will be done."
0,The document explains what was asked for
1,"test plan is specified, but UML is missing. They have added the ER diagram though, which i don't think is required here."
1,"There is no mention of testing, also code change related details have not been included.
Otherwise the document is very good."
1,"The design doc is well written , but they haven't specified any test plans. They've explained the steps well, but haven't written anything about tests."
0,The document is well structured and provides all required information.
0,"at current state, the design doc has project problem, project solution, and design diagram, and each section has detailed description of the project."
1,I'm afraid there is still no test plan in the second round.
1,"A test plan is there without any details, just the files which will be modified or added are given"
1,"There is no test plan included in the design document. Actually, there should be a lot of tests need to be done for this project. From the UI, controller to model, the project should include test plan cover all these aspects to make sure the function can work as intended."
1,The test plan section included in the design document does not provide any content. It could specify the various scenarios considered and describe how each functionality could be tested.
1,The team included a test plan section is the documentation which is currently blank. the team should include the automated and manual test scenarios in the document.
1,The test plan section in the doc is left blank. The authors have not stated if the project requires any testing or not.
1,"There is only a title for test plan, which could be in a great detail."
1,There is no test plan. The section is left blank.
1,need to include test plan
1,"No. Team did not mentioned anything under Test Plan.Team should work on this part of project as well, as manual testing will not help to check all the corners of the complex project."
1,This section is still blank.
1,Test plan is missing
1,Please add a test plan to the documentation in order to make sure that the test plan is covering the code changes.
0,"Yes, the flow charts are complete and readable. All cases are included."
1,"UML and Class diagram are needed. 
If the screenshot of the same functionality was given then it would have been better."
0,"The diagram is logistic and it's easily to tell the logic behind the changes. By reading these diagrams, I can get an understanding of this project quickly."
0,The use case diagrams provided to describe the role of each user through the flow and specify how each case maps to another in order for the desired functionality to be achieved.
1,The team has include the use case diagrams for all the scenarios related to the requirement. Some UI mockups would have helped othwewise great work.
1,The use case diagrams are understandable but I think images of web pages will make things more clear.
0,"Yes, they use a lot of charts to explain the use cases. Great job!"
0,They have made some UML diagrams which could describe the changes.
0,"Team has provided good amount of use case diagrams, which actually are heart of the whole design doc and explains the design and approach well."
1,Diagrams are still overly large.
1,Flow charts have been used but no UML or screen shots
1,"Though not much of design has been giving but as per the functional diagram given, it appears simple implementation"
0,The design appears simple to be executed based on the procedure specified and the list of diagrams given that it justifies the implementation to be carried out.
0,The design appears to be simple and straightforward to implement. The team has also included all the files that will be changed to achieve the desired results
1,The design seems simple but it is unclear on the implementation section. The authors can add more on how they plan to add new code or modify existing implementations to achieve their goal.
0,"Yes, the design is very simple and easy to follow."
0,"Yes, the design appears to be very simple"
0,"Yes from the diagrams I could say, design and design flow is simple enough and team has well understood the changes to be made."
0,Looks very doable
1,Not much explanation given
0,"As per the documentation, the design seems simple."
0,The design is sound.
1,Design concept seems promising but a brief introduction about how each module will be implemented for both reviewer and reviewee is missing.
1,"The details are not enough, so it is difficult to tell if the design follows approbate principles. The diagrams covers most of changes they need to make."
0,The design seems to be clear such that it provides the implementation procedure to be followed to include the feature of adding student generated questions to the rubrics.
0,The team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement.
1,The design flow seems simple from the use case diagrams but I cannot review the principles part as it is not adequately explained.
1,"It looks like sound, but I think the authors could add some principles and patterns which they may use into wiki."
1,"Well, not much information has been given on the wiki page. Though they have put some UML flow diagrams which give us an idea of the flow."
1,"Design doc does not explain the approach to resolve the issue to be taken well. As i could see only 2 lines of explanation.
Team should explain the design more clearly for naive users too.
Team has not used any design principle."
1,Design plan has not changed since I last reviewed. A bit more detail would still be nice
0,The desgn looks okay
1,"The design seems good. However, it would be better if the author can mention the design principles and patterns followed in the documentation."
1,The explanation is adequate. I would suggest that the design of the doc be more explicit. It may include some sub titles and the font shoule be of different sizes to emphasize some parts.
1,Authors have given a brief description of the subclass of Questionnaire named SupplementaryReviewQuestionnaire that they are going to implement but it would have been better if they have provided how and what model dependency needs to implemented to achieve the goal.
1,The team only provided the flow diagram to state the logic they will use when they make changes but did not provide any details about what changes they will make and how these changes will be made. The design should be more detailed to explain the changes step by step.
0,The Introduction and Proposed Solution sections appropriately describes the problem and the approach to resolve the issue. The changes proposed can be concisely implemented into the system. They have enlisted use case diagrams for the entire scenario to be added to the rubrics.
1,The team has included all the details required to implement the given requirement. The documents lacks the changes the changes that will be made to the system and also the design of the changes. the document just included the list of files that will be changes to achieve the desired result.
1,"The authors have provided use cases for creating new subclass of Questionnaire, SupplementaryReviewQuestionnaire. However, more details can be added to the implementation section such as what new methods will be doing and test plans."
1,"The authors used a lot of charts for use cases, this is great, but they only explained a little for implementation, which could be explained in a great detail."
1,Just a small explanation of the proposed solution has been given. They could clearly explained more.
1,"Team did not explained project well with the description.
Diagrams do explain the approach, but for a reader to get the overview but text description is also important.
Team can work on adding text description.
Same had been suggested in the last review."
0,Good additions on the purpose and use case of your work.
1,"The explanation is inadequate, needs more textual explanation of the problem and approach"
1,authors adequately explained the changes to be made to the system but it would have been better if they have provided how and what model dependency needs to be implemented to achieve the goal.
1,The flow charts are good and help a lot in understanding the work. Again. it would be better to explain the abbreviations.
1,"Diagrams for use cases are given properly, but the class diagram is missing."
0,The diagrams are clear enough to help me understand the flow of the project.
0,The team did a great work in explaining the requirement with the help of flow chart which helped in better understanding of the requirements and proposed design.
1,Use case diagrams explain the requirements properly but no system design related diagram or mock ups are given.
0,Visual aids are great.
0,"UML diagrams are drawn well to explain the flow. So, the diagrams help in explaining the project flow."
1,"Team has majorly include diagrams for the code change and algorithm flows.
Team should add UML diagrams to explain flow of the application change, sequence of actions, actors involved."
0,"Yes, gives clear understanding using the use case diagram"
1,The diagrams are very very large on the webpage. Consider making them half the size.
0,Yes the UML diagram have been correctly implemented and help in understanding their approach
1,A use case diagram is provided in the documentation. The team should add a class diagram as well to give an idea of the low-level implementation.
1,The design has explained the use cases with proper diagrams but design to implement them is not absent.
1,Not detailed design was provided. These information was not included.
1,The changes are not yet suggested in the documentation. Only the files that will be changed are mentioned.
0,No problem found.
1,"The flow has been explained through UML diagram. But, the proposed solution has not been given."
0,"1. Team technically understand the change and proposed solution does not lead to adding methods in wrong classes.
2. New design should not make the code smelly.
3. Changes are logical and proposed solution is reasonable enough. No gem required.
4. It should not increase response time.
5. No, the plan is nice and should be taken forward."
1,The design has explained the use cases with proper diagrams. Although more information is required to see any of the above-mentioned issues.
1,"1. The grammar in introduction may need improvement to be more understandable.
2. For abbreviations, it would be better to give explanations to help others understand."
1,Have explained the problem and its functionality is described but missing proposal for code changes.
1,The team only provides use cases. These cases gave me a brief insight of the flow but more literally explantation may need.
0,the team has explained the implementation design/strategy in detail. the design was explained with all the required details and was very easy to understand.
0,The chart is very clear.
1,"As mentioned above, the document lacks a lot of details. The proposed changes have not been mentioned."
1,You can explain more on what actually are you planning to change.
1,"Design plan of the document only explains algorithm or flow for the code change.
Team should explain the changes from existing system  to proposed solution with some texts."
1,These explanations feel kinda minimalist
1,The solutions and implementations have very little explanation. Even though the UML are helpful they should provide more text
1,The quality is of explanation is good and easy to follow. The team might want to add some low-level details for the code changes.
0,The design has pretty much covered all the requested functionality.
1,"The deign gives some use cases for this project, but compared to all the functionality required for this project, it is not enough. More detailed description about the design of other things need to be added, such as model, view."
0,the team did a great work in understanding the requirements and have included the design for all the requirement mentioned in the requirement document.
0,No design provided. Use case diagrams have the functionality explained.
1,"Well, a small paragraph on implementation has been given, but that does not quite serve the purpose. Though, there are UML diagrams which explain the flow."
0,Yes it incorporates all of the functionality required
0,"Yes, they are trying to incorporate all the requirements"
0,"Yes,  Design incorporates almost all the functionalities that should be tackled as per problem statement."
0,The design has pretty much covered all the functionalities in the doc.
1,It gives purpose and design but no test plan.
1,"Explained the project and its purpose with the design and files that need to be changed. 
Test plan section is created but no description or plan is given."
1,"Detailed design and test plan lacks. For introduction part, the explanation is not clear enough and a little bit confusing. It is better to add more explantation about what the project is and point out the exact purpose clearly."
1,the project describes the project requirement in detail. the project statement is clear. the team has also included the design/flow which they will be following in order to achieve the desired results. the testing strategy is currently missing from the wiki. the team should inlclude the test plan in the documentation.
1,Test plan missing. Links section empty(placeholder could have been provided or don't mention it at all). No design proposed.
1,Testing plan is empty.
1,"Here, the most important thing, the problem statement is missing. Secondly, no test plan has been mentioned. So, this makes the document incomplete."
1,Can elaborate more on the problem statement and the approach that you are planning to take
1,"Team needs to work upon adding more content in the document.
Project design needs to be explained more with text and bullets.
Team should add Test Plan."
1,"Test plan is blank...
The diagrams are good but a little more writing on what you are planning to do would have been nice"
1,The issue and the it's implementation has not been explained that well especially the project design and testting
0,Yes. Functional tests with scenarios provided.
0,The design doc includes the test plan which covers changes in the functionalities.
0,The test plan is complete. The team plans to test the two possible cases:1. When the review is blank. Response should be no review in text box.2. When review is present response is the result of suggestion metrics analysis. The team is right in testing just these two cases because they should not test if the API itself is returning a correct response as that would be against testing rules.
1,"The design document has incorporated test plans, but they haven't been explained neatly. Only the skeleton for the tests has been provided, they've should have at least added one actual test code for the reviewer to verify."
0,Test cases have been added.
0,"The use cases appear to offer a quality, general test approach to see if their design does what it should."
1,The document mentions the detailed test case that needs to be done but not how it will be done.
0,I think more tests can be added
1,"There is a test plan for part one of the problem state, however no implementation plan or test plan for part two."
0,Yes UML diagram is provided and it is detailed. Flow diagrams explains how suggestions will be given.
1,"The visualization includes a screen mock-up ""Analyze""  button which will implement the algorithm and produce the output. However, there is no mock-up of the screen of what will the output be like. The flow diagram is highly redundant according to me, as it does not portray any additional information about the design. I would suggest them to provide a sequence diagram of the algorithm methods, so as to illustrate their changes."
0,The UML diagrams clearly descibes the design of the solution. The screenshots explain changes required in the system adequately.
0,The screenshots clearly display where the output would be displayed.
1,"There were mock-ups of how the Analyze button would be displayed along side each rubric, however there is no mock-up for how the response would be displayed.Suggestions: I would like to see where and how would that response be displayed because from the flow diagram the response seems to be quite big. I would like to also know if the team is planing to display all the components of the response from the API or just a few."
0,"yes, very well explained."
0,"The use of visualization is not pivotal for this task as it can be explained theoretically as well. But still, the team has made an effort to present the task with help of a flow diagram."
0,"Yes, this team has made the best use of visualization tools that can be applied to their project. They have clearly shown wireframes of the current response page juxtaposed with the expected state with the Analyze button next to each rubric. The document also includes the flow of the project represented as UML diagram. Once the Analyze button is clicked the request text is sent to the suggestion detection algorithm. The API returns the response which contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words."
0,UML diagram explains the changes.
0,The program flow diagram and an explanation as to why there is no UML diagram also helped to cement my understanding and set my expectations.
0,the screenshots of the Expertiza system are very helpful in understanding the problem and the solution
0,The Flow diagram mentioned in the document clearly explains the changes need to be done.
0,The project does not necessarily need diagramatic explanations but UML diagrams have been used which show implementation plan fairly well.
1,Can't say as code is not visible.
1,"The complexity is again a big unknown to me, as they have kept the algorithm as a black box. It is unclear where the algorithm changes are to be implemented, if it is in a controller, and if yes, in which controller. I suggest the authors to provide internal details of the algorithm in order to understand their proposed solution better. As of now, I am clear about their input and output formats, however I would like to know which functions do they interface with."
0,The design appears very simple.
0,The design is as simple as it could be since the flow of logic is pretty linear and there is no scope of complexity. The changes also seems to be restricted to just one file which is good and in keeping with sound principles.
0,yes it does appear to be simple as possible.
0,"Yes, the design is simple and clear. The task is to integrate a web service which returns a result in JSON format."
0,"Yes the design is simple and illustrated well with the use of wireframes showing the current, expected state and UML diagram showing the flow diagram. It depicts that once the Analyze button is clicked, the request is sent as JSON which contains the text typed by reviewer in the segmented textbox to the API which generates the suggestion metrics. The response contains the suggestion metrics like sentiment score, sentiment tone, presence of suggestions, chance of suggestion, total volume of text and volume of text without stop words."
0,"Yes, the design appears to be simple."
0,"The Requirements were distilled down to the fewest simple terms possible without over-generalization. It felt like they just gave me the tl;dr statement without any fluffy words to waste my time, and also feels like they have a strong grasp over what they are expected to accomplish."
0,"Yes, the design in its current form seems straight forward."
1,"Keeping the suggestion detection algorithm as a black box, as stated in the design document I will comment on the input and output to the algorithm. The input will be a text block of the review comments to the algorithm, and the output is consisting of different fields such as sentiment score, sentiment analysis as positive/negative, suggestion as present or absent. However, it is unclear to me as to what basis (the suggestion detection algorithm details/explanation/high level overview) do you classify the data into suggestion classifier."
0,The design appears sound.
0,The design doc is sound and I believe no design patterns are required for this project.
0,"The design is good. However, there is no scope of using bad principles since the number of files that will be affected are minimal and restricted to just 2."
0,yes it does based on the proposed solution.
0,"Since the task is to integrate a web service in the existing system, the design mentioned is sound and reasonably primitive."
0,"They explained from their requirements and in their flow, that they only need to plan to edit the View, so there is no need for a UML."
1,The document does not mention the name of the design pattern used but clearly mentions the steps to be done in order to implement the required functionalities.
1,"The authors mention within their UML diagrams section that they are making only HTML changes, however, they have still not explained how the requests will be sent, no explanation has been given yet on how the team intends to implement timing the response of the API."
0,Very detailed and precise. Solution explained thoroughly.
1,"The authors have worked well since the last review and incorporated some of the suggestions. They have now finalized the input and output formats. However, I still am unsure about the algorithm implementation they have proposed. They have kept it as a black box, which makes the design quite inadequate. It becomes difficult to review if their methods, classes are in the right direction or need any modification. They should have at least given a high level overview of the algorithm. Also, I have observed that the additional comments box also contains valuable suggestions many of the times. Please mention if you have considered the additional comments box in your analyze functionality."
0,The authors have adequately explained changes made to the system. They have explained the problem and proposed solution clearly and supported it with appopriate diagrams.
0,The changes proposed are well explained and clearly indicate the intended output.
1,The authors have given sufficiently good explanation for the changes to be made to the system. They have explained which files they will change as well as the flow of the project.One thing that they have failed to mention is what API are they planning to use. I would like to know that as that would be a key piece of information for this document's completeness.
0,yes they have explained it very well.
1,"The authors have explained the scope of the project pretty well. But as I mentioned in the earlier review, a whole paragraph on the background of expertiza is not required, one or two sentences would have sufficed."
0,"The authors have lucidly explained the changes that are to be made to the system. They show the current state of the system and the expected state which includes a new button to Analyze the review content in the segmented text box. The authors have specified 2 files that they plan to modify namely the view file response.html.erb and a partial _self_review.html.erb. The team clearly show the format of the response popup with suggestion metrics that capture sentiment score, sentiment tone, whether suggestions are present or not, chance of suggestions, volume of text and the volume of text without stop words. They also propose to improve the response time of extracting the output from the API.One suggestion is that the team could have touched upon the working of the suggestion detection algorithm though it is not part of their current implementation. They do mention that it is a black box and have included a link to the deployed NLP project for suggestion algorithm, where users can test the suggestion metrics generated for custom text."
0,Good work on adding UML diagrams. Now the problem is very well explained.
0,"I cannot remember what the explanation looked like last week, but the read through this week felt very clear. The organization of the article felt like it followed the logic of a design project. The problem statement felt like it was reduced to a clear, concise, set of requirements that are attainable. The addition of the program flow diagram and an explanation as to why there is no UML diagram also helped to cement my understanding and set my expectations."
0,they have also added the UML diagrams which makes things a lot more clearer
0,Yes. The authors do have an adequate explanation.
1,"Wireframes have been given stating what the end product will look like. But I did not find any UML diagrams or tables. 
Suggestion: The team could have mentioned use case diagrams or a flow chart explaining the flow of the functionality."
0,Adequate diagrams are given. Explanation of problem statement done well.
1,The team has done a good job trying to show with pictures what their changes will look like in the front- end. No UML has been provided.
1,"The authors have provided a mock up screen of the proposed solution. which clarifies how their solution will look like. However, the use of visual aids seems to be inadequate since, they have not added any class diagram, use-case or sequence diagram to elaborate their solution in depth.
Suggestion:
You might want to add a diagram for your proposed design pattern as suggested above to improvise your write-up"
0,It would be better to add more diagrams.
0,The screenshots posted give a clear picture of the intended output. It would be nice to have a design diagram.
1,"screenshots are added, which are enough to tell what they will be doing in the front end. a bit more can be explained on backend part by giving code snippets."
1,"The team has used screenshots to explain their plan, but haven't used any diagrams, like UML, or flowchart to describe their flow."
1,"The team has included 2 screenshots of the review UI. The first one depicts the existing look and the 2nd one shows that they plan to include a new button that is responsible for analyzing the segmented text corresponding to each rubric where the student has reviewed and also display a pop-up message showing the results of suggestion metrics like volume, sentiment, suggestion, praise and criticism metrics. 
The team has also shown the user story in Connextra format and also described to scenarios- one happy path and one where no text is typed into the segmented text box input. 
The team could have made the document even more visually palatable with flow chars / UML diagrams for Use case or Sequence diagram to support the feature and the scenarios they plan to implement."
1,UML diagrams are not provided. Please add it.
1,UML diagrams are not included
1,The mockups do explain where the team intends to add the 'Analyze' button. It however makes no explanation of where the analysis will be shown.
1,As the design document section is missing I cannot review the quality of their proposed design.
1,More effort should be expended on the design.The current explanation talks only about changes in the view. It would be better if the solution is explained at greater depth.
1,"I think the files that the authors plan to modify seems to be quite appropriate. As to the 'smell' of the code that can be ascertained only when they have started writing the code. So far though the design seems sound.
There have however been no mention of the existence of any gems. I think the authors should explore that avenue as well as that would probably simplify their task. For example:- I found the gem sentimental that categorizes the phrases into positive, negative and neutral. I think this is something the authors can look into."
0,"2 html files require change, i don't think it will affect anything."
0,"The design appears to be sound, and wouldn't conflict with the existing classes or methods."
0,The design seems to be following DRY principle.
1,"Design appears to be sound, however, it is unclear where the NLP algorithm is supposed to go.
As in, will the 1st iteration use another service to analyze with the button, and then a 2nd iteration will add the local NLP algorithm?"
1,"A simple enough explanation has been provided for how the functionality will be working. 
Suggestion: I feel that the approach that the team will take to implement the functionality should have been explained more elaborately. For example what different possible methods will be implemented. Or how the web service will be used, or what kind of data the web service will provide for suggestion detection."
1,More explanation on how to proceed with the implementation could have been added. Could have also added technologies to be used.
0,The explanations are lucid.
1,The current explanation talks only about changes in the view. It would be better if the solution is explained at greater depth.
0,The explanation is good and clearly indicates the project objectives.
0,"The authors have mentioned including 'Analyze' buttons for sentiment analysis of different parts of the comments. I think the rationale for this is very good because if they were to send all of the comments at once as input to the API, the results would be a mix of the sentiments of all the different comments and would therefore not be accurate. Also this way, I think that the response time of the system would not be affected by a whole lot."
0,changes are explained well. suggestion detection algorithm an be explained a bit more or how exactly you will be using it. probably some code snippets would help explaining that.
0,"The explanation is pretty good, I particularly found the images explaining what all they are going to add pretty intuitive."
0,Please add more information on the NLP algorithm team is trying to use.
0,Add a button to these questions to analyze them for their helpfulness. Seems clear to me.
0,I am able to understand the purpose of the project.
1,The explanation of how the received data will be stored/presented is something I would suggest the team to add. The design document also misses out on where the data will be presented in the view.
0,"The design document incorporated all the functionalities that the project is supposed to be implementing. 
No suggestions."
0,"Yes, they have discussed about all the functionality"
1,"The authors have provided a high level solution to the problem statement. 
They have mentioned that they are going to use an API for suggestion detection, but have not yet identified one.
Suggestion:
You can survey on the existing APIs and discuss about at least two of them in depth and specify which one you feel is more compatible with expertiza. This will improve your write-up significantly."
1,The design incorporates most of the functionality but it would be better if the actual design is discussed more clearly.
0,The design incorporates most of the functionality required. It would be nice to have a design diagram.
1,As mentioned before the document is good for most of the part except that key aspects of the implementation are missing which leaves me wondering about how exactly they are going to do this. I would like more details on this so called 'API'
0,yes all changes are incorporated and explained well.
0,"Yes, the design document incorporates the plan to implement the functionalities as stated in the problem statement."
0,I could not spot the problem statement of the proposed project in the Google doc containing the list of Problem statements. But on reading the team's design documentation on the wiki page I'm quite satisfied with the functionality that they plan to include. In addition to elucidating the main functional requirement of the project namely- the implementation of the suggestion algorithm the team has also proposed a non-functional requirement of improving the performance and response time of the time it takes to generate the suggestion through the web service.
1,Few information is missing like specification on NLP and how exactly the implementation would be. Idea is fine but add more details to it.
0,"Yes, the wiki appears to incorporate all of the required functionality. We want students to know if they're giving helpful feedback, and we want the NLP algorithm to be local to the Expertiza project to decrease its reaction time. They have at least shown that they are going to add buttons."
0,"Yes, I think the document includes everything as expected."
1,The design document mentions nothing about evaluation of how long the API takes to return with a JSON.
0,"The design document gives details about the problem statement and gives an idea about what is to be done in the project. It specifies what files will be modified and the test plan also contains 2 scenarios mentioned.
No suggestions."
0,The document is complete and very clear.
1,"The document specifies the problem statement and the ""analyze"" functionality they want to incorporate. However, the design document seems to be incomplete as they have not talked about the exact identified functionality i.e ""analyze"" and the design document section is empty.
Suggestion : You can talk about methods you want to add or existing methods you want to modify and how.
I think that you can remove the expertiza introduction section as mentioned by the professor."
1,Project purpose and testing plan are nicely explained in the design doc. It would be better if the project design is more elaborateive.
0,The design doc is complete and clearly indicates the project objectives. The test plan indicates what aspects are to be tested and screenshots of the proposed analyze button are also posted.
1,"The purpose of the project is very clear and well outlined.
The project design seems to be barely mentioned. There have been mentions of the word 'API' but not which one. So reading the doc I have no clue of how they are going to implement this. However I do know the files that they are going to modify.
The test plan has been written in the form of cucumber user stories. I am not entirely sure if it is the correct approach."
0,"looks great. test plan , screenshots are all given.
uml is missing but i don't think its required as the changes are in html."
1,"The design document contains some extra information, such as a whole paragraph about expertiza, which I think can be skipped and more importance should be put on the design part."
0,"The project documentation looks complete with clear details about the purpose- to enable the students to better analyze their review based on the suggestion metrics (like volume, sentiment, suggestion, praise and criticism metrics). They have delineated the design that includes the files that the team proposes to change (the view- app/views/response/response.html.erb and the partial app/views/submitted_content/_self_review.html.erb), the screenshot of the existing UI of the review section and how the UI would look after the project with the inclusion of a button to analyze and they have specified that a popup displaying the suggestion metrics will emerge when the button is clicked. 
I specifically like how the Test plan includes their feature in the Connextra format. They have mentioned 2 scenarios- one where the student clicks the button without entering text in which case the popup alerts the reviewer saying no text for analysis and the regular scenario when the user clicks the analyze button after entering text in which case the popup displays the suggestion metrics.
I wish to suggest an additional scenario where the user can intuitively test the quality of the suggestion metrics, based on the review input. Like for example, there can be test cases which show that the suggestion algorithm detects generic reviews that might be seemingly relevant to the topic but add no customization to the project being reviewed (like how some reviewers menially copy paste the same format of the review to all projects with just minor changes).
Overall the team has done a great job with the documentation and I look forward to see the implementation of this project in the upcoming review."
0,Good job on UI and test cases. Kindly add UML diagram.
1,"This seems complete to me. They have the introduction with a purpose and problem, a ui mockup, and use cases. It does seem odd that the use cases are listed in the test plan."
0,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A UML diagram may prove to be useful.
0,The design data includes most of the important information required to understand the teams plan.
1,"The test plan is not included in the design document. While the instances of testing are certainly mentioned, e.g. ""specific functionalities could be tested by writing a custom html file and then running it the similar way."" and ""Finally, we’ll test our code by enabling the blob API."" the authors do not provide an extensive discussion of specifically what functionality is going to be tested."
1,It would have been better if a test plan covering changes made to the system was added to the design doc.
1,The document does not include any test plan
1,"The test plan is clear but shallow. Finer grain tests should be described, not simply functional tests."
1,"hough the team have explained their work pretty well, the have not included a test plan. It is an important part of the project and should be included"
1,It would have been better if some screenshots and UML diagrams was added to the design doc to better explain the functionality.
1,The design does not include any kind of diagram. It would have been better if a flowchart or a class diagram could have been included in the document.
1,"The current document does not include a visualization tool- inclusion of such a tool would have made the document more readable.  Nevertheless the link to the Wiki of the previous document includes a flow diagram that clearly outlines the code flow of how the control flows from the incorporation of OffScreenCanvas web IDL file to its Rust implementation in OffScreenCanvas.rs, to the DOM implementation and finally to the renderer."
0,No diagrams are required for this project.
1,No new visualizations were added for the fourth part of the project.
1,"No, they didnt use any visualization."
1,No there is not any chart.
1,A suggestion would be to add some visualization about what the offscreenCanvas does would be helpful.
1,It would be nice to see a mockup of the off-screen canvas.
1,"Though the team have explained their work pretty well, the team should think about adding a few diagrams to better help in the understanding of the project. Currently the team have not used any diagrams."
0,The design appears to be simple.
0,"The design feels simple and not much different from the one I saw in Round 1, in my perspective because I have already reviewed the project in the previous round. But, to a new reviewer it might not be that direct at first as they need to understand the base of the project and the first phase of implementation which is covered in the wiki document of the previous project."
0,The design seems to be quite simple
0,Simple design with the use of interface and APIs.
0,"In my view, they are simple and clear."
0,The design seems straightforward and simple.
1,not very well. lack of the use case.
1,The high level view of the solution appears to be reasonable. The problem with this design is that there is no discussion present about any principles or patterns that are going to be utilized as part of the solution. I would suggest using certain keywords to make the decisions more clear to the reader. For example the authors talk about reusing the code of HTMLCanvasContextRendering2D and WebGLRenderingContext. It would be helpful if the concrete mechanism were specified. For example patterns like Decorator or Adapter would be relevant for this case.
0,"Yes, the design appears to be sound and appropriate."
1,The authors have not mentioned the name of the design pattern used but have mentioned the steps for implementation.
0,"Yes, they have well explained their design."
0,Yes the design appears to be sound following the appropriate principles and patterns.
0,they have done this part.
1,"The authors do a great job of explaining the technical details and the api functionality of the requirements. Furthermore, they provide a list of files that are going to be changed in the scope of this project. However, the document would be more complete if the authors provided more details about specifics of changes. For example the description of high level changes pertaining to the OffscreenCanvasContextRendering2D is adequate, but it would be better if the authors elaborated on the code that is going to be filtered out."
1,The authors have adequately explained the changes made to the system. Ot would have been better if some visual modes are added.
1,"Yes, the authors have specified the changes that have already been implemented as a part of the OSS project and the proposed set of changes that are to be implemented as a part of the final project. Detailed information on the changes already made is available as a Wiki link to the previous document. This document clearly captures the implementation of the OffScreenCanvas Webidl and Rust files. The design document attached in this round encompasses the proposed design of- implementation of the OffScreenCanvasRenderingContext2D and enabling of the blob API for testing the code. The authors have also listed the files changed and to be changed, making it easier for the reviewers to keep track of the code on Github.
Though the text is lucid, lack of a visual tool- (like flow charts, tables or UML diagrams) to concisely illustrate the workflow might make it difficult for new readers to follow the functionalities proposed and the interlinking of various modules. So, one suggestion at this point is that the authors could have included a visual representation of the design. Apart from that, the document is well made and credits to the team."
0,Authors have clearly explained what needs to be done and how it would be done.
0,The document clearly mentions the requirement of the project with the problem statement.
1,"They list the files to be changed for the final stage of the project, but the description of what will be changed is still lacking. I'd love to see screenshots of added code, or an explanation of what is and is not needed."
0,"Yes, they have done a great job to adequately explained their changes."
1,"The page feel more like a project report instead of wiki page. They should not tell people to ""go through the following page"", instead they should just tell, ""the page"" is previous work."
1,"The background is clear and thorough but the explanation of the changes to be made to the system lack detail. Terms such as DOM, the Blob APi, and ECMAScript were not explained."
1,"The team has well explained the problem statement along with the application flow which makes it easier to understand about the project. They has also described the method which discusses their proposed implementation. However, it would be helpful to add more details on the design approach they have chosen.
The team has also proposed a short test plan on a very high level, which makes senses as this is very early level of the project, but its suggested to add more diverse test cases to it as it would help in handling all the cases during the development of functionality of  self review extension."
1,"No visual aids, UML diagrams, or table/screen mockups were provided."
1,"Visual aids are absent from the write-up.
Suggestions:
Use cases for email notification can be added.
Template/design of the new/modified email can be added. 
Any relevant design pattern diagram can be added."
1,Unfortunately the visual aids are missing.
1,No diagrams to refer to
1,They did not write or add proper visual aids to help readers to understand.
1,"The team has not provided any visual representation of the work they propose to do. Perhaps the pseudocode mentioned above, could instead be shown as a set of diagrams showing an example for how this fucntionality would be handled when one say 1 Review has a score disparity of more than the threshold for existing 2-3 reviews.
The idea here is not to add working screenshots, but a Low-Fi diagram would also help in making the documentation visually more representative."
1,There's no diagrams or any other visual aids available. I would suggest adding at least some workflow diagram.
1,No UML Diagram is provided so can't comment.
1,"Need improvements, can add design by adding UML diagrams and Test Plans. 
Technical details with class diagram to explain the code level implementation would have been better."
1,"The purpose, design are missing in their doc, so it not good."
0,The document seems complete.
1,"The explanation of changes is good enough that it states what all needs to be added/re-implemented, but it does not elaborate on some technical aspects."
0,"Yes, they have a complete design for testing, and include all the cases they need to test."
1,"Yes, the design includes a test plan. It’s adequate to test all functionality of the newly introduced controllers. It doesn’t talk in detail about the ways the system is to be tested and what is the exact outcome to be verified."
0,The Test Plan section suggests the manner in which the test cases will check the functionality of retrieval of a variety of reports for the assignments to the instructor. Each scenario tests a similar function of checking whether the report is rendered based on the report type.
1,The testing plan is very neat and comprehensive.  they could have handled more edge cases.
0,"Looks like a good test plan, and there is a use case diagram! Their expectations for each of the Report Strategies is clearly documented in their Test Plan."
0,The test plan is good and describes all aspects of the RSpec tests needed.
0,This test plan is simple and easy to follow good job.
1,"Tests are well covered. However, I don't see how the nicely constructed use case diagram is appropriate to be placed in the ""Test Plan"" section."
0,"Yes, the team has added a test plan after the first review. The test plan seems to cover the major portion of the changes planned."
0,Have used visualizations diagram appropriately
0,"Yes, the authors provide a UML and a screenshot to explain the class relationship and the change they will make, which are helpful."
0,No visualizations required for this project.
0,Their diagrams are Supreme. The diagram of how they plan to implement the Strategy pattern significantly helped to cement my comprehension of what they plan to do.
1,"The UML diagram is good, but the diagram in the test plan is not very helpful; I'd suggest either another UML-ish diagram or just a bulleted list of the features from the Report Controller."
0,Excellent diagrams and UI mock ups!
0,The team has done a good job with the UML diagram. They have also added details to the class diagram as was suggested in the last review
0,Easy to comprehend
0,"Yes, the plan seems simple and feasible."
0,"Yes, the design is simple and straight-forward. In personal opinion, it could not have been simpler than this. Great work on design."
0,"The design document appears to be concise in it's representation. According to the task specified and proposals described, the design appears simple to be executed."
1,"The design appears to be a bit complex, as it involves interactions with two controllers, viz. review_mapping_controller and report_controller. The changes should be checked thoroughly to not impact the existing methods of these controllers.
Nevertheless, the design is complete in itself, and the authors have tried to keep it as modular and clear as possible. A very good job here!"
0,The design document is extremely clear. They have done a very good job in the design document.
0,"Yes, the design does sound like the simplest refactoring possible that can move the Review Mapping Controller closer to a single responsibility class."
0,The proposed design is simple and no extra changes are being proposed.
0,Using the report interface to assist with specialization was good
0,Yes..
0,The design is pretty straightforward and I am able to get a complete idea of what changes the team intend to make.
0,Yes have followed all SE practices in design document.
1,"Yes, the design is appropriate. It would be better if the authors list the patterns they are going to use."
0,"Yes, the design principles incorporated is quite impressive. They have thought through the best way to accommodate the changes and wrap it up as a good design."
0,The design follows the apt principles and patterns in that the refactored version is planned to be implemented using the Strategy pattern by working on the eight different report categories.
0,"The authors have understood the requirements of each report generation clearly. They have converted report generation into a single step by providing a drop-down menu for 8 reports. For this, they have used generateReport() method. The design uses a strategy pattern to generate a particular type of report. The sub classes (strategy classes) use only required subset of class variables, and it seems as an efficient design. The strategy pattern is a good example of DRY principle."
0,Refactor functionality from a Controller helper into its own Controller where that Controller will implement the Strategy pattern. It seems sounds to me!
0,Good design principles are being used for this project.
0,design looks well thought out.
0,The design looks clear and complete and is using a strategy pattern for implementation.
0,Have Updated the test plan.Good job!
0,"Yes, the plan is clear and easy to read."
1,"Yes, the team has covered the high-level implementation changes to be made to the system. We get the gist of the files that might be changed and what is end goal to be achieved. Though, it’s not very clear what is the change to be made under ‘Separation of concerns’ section, which could have been explained better."
0,The document enlisted the crucial aspects of the project in the first stage. The team has made improvements in this stage by including a test plan section that lists the set of test cases to deal with the retrieval issue and plan on including a new controller for the next stages.
0,"The authors have done a very good job at writing the design document. Their requirements and proposed solutions are properly aligned, and their approach takes all the factors into consideration, viz. Listing the major areas that need refactoring, Changing the code, modifying the UI, making sure that the refactoring does not affect the existing functionalities. 
They have explained each of these phases with ample explanation."
0,The project involves refactoring of the review mappings controller and the authors have proposed a clear action plan. They have added a b=very detailed testing plan and also a detailed UML diagram. The authors have updated their UML diagram and also updated their testing plan after the first submission.
0,"Refactor the report_formatter_helper into a reports_controller, where the reports_controller implements a Strategy pattern to help it figure out how it should handle a given report. If that is correct, then yes, their explanation is great!"
1,"They have mentioned that they will be using Rspec framework, but have not given what tests they will be implementing and hence can not comment if tests will be shallow or not."
0,"The test plan section specifies that it does not require performing any automated tests. However, since the new functionality of adding a visual diagram, the team would modified ruby code for the functions added to the grades_controller."
0,This team did not require any tests.
1,"The test plan section is included, however, only the framework to be used is discussed. I would suggest them to include a little more brief description about what test cases they plan to include and work on."
0,No tests are required for the project as stated
0,"According to the team ""The specification of the project does not require us to use automated tests"" but they plan to test the modified ruby code or the new features using the RSpec testing framework. Overall, the test  plan sounds good"
1,"Yes, they did include the test plan, but it's not enough, if just including files."
1,Functionality features test has been included but plan for RSpec tests is yet to be included.
0,Really good visualization provided.
0,"The visualization is great, the screenshots clearly indicate the proposed output of the project."
0,The team already has mockups for their design.
0,"The sample data visualizations is good.
The way they have given visualizations for sample data is nice. easier to understand and good."
0,They have worked on their weak point. Earlier their solution does not seem cogent but I would say now they have made good progress.
0,"Yes, they have used visualization to help people understand their design."
0,Flow diagram explains the flow correctly.
0,Yes the design flow and the screenshots very clearly describes the changes made to the system.
0,"Yes, design involves google charts API and seems very simple."
0,"From the reasons provided for choosing the Google charts tool, and it's effectiveness, it can be integrated into the system functionality easily making the design simpler to be executed."
1,"Actual project work has not been started yet, so code modifications have not been mentioned yet. But the files to be changed seem appropriate for the project objective."
0,The team is using external tools to do the work and its clear and easy
0,"yes, the design is simple and easy to understand"
0,The design appears to be very simple and well written. They have explained the use case diagram very well. also they have added visualizations.
0,"Yes, the design is simple and easy to understand. I can easily know what they will do through their doc."
0,Design is simple and easy to understand.
0,Yes the design is pretty simple and inclusion of screenshot enhances the clarity of what the team has achieved in terms of the required changes.
0,"Yes, the design appears to be sound and uses appropriate design principles."
0,"The design makes use of the Google charts tool to generate visual charts for specific criteria set. Based on the design flow, it appears that the functionality can be consistently performed to generate the visual graph for the instructor."
0,The design document is good and I don't think any design pattern needs to be followed as very few changes are being made.
1,"The document is really descriptive about what work needs to be done. However, I would suggest them to properly structure the document. One finds it really difficult to understand the flow of the document."
0,System is well defined
0,yeah their design seems to be sound and neat.
0,"Yes, their design is clear and sound, and the principles and patterns are well used."
0,Design seems correct.
0,Yes the design is sound and gives a proper explanation about how their implementation would behave.
0,They have improved the document to provide a better description of changes to be made to the system.
0,"The document adequately describes the project description and proposals made. The proposed change of generating a single or single bar chart graph based on the categories selected to display the chart, can be efficiently made to the system."
0,The proposed changes have been explained in a simple manner.
0,They will be changing mostly html and erb code to create a visual interface that delivers information to instructors more effectively.
0,The authors have described what all changes they plan to do and where they plan to do it. Compared to the previous version of the design document they have now included what tools and framework they plan to work on. The design document looks complete and understandable now.
0,"The authors have explained the changes made to the system.
The design flow greatly helps to understand the flow of the system."
0,"yes, the team has well explained the changes that they are going to make. Last time it was a bit confusing but this time because of the help of the diagrams and mock UI screen, the solution seems clear now."
0,The team have a well written design document and and the authors have explained the proposed changes well. The authors have also listed each file they are going to be changed.
0,"Yes, their doc has adequately explained the changes."
0,Changes that's needs to be made has been explained correctly.
0,"The author has excellently explained about the changes that they would be making by providing the design diagram and the screenshot of the the changes that they have incorporated .Also they have mentioned about their choice of tool which is google chart and why do they prefer , so overall a good explanation"
0,Two graphs provided provide a good understanding of the process and what expected visualization should be. More diagrams would have been helpful.
0,The team has provided a flow diagram that helps to infer the structural outline of the project. The scope of the project can be perceived from the diagram.
1,Diagram for stacked chart missing from the design document.
1,"There are no UML diagrams as such in the writeup.However, there is a flowchart which somewhat gives a clear view how they plan to do the things."
1,One flow chart and one chart graph are included. I find the chart incomplete and confusing too. I wasn't able to relate how this is going to help real scenario. The better way would be to use a use case diagram or take example of our current class programs.
0,"The UML diagrams is great, which is clear and easy to understand."
0,"The UML diagram included here is a flow chart diagram , which explains the process of how the instructor will be able to see the visualization and is easy to understand the flow"
1,"No plan provided, cannot comment."
1,"Since the graphs will be constructed dynamically for the entire class as whole, the impact on response time needs to be considered in case there are a large number of entries to process as this could involve database calls."
1,The author is clear with the intended output for the project but what actual changes are to be made is not yet clear as work on the project might not have started yet.
1,"So far whatever is discussed seems to go in the right direction.However, not much research is done so far. I would suggest them to quickly start researching about how they are going to work and how will the technologies they plan to use work."
0,"The design changes as described are sound, they are mostly on Javascript for the visualization and dont potentially make the code ""smelly"""
1,"The proposed solution sounds good. They haven't really mentioned the changes in turn of programmer language. I couldn't visualize how are they going to make changes. They have mentioned few html.erb file but I think they would need put a good amount of work to implement the new feature. I think the team could have been more precise in their approach, for example, they could have included what all new methods they need to add or modify the existing one."
0,The authors seem to have studied the code well and have thought of a good plan to implement the project. They also seem to follow DRY principles while adding and changing code. Also the new design flow is quite simple and easy to understand which can be implemented without any high degree of convoluted code.
1,"Their designs are great, but some designs may be complicated."
0,Design flow looks good.
0,For Now the design proposed looks perfect.
1,Could not find any explanations regarding the changes proposed.
0,"A simple enough explanation has been provided for the functionality. 
No suggestions."
0,"The changes proposed by the team include implementing a bar chart, stacked or single. Based upon the project description, it is advised that the team look for other alternatives like pie chart that would help to span the results with a minimal look."
0,The team proposed to add a bar graph to give a pictorial view of the scores and indicate the performance of students.
1,Right the project is in its initial phase. The overall changes proposed by the authors are now very unclear about how they are going to work.
0,"The changes proposed for the Class performance is adequate and explains the files to be changed, what changes from the controller perspective and views perspective.
no particular suggestions proposed"
1,"The team has well explained what are they going to change. Though I didn't get how are they going to do the proposed changes. Since they are going to introduce a new feature, they have focussed more on explaining how to use the new feature."
0,Test plans for both of their subtasks were present.
0,Changes suggested look good.
0,The test plan seems adequate enough to show that they understand what to test.
0,"Yes, it includes the test plan with a great detail."
1,few more test cases can be added
1,Yes the design incorporated all functionality required. But more explanation is needed around which graph they intend to show.
0,They not only use use case diagram but also mock-up screenshot to help the reader understand their design.
0,The design has a good design flow diagram which is clear and concise.
1,"The use case diagram appears to be slightly incorrect. The symbol for an should be a stick figure not a rectangle. But that is a minor error. Also, the Use Case Diagram Details mention student as an actor but the diagram shows no instance of student as an actor. I think the Student as an actor shouldn't be included because in the current use case only the instructor is the primary actor and the assignment should have been submitted by the time the instructor views the scores, thus, requiring no involvement from the students at that point in time.Mention of Primary sequence in the Use Case Diagram Details seems highly unnecessary and potentially unrelated."
1,"The writeup shows very little since the work has not yet been started. Therefore it does not clearly incorporates what all functionalities will be required. However, there are some mentioned in proposed changes area."
0,Explains the different approaches with the help of use case diagram.
0,The design document has included all the functionality that is required by the project description.
0,"Yes, their design has all of the functionality that are required."
0,Incorporates intended functionality.
0,"Yes, they use a lot of diagrams to show use case."
0,Yes the design incorporates all of the functionalities
0,"excellent use of screenshots, made things very clear for me."
1,"The write-up is well written but is missing a few things - the original problem description, how will the changes being proposed will be implemented etc."
0,The visualizations used by the team are comprehensive and well made.
1,"The documentation covered almost everything from project purpose, design flow as well as some info on what files will be changed in the project. 
Suggestion: I feel that the test plan was a bit vague. Some more details should have been provided. For example- What all features will be tested. Or maybe some info about edge cases and different scenarios that will be covered."
0,The use case diagram properly shows how the addition of this feature will help for the instructor role.
1,The design document contains the project purpose and the changes proposed by the team. The design flow gives an overview of the bar graphs that the team plan to generate for selected criterias. The introduction section however should largely focus on the project description.
1,The design appears to be fairly simple. I think however there will be difficulty in implementing the GitHub metrics for latest data vs data before the submission deadlines.
0,Their design is simple and clear.
0,All necessary sections are present.
0,"With proper documentation, the problem is explained nicely and understanding of the complex problem is made easier."
0,"Their design is much simple and clear, also easy to understand."
1,The idea to involve instructors because of a 60 requests/hour limit may complicate the project. Another idea would be to update metrics with a round robin scheduling of GET requests.
0,Yes. It is thoroughly investigated.
0,"The design is concise and clear. They have added reference images of how the system would look after their changes, which properly shows the expected implementation results."
0,The design sound very reasonable.
1,"The design appears to be sound for most part of it. The linking between the different sections seems appropriate.
The only issue I have is with the mock-up in the Design Details -> Second Change mock-up number 2. I think that the bar chart is being displayed for each and every day. I feel that is not only highly unnecessary but also would be very overwhelming for the instructor to process all this information because:-i) It is common knowledge that many students do not begin projects until a few days/weeks would have passed since the assignment is posted. So that would leave the initial few days of the bar chart empty with nothing valuable to show.ii) The duration of each project varies from project to project. Assignment 2 had a duration of about 20 -30 days. This would mean that there would be about 20 bar charts for each day which would be quite difficult for the TA/instructor to process for just one team let alone for so many other teams they need to evaluate.
Suggestions: Instead of providing bar chart for each day aggregate it to a bar chart for each week or one in 5 days. And then maybe towards the deadline or like a week before the deadline you could switch to 1 barchart per day. OR Provide an option to switch between the scaling of time periods like a week, 5 days, 1 day etc."
0,"1) The authors have mentioned several approaches in which these functionalities could be implemented.
2) Their chosen approach is follows MVC architecture and DRY principles."
0,I don't see any issue in the design document. They have followed a good design principle.
0,The design appears to be sound. They have weighed their options and are using an official gem to interact with the github api.
1,Yes. The team intends to use grade_controller to show github metric which would be a good place to implement this functionality. The idea to involve instructors because of a 60 requests/hour limit may complicate the project. Another idea would be to update metrics with a round robin scheduling of GET requests.
0,The design seems to be sound. They have a sample design where they are explaining the tables and how they plan to work with them as well. The examples provided help understand how the data will be stored.
0,The authors adequately explained the changes they plan to make.
0,"Yes , excellent work done by the team. The design document adequately explains what is the problem that they are trying to solve, what is the proposed solution and how the solution would look like. 
There are enough details to in the document to understand what is being done and what changes are proposed. The document also has enough illustrations on what is the current situation."
0,1) The authors have adequately explained the changes to be made to the design document.
0,"Yes, they explained a lot for the changes. Great job!"
0,Yes. The authors have made changes to the design document and are more specific about how exactly they plan to implement the new functionality.
0,"The team has mentioned properly what changes they are doing and how they will be doing them. In the first submission they had suggested the possible approaches. Now, they are having a concrete way they are implementing these changes."
0,Both the use case diagram and the screenshot they provide helped me understand their purpose.
0,Yes the doc has use case diagrams and screen shots. this is very good and eases understanding
0,Super legit use case diagrams. Some of their pictures even had colours! I liked that!
0,Visual aids are present which perfectly helps us explain the plan authors have proposed.
0,The chart is also in a great detail.
0,The visual aids have been well put together.
0,The team has done a wonderful job in including UML diagrams and visual aids.
0,All the design looks reasonable right now.
1,class level details are missing but i suspect that can be because this is the first phase doc. they have mentioned use of existing gems that need investigation
1,"The design seems to be good. It is still not very clear of the path for implementation or the files that they plan to add and the methods in said files however that is fine considering that this is just the initial stage and not much can be said since we haven't advanced to the implementation stage yet. 
The authors seem to doubt whether they are allowed to use any existing gem. I think they should go ahead and use the gems."
1,"The design is well explained.
Need clarification on below:
1) How will this GitHub metrics will be used to grade the student. So how will the final marks for a particular be calculated using the data from GitHub."
0,"As far as I can tell, it does not appear that the authors will add unnecessary classes and potentially smell up the code base."
0,No problem found. They are trying to implement the DRY principle.
1,The authors mention gems that they could potentially use. but they do not mention where they'd be adding the associated code.
1,"They have listed various possibilities to get the task done. The Use Case and UML diagrams also help here.
Suggestion : Please add the places where you want to make/have made the changes."
0,The team explained them design very well. It is easy to follow their idea.
0,very good. authors have provided all explanations with adequate screen shots and now and after screens
0,They authors have explained it well. They have also mentioned which gems eg Oktokit (Ruby toolkit for GitHub Api) that they plan on using.
0,"They clearly understand this software design process and Expertiza than me, so I trust their judgement."
0,Explanation is quite easy to understand.
0,The authors proposed in a great detail.
1,"The authors do not mention the model they will be making additions to. I would suggest the team to consider a new controller, since adding new code to an existing controller may not be OO design."
1,"The team has proposed many changes. Although, it is not clear which approach or what exact changes they plan to make."
0,The design contains all of the functionality required.
0,The design doc does mention all of the functionality that the team is supposed to implement along with the different ways they can implement the same.
0,"Yes, as far as i understand the document cover all the functionality given mentioned. all the github metrics mentioned in the requirements doc"
0,Includes all the functionality.
0,"Yes, The document covers very required functionality."
0,Yes. Detailed UI mockups were very impressive! The use case diagrams and explanations are well written!
0,All the required part is in the document
0,"A very well written document, great job"
1,"The document is well-written. They have described the plan of action along with the different routes they would need to explore in order to complete the task at hand. They also gems that can be used and API to query if gems were not allowed.
They have a section called the testing plan, however that doesn't look like a traditional testing plan. It just shows the navigation path that different users would take."
0,The document is complete. The authors have mentioned each functionality in detail. Also the test plan in explained thoroughly.
0,Well done on adding almost everything.
0,The team is following a Test Driven Development approach. They have defined the test cases that need to be tested after the implementation. It seems to completely test the feature.
0,Test plan seems thorough and well thought out.
0,"Yes, the test plan looks good.
It covers all the functionalities."
1,"I would the test section incomplete. The authors have mentioned about 11 test cases thats all. I think that is not at all sufficient. Also missing are unit tests if any and UI tests if any. 
I would have liked mention of more test cases both automated as well as UI tests that will ensure basic sanity to the system"
0,"Yes, test plans are included"
0,The test plans are excellent. The best I have seen so far.It has accurately taken all test cases into consideration and described the layout of the final test in the form of a pseudo code. Well Done on the test plan!!
0,The test plan has been written in a very good way following the great quality of documentation till the end. It covers all the edge cases and scenarios.
0,"Yes, the document includes a test plan. There was no test plan present in the previous version of the design document but the team included the test plan in the second round. The test plan is clear and seems like it would really test the functionalities."
0,1) The test cases cover all of the functionalities that they are going to implement.
0,"Yes, they include the test plan."
0,The test plan is quite good as it covers all the test cases in the form of 11 test cases which test all the functionalities for the admin and the instructor role. It also considers the negative test cases like throwing an exception when the pending instructor tries to add more then 10 students to his/her course.
0,"They team has done tremendous job in following the test driven approach for the project implementation. They have already included the tests they are writing for the functionality implementation. They have covered the exhaustive scenarios  for the project in their test.
Their test plan is highly appreciative."
0,Test plan outlines the functionalities that the team will test and it seems sufficient to test the changes.
0,The authors have added UML diagrams as requested in the previous review and it has made a lot of difference. The explanation is much clearer now.
0,"Yes, the uml diagrams sufficiently provide visualization."
1,"Class diagrams are missing.
Class diagrams are missing.
First flow diagram looks perfect.
Second needs some modifications - the instructor login flow should not include a step to set the count limit to 10. This should have been done before only.
You should add a step to perform a check to see if the total students count is crossing the allowed limit(10).
If yes, then don't add this new student and show some proper error message to the user.
If no, then add the student."
1,"The diagrams seems to be good for most of the part. One can understand the project by looking at the diagrams itself. However, in one of the instructor flow diagram, it's given that if the instructor's status is pending the instructor will set the limit to 10. That doesn't make sense. Why would the instructor himself/herself set the limit to 10. Isn't this the responsibility of the system itself to handle this or at the most the admin?
Suggestions: Change the 'yes' branch of is pending? to loop 10 times or somehow indicate that pending instructors can add only 10 students to an assignment."
0,I loved the overall use of the visualizations which aids to the understanding of the whole doc. The formatting of the documentation makes it really easy to read and understand.
0,"The design document includes flow charts, UML diagrams and screenshots which is really impressive as it made the document easier to understand."
0,"Yes, their visualization is good. They are clear and well described the changes."
0,Proper use of UML to explain the use cases and flow charts to explain the workflow has been done. The plan is complete.
0,Yes the visualization is pretty clear and good.
0,They team has done awesome work in representing every detail possible in the flow diagrams. They have created UML diagrams which depicts the flow of the admin and students along with other actors. As mentioned earlier they have also represented the admin flow diagram and instructor flow diagram through the flow chart which makes it very easy for end user to understand the workflow of the requirements in the expertiza system.
0,"Great use of UML diagrams, flowcharts and mock-ups by the team to clearly explain the flow of their work. It is easy to understand the flow and how the end product will look like."
0,"yes, design appears to be very simple."
0,"Yes! 
The requirements are simple and the design plan clearly explains all the points."
1,"Yes the design looks simple. The use of mock up screens is good and greatly helps understand the flow that has been proposed. Good work!
How ever in one of the flow charts the check for ""Is Admin"" does not show/label  ""Y"" or ""N"" path"
0,"Yes, adequate amount of details present"
0,The design is straightforward and as simple as possible. The team has thought this project out very clearly and laid the same in the form of flowcharts and mock-ups. This has greatly reduced the complexity of the project and helped decrease the chances of clutter and confusion.
0,"Yes, the design is pretty simple and to the point. The design proposed is very clear and talk why each change is necessary."
0,The design does appear to be as simple as possible. The team have not unnecessarily complicated the project.
0,"1) The design is simple and well modularized.
2) Each method is implementing only one task as it should."
0,"Yes, their design is simple and clear enough to read and understand."
0,"Yes the design is presented in a much simpler form which gives a very clear picture of how the changes are going to be implemented and which functionalities would be witnessing the changes , also as they have provide the screenshots it enhances the understanding about the project more."
0,"The design approach seems justified and inline with the functionalities required to be implemented. They have mentioned step wise details for all the changes they are going to take.
Done a good job. No rework required."
0,The design seems to be very simple. I think the team has avoided unnecessary complications and are doing minimal changes to existing system to solve issues given to them.
0,"Yes, the design appears to be sound and well made."
0,Yes the design follows simple rails concepts and is pretty straightforward. I would like to see if the team uses existing gems available to speed up implementation and re use.
0,They have explained very well
1,"The design seems to be sound. There are a lot of mention of which files will be modified however, as I said in the previous round, there is no mention of the layout of the existing database or if the changes they will make currently will change the database.
Suggestion: Team could mention what tables are present in the database of the Bacui project. I believe this will be really helpful since most of the reviewers are working on Expertiza projects and have no knowledge of Bacui projects. At the very least the team could mention which tables the project will be interacting with along with their structure."
0,"Yes, the design appears to be very sound and follows all the principles that I know. I loved the format of the documentation as well."
0,The design seems to be appropriate and sound. It follows appropriate principles.
0,"1) The design appears to be sound.
2) Also follows proper design principles eg: for making changes to nomination and review questions, inheritance is used (inheriting methods from questions parent class)"
0,"Yes, their design is very sound, and principles and patterns are used appropriately."
0,Design is good
1,"The team has very well explained the steps they have planned to take for implementation of the functionality. They have stated every change they would be making for the Change request in details. They have also provided flow diagram for every actor involved and for every functionality they are going to implement.  However, the team has not explicitly mentioned the design pattern they are following for this implementation."
0,"Yes, the design follows appropriate principles and patterns.
suggestions: not required."
0,The authors have considerably improved on the document. UML diagrams as requested have been added.
0,"The document was very well written previously too, and they have improved it with diagrams and test. Nice work."
0,"Yes, one of the best design docs of project 4!"
1,Yes the authors have tried to explain what changes are required and what they plan to do however I feel that exact changes that they might be doing are missing. They could have listed most files that will need modification and if necessary new files that will be changed
0,The document seems complete
0,The authors have explained all the changes to be made very clearly and concisely. Each change is supplemented with sufficient diagrams and mock-ups so as to make the final task of visualization easier.
0,I think that the authors have done a really good job of explaining and covering all the changes to be made. Overall this is the best document i have seen so far.
0,Authors have clearly explained all the changes to be made and where to make them. The design document is quite clear and easy to understand.
0,"1) The authors have clearly explained the changes to be made to the system.
2) They also have given the files to be modified/added for each change."
0,"Yes, their explanations are adequately explained the changes."
0,Team has added all the diagrams and screenshots. The document is well explained and looks complete.
0,Yes the author has provided a sufficient explanation of what changes needs to be done to the system by giving flow diagrams and screenshots about what changes they are going to incorporate in their system
1,"The document provided by the team is very detailed and includes all the requirements which are suggested by the Change Request. However, the team may change tone of the document as it is instructive  right now which seems like the change request description itself. The team might also add a wiki link for this document so that it could be included in the expertiza links of existing and ongoing changes and would be more reachable to a wider audience."
0,"Yes, the authors have clearly explained the changes to be made to the system. Document is simple, succinct and easy to understand. Great use of flow charts, uml diagrams and mockups to visually represent the information is done."
0,"There are no tests included in the document, but there is an issue need to be fixed, which needs test plan to make sure it can work correctly. Also, the UI need to test to guarantee the intended results."
1,"The authors have just mentioned that they are going to do some testing since it is mostly ui based. I would have liked if they could at least give details of steps in each test scenario that could be performed to execute the case, even that is missing. This section is incomplete and would have liked if the authors could put in more effort and details on how to do this"
0,No tests needed.
0,"No, UI tests can be added here, but the team has not considered them."
0,"Since this is a UI based project, they don't need any functionality testing. the team is planning to do manual testing which is all they need to for this project."
0,"Since it's Ui project, they says they will test all the pages changed."
1,I meant to leave this blank. Kindly ignore the rating for this question as this project does not require any tests. All the changes made are CSS related.
0,no test plan section at all
0,Make sure to test each interactions properly after the design is complete.
1,"The authors provide some screenshot of the pages they need to change. It would be better if they provide more diagrams to explain their design, for example, a UML diagram about the relationship of all the class they need to change."
1,"The authors only provided diagrams to state what the UI likes now but not provide any diagrams to explain how the system will be like after changes. Especially, they didn't explain the components they will use, it is more difficult for me to understand what kind of results they intended to get after changes."
1,"The team has provided current system UI, but no expectations on the UI for this project. For an UI intensive project, I believe it’s essential to have at least a minimal wireframe that serves as the base for good design document so every stake-holder can be on the same page with regard to expectations."
0,"No, i feel that that adequate visual aids and diagrams are missing in the document. only a few screens to show. It would have been better if the authors could have put before and after details on what is being done. uml diagrams to show the flow and then justify the changes that they are trying to make"
0,Not necessary since it's a UI based project.
0,Class diagrams/UML diagrams do not apply here. But explanation with snapshots is provided.
0,They have included mock UI screens which make their proposed changes quite clear.
0,They gave all the UI interfaces they are going to make. It's suggested that they can include the origin page and the changed page which the reader can compare with.
0,"The diagrams added clearly explain which views need to be modified, but if the team could just mark the point where changes are to be made in the screenshot, it would be the icing on the cake.
Still good work :)"
0,Team has done their best in visualizing whatever design they had.
0,"Yes, the design is very simple."
0,The tasks they need to do seems simple but more design details are needed.
1,The authors didn't provide enough information about the components they will use and how they will use. It is difficult to evaluate the complexity of the deign without these information.
1,"It’s an UI intensive project, so no specific design approaches are applicable. But the team should have put it more details into the document to elaborate the changes and they choice of tools under the bootstrap framework. Like a pill or navtab or navbar is going to be used to achieve a particular look, and if one of them, why the choice. Such details on decisions should be included in the design document."
0,Yes this looks simple with several point fixes required to be done. The authors also talk about using bootstrap 4 which is good. I would have liked if they could quickly put up certain mock screens using the bootstrap.
0,"Yes, the design appears to be as simple as possible. There are a limited number of Bootstrap components being used the complexity of the project is limited and the end result appears to be as simple as possible."
0,"Yes, the design doc is simple and well explained"
1,"The design changes appear simple and clear. Only suggestion to the team would be to explain the design choices a little more. As mentioned above, give an example of how, where to use Bootstrap and Jumbotron."
0,team plans to use all of the bootstrap functions and
0,The changes are to be made in the UI and the team is planning to use appropriate design elements.
1,The design is not clear enough. More details are needed.
0,"There is no design provided in the document, as its mainly UI changes. Yet, the team should have dived in detail about their choices to achieve a particular look and feel needed. The document seems to be over-simplification of the implementation and can be improved further."
1,Yes the document mainly talks about small changes at different places in the application that are being done. I think more implementation details with ample justification are missing. if the team is using certain apis why are they using should have been mentioned.
0,There is no scope of using any design patterns or principles since this is a UI-based project and there is no scope for the application of design principles.
1,"Although what changes are to be made is explained, how they are going to be made isn't explained. However, there is no Ruby code involved just CSS styling so applying appropriate principles and patterns does not really apply in this case."
0,"Since its UI based project, their design is pretty intuitive and simple."
0,The design is reasonable and workable.
0,The team has updated their design document to include all the changes they are planning to make. This is a good improvement from the earlier version.
1,The authors only explain what needs to be changed but no specific steps. If would be better if they can provide more details about how will they implement the functions they mention in the document.
1,"For the ""manage participant"" part, the authors didn't explain how will they solve the issue that the ""add student"" button cannot work correctly after a user add a course. The document included other changes need to be made, but the explantation was not clear enough. The design used a lot of components in Bootstrap, but the authors didn't give any explantations to these components they would use and didn't give any diagrams to show what the changes will be like."
0,"Yes, there is few basic details mentioned in the document, but not adequate changes are explained. It's far better work than last round, yet the team has to give a better overview on Bacui and elaborate the problem statement."
0,"Explanations are okay , there needs to be more detail on what is being done and how the final outlook view would be. As of now not much details have been put in the document. A before and after view would have adequately shown the impact the this work will make."
0,All the changes made to the system have been supplemented with explanations and mock-ups.
0,"Yes, the authors have explained the changes to be made clearly along with diagrams"
0,The team has well explained the changes to be made to the system.
0,"Yes, they include a problem statement in this page. The statement is clear and easy to understand."
1,"The team have taken time to explain each functionality properly in the second round. They list all the changes that they wish to make in the views. However, I would suggest the team to also mark out (circle out) the area they wish to change in the screenshot of the view."
0,They have a lot of mockups showing what they plan to do
1,"Team has added most of the missing screenshots. There will be no design patterns involved in bootstrap so i'd say the document is now complete.
Only thing i would suggest is, since bacui may not have a wiki, this document can be moved to a wiki page of github repository."
0,"This wiki is dope. They analyze the requirements for the GitHub metrics they would need, and walked the reader through their design considerations. It seems like they have a thorough understanding about how to do this project."
0,The design doc is completed and gives exact information on what authors are gonna do.
0,The design doc is fulfilled and written pretty well.
0,Nice wiki page
1,The design document is comprehensive and detailed. However there are several parts where the team is not yet sure of what exactly they want to. The document misses out on mention which model/controller they will be making changes to.
0,It is extremely detailed!! Eagerly awaiting updates on implementation and on Code Snippets as and when they happen!
0,The team has done a fantastic job in explaining the design in the initial stage. They have the current scenario and what they plan to do in the project.
0,"Yes, the test plan looks good. The author lists all the cases they need to test."
1,"The test plan is shallow. It only state what features the team will test but how the features will be test, what and how many cases will be included are not clear. The team should expand the plan for each features they aim to test, including specific steps and different cases."
0,They have discussed clearly what functionalities they are going to test to make the project more efficient. I think they have made a quite descent research in the testing aspect of the project.
0,The test plan looks really thorough covering all the possible scenarios. I am personally happy with the given test-plan.
0,"Yes, there is a detailed test plan for this project. Not only basic features testing but also other more testing."
0,Team has done a good job in identifying the cases that needs to be tested. It will be an improvement if they can add details on how they plan to test each controller/view separately.
0,The testing appears to be pretty rigorous. They have taken into account cases when TA/instructor's scores should be excluded. The test cases could have been better described.
1,"There is a test plan, the tests are deep and detailed.
However, the current test plan is not enough to test the functionalities. They are just unit tests. It should be added with a tests that directed tests whether the instructor can do the same kind of review as the students, from the user 's perspective (for example, log in, do the review, etc)"
0,Yes the test plan is included.I think the tests will cover all scenarios
1,The design lacks diagrams to state what the changes they will do and how it will be like after change. It is difficult to image how the system will be like after change and what will be changed.
0,"There are visual aids included with the design, depicting the current state of the system as well as proposed icons to institute the design changes."
1,There are no UML diagrams. I would suggest them to include a test case diagram that can improve understandability.
1,There have been some screenshots however I feel like some more details and diagram could have been added in this section.
1,Team has used screenshots to show the current scenario but any flowcharts/UML to describe how they are solving the problem is missing. Adding these will make the document easier for anyone not familiar the project understand it better
1,"No, the proposed UI changes are only mentioned and the diagrams in the wiki are of the current system. Use draw.io for mockups and drawings."
1,"The diagram only stated the current scenario.. There's no final picture, no UML diagram.
The figure didn't clearly describe the changes to be made to the system.
It should be better if there's a UML diagram from the user practice side, a diagram for the design plan, and also another figure for the final picture: how dows it look like when the plan is implemented."
0,"Yes, appropriate visual cue is present in the form of screen shots"
0,Necessary visual inputs are present to aid explanation.
1,I coud see only few builds passed the Travis Cl. There are many builds that are failing and should be worked on.
0,The pull request has passed the Travis CI
1,"The build passed in Travis CI and there were no conflicts. But, some issues are not fixed like refactoring is not done and block has too many lines. These issues should be considered for a well written code."
0,Pull request build passed well and there are no issues.
1,"The build does not pass, but only because of codeclimate issues. The code written by the team, in terms of logic is absolutely perfect.
But certain conventions were not followed, such as ""proper indentation was not followed"", ""DRY principle violated"". Although these have no impact on the functionality, these coding practices are industry convention and maybe the team would want to consider giving them equal importance for the next projects."
1,Build is not passed. Build failed Travis CI. Team can work to fix suggestion given on the pull request.
1,Build did not pass. Version compatible code can be written
1,"The code is very well written as previously said. However, some test cases are still not passing and that may be troublesome if deployed onto production server. It would be a really nice opportunity for students in further classes take this up and improve the work so that they can complete the work which was left incomplete due to time constraints."
1,"The code can be readily merged into production.
1) I felt code climate failing not an issue, because their similar blocks of code were on spec files and deleting 2 different roles is the same functionality in the end.
Few places has indentation errors which can be fixed before merging.
As suggested earlier, removing the error for SQL and replacing with some form of alert box could be helpful for a future work."
0,"As mentioned above, the functionalities work well. So, yeah this can deployed on the production server."
1,"Yes.From the system and code, these code changes seem ready to be deployed in production after heavy integration testing as issues seem to be working, but github pull request shows more fixes to work upon."
0,Very well written.
1,"Writeup is written well and explained properly with good indentation, content and screenshots.
Team could have explained test plan in more brief so as to understand number of test scenarios covered."
0,They had to create a superuser who has a right to delete other users . When checked these functionalities were working upto 80% expectation. The tests written do cover the portion assigned to them and the tests are thorough.
1,"Everything works from their UI.
Their peer review plan works as intended and clearly explains how to test on UI.
There are SQL errors when trying to delete a user which is tied to some assignment. Although the team has mentioned it is out of scope of the project, future work could be to remove those SQL error displayed on pages and give a pop up / alert box, saying your user is tied to an assignment."
0,"Yes, the system works fine and as intended. The features work as they are supposed to."
0,Code works.
0,"Yes, the system operation works well. All the functionalities mentioned work properly."
0,"When open from the UI, working fine and as expected.
No refactoring required."
0,"Yes, test cases were written for admin_controller and roles_controller. The test cases increased the coverage as well. Every method in these files are tested and covers a good range of this project."
0,Good Job on the test cases.
1,The test cases added by the team pass. But overall coverage has decreased. I would suggest the team to have added more test cases for the new lines added in the controllers.
1,"Team has added capybara test. but team could have worked upon improving test coverage.
Team can explain test description in test plan in wiki, step by step so as to understand what all test scenarios were covered."
0,"Team s last commit was on Oct 31st , which was the first deadline."
0,No new code was committed during the 2nd round.
0,No Commits
0,"No, no new code was committed during 2nd round."
1,"No new code was committed in the second round. I would have really appreciated it if the team could have taken the time to add comments, and fix some ""codeclimate"" issues."
0,New code commit was not made in second round
0,The design seems simple and feasible.
1,"Actually,, the design seems not simple. Due to the ambiguous of the design, I cannot tell clearly what the four links are used to do in the first step, but it seems too many links will be used and some strange conditions need to be checked before instructors can perform a review. In addition, it seems not all the instructors can do the reviews, so there may be some errors? Description for step 2 is also complex and seems include a lot of jobs need to do."
0,"The design is as simple as possible, and described in a straightforward manner."
0,"The design appears to be simple to the best of my knowledge. Not a lot of files needed to be changed, signifying that they are just targeting specific files in order to make minimum number of changes possible not making it too complex."
0,"Yes, pretty simple. Great job!"
1,"The approach is clear, but is not clear as to what changes will be needed in the system."
0,"The design is both simple and clear.
It should be better to add another step for the comparison of the instructor review and the student review. Both as a final examination and a testing."
0,the design is simple
0,"Yes, the design seems appropriate and suitable for the case. Maybe the author could specify the patterns they use in the document."
1,It seems the authors didn't have a clear and detailed plan about how to change the current system to meet the requirement. They got the direction to do the project but still lacked details to implement it.
0,The document is very well structured and is quite easy to follow. They have explained each and everything stepwise.
0,The design appears to be sound and seems to follow all the appropriate principles as far as I am concerned. And as mentioned earlier I would again like to point out that the proposed plan section has been handled really well.
1,"I can't find any explanation for principles and patterns, maybe the authors should add them to wiki."
0,The explanations are good and the project goals are easily readable.
0,The document explains the problem and the approach the team is planning to take clearly.
0,Well done adding a lot of detail since your last submission.
0,"Yes. Since the previous round of reviews, I can see significant and positive progress."
0,The team has adequately explained all of the changes required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy in this case).
0,"The authors provide a UML diagram to explain the relationship between the classes and a screenshot to show where they are going to add a button, which are really helpful."
1,"1)     The diagram provided is a generalization for strategy pattern and more aligned to help give a simpler outlook
2)     The standards are not followed, as it should indicate the class type (as an interface) and the method implementations needed in the concrete classes
3)     The UML is high-level indication. More project specific diagram is needed"
0,"The UML class diagram helps to understand the reports involved, their attributes and functionalities. It provides a general overview about the interrelation of the seven different reports."
0,No problem I could observe
1,The design seems pretty good. The only drawback is the test plan is missing.
1,"1)     No such indications are available.
2)     No such indications are available.
3)     No, the team is trying to simply the current design.
4)     At few places, the designs seems to indicate they would like to centralize or combine processing of data, which looks like an increase in response time. Clear justification is needed to say for sure.
5)     More explanation of the team’s thought process is needed in the document to comment further"
0,The implementation planned by the team seems to follow all ruby on rails guidelines and does seem to follow the DRY principle.
1,The document does not explain the reason behind creating the new class ReportStrategy.
0,I don't see any of the above mentioned problems happening since the design matches perfectly with the objective. The topic itself is to move unnecessary code out of review_mapping_controller and hence according to the design the code will actually become cleaner and better.
0,The explanation is decent and comprehensible
1,"The explanations are provided as points which is very easy to follow and understand. Though, the need for the proposed UI change is not very clear to me. Few more details on actually how the strategy pattern is going to be incorporated in current code would have been insightful.
   The explanation on the test controller is ambiguous."
1,The changes proposed by the team have been specified in detail providing general requirements about each goal. But it does not make any specifics of the code that could help to infer the proposals with the functionalities.
1,"The test plan is present. It is broken down into separate sections for each of the five issues. Each section is further broken down into a manual and automated testing parts. While the sections for manual testing are comprehensive, the sections for automated tests are too general and do not provide a clear vision for what types of changes are going to be introduced.
I would suggest elaborating more on the technical side of the tests, for example specifying which spec files will be modified or whether or not the project will utilize RSpec."
0,"The team has improved their design by adding extra test cases and test procedures which were lacking in the previous submission. The team has provided test cases for each issue, thereby testing every functionality of the project."
0,Test plans are present and explained in detail. The tests are really in depth for each issue the team will be fixing.
0,"Elaborative test plan, which is really good."
0,The test plan is included in the document.  Both manual and automated testing test plans are given which is appreciable.
0,The test plan has all the manual testing and automatic testing to be done on each issue.
0,"Test plan is included, but it makes many references to manual tests. The tests they state could be automated in a straight forward manner."
0,"The test plan section defines the steps needed to manually test the functionalities, but I would suggest the team to also include the logic they propose to use in the rspec tests, the objects they would mock etc."
0,Yes the design includes a test plan. The tests really test the functionality and also test adverse conditions to see whether error messages are being shown
0,Detailed test plans are mentioned in the wiki which probably covers all the cases.
0,Expectations look attainable. The changes proposed are concise and crisp. Team should be able to do a good job with this implementation.
1,"the design includes test plan.Manual testing is emphasized more than automation testing.
Moreover how automation testing will be done has not been described."
0,The explanation is easy to follow. I am able to get a complete idea of what changes the team intend to make.
0,The provided diagrams are visualizations of the workflows of different actors in the context of given five issues. They further clarify the changes that are to be made in this project.
0,The team has provided flow charts that explain the working of the system. The team has provided flowcharts for each issue which is commendable.
0,"Could have included some screenshots. Otherwise, great work by the team on UML diagrams."
0,All the functionality is given for review_mapping_controller.rb along with the design pattern.
0,yes it does.
0,"As the project is on refactoring, not many functionalities to considered. Given the problem statement, it clearly indicates the design should be able to incorporate the requested changes"
0,The document includes flowcharts which clearly describe the project flow and what needs to be done.
0,The team has put UML diagrams for every issue which clearly explains the issue and the workflow.
0,"No class diagram was needed, and their flow charts and code snippets show the control logic simply."
0,The diagrams in the wiki clearly describe the flow for proposed changes to the system. We can clearly decipher from the diagrams what the intended functionality is. Good job :)
0,It has most of the functional features available.
0,The visualization provided in the form of flow diagrams in very easy to understand. However ER diagrams of main DB tables could have been provided because it is difficult to understand the data flow and inter relation between tables.
1,"As mentioned designs are well depicted and no Mock UI can be found but at this stage, UI is not a priority for the project."
1,figures are drawn but are not explained in detail.
1,"For each problem the authors display relevant chunks of code and discuss which parts need to be changed. Aside from the Issue #1072 all the solutions seem reasonable and simple.
One minor suggestion for improvement would be to use the .collect instead of the .each method for computing total_weight in validate_assignment_questionnaires_weights method."
0,The design document includes all the functionality the team is hoping to achieve. they have explained clearly what they plan to work and modify.
0,"In a way, yes, because it copied the project description, and illuminated which models they wanted to create in the refactor."
0,The document explains well how the team is planning to approach the refactoring.
0,The team has incorporated all of the functionality required for segregation including the exact reports and functions to be removed out of review_mapping_controller.rb along with the design pattern to be followed(strategy  in this case).
0,"The team has explained the issues and their solutions clearly. The design is simple, hence easy to understand. The proposed solution section is well written where the team has described the changes made in respective files."
0,"Yes ,it looks simple based on the code snippets they have given and by the diagrams."
0,The design seems to be as simple as possible. Authors have not unnecessarily complicated the approach but rather have given a simple approach for various fixes.
0,The design looks perfect. It is neither overly simple nor it is too complicated.
0,Design appears really simple. Only a couple of added lines here and there.
0,"The design proposal is coherent and easy to understand. The proposed design and steps for solution are also logical. The team have done a lot of work to think about how to solve the bugs.
Good job guys :)"
1,Yes the design is simple in nature and easy to understand. This can be attributed to the fact that their issues are quite simple in nature. They could have provided some simple UI mockups of the changes.
0,The design is very clear and helps in better understanding the flow of the system.
1,Fixes are simple adjustments to the current code. The last issue requires an addition of a full function but I think that it is appropriate to handle the bug fix as it pulls that responsibility out and keeps things nicely separated and associated for purpose.
0,The team has nailed down which parts of code need to be modified. The changes introduced in the design document are simple and minimal and do not require any extensive discussions about the appropriate principles or patterns.
1,The doc is complete except the Test Plan. A test plan would make it complete.
0,The design appears to be clear and the team has also implemented functionality to their project. It shows that the team has organized and implemented the design well.
1,"The project design and project purpose parts are pretty detailed. However, for the test part, the authors only state that they will write tests for the new controller but no detailed test plan."
1,"The team has efficiently described the problem statement and the need for undertaking such a project. Good effort. As it talks about refactoring, few more lines on the pain points of current design would have helped a great deal in appreciating the project.
The design selection is great. Apt to the problem and the UML diagram to visualize it, is helpful. The UML diagram should have been more descriptive on how the current code is to be modified to incorporate the proposed design pattern, as it was not easily to know, if this pattern would fit the current code.
Test plan is missing."
0,"All the issues are stated and addressed nicely.
The design looks good."
1,"You can add some more explaination of what exactly you'll do in issues like: 
Issue #1072 - Issue related to instructor's assignment participation. I felt information is missing here."
0,The design appears to be sound and following appropriate principles. The document is also well described.
0,"Well, it looks sound to me. It follows the DRY principles as well."
0,The design appears to be sound: I would make the same choices they did to address the issues.
0,"The design/proposed solutions look completely logical and should fix the bugs with no/least redundancy. It also looks like the team has already managed to fix a few bugs as well. 
Kudos to them."
0,Yes the design appears to be sound and follows Ruby principles. No code has been repeated and they are using pre written functions in many places instead of just writing the logic again. Good work
0,Yes the design follow the principle and they have added designs for each issue specifying every detail which is quite a task
0,The design and fixes are very well explained with codesnips that include the incorporated adjustments. Nice work.
1,flowcharts are simple to understand but no design patterns used.some supporting class diagrams or sequence diagrams would be helpful.
1,"The project consists of five independent problems the scope of which is well-defined in the design document. The team provides visual diagrams in the solution descriptions which further improve the explanations of changes.
The fix for the Issue #1008 - ""Issue related to staggered deadline"" is backed up by a discussion about relevant db tables and corresponding part of code. One minor improvement would be for the authors to highlight the specific parts of code that are going to be changed in the updated block of code. Moreover, the solution to the Issue #1072 - ""Issue related to instructor's assignment participation"" is not specific enough, i.e. it is not clear which structures are going to be affected by the changes.
All in all, the document does a great job in explaining what changes are going to be introduced in the system."
0,The authors have highlighted certain parts pf the design where the changes were made. This makes is easier for the reader to understand the changes made. The team has explained the changes made in a clear manner.
0,"Yes, the authors have nicely explained the changes to be made.
Good work team."
0,Explained in detail which is very good.
0,"Yes, the authors have clearly explained where and what changes are to be made. They have provided a clear approach for the various fixes in the project."
0,"Yes, the authors have adequately explained what has to be done, the proposed changes,etc."
1,5 Stars! All but one problem has a snippet with the code fix and a rationale explaining why.
0,"The wiki documentation is extremely well written with all changes explained clearly and concisely. The good thing about this wiki is that the proposed solution sections is brilliantly explained. The team have clearly mentioned all filenames where they propose to make changes, drawn diagrams to illustrate the flow control, and added snippets of code where necessary.
Brilliant"
0,The authors have described all the proposed changes well. Each issue and with it it's detailed code is given. Well written and solid effort!
0,They have mentioned all the changes that have to be made to fix the issues. The screenshots with which changes are to be made in the code explains a lot
0,Authors have explained well the changes to be made in the system.
0,Well structured i think everything is covered
1,"The authors have done a great job at analyzing the problem statement and explaining clearly their proposed solution. I could easily understand the problem statement from the write-up. Well written.
However, the test plan is missing from the design document. 
Suggestion : 
You might want to add few success test cases and few edge test cases for removing reports."
0,This was excellently specific and succinct. Very nice work
1,The doc contains almost everything in terms of design except for the test plan. You might want to add a test plan right away to go for a test-driven development.
0,The authors have proposed an elaborate test plan and it covers the entirety of the functionality they are building.
1,They have test plan part but not including specific plans.
0,"Yes, tests are explained thoroughly with written code."
0,The tests cover all the required functionality. And as it is mentioned controller tests make more sense than unit tests.
0,The authors have explained well on how they intend to test the controllers and features given that the project does not involve any changes to model files. I think  Ruby-On-Rails Guide - Functional Tests for Your Controllers is a good way to go.
0,The test design includes both controller as well as feature tests. The team has also made an effort by putting up video links of the running of tests.
0,The team has completed the implementation and have included the screenshots of the Rspec code that tests the assessment360_controller.rb and specifically the course_student_grade_summary method. They test whether the instance variables provided in the view have been properly instantiated without concerning too much about the values that they hold. They back this up with a link to Ruby's best practice guide for functional tests for controllers. Plus they include feature tests to check whether correct details are displayed. They have also justified the reason for not performing unit tests as they don't alter the model. The highlight of this document is the video links showing the tests performed. Kudos to the team for the effort.
0,1) The test comprehensively tests the functioning of the system
1,"The design does include enough test plans.
The team has provided the code screenshots for the same.
Suggestion: Could have put links to the git code so that the wiki could have been short and precise."
0,"The authors have included flow diagrams, wire frames and even real screen mock-ups. They really help improve clarity."
0,Using a Lofi sketch the team clearly shows the intended output.
0,"The Use case UML diagrams, images of related pages and view's prototype makes it easier to understand the team plans to make required changes to the system."
0,The team has made a great effort to explain the design through a UML diagram and screenshots of how the feature will work when added to the existing project.
0,"Yes, the document makes extensive use of visual aids- be it activity diagram (UML), screenshots of the views, LowFi UI Sketch of the grade sheet and a prototype of the view showing grade sheet with Expertiza's color scheme and style conventions. All these tools clearly project the changes that are made to the system."
0,"UML and class diagram is not possible since the view is the main part.
1) The team explains how the final view should look like in detail."
1,"There is just one flow diagram which does explain the activities to happen.
There is no use case diagram with actors and all the uses cases expected.
Suggestion: The use case diagram would have given better clarity about the system"
0,"Yes, the design is quite simple and easy to understand. The authors have taken a straightforward approach to implement the feature."
1,Design is too detailed. I would suggest keeping it short and precise.
0,"Actual project work has not started yet so code modifications have not been mentioned. However, the files to be changed seem appropriate."
1,"The authors have explained well on what changes they want to make but it is unclear how it will be implemented. As I had suggested in my previous review, they can mention the expertiza files (controllers, views) involved."
0,The proposed design is easy to understand and explained properly with the help of appropriate screenshots of the view.
0,The design is simple and easy to understand because of ample explanation. The authors have also worked on the Activity UML diagram for this round making it easier for the readers to understand. All areas have been covered with respect to presenting the design lucidly.
0,1) Simple and clear design.
1,"The design is appreciable.
There could be some more explanation and implementation details to it."
0,"Yes, the design looks accurate and well thought through."
0,"Very good design, they use LoFi sketch to demonstrate their design."
0,"Yes, all required sketches, UML diagrams and views provided. Great work!"
0,The design document is sound and well written.
1,"As mentioned in my previous review, I cannot understand the back-end design handling. Which controller and view files are being modified? or Will new methods or .erb files be added? Any plans to use third-party gems or API's?"
0,"Yes, the design seems to incorporate appropriate design patterns. The new view file added is also in accordance with design principles."
0,The design looks sound and a lot of improvements have been made after the previous round. The design comprises of the list of files modified and created; the fields to be included in the summary sheet and screenshots showing sample prototype of the summary sheet.
0,"1) The design doc is clearly explained.
2) Follows the right design principles."
0,"The design looks fine, team has provided the initial test plans.
A Lo-fi sketch is available as well.
The team could have put git links to the test plan code for better organization."
0,The team has done a pretty good job of explaining the changes they are intending to make in great detail. They have added more details from the earlier version.
1,Their task introduction is too short. But the background part explain the changes very well.
1,Less explanation on problem statement. Could have elaborated on the problem scenario and why changes needs to be made.
0,"Yes, the proposed changes and intended output is clearly mentioned in the design document."
0,"The changes are well explained with the help of use case UML diagrams, screen shots of the web pages and prototype of the view. Well done!"
0,The team has mentioned the problem statement and its importance by giving an example of how it saves the time of instructors.
1,"The files to be changed have been properly listed.
I feel more explanation ought be given as to why these files have been modified and in what way."
0,The authors have made a comprehensive document that clearly outlines the changes that they made. They have included the UML diagram depicting the flow of control. The design section lists the files that were modified and newly created. It also comprises the contents of the summary sheet that gets displayed once an instructor clicks the 360 Assessment icon; LowFI UI and a prototype revealing the relevant fields that are to be displayed in the grade summary.
0,1) The authors have explained the functionalities and the changes to be made to the project in depth.
1,"The wiki could have been organized better.
It looks a little messy. Not self explanatory.
The Use case does not have any actors in it.
Suggestion: Code screenshots could have been placed better"
0,"Even thought there aren't any UML diagrams, the team has added a wire frame design of the proposed page and it has helped in visualizing the solution."
0,Very well explained with sketches and UML diagrams. The diagrams are detailed and easy to understand.
0,The screenshots posted on the wiki page provide a clear picture of what the team seeks to achieve.
1,"The doc does not have any UML diagrams. However, the use of mockup screens are helpful to understand what the project is about."
1,"The team hasn't put any diagram to explain their design, they've just explained it theoretically."
1,Missing a UML. But loved the addition of the LoFI sketch.
1,The authors have put in a good amount of effort in creating LowFI sketch (table) of the Grade Summary view with mock data. They have included a rough prototype of the intended view with all student and assignment information. The documentation also shows the Manage Courses view which contains the 360 Assessment icon that links to the Grade Summary page. One suggestion is that the team could have touched upon some implementation detail like showing the code flow as a flowchart or even useful UML diagrams for usecases.
0,Screenshots and visual ques are provided to the user
0,Screenshots are helpful to understand the flow
0,The document explains where the changes will be made and also gives screenshots of the appropriate views.
1,"The diagrams are missing in the document.
Although much of it is explained in the screenshots.
A possible diagram would make the document stronger."
1,"This is the only place I found the authors could improve. There is no mention of the actual files that need to be modified. They have detailed out the change that they propose, but no mention of actual files and the code change. It would be further increase the clarity of the solution if you could include that too."
0,Looks like a lot of effort will go into the VIEW
1,"The authors view of the final result is clear, but it is not yet clear on how the project is going to be implemented. i.e what files are going to be changed."
1,"The overall look of the page is well explained. However, I could not understand the back-end design plan, as in how/where the team will be adding such features in the code."
0,"According to me, the given design incorporates all the expected outcomes without disturbing the current functionality."
1,They might like to elaborate more on how they plan to use the hash of students to retrieve the specific information of the assignments. For eg. what models will you be using to query the DB.
1,"The authors have not specified any implementation specific detail pertaining to the specific controller classes that they propose to modify. So I am not in a position to comment if they are making changes in the wrong class or if it will make the code smelly.
The design looks precise and there is no need of any additional gems. 
The response time of the system should typically not take so long unless the view is rendering extraordinarily many student and assignment information. The team could implement an effective searching algorithm or use of an efficient data structure to store the student grade information. Or, they could possibly use filters to generate only relevant students (say under a specific course, year at a given University )
The authors have put in good effort in the design documentation except for minor additions (like code modifications, file changes and UML diagrams) which can be easily incorporated by the next review."
0,Proper design as well as test features are mentioned.
0,Well designed
0,Design appears to be good.
1,"The team has proposed a prototype where in the code might have some kinds of sorting of data.
I hope the code for this does not violate the DRY principle in any case."
0,The explanation is very detailed and easy to understand.
0,Very well explained solution with LoFi sketch.
0,The explanation is good and more information on which files would be changed would be more helpful.
1,"The explanations are succinct. However, in the Controllers section, it is unclear which controller in expertiza project the authors are referring to. The authors could mention the name of the controller(s) they intend to change and also possible method(s) that might be added to it."
1,Got confused in between about the proposed solution
0,The proposed implementation design is elaborate and clearly defines what the team plans on doing.
1,"The explanation is good, and they have managed to get in a prototype UI as well.
My only concern with the design is, if there are a lot of assignments the page might become very wide and will require a horizontal scroll bar to access all the data for the user."
1,"The authors have proposed to create a view for Grade Summary with the details pertaining to the assignment grades, topics, review scores and total scores for each student which gets rendered when a 360 Assessment tab icon is clicked. This change seems logical. They have also depicted a LowFI sketch of the projected page and screenshot of a rough prototype. These changes seem logical to me. I wonder if they are going to reuse any existing code that they cited as prior work in the background. The documentation could have added specifics of the files that they wish to modify or create."
0,Explanations are very clear and simple to understand.
0,"yes, all of them are implemented with good quality of explanation"
0,Adequate explanation is provided. They also mention what tests are feasible to be performed.
0,"The proposed changes look good, explanations are clear.
Also, mentioned the continuous talk with mentor to come up with a prototype.
Suggest you to include screenshots of some positive and negative tests in the future submissions."
0,The authors have incorporated all the functionalities required.
0,"Yes, I do not find any information missing."
0,"The design incorporates all the primary functionality, however adding a UML diagram would make it much better"
0,"Yes, according to the given link, the design has incorporated all the requirements and mentioned their test plan as well"
0,The design does incorporate all of the functionalities. One suggestion that I can give in the context of the design is that the documentation could have covered the list of files that they plan to work on and the current version of that code. They could have shown a UML diagram of the flow of activities for a lucid understandability
0,Yes. it incorporates with the functionality
0,Yes. It includes all the functionality.
0,"Yes, the design document does incorporate all the functionality.
There are proposed test plans, so expecting more screenshots with test cases in it."
0,This design documentation is very crisp and clear. Explained in detail and well organized.
0,"Complete, and well-explained. Impressed by 'Background' paragraph. Also, the screenshot of problem statement and solution is thorough."
0,The design doc is complete and clearly includes all details about the project.
0,The design doc is clear and well written. The authors have done a great job explaining the project's purpose and their design plan with the use of LoFi sketch and prototype for the required view. I would suggest the team to include files that are involved for this project. Overall good work!
0,The design doc submitted is pretty neat and contains all the necessary information to understand the requirements of the project.
0,The document is well made with necessary snapshots.
0,"This documentation is the first one to clearly give a background for the project, out of all the documentations that I have reviewed until now. Kudos to the team for taking that extra mile. They have clarified the purpose of this project under the Task heading as: to provide a holistic insight into the performance of each student in a class as an objective. The project design includes the view and controller section that projects the requirements of the project. I like how the team has listed all the information to be presented in the Grade Summary. The documentation finally contains the Test plan, where they propose to do controller tests to check if the correct model method is called and if the objects of appropriate datatype are returned and also if the correct view is rendered. They have also listed 2 feature tests to see if the correct information is being rendered on the view. The team could have added more such tests like: to test if the sorting functionality works fine"
0,The document is complete and well structured. They have also incorporated the prototype comments and mentor's feedback.
0,Very well maintained and explained
0,All the features are mentioned in the design document. It explains the background and the approach that they are going to take to create the view aggregating all the information.
0,"The design document looks really good.
All sections are properly described, screenshots included.
A possible uml or workflow diagram would have been appreciated."
1,"They have Test plan, but I don't think they include test in it, they just put some examples about how to run their code."
1,"The test plan doesn't seem to explain how the team intends to test their new implementation, it simply gives directions for running tests."
1,I feel the test plan should be more descriptive while also covering a few edge cases.
0,the design does include test plan and plans to test the functionalities
1,"Yes, the design includes a test plan. I think the tests can be more descriptive, including 'what' is being tested and in 'which scenario' the test is being implemented."
0,They have pretty good test plan as there is no code yet.
0,The provided tests are in depth and will test the changes made thoroughly.
0,Very simple and clear.
0,Use of flowcharts and step by step explanation simplified their solution. It was easy to grasp and design also appears to be simple.
0,The design was not unnecessarily complex. It was as easy as it could be.
0,The design is simple and easy to understand. The sin waves and the description about it helps to properly understand the changes made and its impact.
1,Actually they may include too much info. which could be replaced by some links.
0,The design is concise and clear.
0,"Yes, I am surprised that they have already finished the project."
0,"yeah, Their proposed design includes workflow, initial step, and subsequent steps. It was easy to follow their design. Their solution appears to be sound."
0,The design appears to be sound and following appropriate principles.
0,"Yes, their design appears to be sound."
0,The design looks good. The code is already committed and approved by the concerned team. Good Job !
0,"Yep, they have good structure to show what and how they gonna do with the project"
0,The design seems to be flawless. All the principles and patterns used are flawless and to the point.
0,"Yes, they made detailed explanation about their changes."
0,"The team is going to improve compatibility with web content that relies on the WebAudio API by implementing missing pieces of incomplete node types (OscillatorNode) along with entire missing nodes (ConstantSourceNode, StereoPannerNode, IIRFilterNode)."
0,Authors have clearly explained the changes to be made to the system. The design document was easy to understand.
0,"The authors have very well explained the problem statement and the changes to be made to the system, including flowcharts, the files to be modified/added and useful links."
1,The technical changes required are explained in depth but the usecase or the domain knowledge is not provides properly. This makes it difficult to understand the problem statement properly. Some high-level domain knowledge and requirements background will be helpful.
0,The authors have dived into the depths when explaining the changes. All of the changes are well defined and precise.
0,passed
1,One test failing for assignmentTeam failing.
1,"The team has put a lot of efforts in writing the tests. However, the Travis CI tests are not passing."
0,All checks have passed without any conflicts. Well done!
0,There were just 3 conflicts with respect to codeclimate that needed to be resolved but the mentor seeing their good work had decided to dismiss those.
0,No issues! Good job resolving all the issues.
0,it was unit tests
0,All passed.
0,Good job done here! You are the only team among the ones I reviewed for whom the Travis build has passed.
1,"One test case failing on travis. Once that is fixed, code can be merged."
0,The team has successfully managed to pass all test cases with 100% test coverage.
0,"The code is easy to read. As one places the model file along side the test code, it very much makes sense as to why they wrote each line."
0,"There are no errors in the build, the Travis CI build has passed and 100% coverage. You are good to go! :)"
0,The writeup is perfectly written clearly indicating the work done. It nicely shows how the work was done and what approach as followed.
0,The writeup has a brief explanation on the role of the AssignmentTeam in the expertiza project. They have given the details on the test plan and test cases. I think it is a good writeup.
0,"I would describe the write as being:
1. Very meaningful.
2. Concise.
3. Precise
Te authors do explain the assignment.rb file as well as their test plan in veryyyy much a detailed way."
0,The doc is very descriptive and well written. Good job!
0,The documentation is detailed covering all the test cases.
0,Very detailed
1,"The Wiki is great, but I believe it's better to move the Testing framework part to front of the page."
0,Extremely well-written and verbose.
0,The test cases are well written and do test many of the methods and functionalities. It is able to achieve around 60% of the task assigned to them.
0,cover all
0,"yes, the test covers all the scenarios."
0,As stated above the tests cover most of the scenarios.
0,They did unit tests
0,"The tests cover all the scenarios, hence they also possess 100% coverage."
0,improved
0,Yes the team has added test cases. The coverage is however only 48%.
0,The team has not added any test cases but they had already achieved 100% test coverage in the first round.
0,Yes the team had added the test cases and this did increase the coverage of the corresponding model file.
0,"For a testing project, increasing the coverage is important. Doesnt seem like the coverage was increased to a good extant."
0,100% coverage by the tests.
0,The coverage is 100% already.
0,Project was already completed in round 1
0,I can see no latest commits . The last commit was on 31st October.
0,"The last commit was on October 30. However, the team had already achieved 100% test coverage."
0,There were quite a few commits in the second round. The team worked hard to improve the existing test cases as well as add new ones. Even the mentor Zhewei approved of their work.
0,"Nope, but they already did pretty well."
0,"There were no commits in second round, but this is due to the fact that they achieved a 100% coverage in round 1 itself."
1,"The code is well written. The dummies created are given proper and relevant names. However, I can not see much comments. I would suggest that inclusion of more comments would have enhanced the readability and efficiency of the project."
1,The team has not added any comments nor changed the built test cases to reduce the redundancy in scores method.
0,The coding style is good. The test cases have been written properly. Also I have seen from the code that the team has covered different cases and not stuck to the common one.
0,Rspec code looks good. Descriptive context and it statements and good variable name usage. Very good work overall.
0,It was unit tests code.
0,Code style is good and Ruby Style guidelines are followed.
0,Appropriate explanations are provided for the tests.
1,"The writeup is really nicely written. It clearly mentions the work done. However, the problem statement could have been explained a little more."
1,The authors mention that they have followed DRY Testing practices but there are few test cases where they have not  implemented it. For example scores(questions) method. I would recommend to make the use of factories. Overall well written test cases.
0,The writeup explains well the plan of work of the authors and the way in which they approached the task at hand.
0,"For every tested method, they explain why they created certain objects or did what they did"
1,"Since it's a test project, there are not much design patterns to follow, but they should list what tech they used to test the rb file."
1,"I feel that they have achieved a 100% test coverage, although the design principles or patterns used haven't been listed. Listing that would help understand the testing strategy used."
0,no miss
1,"The test plan section is really well written. However, pre conditions , edge cases are not very well discussed and talked about."
0,The Test Plan is detailed and comprehensive. Good job!
1,"The test plan seems to include examples of tests and the explanation of the same. However, I didn't find any description of edge cases or invalid input values."
1,They have a very detailed Test Plan section where they explain every method and what  they did. They don't talk about pre condition or edge cases or invalid input or things like that
0,"Yes the Test Plan part is pretty through, they list all 29 test case they have done for the assignment_team.rb."
1,"The test plan is too elaborate and doesn't exactly cover different pre-conditions, edge cases, invalid input values, and other possibilities under the corresponding headers. Please include this as it improves the readablity and understanding."
0,"yes, very clear"
0,The writeup matches up very well with tests written and also describes in details what scenarios are tested.
0,The tests are very well written. They clearly indicate what functionality they are checking for.  The tests follow a language that is easy to follow.
0,"The writeup describes briefly and clearly what the AssignmentTeam class does in the expertiza project. It has also given the details on the test plan, test cases and explained the use of RSpec testing framework and factories. I would suggest to add a link to their video that shows the tests running in the wiki page. All in all good work!"
0,From the document I could understand the functionality on which the tests were written.
0,The write up is descriptive and very well written. I could easily understand everything about this project. Good job!
0,This wiki is very detailed and explains what is done for every tested method
1,"The wiki talk about what they have done throughly, it could be better if they have mention about how they do that."
1,"The Wiki has all the relevant information though I feel it needs to be a bit more organized. The titles and order need to change. The content needs to be placed at proper places. For example, test plan lists all the test cases and code, which according to me should be covered in the implementation."
1,The test cases are working. The coverage also as i can see is 100%.  I could find only one test for which the edge case failed.
0,It's a testing project and the video provided show that all test pass and they have at least 90% coverage
0,All tests works fine.
0,"The features work as intended, they cover the test cases and edge cases as well."
0,Code climate issues that were reported have been fixed.
0,All the codes are of perfect length. That is actually one of the best thing about the code. It follows basic ruby style guide.
1,Overall the team has done good job in maintaining Ruby Style guide. The team could add more comments and reduce code redundancy in scores() method.
0,The code is DRY. There is no redundancy in the code.
0,This was a testing project and the mocked objects were appropriate
1,"There are some duplicate codes could substitute with ""before"" statement. For example, line 100 are exactly the same with line 108, it is better to use ""before"" even if there is only one line duplicate."
0,"The code is DRY enough, and the functions seem to be compact."
1,Proper naming conventions are followed for variables and methods and classes. The only thing I think can be improved is dummy names for files and hyperlinks.
0,"Names for variables, classes, and method are properly named and make sense"
0,Not find any improper variable names or method names.
0,Code style seems to be good.
0,work as intended to be
0,Yes they have converted them.
0,Well done in achieving 100% test coverage and passing all the tests.
0,The team has tested all the methods of the corresponding model file.
0,they have done all the 29 test case and test them throughly.
0,All the cases discussed in the test plan have been implemented.
1,The team has a well composed design document. they have structured there design document into well written sub parts like design purpose and visualizations and files to be changed. They could have written there testing plan in a more elaborate manner by mentioning what kind of testing frame works will be used and what functionalities will be tested. The could have also added some use cases.
1,They have very well stated of about the purpose of their project. they have properly mentioned about the flow of their project which includes the flow chart for their project and also have specified of what kind of graphs they would prefer to show the visualization to the instructor. They have mentioned about how they will proceed in test case but haven't specified which files needs to be test inclusion of that would make the doc more complete
0,Yes 95 commits.
0,"Yes, it looks like sizable commits were made before the 24th."
0,They have a lot of commits so they were always working on it
0,The team used mutliple branches and many commits throughout the project to increment on the codebase.
1,No testing module found!
1,Testing has not been done for any modle or controller yet
1,No tests have been written for the application
0,"The interface is intuitive. Specially, they have very good form structure for realtor as well as new users, and house hunters."
1,"the links tell you what page you will go to or what action you will do. It's not pretty, but it works enough"
1,No CSS has been applied. Links are redirecting to pages instead of just performing the action
1,The UI is quite good but the design can be improved. The application allows a realtor to add company details while signing up which does not make for great design. Without authentication no user should be allowed to perform any functionality.
0,Good Rails coding practice has been implemented. In Model as well Controller we can see variables names that shows the relation to overall module and model.
0,"Yes, the source code follows expected RoR style. The directory names and project structure also follow RoR conventions. Good job!"
0,From what I see it seems to be following the practice we have been using in class
0,Decent coding practice
0,"The app's indentation, method names, and line separation seem to match solid Ruby style guidelines."
1,Design patterns were not used. Rest of the code is explained and easy to follow.
1,"Yes, the team has explained their code and the reason for the additions made. However, for the issue #926, some more information about the Tablesorter and some additional comments would improve the writeup. Solutions to issue #718 and #971 are explained clearly and are easy to follow."
0,The team has explained the issue and the solution they chose with enough details to understand to way of implementation.
1,No test cases or test plan mentioned in the write-up.
1,"The writeup does not include the test plan as of now, but that is the only thing which is left for the team to complete. The team could work on this and try to improve the test coverage."
1,There was no Test Plan
1,Text Plan is Missing
1,"The team has not included any test cases.
It would be easy to include the test cases on the  app/controllers/suggestion_controller for the update_feedback method that has been added.
Also the team may add some features test cases as most of the changes made are in html files.
The team can refer the existing features present in the .spec/features folder."
0,"writeup is very well written, contains enough screenshots and explanations of the code."
0,The write up clearly explains about the modifications made in Expertiza.  It indicates the functionality of their work which is topic management and the problem statement is clearly elaborated. It provides the files changed and also the code snippets in which the changes are made. The write up also provides visual representations of the changes made.
0,"Yes, the team has clearly stated the problem statement and the changes they have done to provide solutions to the problem. They have been given 3 problems to which they have clearly provided the names of the files and the part of the code which is changed. The video explains the problem and the implemented solution perfectly without any ambiguity."
1,"The writeup s format on how they distinguished the features and explained solutions for each and everything is good.
First they give a bird's eye view of the problems and then deep diving into each problem with solution and screenshot is good.
The background explanation given could have been more specific towards their problem statement, rather than just about expertiza.
The images tend to occupy the entire page and its little difficult while going through it, a little foramatting could have made their page really good."
0,The Documentation is well written and indicated clearly what was the problem tackled and how it was approached and solved
1,"I was able to understand the changes they were making and why, however I thought the write-up was a little too verbose and had too much code - I can find the code in their PR."
0,"The write up covers all the issues and is well organized, including the code blocks and the screenshots."
0,The write up addresses details of all the three problem statements along with the code changes done in every file and the files added. The team has also added screenshots of the manual testing and the video demonstrating the functionality they added.
0,The code works.
0,The features work as intended. Edge cases are properly executed.
1,"There is no link provided to test the code manually. However from the video provided, I can infer that all the features have been implemented and are working properly. Issue #718 and #926 are working as expected.
In issue #971, I could see that the previous version of the 'add new topic' page had a topic description and topic category field which is not seen in the updated version.
Suggestion: The team could implement that or if already implemented, add that to the wiki page to reflect the way in which that is handled"
1,"The group has not shared the link for the test environment. Hence unable to test the edge cases. However, in the screen cast they have covered the functionalities mentioned in the requirement document."
1,"The team has written a concise and efficient code with proper implementation. However, some additional comments in some parts would improve the readability and make it easier to comprehend"
1,"Ruby coding standard has been followed. Only one function has been added in controller as per requirement. Code follows DRY principle.
The team can add comments for the code added which would be useful to understand the code."
0,Functions and variables are named aptly
1,"Most of the variable names and function names are named based on proper convention.
Suggestion:
function addCreateTopicSection()This function name could be changed to maybe CreateTopic() or AddTopic()Apart form this, all other names look good"
1,"For the Ruby changes they have made, they have used intuitive names and used naming conventions as much as possible.
def update_feedback
 
Some places, the variable names are used in CamelCase whereas few places they werent used. Few variable names were directly used from legacy code, although refactoring could have been done.
curquestionnaire
quesparams . questArray"
1,"The code is clear and concise. The variable, method and class name choice is correct. 
One variable i feel can be changed is 
top_max_choosers can be renamed to topic_max_slots, as slots has been used in the function name as well and it will be more consisted"
1,"There a large set of variables that do not follow typical ruby naming convention. An example is that ""existAssignment"" should be ""exit_assignment"". Additionally, some names are not very helpful. For instance, the variable ""frm"" is used for a form, but why not just use ""form""? There is also a lot of javascript written directly on the page and are difficult to read and understand as there is missing method names or other non-intuitive variable names"
0,"The variables, names are well assigned."
0,All the variables and function names used are appropriate.
1,Test cases are not being taken cared.
1,There is no Test plan.
1,"Unfortunately, the test cases are lacking This could be improved before the second submission"
1,No test cases / Test plans
1,No new tests have been written
1,The team has not added any test cases.
0,Yes the system is well designed and the UI looks neat as well. They have put effort into the UI thinking process.
0,"The  design is sound. It completely follows the instructions.
It also has detailed implemenation plan in each steps.
I think it follows the DRY principle, because it uses existing implementations, fully understood the existing implementations, and added the functions above.
I think it should also follow the factory pattern, although not shown in the design doc."
0,Yes it looks sound
0,"Yes, the author explained the plan clearly. The steps and the files need to be modified are listed."
1,"The design is ambiguous. The team only said they will make ""some"" changes to the current system but didn't state clearly what kind of changes they will make and how these changes will be done. For example, for the first step, we need more information about how the team will change the UI, the model and the controller or helper to realize what the team said."
0,"All problem statements have been explained, this time including an elaborate test plan."
1,The documentation is somewhat ambiguous
0,I really loved the way that the authors have provided a detailed proposed plan section making it very clear about the changes that are required to be made in order to tackle the given problem statement.
0,"Yes, they explained a lot with two steps."
1,Test Plan is explained in detail. It covers Integration Testing and Functional checks. However some unit testing of the new models should also be covered.
0,"Yes based on the explanation given, the design seems appropriate and will achieve the desired end-results. Good Job !"
1,Yes the Problem Statement and Design Approach sections explain clearly what the usecase is and what the authors think will be a good design to implement.The changes are clearly explained. Having some file names would be useful to review in detail.
1,"The Test plan seems to be covering most of the positive test cases. However, it doesn't seem to cover any negative test cases. Like if the student decides not to make the review public, its reviews shouldn't be shown to the TA/ Instructor."
0,The design seems pretty simple and straightforward.
1,"I think the design perfectly captures the view part. They have also incorporated the db related changes after the first review. However, there is still room for improvement in terms of depth of details provided in the doc"
0,Detailed test plan (+1)
1,some more test cases would be useful
1,"The test plan is very detailed, but doesn't account for what I suspect could be many edge cases."
0,The team has come up with a very detailed and clear step wise test plan for all the actors involved. They have done great work to depict the flow for every user which makes sure they are handling all the scenarios. This also suggests their approach is behavior driven. They have done great job in this and the test are in depth.
1,"The team has stated all the changes they are planning to make step wise in detail. This really helps to understand the approach they are taking in simple terms. However, the team has not stated which design principle they are following."
0,The team has well explained the changes which are required to be made in the system. They have broken the explanation of the details of the requirement in simple bullet points which makes it very easy to understand the change requested. The design approach
0,Very basic explanation
1,"Team has added manual testing under test plan.
Team should also add automated test cases or brief plan on how they are going forward with automated testing of the changes."
0,"Team has explained the problem statement, approach to solve the issue well.
Also the use case diagram explains design well."
0,Yes the test plan section is again detailed with step by step instruction
0,The UML diagram is very good and makes understanding very easy
0,The explanations are very clear and easy to follow. They give the idea of how team intends to approach the feature.
1,"I think the design perfectly captures the view part. However, it looks a bit high level. I think more low level and model related details can be added. For e.g. what design pattern would be used, the tables that will be affected."
1,"The design document describes the problem statement, the approach towards the goal and the flow expected for the given issue. Certain improvements can be made to the introduction by providing a brief overview of the project details instead of introducing the Expertiza environment. The team plans on updating the test plan after implementation."
1,"The problem statements and design have been explained. But the team could have explained how they have planned to carry out the changes. Though this could be a vague idea, it could have been added. Likewise with the test plan too."
0,Use case diagram adds extra weight to the design since the visuals always help the reader to relate the project well.
1,"The team has explained the problem statement well  and has done job in explaining the flow for every user with diagrams for them. However, the team needs to add the design approach and the testing plan for the project."
0,A very nice UML diagram is added explaining the cases.
0,The UML is good. Liked the way they have clearly mentioned the functions.
1,"issue 1065 uml diagram is too high level so it does not provide enough details,
Rest all diagrams follow the standards and are easy to understand."
0,"Diagrams are proper, precise and detailed to understand the behaviour of the system (currently and after making changes). Good effort in making the diagram and wiki."
0,Flow diagrams are well thought of and explain the workflow well. Adequate details are given for each diagram.
0,"The diagrams provided clearly explain the flow control of the proposed solutions. The team even mentions preconditions needed for the flow control.
the only suggestion I have is that the team could also add a low-fi sketch or screenshot of how the view would like after before/after Issue #1008 is fixed."
0,"All the diagrams are great, and none feel extraneous."
0,They have included flowcharts for each proposed solution. The flowcharts can clearly explain the work flow.
1,Flowchart is included in the document but there is no screenshot or mock-up screens.
0,"Uml looks good, explains whats happening."
0,Visual aids are used properly and very helpful in understanding. UML diagrams follow the convention. Everything looks proper.
0,The team has provided flowcharts which makes it easier to understand their solution. The provided diagrams seem enough for the reader to understand the solution.
0,The diagrams that are provided in the document visualize the workflows of different actors that pertain to the given issues. They are definitely helpful for the reader to understand the scope of the problem that is being addressed.
1,"The designs that the authors have proposed are consistent with the code and do not introduce any obvious problems.
However, the design decisions for issues #1017 and #1072 are missing and therefore cannot be assessed.
I would suggest including the discussion of the specific parts of the source code that are going to be addressed in this project. Posting the exact solution is not necessary."
1,"The team has provided solutions for all the issue but one. For issue#1017, the team has only provided a flow chart(description of the issue graphically) but the code which needs to be changed/added should be looked upon. 
 
Suggestion: The team can mention the way in which they attempt to tackle the issue by mentioning the files and the logic behind the proposed solution."
0,It appears to be sound.
1,"I don't think the authors plan to add methods to the wrong class. They are modifying the right files.
The new design does not appear to potentially make the code ""smelly"".
But for few issues you haven't added any files which you'll be modifying, only the uml is given, you can add them before the final submission."
0,For now design plan looks good enough.
0,The proposed solution would be the best approach to tackle the issues in my opinion. They would not make the code smelly or complicated.
1,"I would appreciate a little more detail on bugs #1017 and #1072, which have a flow established, but no code snippets."
0,"Honestly in my opinion, the team has given a lot of thought into how to fix the bugs. The design/proposed solutions look completely logical and should fix the bugs with no/least redundancy. It also looks like the team has already managed to fix a few bugs as well. Kudos to them."
1,"The design is well though of however instead of writing the time difference logic, gems could have been used which are well tested and bug free."
0,The designs proposed makes some sense as they are backed up with diagrams to make them very clear of their approach.
1,"The design looks a bit complicated and will increase the response time of the system.
It can make the code smelly.
Too complicated code handled in issue 1 which could be refactored."
1,"Overall work is done good.
But Explanations are bit lengthy and somewhat hard to follow.
Ther is no need to mention the existing code.Which simplymmakes the documentation lengthier."
1,"A fix for the second and fourth issues is missing at the current moment. If this is included as in the other issues then the document will adequately propose solutions. Also, perhaps more elaboration on the 3rd fix on how the columns are not being copied over (I know the code is pasted but a simple worded explanation would be nice too)."
0,"The changes mentioned seems to be well thought and written as they are well explanatory. With adequate description, the doc covers all the issues."
0,The explanations are well written and describe the workflow well. There could have been a little more detail in the explanation as some of the statements are very high level.
0,"The good thing about this wiki is that the proposed solution sections is brilliantly explained. The team have clearly mentioned all filenames where they propose to make changes, drawn diagrams to illustrate the flow control, and added snippets of code where necessary.
Brilliant"
0,"For the bugs which have explanations, the proposed fixes and explanations of the problem are sound. I'd like more info on bugs #1017 and #1072, as they only have the flow."
0,"Well, after reading all the proposed solutions, I think they look good and the explanation behind all of them are satisfactory as well."
0,"The document is very impressive and provides detailed description of all the proposed changes. Explanations and steps given are easy to follow.
No suggestions."
1,"Its good, can be more elaborative. Also in sections where you have added the code changes, you ca add comments to the code as well for better understanding."
0,"The authors have listed all the proposed changes in the problem solution. I was able to understand it without any trouble. 
Overall quality of the proposals is good."
1,"The changes proposed by the authors are reasonable, they do not introduce any clutter or inconsistencies to the code.
However, issues #1017 and #1072 do not have a clear solution. In one case changes to the assignment controller are proposed but it cannot be inferred how adequate those changes will be."
0,The design document separately describes every distinct issue and in some cases even provides possible finalized fixes to the source code.
1,The issues are addressed thoroughly. But probablty the issue on staggered deadline needs to be handled carefully the solution might cause other code effects need to cover all the individuals involved
0,The team has included all the 5 issues as stated in the project description google doc. The team has provided solutions for all these issues as well. The solutions are descriptive and easy to follow
0,It lists out all the functionalities in the problem solution and looks very clear and very elaborate with codes and diagrams.
0,Yes they have incorporated everything. They have explained the solutions as well.
0,"The design incorporates all the functionality required.
Suggestion: Including screenshots or screen-mockups would make the document easier to understand."
0,"Yes, I think it includes everything, all the functionalities required."
0,"The document incorporates all of the functionalities as mentioned in the google design document. The team have made sure to list, explain, and provide proposed solutions for each bug to be fixed. Good Job guys !!!"
0,"They have each listed bug explained, at the very least, and most have a resolution pathway. A+."
0,The design proposes solutions for all the issues. Every issue is well described and flow diagrams are provided for the solutions
0,"Yes, the doc covers every functionality and detailed description of the approach to deal with the issue."
0,The design does corporate all the functionalities required.
1,"The project design is well presented and solves all issues. However, testing plan and project purpose are missing. You could have given at-least a basic high level overview of testing in the end, Overall good effort!"
1,"The design document is extremely well written. The project purpose is mentioned, although it looks similar to what is already mentioned in the Google design document. I would suggest the team to add their own understanding of the project, how this project is helpful to the system ? Why are these changes/project necessary ?
Additionally I would also suggest the team to add a test plan section to their documentation. Any bugs fixed need to be tested thoroughly for edge cases as well as core fucntionality."
1,Project purpose and project design are present and really detailed! Test plan was absent though...
0,The document includes the problem statements and proposed solutions of all the issues. All the proposed solutions have test plans as well.
1,The document is very well-written. Just the test plan is missing.
1,Everything looks great as they have added the uml diagrams ad explained everything in detail. Test plan is missing which can be added as they are solving a lot of issues in this project.
0,"Following can be added. 
Project Introduction & Motivation
Description of Project"
0,The team has presented a detailed explanation of  all the topics in the documentation
1,"The team did a good job in explaining the problem statements for each issue and providing their proposed solutions.
The purpose of the project is clear from the document as is a composite of several independent issues.
The problem is that testing plan is missing from the project. I would suggest starting from the most basic test cases that check the functionality (e.g. one spec per issue) and then elaborating from there.
Moreover, while fixing some issues like #1008 and #1065 consists of a small modification to the existing code, there are other cases where the design decisions are not provided and it would be better for the team to include some justifications and possible discussions of design patterns.
The document extensively uses diagrams that depict application flows for each use case which is impressive."
1,Include testing plan if possible
1,The wiki page is prepared with a good research on the topic. Just test plans are left to be added.
1,The sections included for this design document cover the intent of the group to find and solve the bugs required for their project. I am not sure that the Introduction section reads as an introduction but more as a project problem statement. If this is an introduction more should be included as to what is the purpose of the project and what this current introduction content means.
1,Testing plan not included.
0,The problem and the changes needed is explained clearly
0,Yes the authors have adequately described the changes required to be made to the system. The process has been divided into steps and each step describes changes in the MVC files. Good job
0,"Yes, this is the best design I have reviewed. It has clearly explained the changes in steps. the formatting is great, and it's very well made with very good design details and objectives.
It also included the current scenario and a typical score table.
It should be great if there's an expected final outcome visualization as well."
0,"Yes, the issues and the proposed solutions are clearly written."
1,"There is a webpage linked which is helpful, but I do not see any other visual aids. It would be better to have some screenshots to help the reader understand your project."
1,No diagrams included in the document. Adding some diagrams to explain what the system is and how the design will look like will be better.
1,No diagrams provided.
1,There are no visual aids to support the document.I would suggest them to design a flow chart that can show their design planning.
0,Test has been written for most of the functionalities and works well. The test folder has the relevant files with well commented code.
0,The team has implemented rspec testing and have thoroughly tested one model namely the users model with this. Also the team has used minitest to thoroughly test the users controller.
0,Good job on testing everything with rspec. Tests look concise and crisp.
0,The team has tested the app using RSpec and thoroughly tests the user module
0,The tests looked good.
0,the first edge case wherein a comp[any is being deleted by the admin is handled perfectly and the associated listings and inquiries are deleted accordingly. The house hunter deletion is also handled perfectly so that their inquiry are deleted accordingly. Also the README.md  explains the working and the functionalities of each role properly.
1,"1) i deleted a company that a realtor was assigned to and it was deleted successfully but the house listed by that company is still in the house list
2) When i switched company for a realtor, i could still deleted the house i listed when i was a previous company
3) when a househunter who made inquiries was deleted, it got rid of their inquires from the system"
1,"1 > Admin login is not working for me
2 > Since I cannot use Admin Account, i cannot test edge cases related to creating/deleting users or creating/deleting Companies
3 > Search is working but is case sensitive."
1,The realtor cannot choose company so the edge case that handle change in company is not handled
0,The system was very strong through edge cases and the README.md was very detailed.
0,"The system works as it is supposed to. For example the realtor, the admin and the user can login and perform the related functionalities successfully."
0,The system is well designed and all the features have been correctly added and all the functionalities work. The authors have fixed all the problems from the previous submission.
1,"As a realtor, i tried to list a house with no basement, but it won't let me save it saying that an error is prohibiting me. It says basement is blank, when i clearly am selecting the no option. when i changed it to yes, it saved fine
 
As an admin I can't see potential buyer list for houses"
1,"1 > No Option to switch roles between hunter/Realtor
2 > No default admin/realtor/hunter account. Maybe you forgot to run db:seed on the server
3 > No validation for Email while creating a company. Any string can be typed in.
4 > Inquiries can only have 1 reply which is a field in DB which gets updated"
1,The app has the functionalities but the user display is available to all users even though that functionality has to be exclusive to the admin of the app. The realtor also has no means to add a new company and there is no way to edit the user's profile
1,"I can't create a house with no basement as a realtor. It also deleted my image after I uploaded it in this case, before it redirected me to the new page with error information. Also, potential buyers are listed twice (I'm assuming because they liked the house and submitted an inquiry to the realtor associated with it.)."
0,The team has a well designed schema and has defined all the relationships between the tables properly.
1,"DB design is kind of ok, but there are redundant tables for roles/realtors/hunters/admins and users. I believe all this can be combined into one using proper fields and access control. This would have helped you guys keep the code easier as well. Everything else has been handled properly."
0,The rb files set the has_many and belongs_to relationships correctly
0,"The database design is solid, with join tables for the n-n relationships."
0,Yes: a total of 181 comments and are continuously committed on the repo.
0,The team has a good history of commits and as can be seen from the github repository the trail of commits is well documented and each new feature added or bug fixed has a documented commit. The team kept pushing commits throughout both the deadlines and were regular.
0,they have 181 commits
0,The team committed throughout the project and during round 2.
1,The code quality is well written. Many of the functions are doing only one thing at a time. The only limitation I could observe is lack of comments in controller as well model.
0,The team seems to have followed proper naming conventions for naming all the classes as well as all the attributes. The  team seems to have written a clean and readable code.
0,Code follows most of the ruby good practices.
1,"1) The houses controller handles multiple users. It would make more sense to call methods to handle the case of each type of user.
3) The houses controller also has several long methods. These should be broken up into method calls."
1,no testing have been done
1,No deployment link
1,Model has not been tested.
0,"User level vaildations seem to do be correctly. Also, I could not create an account with the same email id again."
1,"No, they have not. No models were tested."
1,Readme does not cover edge cases.
1,not able to log in as admin no credentials given in readme
1,"1) User is able to sign-up as admin which should not happen
2) Admin is able to delete real estate companies
3) Admin is not able to view inquiries"
0,The build has passed in Travis CI and no conflicts have occured.
0,"Yes, the Travis CI has passed."
0,Yes no conflicts at all which needs to be resolved
1,Same comment as above. I could not test this application.
1,"1. Could not login as administrator, no  information for login provided in seeds.rb or the README doc.
2. Changing a house hunter role to realtor, did not list functionalities related to realtor. Hence, the realtor was not able to check/join companies. Please check with review@review.com, password : password
3. Could not login as administrator, no  information for login provided in seeds.rb or the README doc.
4. I had just created a house hunter account, but I could see my interested houses and inquiries.
This doesn't seem to be correct. Interest list to user mapping is not done correctly.
The README file does not provide details regarding the application. Hence, it is not easy to review the application.
5. While updating the user, the password field is visible. This is a major security concern."
0,No conflicts and Build Passes
1,Everything but the CodeClimate checks passed
1,The Travis Build has passed. The only conflicts remaining to resolve are the Code Climate conflicts.
1,"Seems there is something wrong with the interest list. I added house 1 in user1's interest list, but it appears in user2's list for some reason. Everybody can see the previous user's information."
0,Yes the Travis CI build is passing successfully.
1,admin account credentials not listed
1,"1) After signing up as realtor:  
 -> Show inquiries is not working
 -> A realtor cannot thus reply to an inquiry
2) After signing up as hunter
 -> A hunter is able to create a cpmpany which should be not allowed
-> An inquiry should be created for a particular house which is not the case
-> new inquiry is not working shows {""success"":false} message"
1,"The team has checked most of the points given in the problem statement. However proper testing should be done before deploying this project on the main server. It must be ensured that the overall coverage increases. Other than the testing part, everything else has been implemented as expected."
1,"The code seems to be working good from the screencast.
My biggest concern was, if the link to deployment was given, it would have been easier to try the features.
Other than that, capybara test cases could have made it strong to go to the production server.
If they feature did work the way as it was shown in the screencast, it can be deployed to production."
1,"Overall, I think it could be deployed. There are no tests however written for this functionality, and there are some UI patterns that should be re-considered before deploying that do not match each other. When saving feedback, the ability to save feedback is automatically present and there is a button per row, while in the other location, you must first make a row ""editable""."
1,"I still was not provided a link to a deployed application. I re-read the README as carefully as a I could, but could not find one."
1,"Certain basic functionalities realted to roles and switching roles aren't working.
The realtor was being able to create a new company and new inquiry, which as far as I know is not in the realtor functionality.
The inquiry listing for realtor link fails on click on show of any inquiry."
0,"Yes, the code can be deployed to production."
0,most of the relations holds good
0,1) All  relationships are mentioned in the model
0,Writeup is very detailed and well written. It is supplemented by enough code pieces and reasoning and good amount of pictures and videos to explain what the team has done in detail.
1,"In my opinion Inquiries should belong to a user. One inquiry belongs to a user, and one user has many inquiries."
1,"The writeup is well written with proper screenshots. I liked that the team has provided appropriate screenshots for specific scenarios which covers all the aspects of the project. However, the Test-plan section could be improved by adding the test code"
1,"I think this team did not correctly implement several database relationships. For instance, a House does not have many users, it has a single realtor (the realtor who posted it) and it might have many interested users (potential buyers), but that should have been via a through relationship. Another example is inquiries. An inquiry has one user for one house, not many users and many houses."
1,"Write up is good and self explanatory.
Test plan helped a lot in understanding how to test it.
As discussed in the earlier review, images could have been resized for better visibility. Was little difficult when one had to scroll along the page to view the entire image."
1,"Most of them are correct.
In inquiry, the mapping is wrong in my opinion. It says has_many :users, has_many :houses, inquiry belongs_to one house and one user who creates the inquiry."
1,"The write-up is well written. It looks like they have improved the test plan sections, but still no automated tests in the repository."
0,The writeup is well organized and well documented.
0,The write up is impressive and very detailed. It has been documented well which helps to understand about the project and the code implementation. It also provides detailed test plan which makes it easier for end user to do UI testing.
0,lot of commits and branches
0,The write-up is informative and provides all necessary details of the changes made.
0,"Yes, the team kept committing changes in round 2."
0,"1) Yes,timely commits on github"
0,System works as expected and this is evidenced by tests and videos.
1,"Yes, the team made commits regularly, but some commits whose name suggest changes to the code (not heroku deployment), were done after the deadline of 10th Oct.
If those changes were later reversed or not, cannot be ensured.
From the reviewer's perspective I would suggest not to add any changes at all after the deadline, as we shouldn't be bothered about looking at what change is done in each commit. Stick to the work you had as it would be graded appropriately by the instructors."
0,"The working is perfect, everything works as intended. The team has explained this in a brief manner in their youtube video."
1,"The operation works perfectly from UI as shown in the youtube screencast.
The App was not deployed anywhere (or the link was not posted), so couldnt test it by myself.
Application could have been deployed during the second review for better understanding and trying out how the feature works."
0,"Yes, this team did a lot of work after the initial set of reviews."
0,The code works as required.
0,"Tests have been thoroughly and very well performed. Also, well documented."
0,The code is pretty clean.
0,good coding standard
1,The code looks good but it has slightly long methods. The naming used also appears appropriate.
1,"No new test cases were added. The new code changes don't change the modify the existing code coverage.
The modifications were mostly on UI.
They could have added capybara testing."
0,"1) readable code
2) separation of tasks"
1,"The logic in the code looks proper, still the code itself is hard to follow. Primarily because, a lot of functionality has been added in a method whose name suggests only partial functionality, and no comments have added anywhere.
Examples are-:
In applicatins_controller.rb, the methods get_realtor_nav_bar and get_hoousehunter_nav_bar make SQL queries and other functionalities.
In houses_controller.rb the show method also has a lot code that ideally should not belong in that method.
I would suggest to put such code in different methods, or name the method better. Do not shy away from creating 10 different methods if need be, it organises code much better and simpler to understand."
1,"I saw a lot of places were instance variables were used when the didn't need to be (ie using @var instead of just var in methods). I think naming seemed appropriate were I looked. This team made good use of helper functions and classes, though there were some rather large functions in those classes. I saw a lot of complicated views, which to indicates lack of separation of concerns. 
I would recommend being more diligent about the scope of variables and continue trying to push concerns/responsibilities to isolated classes and methods."
1,The team has done good manual testing but it would help to add few test in features to test the impact of the changes done in functionality of the project.
0,A commit was done in second round addressing issues from reviews.
0,"The team has done few commits.
One was on few sort fixes, while they other was on refactoring."
0,Properly done in round 2 also
0,3 New commits
0,There has been 2 commits made in second round. One for adding comments and another one for fixing Issue #926 the sorting of topics by topic number in assignments.
0,Few new commits are made
1,"The code was well written during the last review too, it only missed comments. A few comments have been added but still a major portion of code remains uncommented. 
Other than that, the code is nicely written, follows guidelines and variable names are appropriate."
0,"Yes, code is well written"
1,max_choosers name was not changed. As far as i understand it denotes the maximum number of slots and should be called max_slots. which is not changed. Apart from this code is good.
1,I'm essentially keeping my feedback the same. There are places where I believe that better names could be used and smaller javascript methods could be used.
0,"the code was well written, following the principles."
1,"Code looks concise. However at few places, indentation is messed up."
1,"The code is clean and readable. The README file is not updated, hence it is not reviewer-friendly.
1. Most methods are short and do a specific task 
2. None
3. Questionable redirection"
1,"No, the build did not pass. It seems that airbrake_expection_errors_feature_tests_spec.rb has some problem."
1,"The build for the pull request has not passed and has the same issues from round 1. 
Build logs suggest that out of 4 build jobs, 3 jobs pass and 1 job still needs work. 
According to the build job 4 log, there is a json parser error which needs to be fixed."
1,The CI build was failing in the previous submission as well in the new submission. The team should have corrected the same.
1,The travis tests have failed. There was one main failure in the Travis log which could be addressed.
0,NO I don't find any conflicts in the work which needs to be resolved.
1,The pull request that the authors have submitted does not pass the Travis Bot builds. But the bot has failed in the tests for which the authors haven't changed any code. So overall the pull request doesn't seem to break any code.
1,The build did not pass Travis CI.
0,Travis CI is passed there is no issues with the build
1,The build was failing last time as well but not fixes were made.
1,"Because they did not provide a link for me to test, i am not sure if their code has bugs, so i don't know if this code is ready to be deployed onto server."
1,"Yes, since the issues are fixed as required, I think that the project can be merged to the production server.
However, there is some work on the conflicts upon resolution of which the fixes can be included to the code. I don't think that there is a need to take another approach for solving the issues."
1,the code looks fine. The only concern is related to the CI build which is failing at the moment. Some of the tests are failing because of the change.
0,"The link to the deployed application was not available, so the project could not be tested."
0,"Yes, I believe this code is ready to be deployed as it seems perfeclty fin"
0,I think the authors have done a good job in fixing the issues but they should have added tests to check if their code does handle all the possible edge cases and does not break any other code functionalities. I think this is a good starting place for a future team to pick up this project and implement some testing specs regarding the functionalities that the authors have fixed.
0,"Yes, I think the project is ready to be deployed at the production server since all the required functionalities are implemented."
0,this code is ready for server
0,"Since the code coverage has decreased, I don't think this code should be deployed on production. However, it is a good starting place for a new team to pickup."
0,"The write-up has been improvised by the authors and they have added the reasoning for the approach they chose. This increases the understanding of their solution. 
They have also modified their test plan steps."
0,The write-up is well written and organised. Everything looks fine. Great work with the write up!
1,The write-up was good and clearly explains the issues faced and the code changed. It would have been much more clear if screenshots of git file changed were posted.
0,Very well written and elaborated.
0,The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea. It doesn't seem like the authors have updated their writeups since the last submission.
0,The write up is well written and self explanatory.  It would have been better if the screenshots were of standard size but that is not a problem since the purpose of the document is just to explain the project.
0,well written document my suggestion is put the cropped version of images or even links to images is also fine.
0,The write up clearly captures the functionality that the work is related to.
1,"They did not provide a link for me to test, but their video shows that their code works well."
1,"Yes, both the the issues seem to be fixed from the screencast video. It clearly explains the before and after scenarios and the system works as expected. 
The test plan is still missing for the fixed issues."
0,The video explains the new functionality and the functionality is working as expected. Good job!
1,"The link to the deployed application was not available, so the project could not be tested."
0,"Yes, It works perfectly fine. Also, the screencast they uploaded, makes it more easy and convenient for me to understand the portion of changes implemented."
1,"Since, the  project was not deployed hence manual testing could not be performed. But, the screencasts show that the system works as intended."
1,Cannot be verified since no deployment is provided.
0,UI is working correctly there are no features broken
0,The code was well written even in the first round.
1,"No, they code is not complete, and many cases are not covered."
1,"No, it is not good at all, they didn't explain the functionality of their test code."
0,"Yes, It works ."
1,"No, they did not pass Travis Ci."
1,"It's probably fine if the integration tests can be resolved, and the code smells from code climate can be fixed."
0,"I think it covers all of the scenarios, but don't quote me. I don't have a great understanding of review response map."
0,They added all the test cases! There is so much coverage now!
1,"The project does not pass the Travis CI integration tests. I looked at its output, and I cannot tell how significant the failure is. Maybe its an easy fix?"
1,It's fine to good. I wish y'all would have posted a link to your repo in stead of the pull request.
1,"The document straight away starts with the explanation of the project specifics without any background as to what was the whole purpose of doing this. Problem statement is very general, it could have been more specific as to what was the drawbacks of the existing implementation and how that can be resolved with the new changes. The doc also lacks a test plan. 
It is preferable for the doc to be written in expertiza wiki rather than the normal wiki."
0,Overall coverage was increased by 8+ percentage.
1,"The reason to give 3 is that there are certain simple code climate issues regarding spaces, indentation and so. These are easy to fix and are related to code quality."
1,"Although the write up clearly explains the problem statement and also contains the changes made, it doesn't include the test plan which would give a clearer picture of the changes added."
0,"The tests cover all the scenarios. Given that the problem statement is pretty open-ended, the changes fulfil the purpose."
0,"Yes since it was a unit test assignment, tests have been added and overall coverage has increased"
0,The build is passing successfully
0,the test examples they showed are good.
1,"basically, it is good. however, i cannot find the test paln, and some explanation is not complete."
1,"The authors have included the different tests that they wrote, however a description of what the test is testing would be helpful."
1,Variable names and test cases are named appropriately. Explanation of reasons for the style of code and problem solving approach is lacking.
1,"34% is better than nothing, but it's still a far-cry from a complete unit test suite for the review_response_map model. I'd recommend it be merged, but it needs to be completed."
1,The writeup was still on wikipedia and didn't expand on the reasons why the test cases were the way they are. No justification was provided for why only 34% of the LoC in the model was covered.
1,"Only 34% of the lines of code in review_response_map.rb were covered, according to their video. This is much lower than the 90% required by the project descriptions."
0,"Coverage went up by 8.4%, according to coveralls."
0,The present test cases appear to be written fine.
1,Not cover all the scenarios.
1,"The code can definitely be deployed but once the 3 pending code climate issues(I believe the 3 are to be resolved by he mentor) and the Travis CI build have been rectified.
Suggestion: Rectify the Travis CI issues."
0,"Yes their code works, and some edge cases are also correct."
0,"The writeup is really well written and has covered all the desired aspects along with the test plan.
No suggestions."
0,"The tests specified in the participant.rb file run perfectly well . The same has been demonstrated in the video mentioned above.
No suggestions."
0,"Their variables, methods, and class names are good"
0,"The coverall showed that the Overall coverage increased (+3.2%) to 39.999%
The coverage of the participant.rb file is 100%. So great job team!
No suggestions."
1,"Yes they have explained the way and why they did, and in their writeup, they does not mention any principles or patterns."
1,"They don not have any test plan, and some functionality of code is not adequate for the test."
1,"Source code is good in all spots, except the last unit test.
I was unable to figure out why it did not work."
1,"No Test Plan was included. The bare minimum of description was given for each test, and the project preamble.
As far as I can tell, though, there is no document that says we should have created a Test Plan, and I bet it is safe to say that their mentor did not suggest creating a Test Plan either."
1,"The Travis CI build did not fail exactly but it did not pass either. It showed in progress. But when I clicked on the details, it showed that the test failed. 
Suggestion: Travis CI issue should have been rectified."
1,"All of the code appears to be above board, and no functions are overly long.
The test did take like 28 seconds to run, which seems like a lot."
1,"It looks like if they fix some style issues then it could increase the code coverage.
I don't understand why their last unit test does not pass though."
0,"The code is well written. 
No suggestions."
1,"They wrote the literal least possible, but again, I get it.
Learning how to test with doubles, mocks, stubs, and spies, to peek in on the innards of a high complexity OO system was actually really difficult."
1,The approach taken by the team to increase the code coverage has not been clearly stated. Also there is no mention about what was the existing code coverage and how much did the team increase it to?
1,No details about what was changed only details related to already existing implementation has been stated.
1,"some branches are skipped by the ""allow"" statement. If a method would raise an exception, then test whether it would raise it."
0,The writeup clearly explains the problem statement
0,the work takes care of all the edge cases accurately.
1,I cannot find test plan.
1,the writeup is lacking in terms of explanation of how to test the funcionality thoroughly.
0,the wiki page has showed up what the expertiza is and some examples have show up what the task of the team is.
1,"Code is running and no errors are encountered. However, very few tests have been written and coverage is low. A way to make the testing more robust is to test every function with a known success case and  an edge case or potential failure."
1,Authors have followed Ruby style guide. Test cases have not been discussed in the write-up.
0,Code is well written.
1,"As this rubric calls for a section called Test Plan, I suggest adding it and rearranging the wiki content, so that a description of the tests is given in this section"
1,"The video shows all the test cases pass, but I'm skeptical that they got all the corner cases. Looking at the review_response_map.rb model, there are a lot of methods which aren't explicitly tested."
1,"I feel confident if the Travis CI integration issues are addressed, then it can be deployed in the production server."
0,Easily one of the most clearly documented projects I have reviewed in this class so far. I liked their organization of the Test Plan within the write-up.
0,"All tests pass, all descriptions in the Test Plan are just the test cases in the Rspec file, sooooooo yeah I guess they all exist."
0,The tests look fine. It's easy to follow what the tests do.
0,Rspec tests look just fine and descriptions are intuitive.
1,It's unclear how complete the test plan is because their wiki does not contain their total branch or mutation coverage.
1,"Although the test coverage is increased according to github, i could not find any new test cases in the project. The team has not added any test case for the correction."
0,Everything is good here!
0,"No, there have been no new additions to the test cases since last round of review. The code coverage still remains the same as before, with an increase of 6.6%."
1,"The pull request says the Travis CI build is in progress, but that seems improbable. Upon closer investigation into the Travis CI ""details"", it looks like the build is failing."
1,"They did not post their test cases coverage, so I don't know whether their coverage increase or not."
1,"Some ""let"" methods, like participant2, student2, response_map2, are repetitive."
0,Several commits were made to decrease the code climate warnings.
0,The team did not add an automated test plan. But manual testing was clearly demonstrated using screenshots.
0,"The code seems to be dry, and I had no issues with it in the 1st round."
0,"Yes, team has written test cases in a proper manner which increases the coverage also"
1,"The team has included a thorough testing plan but I couldn't find any commits to any of the rspec testing controllers. They could have added as per there test plan.
These tests could have been included
1) Login as Instructor4. Add a new assignment Assignment_Instructor4 under the course Course 617, Spring 2016.
2) Make student6400 as the participant of that assignment and logout.
using Capybara and Cucumber."
0,The team did add test cases covering the functionality. The overall coverage increased  by +6.6% to 43.356%.
1,"Although I believe this project is ready to be merged into the branch, I would still like to make sure as to why their build is failing in Travis CI. Most likely it's not because of their own code, but as a suggestion the team should have also looked into this matter themselves, and explicitly stated somewhere in the wiki by getting clarification from the instructors."
0,"As I explained in my first review, the test plan is well written and all of these are tested manually there are no separate automated cases written."
1,The coverage has actually decreased.
1,No new commit.
0,There have been no new commits since the last round of review. The integration with master branch still has conflicts to be fixed.
1,There were no new commits in the second round. The team did not work on the project during the second round of the submission.
0,There were no such commits during round 1. All are done in round 2
0,"The team has written their wiki page in a very detailed manner. They even added the video links which were missing in the first round as suggested.
Thank you and good job :)"
0,"Yes, the team added relevant test cases which increased the overall coverage."
1,"Unfortunately, the build failed in the second round. But, in my opinion this was not due to the team's mistake. The build failure says the two examples failed are in files ""assignment_spec.rb"" and ""assignment_participant_spec.rb"", both files which the team had no connection with. I could be wrong though.
As the build was passing and there tests were running in the first round, I am inclined to believe it was because of another team's incorrect code that this team pulled into their branch by mistake."
0,"The team added new commits in the second round as well to improve their code style, improve codeclimate issues and changes other reviewer's suggested.
Very few teams have done this. Great work."
1,The code was well written. Although there were some problems with codeclimate identations. The team have made changes to fix those issues.
1,"as long as they fix 3 indentation issues for code climate, they are good to go."
0,"The wiki page provides clear details about the work, and very easy to understand. Just like round 1."
0,"Edge cases are tested, and all scenarios for each method are tested."
0,"They achieve 100% during first round, so I don't think there are any new test need to be added."
1,"It is pending while I am doing this review. When I click on it, it did not pass Travis CI, but it fails on tests on features, while this group is testing participant, it happened to our group as well, I assume it is not an issue with their code."
0,Yes. They are updating code to fix code climate issues.
0,It looks as good as round 1.
0,The code is well organized and written & ready to be merged into the production server.
0,The writeup was significantly well written. Almost all the changes were covered.
0,The project works as intended. Test cases are showing a positive impact on the results.
0,Test cases were added. Overall increase in the coverage range observed.
1,Conflicts were resolved to an extent for the Travis Cl. But not all the tests are passing.
0,Commits for Code Climate changes were pushed in.
0,"The code was well written, DRY was not violated."
1,"The test is almost ready to be deployed onto the production server. As mentioned above, there are some issues need to be fixed."
0,"Yes, they coverage is 100%."
1,The Travis CI is in progress and there are 3 codeclimate issue to fix.
0,"Yes, there are new codes committed during the 2nd round."
0,There doesn't seem to be any new code added in the github. But overall has a good history of commits which is documented well through commit messages.
1,"Build is failing, they should solve that issue, then it is ready for production."
1,No new commits were added during the 2nd round.
0,"Well explained, all the test cases have been explained and are self explanatory as well."
0,"yes, 100% coverage has been achieved as shown in the video."
1,I see only one commit on Nov 2nd. The project was in good working condition during the first review itself. and they did fix the minor bugs in the commit
0,100% coverage is achieved.
1,No new commits are added in this round.
1,"A commit has been performed 4 days back , which isn't making any change to the code just the indentation, and since then build hasn't passed. You should check that out, it just an indentation issue i think. Format it using rubymine and push, it should work."
0,Code has no problem.
0,The code was already well-written . No changes were suggested in the first round. The team did a great work in following coding best practices.
1,"An unnecessary commit has been performed because  of which build has failed, and i think it wasn't required as already code had 100% coverage. You should check that out, it just an indentation issue i think. Format it using rubymine and push, it should work.  A shorter video to explain the work has been added as well."
1,"The code seems clear and dry. However, a few comments would have made the code more readable."
0,The authors have included an elaborate test plan which tests even the functionality they have missed to mention in the proposed design part of the document. This is quite complete.
1,"The test plan is not adequate enough and a little bit ambiguous. For the checkbox part, there are many cases not included. For example, the checkbox is unchecked by default, in different cases, the checkbox will show or not. For the student side, 5 for each case is not clear enough and I cannot identify what the anticipated results for these cases should be."
1,All the tests have not been implemented. but the test plan has been described. Could have included more test cases to extensively test the system. Automated test could have been written.
0,"Naming looks good, they had already added comment to the code in the first review."
1,"Manual test plan as of now.
Try to automate it if possible."
1,"The team has written steps that are required to test the system. However, they could improve this by adding test code that would test the basic functionality."
1,"The team has explained the manual testing process.
suggestion :
include how the ""Go"" functionality is actually tested in ruby .
Include edge cases for the testing functionality."
1,"Yes, the code is written really well."
1,"The code seems to follow good Ruby on Rails Coding practices. The implemented code is DRY. They could have increased commenting  by making comments more descriptive.  The comments for say a particular function could have included  the input arguments, their data types and the return value and its data type if any. For the second round they haven't added any new commits and haven't changed their implementation."
0,"Yes, the  code seems well written and there was no issue with the naming or functions used. However, a few comments could be added to impersonating_as_admin."
0,"Yes. According to what they wrote, they are going to realize this project from 2 sides, the instructor side and the student side. The steps are very clear."
0,"The code is well commented, I did not see any bad naming conventions or bad coding style"
0,Tests with different scenarios are provided.
1,"There's a test  plan. The test plan is deep and indeed tests the functionality.
It should be better if the test plan also includes another step between 4 and 5, in terms of how to make the step ""student can(or cannot) do the second review without the first one""."
1,"Team has not mentioned test cases that they are going to write.
Manual testing steps are mentioned.
Team should work on adding test cases, as manual test does not help to check  all the corners of the complex system well."
1,Test plan looks good
1,2 of the methods are resulting in Errors
1,No testing
1,"The manual tests listed should adequately test the functionality, but information should be provided on automated testing."
0,Well Written
0,The team has used mock-ups and a flowchart to show the basic functionality.
0,The diagram in UI part states clearly the changes the authors intend to make and how it will be like. The flow diagram explains clearly the design logic and help me understand what changes the team will make.
1,"When i try to run manually, i still see the same errors
 
Participant#email sends an email to the participant     Failure/Error: assignment = Assignment.find_by(id: self.assignment_id)
Participant#score Get participant score within a round     Failure/Error: scores[questionnaire_symbol][:scores] = Answer.compute_scores(scores[questionnaire_symbol][:assessments], questions[questionnaire_symbol])"
1,The team has not used many diagrams to explain the changes made in the project. They have just explained using a simplified flowchart. No Use case or ER diagrams have been used to explain the changes made.
0,The code is well written. The variable and method names look clean and concise. The functions are small and well defined
1,"TRAVIS CI didn't Pass, but team have fixed most of CODE Climate issues"
1,"Not enough.
Use case diagram and class diagrams are missing."
0,No design patterns were used. The write up explains the implementation and screenshots of code explains the flow better.
0,Don't see any DRY issues. Well Written Test code
0,The team has used flowcharts and UI which was necessary for this project.
1,"The writeup does emphasize on how the issues are resolved, however lacks a reasoning as to why did they choose it. 
Suggestion:
It is hard to follow the code, as there is lack of comments. You can try to include meaningful comments for every function you have introduced. That will increase code readability"
1,They had 2 diagrams. One for UI and one for the implementation. The implementation can me less words and more simple.
1,"The flowchart included concisely explains the functionality they plan to add.
Suggestion: Add UML diagrams for Use case or sequence diagrams to explain their implementation design. This will make the design planned easier to follow."
1,"There's only one diagram, from the perspective of the user, in terms of how the functionality should be like. It does clearly describe the changes to be made to the system.
It should be better if there's another diagram, which explains the work flow, in terms of which files we need to do at each step, and what we need to do one step after another to implement the project."
1,"Team has added a flow diagram and system screenshots.
Team could added UML diagrams, so as to understand sequence of events or actors involved."
0,"Yes a variety of apt visual aid has been used like screenshots, UML diagram etc"
0,The tests are good and it can be merged to the main line.
0,"It is crisp and to the point, there are no clarity issues either."
1,The write-up contains the information about how the solution was achieved. The details about why the solution was implemented in this way is currently missing from the documentation. The team should include the same in the documentation as well.
0,Yes a lot of cases concerning a participant has been added.
0,Yes the project was about testing and coverage has increased.
1,"The write-up mentions the function of each section of the relevant code, however it is not clear what the changes made to the code are."
1,The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
0,"Authors have clearly explained what needs to be done to fix the issue, how it is done and why it is done."
1,"Some travis ci tests have failed and some code climate issues are still pending, though the commit comments say that the issues aren't related to the project files. But they have tried to fix the issues though so good work."
1,"The project is ready to be merged.
The source code is clearly structured and can be used for the future team to work on.
The project has 100% code coverage. 
In order to avoid potential problems of using AssignmentParticipant instance, participantSuper object is defined in factories.rb, which is an instance of Participant class.
The possible suggestions are to deconstruct #scores method and introduce 'context' constructs to enhance code documentation."
0,"The writeup clearly defines the primary objective of the project and justifies the reasoning behind introduction of additional helper constructs like participant factory.
The authors complement the descriptions of each test case with associated block of code and elaborate on the details of their inner workings."
0,The code coverage was 100% in the 1st round.
1,"The visualization clearly conveys the high-level goals of the project. It does not explain the design in detail, however."
1,The previous builds of this project did not pass Travis CI. The current build status is pending.
0,"The number of commits since the 1st round is impressive. 
Significant improvements have been done pertaining to naming, indentation and overall Code Climate issues."
0,This is a fairly simple design.
1,"The logic showed in the design is clear and easy enough, but the deign lacks essential details for dealing with reviews."
0,The design has been made as simple as possible. The complexity of the design is simplified using flow charts.
0,"Yes, simple and straightforward."
0,The design appears to be simple and easily understandable
0,The design is seems to be as simple as possible.
1,"Yes, the design is simple.
The design includes details in checking rounds: when it's bigger than or equal to 2, add the checkbox and otherwise do nothing.
However, I doubt if that's needed in design document. Since in the future if we need to do 3-round reviews, this 2 feature can be misleading."
0,"Design doc shows a good amount of work to be done.
Team has articulated changes to be made well that makes design doc simple to understand."
0,Looks simple
0,Basic complexity
1,The team has submitted a partial design and the part they have thought about is complete. The rest has not been thought through. Please consider the design for the logic necessary to show/hide the reviews for the students.
0,"The design lacked enough explanation about how will they deal with reviews when the box is  checked and unchecked. For the naming of the function and database, the name seems too long. It is better to make the name shorter and easy to understand."
1,The team has used appropriate principles but no design patterns. They have explained the design plan extensively.
1,"The approach looks fine to me.
It should be easy to test it based on the test plan given.
Any design patterns used??"
0,The design is clear and easy to interpret. The team has provided a code snippet which explains the changes to be made in the system to implement the solution.
0,"The design appears to be sound, they are checking if its multiple round exists and adding the checkbox functionality."
0,"Yes, it seems very sound and workable."
1,"The design is sound because it has a well-developed plan for writing the funcationality, and it also has a detailed code level design.
It does follow the DRY principle, because it adds on directly from the given files, thus does not repeat itself.
It doesn't use observable patterns here. But that's because there's not a lot of implementations to be made. And it does follow the pattern of the original file."
1,"Yes design appears to be sound.
Also the flow diagram helps us understand it better.
Team did not use any design pattern."
1,No patterns mentioned
1,"The design appears appropriate, but since it is shallow, it is hard to tell how sound it is. How will a user be prevented from requesting another review? Also, the naming seems to assume either one or two rounds. What about more than two rounds?"
1,"The authors have still only mentioned the UI side changes, i.e. adding a checkbox to control the functionality. They have not thought about the actual logic to limit the students from seeing the reviews. Please include this in the design as this completes the entire functionality."
1,"The authors gave enough explanations about the design for the UI parts. That is,  how will they design the UI and handle the problems related to UI, but they didn't give the design for how will they deal with the reviews differently when instructors check or uncheck the box. I cannot identify how can they check if the box is checked in the code, and how can they according to the status of the box to make sure the students can only update the previous reviews when the box is unchecked and students can require new reviews when the box is checked."
0,The authors have thoroughly explained the changes made to the system.
0,"Yes, clear and crisp."
1,The team has provided a flowchart to explain the changes that they have made to the system. They have also provided screenshots of the UI that needs to be improved. This makes the design document readable and easy to understand.
0,The authors have mentioned about the changes
0,"Yes, they include all the details in the functionality implementation."
0,"Yes, they have given a good, detailed explanation of the planned changes."
1,"Yes, it has the implementation plan of a checkbox, which allows the instructor to decide about review times. Since that is the only thing to be implemented, there's no more issues.
I think the diagram doesn't have very pretty look, it should be better if the screenshot can be smaller so that the fonts in the diagrams can be seen more clearly."
0,"Team has explain the changes to be made very well.
Also screenshots of the system is helping to understand which part of system is changing."
0,Is decently explained
1,There are no visual aids given. Maybe some flow charts or screenshots can be added to help people understand the project.
1,No UML diagran
1,"The design is clear at a high level but lacks detail. The report described what the project is, but how will this feature be implemented?"
0,It would be better to add some UML diagrams.
1,"Unfortunately there were no visual aids provided, even though they went through the plan in a good way but few diagrams would definitely help."
0,"The authors have very well explained all the changes that need to be done with the help of proper problem statement, the files that require modifications, the current and the required state."
1,The flow diagram used is basically a pictorial representation of the problem statement and so it does not really add any more value. It would be really helpful if the authors could include a real flow diagram that shows the actual flow of events. The screenshots provided help us to understand what changes the authors are expecting in the UI.
1,"The team provided a diagram what feature needs to be added, but it is not adequate."
1,"A flow chart is depicted in the documentation. However, other UML diagrams could have been represented to show the structure and the sequence of the project. The flow chart depicted is a little high level. The total capacity of the project could have been represented by more UML diagrams."
0,"The document contains a flow diagram that analyzes the system's requirements and expected flow.
However, it can certainly make use of other UML diagrams in the expected flow section to give more clarity about the requirements and the sequence of actions."
0,The team has submitted diagrams and screenshots that explain what is expected from the solutions.
1,"No diagrams are present, would help reviewers better understand what is going on."
0,"Screenshots which were included was explanatory.
More figures such as logic flow, wireframes etc can be added for better understanding."
1,The diagrams is detailed and easy to understand. But it is a bit too long. The team can simplify it.
1,"The authors have included a flowchart which concisely explains the functionality that the authors are going to add. They have also included 2 screenshots of the UI, showing the end result in the 'after' image.
UML diagrams are not included. Please add, will give an understanding of how the implementation will be done."
1,"There's a flow chart about how the end result look like. But the flow chart only tells a user story. There's no detailed implementation plan in this flow chart.
3):  some diagrams are too high-level design and do not provide enough details. applies here."
1,"Team has added a diagram that explains the problem statement and its effects, very well.
Team could add UML diagrams to explain the application, changes, sequence of actions, state , actors involved."
1,Yes visual aid has been provided in the form of Flow charts and screen shots. UML could added.
1,The authors have talked about only the UI and not the underlying code. So it is difficult to assess the quality of the change. As far as the UI is concerned the authors have taken a right direction to place the checkbox. Providing further details about the proposed solution including the changes  needed in the controller code to support the UI change will help explain it.
1,No detailed design was provided.
1,The authors have added the methods in the right class. The code is refactored properly. Appropriate gems have been used. The new system does not increase the response time and is efficient. More effort could have been put in the documentation by providing more UML diagrams and also by designing a test plan.
1,"Code level details are not covered in the doc.
But the changes suggested follow the desired requirements."
1,"The team has not submitted code that should be added/implemented. 
Suggestion: the team can add code snippets in the documentation along with the file names in which the changes should be done."
1,The change is little and consists of only one html file. Shouldnt make the code smelly
1,They have included the initial design. It's suggested that they include more details about the design.
1,"No design has been yet proposed by the author, however the goal of the project has been well described. Most of the write-up is the same as mentioned in the Google doc.
Suggestion: Expand more on what changes need to be done in order to achieve the end result."
1,"I believe a lot more effort should be expeneded on the design. As being addressed above, there are a lot of questions that are not addressed at all in this document. The formatting is not nice either."
1,"There are no UML diagrams or screenshots.
Please include the same in the following submissions to make the design document stronger."
1,"Team can explain the algorithm they are going to follow or mention part of files they are going to make changes in.
As changes do not seem heavy , it should not increase system response time.
Team needs to put more efforts expended on the design and explain the efforts."
1,"No visual aids are provided, rendering the explanations somewhat confusing."
0,Looks fine
1,No visual aids are included. feel the team should include more visual aid to help the reader in understanding their problem and its implementation.
0,Can't comment on it right now
1,"1)    Not indicated
2)     Not very clear from the documentation- no detailed explanation of design provided.
3)      Not enough details provided to conclude
4)     Not enough details provided to conclude 
5)     Yes,the team needs to extend their effort on documenting the design better.
Pl"
1,The authors have provided a minimal explanation of the changes to be made. They have mentioned about the UI changes and not discussed further. It would be good to include the underlying changes. The team has identified a view file under the potentially modified files. They have not explored the controller and other files that need to be modified in order to support this. A design document needs to holistically portray your design and so it will be great if such details could be included.
1,The only changes stated in the document was copied from the description. It is not enough to explain what exact changes the team will provide and how they will be done.
1,The changes are explained by the authors. The quality of the explanation can be improved. Authors could have explained the changes a little more elaborately. The explanation is a little high level.
0,It was easy to follow.
1,"As stated above, it is difficult to understand the team's own solution to the given issue. The team could provide the paths to the files that they think should be changed. It would increase the readability of the documentation."
1,"The explanations were inadequate and could have been given more elaborately written.
The document just contains the details given in the user story document by professor.
More content can be added and the flow of logic can be added."
1,I think more effort should be expended on the design. The addition of MVC suggested in the solution is vaguely explained.
1,"They include the interface required. They should include more details about their design, like how to implement and what need to be changed."
1,"The authors have only mentioned about adding a checkbox field to the view. More changes will be required in order to enforce the deadlines on the students.
Suggestion: Add a section called Design Plan to the wiki and mention a rough idea of how you are going to approach the project."
1,"The changes being proposed here are not comprehensive. It just talks about adding an option ""allow students to join review later"" but it doesn't say how.
It also doesn't say whether it's a change in the administrator end or where.
Also, as being stated in the above question, is the underlying functionality already implemented, and there's just an UI change that remains to be done? If yes, where is the underlying functionality? In which file? How is it implemented? If not,  then the corresponding implementation is missing in this design document."
1,"Author does not explain the approach they are going to use. Team should add project purpose, project design to show case how they are going to tackle the issue."
1,"The proposed design looks fine for now, but more details are required in order to make a better judgement. So I think that more effort should be expended."
0,Changes proposed by authors are viable.
1,"There are no such design explanations on which I can improve or suggest on.
It would have been great if there were some more explanations."
1,Not a lot of textual explanation given but the diagrams look adequate
1,"The design is specified to a certain extent, but does not provide where the changes will take place."
1,Not clear
1,"Since the document is mostly copy pasted from the problem statement, it covers what needs to be done. But it has not discussed about how it needs to be done. Adding the exact changes to be made makes it easier to understand the solution proposed."
1,The authors did not provide any design for the project.
0,The design incorporates all the functionality which are required.
0,The design does incorporate the functionalities required. It is descriptive and easy to understand.
1,"The team could explain the ""design""/solution in a more comprehensive way. The team has only pasted the description given in the google doc"
0,The design document contains all the functionality required.
1,They include the interface required. They should include more details about how the functionality should be implemented.
1,"The design includes adding a checkbox field to the view, and based on whether the box is checked or not, students are allowed to or not to do reviews in the second round. This is the main functionality of the project. However, the authors do not mention how they are planning to implement this."
1,"According to the project requirement https://docs.google.com/document/d/1Br9hm-SWIvl5ibWSfRVjmiYTQl5j27l8slWhv2iUCqQ/edit#heading=h.654oe3xw5p73 
The design has nearly copy pasted all the textual explanation from here, but there's a lot of details that are remained unexplained - is the underlying functionality already implemented, and there's just an UI change that remains to be done? If yes, where is the underlying functionality? In which file? How is it implemented? If not,  then the corresponding implementation is missing in this design document."
0,Yes. Document incorporate all the functionalities mentioned in the problem statement assign.
0,Not everything
1,The documentation lacks the detailed design that they are planning to implement so it would be tough to answer the above question.
1,"There is no detailed documentation provided by the author on changes. Just few DB data points and controller functionality (very generic). So, it hard to visualize a solution"
1,The design document looks incomplete with only the introduction and project purpose sections that are mostly copy pasted from the problem statement provided. The proposed design seems to be limited to just an image. Also please consider changing the title 'Do Some Changes' to 'Problem Statement' or something more appropriate.
1,"The document mostly copies from the description provided by instructor and lacks the essential parts like design and test plan. Although some instructions provided, it is not clear enough and cannot help readers to figure out what the project is about and what's the purpose."
1,"The document explains what the problem statement is. However, the purpose of the project could have been explained. The flowchart for the project is shown visually shown but the project design is not extensively explained. Test plan is not provided in the documentation."
1,"Problem statement and the expected flow are clearly explained.
I somehow feel that the name of this project and the requirements(problem statement) are not matching.
 
Other missing items:
Test plans
UML diagrams(except flow diagram).
Low-level design details."
1,"The project includes the problem statement. The team has described the problem statement in detail and has also provided visual aids. However, the team could have also included the way in which they implement these changes."
1,"The flowchart in the design doc explains their problem purpose clearly.
Few improvements could be :
The document didnt contain testing plan
Project purpose i.e, introduction can be more detailed"
1,"Yes, they include project purpose, project design. It would be better if they include the testing plan."
1,"The design document gives details about the problem statement and the expected outcome of the project.
The project design for enforcing the deadlines is missing from the wiki."
1,"I think the testing plan is missing, others are good."
1,"The project purpose is stated, but not extremely clearly. It seems that in the ""Introduction"" part, there's just copy-pasted messages from the question statement. The flowchart in the introduction part is good, but where should this checkbox be implemented? It seems that here it should only be implemented in the instructor/administrator end, instead of students end. But that's not clearly stated in the project purpose part.
The project design is also not very detailed. The title "" Do Some Changes"" doesn't seems to be very serious, but apart from that, the implementation details are also copy pasted from the online project requirements. the two picture of before and after illustration looks nice enough. It's good that the team has found some extra sources that would allow them to get this before and after picture. 
The testing plan is not stated at all..."
1,"Design document does not seem complete.
Problem statement is explained well.
But project design or test plan is not mentioned."
1,There is a lot of visual help which is good but project design could have been expanded upon more
0,Nice flow chart
1,The proposed changes sounds good to me. But as I mentioned screenshots help in a better understanding of the problem statement. Moreover a more detailed doc would have been better.
1,"Changes proposed by authors are good. But, they are explained in detail."
1,"More explanation regarding the solution would be helpful, explaining which files must be changed, etc."
1,"The authors could have listed out the issues followed by solutions with a diagram and some supporting screenshots.
This makes the review easier."
1,The explanations are incomplete and do not provide sufficient reasoning.
1,The team has suggested reasonable changes to address the problem statement but have not included any details. The team should elaborate on the implementation they plan to do.
1,"No, the design approach is very high-level over-view. An MVC design pattern is an obvious conclusion for incorporating any functionality in a web application, but more precise details of the design approach from the team can help the reader in a long way in gaining understanding."
0,Yes the design seems to follow all of the functionalities required. It looks like they have gone through the Project description in a good manner.
0,Yes it completes functionality.
1,"The design covers the functionalities but there seem to be no concrete solutions for the same.
Some more explanations was expected."
1,"The design includes functionality, but does not explain how the data will flow."
0,"I don't think the authors plan to add methods to a wrong class. They seem to be working on the right class namely Review and its associated view page review.html.erb that exactly pertains to their project.
The response time might potentially increase with this new feature. But fortunately the team has proposed to work on optimizing the suggestion algorithm so that it does not take forever to execute.
The team has done a good job on the design documentation."
1,The team has discussed the solution which is required for fixing the issue but has not proposed any design for their approach. So the team should detail their implementation and design for the reader to know what they plan to implement.
1,There are project purpose and design but no testing plan is included.
1,"There is no problem statement mentioned in the design document. It directly dives into the implementation details. This does not help the reader is understanding the need for a project. There is no test plan, project purpose.
The team has tried to provide a design implementation details which is not very descriptive. More effort is needed to enable reader to understand the design better"
1,It would be better to include testing plan.
1,The design doc looks more or less complete given that it is just phase one of the project. I feel that some screenshots and a more detailed explanation would have been better.
1,Testing Plan is stated and project design is not explained in depth.
1,Please submit your design plan and add some visual aids.
1,test plan missing.
1,"The design looks incomplete.
There are no diagrams or screenshots.
Could have added test plans as well."
1,"Only the problem statement and proposed solution are present, it would be helpful to add the test plan asap."
1,"The project document does not fulfill the parameters of completeness. There are missing sections in the document i.e Testing plan, purpose."
1,The design document seems to be incomplete. The team have done a good job explaining their problem statement and have included their implementation in brief. If the team could build up on this and explain their implementation in more detail while adding a few diagrams to explain the work they plan to do would be great. Also the team have not mentioned any test cases they plan to implement.
0,The doc is complete and everything is included. Very well-written
0,"They wrote many test cases I think they are enough, but I didn't find edge cases or invalid input tests."
1,The test plan could have been explained more elaborately. Edge cases could have been covered.
1,"The authors have included a series of steps to perform the test and have provided screenshots, but do not cover other possibilities."
0,"all the scenarios are explained in detailed. The only edge cases which is missing from the documentations is:
the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application
The team should this scenarios and include the same as the part of the documentation and automated script in the test plan."
0,The test plan is very good and there is also a video file which clearly shows the manual testing being done.
0,The authors have included a thorough test plan and they seem to have considered a lot of test cases. The tests convey they entire flow properly and show that the bugs have been fixed.
0,"Yes, the test plan looks complete enough and all the edge cases have been tested. The document also includes the screenshots of the manual testing."
0,The test plan looks good enough for the fix they have provided.
1,No visuals are us
1,I liked that instead of stating all the problems at once and then stating their solutions the design doc tackles in one at a time. Still there wsa no visual aid provided for the project.
0,They wrote clear and adequate description and I can clearly understand what their project does.
0,"The writeup clearly explains the issues and the approach used to achieve the desired results.
Suggestion:
The authors should try to include the rspec test documentation, for the newly fixed issues."
1,There is no visual aid.
1,"The wiki is well written and contains all required information regarding the project. The only scenario missing from the documentation is the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application. Apart from this , the team did a great work."
1,There aren't many visual aids used. It may be a good idea to do some mockups for this project.
1,Visual aids are missing entirely. No class diagrams are provided either. Tip: you could've provided simple charts or ER diagrams for the design
1,"There's no visual aids. 
I think other than a screenshot of a finalized result possible, a workflow diagram will also be useful the work design."
1,No visual aid present in the doc but they have given a link which provides visual help
0,The writeup is good and clearly mentions the issues to be solved.
1,"The UML diagrams are missing, but they are compensated by the sequence of steps, which is easy to follow."
1,"The design seems pretty good, but the solutions are a little bit unspecific. It would be better if there are more explanations about how to implement the solutions so that the reviews can give you more feedback."
0,well explained in the video file
0,The new design seems to take into account decreasing response time
0,"As the project is in the initial stage, there is no technical description.However, I see from the document that their thought process is on the right track."
0,The flow seems feasible
0,Very clear.
1,Nothing related to technical part or classes is mentioned
0,It looks more or less right in the sense that the proposed changes are exactly what is required to be done in the project.
0,No problem found.
0,"They did not provide the link for me to test, only a video is provided, according to the video their features work pretty well."
1,Edge cases could have been implemented.
1,"There is an ""Assign grade"" link for everyone, but only ""Perform review"" for certain teams. 
But why doesn't ""Perform review"" appear for everyone? Or at least ""Update review"". (Not if a review has been submitted, at least until the next round starts.)  [This was confusing!  Do something that's clearer.]
 
Sol : The feature as understood from the past project is that 
Assign Grade is present for all teams. (Standardize the functionality)
Case 1 : No review performed yet -> Perform Review button
Case 2 : Review Started -> View Review button, Edit Review button 
Case 3 : Review Submitted, Deadline not crossed -> View Review button
Case 4 : Review Submitted, Deadline crossed -> Update Review button
 
Lets always have view review button once review has started, + change the update review name to edit (only available for instructors and TA’s) itself that should be clear i hope.
We will make changes in list_submissions.html.erb
 
Comments:
Case 3 and 4 buttons should be switched. If the deadline has been crossed, you should have the option to view the review. Otherwise, you should be able to edit the review."
1,"Cannot perform manual testing, as application is not deployed or the link is not provided. However, checked from the screencast and issue seems to be resolved"
1,"all the basic scenarios are working fine. No issues or problems were found with the functionality. There is an issue related to the CI built which is failing at the moment. The team needs to analyse the root cause related to the build failure and fix it.
Also the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application. The scenario could not be tested as the same is missing from video and the application is not deployed.
Other than that it was a great team effort"
1,The link to the deployed application was not available.
0,The features have been implemented correctly and work well on all the edge cases.
0,Could not do manual testing as the project was not deployed but screencasts shows the testing so can conclude that it passed all the manual test.
0,The feature works as it is supposed to. Don't see any issues.
1,"5), More effort should be expended on the design.
The solution is too high-end, abstract. Also, some screenshots being added would be a lot more helpful. And addressing the above issues will also increase the readability"
1,The writeup mentions what lines of code were changed but it does not clearly specify what each changed portion of code means.
0,The functions are not too long and the code does not need to be extracted to separate methods. COmments could have been added for a better understanding of the code. The code follows Ruby lines and the lines are compressed. for eg : Unless and if statements are compressed
1,Inadequate information
0,"The readme was sufficient to explain details about the idea and also both the videos explain stepwise how this is achieved and demonstrates it.
Also the bugs are fixed and droptopicdeadline has been integrated into the code of this assignment."
1,"The code is readable and no function is too long.
Suggestion:
The impersonating_as_admin? and impersonating_as_ta? function uses the same session variable, so you can try to declare it above these functions and reuse it to follow DRY principle"
1,"The writers have explained what they did in the project and how they did it. But, I could not find a 'why'. No reason behind the approach is specified."
0,"none of the functions are too long
could find changes where DRY principle was violated
the code follows ruby convention and guidelines
Although the code is easy to follow, the comments should be included for the created methods/changes.
apart from that Good Job!"
0,"Writeup clearly explains why the team followed the particular approach and additionally mentions all the steps followed,thus defining the approach clearly."
0,The functions are small and well defined.
1,"The author seems not sure about exactly what solution they need to use (problem 5). Except that, everything is clear."
1,"The intended changes are not stated clearly. Some solutions are also ambiguous, the team only said that they would change some files or look more codes, but they didn't say how they will change."
0,"Changes are adequately explained, easy to follow."
1,"The authors clearly explain about the issues and possible solutions. However, there is no description about the technical aspect and what all tools will be used."
0,The code added appears to be dry.
1,I find the information and solutions provided inadequate as they fail to explain me the solution. also missing diagrams
0,Adequate explanation is provided for each problem.
0,"Thye provided a lot of solutions, which is great."
1,"Changes proposed are adequate, but without any reference to code or design diagrams its hard to tell if the proposed solution will work. It is always better to investigate the code instead of writing states such as this ""Maybe the legacy code is in two places hence the two calls"""
0,The explanations given for the design are quite succinct and dont go into much details. They are just giving a high level overview of the system. Some of the explanations are thorough in nature. Kudos!
1,"The code seems to follow good Ruby on Rails Coding practices. The implemented code is DRY. they could have increased commenting  by making comments more descriptive.  The comments for say a particular function could have included  the input arguments, their data types and the return value and its data type if any. But overall it looks to be good commenting coverage."
1,Test Plan section is not maintained in the documentation
1,"The explanations are good. Separating cases to cases and discuss them one by one is a good strategy. 
However, none of them is explained in detail. They are all a little bit terse. After reading it, I still have the following questions:
1. how to change the list_submissions.html.erb? What are the functions that is already implemented? The four cases in the explanation did not say clearly whether they are already implemented or not.
2. ""The feature as understood from the past project is that Assign Grade is present for all teams. (Standardize the functionality)"" I did not quite understand this sentence. What's its relation too the four cases proposed here?
3. the problem of "" response controllder checks 2 times and should be reduced to 1"", there's not a lot of detailed plan in this implementation."
0,Explanations are satisfactory and they they have provided multiple solutions for each problem which is good
0,I don't think there's any testing involved in this assignment.
0,The explanations are adequate and easy to follow.
0,I found the test cases to be sufficient. No suggestion needed.
1,Write up doesnt include test plan. Good thing would be include the testing steps they have performed. Few screenshots would be helpful as well.
0,The design incorporates all of the functionality required. Some edge cases are also listed. Good job.
1,"The document is a little bit strange, it doesn't show what the design of the project but list the concerns during the design process. It is hard to tell if the team covers all the functions, but from those problems. I can find they design part of the functions."
0,No test plan is included but it seems that team have covered all the scenarios properly.
0,Variable names methods and class names look fine to me.
0,The write-up is clear and clearly explains the issues corrected.
1,"The code you have added in the write up isn't indented, its hard to understand this way. You need to make the write up more readable."
1,"The design explains what all is to be implemented.However, there is no way it shows how it is going to be implemented."
1,The functionality needs to be explained a bit more
0,All the names are intuitive and reasonable. Good job following naming conventions!
0,The code added in the pull request is reasonable.
1,Yes they do incoroporate but very bad look and feel of the document and hard to understand
0,"The write up is well written and explain how and what is done in the project regarding all the issues. 
Just one suggestion- it would have been great if the screenshots were uploaded corresponding to the changes made. But, otherwise the writeup is understandable."
0,Yes the design doc incorporates all of the required functionalities.
0,The write up seems quite understandable.
1,The information provided is good but the page is not organised and the code is confusing. Team should work on improving the format of content(the way they are representing info).
0,They have covered mostly all the problems mentioned and given a tentative solution
1,"There is no design given per se but from what I can understand from the document, their proposed system covers all required issues."
1,"The design includes all the functionalities required in the documentation: https://docs.google.com/document/d/1Br9hm-SWIvl5ibWSfRVjmiYTQl5j27l8slWhv2iUCqQ/edit# the main goal: to let the TA be able to review any team that has submitted the assignment is well stated.
I think some screenshots or other pictures will be more helpful while explaining the functionalities."
0,Yes it incorporates all of the functionality required.
0,"Yes, it incorporates all the functionalities."
1,The variable and method names look clean and concise. No new class is added.
0,From the video it seems it should work fine with the edge cases as well.
1,"The document lists all the problem and possible solutions, which is good. However, there could be more details to explain how to implement the solutions, for example, you can tell more about the changes will be made for the specific solution instead just listing the files need to be changed. Also, the testing plan should be added."
0,everything seems to be working fine.
1,"The team states all the problems included in this project and provide the solutions for them. However, the authors didn't provide enough introduction about what the project is. The problems was not explained clear enough and tough to understand. No test plan provided."
1,The testing plan is not proper. Though the document is nicely presented it does not concentrate on all areas. I would suggest to systematically describe each step.
1,They did not write test code.
1,Could have been more descriptive
1,Provided link is not the wiki link. Not a good documentation
1,"none of the functions are too long
could find changes where DRY principle was violated
the code follows ruby convention and guidelines
Although the code is easy to follow , the team needs to add comments for the changes which is currently missing.
Good Job!"
0,The design looks almost complete in terms of solution-wise details covered.
0,No rspec tests are written to test the changes.
1,In the code topic_id1 and @drop_topic_deadline1 name doesn't seems to follow the ruby guide line and you should probably name them differently like first_topic_id and first_drop_topic_deadline.
1,"Some functions have the same code deleted and added again which could've been avoided, like 
schema.rb line 105 & 110, lines 741-743 & 745-747 and more lines similarly in that file"
1,The automated tests were not created for the scenarios.
0,The functions added are not too long. This is the minimal amount of code that had to be added to implement the changes.
1,"The design doc is disorganized and difficult to follow. There are no sections for project purpose, project design, or project testing. Consider adding these sections to give order to the document. Also, red front against a white background can be an eye strain for some."
1,"The test cases are quite illustrative, however they have not been automated."
1,"The Document mentions the problem statement, and the basic solution that team came up with to solve it. There is no reference to code or functions that might need some modification. Some design talk would be nice."
1,"Code looks good.
Namings are also ok.
Print statements are also pushed(not expected!)."
1,"All the names are intuitive and reasonable apart from ""drop_topic_deadline1"". The team need to change this variable name to something more precise other than that Good job following naming conventions!"
1,Neither the project purpose nor the testing plan or the project design is given. The project just states what are the proposed solutions.
1,"The project purpose seems to be only a user story, that says what's the deficiencies of te corrent issues and a terse solution. I wonder if that's comprehensive enough. I would add some more details in terms of the purpose of each function being changed in a lower level. 
There' only a high-level solution , and which files to change  for the project design. They are not detailed enough. I would add some more plans in terms of how to make the change, when to do the change if the changes are inter-dependent.
There's no testing plans yet. But I think that should be stated."
1,The pull request did not pass the tests and the names assigned seem appropriate to their functionality.
0,"The design doc is clean and neat. It specifies the issues and prospective solutions, which are easy to follow."
1,The coverage has decreased as per the tools that run by default on raising pull request by 13.6 %
1,Build isn't passing. Write up isn't passable. No screenshots or explaination in write up of what you h=are doing and why.
0,Variables and methods seemed intuitive enough
0,All provided variables are well assigned.
1,Testing is not covered.
1,The tests scripts are not written for the changes.
1,No test plan added in writeup or explained otherwise.
0,All the tests have been added as per the test plan and have been run successfully.
0,Testing isn't applicable to this assignment.
0,All the cases are covered.
1,There is no test plan included.
0,"In my opinion, the project is ready to be deployed and does not need to adopt a different approach."
0,"The write was good and well-written. However, it would have been better if some screenshots were also present in the writeup. May be juxtaposing the screenshots of 'before and after' of fixing the issues. That would have made the write-up easier to understand."
0,Writeup is good and understandable. Test plan is written well indicating the steps clearly in what needs to be done to test.
0,Writeup has been improved after the first review. The codes now look more comprehensive.
0,"Yes, it works as expected."
0,the video explains the new functionality and the functionality is working as expected. Good job!
0,Fro video it seems to work as intended.
0,The feature works as per the video shown.
0,It's working.
0,"yes, the ui operations works as intended.the features fixed now works as intended."
0,The test cases were required as the chnages were related to UI. The team mentioned the same in the wiki.
0,Test cases were not required for this project.
0,Not required
0,"No need for test cases.
(+1 for mentioning it in the Wiki!)"
0,"The code is well written.
I did not see any bad naming conventions or bad coding style."
1,"Although the test plan looks good, I am not able to see any test cases added in the pull request."
1,"Yes, they had test plan, but only simple test plan, they should add some more corner cases."
0,the test plan is thorough.
1,"The test plan is present. It consists of a set of functional tests described for each of the five views.
I would suggest elaborating on the technical side of tests, for example specifying which spec files will be modified or whether or not the project will utilize RSpec. Moreover, it would be better if the team provided a rationale for why it is sufficient to use only functional tests."
1,"The test plan has covered test cases for testing functionalities of sorting submissions table and review mappings per field. They can also include test plan for the edge cases of the system, like the code should not break when the submissions table is empty and show should probably display a flash message saying ""no entries to be sorted!"". In this way, try to add a few negative testing to improve your coverage.
This will make your code more rigid."
0,"Test plans looks to be an overview of the functionality, In the test plan i see the functionalities explained l"
0,Yes it includes test plan. It is very well written and will test the functionalities.
0,There is a detail explanation on how the function testing will be carried out under the teating plan section of the wiki doc.
0,The design doc includes the test plan which covers all the changes that will be made.
1,"I suggest the testing plan be improved. In place of giving steps on how a reviewer should test the project, the team should instead list how they wish to write tests for the functionality added.
The rspec could be something like expect(page).to have_content(sorted)"
0,You have a lot of testing scenarios which is really good
1,"Yes, the design includes a very good test plan. The tests are deep and detailed and completely test the functionalitys.
But I think it could be better following the DRY principle if the tester don't need to log in as administrator2 every time."
1,"Yes, the team has made a very good testing plan, consisting of functional testing, which covers almost all of the use cases which have been added/modified. However, the author could have added code snippets of the same, instead of just discussing the proposed plan."
0,No visulization is necessary for this project
0,diagram is added.
0,The team has added good number of mock UIs and UML diagram and clearly explains the code follow. All of them are self-explanatory and needs no improvement
0,"There are multiple visual elements that improve the readability of the document. Screenshots of the UI tables help with the illustration of the required changes. Furthermore, the UML diagram demonstrates the relation between relevant flows."
1,"The authors have included a UML diagram which explains a flow of the diagram
The document does not strike a balance in the use of visualization. It lacks at illustrating the changes using appropriate use-cases, mock-up screens to show the expected changes as opposed to the current scenario. The mock-up screen can include sorted values of the field whose headers you clicked upon.
Also, there is no need of other visualization aids such as class diagrams, as the modifications are limited to views."
0,This team used great diagrams that add to their documentation's clarity significantly.
0,"Yes, the team added visual aids like UML diagrams, screen shots, code snippets to clearly describe the changes to be made to the system. Well done!"
1,"The flowchart added gives a good idea of the final outcome after implementation of the changes proposed.
Suggestion: A diagram explaining the plan of changes to be made will make the document easier to read."
0,Yes. The figures added to the wiki clearly indicate the changes that will be made to each view. The columns that will be made sortable and how will the made sortable. Good work :)
0,"This part has been significantly improved from the previous submission. The diagram make it very easy for an outsider to understand the architecture, the underlying problems and the proposed solution."
0,This their design is very simple and clear.
1,"The design is simple, they are adding an external JQuery library to achieve the intended sorting functionality and will be adding custom js to achieve further functionalities. As indicated earlier, not clear as to this custom js will be included in multiple pages."
1,"The modifications that are suggested by the team are minimalistic and cover the changes that are necessary for the javascript library to work.
While it is possible to infer the majority of changes that will be introduced in this project, it would be better if the authors elaborated on the implementation of all the views as opposed to discussing only the ""view submissions"" table."
0,"Yes, the solution proposed is simple by using the  jQuery tablesorter gem."
0,The design is extremely simple and easy to understand. Good work guys :)
1,"yes, the design is the simplest I could think about. But it doesn't include how to change the files. 
I think it can still be as simple and succinct if the modifications of files can be included.
On the other hand, the expected result seems to be too long. There's too many screenshots"
0,"Yes, the design is very simple to understand, and also the implementation is pretty clear and effective."
0,"This project is not very difficult, so they don't need to follow some principles or patterns."
0,"Yes, as its sorting, not much scope on design approach. Yet the team has documented well on their approach regarding multi-level sortings that they are undertaking in few pages. They have also considered cross-browser compatibility of their jQuery library, which is a common design miss during client-side changes."
0,"The design appears to be specific to the requirements. For this, they have used a UML design which basically explains the flow of the use-case. They have not used any principles or design patterns. However, there does not seem a need to use any, as their changes are limited to the html view and making a call to the tablesorter using JQuery.
As per the document, the design does not make any redundant changes or unnecessary changes to the code. Thus, they have done a good job by optimizing the changes."
0,The authors have justified the use of jQuery table sorter by listing its advantages.
0,"Yes, the design seems to be sound."
0,"the design is sound and easy to understand. The design proposed also sounds logical, i.e to sort team names alphabetically, and grades numerically. To sort by both ascending and descending order."
0,The design is very efficient and follows the standardized software engineering practices.
0,"They made clear explanation about their task. For example, their provide pictures to show what they need to do."
0,"Yes, the team has elaborated their design approach and changes to system in detail. They have mentioned all the file changes and also provided sample code for reader understanding."
1,"The authors have explained about their changes neatly, including previous suggestions. They have added detailed description about tablesorter which they plan to implement. The tablesorter is used to sort data for multiple fields for a table, using multi-tbody sorting. They plan to use it in the grades and review_mapping views. They do not plan to implement in their drop-down, but display the sorted data itself on loading the page. 
The changes look more clear to me, as they have been able to implement the changes in the table view using multi-tbody sorting for submissions table.
I think that introduction to Expertiza is highly unnecessary and should be removed,"
0,Great improvements compared to the previous submission. Now its a Very well written document. Good job team.
0,"The team has added uml diagrams, images of related web pages and provided details on jQuery tablesorter that explains well the changes the team plans to make."
0,The authors have explained enough about the changes
0,The wiki is detailed enough that it mentions all the functionalities required in the project. The team has made sure to explain all the changes they wish to make to the system. They list all columns that need to be sorted and how they will implement the sorting.
1,"Yes, the changes are well explained. There are a lot of pictures, snipped screen shots to help explain the changes to be made.
There's one issue that the screenshots are not very clear, since it's big. It would look better of the screenshots can be clearer."
0,"Yes, the authors have significantly improved the writeup, and very adequately explained the changes that they've made."
1,"Proposed solution is correct, but as i have said in other comments, there should be a design present."
1,The design is quite robust however more effort could be given to the design analysis. In some places the author just states that they might have to look into the code.
0,"Though, the solutions proposed are at a very high level, it does make sense. I can't comment on the actual implementation because there isn't much info on that."
1,"Most of the problem statements have been addressed, just missing a test plan"
1,"The code passes almost all Travis CI . However, there are really few which fail."
1,The pull request is the same as the previous one. And as in the case of the previous one it fails.
1,"They did a good job and they can make it better by fixing some issues . According to the pull request page, the Travis CI build failed and there are 5 code climate issues to fix"
1,The build didn't pass in Travis CI. There is still an error.
1,"There is a minor code climate error as mentioned above, similar code. An easy fix and you will be green with the climate check."
0,The team gives a good guidelines for how to test and what to test for the two classes.
1,The travis test had failed and codeclimate shows indentation and other such minor errors. I think that the team just needs to work on the styling and following some Ruby guidelines and they are good to go.
1,Not ready. There are still a few errors in Travis CI and code climate.
0,The writeup is well written and clearly tells the flow and method of working. It shows clearly what all work is done and how it is done. It mentions specifically the explanation of each functionality and how it is checked.
0,I loved the write-up. Write from the beginning to explaining Expertiza to explaining their task and the test plan which was very detailed and methodical. I also like that they had included a screen shot of the Mutant test which shows the thoroughness of their tests. Overall an impressive job by the authors.
0,The writeup is pretty good and easy to follow.
0,The write up is very informative and clearly shows the impact and result of the project tests. It would have been a great addition to have included more discussion on the design choices of your testcases and how it was implemented. Overall a great wiki.
0,The writeup is well documented
0,The project has a good coverage of the codes
0,The team was asked to write test cases and get a coverage of around 90%. The team did a really good job in writing test cases for all the methods present in the assigned files.
0,The tests cover most of the scenarios as is evident from their mutant killing capabilities.
0,"Yes, the tests cover all the scenarios."
0,N/A. This is a unit test project.
0,"From the video, the functionality works well."
0,"The team did add test cases. They achieved a little more than the desired coverage even , that means they have done a great work."
0,There are no new tests and that is because the team had already completed their work before deadline 1 and the coverage was 100% on the deadline one itself so there is basically no scope for improvement for this team.
0,"They didn't add test cases, but the test coverage is always above 90%."
0,No need for adding new test cases as the previous submission already achieved 100% coverage. I apologize for not being certain how to accurately answer this question.
0,There is no new commit during the 2nd round.
0,There were really few commits in the 2nd round. The only commit I could see was on 30th October. The only suggestion I would give is to continuously update their work on git.
0,The last commit was 12 days ago. I believe that this team had finished their work well before round 1 itself. I think they had planned the work well in advance and followed that plan as well.
0,No new commits. No new bug fixed.
0,No commits needed after first review.
1,"The code is well-structured, the team uses context and it properly to separate different cases and using each to make the code DRY. However, it seems the object used to test are not all stored in the factories file properly."
1,"The code is well written with proper naming conventions and proper size of functions. However, i would only suggest that they should include proper comments so that it increases the readability of the code."
0,The code was written pretty well.
1,Code is very neat and readable. I appreciate you attention to following good syntax practices. There is some similar code was exists in the controller action method and the content page method but simple to bring out and make dry. Overall great job.
1,"The wiki give the motivation for this project, but it is general and should be more detailed for this project."
0,The write up is clear with its goal. It nicely explains how and why did the author work in a particular way.
0,The document explained well the work and the approach to doing the work.
0,The write up is enough for me to understand.
1,"The overall purpose of the project, the need for mocks/stubs, and the scenarios of each test case are very well presented; however, there is little explanation about why certain tests were implemented in any particular fashion. It would be a nice addition to include a few of your test cases and explain your reasoning behind why/how you implemented that test case. Adding this would further clarify your design/testing plan choices and make for a fantastic read."
0,Well explained information about the Design and the results.
0,"For the methods that include different conditions, they provided tests fo different kinds of conditions. Also, for each method, the team test various aspects of the method."
0,test cases are thorough
0,"The test plan is accurate and checks for different pre conditions , edge cases , invalid input values. I could not find any missed scenarios."
1,The test plan describes the flow of the tests and what the expected values of the objects should be in certain scenarios however I didn't find any mention of edge cases or invalid input values.
0,Test plan is well-rounded.
1,"The team has introduced the functions clearly, but it may be better to also include the introduction of expertise itself. Besides, the motivation is general, add some specific details for this project would be better.
As far as I am concerned, for the functionality of the menu, the introduction is also a little bit general. Adding more details about what the function of the menu, so we can know clearly what should be tested and if the test is enough."
0,The write up is perfectly written.It clearly describes what functionality the work is related to. It gives information for each aspect of the project.
0,The wiki document was very clear with respect to the responsibilities of the group. it also detailed their approach to writing the tests as well as explained the functionalities that the tests were written on. Well done!
0,Clearly.
0,The tests all pass successfully.
1,all the tests are working properly except one. A pretty good work has been done.
0,No idea how to manually test the authors file.
1,"Most of the codes are well strutted, but something like ""returns an equivalent item"" is long and it is better to separate them."
0,the function definition is of perfect size. the code follows the Ruby Style Guide.
0,"The code looks good. It seems well ordered, structured, and 'DRY'."
1,"The test cases are cleanly written following good practices. Some of the indentation needs to be adjusted to contain better readability. Also, within the menu_rpec file, you are essentially testing two classes Node and Menu. I am not sure why that is. Is the node class and inner class of menu? Maybe these two classes should be separated into different rspec files to ensure a better naming setup. Maybe this could be clarified in the wiki so that readers would understand the design choice. Overall great work."
0,"Code contribution of all team members.
The code doesn not smell dry"
0,All the names are used properly.
0,"the code follows correct name structure for variables, methods and class."
0,The names are very intuitive. The build doesn't seem to have been passed because of the indentation errors and failure to follow certain design guidelines.
0,They kept working on this test and improved it.
0,The test cases are covered in the coded.
0,The tests have been properly converted into automated tests.
0,All of the cases discussed in the Test Plan have been included in the test file. And all of them are also passing. Very good!!
1,"The code was well written and there was no issue with the naming or functions used. However, a few comments could be added to the current_team,new_team and team to make the code more readable."
0,The team has followed rails best practices while writing the code.
0,"Yes, the code is well written."
0,The code was written at it's best
0,The code added during this project adheres DRY principles.
1,"The code is written aptly and it does what it is supposed to do. However, code comments are missing."
0,No there were no commits made after Oct 31st.
0,"Yes, there are few commits after round 1"
0,Changes are covered with new test cases.
1,"The team added test cases in the spec file for both the issues. Further, a detailed explaination is given using screenshots for manual testing if necessary. The coverage increased for 1 issue while it remained the same for the other."
1,"The team has modified an existing test case, but it didn't increase the test coverage."
0,"Yes, it increases the coverage too"
0,coverage is same
0,"Yes, they did add the test cases and the coverage increased to 80%"
0,The team have added adequate tests.
0,The team did add test cases covering the functionality. The overall coverage increased by 0.004% to 47.652%.
0,Everything looks fine to me.
0,The features for the issues fixed work as intended.
0,"Yes, the UI changes according to the specified conditions. After logging in as a student, we can see the team name being displayed at the top of the page."
0,Works properly
0,Yes Everything works perfectly fine.
1,"The user name issue does not seem to have been resolved. Although the code added seems adequate, I was able to create a username with spaces in the string."
0,I followed the steps as mentioned in the wiki and it works as expected.
0,Comprehensive.
0,The write-up clearly explains the issues faced and the code fixes used to solve them.
0,The wiki page has been written concisely. The team has used screenshots which ease the understanding of the work they've done.
0,It was very well-written and self explanatory.
1,The write up has most of the relevant information. The formatting could have been better. I would suggest the team to use a standard dimension for the screenshots they have added.
0,The writeup is great. I was able to understand the issue and do manual testing.
0,In good state.
1,"The code looks good and it could be deployed onto the production server. However, there could be a situation where even though a random num(0-1000) is assigned to each team there might be a chance that two teams get the same name."
0,Excellent work
0,"Yes, the changes have passed all the checks and can be deployed in production."
1,I did not understand why is it necessary to prohibit spaces in usernames. I believe the code could have been modified to work with spaces as well
1,I think work is still needed on this project. All test cases are not able to pass so.
0,"Yes, the code changes are simple and to the point. I don't see any other way it could be done."
0,"Yes, the build passes Travis CI"
0,The travis builds on both pull request have passed.
1,Build pass was failed in Travis CI.
0,There are no conflicts
0,"Yes, the pull request has passed the Travis CI build test and does not contain any conflict with the base branch."
1,No the code did not pass Travis CI tests. there was an issue with generate_team_name which could be fixed.
0,"Yes, the Travis build is passing."
0,Yes the team has done great job in the write up It is properly indexed and addresses details about each issue and its solution.
1,"The how part is clear. As to the why part, thought they have clearly mentioned the the problem statement, i think a little bit more of an explanation could go into why is that actually a problem."
1,"How has been shown well through the screenshots but why has not yet been described. No particular reference to a design pattern has been made, but that is understandable since their project was based more on changes and less on additions to the code."
0,Write up explains about the problem and how it needs to be fixed which seemed logical
0,They standardized the team name generation and fixed the username without space. For design patterns I think they didn't used it may be it wasn't needed
0,The write-up clearly mentions the issues to be fixed and the code changed to fix each issue.
0,The write-up explains the approach used and the code used for implementation very clearly. The test plan is also defined extensively. Screenshots help in understanding the implementation more. They did not use any design patterns.
1,"The test plan is explained in a good manner, but the edge cases and invalid values are not mentioned. What if a space is in front of the username."
0,The test plan looks good. It includes both manual testing and automated testing by writing Rspec tests.
0,"Yes, the project deals with an issue related to names, such as not allowing whitespaces , etc. The test verify that the issues are now solved."
0,They have covered few edge cases. Just a suggestion to include result before and after fixing the issue. May be juxtapose it.
0,Write up has test plan with clear steps and screenshots.
1,Test plan has been well implemented for one of the issues. The test plan does not show what happens if a user tries to create a new account with a space in the username.
1,"While the test plan for fixing team names have been shown, i couldn't find the test plan for validating username."
0,The team has included test plan as well as the screenshot of the manual testing.
1,"The functions are not too long so the code doesn't have to be extracted into separate methods. More comments could have been added for easy understanding of the code. The code follows the Ruby style guide and the code looks refactored, statements ""unless"" keyword are written in a single line."
0,The code follows Ruby style Guidelines and is DRY.
0,The team has done well not to over complicate the issues and have resolved them with relatively few additions.
0,There were not many big changes. All the changes are crisp and to the point.
0,There are no additions in terms of methods or any new implementation. There are minuscule changes done so it still follows the existing standard.
0,The problem is explained clearly and the implementation plan is also described elaborately. The explanation helps in understanding the project very well.
0,The write-up is good and clearly mentions the issues to be corrected.
0,Write up is quite impressive. I was able to understand the project through write up.
0,Write up is clearly understandable. Systematic approach taken to fix the issue.
1,"The write up has been written well. There's obviously some additions possible to the write up. The code changes/additions have been shown, I would recommend description of why those changes/additions were made.
I would also suggest the team to standardize the size of their screenshots."
1,"Yes, I was able to understand the issue as well as the solution overall. But I couldn't understand why there is a need to append a team name to an assignment. It was just mentioned that it is done in other part of the code as well. Mentioning that would have given me a better idea."
0,The team has explained the problem statement as well as the approach they has chosen with lot of details. It makes it very easy for end user to understand details of the project.
1,The author's work is implemented well and is implemented as expected. Few edge cases can be written to test the code completely.
1,Wiki or read me does not include instructor or student credential so couldn't check anything.
0,Seems to be working.
1,"I was able to create a new user with the username ""abc def"". Although the changes made to the code seem to be sufficient to fix this, the deployment does not seem to reflect the changes."
0,The code resolves all the issues as per the problem statement and the features work correctly.
0,"The variables, methods and class names are named appropriately. The variables used in the program suggest the functionality."
0,The names used seem appropriate to their intended functionality.
1,Test plan is clear but doesn't have any test cases.
0,The newly added code adheres to ruby programming standards.
0,No issues found.
0,"The team has made minimal changes in the code to fix the issues. No new class, function or variable has been added."
0,They have converted the test cases mentioned in the test plan into automated tests. The tests have been implemented as mentioned in the write-up.
0,Adequate testing was performed using RSpec tests for both the issues.
1,Cannot check. Link
0,"Yes, the cases discussed have been converted into appropriate tests."
0,The team has created a new spec file to test all the issues of the PR.
1,"Maybe add a class diagram, but newly added flowchart and database diagram make the design more clear."
1,"Yes, it seems like sound, however, the authors could add some principles and patterns into it."
1,"Yes, it seems very sound. They list what they are going to do in 4 fields."
1,Documentation can be improved. Include more details about the controllers method team is planning to change/add.
1,"design looks clear, just need to add what files will be added, and what files will be modified to make the design more sound."
0,"Yes, they explained the changes in a great detail. They also wrote a part called ""Implement Steps"" which includes 5 tasks. Good job!"
0,"They explain their changes succinctly and in an easy to follow manner, and they explain the motivation for the changes well."
0,The team have thoroughly explained the changes that need to be made and how they intend to make those changes. The team could explain their test plan in more detail.
0,The additions made to the explanations were excellent. The detail of which changes affect which files is very good.
1,Need more explanation of the work to be done by the team.
1,"no files section in the wiki, need a section to list all new files and modified files."
0,There are screenshots that can help in understanding the purpose.
1,no uml diagram
1,No UML diagram provided
1,"The first screenshot helped me understand the design, but the second one does not help a lot."
1,"The team has provided screenshots to help understand the changes in the UI that need to be reflected. Moreover, the team has included proper steps in which every task is achieved."
0,They have included a diagram. It do help me understand how they are going to implement this project.
1,"only screenshots of current web page, may need some diagram to show the design in the future."
0,Images were very useful in understanding need/intent for the project.
1,There could be more visual aids to help reviewers get a better understanding of this project.
1,Need to include uml diagrams - try t include use case diagram to explain the flow of the solution and a class diagram to explain how you will be implementing the solution.
1,As I said early the images are very very large and don't fit unless I have the wiki full screen. Also finding the changes from the original is a bit tricky.
1,"There are ample screenshots of the UI to help the user understand the flow of the changes made. However, there aren't any UML diagrams that explain the use cases and the design of the newly added functionalities"
1,The team have included helpful diagrams but I feel the team could have included diagrams that better helped us in understanding what the team are planning to implement. The current diagrams show us what Expertiza looks right now and that's it.
0,The desigin has many details which from my point of view is in the right direction.
1,The test plan seems a little vague. Maybe the scenarios can be explained in a better way first and then given in bullets.
0,The design they have right now looks good to me. I did not find any inappropriate design in it.
0,"From the steps taken by each tasks, I guess they can perform all the functionalities well."
1,The team has not mentioned what method/s they are planning to change inside the controller.
0,"no question there from my point of view, the implementation design is nice."
0,Design appears to be sound. I would do the same.
1,"The authors have considered the requirements and accordingly designed their solutions. The proposed UI design looks very intuitive and the abstract understanding of the code seems to good. However, the implementation is required to say definitely if it makes the code smelly"
0,The explanation is complete and easy to understand.
0,An explanation for each functionality provided.
0,"The team has given a proper explanation by including the workflow/ steps that need to be achieved to solve the given issue. This shows that the team has an organized plan to implement the solutions, this will help the team in the later stages of the project."
0,They explain the changes step by step. Very detailed and easy to read.
0,"nice explanation with step by step implementation plan, it is very easy to follow the design document."
1,"The explanation is good, The images are very large on the screen and it is hard to spot the changes that you made, consider highlighting the changes to show them better."
0,There is adequate explanation for the changes proposed along with screenshots to explain the output.
1,The authors have done a good job listing the changes they plan to implement. But the team have not explained the changes they proposed.
1,i felt there was a need of adding more explanation. Add UML diagram so that it is easily understood
0,It has incorporated all the functionality.
0,"Yes, it includes all the functionality mentioned."
0,The team has included solutions to all the functionalities to be implemented.
0,Their design contains all the functionality required.
0,"Yes, they include all the functionality in the wiki page."
0,Yes. all functionalities mentioned in the requirement are listed.
0,"Yes, they did a great job, incorporate all of the functionality required."
0,Design appears to account for all needed functionality.
0,Explained the requiremnts well and their plan - but what they will be changing is vague
0,"Yes, the design document mentions all the necessary steps and the design ideas for the implementation of them"
0,Yes the team have incorporated all the functionality required.
0,All the required parts are in their design.
0,"The project purpose. design and test plan are all explicit and detailed. Just one suggestion that the structure can be more centralized. For example, the 2.3 and 3.3 may better be together, like Overview and Details, which I think may be more specific."
0,The team has included everything which is required in the documentation in a comprehensive manner. The team has also included test plan for two scenarios.
0,"Yes, they include project purpose, project design, and testing plan. It's detailed and easy to understand."
1,Could have added more explanation on the changes proposed by the team.
0,all necessary parts of design document are included.
0,"This design cod is fully completed, including project purpose, project design, and testing plan."
0,"Problem, Design, and Test plan are all here. Tres bien!"
1,The design doc outlines each step that needs to be implemented and a simple implementation plan
1,The team has explained the problem statement well and detailed the implementation they plan to do. Also the appropriate test cases have been included. But I feel the team should have included more explanation in their implementation.
0,The team has done tremendous job in the test plan they have already implemented the test cases and given the path to run it.
0,The CI build has passed and there are no conflicts.
0,Travis CI says tests have failed but these don't include the tests written by the team.
1,Yes travis CI is passing. Code climate has few issues but they can be easily resolved.
1,"The build seems to pass, but it would have been great if the test cases were explained better.
Maybe some screenshots or a video would have been easier to test."
1,"From the file diff in GitHub, it looks the code is in good shape. There were a few suggestions provided during round 1 review. If those could also be integrated, it would be better. The test cases are successfully running. But the functionality could not be tested due to lack for steps in the wiki."
1,"The team has covered the implementation of the points given in the problem statement. However, testing of the project is necessary. This is one of the point which cold be worked on by the future team. According to codeclimate, there are 7 issues which need to be fixed as well. The future team could improve on those points."
1,"The code is functionally ready to be deployed in the production server, because it is sound and even passes the build of Travis CI. There are a few minor issues due to Cognitive Complexity of names of methods, lines of code and a few indentation errors. If they are fixed, the code is complete and will pass the build of codeclimate as well. The team has proceeded in the correct approach and there is no need for the project to be redone from scratch using a different approach."
0,I think the code can be merged. All the test cases seem to cover the edge cases and my testing shows that the things function as expected.
1,The code is ready to be deployed on production server with few caveats. At some places values and logic is hardcoded. This project would be a really good starting point for further work.
1,"A better explanation on the test cases would have made sure that the code is ready.
I feel that some more tests need to be done before deploying the code."
1,"There has been some improvement in the content of the write-up, but not all suggestions have been incorporated. Adding more screenshots of the functionality, or a video of the project being explained will always be helpful."
1,"The write-up lacks screenshots/ relevant images/ screencast to explain the workflow of the project. This would increase the readability of the wikipage. Also, the team has added testplan and included description for the code presented in the wiki. These points were mentioned during the previous review which were picked up by the team. The team has done a good work in improving their writeup as compared to the previous version."
1,Could have been more elaborate how to check the work. No mention of design principles or patterns used.
0,Nicely written wiki.
1,Dissatisfied with the write up because no clear explanation has been given for how they arrived at the design. At some places the documentation abruptly stops mid-explanation. The code screenshots and the accompanying explanation is good.
1,They should have included screenshots associated with the issue. it would help one understand the solution better
1,"The authors have added the screenshots from github which clearly shows the code change.
But since there are many changes, the explanation in the wiki is small.
A better way would have been to put the links to the git files where the changes are made and there could be more explanations instead. This would also reduce the size of the wiki."
1,"Works as intended. Could have elaborated a little more like a guidance in wiki. 
Was able to test the features. Works fine."
0,Everything is working
1,The system works as intended however the flow for system given in the wiki is quite confusing. The test cases were edited to cover all scenarios.
1,"The team has written new test cases, but the overall test case coverage has decreased by 0.04%. The tests cover the range of this project."
1,"The team have added the test cases which covers the range of the project.
Coverage increased."
0,"The team has added test cases:
1. To check that if there is no rejoinder for the review then it redirects to new author feedback page.
2. To check that the other teammate is able to edit.
3. To check if the page is redirecting back to review.
4. To check if the rejoinder by a participant of a team is saved properly. 
The overall coverage decreased from 48% to 47.601%. It decreased by 0.04%"
1,The team has added test cases but the overall coverage has reduced by 0.04%
1,The team has added test cases but the code coverage has decreased by 0.04%. The newly added tests cover almost all the new functionality implemented. The new test cases are pretty diverse.
1,"Yes, the team has added test cases, the code for a couple of test cases are in the wiki in a separate section.
Again, it would have been better to explain the test cases a little more, may be using screenshots of successful test cases."
0,"I don't see any new commits for round 2, mostly nothing was needed"
1,The code is well-written with proper comments. But none of the suggestions from the previous review has been implemented. Teams are provided reviews so that they can further improve upon the code.
1,"The team has implemented proper functions and has used a proper naming convention. However, there is scope to add some comments. For ex: in the new method - get_feedback_assessments_for method which will return a feedback assessment, the team could have added some comments about the logic implemented. Apart from this, the code is concise and good coding and Ruby practices have been followed"
0,"Did not find problems in the code in the first round. Follows ruby style guide, commented and good naming. Very well written."
1,There is no change in the code in this round. The variable names and method names are intuitive. The code is well indented; some useful comments can be included to improve readability. The code is DRY.
1,"In the first round, which files were related to what issue was not mentioned. However, now they have edited the wiki to reflect the mentioned changes. Each file and its related functionality has been mentioned. Appreciated!"
1,"I think their introduction and issue sections clearly shows what functionality the work is related to, they also add some screenshots which help me understand what they have done. But I can not understand what is bookmark and what it is used for, I think it is difficult for someone like me who have not used bookmark to understand these with only a short description. If they can write something more about bookmarks it will be better."
1,Test Plan too brief. Could add scenarios and description.
0,They have mentioned about possible tests required for the project.
0,"great work in high level test plan , it is very easy to understand and it is one of the strong point of this documentnt"
1,The test plan given is not concrete. Just mentions what should be done but no actual steps for them.
1,Several tests are listed and described. I would suggest adding more details for each test as there is some vagueness as to what each described action entails.
1,Yes the design includes a test plan in the end. This too is very abstract (about 5 lines total) and just states the use cases. Tip: use the 'it should' format or at least describe the simple manual testing that can be done.
1,Test plan does not contain edge cases or the step by step procedure for performing test.
1,Test plan is discussed in the write up. It could have been supported with some use-cases.
0,"It gives a high-level design picture and two scratches of UI, which are all good and understandable."
0,"Yes, diagrams are self-explanatory."
0,I see that they added an additional flow diagram that is further helping in the understanding
0,i liked the visualizations used this time around. they have certainly improved from the last time. I liked the overall used of high and low level visualisations provided.
1,1) Create class diagram and UML diagram outlining the set of actions that the reviewer and the author can perform.
0,"overall team has done good work on visualization, hope to see the actual images of expertiza by the end of the project"
1,"They have a UML diagram which pretty much does it job. I am not in favor of the UI mockups they have put. They could have used any software for the same, which would have made it legible."
1,"The UI mockups are good. I'm not entirely sure that the UML diagram is effective, perhaps a better diagram style would work better."
0,"Yes, have included the flow of the process in the second round of interview"
1,The diagrams have been enlarged and are now visible. Good improvement. However I still feel that computer made mockups would have looked cleaner.
1,Diagram included in the implementation plan is confusing. A better way would have been to include a diagram to indicate the step by step flow.
1,"As said in the previous review, though the UI mockup explains the functionalities, it could have been more legible."
0,Simple and clear. Easy to understand.
1,It's precise but some information missing.
0,The design for the feature is simple and clear.
0,The design looks to be simple and clear to me. It clearly states what files are going to be changed and as per my knowledge there is no redundant and unnecessary change.
0,"1) Yes, the design appears to be simple."
0,mockup diagrams really make it easy to understand
0,"Well, the design does look simple. It is not difficult to understand the principle."
0,The plan of work seems to be quite simple.
1,"Yes the design is simple, however, as stated above it is very succinct and abstract.  Only which files are going to be edited are written. What methods/interfaces will be modified is not mentioned."
0,Design seems simple and correct.
0,The design appears to be sound following all the appropriate principles and patterns. I liked the overall flow of the document.
0,1) Follows appropriate design principles and patterns.
0,It does appear to be sound and in sync with the DRY principles.
0,The proposed changes match existing expertiza guidelines well.
1,The design appears to be well made. However due to lack of more detail I am unable to judge it correctly. What changes need to be made in the files is not mentioned.
0,Design seems good.
1,"In the problem statement section, the first author should be reviewers I think."
1,Problem statement is too brief. Design should 'talk' about proposed solution. Too short.
0,The explanation is good and helps get the point across
0,"1) The document clearly mentions the changes to be made to the existing system and requirements that need to be delivered.
2) Also mentions the changes to be made to the UI.
3) The files to be added/modified are also mentioned."
1,Content is good and well written from the last review I was expecting little more in depth deatails on the implementation side . I see no edits after Nov 14 except for the new image
0,"Well, they have mentioned what needs to be done, what changes have to be implemented."
0,"Yes, very clearly writeup."
1,The pull request has failed but doesnt look like its related to the team's commit. there is already an existing issue present.
1,"It's a test project, so not applicable for production deployment. But the code can be merged as appropriate test for participant model. Any future teams can enhance the test with varied input scenarios."
0,"The write-up and screen cast were both very explanatory. It included detailed code, the need for the test of partipant.rb and the use of the model. There was no change required from the initial write up."
1,"Yes, the test does covers 99% of the models variations. The team could have enhanced tests with varied inputs, such as for the handle method check. Even a more through test of the score method with different input data could have been done."
1,"The authors have made a really good attempt at explaining the changes to be made, however, I feel like few details could have been added to the previously done work and how they are going to improve it."
0,"Yes, the tests cover all the scenarios one should check for. Great work !!!"
1,The authors have described the changes to be made. However these are very abstract and require some technical depth
0,YEs the project was a test project and the team has managed to achieve 100% coverage of the model. There was no increase in coverage from Round 1 to Round 2
0,Authors have explained the changes that needs to be made clearly.
1,There were few hand-made diagrams posted however I feel used of some other high-level UML diagrams and screenshots would have been better.
0,All the proposed changes look like exactly what needs to be implemented in this project.
0,I liked the overall quality of the expalnation.
0,Yes design doc cover all of the functionaliites.
0,The design docs looks complete with all of the details being covered.
1,"No diagrams or tables were provided. However, adding those pictures was a good idea."
0,They seem to have a clear idea of what they are going to do
1,The problem statement could have been elaborated a bit more. One line doesnt seem enough here.
0,Yes. They have included everything mentioned to implement
0,Good UI mockups.
0,"According to the solution suggested, team should be able to implement it."
1,"Could have added UML diagrams, LoFi sketches and flowcharts."
1,Reference section missing.
1,"They used UI mockups to explain their implementation. Though, some UML diagrams like USE case would be preferred over this."
1,"They have explained their implementation through UI mockups. Well, they are not quite understandable, but for the first submission this could work."
0,"Well, the proposed solution looks satisfactory."
0,"Yes, I think the design included all functionality."
1,"Well, all the important points have been mentioned, like problem statement, test plan, etc. Though, the test plan must include how the proposed solution is going to be achieved which they have not mentioned."
0,No there had been no bad names or wrong conventions used even in round 1. so no change there. The team has made few modifications to beautify the code by using ternary conditions which did make the code elegant. No new comments added.
1,"The code is structured well and is straightforward to follow. Test blocks are succinct and contain one assertion per block.
The project has been greatly improved since the 1st round.
Naming and indentation issues have been fixed. Furthermore, significant work has been done for the code to be consistent with Code Climate.
One suggestion would be to elaborate on the #score method. Decomposition could be used to extract the common set up into a separate before(:each) block and test expectations using multiple 'it' statements as opposed to having everything asserted in one 'it' block."
0,It explains in an overall sense what the issue is and how its going to be solved.
0,Yes all the requirements are stated and an implementation plan is given.
1,The planned design looks complicated as there is a lot of data and variable transfer between classes. This could have been simplified a bit.
1,The UI mockups uploaded are very unclear as they are just pictures of hand drawn designs. This too could have worked had the diagrams and the text inside them been clear. I can understand the flow however the components are tough to decipher.
1,The author has mentioned which files have to be changed but no mention has been made of how they are going to be changed. Could have expanded a bit more on that aspect
0,Really like the graph you guys  drawing.
0,Completed both the project purpose and design.
1,"As mentioned previously, the UI mockups are decent but don't necessarily convey the overall design concept to those not familiar with the expertiza system."
0,Explanations are easy to follow.
0,The document addresses everything mentioned in the problem statement.
1,All good components of a design document are present. It would be nice to have the UI mockups without handwriting that may make it hard to read.
1,Would be good to include  high level overview of changes made in the files.
0,It incorporates most of the functionality.
0,"Design document looks complete with problem statement, files that needs to be modified, a Lo-Fi diagram to indicate the flow."
0,they have added notes explaining the mockup diagrams
0,new design approach is pretty straight forward.
0,yes it does
1,"It is well written document , at this point most of the teams will be getting ready on approaching the problem , so team is yet to fillout implementation plan, remaining parts are well written."
1,UML diagram is missing. Though the modified UI is explained.
1,"Some aspects of the designs are not clearly mentioned:
eg: After the author adds new questions for the second review, how will the instructor validate if the right questions that satisfy the requirements of the project are being asked."
0,Explained the objectives very well. Also the criteria for completion are also explained.
0,They are trying to leverage the existing screen and adding additonal fucntionality- thus it wouldn't impact the existing code
0,changes along with the screen mockup  are provided
0,Clear understanding of what needs to be done
1,No uml diagrams present - can create a simple use case diagram to indicate the flow of the solution
0,They give the graph of the UI design which is good and explicit.
0,The design doc is well designed and complete.
1,"Though the UI mockup explains the functionalities, it could have been more legible."
0,"They authors have used visual aids to their benefit. Even though they could have added a flow diagram, the wire frames and other screenshots they have used serve the purpose and add to the clarity of the explanation."
0,UI enhancements are provided here.
0,"Good that you have used screenshots to explain the approach.
Include Use case and activity/flow diagrams also."
1,UML diagrams not present but rest of the document seems feasible
1,There are mock-ups for the final result of the team's changes. However I would like some UML like diagram or some flowchart explaning how a user gets to a particular point. I don't know if it's me or maybe my lack of familiarity with the Bacui interface but I found the navigation part a bit difficult to follow.
0,There were ample of visual aids to explain and walk through the proposed solution. I liked it.
0,"The whole document is easy to understand and well-written.
Suggestion: It would be better to include what tools and technologies would be used in the project."
0,"They show their design page as their visual aids, and their are helpful for readers to understand what their designs look like."
0,They have added a screenshot for each of the problem they plan to tackle.
0,There are adequate screenshots to show the required functionalities and how they would look after implementation though there aren't any UML diagrams to explain the use cases
1,"Here the team has only included screenshot relating to how the UI of the system should look like which gives a idea of its appearance , However , They haven't given any UML diagrams to represent the flow of their work for example a flow chart relating to how their functionalities would co-ordinate."
1,"The team has added the  mock up screens which helps to understand the proposed look and feel of the project implementation. However, there are no UML diagrams or design diagrams added for the project, due to which its difficult to understand their approach on fixing the issue."
1,"This is one area where the authors could have improved. Even though there is a good amount of textual description and images, the authors could have added a snapshot of the code changes that they wanted to propose. This would make it clear as to the exact changes that you propose and further help answer this question."
0,No potential smells or problems found.
1,"Code level implementation details are not provided.
But, the approach looks clean."
1,"detailed design is missing, the document covers only the screen shots and high level overview of what needs to be done"
0,I don't see any trace of smells or redundancy in the proposed solution.
0,The design changes as described seem sound.
0,The design appear to be good. Specific gems are also mentioned eg: paginate that would divide the document into discrete pages.
1,I think their designs look complicated and there might be existing gems that can be simplified.
0,"Design is good, there might be some changes when they start implementing it but its a good starting point."
0,"The code design appears to be sound. The UI implementation as shown on the screenshot looks intuitive. However, the final implementation is necessary to say definitively that the code is not smelly"
0,"As the project is more of adding features to the user interface of the website , the design plan is covering all the necessary steps that needs to be implemented"
0,The design seems to be precise. The description of the changes are provided in detail. Team has clearly mentioned about the approach that they will use. Enough efforts have been taken by the team to convey what is to be done and how the team will do it.
0,The authors have done a pretty good job with explaining the proposed design. They have used wire frames to show us exactly where the changes are to be made. Adding a flow chart would make things much clearer.
0,"Detailed implementation plan provided, including which files they expect to change and what the output should look like"
0,"Yes very well done in explanation of changes and what needs to be done.
Screen shots are helpful. good work"
0,They have explained adequately
1,The explanations seem to be okay. Couldn't fully understand what they meant by 'use proper polymorphism to handle ...' in the problem statement part 2(b)i.
0,The overall quality of explanations is very detailed and good. I might even take few ideas from here to improve my own design doc.
0,The suggested changes seem to be appropriate. Explanation was also easy to follow.
0,"The authors have given adequate explanation in terms of the following what is existing currently, what needs to be changed. The have also explained with a diagram the exact place where they would be adding elements to the UI. Also the files required to be changed are also mentioned."
0,Their explanation is adequate and easy to understand.
0,Looks like the team spent some time looking at the code and coming up with the solution. Good Job
0,The changes that the author has proposed is quite inclined with the task that are expected to be completed. the author explains the the changes properly by mentioning the files that needs to updated along with the screenshots of the flow.
0,The team has proposed reasonable changes to address the problem statement in detail. The explanation justifies every change they have suggested.
0,"Yes, the authors have a great job of including all the needed functionality."
0,"Yes, it covers everything."
0,"Yes, functionalities mentioned are covered in the doc"
0,It seems that the design incorporates all of the necessary functionality. It also mentions details of how the team is going to implement said functionality.
0,Yes the design doc covers all of the required functionalities.
0,Yes the design seems to incorporate all the functionalities required.
0,Yes. It incorporates all the functionality required by this project.
0,"Yes, most of the functionality are included. Besides, they also got detailed explanations."
0,All the requirements have been covered
0,The document outlines all the required functionalities along with the design and implementation plan stated
0,All the functionality has been covered in the wiki. Issues are described in detail and files to be modified are also mentioned.
0,"Yes the design include all the required functionalities as their design plan. the problem statement specifies 3 task one is related to the admin panel , and two are related to the instructor panel . in their plan they have specified their approach and which all files need modification"
0,The suggested fix would address all the functionalities which is required to be implemented for the problem statement.
0,The design incorporates all the functionalities that needs to be implemented. No suggestions are required.
0,"Brilliantly written code document consisting of background, problem statement and the implementation plan."
1,"The problem statement and implementation approaches are very clearly explained with screenshots. 
Missing items:
Test plan
UML diagrams"
1,"Good work but I find following missing for completeness,
a. table of content
b. current design and proposed changes 
c. integration of new features in design 
d. use case diagrams 
e test plan"
0,They showed all the details which were asked for
0,The design doc looks complete with all of the necessary details being covered.
1,The document seems to be complete except the test plan. It would be better to include a test plan in the document.
1,The background and the implementation plan is provided with detail. The files to be modified for each objective of the project is also stated. Testing plan is not stated.
1,"First of all, the doc is  not a wiki page, which does not meet the requirement"
0,The design document is well done with proper visual aids and explains the problem being tackled and the proposed solution very well.
1,"The design document has the required design and implementation plan. However, it isn't uploaded as a Wiki but as a PDF. This can be inconvenient for grading and is also a lot harder to modify for the team."
1,"The document is simple to read and has the details mentioned for the the project purpose , the design of their implementation but they haven't included the test plan"
1,"The team has well documented the problem statement and the details of the fix which is required. However, they have not included any design plan or test plan which could address the approach they have planned."
1,"Design document explains the entire project flow very well. The whole implementation plan is very well written which clearly explains how the team is planing to work on project. The idea of including screenshots which explains how the functionality will look like once all the implementation is done is what I liked the most.
Suggestion: Team should include test plan in the doc.The purpose of project should be explained more clearly. Overall, nice work!"
0,uml diagram is clear!
1,"Unfortunately no visual aids are provided in the design. I would suggest providing the simplified UML diagram that does not necessarily capture all of the classes that interact with the ones that will be modified by the team, but the ones that the team finds will be most relevant to the reader."
1,It would be better to incorporate some visual aids in the design doc.
1,The authors have not included any visual aid in this document. The wiki page of their previous project documentation has a flow chart that has the code flow that shows how the control flows from higher level interface- the specifications in the WebIDL to lower level physical renderer through the intermediate implementation of OffScreenCanvas on Rust and DOM.
1,"There are no visual aids on that page, but there are some on the previous page. Some more would definitely be welcome, and should be placed on the final project wiki page."
1,The did not use any of visual aids.
1,Try to include use case diagram to indicate your flow and a class diagram of how you'll be implementing the solution.
0,There are no visual aids of any kind
1,Some more visual aids would better help the reviewers understand how the Offscreen canvas context would be different to the existing environment.
1,"No visual aids are present. Though the team have explained their work pretty well, the team should think about adding a few diagrams to better help in the understanding of the project."
0,the author did not add methods to wrong class.
1,"The document should expand on the design and make specific assertions about how the changes will be propagated. So far the idea behind the design is to utilize an existing code of HTMLCanvasContextRendering2D adding new functionality like blob API on top of that. One suggestion would be to elaborate on that and discuss how the new functionality will be merged with existing code, what patterns might be used to increase the efficacy and simplicity of the system."
1,"The functionalities that the authors plan to add seem logical as they plan to implement OffScreenCanvas as an efficient alternative to HTMLCanvas but with all the functionalities included.
 The authors have not discussed about the implementation of the proposed design yet, which I am expecting them to do in the next review.
The response time is expected to decrease with the incorporation of OffScreenCanvas because the rendering of the images in the canvas is done independently using web workers"
0,"As stated on previous comment, the design needs more explanation."
1,"Their design is pretty well, but some part of that are not very detailed."
1,"The new design seems to violate the DRY principle. Copying an entire class and then editing it will likely cause problems as you will be using code you did not write and so will not understand as well as your own code. This is probably still a better design decision than writing the offscreen canvas from scratch, however, since it will take less time. Could you use delegation or extension to DRY out the implementation?"
0,"Yes, the designs appears to be good to me."
0,nearly perfect
1,"The relevant parts in the design doc include the listing of files that will be modified, description of OffscreenCanvasContextRendering2D and apis that need to be implemented for this class.
As stated, the team is planning to use the implementation of HTMLCanvasContextRendering2D. I would suggest to elaborate on how OffscreenCanvasContextRendering2D differs from HTMLCanvasContextRendering2D and provide a better feeling for the reader of how significant those differences are."
0,The explanation is nicely written.
1,The authors have proposed changes in the OffscreenCanvasContextRendering2D.webidl by implementing it similar to HTMLCanvasContextRendering2D ; implement blob API and support webgl contexts as in WebGLRenderingContext. The explanations are quite convincing though a little more detail(including background specifications) would have made the documentation more cogent.
1,The design plan portion feels a bit lacking. I found myself wanting more detail about how and what they were going to copy between each implementation and the next. What's going to be filtered out? What's going to be added? I have no clue...
1,"You can mention that what are you going to do, inorder to acheive your goal. Like it is mentioned that ""As a part of the third project, we’ve already done with the implementation of OffscreenCanvas interface"" So how are you going to achieve the next implementation?"
1,I don't know much about the topic and so it can be hard for me to judge but I would have liked a couple more pictures or other aids to understanding
1,"The document needs more details on the implementation of the OffscreenCanvasContextRendering2D, the support for WebGL contexts, and the Blob API. Also, what is a DOM and a Blob? Those terms should be defined in the design document in case any readers are unfamiliar with them."
0,The team have given a proper explanation of how the things will be implemented by specifying the files that needs to be modified. The team have written it in a good manner which is easy to understand.
1,"The design document covers a high level view of the required functionality. The concepts and motivations behind OffScreenCanvasContext2D are extensively discussed. Moreover, the document provides the files that are going to be changed by the team.
The main problem of this design is that there is no detailed explanation or examples of what the final expectations are. I would suggest giving more specific examples of how the proposed API should work and what may be the main challenges of the implementation."
0,The design incorporated all of the functionality required.
0,"From my previous review of this project, there have been few additions to the set of functionalities implemented. For the 3rd project (OSS) the team had worked on OffscreenCanvas.rs (interacts with javascript) and OffscreenCanvasContextRendering2D.rs (works on OffScreenCanvas) which are implementations of OffscreenCanvas.webidl and  OffscreenCanvasContextRendering2D.webidl  (Web IDL files) respectively. In this project, the team has proposed to implement OffscreenCanvas analogous to HTMLCanvasContextRendering2D, by reusing some code from the latter and add additional functionalities. They finally propose to implement blob API, to test the contents on the canvas and also support webgl contexts as used in WebGLRenderingContext."
0,"The document does say what they're going to do, and that fits fully with the project description."
0,Most of them are included.
0,The design document addresses all the functionalities and even the implementation details in the specification.
0,looks good
0,very robust! nearly cover every thing.
1,"The document covers a number of important topics including the description of Servo, apis and concepts that are going to be used by the team in this project, problem statement, project build and proposed design.
However, the testing plan is not discussed. While the instances of testing is certainly mentioned in the document, e.g. ""specific functionalities could be tested by writing a custom html file and then running it the similar way."" and ""Finally, we’ll test our code by enabling the blob API."" the authors do not provide an extensive discussion of specifically what functionality is going to be tested.
I would suggest reducing the overall size of the initial sections which provide an overview of Servo project, Off Screen Canvas, Web workers and Web IDL. They introduce more verbosity to the document than necessary. Two or three descriptive sentences could be used instead. The reader could refer to a more detailed information through references.
Furthermore, the focus of the problem statement falls on the description of the OffscreenCanvas API making it somewhat redundant. It would be better to emphasize on flashing out the goal of the project and only later provide the reference to the technical details if necessary. Another suggestion would be for the team to identify and elaborate on the 'changes' that are going to be merged in servo."
0,I can see 28 commits with a good distribution over the time span.
0,The first commit for the project was made only 4 days before the deadline. since then the team kept continuously pushing their changes.
1,It would be better if testing plan is included.
0,"No, the initial commits were made the Thursday before the 1st submission was do.
It is great to see additional commits since the 1st submission!"
1,The documentation states the purpose of the project as implementing OffScreenCanvas API for the Servo browser engine under the Problem Statement. It also includes the proposed design that specifies the flow of the project and the files that are interlinked. The testing plan has not been included in the current version of documentation. I expect that the team is working on it and will include it for the 2nd round after they start the implementation.
0,There were changes pushed to the branch throughout the project period.
0,I have seen they keep updating the github
1,no test cases found in the test folder
1,Only scaffold generated tests for models and controllers.
1,"Controllers have a few test cases, models have none.
Some of the suggested test cases could be as follows-:
company_test.rb -> company should not be deleted if not owner of company (realtor should only be able to delete company if he created it)"
1,"No test plan, but the project purpose and design are decently well explored (especially if you look at the link to the first project page). I'd recommend pulling forward the diagrams and explanation to save your readers the effort of looking in another place."
1,"While there are some tests for controllers, they were only the auto-created tests by Rails. There were test files for the models, but not test cases present."
0,I think they have done a great job on this doc. It complete and detailed.
0,The problem statement and what needs to be done correctly explained.
1,"Your background and detail of description is excellent. However without a strong background in the topic I could not figure out what a DOM was. 
I don't see anything about a test plan but other wise the detail was good."
1,"The design document describes the project's purpose and scope very well as well as the high-level design, but the details are lacking and the test plan section is missing."
1,The team have done a good job explaining their problem statement and implementation. But the documentation does not include the testing plan. The team should write about the tests they plan to implement.
1,I do not see the link in the readme file for the deployment in the cloud
1,The link to the deployed application was not posted and README file does not have the required information such as admin login details or how to access various features in the application.
1,Please provide the link to the deployed website.
1,"If it is deployed, it is not made known."
1,"Unfortunately the app has not been deployed on a cloud platform and neither is there any description in the readme file. I suggest to use heroku as your deployment platform. You may want to look into this video here = https://www.youtube.com/watch?v=5kVtmnZNC8w&feature=youtu.be
 
Also if you deploy in heroku, it does not support sqlite or mysql in production. Hence you will need to migrate your DB to postgres. Check out this link for help = https://devcenter.heroku.com/articles/sqlite3"
1,The website is not up yet. I looked through the code. Looks like there are still some functionalities not implemented.
1,"I was not provided a link, so I cannot see if the UI is intuitive."
0,It is done well and I can say it is a indeed a good ruby and rails coding practice
0,The code written was clear and I believe that it follows good Ruby and Rails coding practices to a certain extent.
0,Yes. Timely commits with comments.
1,"The code follows on the lines of good ruby on rails practices. However, I can see no migrations in the db folder. The readme file contains sql statements for table completion which look to be correct."
0,The code seems to be following the examples in cookbook app.
1,"While the application has a similar layout as a typical Rails application, I noticed there were no migrations in the DB. Also, the README was not formatted very well and didn't tell me much about how to install the project locally."
0,"Though there were several build fails during the first round which seem to have been triggered on bundle exec, the final build passes in Travis CI"
0,Ignoring this question since it is an OSS project.
0,build is passing on Travis CI. there are no pending conflicts
1,"Most of the tests passed. However, a small fraction of the tests have failed and the code needs to be modified to incorporate these changes"
1,"The build seems to have passed, but there are not many test cases listed to check the same.
There is more scope of test cases in the same."
1,"The code build passes the travis CI test and it has not  conflicts with the base branch. However, the team should resolve warnings."
0,"I think that it is a neatly written code and once the integration issues have been resolved, it should be ready to be deployed on th production server. 
The code being readable, can be easily picked up by the future team."
0,"I think this code is ready to go, because it is better organized and structured than it used to be."
0,Changes are working perfectly.
0,I strongly believe that this code is ready for production server
1,"The code is written in a modular way but there are some errors as shown by the CI. If these are fixed, it can be merged with the main project"
0,"The writeup was elaborate, and fully elucidated the test added and the removed methods and SQL lines and their scope."
0,The write-up is to the point and explains their approach neatly. The team has made efforts to update the write-up with the provided suggestions and it has improved the write-up.
1,The writeup is good overall. But it would have been better if more code snippets were added along with explanation of why certain methods are obsolete.
1,"The writeup leaves me unable to really determine what was done to the point where I can examine the work in their application for correctness, especially since, as a refactor, the behavior should not have changed from the base expertiza application."
0,"overall it is well written, they can add reference section where they can put the link to the project etc."
1,"The writeup is clear and has illustrations to explain the flow. However, none of the code is added to the documentation. The project also only defines the test added but could add more details about the increase in coverage"
1,"I found the write up to be same.
There is more scope to improve it with more explanation and test cases, specially the links to the refactored codes could be added for the other teams to know."
0,The team has explained the issue and the solution they chose with enough   details to understand to way of implementation.
0,The system operation works as intended from the link provided.
0,"Yes, this is a refactoring project and the UI works as it is supposed to, after their code changes. All the functionalities seem to be intact. Good job there!"
0,The system operation works as intended.
1,I can't really tell how to navigate to this portion of the project in the application. The writeup is not descriptive enough for me to know where to go to test it.
0,"Yes, refactoring did not impact on the existing operation at all."
1,"I feel that the project could cover more test cases which would have explained the functionality better.
The sql that has been mentioned, could have no results as well, so covering negative results would have been better."
0,Yes the code addresses all issues.
0,"Team added several test cases, and the coverage was seen to increase"
0,"The team had added a test case in the last round, which I think was sufficient to test basic functionality. 
There have been no additions to test cases in the second round."
0,"The test coverage seems to have increased slightly. Since this is a refactoring project, I wouldn't expect testing to be the focus, so that's pretty good even though the added test case most likely doesn't cover all the work done here."
1,test cases were not part of the requirement doc. Test plan added in the wiki. Could have added more negative test cases.
0,"This project is refactoring and there were not much of functionality changes, I see that teams have changed the existing tests make sure there is no coverage miss"
0,"Yes, the coverage has increased and has almost reached to 50%."
1,The team has added tests and the coverage improved by a small percentage. More tests can be added to further improve coverage
1,"The team could have added more test cases as they have mentioned about refactoring the code.
The refactored code and the screenshots of the test cases would have been better to display in the wiki for future students."
0,Yes the team has added test cases.
0,"I couldn't any new  commits in the second submission, though the functionality seemed to be fulfilled in the first round itself."
0,"No new commits have been made since the last round. However, there is nothing significant as just codeclimate fixes are remaining."
0,A small amount of new code was committed in the second round.
0,"No Commit,"
0,the last commit I see is from Oct 31st.I'm assuming they did not have to change much in the 2nd round
0,No commits were done in 2nd round.
0,All the commits were completed by Oct 31
0,No new commits have been made in round 2.
0,"Code was well written, DRY, and intuitively done. Easy to follow the functionality implemented."
1,The code is nicely written overall. It follows Ruby guidelines and DRY principle. It would be better if more comments are written.
0,No Changes in the code from the last time. Code is written properly.
0,"there was no complicated functions , code strictly followed DRY principle"
0,The code follows DRY principles
1,"The code is more about refactoring which is mentioned in the wiki, but I do not see any of the code in which changes are made. Could have mentioned them in the wiki for better clarity."
0,I could see a clear description of the changes and good naming conventions
0,They explained how they used Strategy Pattern and why they used it. Loved the walkthrough!
0,The authors clearly explain how they refactored the code.
1,It would be good if the functionality of the obsolete methods(that were removed during the refactoring) is mentioned; and also explain why they were obsolete.
1,Yes very well written. I would have given full marks if you would have added code snippet and screenshot of the before and after feature. Visually it would have been great to understand the changes quickly.
0,clearly explained about the implementation and usage of the strategy pattern
0,"Yes, explains well."
0,"Yes, it does explain the previous functionality and their changes will take affect.
The explanation is done with diagram as well as the query."
1,"The team has done great job by describing the approach and explaining same in detail by adding a pictorial representation of the pattern used. However, it would be more helpful if the team could add details about the names of the classes and the exact code changes done in the wiki page. As it would help anyone in future to understand what are the exact changes implemented.
In this way the comparing code with the original code in github can be avoided."
1,just one scenario has been tested and couldn't see any further test plan documented.
1,"Since the project involved deletion of obsolete methods and SQL, it would be good to explicitly state in the test plan if there were any tests previously that used these methods/SQL. Also, if they are present they need to be modified."
1,Edge cases missing from the test case. Write more test cases with invalid input types. Example - give a string to an int type and raise an error accordingly.
1,Just contains the test name and file name. Doesn't show how the test was done and the output obtained.
1,"The test is added under the Test Added section and is well explained under the tabular form.
Could have produced a screenshot of the test, if it was a possibility to generate.
This helps the future teams to know what kind of test result to expect."
1,The team has not included the test plan to explain the end user about the steps for testing the functionality.
0,Yes the write up is concise
0,Very well written. The purpose was clear!
0,The report is detailed enough to explain the approach taken to refactor the code.
0,The writeup gives us enough clarity to understand what the project is about.
0,writeup is clear and easy to understand . it covers all the work
1,Doesn't contain the snapshots of the code that was changed.
1,"Yes, the wiki does explain the functionalities well.
Could have been better to have more attributes in the subclasses in the diagram.
This could help the user know about the details of the strategy pattern used."
0,The write up addresses the problem statement and explains about the background of the functionality.
0,Most of the edge cases cover
1,"No link to the application or a screencast of manual testing.
 
Suggestion:
You can try to add screenshots of the testing performed and attach it to the writeup"
1,No link provided of the deployed application or screencast video where I can see the changes done.
1,"The features do work as per the mentioned functionalities.
There are some suggestions mentioned and would be good to include test cases for the same in future."
0,The features are working as per intended plan of work.
0,"Code is concise as mentioned 
Methods are extracted into separate methods
Comments are sufficient I could understand it
The code is as per Ruby guide
Most of them are DRY code"
1,the code is well written but few more comments before every function could have made it easier to understand the code.
1,"Really nice-code with implementation of strategy pattern. Code follows DRY principle
However, render_report method is long."
0,The code follows DRY principle. None of the methods needs to be broken down into separate components.
1,review_response_map - can be modularize. Extract the various finction and write new methods for each.
0,refactoring is done really well. there were no violation of DRY principle
0,The code follows Ruby Style Guide.
0,The code is more about the changes in the database and it does follow the standards.
0,Code adheres to the Ruby coding standard. The team has also implemented strategy design pattern.
1,"Almost all variable and method names are well-defined.
Suggestion:
Try to refactor method 'render_report' in module ReportFormatterHelper by using hash instead of really long case when statements."
0,The variable/method names and class names are intuitive and follow Ruby standards.
0,Variable and method names seems to be appropriate.
1,"The query is well mentioned but I would suggest the sql be mentioned in the below manner for code clarity.
Select ...
From table name
where condition;"
1,They discussed just 1 test case and did implement it. Some more corner cases can be thought of.
1,"Test case has been added, however no way to test it."
0,All the cases discussed in Test Plan have been converted into automated tests.
0,"this is refractoring project , doesn't involve new test cases ."
1,No automated tests.
1,"The test is explained with the file used in the tabular form.
It would have been good to attach a screenshot of the test if possible."
1,The team has added test case for just one scenario. There is no test plan. It is advisable to add more test cases for all the methods in the sub classes to check if the existing functionality is not breaking.
0,Very good. I go by what I said in the first review. It is very legible and I could understand what the project does and how the project does what it does.
0,The team has added new testcases in the new submission. The code coverage has also increased. Good work with the testcases.
0,The team has added test cases and increased the test coverage.
0,"No new test cases are written.
From the previous review, The authors have converted all the cases discussed in Test Plan into automated tests.
Overall coverage increased (+6.3%) to 43.07%"
0,Coverage increased by a good margin
1,the team has included the test plan design in the documentation. The manual and automated test scenarios are currently missing from the document.
1,No test plans
1,Not available.
1,The doc is very well outlined but the team must have invested some amount in test cases. It would be really helpful to see how the new controller be tested and how the chosen pattern is able to help in the desired functionality.
1,No Test Plan is included.
1,"No, their testing, implementation and challenges section is incomplete. Even though they given minuscule hints of the solutions and how they would try to check if at all. No sure way of testing it is given at all."
1,"No, it does not since the approach is to have a new model with delegation I strongly recommend team to add test cases that ensure systems functionalities are working as it is"
1,No test plan is included.
1,No test plan is present still.
1,"Sadly, the author has still not made any test plans for the project. The writeup has indeed improvised on the UML part from the previous submission, but the testing and implementation part of the writeup is still missing."
1,The section is included by the content is empty. Simply listing steps in how you plan to test for correctness of your model additional would work here.
1,the team has included the diagrams related to current system analysis and the workflow.  A workflow explains the current design and its similarity with the existing flow used for topics biding. The team could have included some UI mock ups as well to show the views for better understanding.
0,Add screenshots. UML diagrams are very helpful when viewers walk through the design.
0,Most of the edge cases are identified
1,The visuals are very helpful. More clear view of how delegation pattern is being used would have been appreciable.
0,The team has added enough diagrams to explain their design
0,"great visualization on existing expertiza system, I would love to see how the system is going to change after your implementation"
1,"The visualizations help a bit alongside the descriptions, but aren't really useful for conveying information."
1,"The UML diagrams are supposedly the best part of the writeup. Gives a very lucid and engaging representation of the underlying architecture if the system. Also, clearly depicts the understanding of the problem by the team."
1,Visualizations are great for helping to clarify system analysis and relations in this portion of the image. More images on the design and implementation would also be a great addition for further understanding.
0,the design appears to be simple and is derived from the existing modules /designs. The workflow is easy to understand.
1,Some of the diagrams are quite complex to understand.
1,"Yes, the design is simplified and also there is room for some thought that is explicitly stated such as --- not really following the DRY principle and the team is willing to work towards it which is really good."
0,The team has taken enough efforts to make it as simple as possible to explain the design
1,"In general, the problem seems to be easy. but design states that  it involves whole new MVC setup which could translate to difficult implementation"
1,"The design isn't great (as mentioned in the documentation) due to code duplication, but I agree that it may be the easiest way to start - hopefully a better solution can be found in the future to improve DRYness."
0,"Yes, from a perspective of an outsider, the design seems to be simple enough, easy to understand, and efficient to implement."
0,the team has analysed the existing design principles used in the project and has appropriately defined the design for the new changes which will be made. the design looks good and easy to implement. great work done !
0,The design is sound with appropriate principles and patterns.
0,It's good.
1,"No implementation plans are proposed, but the design is satisfactory for the user to understand what needs to be done."
1,I appreciate the thought of using Delegation pattern. More details on this would have been helpful. Also why was delegation pattern selected in particular?
0,The design is perfectly well depicted in the form of the diagram and they have been thorough in pointing out the application flow in the Workflow and Models section so as to elucidate the problem statement.
0,"The design is the strong point and it is easily understandable, New model table idea is good"
0,The design is well-considered and design principles are being considered when implementing the design.
1,The stated design seems to be appropriate. Following a close representation of the current project bidding structure would prove successful. It would have been beneficial to supply more details on how the design would be implemented and could help in the justification of the choices this team used.
1,"Yes, the design proposed by the author seem sound enough. However, the author has only given a high level view of the proposed design. The author should delve deeper into the concept more while describing the intended design."
0,"The team has included all the details required to implement the given requirement. The wiki has complete details related to requirements , analysis of current designs and changes required to achieve the required functionality. overall great job !"
1,Testing plan is still missing. The author has given a very high level view of the changes to be incorporated in the system. There is not much of an implementation.
1,A detailed explanation would have been better
0,The doc explains the entire project agenda very clearly.
0,The changes to be made are clearly stated and explained
0,"Yes, they have been thorough in their approach and this has been a project implemented to perfection. They have given proper UML diagrams and then showcased in the ""New Model"", ""New Controller"" and ""New Views"" section."
0,the document is clear. and they added changes that have been pointed out in the previous review ..good job team!
1,There are a moderate amount of spelling and grammatical errors.
0,"The changes are mentioned, but not in a concise section, which I suggest would make the documentation easier to read."
1,"The authors have provided a high level view of the changes which are suposed to be made to the system. But since the author hasn't implemented anything until now, it is tough to justify the changes proposed by the author."
1,"There is some explanation about the general idea of what needs to be added to implement the new functionality; however, there are several sections missing that give light to the details of implementation and how this is tested to ensure correctness. Adding a description of where and how this new model will be developed with the existing image would  be beneficial for a thorough understanding of the reader. This could also be achieved by rearranging the logic of the sections as sum sections elude to purpose and intent of implementation."
0,Yes. Very easy to follow just by looking once!
1,the team have explained the flow of models using data flow diagram and have explained the use case using the use case diagrams. some more designs regarding the approach of implementation can be added in the documentations such as sequence diagrams/class diagrams for new classes/modified classes.
1,"Could be better if you add the screens.
Only conventional flow of diagrams is present.
Adequate details."
0,well represented.
0,Proper visual aids and UML like diagrams are provided in the document for better understanding of the implementation
1,"There is a good amount of Diagrams technicality in terms of the section of Workflow flow  and Models and thus we can say that it does slightly help get a sense of putting things into perspective. 
1. None. Both the diagrams seem important enough for the scope of the project and in conjunction with the intended functionalities.
2. The UML diagram is in line with the conventions and follows suite.
3. The diagrams are technically sound enough to define problem scenario."
0,design doc has diagram explanation for working process
0,Excellent use of class diagrams!
1,The diagrams are good but don't necessarily help the reader understand the information - if anything I ended up understanding the writing better than the diagram.
1,"Though the author has not used UML diagram, but the author has used other forms of picrorial representation to convey what he meant to say. But, the team should definitely consider adding one or two i the future."
0,The current umls are great. Make sure to include more of these visual aids in the implementation section of your document. It will be a wonderful writeup.
0,Diagrams on peer review assignment have been included in the design by the team.
0,Not much has been talked about the methods or classes the changes will be done to. But they are clear with their job.
0,The authors are aware of the principles and are yet to figure out a way to reuse the methods to implement the functionalities. No new methods were proposed in the documentation. The idea of implementation looks fine and the new design seems seems to follow the already written code structure and design patterns. The design doesn't pose any threat to time complexity.
0,"Good application workflow and analysis.
Appears to be sound."
0,i feel new design will not add any additional overhead in response
1,"As for the designs proposed by the authors it proves to be substantial since there is a good amount of Design aspect in their doc. 
Sure, they have defined an application flow, but that is all there is to it. 
1. Nothing about adding a method to any class has been suggested. Implementation section is left blank. 
2. The design hasn't been implemented to the depth to make it a code let alone make it smelly. 
3. Nothing mentioned about the design to make it complicated and the piece of code which they would delve into to ascertain of any pre-existing gems for simplification. 
4. This too is hard to reach a conclusion on since not enough details to answer it with certainty. 
5. Yes. Absolutely, a much more thorough investigation should be carried out and relevant previous work exploration with help solve the cause."
1,"As mentioned in the document, some of the proposed changes are not DRY, which I would like to see improved if possible."
1,"As me tioned above, the design is not completed,  and gives only a high level view. So, answer to this question cannot be justified using the given writeup."
0,The design proposed by the author of reusing LotteryController just like in topic bidding seems reasonable to address the bidding implementation in peer review.
0,Amazing documentation with diagrams and proper explanation!
1,Good explanation of the proposed changes. You may want to add it in a separate heading. Overall explanation quality is adequate.
1,Lacks the solution part
0,I liked the idea of putting the important files for reference. This is extremely useful and makes it really easy to understand what is being done.
0,Explanations are given adequately.
1,"Changes are not proposed to a suitable extent as they have mostly elaborated on the problem statement. I say this because even though they have detailed diagrams and solutions in place, they have left important parts like tests and implementation empty.
It yet remains for them to implement them and explain in explicit details their action plan to arrive at the solution."
0,"team suggested that usage of decorator pattern is the key solution to the improvement, also approach on DRYness will be handled later"
0,The proposed changes look good.
0,"The explaiantions were the best part of the writeup. The author has kept in mind that the reviewer might not be familiar with the basics of expertiza, and hence gives a very lucid explaianation."
1,"Changes are not currently elaborated upon. There is a section labeled 'implementation"" that will house these details."
0,The authors has discussed the functionality implementation in detail. It justifies the approach they would be using.
0,Yes they talk about all the functionality to be implemented
1,"It does list out all the functionality, but there seem to be no solutions for them.
An insight into the solutions to be implemented would be suggested."
0,"Yes, the team seems to have incorporated all the functionality needed."
0,"Yes, they have everything that a good doc requires except the empty sections of implementation, design and testing. These in my opinion should be a part of a very important focus."
0,The design plan seems to encompass everything required by the project.
0,The team's design includes all the models required for incorporating the functionalities. The have depicted a high level design in diagram as well.
0,"The design section of the writeup gives a very high level view of the design the team has planned to implement. So, not much can be deduced until the teams drills down further regarding the same."
0,The plan is very well documented. I see a lot of brain storming happening
1,"Testing plan is missing. Overall looks good. Can add snapshots.
Lists out all the functionalities
The project is complete and sound enough in its approach and the implementations."
1,No future plan mentioned
0,Very well written doc with all the necessary details.
0,The document is well written in properly segmented sections.
1,Yes The project is complete and sound enough in its approach and the implementations and the test plan has been well devised and just shy of application.
1,design doc is complete except for implementation and testing which is not required for this review
1,There were no testcases and since they provided a screenshot of the desired work. I suppose it fulfills the requirement
1,There were no test cases in the pull request
1,No test cases explained.
1,"It seems you have all the needed sections(and then some!). You just need to rename them to project purpose, project design, and testing plan. For example, the section titled Testing should be renamed to Testing Plan."
1,"Lots of good background details is given, but the testing and implementation sections are missing."
1,"The project writeup explains very well the topics that it has covered. However, it has not covered many of the topics like implementation, and even a test plan."
1,I don't see any new tests
1,"Although not all sections of the document are complete, upon completion, these sections will be more than adequate in successfully describing the project, its design, purpose, and intent. Nice work."
1,"The wiki explains the problem statement well and proposes relevant solution . The team has done a great job on stating the design approach and has included diagrams for them. However, the team needs to add the testing plan for the project."
1,Although the write up has all the details about how the work has been done and what solutions are proposed. There are no explanation about design principles.
1,"Yes, they surely have done a good job in mentioning the errors in the 1st part and the second part. But it is unclear why the 3rd fix is a problem or how they have combatted the 3rd fix in the first place. It just seems so that a screen shot has been put into place and they displayed a No Method Error popup. They have vaguely described the handling of the same, but doubts remain in the details or the changes in the code. In fact, no code screenshots have been put up for this case."
1,There are no test plans in the documentation
1,No test plan section in writeup. It doesn't appear as though the repository updated the team_spec.rb file either.
1,"I did not see a test plan per se, but they did include examples of the scenarios there code was solving."
1,There was not an explicit test plan. Your design looks good though
1,They have not created a wiki page but uploaded a doc file which explains the work they have done adequately
0,The writeup is extremely clear. I understand each issue they address.
1,"Although their documentation shows screenshots and their app is deployed on VCL, there was no testing plan/ how to test on application.
There was no screencast too. So it poses a difficulty on how to see.
But from the screenshots on the documentation, the features seem to work good."
1,"Yes, on manual testing, it leads to realization that the code has been suitably written as required by the functionalities and also the doc they have provided is the results that I get on following the procedure. Although, I would suggest that they look more into the test case 3 because how to go about testing it hasn't been explained by them."
1,Code appears to work. Don't really know what edge cases there could be due to lack of a test plan.
1,Crashed for me once randomly. Might be not because of these changes but I am not sure
0,"1. Functions are of appropriate length and well structured with respect to the purpose in question. 
2. All code has been suitably well put into the methods with their intended function and work cutout for them. 
3. No, the comments have been well placed and self explanatory making it easy to follow. 
4. The code does follow the ruby style guidelines and is thorough in that regard. 
5. Nope, all code is consistent and to the point."
1,"There are many places where ""puts"" statements are used where a logger statement should be used. There is also a set of if/else blocks that check to see if a variable is of a certain type, which could have been abstracted with an appropriate design pattern."
1,2 failed and 1 accepted.
1,"On checking, the code, we find that, in agreement with @TravisBuddy, the code had a build error which seems to be unresolved, which is strange, and should have been looked into. Moreover, the overall coverage shows a decrease of 0.1% which should be a cause worth looking into. But one must say that the details in the code changes have been to a good extent for the majority of the part and thus worth the merit. One thing that surely catches the eye is variable naming, especially 'handle_dups' which is a strange/ amateurish way of variable nomenclature and there is reason to believe that it may result into conflict in code at some point."
1,"New method names and variables are fine, however this team did not add a lot of new classes, methods, etc."
1,The Travis CI has passed.
1,"Yeah, the build has passed the Travis CI test and there were no conflicts found on the pull request."
1,"Nope, they have errors in their build too as indicated by Travis CI and this is the error message output by it "" Hey @ppvasude,
Something went wrong with the build.
TravisCI finished with status errored, which means the build failed because of something unrelated to the tests, such as a problem with a dependency or the build process itself.""
On checking the build logs I found that they errors in Bundle Install stage itself resulting from missing gems which they haven't resolved as a part of second submission."
1,"No, this code is not ready to be deployed since it fails in basic builds and just passes 5 out of 13 test cases which calls for reasonable concerns and traceback in the motivation of the teams approach. However, it does prove to be a good starting point for a future team to pick from where these people have left off."
1,"These fixes appear to be acceptable. Code Climate could be better, and debug code could be removed, but if the changes in the document are in the source, than I have no complaints."
1,"Writeup clearly explains what their use cases are and what solution they came up with.
There is a lack of background about it, how to test it from UI, test plan, test cases, DRY principle etc.
Their write up is not on wiki, which makes it difficult to download the file every time and check it.
Although it was pointed out during the first round, the team didn't change it , or they didn't update the wiki page which they created."
1,"Their writeup is still the same doc file they had uploaded in the first submission. Now, while it was a good progress in resolving some of their errors in their first submission, clearly it is insufficient to be considered adequate for the second submission seeing as no changes have been made to it."
1,Writeup is still in the form of a word doc instead of a wiki. Test Plan and Tests are missing.
0,"The team has changed a model and a html page.
But there are no new test cases attached to the changes."
1,"No, no visible test cases have been added and I even checked the files on their git repo for the same, but just like the first submission there is no change in the status quo of the project. As a matter of fact their overall coverage seems to have been decreased just as before which is still an unresolved cause of concern."
1,Coverage decreased by .01%.
1,No new Test cases
1,No new commits after the first submission.
1,The commits were done before the first deadline but unfortunately I don't see any commits during the second round or the pull request might not have been updated.
1,"Nope, the last commit still shows from 12 days ago which is the time period even before the first submission. Overall, the branch is 3 commits ahead and 20 commits behind the Expertiza master. Even so, conclusively going by their git hub their last commit was before the first submission and hence, no commits in the second submission."
1,"The pull request was not updated. (In fact, I can't see any of the changes in the linked repo.)"
1,No New Commits
1,"The code changes are very less, so not much to say about refactoring, DRY problems etc.
The code has ""put"" statements which are also pointed out by the code climate bot.Having put conditions is not a good coding style, the authors could have considered to remove the statements.
puts ""hi, im in import"" 
puts name.to_s
The authors could have debugged to see the flow of code, or remove them before committing."
1,"Overall, the code is very well-written and follows all the best coding practices. But what I feel is a few more comments could help in improving the readability of the code. Also, there were few console debug statements which were causing the code-climate checks to fails. These could be removed or logged into Rails log."
1,"The code is written in a good manner, but as I see it from this submission no updates have been implemented. Including the absence of attaching a wiki page an unresolved error even from last time. So, its unclear to see what changes have been made from that date to this."
1,"The code segments in the report seem fine. The pull request and linked fork do not show the changes though, so I can't verify in the source code."
1,"The Debug statements have not been removed. 
Code Climate suggested Changes still are incomplete in the PR"
1,The authors have made no changes since it was last reviewed.
0,"Edge cases are covered. When a company is deleted, the realtors and houses are also deleted along with it. The Readme.md file also details how the edge cases are handled."
1,"house search not working- able to keep fields like price blank during new house creation
I was getting inquiry- invalid access on replying to an inquiry but it did save to the database.
 
high-low links in  houses table erroring for realtor
admin was able to add to interest list
admin able to reply to queries
hunter shouldn't have contact method
authentication not applied throughout the app- https://calm-forest-11598.herokuapp.com/companies/42 accessible without login"
0,"The readme document clearly mentions the edge cases when a company is deleted, what happens to the houses and realtors."
0,"When the admin tries to delete a real estate company which has some realtors and houses, all the houses and realtors are deleted as well. This is the expected functionality. Good job! All other test cases work as well. If a house hunter is deleted all of his/her inquiries are also deleted."
1,"When searching for house, type some location, hit Filter, then sort by year.
Found a URL like this: https://calm-forest-11598.herokuapp.com/house_lists/filter?Location=RDU&authenticity_token=j0TTfX%2BI50fb9dL3Jg2pDB2ZM6A8bDROES%2F%2F4vuoJ%2BzTeDQdySx6e%2FmmhXeo7ra63kMBDh8RI5jG44QON6PdfA%3D%3D&commit=Filter&id=search-form&method=get&sort=build_year_low&utf8=%E2%9C%93
Passing sensitive info like Authenticity token in URL param is dangerous. Also, is it required?
 
When viewing interested users of a particular house, what's the point of the url param 'user_id' ?
https://calm-forest-11598.herokuapp.com/interests?house_list_id=1&user_id=14
https://calm-forest-11598.herokuapp.com/interests?house_list_id=1&user_id=1000"
1,README.md file doesn't expalin anything
0,Models and controllers are well tested. All edge cases are covered and tests are comprehensive. The inquiries controller is especially well tested. All assert statements are well thought of.
0,Yes. the team has thoroughly tested.
0,Most common cases are tested in controllers. They are using fixtures for testing
0,"Yes, they used Rspect to test the code."
1,"Yes, they have tested a controller but not the model."
1,"The issues reported are fixed.
 
Admin account can be deleted from the user listing."
1,"Yes most of the required features are working fine.
Some errors are there like Admin is able to add interest to houses which is an unintended feature as admin should change role before doing that."
0,First reviews comments were fixed.
1,Most of the functionalities are implemented but I am not able to login as an admin using username password combination mentioned in readme.
0,I did not find any problems in the first phase testing. All basic functionalities work as expected. Bonus points for the UI. One of the best I have seen. The web application is intuitive and guides the user in performing any function. Great job!
1,"I was able to post house without any data filled in form. House got created successfully.
Likewise for company.
Phone number validation missing in Sign Up.
Sort by Sqft, Price and floors are failing (going to error page)
Applying price range filter and clicking once is giving expected result. Clicking on it again is resetting the filter. Could try to retain the applied filter on the html select option.
When I tried to view a non-existent house manually by changing URL (example https://calm-forest-11598.herokuapp.com/house_lists/1000), I got the default Ruby error screen (""The page you were looking for doesn't exist"").  Could do a redirect to browse page :) (https://calm-forest-11598.herokuapp.com/house_lists/)
 
Tried to update an old inquiry. got a new page that says ""Invalid Access"" as well as ""Inquiry was successfully updated""!"
1,min can still be greater than max in house filter
1,The code has been very well written and it follows all the coding practices. There could have been few more comments but other than that I don't see any other problem.
1,"Write-up includes everything the team has implemented. It clearly show the files which were involved to complete the project, background of the project and evrything. overall work done by the team is good but I feel that the test plan on the write-up page should be edited. The team should work on presenting their work to everyone in a good way."
1,"the team has made great improvement as compared to the last submission. The new code added has no bad names, long or complicated functions but there is lack of comments. the heading of the write-up pages explains what the test case is doing but there should be proper commenting done in the code too."
1,"Most are good, but the Test cases part just a combine of ""describe"" and ""it"" part of spec code. Could be replaced by a link of git."
1,"Yes good write up but would have like to see details on model. 
In test plan lines like "" two test cases for method "" are redundant. Can / should remove them"
1,"In the wiki, I really appreciated seeing the appropriate build statements next to the unit tests. It helped connect what each test was testing in my mind."
1,"No. I see there are some code was commented, which seems unnecessary, so just delete it."
0,Excellent write up. Includes all important details. It is one of the most intuitive write up so far I have reviewed.
1,"Even though there is a no test plan available in the write-up, however, a lot of tests have been added."
1,Please add the test plan to the write-up.
1,"The writup includes the work done. However, there is no explanation about why that"
1,"The write up as well done. However, the write-up is missing the test plan."
0,none of the functions/cases implemented are too long. they are short which are easy to figure out what is actually being implemented. The code is easy to understanf so there is not much need of comments but some should be added
0,"string passed in ""it"" clearly explains what the test case is going to do. as it is a unit test, there are not much variable that are named. already assignd variables are used."
1,there is no test plan.
1,Writeup is very clearly explained. Writeup clearly explains how they are doing their work but why team is following approach is not explained.
0,The writeup clearly explains what the team has implemented. It is very clear and can easily be understood. test case for each and every step is clearly explained.
0,All the test case works.
0,They did all of them.
0,"All of the codes seems ""dry"" enough, have some ""each"" statement to prevent duplicate codes."
1,"Since it is a test rb file, there are not many variable need to be named. 
The ""it "" part at line 362 in the assignment_team_spec.rb file, ""get max num"" could be better if substitute with ""get maximum value"" or something like this, max num seems little bit wired."
0,"Pretty good at this part, they list almost every testing case in the wiki, talking about what condition it is and give the code."
1,"Nope, again they did not mention a lot about how they test but what they have done ."
1,Could be better if contain with more info about the test itself instead of the rb file they tested.
0,Yes lot of new tests added and the addition of the tests has 92% code coverage. Great job
1,I would have liked to see more use of context in the tests and grouping of similar test methods in context.
1,"The submission is about adding tests to the project  and authors have done a great job of adding 92% code coverage. 
I would have liked to see more -ve test cases for example cases such as user with incorrect names. As of now the test cases only checks of the user name is present or not. How about the case where user name is such that it is not allowed. User class throws an exception or add method can. This could have been documented."
1,"The project is about adding tests to the a model. So this is okay but there is not sufficient background on the model itself. More details would be good for the uninitiated. 
Also they mention that the number of tests for the model were not sufficient. It would have been better if they would have quoted the code coverage numbers before and after."
1,"The test works well, but there is no edge case."
1,"The unit test step section is included, but there is no test plan."
1,The explanation of the why they write the test code like that could be more clear.
0,"Yes, the writeup is pretty clear."
0,Everything seems to be working fine for me
0,Nicely written code
0,seems like test cases cover the edge cases.
0,"Nicely written write-up explaining details about various issues, fixes, and tests."
1,Relationship between user and company is vague. There is a separate realtor_accounts table. So users seems to be house_hunters. And house hunter does not need to have a relationship with company.
1,They missed some relation such as house and inquires 1-n relation.
1,"Realtor- house- inquiry relationship
deleting realtors shouldn't delete houses and inquires.
Interests shouldn't have been defined on the User model.
Company has_many users-> Hunter doesn't belong to company. With such a relationship was, hunters could be associated to a company by editing request params before post request to create users."
0,"All dependencies are well modeled and designed. Every model has correctly associated relationships and validations. Your team is a pro! Realtor to house and house to company , other relationships are implemented."
0,"Yes, the team kept committing changes throughout the duration of the project."
0,"Yes, they still commited until yesterday."
0,"Yes, the team has committed code changes in round2"
0,The team committed their changes throughout the project period consistently.
0,yes they did.
0,Submitted well within deadline!
1,All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if.
0,seems alright.
0,"Yes, the code written was clean and readable"
0,"Code quality is good, linked features are working fine like the one asked in question."
1,"Project name could have been better.
Methods were kept small.
Comments were left out in some controllers/views.
If-else blocks weren't properly indented in some cases.
Hard-coded numbers were used for comparisons. A better way is to create enums representing different values(such as roles) and using those enums in code. This way, something like if role == 2 becomes if role == REALTOR and thus is more clear."
0,Good code writing.
0,Good coding practices have been followed. Methods are crisp and single responsibility paradigm has been implemented.
1,Basic tests are written. Could improve by adding specific application logic.
1,"It has not been thoroughly tested. user,house and company models don't have enough validations, like valid year, phone no should be only numbers.Creating a company while creating a user doesn't link that company to the user. it has to be done manually later"
1,"I noticed they did generate tests for some controllers, but not enough. No tests for models."
1,"Test skeleton present. However, tests can be made in depth."
0,"Yes, tests are done for many models and controllers."
0,"Yeah, they have done the project with even number of commits throughout the duration."
1,"The link provided is not working. So, no way of finding out"
0,Yes there are lot of commits over many days from multiple contributors
0,"Yes, there are many commits which added new features and fixed some bugs."
1,"Application is deployed on Heroku, but the user interface does not compliant with the requirement(your home page contains house information and search function before user signing in). Also it is not described in the README file."
0,The UI is good and intuitive. Good use of colors and html features.
1,Readme needs to be updated. UI looks good but UX can be worked upon.
0,"Yes the UI is good and easy for navigation, usage."
1,UI is fine but cannot access readme file
0,Have used DRY principles. Follows good coding practices.
1,"house_hunter_accounts_controller.rb line 28: meaningless line break.
house_list_controller.rb line 8,98: meaningless line break.
realtor_accounts_controller.rb line 28: meaningless line break.
session_controller.rb line 6,19,20: Wrong indentations, line 9: No parentheses.
user_controller.rb line 13:meaningless line break, line 52: No parentheses."
1,Comments and indentation at a couple of places can be update.
0,The code follows common ruby rails guidelines
0,"The build has passed and the changes are also well explained in the wiki.
As expected, the screenshots of the test cases are also displayed."
1,"The code changes are accepted but build does not pass travis CI.
The problem statement is simple and team has implemented a clean solution for the same."
1,"Within the travis builds, the test folders of helpers, models and features are passing. The test folder for the controller seems to be failing for some reason."
1,"I am honestly unsure how to rate this. Earlier the build was passing. Now Travis CI cumulatively says the build failed, but when you look at the build history, Job#6150.3 failed, but Job#6150.4 passed."
1,Build is failing probably because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
0,"Well the build technically failed, but seeing as how that's practically impossible for this project, I'll give it a pass."
0,The build request passed.
1,"There has been test failures, but not related to the project"
0,I believe the code is the best that it can ever be and should be merged with the expertiza.
1,"No. This is not standards to add colors in the respective element. It becomes very hard to maintain or modify such changes in future. It would be better to move the style to a scss file and use a class-UI to make this change, which is clean and DRY"
0,"Since, there are UI changes, they seem pretty improved"
1,Build needs to be fixed. Then its ready for production.
1,"Although as per the scope of the project, the team did extremely well. All implementations as written in the project description were completed.
However I feel that this project in general has more scope. Say introducing email notifications to the students when a review is due.
As far as the work of the team is concerned, they completed everything that was asked of them."
0,I have no concerns regarding merging this into production.
1,"The code looks to be ready to be deployed on production, but would appreciate to have a few more tests run prior to it."
0,"Yes . Code seems ready to deploy.
Also the approach taken is simple and very much acceptable."
0,Yes. The changes made are very basic and should not affect the functionality of the application in any away apart from the cosmetic changes made during the project.
0,"No significant change from last round. But the writeup was good. Elaborative with screenshot of code and UI. It clearly mentioned the need for the change. But no approach mention but to be fair, the scope of the project doesnt call for it"
1,"Again, the problem persists of containment of sentence."
0,Writeup is good. Explains everything they have done and how they have implemented.
1,"These are my views on their writeup:
1.  Certain sections are too bold. I find that to be distracting. 
2.  I like the way that they highlighted the lines of code that they have edited/modified. It made it easier to understand their work.
3. It was also good that they included references section at the end. It was something that I haven't seen in the other projects I have reviewed so far."
0,The writing is good and completely covers the scope of the project.
1,"The write up was well explained.
Test cases were with images of test cases in the UI.
The code could have a github screenshot or the link to the changed file for more clarity."
0,Write up is written a neat and understandable with system screenshots and steps to test system manually.
0,"The writeup is extremely well written. In the earlier round, I gave the team a suggestion to add the steps needed to check out their changes. They have added this part into the wiki now.
Thank you and well done :)"
1,"The write up is short and to the point, it could have been formatted and arranged in a better way."
0,Yes the color change is as per project. No new tests or re-factoring done as part of the project
1,I can't say about this since I tried to login with the credentials mentioned in their wiki(student5408/password) and I couldn't. However looking at their screenshots it seems that the UI looks good to go.
1,"The added features work as expected, though the login info on the write-up didn't work for me."
0,"Yes, as per the scope of the project, all works beautifully well.
Great job team."
0,"With the link provided, operation from UI are working as expected.
No refactoring is required for the code change made."
1,"Yes, the changes work as expected in the UI.
The test cases cover most of the scenarios.
Would have been good if there was some scope for negative test cases that could be explained."
0,The color scheme added during this project is working when tested through the UI.
1,"No build did not pass.
1/3 checks very successful. It is fixable and the issues are trivial."
1,The build in Travis CI failed. 3 out of the 4 build jobs had passed. The build job failed in the features folder. The branch did not have any conflicts with the main branch
1,"There are build failures mentioned but I don't think the errors are due to this team's code, hence, giving them the benefit of doubt."
0,"Looks fine.
My biggest concern however is, which student's view opens here? 
Add the feature of impersonation to this, and we get two identical views of student_task/list page: one with this particular feature, and the other, with impersonation feature. What is the difference between these views"
0,"yes, the code is ready to be deployed onto the server. this is a good starting place for future team to pick up."
1,The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand. Also the screenshots could be a little better.
1,The write-up was nicely written in the first round itself. It gives a clear idea of the project.
0,The write-up clearly mentions how to check/test the work done by the team. it includes almost everything the team has changed during their project.  It clearly mentions the filenames where the changes have been made. All the references are also included in the write-up
0,Everything works as expected except for the case mentioned above.
0,The Ui and system operations works well as intended. They newly added features works perfectly as they are supposed to do.
0,This feature doesn't say the view is of which student. Looking at student_task/list page is confusing since I don't know who am I (which student).
0,"yes, the team had added 2 test cases and the coverage increase is there as well. Newly added tests are enough to cover the range of project."
0,"There were only 2 commits made during the second round. However, the team had mostly implemented most of the functionality during the first round, maybe due to which there are less commits in the second round"
0,A few bug fixes were made after the first round of submissions
0,The code was well-written in the first round itself and followed good coding standards.
0,The code is concise and easy to understand. The team has provided comments to explain the logic of the new function created which really helps.
0,"Code is short, variables and functions are well-named."
0,"the code is very well written. there are no bad names, long functions or any lack of comments. The code written by the team is self-explanatory."
1,The writeup clearly explains the implementation details and why those changes were made. It is nicely articulated and leaves no ambiguity.
0,"Yes, the team has clearly explained, the code which is written to avoid the confusion due to the presence of two ""Assignment "" tabs in the Instructor view. Appropriate comments are provided to understand the logic behind the methods."
0,"Yes, explains correctly."
0,Explained well.
0,Write up is explained in detail.
0,The team did a great work in creating automated scripts for the cases related to the scenario. The scripts are also included in the automated test plan.
0,The test plan looks complete.
1,"Yes, the team has considered the two important and required test cases- 1) To check whether ""Assignments"" is not present in the Instructor view, and check the presence of ""Open Student View"" button in the flyout menu. Here, the team has also checked the precondition whether the user is viewing the correct page (tree_display/list) which is meant for the Instructor. 
2) To check the presence of ""Close Student View"" button for the instructor to return back to the default view and have the ""Assignment""  tab for students. 
Suggestion: The team could add a line to check whether the system returns back to the instructor page after clicking the ""Close Student View"" button. maybe include : ""expect(page).to have_current_path('/tree_display/list')"" ."
1,"Covers all edge cases like checking whether Assignments is absent in the menu in default view and present in student view. 
Could not view the reviews done by students."
0,"Yes, considers all test cases."
1,"""Switch to student view"" - But to which student?
Open and Close student view is handled on clicking it to switch the type of view.
Same changes (to delete session[:student_view]) need to be done on logout in auth_controller as well.I logged in as instructor6, clicked on ""Open Student View"" and logged out.
When I login again as instructor4, I must still see ""Open Student View"", but I see ""Close Student View"" while I'm not in the student view at all since I just logged in..."
0,"The wiki is well written and contains all required information regarding the project. The screenshots included in the wiki could be more specific with the details of what would the student view and default view. Apart from this , the team did a great work."
0,"The writeup is very nicely written. By reading the background section, anyone can understand the functionality the project is related to."
0,The wiki has been written in a very clean and readable way. It is very legible and I could understand what the project does and how the project does what it does.
0,Explains well. Consists of all sub topics.
0,Explained clearly in the wiki!
0,The features perfectly work as intended.
1,"The features work correctly, as expected. The instructor login only has one ""Student View"" tab under the Manage menu. On clicking it the instructor is successfully redirected to the student view page which has the ""Close Student View"" button to redirect to the default view."
0,No bugs found. Works as intended. The System works without any glitches.
0,Test case implementation is not done.
0,"Yes, works properly."
0,"none of the functions are too long
could find changes where DRY principle was violated
the code follows ruby convention and guidelines
comments were included wherever necessary. the code is easy to follow.
Good Job!"
0,The code follows Ruby Style Guise and follows DRY principle. None of the functions is too long.
0,"The code is concise with 3 functions in the controller. Sufficient comments are used to explain the logic. The code follows the DRY principle, as there is no repetition seen in the code."
0,"The code does follow ""good Ruby and Rails coding practices"". No bad naming. Every file is properly named based on their functionalities. I cannot find issues with coding. One method handles only one task. I could not find any bugs in the system and this works exactly how it is supposed to work."
0,"No long functions
No separate methods required.
Follows Ruby Style Guide."
0,All the method names/variable names and class names are intuitive and according to Ruby standards.
0,The names of variables and methods are aptly chosen and clearly understandable.
1,"The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
(i) The writeup is well written and easy to read. 
(ii) It is adequately descriptive of the work done. 
(iii) Explanation of reasons for the style of code and problem solving approach is lacking."
1,all the test scenarios are included in rspec. The tests are also increasing the test coverage. Great job!
1,All the cases discussed in the Test Plan have been converted into automated tests.
1,"The team has implemented automated tests. There could be some addition to the test, which I have suggested above."
0,The authors have converted all the cases discussed in Test Plan into automated tests
0,"Yes, converted Test Plan into automated tests."
0,Seems like some tests have failed.
0,Basic test missing.
1,The build does not pass the travis CI.
1,The travis test has not passed
1,Checks aren't successful.
1,Travis Tests have failed. No conflicts in the pull request with the master branch.
0,"Yes, the Travis CI build was passed. The conflicts could be seen resolved."
1,I'm afraid none of the three checks passed.
1,"If they had presented a working deployment, then rest everything was done. So it could be deployed onto the production server."
0,"Yes, it is a good code."
1,Few checks are failing. The checks suggest to use build or double instead of create in test cases.
0,"Yes as the test  case increase the test coverage and the build pass is 100% , thus the code is ready to be merged"
1,"There are several minor issues to be fixed before the code is deployed. 
64 code climate issues
Travis Build
1 error and 2 warnings.
I guess once these are taken care of, the deployment is likely."
0,The writeup is complete and well organized. And it also mentions the corresponding change in origin code.
0,Very clearly writeup
1,"Explains the testing functionality appropriately. As mentioned in Review one, technicalities are explained thoroughly but the functional knowledge required to understand what the test is doing and why it is doing what it does is missing. Along with mentioning what are the mappings and return values, proper explanation of what the test is written for will be more appropriate in a document."
1,"The writeup is excellent. Very carefully written, a lot of detailed explanation.
Some more background information about the functions can be more helpful, as well as syntax summation."
1,Write up is good but the explanation of plan of work could have included some points like the approach taken.
0,The write up is very well documented as it explains the test plans and also what changes have been made along with the reference to the files which have been modified
0,The writeup seems to be well written. It is concise and to the point.
1,There was no working deployment presented.
0,All the test cases pass. Majority of test scenarios described in document is covered and automated
0,Project was on writing test cases and the newly written test cases has increased the coverage.
0,Yes the test case covers all the required test cases along with the edge cases .
1,"Except one method, all the other methods have been covered. This is similar to round 1 review given by me."
1,The pull request has some failed cases. no conflict.
0,"Yes, the team has added test cases and the team has covered every functionality."
0,Test coverage for assignment_participant model increased to 94 percent.
1,"According to the github page, no new test cases"
0,Project was writing unit test cases and the newly written test cases has increased the test cases.
0,Yes they have added test case and it has increased the coverage by 3% and has increased the coverage to 39.721%
0,"Test coverage remains the same at 94%. Hence, my suggestion/opinion is same as the previous review."
1,No new code was committed in the second round
1,"I do not see any new commit after 5th November. In my opinion, some of the tests could be made more articulate in round 2."
1,Code was not committed in second round.
1,"According to the github page, it doesn't seems that new code are commited"
0,Yes code was committed to follow clean code practices based on first review.
0,"Yes, new code was committed in the 2nd round."
0,The code follows Ruby style guide.
0,The code is very well written and follows good coding practice
0,Project was on implementing test cases. The test cases are well written and the code coverage has increased.
0,"The code is both succinct and very carefully. i have not done the code check in the first round. but for this time, there's no bad names, functions are standardly-named, good alignment and commenting."
1,"In documentation it mentions participant.rb model file is changed to for increasing code coverage. However the file is missing in the pull request generated. There is no mention about changes in the assignment_participant.rb file. But that is present in the pull request. It may be a name mismatch or some files are indeed missing. I pointed it out during the first review but changes are not incorporated currently.
The code overall looks good. Proper variable names are used. Commenting is required"
0,"Well, the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes."
0,The last commit is on 10/31.
1,The motivation is not enough. It is a little bit simple and general. The team should add the introduction to the specific motivation for this project.
1,Need a bit of detailed explanation on 'why' and 'how'. Too many screenshots with little explanation in words.
1,"Yes, they surely have done a good job in mentioning the errors in the wiki doc. They have vaguely described the handling of the same, but doubts remain in the details or the changes in the code. Which means that a better job and a more technical description of how It is happening should be given so as to grasp a better understanding for the same."
1,No details about the problem statement is mentioned currently. So it is difficult to understand the test code directly.
0,The writeup does a good job in explaining how the authors did the work they did.
1,"The plan is simple and don't list detailed cases for each method, also it does not include various  conditions may include."
0,"Yes, testing is thorough"
0,"Since, their entire problem relies on the RSpec testing framework itself, they have implemented it in a good and a concise manner."
1,Test plan documentation is missing currently. Plan will help to relate with the code and understand if things are tested appropriately and the response is as expected or not
0,Feel a pretty good job has been done.
1,There are not enough introductions about what the functionality of the class they will test and what it is used for. The team can introduce more about what expertiza is and what the role of the class will be test and its functions.
1,"The writeup has proper instructions but needs some improvements:
1. Explain the problem statement 
2. Explain 'why' you need the solution
3. Explain the steps you took.
The code snippets are added but could be improved by adding explanation of the tests. May be adding 1-2 lines can help."
0,Yes. I can understand the intention of the test. Nicely done
1,"Yes, the team has taken care of it by specially making a section of what is the problem as the introductory section of the WIKI doc so as to make us understand the goals of the project. They have even attached code snaps of the relevant changes they have in mind whilst explaining the error. Although, one questions the details in which they should have gone into explaining the errors and resolution. More mentioning of details is required."
1,More details required regarding the functionality for which the test cases have been written.
1,"The write has only details of team members and files changed. Out of the two files mentioned , only one is currently committed in git(vm_question_response.rb) is missing. May be a commit issue."
1,No pull request link
1,The functionality has been written well. Though I do feel it would have been better if the test cases implemented had been explained in more detail as to what the do.
0,All the tests pass successfully.
0,Manually Tested the Test Code and 97% covered(validated via Coverage.index file)
1,Impossible to do since no submission or uploading of the image have been done for this project. It is unclear how to decipher any meaningful data without the help of pull request as well.
1,Including basic Understanding of the problem statement and work will help in manual testing.
0,It seems to work well.
1,"For each cases, it include too many things need to be test, it is better to separate them into different cases.
Also, the object used for this test seems not be put into the factory, it is better to make them into factory which is a good practice.
The use of context is not good enough."
0,"Very well written, clean and concise."
1,"Please extract all ""let"" to avoid the repeat code."
0,Code written follows the Ruby Style Guide.
0,Difficult to understand what are the changes .
1,Just one contributor
0,It follows the DRY principle
1,"Some names are ambiguous, like pptn, I cannot know clearly what this name is for."
1,"Code follows standards but variable names can be better and more 'readable'. Another suggestion: declare ALL variables first then use those variables to call methods. When you add/declare variables in between method calls, it looks as though you 'forgot' to declare earlier and added them later. Just a thought !"
1,Can't find the pull request to comment on this
1,Pull request has not been submitted or uploaded at all which makes it hard to decipher any of the above data hence make it a problematic scenario to certain what all changes have been made in the first in the terms of number of commits or pull request.
1,Haven't uploaded the link for the pull request.
1,One file is missing. May be a commit issue. Test coverage is not mentioned. Pull request is not raised so it does not mention about the whether the test coverage increased or not.
1,Not enough data for judgement
0,The variable names seems good
0,The tests are included
0,"As mentioned by the team, more code needs to be added for 90% coverage."
0,"Again, since their entire project is on RSpec testing, so this aspect has been well taken care of."
1,No Automated tests.
1,Test plan is not mentioned. Currently test cases are not running because of model file missing. Youtube video with description will be useful to show how the tests are running and if any of them fail
1,The tests have been added as per the test plan but some of them have not seemed to have passed. The team could have a look at the tests not passing and work on them.
1,Travis test did not pass. Errors were not fixed. Continuous Integration failure.
1,"Build does not pass. Also, code climate issues are observed."
1,"Travis Passed.
Code Climate has 82 issues"
1,The build has failed in Travis CI.
1,Travis CI has error ed. The tests fail.However there are no conflicts with the base branch or master branch.
1,The code has been merged in a good way and there have been no merge conflicts. The build did pass the Travis CI. The code climate test failed but those were small issues which can easily fixed by just revisiting the code.
1,"The test made the coverage increase, but it still have room to improve its structure to make it more clear and useful."
1,I am not sure since these are Unit tests and there are Travis tests failures too. Need to check with the team and mentors.
1,Ready to be deploy but must resolve the build issues.
1,"It is a testing project which aims at improving test coverage. So production deployment is not in question. However before merging the code to Master branch here are a few recommended changes.
1) Adding comments to improve readability and understanding for future use.
2) Avoid using comments like ""I swear this is the last one"". They do not explain anything about what you changed from your last commit and why. Proper professional comments are expected. All these comments should be refactored."
1,"I do believe the code could be deployed after a bit of refactoring is done as suggested by the code climate tests. But overall looking at only the functionality of the code, it is ready to be deployed"
1,"The description for the background, motivation and the deign is not very clear. The team can give more detailed introduction specific to this project."
0,Writeup is well written and gives explanation for all the requirements.
0,The write-up explains what functionality is tested and why. The coverage is also mentioned along with code snippets which is good.
1,The team has heeded to the advice given in the last round and explained their tests in a more detailed manner. I do feel that the write up is well written and covers almost all the important points of the project. But I do feel images showing their tests running successfully could be added to the results part of the writeup.
1,"The test cover most cases, but some scenarios like different cases for the if statement for add/team method is not sufficient."
0,"Since these are unit tests, no UI test needed."
0,This testing project covers all the scenario as required.
0,Yes almost all scenarios for vm_question_response model is covered. Good work.
0,There wasn't any link provided to check if the UI was working fine. But there was a YouTube video showing the tests successfully running. And also the tests did seem to cover almost all the scenarios.
0,The team added new test cases and make the coverage increase also the overall coverage for the whole system has increased
0,Coverage has increased from 11 to 97%. It is impressive. Great Job! The team has achieved what they were looking for.
0,"Yes, the coverage has increased and test cases have been added. Coverage is more than 50%."
0,It is a testing project so test cases are added. The coverage has increased to 97.5 percent for Vm-Question Response Model.
0,Yes the team added test cases and the overall test coverage has increased.The team has added a lot of tests and I do feel it does cover the range of this project.
0,The team makes several commits during the 2nd round to make improvement.
1,No code was committed during round 1. Most of the code was committed during second round based on reviews of Round 1.
0,There are minor fixes related to code style.
0,"Yes, new commits were done in the 2nd round."
1,"The structure of codes is not very good, that is, for a ""it"" statement, there are two many things include in it to be tested. It is better to separate  the test cases clearly. Besides, the objects seem not store in factories properly."
0,"Documentation is well-written, instructions is given. Problem statement and solutions are provided. Screenshots are given."
1,"Your team have put all ""let"" behind the code. However, there are, still, a lot of 'let(:response) { VmQuestionResponse.new(review_questionnaire, assignment, 1) }'. It is repetitive and unnecessary."
1,Lack of Comments
1,"A huge improvement from Round 1. In round one not much code was submitted so this is a huge improvement. Keep it up.
I have a Suggestion: It is very important to have comments in the code which will help other readers understand your code or in this case understand what you have tested without having to look for any other documentation which explains it. (Code file should be self sufficient)"
1,"The unit tests affording 95% coverage is great, but the code climate and other build problems are a bit concerning. I think this could be pulled in with more attention from the developers."
1,"The writeup is detailed, but it doesn't explain why code in the model had to be commented out very well. That was a bit alarming."
0,Video demonstrates working and passing tests.
0,Coverage increased by 3%.
1,"There were many lingering code climate issues, and the Danger bot and Travis didn't pass either. A little cleaning could be done."
0,"Code makes good use of rspec's describe and context options, and manages to achieve ~95% code coverage."
0,Code was cleaned up 5 days ago.
1,"The coverage could be increased to %100, but this is a great start."
1,"It says it failed, but I am not sure the most recent commit has been checked yet."
1,"The project covers a significant part of the functionality for testing the participant.
However, the biggest problem is that the #scores method is commented out from the class AssignmentParticipant. Obviously this will break the existing code that relies on that functionality.
Furthermore, the future testing will possibly become complicated because the object under test for participant_spec.rb is an instance of AssignmentParticipant as opposed to Participant."
0,The writeup is comprehensive and fully covers given functionality. There were no significant issues that needed to be fixed from the first round.
0,The code coverage is ~94% which passes the required threshold.
1,"The coverage has increased from ~77% to ~94% which is impressive.
However, the previous issue was that #scores method of Participant was not called because the object that is being tested in this project is an instance of AssignmentParticipant class. This problem was handled by commenting out the #scores method of AssignmentParticipant so that Participant #scores method will be called instead. This breaks other parts of the code which depend on AssignmentParticipant's #scores implementation.
The solution to this problem is to either define a new Participant class instance in the factory or to define it in the test code itself."
1,The build did not pass Travis CI. The reason is because #scores method is commented out from the AssignmentParticipant class.
1,"The team has made two commits since the first review.
The issues that were covered were '#scores' block and mock instance handling.
However, the primary problem that the spec is testing an instance of AssignmentParticipant class instead of Participant was not addressed."
1,Testing has not been done yet.
1,"Test cases were not mentioned. Can't test as the link to the deployed application is not working(Unable to login with correct user credentials. Even after giving forgot password, did not receive password reset email) nor the screencast video link is provided. Please include check either of them."
1,NO TESTS added.
1,"Authors could use empty? instead of checking unityId != ''. Another thing that the authors have taken care of ttml mails but what if the somone needs to non-html mails. 
attribute copy_of_all_emails does not look like a good name, it would be nice if they could rename it to email_copy_all or so this help in reader understand as well as in ide intellisense. 
Code coverage has decreased"
1,set_proposer is a setter but appears to be used as a getter.
1,not adequate explanation.
1,"Comments in code are missing.
There are few lines that need to be removed but still exist, it would be nice to delete those eg #emails << assignment.instructor.email 
 Function length looks okay, most functions have len < 20 lines which is an acceptable number.
Since the code is implementing very specific issues over it has specific local changes. 
Other change are okay and ruby like"
1,Code climate show 99 issues in the code. Many lines aren't properly aligned. Commented code hasn't been removed.
1,"Commented-out code should be removed (at least one example found in participant_spec.rb). Also, there are some indentation issues as well as other issues flagged by CodeClimate. Otherwise, the code seems to comply with the Ruby Style Guide and be fairly DRY."
1,there are issues in the build
1,I have been unable to test the users work manually as expertiza does not allow me to send a mail to my existing mail id. I have also tried adding a new student to the assignment which was not possible( i got an error stating the student does not exist) and all existing students have the mail id( expertiza@mailinator.com) which cannot be accessed to verify.
1,"Can't test as the link to the deployed application is not working(Unable to login with correct user credentials. Even after giving forgot password, did not receive password reset email)"
1,I could not figure out how to test the code. I could not make an account for myself because Expertiza is not set up that way. There were no setup instructions in the writeup for testing the emailing capabilities.
1,"The write-up is well written along with the screenshots attached for the code changes which helps in explaining the issues and changes made to solve those.  Just one suggestion, if you are explaining all the steps and redirection for some issues/changes please keep the content consistent for other issues/changes as well."
1,The background and problem statement are clear and concise. The description of the implementation is thorough but a little too detailed. It relies too much on the source code and not enough on figures and written explanation.
1,No the writeup does not mention the test section.
1,No the writeup does not have a test plan
1,"The Writeup does not have a test plan. Not able to check if they considered different pre-conditions, edge cases, invalid input values, and other possibilities"
1,Test Plans are missing
1,no test plans mentioned
1,no test plan availble in the documentation.
1,"Yes the writeup explains how and why the did the modifications. It has comparisons between the previous and new versions and why they made they made the necessary modifications. 
There was no mention of using design principles or patterns."
1,The 'why' part is missing for the code changes. What does each code line of change do? Maybe you'll can incorporate that.
1,they explained how they made the changes. Patterns if used are not noticed by looking at the code and not mentioned in the writeup
1,The writeup explains to a limited extent the approach that was followed.Majority of the writeup consists of code and not how it was implemented.
1,"The writeup was fairly specific on how the solution was implemented, although more qualitative description should have replaced the source code dumps. The writeup barely explained why the improvements were needed, focusing on what was implemented."
1,No Build still fails in spite of asking them to fix the build issues in first place
1,"Build failing due to bad test. Log shows one error for now. Also, I have a feeling tests on some projects aren't able to run all test- the coverage log for this PR shows that none of the files are getting covered: https://coveralls.io/jobs/41685719"
1,The build did not pass in Travis CI. There was one failure which needs to be fixed.
1,Build did not pass Travis CI but there are a lot of warnings and issues that have not been fixed. Many of them are trivial and easy to fix.
1,The Travis builds have failed but there are no conflicts to be resolved.
1,Not it didnt pass the test.
1,build not pass in travis ci.
1,The build does not pass. It looks like some failing new tests are the issue.
1,No the build failure needs to be investigated. Some refactoring regarding the messaging should be done. instead of hard coding the mail it should be read from a config file.
1,"No this code is not ready to be deployed onto the production server. Minor bugs said by the Travis CI can be fixed. Also, Add test cases and after thorough testing, it should be good to be deployed and hence this will be a good starting place for a future team to pick up."
1,"It looks like the code is almost ready, but there are simply some failing tests to get past."
1,"Write up is Okay, The test plan comes before solution / approach section . pls change the ordering. there is no reference section 
instead of putting screen shots of code it would be better if the authors had put code snippets"
1,"Writeup is decent. I felt that code should have been quoted rather than included pictures of as that would make it easier to modify.
The pngs weren't same size which appears to be negative that people  have commented on my work too."
1,"The write-up is very detailed as to what features have been implemented but lacks on explaining how they are implemented.
It can be improved by adding how the features have been implemented, why they chose this logic to implement the features."
1,The write-up is well explained along with the test plans explained in steps to make it easy for testing but that just have a few cases with cover basic functionalities
1,writeup covers all the specifications and descriptions but is too lengthy.
1,"The team added the test plan section but it was too short and did not explain all the test files created and/or modified. The implementation section could do without the many code dumps. Otherwise, the writeup was concise and effective."
1,"Was unable to test the work from UI , but the implementation looks okay. I would have liked some screen hots of mails and videos to be uploaded as references so that reviewers could look at them as well."
1,"Checked the following functionalities through UI:1) Log in as instructor. - checked2) Got to profile page. - checked3) Check the box that says 'Send me copies of all the emails'. -checked4) Log in as 'student2064' with password 'password'. - checked
5) Trigger any action that may result in mail being sent to the student. -checked6) Log in to instructor's email to check if copy of the same email has been received. --could not check if emails are being sent/received .
1) Login as a student and send an invitation to an invitee. -checked2. The invitee should get an mail on your invitation. - could not check mailing 3. Login as the invitee and accept/decline the invitation. - checked4. The inviter should get a mail on the response. - could not check  the mailing"
1,"Without a video or instructions, I cannot easily verify that the solution works since there was an error thrown when I tried to follow the recipe. The error occurred while I was trying to request an account. More detailed testing recipes would help. Getting the accounts and their email addresses set up in the deployment is the main difficulty."
1,"Yes the team did add test cases but I am surprised on why the coverage numbers have fallen so much. This needs some investigation. 
I think good test cases were added as part of the work, i would have though liked to see more -ve test cases checking for the failure conditions"
1,"The overall test has coverage decreased. However, the RSpec tests added to the project seem appropriate."
1,Didn't see any test cases.
1,"1) Yes. The team has added test cases. The newly added tests are not covering the range of this project well. The total coverage has decreased and more number of files have lost coverage.
 2) Overall coverage decreased (-28.6%) to 8.18%."
1,I don't see new code being committed.
1,The code that is written has long functions. Few names do not really provide the gist of what the function is intending to perform
0,"Yes, after testing the work manually, I could see that their features are working as intended."
0,"Yes, the admin has included the Test Plan cases in the automated tests."
0,Pull request build passes well and there are no issues.
0,"Yes, the Test Plan looks complete and includes all the test cases and the actions."
0,"Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have put a video explanation of the same."
1,Yes all the features work as intended. The participant that is created using the build method describes participant as an instance of the assignment participant class. I observed the handle method has not been tested yet.
0,Yes all  the 17 test cases are automated. They have reached the goal of 90% coverage .
1,"the code looks clean . However, some of the comments are not provided for the test cases. apart from this the naming and the conventions seem to be fine"
0,"it follows the standard ruby practices . All the variables , methods and class name look reasonable. The added tests looks very clean"
0,Yes the test appears complete as they have mentioned all from setting up the expertiza environment to the tests that they have implemented along with the plan of the they executed their project
0,Yes the have mentioned all of the required work and its related explanation. they have reasoned out their exact methods and the issues to be considered while testing in the problem statement.
0,the document contains the whole information including the test plans and the the expertiza environment setup. It is neatly documented as well which makes it more readable
1,"Yep, the spec.rb file works fine. I think only handle method hasn't been tested. This is why the coverage seems to be 94%"
1,The test plan is not about what they test in the Rspec test.
1,"The code looks clean. Though I don't understand why you have used this line in the test for responses "" puts participant.response_maps"". I feel some of the code that isnt needed is commented out. Please remove this code as it was mentioned in the details. Naming and cnventions seem to be fine."
0,"All variables, methods and class names look reasonable."
1,The test plan does not include details on preconditions or edge cases. I suggest the team to elaborate on Test Plan. Otherwise a good start.
1,"They have mentioned that they use ""factory"", but it hasn't been mentioned clearly how they use factories. It would be great if they can incorporate this in the Wiki."
1,"The Wiki is descriptive and covers the essentials of the project. In my opinion, I think the code for every test is not required. It is enough to explain the structure and code for one test, maybe and what each test is supposed to do for the rest of the tests. That should suffice."
0,Video covers how to run the test cases which are clear and understandable.
0,Test cases are present.
0,FuncyFunctionalare of correct length.
0,"Naming conventions are followed.
Test coverage has increased."
1,Test plan is not included however they have included the diffeedif test cases implemented and the exolaexplan is good.
0,Functionalities have been tested properly.
1,Project purpose is write test cases for participant model and increase the test coverage. This seems to be easily understandable but plan of work should nainly concentrate on how we test this functionality rather than just mentioning that test cases need to be written.
1,"No, the test failed."
1,There is no need to use the student3 and participant3.
0,very clearly writeup.
0,Tests work
0,Yes all 17 test cases are automated
0,Does not apply as its a testing project with most testcases written in a single Rspec file to test the functionality
0,Coverage has increased by 7 percent overall
1,A more through explanation of what each testcase does will be useful. Its documented well about what the testcase will return but not what it does. Mentioning that will be useful
0,Looks good. Explains what work is done and what is the corresponding output
1,The doc says participant.rb model is  changed. However that file is not currently committed. However assignment_participant model file is committed. Seems to be some mismatch at one of the places. Correcting it will help in understanding what work is done and how does it impact the functionality.
1,"Tests in the file pass, according to the video, but less than 100% coverage implies that corner cases aren't being handled."
0,Everything in the wiki was a test.
1,"CodeClimate bot reports 73 style issues, which is an awful lot."
0,The added tests look very clean.
1,"The document states they have a 77% LoC coverage, but the assignment description states they need at least 90%. This is not complete."
1,"The writeup explains why the tests they write relate to their respective methods, but doesn't justify a 77% LoC coverage, which is below the requirements for the project."
0,The writeup explains how the tests relate to their respective methods.
1,Some cases haven't been implemented yet.
1,They have not yet reached the desired goal of 90% coverage.
1,The test for sort_by_name redundantly checks implementation parts. It needs only to test the result.
1,"The test plan could be more specific. For example ""Writing testing conditions for different functions"" doesn't indicate what strategies are being employed or what edge cases are being tested."
0,The write is very descriptive and included code from both the model and the spec file.
1,"Features implemented in this project work as intended. After running the code manually I am getting the same coverage as stated on the wiki page.
One problem is that the main object under test - participant is created using build method. factories.rb describes participant as an instance of AssignmentParticipant class.
There is a possibility that this is complicating test cases or will complicate them in the future.
The solution is to either define a new Participant class instance in the factory or to define it in the code itself."
0,The authors have implemented every test case that is discussed in the test plan. Detailed explanations and code itself is provided in the project's wiki page.
1,"The code is concise and readable. It consists of mostly small methods that test one thing.
One exception is #.sort_by_name method where several assertions are made in one method. It would be better to use several 'it' statements and DRY out the code by utilizing before(:each) statement.
One further suggestion would be to shorten the code by using one array statements instead of individual expressions. For example replace:
stu1 = build(:student, name: ""Student1"")
stu2 = build(:student, name: ""Student2"")
 
stu3 = build(:student, name: ""Student3"")
with:
students = (0..2).map { |i| build(:student, name: ""Student#{i}"") }"
1,"Most of the naming is reasonable and follows standard Ruby practices. 
One problem is that code makes extensive use of variable names concatenated with numbers.
Example: allow(participant3).to receive(:topic).and_return(topic)
Here it is not clear what distinguishes participant3 from other participants and why it is special.
It would be better to avoid using contractions such as stu1 or p1 (.sort_by_name method, Line 130).
Furthermore, I would suggest using consistent indentation (for example .get_authorization method, Line 113)."
1,"Scenarios that are discussed in the wiki have comprehensive descriptions and justifications.
However, clearly a number of edge cases are not considered as the test coverage is ~77%.
 
I would suggest using mock objects which will both decouple tests from database and increase the overall coverage. 
For example mocking find_by method of TeamsUser would allow covering participant#team case:
allow(TeamsUser).to receive(:find_by).with(user: student).and_return(team)
 
Another minor issue is that wiki is missing some cases that are implemented in the code (#team, #fullname, #scores)."
1,"Authors describe the strategy they utilized for tackling the project and the detailed mechanics of each test case.
However, there is no mention of specific design decisions or patterns that were used in the implementation.
My suggestion is for the team to elaborate on technical decisions made for simplifying test cases for example the majority of mock objects is created at the beginning before every 'it' statement."
1,"The problem being addressed by this project is defined cogently without any ambiguities.
Test cases are considered separately starting with description of the given method followed by how the functionality is being tested.
I would suggest removing parts like Expertiza description (http://wiki.expertiza.ncsu.edu/index.php/User_talk:Rshakya#Expertiza) and rationale behind using Rspec (http://wiki.expertiza.ncsu.edu/index.php/User_talk:Rshakya#Unit_Testing_with_RSpec) because those parts fall out of the scope of this topic."
0,No tests were added as part of the project. just minimal UI changes
0,There are no test cases as it is an UI specific project
1,They have added test cases and the coverage did increase but only by a little amount. They should have considered adding more test cases since the task of changing the color of the links was such a minuscule one.
0,"It's UI project, testing isn't required as such. They have still mentioned in there documentation."
0,"Um, somehow your commits increase the overall coverage of the project (and as mentioned in the write-up, test cases aren't possible)."
1,"Unfortunately, no tests were added. It would have been good if the team added test cases to check their UI changes."
0,"As mentioned in wiki page by team, color change does not affect button functionality, hence no test plan is required.
Hence giving full points here."
0,"The test cases are added with good explanation.
It does increase the code coverage.
The thing I liked that the screenshots itself speak for the test cases."
0,No test cases were added. No real scope for the test cases to be added to test changes made to HTML code.
0,No new Commits
0,No there were no new commits due to the fact that were no changes to be made
1,No commit has been added since round 1. They should have fixed the build failure which is probably happening because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
0,No new content was necessary during the second round.
0,New commits were not added in the 2nd round. In my opinion they were not required as well as the team completed their task in the first round itself.
0,I can not see any new commits in second submission as the functionality was working properly in first submission itself.
0,"The last commit was made 9 days ago as per the given link.
There were not many changes required, so seems fine."
0,No new commits were made during round 2.
1,"It was a simple UI color change, so not many categories are not applicable. the code can be DRY, by using the CSS file for styles. Also there is no need to add colors in bothand .  would suffice"
0,Code is still using DRY principles
0,"The code was very well written. However, that should be a given considering the complexity of the project which wasn't a whole lot."
0,"Code looks good, there weren't many changes and mostly are HTML changes so no commenting is required as such as well."
0,CSS snippets are still written inline. No changes were made after round 1
0,Everything seems good.
0,"Overall, the code was well written. As mentioned earlier, the only change the team had to make was add color codes. Hence, no mistake was made in the first round itself. Good Job."
1,"Code is written properly with no bad naming conventions. No major code change can be seen after first submission.
 Code is DRY.
But I could not see color change specific comments in the code."
0,"The code changes seem to be fine.
I do not see any problems regarding the code as it is pretty well explained in the wiki as well."
1,"The overall code quality is moderate. I would suggest the team to either use hexadecimal color codes or names, to ensure that the code remains consistent."
0,"The write up does intend to capture the changes that have been made, there isn't much for them to explain and thus the writeup seems short. There isn't much scope for the team to have used design patterns in a project which involved making cosmetic changes to the views."
1,"Yes, the code change along with the screenshots does explain the ordeal, but the git screenshots and some more explanation would be well appreciated."
0,"The code change seems simple enough that does not require any design principle or patterns.
Whatever the code changes are, explained properly and coding principles with required output."
1,"The writeup clearly explain why the team did the work that they did. Good job on that.
The only thing I may have preffered to have as a reviwer is a detailed step by step instruction on how to view the changes made by the team in the app. This could be added in the wiki, or a short screencast could me made to help follow the steps."
1,"Team has used in-style tags to add CSS styling in HTML pages. They instead need to create an external CSS, define the styling there and use the class names in HTML tags. This provides styling maintainability throughout application."
0,The write up explains each and every thing which they implemented
0,The project was to change the colour of certain links to depict certain statuses. Since the complexity of the project was not high there was no scope to use any design principles or patterns.
0,They have explained the changes they have done and why they have done them.
1,"Project does not have test cases included, hence can not check further functionalities.
If team is not able to add test cases for exact change, team could add/mention test cases surrounding the change that lead to checking the changes in this merge."
1,"There is no separate test plan section, but the test functionality has been shown in the form of screenshots.
Could add it under the Testing header in the document so that the code and test would be separeated."
1,They dont have a test plan in their write up but they showed the screenshots for various cases.
0,"The writeup doesn't has a test plan, but the work they have done is on UI i.e. colouring the links. So there won't be any edge cases as such to fail in this project."
0,There is no explicit test plan mentioned in the wiki. But for this project I don't believe one was needed.
0,There is no scope of a test plan with changes made to the view.
1,"Looking at the commits, there is hardly any work done by the team other than adding style tags in 2 commits.Also, the wiki link attached is of Fall 2018. New Wiki has not been created."
0,"The document is well described with details on Expertiza, its purpose. It also details the files related to their assignment."
1,The code block runs out of the space. Needs to be corrected for proper look.
0,"Yes. The team clearly indicates in the wiki, what this project is related to and how they went about to complete the given task at hand.
I'm not sure about this, but maybe the heading for the wiki is incorrect. This project is listed as E1828 in the list of OSS projects. But the team have named it as E1785. This may be a mistake on the team's part, if so, I would suggest them to correct it."
1,"The write up is well documented. There is a clear flow from the code change part to the screenshots of the implementation.
It would have been better if there was a screenshot of the code from git or a link to git so that the code changes would have been more defined as per the green and red colour.
Also, the code change could be explained more."
1,"The write up has not been formatted well, most of it consists of what can already be read from the OSS assignment specifications document. I would strongly suggest the team to include screenshots of their commits instead of using wiki code formatting."
1,"Writeup is written very neatly and in elaborated fashion with understandable images.
Team could have added Github Expertiza link and pull request link at the bottom of the wiki page.
Also references and credits."
1,The page is complete. Only thing which I mentioned is a good color combination is needed.
1,"I couldn't login to the deployed website since there were no credentials which I could use. Perhaps the wiki page should have included the credentials for logging into the deployed website. However, from the screenshots it seems that the functionality works."
0,Looks great.
0,The changes in this project were simple enough to work for all edge cases.
0,Yes. Team has resolve the issue very well and also taken care of edge cases.
0,There are just the changes in the button colours required which are working as expected.
0,The implemented solutions work in the deployment
0,The code is complete and does what it was intended to do.
0,"The code follows Ruby guidelines. However, since the project involved just adding colour to certain links there was no point of the code being DRY. In fact, reviewing this project doesn't make sense since the project was literally just changing 3 lines of code, NOT THAT IT IS THE FAULT OF THE TEAM."
0,repeated style tags
0,"The code added is extremely easy to read, follow and understand."
1,"1. Code is simple and written efficiently without long functions, unnecessary looping or dead code.
2. Shown snippet itself is well modularized and no need to be written as separate methods
3. Code is well understandable.
4. Code does follow ruby style guide.
5. Code follows DRY principle."
1,"Code does follow the conventions.
Just that the comments could be better explained for the functionallity"
0,The added code is easy to understand and not complex.
1,The color combination could be changed for buttons. Maybe for someone who has a difficulty while differentiating colors (me) faces a lot of problem.
1,The build seems to have failed due to some unknown reasons. Travis CI states something unrelated to tests or something about dependencies that I can't quite comprehend. The names are quite comprehensible and the code was written well.
1,The naming looks fine in html file. Although your pull request shows changes in schema.rb file which i don't think you have used any where or had to make changes int it. Probably is went through by default when you pushed your changes. You might want to revert that from the pull request. That way I think your build will also pass.
1,In-line CSS style tags inserted instead of linking external CSS file.
0,"The only change this team had to do was add color codes for the various types of links that come up while reviewing. This would be hard to mess up. 
And the team has not messed it up. Good Job guys."
0,"Variable, methods and class names seems as per coding standards and variable  names are making it easy to understand the logic code. Hence names used are reasonable."
1,"There is a change in the colour code required, so there was not much of a naming convention to be followed here.
Dint find any instances in the attached code where name could be changed.
One instance of is_submitted could be changed to is_submitted?"
0,The newly added code does adhere common HTML standards. The only other change is to the db schema.
1,"No they haven't added. But i think its not required for this project, as its just UI change."
1,"Testing for the UI changes has not been done. Maybe they were not supposed to, but if they were, more documentation in the wiki would be helpful."
1,There are no test cases
0,They were not required to write automated tests as far as I know
1,I could not see any mention of test cases in the wiki or github. Team could add/mention test cases surrounding the change that lead to checking the changes in this merge.
1,"It does not seem to be an automated test plan.
There are screenshots placed, which seems to be manual testing done."
1,"Although no specific test plans have been mentioned, the wiki page does show screenshots of the changes that are visible after logging in."
1,Git link is not working. the account might be private
0,Code commit frequency is fairly good.
0,The project was continuously updated during the past two weeks.
0,"They have 195 commits. Ui is great, everything is running smoothly."
0,"The team has been pushing changes since around 12 days ago, and the project structure feels well planned with some changes and testing required."
0,Yes i could see multiple pushes.
0,The team all had multiple commits throughout the course of the project.
1,"Parts of the code is tested partially, none of the models are tested thoroughly"
1,You haven't completed this task.
1,"I feel the user model is well tested. The link to houses broke through realtor role on heroku. This might just be a production issue and might work well locally in the development environment. I recommend checking the heroku logs and fixing this error. Due to this error, I could not create any house for listing. Overall, I feel it is a good job and you have managed to implement most of the functionalities. 
One suggestion would be :

1)      When I try to sign-up as a user, I have to fill up the role type. This is not intuitive for a user as the user does not know what kinds of roles and their format(case sensitivity, data type etc) expected by your system. I would suggest either give a drop down for this or checkboxes which will be easy for a user to use."
1,"No model tests were found, but a controller test was well tested."
1,"UI is simple to follow. Enhancements mentioned below can simplify various tasks
1. Preferred contact method can be drop down with ""text, mail, phone"" options.
2. User role can be drop down with ""buyer and realtor""."
1,"The user interface is average. 
The good parts I found about UI are:
1. Error messages (while registering a new admin/house hunter/realtor/house/company) were helpful.
2. Front-end checks like mail and phone number size and type etc have been used properly.
3. Dropdown for companies while registering houses, for houses while submitting inquiruies etc are properly implemented and easy to use.
However, several very small changes would make the UI much better:
1. Allow a drop-down when signing up as roles
2. Add inquire a house or add a new house to interest list etc functionalituies at the top. If house list gets a few hundred rows long, user must scroll all the way down to access the functionalities.
3. Add message as to why login failed. Something as simple as ""Invalid credentials"" would suffice and let user know that the login is working but the password is incorrect."
0,Everything was described properly in the README file.
0,They have attached 2 other files saying what all they have implemented.
1,The user interface is pretty intuitive. Few things like the create house functionality is breaking on heroku and giving an application error.
1,Sign-up for realtors and admin gives application error.
1,"The user interface has a bare bones look and feel but is intuitive overall. The inquiries list is hard to find for the admin, and the links below the tables could be placed at the top of the screen to improve the UX. The inquiry component of the app had awkward navigation, particularly for the realtor. This is also awkward for the house hunter. Only one link is needed up top."
1,Stress is given to MVC architecture. But proper comments in the code section can simplify the code understanding for other users.
0,"Yes, the code does follow Ruby and Rails practices to an extent, as I can see the use of many helper methods in the code."
0,"The code is clear and concise, it does follow good Ruby and Rails coding practices."
1,"Everything seems good. You can move constants to a separate file and use them . For example where you are comparing ==""admin"" or ==""realtor"". You can either move them to a separate file or in database and use it."
1,"The models , views and controllers are well created. 

1)      You can seed data for the admin into your production environment. The command to do this on heroku is heroku run rails db:seed. You need to make changes in the db/seeds.rb file and add your admin credentials in the proper format in this file."
0,Timely commits and elaborated readme file.
0,"Yes we can see many pushes on git.
Hence , they have updated code."
1,The code has good style and recognizable convention over configuration. There are some line spacing issues however.
1,"The code enables properly testing the various features and describes the system working as desired. However, since the Travis build did not pass, the code could be deployed but with careful intervention by the developer. It could be taken up from here and does not require to be redone from scratch."
1,The writeup is disorganized and does not specify the function carried out by the team during the project.  It does not follow the typical format of the writeup and provides a list of items such as files involved and task expected.
1,The write-up is pretty ambiguous and feels all cluttered up. Maybe elaborating on few lines and separating the one whole paragraph into bullet points under different headings would have made it more readable and clear.
1,Good description. I think with the use of headings and subcategories it will look good also need lot of conteent to mention the changes done
1,"The writeup gives a high level overview of the work done
Suggestion:
1. You can try to make the write-up more illustrative by discussing which refactoring principles were implemented in which files and how does it make a difference.
2. You can take help of code snippets to make it more understandable."
0,There is significant improvement in the write up after the first round. It gives good idea of the project.
1,"Since the Travis test has failed and the test coverage has also decreased, merging the code would not be a good idea. The project doesn't need to be redone from scratch, some modifications to the existing work could make the project ready for deployment."
1,Even though the code has been refactored keeping in mind the coding standards but I think that there is still room for improvement in writing the test cases and the PR checks should be checked as well since they are failing. This is something that the next team could pickup and then the code could be ready to be deployed on the production server.
0,"The code has been working fine, and once the integration conflict is solved, seems ready to be deployed. The future team will be able to pick up from where the current team has left."
0,"Surely, once the code is sufficiently tested by the TAs, then it is can surely be implemented as a change. Even so, the Travis CI and the overall Coverage should be verified first. Going by their page, it is a finished project and hence no use giving it to the next semester as a project."
1,"No, I think they code have some bugs in there."
1,"The build for the Travis CI fails and also the code climate shows 79 issues to be resolved. However, it does pass the Danger Bot with considerable warnings."
1,"The pull request still shows that the build fails. On observing the logs, there is only one build job which fails due to a ActionNotFound error for view_action method. This needs to be looked at."
1,The pull request did not pass the Travis CI build. There are no conflicts with the base branch.
1,"The code has been merged in a good way and there have been no merge conflicts so far which is commendable. However, the Travis CI was failing and the code climate check was failing too. This is something that the team must look into and make sure that the changes that they have made are consistent with the existing expertiza code."
1,"No, according to Travis CI the build doesn't seem to have passed due to some bundle install errors. Although they surely should have resolved it because the code wouldn't be able to achieve the above results as stated by their photos and wikipedia page."
1,"No, they didn't pass Travis CI."
0,The writeup gives a gist of the work carried out by team throughout the project. The team added the Test Plan section describing the testing procedures carried out. It is also structured nicely allowing the reader to understand the project in it's entirety.
1,"The authors have portrayed their work by adding many code snippets.
It is cumbersome to go through the entire code in the write-up.
A general approach towards refactoring principles used would have been impressive."
1,Alignment issues for the content
1,"Overall, the writeup was pretty good. Everything is explained in a good way with the help of code snippets and screenshots. There is definitely lack of explanation on how to check the work. THis is the only thing that I found where the writeup could've focussed more. Other than that it looks good."
0,"Extremely well written Wiki Page, thorough and to the point with enough technical content and relevant screenshots pertaining to the before and after scenarios of the problem statements."
1,"I don not think it's good, because they just paste most of their code on the writeup."
0,"The system works as intended. The project required to make the features work such as removing hardcoded parameters as save_choice method, replacing switch statements with subclass methods and creating models for the subclasses."
1,"The team has added screenshots on the submission page, which show that the UI is working as intended. 
However, it had been more clear had they made a screencast of the same."
0,"Yes, the code has been refactored to cover all the intended scenarios and the tests have been very well document along with testing the edge cases. As per their approach the first segregated the tests for questionnaires_controller into two test files, questionnaires_controller_spec and quiz_questionnaires_controller_spec and separated the tests for CRUD operations of quiz_questionnaires_controller into the quiz_questionnaires_controller_spec, renaming them from view_quiz, create_quiz and the like to view and create. This in my opinion is a thorough enough test."
1,N link to the deployed version is provided hence cannot comment on this question
1,There wasn't any link provided to check if the UI was working fine. This project was majorly focussed on refactor and looking at the code changes in the PR I can guess that the features might be working as they were supposed to.
0,"According to the screenshots uploaded by the authors, the features work as they are supposed to. New questionnaires have been successfully created."
1,"No, it did not work intended."
1,The team did not perform any changes from the first round. No test cases were added and the coverage remained the same. The test cases from the previous round considerably fulfill the range of the project.
1,"Yes, the team did add test cases to test their changes, but the overall test coverage has decreased"
1,The team has made sure to write the relevant test cases wherever possible. But the overall coverage has decreased. In my opinion the newly added test cases cover more or less the entire range of this project. But I think that they need to focus a bit more on the test casses.
0,"Yes, an excellent job in that regard. They have first explained their test plans, then even provided links to their RSPEC tests which I checked. Then they have run and shown their screenshots of the Rspec tests going through successfully."
1,"No, they did not commit any new code, so no coverage increased."
1,"There have been no additions to test cases, although they have added a test case in last round. 
The test coverage has significantly gone down by 39.4% after their code changes."
0,There was a substantial amount of commits done in the first phase of the project but I don't see any commits in the second phase. This could very possibly be because the team might have completed the requirement in the first phase itself.
0,No new commits were made during the second round. The latest commit was on October 31st.
0,No new commits were committed for the second round. It was cleaned up 13 days ago.
1,There have been no new commits since the last round of submission. There seems to be some work pending since the last round for integrating the branch.
1,No new commits were made during 2nd round.
1,"No, the strange part is the code hasn't been committed during the second round. It is strange because they have surely seem to have achieved all their requirements to problems going by the wiki page so, why haven't they committed the new changes is the question."
1,"No, they seems did not commit again"
0,The code follows the general guidelines for standard RSpec practices and also keeps the DRY principle in check. It makes a good use of names to specify what each attribute is assigned for.
1,"The code follows good coding style, adheres to naming standards and is DRY.
However, the suggested changes since last round have not been implemented which emphasized on shortening the length of long functions create and view."
1,The code is well written. It follows DRY principle. It would have been better if more comments were added.
1,"Most of the updated code is well written. Some functions could have been shortened. For example, in the set_display_type function, instead of writing a 'when' statement for each of the options, you could have stored them in a hashmap and set display type to that value if it exists in the hashmap."
0,This is a code and project that has been honed into perfection. The team has shown due diligence and taken care of long and complicated functions and somewhat shaky coding style from the last submission. They have refactored the code to perfection thus fulfilling all their objectives.
1,"Not very good, some problems existing during the first round are still here."
1,The team needs to provide a list of sections including the test plan and unit test cases that would make it easy to refer to the pull request and the github code. They must also work on designing the wiki page making it easy to read and understand it.
1,"Not completely its lacking lot of informations, consider writing the code before and after the changes to explain the changes done"
1,"It was difficult at first to understand why they are doing what they are doing. I feel that the information is right there, it just needs better elaboration and description."
1,"The writeup states correctly the changes performed, but fails to provide a reasoning behind every change.
Suggestion:
You can include reasons behind choosing an approach, for atleast one refactoring code change"
1,The writeup should be written in a emore elaborative way clearly stating at the minimum - the problem statement; new implementation strategy; design principles; test plan and references.
1,It does not show any code or any thing related to the work they did
1,There is no mention about what work they did. The wiki page hasn't been properly formatted and the information is not adequate.
1,"No, the write up is a simple copy paste of sir's doc on the wiki page which half-heartedly states the problem statement in question. Also, what or how they have worked and approached the solution is not even mentioned. Difficult to follow any flow."
1,No explanation is given.
1,No they did not mention any design principles or patterns in their writeup.
1,The writeup does not have the Test Plan section. They need to include it by specifying the section that describes the pre conditions considered by the team while working on the refactor review on the different question types from the uiz feature.
1,"No, there is no test plan included in the review"
1,Couldn't find any test plan.
1,Writeup doesn't conatin the test plan section.
1,There is no mention about their Test Plan. The section has not been included in the wiki page as well.
1,No test plans has been explained. But the Git repo shows one test successful.
1,"Unfortunately, no mention of the word ""test plan"" has even taken place in their whole Wiki page. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository."
1,They don not have a test plan
1,The writeup can be improved to begin with a short description of the project backgound so that anyone reading the writeup can understand what the project is all about.
1,I think they have simply copied the text from the requirements document presented by the professor. The page is not well documented
1,"No, the team has not been diligent in specially making a section of ""what it does"" as the introductory section of the doc so as to make us understand the goals of the project. They have just copy pasted the problem statement on the wiki page in a single paragraph. Even, that statement seems to have been incompletely pasted in just a single paragraph. So, it highly unclear what they are doing. I had to open the projects assignment doc of the professor to try to make sense out of the motivation of the problem."
1,The write up does not show any detailed explanation of the project.
1,"No, their writeup is neither clear or adequate, which just contains a few lines without any explanation or introduction to the project. So i think their writeup is terrible."
1,Upon manually testing the author's work it is noticed that the functionalities have not been implemented to the full. The team did perform migration of the CRUD functionality for the Questionnaires from QuestionnairesController and removed large patches of if-case statements by placing it in the helper function in the apt model. This however has reduced their coverage.
1,Couldn't test manually as no information regarding the steps to take to test is provided.
0,Some of the common edge cases work as per expected
1,Cannot test the work as application link is not provided. They have not provided a screencast for working code
1,"No link to the deployed application is provided. Hence, cannot be tested manually."
0,Cant really know what exactly is completed.
0,The functionality does work. Some errors are visible as shown by Git.
1,Not possible to test as no way of testing has been given at all. No procedure to be even followed has been mentioned in the poorly constructed Wiki page. All that is possible is to try to infer whatever is possible through the pull request in which I have reason to believe as suggested by the code tester that multiple files are failing in the build stage itself.
1,The code contributed does not follow the test rule in that the tests are made using create instead of build. The code functions do not implement much function and does not follow the Ruby style guide. The team should focus on getting the tests running by following the DRY principle.
1,"(1)Functions are still long, save choice and save quizes are the top two, consider increasing more internal methods"
0,The code seemed ok to me.
1,"The functionalities relating to Questionnaire have been moved to Questionnaire from QuizQuestionnaire which is very helpful.
Suggestion:
1. You can try to create sub functions for code inside create and view, as they are really long functions"
0,The code follows Ruby standards and DRY principle.
0,I can see a file changed and the code in it looks to follow the concepts which needs to be followed
0,The project's purpose is to refactor the code. Hence the code has been separated into different files for better understanding.
0,Not really clear. Lines have been changed. No specific functions. But it shows good coding skills.
0,"1. Some Functions are of huge length and adequately structured with respect to the purpose in question, but I am assuming the complexity of the question requires so. 
2. All code has been suitably well put into the methods with their intended function and work cutout for them. 
3. No, the comments have been well placed and but are very strange and vague at some places suggesting an amateur approach. 
4. The code does follow the ruby style guidelines and is thorough in that regard. 
5. Nope, all code is somewhat consistent and vaguely to the point."
1,They did not offer any link to code of their project.
1,"The variables, methods and class names used do not justify the features performed and do not implement the desired functionality expected. Also, the code added does not improve the coverage of the files. The team should look towards using appropriate names and provide desired code segments to get a high coverage."
1,All the names and methods look reasonable but some of the function size is still long.
1,I feel that the writeup was incomplete and none of the code changes made have been explained. It is difficult to see what approach they took.
0,"The variable names look fine, methods names are also meaningful."
0,The test coverage on the contrary decreased
0,Decreased to 12%.
1,"Not only does the build fail with multiple errors, the overall coverage is shows a significant decrease instead of an increase which is a real cause of concern. Moreover, the number of commits even though impressive does include a lot of minimalistic changes which one does beg to question the necessity of. But that's still fine since, I am assuming that the complexity of the code may require so many commits. But still adding a line break as a commit? I am unsure if its a great way to go about it."
1,"Their methods name is too long such as ""#copy_questionnaire_details and #assign_instructor_id':"
1,The Test plan is not a part of the writeup. The team can improve upon this by following the general guidelines of writing the document. The test cases can be coherently designed following the Better Specs documentation. The team must have the test cases designed that span the required goals.
0,yes the functionality still holds good.
1,"They have not provided a descriptive test plan, however they have added rspec test cases for their code changes"
1,No tests have been discussed in the test plan.
1,"No tests were added. No test plan too. So, difficult to interpret"
1,No Test plan included in the submission.
0,One test case visible.
1,"As mentioned earlier, they have not considered testing at all at this point and hence, we are assuming that they are to implement testing at a further point in the project. Of course, mentioning an approach to the testing framework and how they would be going about it would have helped."
1,"The Travis CI test did not past. 
I did not find any test cases written.
Suggestion: Test cases should have been written as a part of the final deliverable."
1,"No, the build for the pull request does not pass. The build had 4 jobs, out of which 2 jobs passed successfully.
However, 2 build jobs have errors. First job failure is related to webdriver error for chrome where test fails.
Second job failure is related to NoMethodError for method []"
1,"The pull request did not pass Travis CI, but there were no conflicts."
1,"No, the build did not pass in Travis CI. several checks were failed but there was no conflict with the base branch."
1,The Travis CI test has been failed.
1,"Pull request is not accepted, also build did not pass Travis CI.
But the functionalities improved and accepted and working fine."
1,Travis test build have failed. Can write version compatible code
1,feature and controller test failing. Mentioned in the previous review as well. Travis Failing and issues with code climate as well
1,"Not able to merge.
Issues regarding Travis tests etc need to be resolved."
1,"I do not think the code should be deployed. The test cases are not yet written and there are a few code climate issues. Due to the lack of test cases, the Travis CI build has also failed. 
Suggestion: Once they are resolved the code can be deployed. There is one remaining issue, but that could be done in the next iteration."
1,"I think that the team has done a great work for the future team to pick up. They can improve it by adding comments for newly defined functions.
Although, the pull request build has not passed, after fixing the conflicts, the new team can readily work ahead on the remaining issues."
1,"I don't think this code is ready to be deployed due to the fact that I can't actually examine the functionality, nor can I see the actual repository this project was written in."
0,The approach seems to be correct and the writeup ready to be deployed.
0,This code can be deployed after solving the issues generated by Travis CI.
1,"Two issues resolved seem like working pretty well and can be deployed in production.
Third unresolved issue is a good start for future team to pick up."
0,Yes just a few test plans needed and the code can be deployed on production server.
1,"No,it should not deployed till the build is fixed. It is a good starting place for a future team to pick up"
0,"Yes, the code is written aptly and to the point. I don't see any issues."
0,The team has definitely resolved one issue. This could be a starting point for future teams.
0,"The write up is well written and explain the features that the team has implemented in a verbose manner. 
The writeup mentions solution description which gives a walk through about what steps were taken to implement the functionality. 
No suggestions."
1,"The write is well-organized and clear in its material.
The authors have improved the write-up by explaining what each newly defined functions work. and added code snippets wherever necessary. 
However, the test plan is still missing from the write-up."
1,The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand.
1,"The writeup thoroughly details the changes written in this project, but the first section seems like informally written reminders for the development team."
1,"The writeup was well written and easy to understand. However, it would have been better if some steps accompanied the screenshots as to what was happening in each screenshot. That would have made the writeup even easier to understand."
1,The content is good and explanatory but the writing styles needs to be improved as there is inconsistency in the font size and font type.
1,"Write up is written well and it is understandable.
Images are not in proportion and not of same size and hence wiki page does not look steady.
Team can work on image size and image description and manual test plan in more detail."
0,The writeup is very explanatory with all the screenshots attached which helps in better understanding
1,It looks decent. The screenshots should be with the issue write up and not at the end
0,The writeup is great and descriptive. I could find all the info I needed.
1,Unable to find any difference after the first review although the team had to explain about some issues.
1,"The project was not deployed. The project should have been deployed.
However, the video that the team uploaded shows the 2 functionalities that they have implemented. And they work as intended.
Suggestion: One feature was not implemented (3rd issue) and should have been done as a part of the deliverable. And the project should have been deployed."
1,"The team has uploaded manual testing screencast to show fixes for 2 out of 3 issues to be fixed, and everything works as expected. The audio in the screencast helps clearly understand the before and after scenarios.
However, there are no corresponding test cases to test the fixes. No changes have been done to the spec file."
1,The team only implemented 2/3 parts of the project and has not created the tests for the same. The CI build is also failing for the pull request. The functionalities implemented are working as expected.
0,"The UI seems to work as it should, at least from the writeup."
0,"Manual testing could not be performed due to lack of project deployment. But, the screencasts show that everything works fine."
0,"2 Issues are resolved and when checked from UI, features are working as expected.
Seems like no code refactoring is required."
1,No UI provided but videos are uploaded to demonstrate the functionality
0,No link provided but the videos shows that everything is working well.
1,"On checking the videos, the functionality seems to be working fine. I haven't been able to manually test it."
1,The team might has out 2 issues to be resolved.
1,"The team did not add any test cases. 
The coverage did not increase as a result of that. 
Suggestion: Unit test cases should have been written as a part of the final deliverable."
1,"No new tests have been added to the project.
Commits for the first round had increased the code coverage by .0004 which was good, but the code coverage has decreased by 2.9% as per the latest build report."
1,The team has not added any test case for the implementation. The overall test coverage has decreased.
1,"The test coverage decreased, but I'm not really worried about that because that seems to be a common theme with many of the refactoring projects."
1,No test cases were added and the coverage decreased.  The overall coverage decreased (-2.9%) to 33.88%.
1,The test coverage has decreased by 2%.
1,No test plan added and no test cases written in code as well as in wiki.
1,No test plans added and the coverage decreased in the pull request. Test plans are not needed for the project
1,I don't see any test cases added. The overall coverage has decreased by 2.99% to 33.88%.
1,"No new test were added and existing test are failing.
AssignmentsController#update when params has key :assignment_form when the timezone preference of current user is not nil and assignment form updates attributes successfully shows an error message and redirects to assignments#edit page
 Failure/Error: if current_round != "" "" && session[:rubrics_by_round][current_round] != questionnaire[""questionnaire_id""]"
1,"No additional commits were found considering one issue was still left to be implemented.
Suggestion: There should have been some commits present pertaining to test cases or at least the 3rd issue that was not implemented."
1,"Yes, there is one commit during round 2, and it fixed trivial rubcop issues related to indentation. 
Two suggestions of adding meaningful comments for tree_display function in tree_display.jsx and second on having a single copy of RubricArray for two functions were not implemented."
1,There was one new commit during the second round.
1,"I can't actually see this team's repository because they linked the expertiza/expertiza pull request, but it doesn't look like new code was committed in the second round."
1,"Can not see new commits after last submission.
2 Issues are resolved out of 3 issues given in problem statement."
0,Few commits made in 2nd round
0,Last commit was on Nov 6
0,"Yes, code has been committed in round 2."
1,One new commit after first review.
0,"Overall the code is written really well.
Snake casing has been thoroughly followed and in case of JavaScript, the camel casing is followed. 
No additional suggestions."
1,"The code is well-written and there are no bad names or long functions.
The coding style is also pertaining to the Ruby standards.
Although it would be good if they could work in making the code more 'DRY' by making suggested changes to the code."
1,The code was already well-written . The team did a great work in following coding best practices. The team should have include code comments to make the code easier to understand.
1,"I can't examine the code because a link to the repository is not actually given in the project, and when I navigate to their repository, I can't figure out which branch is the correct one; however, from the details of the writeup, it seems as though the code is well written."
0,The code seemed to be well-written and properly commented. Comments made it very easy to understand the code.
1,Comments in the code would have been helpful to understand the flow.
1,"Code is written well without dead or complicated code.
DRY principle is followed.
I can not see any changes or commits in code after last submission."
0,The code is well written and has proper functions to handle each action. Not too long functions and names are aptly defined
1,Looks good. Function name componentDidMount is a bit confusing.
0,The code is well written and understandable.
1,No updates after first review.
1,The implementation details have been mentioned in the writeup clearly. Information about what every function does has been explained in an eloquent manner.
1,"The writeup explains the problem statement well, but fails to explain the approach and just have pasted their code. It also fails to have a reasoning behind the approach they chose.
Suggestion:
1. The author can describe how they came up with an approach starting from analyzing the issue. This will remarkably improve the writeup.
2. The author can talk about atleast one more approach to fix the solution and explain why they chose a particular approach for implementation."
1,"Yes, the writeup seemed to include everything that was required. Code was also attached along with the screenshots and steps."
1,"Writeup is written well.
No design principle or pattern involved, But the approach taken is explained in detail, step by step.  
Team could add references and links."
1,What and how explained well but they explain the why behind their actions a bit more.
0,"Issue 1 under solutions tab is actually the third point discussed in the Fixes Required.It could be discussed as Issue 3 rather Issue 1 for better clarity.
Only the solution for one issue is discussed. (?)
The discussed solution is again well-defined with adequate screenshots."
1,I did not find any test plan in the documentation.
1,No. there is no test plan section included
1,The test plan column is missing from the documentation
0,The test plan seems to be complete enough. No additional pre-conditions and edge cases are required.
1,"I could not see any test plan.
Team could work on writing test plan and implementing the same for the issues resolved.
Also where team is failing to implement some functionality, as future scope, they can try design the solution and also test cases for the same,"
1,Test plan not included
1,The writeup does not have a test plan.
1,The write up is clear and concise. The details about the functionalities are adequately explained.
1,"The writeup is lucid enough to explain the details of the issue and how the system works after fixing it.
Suggestion:
1. The authors can add a section on testing, explaining about how the issue fix can be tested.
2. They can improve the readability by mentioning issue numbers (from document issued by the prof.) on the write-up. It will save time of the reader to go through the document and map which issue has been fixed."
1,"The wiki is well written and contains all required information for issue 1. The documentation for other issues still needs to be included. Apart from this , the team did a great work."
1,The writeup was written well enough to understand. Screenshots were also attached along with the steps making the documentation better. Can definitely understand what project does and how it is done.
1,"Writeup is written well. Understandable and clean explanation.
Team has explained the problem statement and issues well with good amount of pictures.
Team can improve on formatting."
0,Issues explained properly and change as well. The modifications are demonstrated using screenshots which helps in better understanding.
0,Everything is explained in detail
1,"The Fixes Required part has been explained well with the cause of the issues.
But, more light could be shed on what the formative and summative rubrics are."
1,"The code has not been deployed. But according to the video, the workflow has been demonstrated properly. Out of the 3 issues, 2 have been resolved. One is not done."
1,"After manual testing, issue 1 seems to be fixed and reflects the changes properly.
Nothing seems to be done to fix issues 2 and 3 of the problem statement.
Suggestion:
1. You can include any approach or design of functions to resolve remaining 2 issues in the writeup"
1,The team has only fixed one issue related to selection of questionnaires according to the video. The other part of the problem statement is missing. The application could not be tested as the application is not deployed.
0,The manual testing done in the screencast seems fine. The features work correctly
1,"1. Clicking on action from manage menu correctly opens the corresponding tab.
   Clicking on any manage sub menu action, correctly loads the corresponding rubric.
2. Whenever is rubric is changes, user is being asked for confirmation.
   On conformation from user, corresponding  review response is deleted and email is being sent to user.
   When user declined the confirmation, rubric is set back to original one.
3. Issue#1173 does not seem to be resolved."
0,Not deployed but the video provided which includes the demonstration of the fix.
0,They have not provided a link for the deployed so cannot test anything but they have provided a video and according to that everything seems to be working
1,No information on two other issues that need to be covered.
0,The code is well written. The function length is also well within the required bounds. Comments adequately convey the info about the functionality that is implemented.
1,"The code is nicely written
3 More comments needed
5 Not DRY in one place (rubric array definition)
 
Suggestion:
 
1. Simply define a getRubricArray function to return the rubric array wherever required."
0,"none of the functions are too long
 
could find changes where DRY principle was violated
 
the code follows ruby convention and guidelines
 
comments were included wherever necessary. the code is easy to follow.
 
Good Job!"
0,Code seemed to follow the ruby style guide
0,"1. Functions and logic are written properly without long functions and dead or messy code.
2. No . Team has provide good modularization. No need to extract code further into more functions.
3. Code was understandable and easy to understand.
4. Code does follow ruby style guidelines.
5. Code and packages follow DRY principle."
0,Methods are not too long and each function is performed in the appropriate method
0,3
1,"For the discussed solution, the code does not smell or does not need to have separate methods.
The commits show the contributions by only one author."
0,"The naming conventions are properly followed. In case of Ruby, snake case has been properly used and in case of JavaScript code, camel case is used."
1,"The code is well written and very understandable
Newly defined function parameter name is self-explanatory
Suggestion:
1. Rubric Array can be declared outside the function, so as to follow DRY principle. 
2. Meaningful comments can be included for the function definition in tree_display.jsx, explaining what does the tree_display represent"
0,Function and variable names seemed to be appropriate enough. The names suggested the functionality. No suggestion is needed.
0,"The newly added variable, methods, class names are written properly.
The names indicates the functionality implemented by respective names."
0,method names and variables are used aptly which helps in easy understanding
0,Ruby coding practice seem to be fine. Class and variable names are apt.
1,"Some checks fail in the build. But I feel that few checks are much intricate (one failed because of a score of 15.07/15) and can be neglected.
The TRAVIS CI Build error was faced by many teams too.
The namings are not unclear or ambiguous.
goto_controller('Questionnaires','3') goto_controller('Review','3')"
1,No test plan or the test cases.
1,No new test cases have been added to test the newly defined functions.
1,The test cases were not created.
0,All test cases seem to be passed.
1,"Could not see test plan as well as automated test cases are not included
Team could work upon adding test cases to test the functionalities. That would make the issue resolution more robust."
1,"No,test plan has not been implemented but I don't think a test plan is required for their functionalities/"
1,The writeup does not have a test plan or any related info on why it is not covered.
1,I don't see tests for the logout button on the menu.
1,"As its a test project, deployment to production may not be applicable. The code can be merged, but i would suggest few changes to DRY the code as the test seems slow, which is a scope for improvement."
1,"No significant improvements to the write up. It still doesnt explain clearly the functionality of menu.rb and the need for different tests. There is code provided in the write-up, which is more reductant than informative. No future scope or enhancements documented. They have provided all necessary links and coverage data."
1,Yes the coverage is good but the test scenarios are fairly straightforward and no elegant stubs or mocks used. The code isnt DRY
1,"Yes the project is a test project for menu.rb. The code coverage has increased to 100%. Though the code covers all lines, i feel edge cases are not covered well."
1,"There has been few code climate issues reported, but few of travis tests has failed. mot all changes has been verified successfully"
0,"Yes, there has been one commit in round 2, rectifying the bad name used"
0,"The team has corrected a single bad name used in the tests. There has been no change done to DRY the code yet. there test as mentioned earlier has few segments repeated throughout each test. For ex, the instantiation of Menu object. There has been no comments added for the code yet."
1,"While the test coverage has increased to 100%, the team has made some changes to ""schema.rb"" file, this might cause a problem on other dependent modules. Hence, I feel it is risky to deploy it on production.
The project doesn't need to be started from scratch by the next team."
1,"The introduction to the scope of the project has been written neatly, but I feel the test plan should have been a little more elaborative, a short description of the tests would be nice to have."
0,"Yes, the test covers all the scenarios, including testing values of variables in the menu node and null case scenarios."
0,"Yes, the team has added plenty of tests. The test coverage increased to 100% whereas the overall coverage has increased by 11.4%"
0,"No, the pull request didn't pass the Travis CI build, but it doesn't have any conflicts with the base branch."
0,"Yes, the team has made one commit during the second round. They updated an ambiguous variable name."
0,The code written follows the ruby on rails best practices.
1,"The wirteup is pretty good. It gives the test plan and all the test cases. Also, there is explanation of the test process and logic. Just one minor problem. 
The 29 tests provide 100% coverage of the lines in menu.rb. Before the project the coverage was only
It is an incomplete sentence."
0,Yes the coverage is 100% already.
1,I'm afraid that the build failed and there are code climate issues.
0,There is one new commit in round 2.
0,Not deployed
0,Did not pass Travis CI
0,nicely written test cases
0,"It improves the test coverage, So once the Travis tests pass, It is ready to be merged with the Master branch. However no production deployment is applicable for test coverage improvement."
0,It is very well documented. No changes were required even during the first review.
0,No UI or functional changes are applicable. All the 29 tests run successfully
0,It is a testing project. The overall test coverage has improved. The tests thoroughly test the menu-bar and the sub-tress of menu bar(sub-menu options) as per the requirements.
0,Travis tests have failed. No conflicts. The overall test coverage has improved.
0,Yes. Variable name changes suggestion was incorporated.
1,"I had suggested changing the ambiguous or bad variable like temp, temp1. These changes have been incorporated. However comments missing. Adding these will improve the readability of the code and make it easy to refactor at a later stage as per requirements"
1,"The test plan should have come before the implementation details. I gave this suggestion in my previous review as well. Still, the documentation is well written overall. It's just a puzzling choice to put the test plan near the end."
0,"The coverage was already at 100%, but they did update it to pass the build."
0,The code is quite good.
0,The write up is still good.
0,The video makes it clear that the tests work and are covering all aspects necessary.
0,All necessary code is passing the build.
0,"A small change was made, but there wasn't a need for drastic additions."
0,"All code is good, a variable name was even improved during the second round."
1,The write up is good overall. I believe there could be more explanation or discussion into test cases not included in the design but otherwise a good wiki.
0,No new test cases were added from the previous submit. Test cases already had full coverage so there was no need for additional testing. I was unsure how to answer this question as the rubric says any new test cases added.
1,"Currently your team have 4 code climate issues that denote code redundancy as stated in the code comment above. Best just to bring those statements out to keep it as dry as possible. From what I can tell, none of the pull requests pass these requirements including my own teams so I am not sure what is the cause of this but I guess no one will be getting all the stars on this questions :)"
1,"The code is visually stunning. I am a great fan of the readibility. There are some instances of redundancy in the #controller_action / #site controller tests. Also in the #get_item/#get_menu. Would be easy to pull those out into a begin block. Otherwise, very lovely."
0,Neat code and well established form of the test.
0,All variable names are reasonable and easy to understand.
1,"The whole wiki page is complete and neat, while it might be easier to understand if they reorder the test plan with other parts of the page."
0,Authors explain the test destination vividly.
0,Their tests are very straight-forward and can be extended to test few edge cases
0,yes and all cases pass
1,"1) No, they have modularized well.
2) No
3) They could have provided more comments on tests where they set nodes at few places.
4) They could have used factories more extensively, due to various mock data they might have needed to cover different inputs
5) Their code can be more DRY, as they seem to repeat instantiations in all places"
0,"No, all method names and describe provided are apt and to the point"
1,"There could have been other tests with different inputs tried on the setup, initialize and select methods. the pre-conditions could have been more eloborate."
1,They could have also documented their design approach if any and also use  of mocks and stubs. Their test intentions could have been more detailed
0,"The writeup has documented all the changes they have done, but could have been more elaborative on the exact functionality of menu.rb."
0,Yes most of the edge cases is checked.
0,All of the above 5 criteria are met.
0,All the scenarios are covered. Even the branch cases
0,The procedure and intention for writing the test cases is clearly mentioned
0,"The write up is very clear, methods and test case are explained in a neat way"
0,"The test plan looks complete enough, they have covered most of the cases. The test coverage has increased a little bit."
0,They have explained the tests that needed to be implemented to verify the working of the functionality.
0,The write-up explains the tasks adequately enough for a user to understand the expected outcome.
0,Tried to cover maximum test cases and explained well in the document with the coverage and video
0,The tests run successfully even when cloned and run in development environment on VCL.
0,"Yes , all 29 test cases have been automated. The youtube video describes it perfectly"
0,Rspec code looks good.Proper comments and good variable name usage are 2 things i will suggest to improve. Very good work overall.
1,"Does not apply much.But instead of using names like temp and temp 1, a more significant name which is self explanatory of its content will be useful."
0,very nicely articulated description of all 29  testcases.
1,"This doesn't apply here much as its just writing testcases. However some of the tests documented in Menu like Mean with role and without role are confusing. I had to look through the entire doc to figure out why is that written that way. It could be better to have comments as to why a particular test is written , what does it test and why is the expected output the way it is."
0,"Very nicely written document with test-plan which explains each test case , why it is written and what it tests n simple English language."
0,"All tests pass, and 100% coverage was attained."
0,The pseudo-code test plan does a good job of explaining the functionality of the tests without being clogged up by implementation details. I do suggest putting it closer to the top of the wiki page though.
0,The write-up is descriptive and shows code from the _spec file paired with explanation.
0,Nothing to manually test.
0,All tests designed were to be automated.
0,"All code is formatted well and neatly, with clear functionality."
0,Everything is described clearly and the functionality added is easy to understand.
0,"The authors seem to have considered most edge cases and pre-conditions. The section isn't explicitly named 'Test Plan', but the necessary content is there."
0,The code is written very neat and follows suggest guidelines. Authors have done a great job with the DRY principle and bringing out statements that would have been otherwise repetitive in the test cases.
0,"Variable names and test cases are name appropriately. Test cases context, describe, and it statements are clear as to the division and purpose."
0,"There is no Test Plan section at this time. However, the authors did include some discussion of edge cases and the fact that the initialize function required testing of known success case and potential failure. I think that this is sufficient without the inclusion of a Test Plan section. I would suggest that since this rubric calls for the section to just rearrange the content of your current page. Also, include the additional edge cases that you have already tested for in the other functions possibly with some specific examples. This will allow for a more thorough Test Plan section."
1,"The testing of initialize is very well described with descriptions of how and why the tests were written in that particular fashion. However, all other tests are not discussed. When looking at the github it seems that there were many more tests that were not elaborated upon. The test descriptions were included at the bottom of the page but without explanation of implementation or purpose. It would be helpful to include more of the test cases. If anything, it would be a good idea to discuss them without the code inclusion like that of initialize because that section of the wiki is very well presented."
0,They have written proper test cases that check both positives and negatives.
0,"The user model is tested, as are multiple controllers."
1,"The User model and controller has been tested.
It does not test whether the system handles the case that a user uses the same email to register twice."
0,Test cases for the user have been implemented.
0,The edge cases are covered. The readme file also details how these cases are handled.
1,HH could not add inquiry
0,All of these are well handled and documented in the readme. Good work.
1,When user is deleted the inquiry remains.
0,All feedback has been fixed. No pending issues.
1,"search feature is not working.
Also, I didn't find any way to add pictures of the new houses."
1,"Fixed problems:
Users can edit their name now.
Admin/Realtors can create, select(only one) and change companies. They can edit their own company's information.
Admin/Realtors can view/list houses and edit/destroy houses that belongs to his/her company.
Realtors can switch roles to house hunter.
House hunters can view/add companies info.
Inquiries functionality is implemented.
Issues:
Houses do not show if they have basement or not.
After an inquiry is sent, the app redirects to an error page.
Looks like house hunters can add company/houses too. These tasks should have been restricted."
1,search is not working  in realtor. I did not see any Rspec in spec folder. while signing up it takes password less than length 6. when realtor adds the property it does not appear in property list.
1,"Image not showing with listed houses.
Admin cannot view list of potential buyers.
House Hunter also asked for company.
House Hunter has the ability to add houses and list companies. This should not happen."
0,The entity relationships have been established properly. They have also implemented cascading delete.
0,All of the relationships are handled properly in the code.
0,House hunter and Realtor can easily switch accounts.
0,This application handles 1-n and n-n relationships properly. Company-realtor has 1-n relationship in the mapping table. I could not find any problem related to relationships.
1,There is a one-to-many relationship between User and Company. A realtor model is not applied.
0,Mapping checks out.
0,They have actively committed code during the project duration including Round 2.
0,This team kept committing through the end of the project.
0,Yes the team kept on submitting their changes throughout their project. There are a total of 110 commits from the team and they still committed changes in round 2. They have made 28 commits int the week of Oct 7 which is after the first round. They have committed the changes with proper messages also.
0,Yes the number of commits have increased upto 110 commits.
0,Really good commit record with good comments as to what was changed.
0,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Also all team mates seemed to have contributed equally.
0,It's good to have the search logic in the model as opposed to the controller.
0,"This project is very well organized, and the code style is great."
0,"The code has been written in a very clean and readable way. It is very legible and properly indented. I could not find and issues with the coding. There is no bad naming in this project and is neatly organised with instructions. One method handles only one specific task. There are function calls for multiple tasks. Yes, adding the user to the house's potential buyers is done by a separate method call. On the whole, the code quality is legit and I could not spot any long methods or too many nested blocks."
1,"Sparse on comments describing functionality. Otherewise overall code quality is good, I did not see any glaring issues."
0,Code written well with all DRY principles. Methods are simple and clean. Every method contains functions specific functionalities. Methods are simple and clean. Every method contains functions specific functionalities.
0,Code commit frequency is good.
0,There are many commits which are divided almost equally between all teammmates
0,Team was active thoughout the process
0,extensive testing was done
1,the realtor and house hunter controllers work as desired in most cases though there are some cases which need to be addressed. There is a need to validate the real estate creation form.
1,"The team has added functionality for login through google sign-in, but I couldn't verify it's working."
1,"They tested at least one controller, but none of the models."
0,Controller has been tested
1,"UI is nicely done. 
There are a few things that can be improved: 
1. Clear all / list all houses field once a search parameter has been given
2. Do not show receiver object id in inquiries. Maybe something more useful."
1,"nice user interface, good use layouts. but unable to log in as admin,"
1,The UI is straight forward and easy to use. The implementation of the menu bar makes it look better. Though there is a scope for improvement. The admin link in the Readme file is not working.
1,The deployed link is not accessible. The readme file describes the process for just admin login but not for the consequent steps.
1,"The UI is mostly easy to use, but the README is nearly undocumented."
1,"The overall UI is good, but there can be some improvements made on the admin part of the app.
We need to change the link manually to end up at the admin dashboard."
0,The code is written really well.
0,"Very good structure, readable and names are very relevant to the functionality"
0,The code is neat and precise with proper structure and comments
0,"The ruby source code appears to follow RoR conventions, and uses a few Rails associations. The directory names and project structure appear to follow good RoR MVC conventions. Source code is organized and uncluttered too."
0,Most of the practices have been followed
1,"Though they have detailed their approach on DRY, they haven't documented the core issue beyond non UTF-8 not accepted. Its hard to follow their scope as only review or entire expertiza use, as the table alteration is done as a whole"
0,"It explains their approach and issues they encountered like latin format, storing html tags and how they fixed it."
0,"Yes, team has explained why they worked in certain way."
1,"Yes, it does explain but could have added more details to make it clear."
1,The folders/binary files in the drive cannot be played. Can you upload the video on YouTube so that it is easy for everyone?
0,"Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have not used any design principles or patterns."
0,I understood the write-up pretty well. I also liked to way the fix was implemented
1,"The write up does not mention any patterns if used, and could not identify the pattern from the code as they have made changes using the database and not any function"
1,No there is no test plan included
1,"Testing is done manually and there is mention of automated tests in the wiki but no files are seen.
It's better to provide all links like github code, testing videos and wiki while submitting on expertiza."
0,They have included test plan but few examples and screenshot of their work would have been a plus point.
1,Test plan is manual.
0,Testing was not part of the requirements. Team did manual testing.
0,I think the test-plan is complete and most of the edge cases are covered.
0,"Yes it explains with clarity the issue at hand, UTF-8 only support & how that causes trouble. Also improper formatting of HTML tags."
0,Enough details has been provided.
0,"The write up is detailed. All details are mentioned including files involved, solution as well as test plan and how they have done or implemented the solution. The code snippets also gives good idea of the project work. The first part gives detailed background of the project."
0,The written explanation is good. Add few screenshots of the change to be able to understand the changes done visually.
0,Very precise write-up with nice details on how the fixes were applied.
1,The writeup does not explain the changes. Also the wiki page is not elaborative about the changes made
1,No work shown.
1,"http://152.46.18.195:8080
  is not working.
Also, the video is not running, Please upload in youtube."
1,"Yes, the features which have been done till now work well."
0,Everything works fine according to me.
1,Cannot test the code as the application is not opening and the videos uploaded are binary files.
1,Code had a few guideline misses which was noted and suggested by the automated tool on pull request.
0,Follows ruby standard codes. Already implemented functions are changed and have stayed away from adding too many functionalities.
0,I think the code looks good and very much follows the Ruby Style Guide. The code also is DRY. It looks well written and does not any changes.
1,"You could have made the empty method end on one line.
I think _args could be named args."
0,The naming conventions are followed as per standards
1,"Function, variable names are ok but there were ruby coding style issues like not using elsif blocks, not keeping code concise and not following ruby syntax. 
Scripts for converting non UTF-8 files is a good approach."
1,"One fail 
Two successful. 
Over all coverage increase is 9.9%."
1,"Please make sure code like puts X is avoided. Remove them and commit the code again.
Builds are failing. See the Travis CI build details and code climate errors and fix them"
0,Not many functions defined. Only database changes made and inbuilt function used.
1,Testing plan didn't outline what the automated tests were or how it is done. The video showed the features being fixed. Also the hosted expertiza site was not working.
1,No test cases is included in test plan.
1,Test plan is manual. No RSPEC files included.
1,Test cases are not part of requirement spec.
1,They are done with one of the Test Plan scenarios. Second one is yet to be done.
0,"After working through several edge case side effects, by hand, up hill, both ways, it looks like all of their bases are covered and edge cases satisfied."
0,"over 9000! I mean 90%!
Great job testing Participant y'all!"
0,"So fresh and so clean, clean!
This code is too neat to even be dry.
Too hot to touch.
I'm just still super impressed by the wiki and the video."
0,They even wrote down their plan to accomplish the project! I love it.
0,All the cases discussed in the test plan have been implemented. Well done in achieving 100% test coverage and passing all the tests.
0,This was a testing project and the mocked objects were appropriate. The code is DRY. There is no redundancy in the code.
0,"Names for variables, classes, and method are properly named and make sense."
1,"The test plan section is really well written. However, pre-conditions, edge cases are not very well discussed and talked about.
I would suggest the team to add these into the wiki as well."
0,"For every tested method, they explain what they did and why they did it."
0,looks like edge cases and invalid inputs are handled.
0,"It is a testing task, I assume there is not any design needed."
0,"The wiki page provides clear details about the work, and very easy to understand."
0,The features work as intended
0,YES.
0,They kept working on it and did really impressive.
0,The test plan look complete enough.
0,"Since coverage is 100% and the code looks good to me, I am assuming it works fine."
1,They haven't added any test plan but the test method in documentation shows that all test cases has been checked properly and coverage is also 100%.
0,Code seems to be concise and well written.
0,It looks great. Everything is followed.
0,Yes they have explained everything.
1,"Under 'tested methods' they have explained everything really nicely. The video is just to long, 22 minutes. You have have made it short."
1,"Tried to run the RSPEC test by copying the _spec.rb file and enusred that the Factory method is inserted, I got an error in 2 examples
 
Participant#email sends an email to the participant     Failure/Error: assignment = Assignment.find_by(id: self.assignment_id)
Participant#score Get participant score within a round     Failure/Error: scores[questionnaire_symbol][:scores] = Answer.compute_scores(scores[questionnaire_symbol][:assessments], questions[questionnaire_symbol])"
1,Can't find the Pull Request
1,Team could have given more description on what is the Participant.rb is doing
0,Yes and it all passes too.
0,All the code is in a single file as it tests a single model and it seems to cover it extensively. It also looks like there's no DRY issues.
1,"Didn't find any pull request.
Code coverage has increased as more tests are written and it is one of the required outcomes.
Wiki states that 100% coverage is achieved and the same is demonstrated in the video link provided."
0,The plan looks good and it covers a lot of cases.
0,It explains clearly what tests are missing and how the coverage is increased.
0,"Yes, it is easy understand that it is a testing project and how it is done."
0,Running the code manually resulted in the 100% coverage of the object under test.
0,"Every test case that is provided on the wiki page is part of the automated test suite.
There are no cases of failing tests."
1,The code is mostly clear and easy to follow. Test blocks are succinct and contain one assertion per block. One exception is the #score method. It could be improved by decomposition. The code for set up could be extracted into a separate before(:each) block and multiple 'it' statements could be used for testing expectations.
1,"Most of the source code is following standard Ruby practices. However, some cases could be improved.
There is a number of variable names that are concatenated with numbers for example user1, user2 etc.
While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. Moreover, indentation needs to be fixed to improve code readability."
0,"The test plan is comprehensive and fully covers all the methods and cases that are part of the object under test.
Running the test suite yields 100% overall coverage."
1,"The authors mostly focus on how they did what they did, i.e. inner workings of each test suite.
Little to no discussion is provided on the overall decisions pertaining to design principles and patterns that have been utilized in this project.
For example, there are no instances of before(:each) blocks in the source code. This decision could be discussed and clarified in the wiki page."
1,yes all the test written passes. They could have written a test to check if self[:handle] is returned if no nil parameter is sent
0,yes they have automated test and all of them pass
1,"1) No all functions are reasonably long if not too short.
2) No all methods seem about right
3) no but the team could have provided some comments in the score test function, as multiple expects are included
4) The code follows ruby guidelines and they used factories efficiently
5) Yes the code is DRY, they have used after each method to achieve it"
0,Yes there is no unreasonable function names and all method name are suggestive and apt
0,"Yes they have come up with all possible inputs, edge cases and wrong data entries to check the system behaviour is not faulty"
0,They team has thought through efficiently to use design options that avoid test reruns and to dry out some mocks settings
0,"Yes, the team has efficiently detailed all the details about the projects and the need for their changes to providing code of their changes. They have also attached coverage and test run screen shots for references."
1,Spec needs to be fixed before merge.
0,"The code is ready to be deployed onto the production server and in fact, the project was even partially merged."
1,"1) Yes, just could not check the mailing functionality.
2) Also the test coverage needs to be improved."
1,A few changes to functions and their declaration have to be made to make the code production ready
0,it is good starting place for future team to pickup.
0,The write-up is good and it clearly explains what each portion of the changed code is intended for.
1,"1) The write-up is comprehensive and clearly explained.
2) Should explain the test cases in more detail."
0,The features work as intended and the emails are sent to the concerned party.
0,"The project is about improving email notifications. Yes, it works as intended.
Screenshots of the code and changes made have been clearly described. The tests cover all the scenarios."
1,The basic functionalities are working as mentioned in the write-up. Refactoring the code would hamper a few functionalities as there are multiple instances where a single function is performing different actions
0,ui works as intended.
1,"Overall coverage decreased (-28.6%) to 8.18%. The team did not add test cases that covers the scope of this project. Could have thoroughly tested with test cases.
Also could have worked upon increasing test coverage."
1,Lots of test plans are added. The coverage decreased for the plans added. The test plan covers the basic functionality and not the edge cases
0,sufficient test cases added.
0,Yes lot of code has been checked in most oct 31. Good work
0,The code was committed frequently during the second round.
0,yes new commits were added during the second round.
0,Few commits can be seen during 2nd phase. Mostly are for test plans.
0,new code was comitted.
1,"Code looks okay, changes suggested have not been implemented. I wanted to see more comments on ""why"" this is has been done, which is missing. 
Also strings checks for str != '' are still used and not .empty"
1,"The code was well written and looks dry. However, a few comments could be added to make the code more understandable."
1,The git link to the code repository is not provided.
0,The code is well modularized and appropriate names are used for methods.
1,drying is possible
1,I still see some lint issues and commented-out code. The code looked fairly DRY and compliant with standard Ruby style and looks that way still.
1,"Yes authors have an details about code changes that they have done and why they have done. I would have liked more emphasis on ""why"""
1,"More of what is done is explained. Also, steps to manually test the instance could have been included."
0,Yes the writeup mentions why the authors did the work the way they did it by clearly posting screenshots of the code modifications done by them.
1,Problem is well defined but the authors have listed 3 issues that need to be fixed but they have only provided 2 links in the problem statement. It will be nice if they can give the link to the third as well.
0,Write up is easy to understand and follow.
0,The writeup is good and it clearly meantions the issues to be fixed in the problem statement and the code modified is also displayed.
0,Wiki page is clearly and neatly written. I could understand what the project does. Writeup also has code snippets which has been modified.
0,The write up is well made!
0,the writeup is understandable.
0,Workflows worked properly when I tried.
0,Basic functionalities working
1,The code is appropriate but additional comments would make the code much more readable
0,"1. Functions are of appropriate length
2. Codes are in appropriate methods
3. Code is very well commented.
Overall, great work. Clearly Understandable."
0,The names seem to be appropriate to their functionality.
0,"The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality."
0,Code is good enough.
0,"Methods, names etc are used according to the functionality. As mentioned earlier half the code changes are explained."
0,The build successfully passes Travis CI.
1,The most recent Travis build was run 2 days ago and the build log says that it has failed.
1,"Yes, passed Travis CI. Only one code climate issue"
1,Not really. They did not pass.
0,"Yes, it passed all the pull requests."
0,"As explained in the video, the build seems to work fine."
1,"The given source code is ready for deployment. The object under test is fully covered and all of the test cases are implemented correctly. The build successfully passes Travis CI.
The future team will have no problems in picking up from here.
However, there is a room for further improvement when it comes to simplifying several test cases, especially the '.final_versions_from_reviewer' block. Moreover, 'xit' blocks need to be removed because the final version should not contain any tests that are in the pending state."
1,"There is only 1 issue stated in the Code climate regarding code refactoring. If that is done, this code can be merged."
1,All is good. Only one code climate issue needs to be fixed before complete.
1,"Most of them are good, but some edge cases should be considered."
0,"Yes, for production code itself is perfect."
1,"The code seems good enough to proceed, but with few more test runs as I can see alot of code added."
1,"The team has improved the writeup since the 1st round. The 1st round version consisted of the copied code from review_response_map.rb and review_response_map_spec.rb files.
This version clearly defines each test case and in some instances elaborates on the inner workings of the blocks for example "".import"" Method discussion.
However, design principles and patterns that were used in this project are still missing from the writeup. 
One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite."
1,Still a lot of code on the writeup page.
0,The document is well written with all the required details.
1,More details about the test cases can be given in the write up for a better understanding.
1,"Some parts of the writeup are not includeed, such as test plan."
0,great writeup.
1,"The writeup has  covered nearly everything we need. all the function details are in the writeup, as welll as each function.
However, I think there's too much code and not enough textual explanation."
1,"The write up has a lot of code in it, which does not show up what are the changes exactly made.
It would have been better to put the links to the git files where the code changes are made for good comparisons.
Also, with this the wiki size would have reduce."
0,This is a testing project. The tests have covered all the scenarios possible.
1,"The features work as per the given instructions.
Though there seems to be more scope for extra test cases."
0,The team did a great job in increasing the test coverage to 100%.
1,"The test coverage on the diff in this pull request is 100.0% (50% is the threshold).
This pull request will bring the total coverage in the repository to 28.7% (-19.0% change). ---- seems like the coverage was reduced. Need to add some test cases to increase the coverage.
The above reason is why I have given 4. But I would definitely consider this as well ---- 

Overall coverage increased (+11.0%) to 47.72%"
0,100 % coverage achieved. Great work!
0,"Yes, they have added some test cases, and coverage increased."
0,100 percent coverage.
0,The second commit is perfect. it got perfect coverage. But it seems that the 100% coverage was so since the first round. But the new commited code as better code style and no more indentation issue
1,"The command to run the test cases is given in the wiki.
Better thing would have been to provide the screenshots of the test cases and git links to the code to make the wiki more concise and well explained."
1,"The number of commits that are made after the 1st round is impressive.
The team has made a significant progress during the 2nd round, however I would suggest using more descriptive names for the commits so that it becomes easier for the reader to refer to them in the future."
0,"Yes, according to the commit record, they have commit new code during the 2nd round."
0,"yes, new code committed during the second round."
0,"Yes, there's new commits."
1,"The source code is mostly written in a coherent way and is straightforward to follow. 
The 'context' blocks are extensively used which increases the project documentation.
The commented chunks of code blocks that were present in the 1st round are mostly removed. There are still a few instances left and I would suggest to remove them because they reduce the overall readability.
I would also suggest to decompose the 'it' block inside the '.final_versions_from_reviewer' by moving the common setup to a before(:each) block and spreading the assertions across several 'it' statements. 
Another improvement would be to remove the 'xit' code blocks because they only increase the clutter and do not add any value to the code. Adding one comment explaining why the blocks are no longer necessary would do the job."
0,Well written code.
0,"Yes, through their commit record, I have seen some improvement."
0,The code is perfect right now.
1,"The code is written very well. There's some minor issues (sometimes there's duplicate ""allow""s. But actually in the same ""describe""  just one ""allow is enough.
On the other hand, there's no bad name, no hard-to-understand functions. Comments can be added just a little bit more to help people understand.
Some comments are not supposed to be there (such as discarded codes)"
1,There is no explanation.
1,"The wiki does not include any discussions about design principles or patterns that were used in the project. 
One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite."
1,Writeup can be improved at the task section and more information could be added
1,There could have been certain negative scenarios tested as well.
1,The authors have not provided any explanation of the tests that they wrote.
1,"No, they explain nothing, just put the code on it."
1,"All the functionalities are listed and code also attached for the same.
But, if the code changes were highlighted in color as in git, then its better comparable."
1,"The Test Plan is not defined formally in the wiki. Instead the reader has to reason about the provided code itself. Given test suite covers every method of the object under test. ~70% Coverage is achieved.
It would be better for the team to define the test plan and decouple it from the actual code. This could be done by firstly stating all the 'describe' constructs, methods that they are testing and secondly, elaborating by listing their descriptions."
1,"Most of the scenario is covered, the total coverage needs to increase a bit."
1,"As this rubric calls for the need of a section - Test Plan, I suggest adding it and including the work done in that section along with why a particular test has been written."
1,"In their test plan, most of it is code, without any explanation or cases."
1,"Not perticular test plan section, but there are some different possible results have included."
0,"Yes, the code has all the possible test cases.
Many of the edge cases are covered and listed in the wiki."
1,There should be more explanations.
1,"The wiki defines the primary goal of the project but it does not contain a discussion about the plan or strategy that is utilized to solve the problem. Raw code is copied from review_response_map.rb and review_response_map_spec.rb files, however this does not give the reader any useful information. 
I would suggest replacing the review_response_map.rb code with a short description of what the team needed to understand about the given code in order to write the test suite. Furthermore, the team can provide a listing of higher level method descriptions from review_response_map_spec.rb, what are the expectations and which mock objects are being used to achieve the result.
One minor improvement would be removing parts like Expertiza description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018/E1850._Write_unit_tests_for_review_response_map.rb#Background) because it is redundant in this context."
1,"Its a good write up, additionally you could try to explain method and test rather than including all the test cases"
1,The write up is written adequately. Only thing is to reduce the code shown on the wiki page as I feel that it might be irrelevant to have the whole code increasing the reading page size.
1,"The wiki page is divided into some nice sections, however the authors have just included the code as it is without any description of the work that they have done."
1,"No, I don not think their writeup is clear. In their writeup, they just paste the code without any explanation."
1,No clear explanation for the work.
1,"The wiki looks too long with a lot of code.
It does have all the code and test cases, but its better to have git links to each code and more explanation of the code used above it in the wiki.
This will help the readers to compare the changes in the code with the explanation parallelly."
1,The coverage could be higher.
1,"Running the code manually resulted in 69.61% coverage. However, there are four methods that are in a pending state."
0,The test cases work as expected and handles edge cases as well
0,The code works in the edge cases also for delete an other tests mentioned.
1,"Code is nicely written and runs well. However, more edge cases should be included. For example, each function should be tested for a known success case and an edge case or potential failure."
1,"Yes, their code works pretty good, but their coverage is a big problem."
0,the basic test cases are test well.
0,"The code works fine for the listed functionalities.
All the cases along with the edge cases are considered."
1,"The source code is mostly following standard Ruby practices, but there is a room for improvement.
Firstly, the source contains large chunks of code blocks that are commented out. I would suggest removing those chunks as they reduce the overall readability. Given chunks can always be retrieved via commit history.
Secondly, some application level objects like Answer or Criterion are used to create corresponding instances as opposed to mocks. It would be better if the authors either used mocks or provided the reasoning for this decision."
0,"Test cases are effective, with minimal statements there is maximum coverage"
0,The code is well written. DRY concepts are used.
0,The code is written neatly and follows the suggested guidelines.
1,"Their code is good, but some of them are too long."
1,"The code does follow all the standards and steps to cover all the test cases.
Could include some more comments to make the code self explanatory."
1,I did not see pull request
1,"There are some instances of variable names that are concatenated with numbers, for example answer2, questionnaire2 etc.
While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. For example team could be used instead of team1 because that is the only Team instance variable in the source code."
0,The coding syle is good well versed
0,"Since it is a test project, their variables, methods and class names are reasonable and easily understand."
1,Can not find pull request link.
1,"The functionalities are working fine.
The describes in the tests could be a little more verbose."
1,"The Test Plan is not defined formally in the wiki. Instead the reader has to reason about the provided code itself.
All of the tests are passing, but methods like 'review_response_report' and large part of 'import' are not covered."
1,Not all i can see only some of the methods being covered 61% approx
0,They have covered all cases which they mentioned in the Test Plan
1,"They may misunderstand the meaning of test plan, they just put the code on test plan, so i cannot judge weather they are success or fail."
0,"the code follows Ruby style guide.
the code does not contain long methods.
the variables and functions are properly named."
0,"Yes the tests are automated, also the command to run the test is given in the wiki."
1,"Writeup needs to be improved, video needs to have sound or make shorter videos. Build is failing, code climate has 56 issues. So no its not ready for deployment onto production. The way they have implemented is fine but they need to work on the said issue to make it production ready."
1,"* Test plan is missing.
* Code is directly copy-pasted in the approach section - pseudo code with proper comments would have been better.
* Wiki alignment is missing in those places where the code is copy-pasted."
1,the authors has worked on write-up.they have worked on the issue which I mentioned in the previous review. The code doesn't seems to be confusing now. the content on the page is in proper format earlier which was not. Test plan still need the team's attention.
1,"No, there are no test cases added by the team."
0,Commits were made in second round
1,There are lots of code climate issues to be fixed.
1,The code seems to be fine but due to lack of comments a little hard to understand. It would have been better if there were some comments in get_due_date_data and addQuestionnaireTableRow.
1,"The function process seems to be a bit long. It could have been splitted based on oscillator types rather than having all of them in the same function.
Apart from that rest of the code seems great."
1,"Yes, the team made commits  days ago, but then it seems that they didn't follow-up with the feedback they received on the pull request, as their were 7 issues, though of minor severity, which required fixing, and then there were no commits after that."
1,"Only test skeleton present, no actual tests implemented."
0,"yes, new code committed during the 2nd round."
1,"They are trying to fix code climate issues, but there are still many failed, and no code change to improve readability."
1,"There are a lot of functionalities missing. Like ability to add photos for the house being one of them. For the funtionalities which are present, there are quite a few bugs. For example, signing in again after signing up, realtor being able to delete any houses, whether or not listed by him, etc. There are a few functionalities added after the first round, but the implementation is not upto the mark."
1,"The team did not attach the link for the github repo along with the other files submitted. This makes it difficult to comment upon the commits made. However, from the video link it can be seen that the test cases have improved to give a full path coverage."
1,"The system does not portray good database design. First of all, there are two separate tables for enquiries and reply to enquiries, which is highly not normalised. Also, the fact that there are 3 separate tables for the three types of users is also very in-efficient and non-scalable. It does make an attempt to map the various relationships, but it seems it is not properly tested, and is prone to many bugs."
1,"The commits were not regular. The development cycle seems to be a rushed one, since the commits are too concentrated near the deadline, and too sparse in between them."
0,"Yes new commit is done for second review,"
1,"Code quality was not upto the mark. Firstly, there were 3 separate table for admins, realtors and househunter, which caused a lot of redundancy inside the application, as well as for the user using the product. Secondly, the lack of proper documentation made it very difficult to traverse through the code."
0,"Yes, the team covered 100% of the code they had to test. Also, the video given in the link was very informative and helped to understand the implications of the work done by the team to a far greater extent."
0,The coverage is 100% since the first round. It seems there's no newly added tests.
0,Coverage was already at 100%.
0,They reached 100% at first round.
1,"FRom the Pull request i see Coverage Decreased, But from the Screen-cast looks like 100% covered
When i tried running manually i get the below errors
 1) ReviewResponseMap #final_versions_from_reviewer     Failure/Error: prepare_final_review_versions(assignment, maps)          NoMethodError:       undefined method `prepare_final_review_versions' for #<Class:0x007fab83429010>"
1,"I don’t see a test available for controller or model in the code, and as its not documented whether a different type of test implementation is available, I am marking this unavailable."
1,"Yes, the code was extremely clean and readable. The naming represented the task( such as: remove_from_interest_list, show_potential_buyers etc ) of the method and no extra load was carried by that method, except for the action assigned to the method. 
No methods were longer than necessary and no unnecessary nesting was present.
Though not major, a suggestion for the team is to avoid using pronouns or subjective references such as my_interest_list and houses_posted_by_me for method naming. Also, as methods are referred to as actions, naming should reflect an action, so add show in front of naming such as houses_posted_by_company"
0,"Yes, the team covered all the scenarios I could have come up with. I specially appreciate the work that they've put into the import functionality. They have come with with more scenarios than I could have even thought of, and tested it pretty thoroughly."
0,The project successfully covered all the scenarios.
0,"nil test were added, all scenarios are covered."
1,The write up has some great information and snip its of code. It would have been a great addition to have included more discussion on the overall design of your test cases. Overall a nice wiki.
1,"This is where the project lacks the mos. The write-up isn't very informative, specially for an outsider. It states the points very shortly, without going into much depth. Also, the writeup bombards the user with lots of un-relevant information and pieces of code, which make it feel very long, although lacking significant content. The writeup could have been more detailed, and could have omitted the unnecessary parts, like dumping of code, and not explaining what it does."
1,"The writeup is a bunch of codes, there's not enough explanation. 
The ""allow"" function is important for the mock functions. But it is explained in no place."
0,very nice writeup.
1,"The write-up is difficult to follow, and doesn't provide much insight into how the testing code works. Despite having a test plan section, no test plan is included."
0,"The write-up is well written in my thought, it is clear and understandable."
1,Still missing the details.
1,The code is good because it covers the scenarios. But one thing that prevents the 5-star is that they do not have enough  commenting and seems to be not that detailed and careful in terms of the explanation.
0,1-n and n-n relationships are all properly defined
0,"Yes, the commit count has almost doubled from round 1 to round 2."
1,"It is very difficult to recommend merging this code. Although it builds and appears to function correctly, it is not properly documented. It is difficult to tell how the code works and whether test cases introduced actually function as they intend."
1,"As soon as they fix code climate issue, and separate each test cases with more it '......' do, it is good to deploy."
0,The team has presented a working deployment to be possible. It passes most of the builds and can be deployed on the production server.
1,It can be merged after fixing the code climate which has 7 issues(needs to follow the coding standards )and need to work upon the overall decreased code coverage.
1,Great job with your pull request and passing the Travis CI build. There are several code climate failures that could have been addressed many to deal with incorrect formatting and extra parenthesis or braces. Simple fixes so great job!
1,"Yes, the code did pass Travis CI successfully, but as mentioned earlier, the code did fail on 7 grounds, of low severity. This should have been fixed by the team, as the issues were very small, and required just minimal follow-up."
0,"Yes, the Travis CI is passed. No conflict that are remain do be resolved."
0,the build passed in Travis CI.
1,"Travis CI build passed, But Code Climate identified few issues"
1,The Travis CI has failed and also code climate.
1,"The Travis CI build passed for the test cases. Also, the code passed for Danger bot. However, there were some issues for the code climate that required to be resoled. Overall the pull request satisfies the required criteria."
1,Db design doesn't have key reference and 1-1 or 1-many relationships in active records are missing but the same is implemented via code logic.
0,Travis build : passed.
1,Testing has not been done. Models and controllers are well designed hence the 2 points. You could have used basic RSpec tests to validate the flow of control.
0,The code written by the team satisfies the basic functionality expected. The team followed the comments from previous round of using good naming conventions for certain variables.
0,All basic functionalities work as expected. You could have gone for the extra credit functionality such as the Google login or the email part. The email part was pretty easy :| . You've still done a great job with the overall design. The best I've seen thus far!
1,"For each method, there should be multiple test cases, but they put all tests for a method together wrap by a single it '.....' do, they should consider to add more it '......' do, to separate each test case, so the reader know what are they testing."
1,"The code is difficult to understand. There are cases where factories are used and then later replaced by mocks in the individual test cases. The code also does not appear to be DRY, as several of the mocks appear redundant in the context of the plethora of factories built."
0,"very nice code, easy to read and understand."
1,"The code is well written according to the video. Since there's no github submission, I went to the sumitter in the pull request to check his work. It seems that the code is relatively good. There's some minor indentation and alignment issue. And not much explaining comments. But other than that, no bad name, no long function."
0,The code follows all design style guidelines for Ruby. Good job! All methods are well designed and serve only one function. Naming and structure is uniform across the project.
1,i looked through all the files in the test folder and don't see any tests filled in. They seem to only be the pre filled skeleton.
1,"1. if a real estate company is deleted has houses and realtor, then the house and inquiries are deleted too
2. when you change your company as a realtor, then you can't edit houses listed from another company, but it still shows up
3. the inquiries are deleted if the respective hunter is deleted"
1,"The code us good as mentioned in the previous rounds, except the lack of proper commenting. The authors did not improve the code from the previous rounds in this aspect."
1,"Admin
- Can't create houses, which then means i can't add to interest list or make inquiries
 
Realtor
- Can't view list of potential buyers for a house
 
Hunter
- does everything it needs to do"
1,the users controller has a lot of nested if block in the forgotPassword method and resetPassword method
1,covered all the edge cases but have not provided any explanation.
1,"The writeup lists the task to be performed under the Work to be Done section. It enlists the criteria required to be achieved as part of the project submission. The team can adopt a workflow that can give details about how the team managed to reach the current implementation such as understanding the files involved, steps taken for setting the expertiza environment etc."
1,The controller and model tests were not updated.
1,"When I delete a real estate company, all the realtors in that company get deleted too. Realtors can still edit houses they made for one company after they switch companies."
1,"Little explanation for the code is given. The only case in which code is explained comes in the section titled Test Plan under the subsection Mock Instance. Here, it is mentioned that the project uses mocks to aid in testing functionality. However, the code example is actually of factories, a different but related concept. It is unclear if this is a typo or a misunderstanding because in later code snippets mocks do appear."
1,there is no explanation in the writeup.
0,"Authors delivered nearly all the functionality I could think to test. It was a little weird being referred to a totally different page to have to upload images to houses, but not enough to deduct points."
0,It looks like all the needed relationships were present in the schema.
1,This section of the wiki is currently missing. When you write this section be sure to state why you tested certain cases in a particular fashion accompanied with code examples so that the reader can clearly see what was done.
0,Briefly covered all the possibilities.
1,The writeup does not include the Test Plan section. It is suggested that the team add the section and include a number of different aspects such as specifying the edge cases and preconditions considered while working on the test cases.
0,"It divides testing codes into parts, and described purpose of each chunk of code."
1,"There is a section titled Test Plan. However, it does not seem to be a plan or give an outline for the development of the code. Instead it describes what the methods do, but shows the testing code for the method. This is confusing as no explanations are given for the coding design."
1,I cannot find the test plan.
0,"The unit test cases were completely fine, and covered almost all of the code."
1,"The login / signup module seems to be well tested of all the other models and controllers in the program. But this module has a drawback. It deals with three tables, the realtors, the househunters and the admin. Due to this kind of segmentation, there is a repetition of data i the database, if any user would like to signup as both. Also, it would make it difficult to handle complexity as the application grows. According to me, its better to atleast cascade the tables of realtors and house hunters into one. 
The other functionalities are not wholly implemented, only the CRUD operations related to those are implemented, hence not much could be reviewed about testing."
1,There is not a specific Test Plan section in the wiki. There is a Work to be Done section that discusses the work that should be completed for project success. I would suggest rearranging or rename this section and continue to describe your plan of attack for testing.
1,The wiki document for the project does not provide enough details about the project and the task performed by the team. It contains of only a rough overview of the project at this stage. It does not reveal much about the functionality of the program.
1,The Write Up can be improved by explaining all the Methods which are tested
0,It has all the details about the testing for review_response_map class.
1,"I can understand what the project does. I cannot, however, understand how the project does what it does. The code is not explained at all."
1,"The writeup is sufficient in itself, but not as exhaustive or easy to understand from the perspective if an outsider. The author could have elaborated more on the problem statement, and how it related with expertiza. Also, instead of directly jumping to the implementation, the author could have explained a little bit more about why and what was the approach taken by the author."
1,"I believe the wiki is not complete. However, the content that is included so far does aid in the explanation of the project purpose. More elaboration and completion of additional sections such as the testing design and implementation of tests will help to fully clarify the project purpose to the reader."
0,"Video seems fine, covers all the cases with 100% coverage."
0,"The test cases given by the team work as described. The features are implemented accordingly. The edge cases are considered while designing the mocks. In general, all the code for test cases works as specified."
1,Manually ran the Test and Coverage report says only 34% of Code is Covered
1,"Some edge cases are missing, so I assume most of them work."
1,I could see only one person's commits. Each team member needs to contribute to Git.
1,Admin and Realtor's functionalities are partially working. Many other features need to implement.
1,Many tests are not yet implemented. More testing of the author's work in handling edge cases will be done in round two of reviews.
0,Yes it is deployed on Heroku.
1,"The project needs validations on all fields (I was able to enter random values in email address, mobile number fields). Some of the additional functionalities were missing (filter inquiry, see who has added my house to their inquiry list etc). The project is well connected and navigation is easy. Overall it looks very clean and intuitive!"
1,The code written by the team includes the basic functionality needed to run the test cases. Some improvements might include keeping a function short like diving the import function into multiple contexts or reducing reduntant code by using the mock built.
1,"For nil input test, they should separate them from the normal input with a new test, instead of put them in one.
some missing invalid input testing, such as import, export methods."
1,"The code seems to set up a large list of factories only to then in many cases make these redundant by creating mocks for each test case. It is unclear what the code is trying to do and many of the test cases are large with many mocks with stubbed methods.
It would be helpful if explanation for the code was given. When using factories it is generally unnecessary to stub the all the methods of these factories as they are in fact actual instances of the class.
The code not very DRY. In many the cases the mocks and stubbed methods could be moved to a before_all or before_each block."
0,The model and controller are well designed. Each method covers a single functionality! Good job
1,"Except the lack of comments in the code, the code seems to be perfectly fine. Could be improved in that scenario."
1,"As mentioned in the above comment, Add these describe and context statements to further comment on the purpose of your test cases. This makes it easier to understand the why the test is there, I also find that it helps to clarify to the developer that the test is necessary."
1,There are 7 issues pointed by the auto bot which require code to follow coding standard.
1,The functionality added to the pull request is reaonable and makes use of appropriate keywords. It could be improved by giving names according to convention like feed_ back_ review_response_map could just be feed_back as jt is part of the review response map model file.
1,"in test file, you can give one more line of it, for each test to describe the purpose in a little more detail than just the method names."
0,hey variables follow all the stanard conventions that it needs to.
1,"I am unable to find the file review_response_map_spec in the github repo that was supplied. However, there was a ruby file that was attached in the submission. The variable names are also clear and unambiguous. This file is incomplete but the tests that are complete seem to follow appropriate syntax and guidelines. I would suggest to add some describe and context blocks that would clarify the purpose of each test case rather than just have the it statement saying the name of the method being tested. Keep working to finish up the remaining tests in this fashion and it would be great."
1,The team has not included a Test plan that models their tasks for running the test cases. It should list the overall procedure adopted by the team from scratch to getting the tests running.
1,"The code itself appears to be very clean. The lack of scaffolding (or the stripped down scaffolding that it presents) means there's a lot less dead code in the files. All the indentation and variable names appear to follow convention as well.
This cleanliness, on further inspection, appear to stem from the fact that the application frequently does not support needed functionality. The code that's there is clean though."
0,"As mentioned above, and also stated in the video and the pull request itself, the author has covered up everything."
1,There is no Test Plan yet implemented in the wiki documentation. Be sure that when you include this section that you make the inclusions specific and intentional.
1,Many appropriate relationships are implemented. (a) companies(1) to houses(n) (b) house(1) to photo(1) and (c) house(1) to possible buyers(n) . I believe there should also be an association with how there a realtor can only belong to one company. This will ensure many necessary functional dependencies are in place for the required application flow. Keep the ones you have and continue to add missing associations as you go through the requirements check.
1,Dont see a SEPC folder
0,"Yes, the team has tested model and controller."
0,Testing has been done for users controller and model.
0,"Yes, they have tested a lot. Like admin, house and inquiries."
0,Edge cases are not handled. But most of the logic will automatically handle edge cases.
1,"Since I was unable to run the code on my local device, I am unable to test for edge cases. However I would suggest adding a destroy dependency in model files, for example for house hunters, has_many :inquiries, dependent: :destroy
The README file fails to provide an information about edge cases."
1,"The Overall System works as it is supposed to.However,there are few functions which are not implemented.
Realtors' Page:
Validations for phone number have not been written because a phone number of length less than 10 is getting accepted by the system during sign up of a realtor. Houses does not start from 1 under the ""Your Houses"" section in the realtors page.
Your Houses
2 3 
Delete house option is not provided under the realtors page.The functionality to change from realtor to house hunter and vice versa is not provided.Functionality to edit or delete a company under the realtors page is not implemented.
House Hunters' page:
House hunter should not be able to update and create new houses but these links are provided under the house hunter page. Although the functionality of update and create new house has not been implemented. It gives out the following error messages. 
Error messages-

ActionController::UrlGenerationError in Houses#show


Showing /home/ubuntu/OODD/ooddHMS/app/views/houses/show.html.erb where line #60 raised:
No route matches {:action=>""show"", :controller=>""realtorprofile"", :id=>nil}, missing required keys: [:id]

NoMethodError in HousesController#new
 
undefined method `houses' for nil:NilClass"
0,"The link submitted is not live. As a result, I could not test if the system is working as it is supposed to."
1,"They got pretty much every basic functions in the app.
But I am not sure where should I login as an admin.
and there are some small bugs.
There will display two ""logout"" button after you login as a hunter.
Back does not work well."
1,"The AWS deployment attempted by the team does not work. I attempted to clone the repository and run it locally but was unable to. Looking at the code itself, I was able to determine that the wishlist, replying to an inquiry functionalities are missing. 
I am unsure why the team opted use the devise model generator for the companies model. The companies aren't a type of user on this project from my understanding and rather a resource. Would it be possible for the team to use a scaffold generate instead?"
0,They committed quite many changes on the day of submission.
0,"The relationship between house hunter, realtor and companies have been well established."
0,"Yes, there is a ""has_many"" relationship in company model, and also realtor is able to create mutliple house in one company."
1,"The belongs_to and has_many conditions have been set by the team on the model.rb files. But there are no foreign indexes on schema.db file. I would advise using; Model foreignModel_id:dataType:index with scaffold generate to add a foreign key and in case of devise generated tables I suggest creating a foreign key with a new migration. Here's a stackoverflow link that shows how to do that, https://stackoverflow.com/questions/16257116/adding-foreign-key-to-a-rails-model"
1,I see only 1 contributor. Also only once the commit was made.
1,Changes were committed only at the last moment at once. Please commit the changes as soon as development is complete and the code is tested.
0,"Checking the git log, the team still committed changes in round 2."
0,The team submitted their changes towards the end of the project. They committed changes in round 2.
0,"Yes, they have keep commit to git as their project been working."
0,The team seems to have attempted to add to their functionality from the previous round. They have attempted to use the devise gem for allowing multiple user logins. It seems that they created a new git repo and started from the beginning which seems like a fair idea given that they wanted to use devise instead of implementing the user registration/sessions.
1,"The code is clean and readable. Every method handles only one task. However there are two controllers for house hunters and realtors which I felt was redundant. These could have been merged and written in a single controller. There is no bad naming in the project, they have followed the naming conventions. There are no long methods. Methods have been written concisely and in a readable way."
0,recompany could have been just company
0,"Code is written in a clean and readable way.
There are separete methods for separate tasks. 
Good naming convention is followed throughout the project."
0,Code seems to follow the Ruby Practices.
0,"Yes, it is."
1,Lot of unnecessary directories are created in 'controller'
0,"Many test cases were added, with overall test coverage increasing for the project."
1,"The build isn't passing one of the added tests, but it looks to be a simple fix."
0,"No new code was added, nor was any necessary."
0,Yes everything does seem to work properly.
1,"The code has been merged in a good way and there have been no merge conflicts. However, the Travis CI was failing and the code climate check was failing too. This is something that the team must look into and make sure that the changes that they have made are consistent with the existing expertiza code."
0,"No, its not as the coverage is increases by small amount."
0,The writeup is well written and self explanatory.
0,"Yes, they were made."
1,"The solution of problem 1 was not clear from the write up, no explanation has been given."
1,Travis CI did not pass. Code climate also has 121 issues to fix.
0,Doesn't seem to have new commits in round 2. last commit was on 2nd November
0,"Yes,coding practices seem upto standards"
1,"This code will need to be refactored, however, we will not need to build it from scratch. Only some functionality has to be divided into chunks and moved into helper functions. The functionality works well."
0,No new code was committed in the second round.
1,"The code quality is good however, it can be improved significantly. The code lacks proper comments and contains many if else statements. They could have been refactored and avoided."
1,"the Writeup misses out on elaborating the approach taken, it just lists the problem statement and jumps to test cases and fix. I would like to see more details on the approach taken. 
The ""why"" is missing"
1,"yes good number of tests added coverage increased a but but i would like to see more -ve tests.
Mostly +ve test cases are covered in the tests"
1,Build fails. pls check the same. There are no conflicts with the mail branch.
0,Yes 1 checkin was done on nov 2nd
1,"The write-up is well written and looks through. The write-up details what has been accomplished and there are plenty of screenshots to support this. However, there is no mention of what code has been changed/added and why the authors chose this change. 
Test plan has also been well written. The parts written are well written, but there's a good scope of improvement."
0,The functionality works and is evidenced by the video.
0,The testing has been implemented and looks well implemented.
1,Build fails and there are aa plethora of issues (121 by code climate) and several warnings.
1,"The code is well written, follows ruby guidelines and variables are aptly named. However, the changes are extensive and there are virtually no comments. The code can do with significantly more comments to explain what is being done."
0,"The writeup is great, in first round they did not have a test plan part. But they added it in the second part."
1,"The build did not pass, their test failed. It seems that their grades_controller_spec.rb has some problems."
0,No new commit during second round.
0,They don't have code problem for the first round.
1,"Travis CI build is failing.
Lot of warnings and issues that have not been fixed. Many of them are trivial and easy to fix."
0,The code is well written and well commented and follows ruby style guide.
1,"Yes, the code seems good to deploy if we consider the manual testing and the video demonstration. But since it didn't pass Travis CI, this claims seems a bit of a concern. If we ignore the fact that lines of code was >500, and thats why Travis CI failed, but still there are a few lingering issues which the Travis CI pointed, which still hasn't been fixed. It seems more of a patch, which would require more patches to patch in the future."
0,"Yes, the project did work as intended. The video demonstration and manual testing were enough to prove this fact."
1,"No, the Travis CI had failed. Yes, there were a few conflicts, like the lines of code was very large for a commit (>500), also there were a few pending test cases in the pull request."
0,"The last commits were 12 days earlier, hence no new commits were made during the second round."
0,"Yes, as mentioned in the problem statement, the solution is delivered. It works fine."
0,"Team has added many tests. Coverage has increased from 1 to 38%, which is impressive."
0,"The code was already delivered in the first round. Hence, no commits this round. The author has regularly pushed commits."
1,"The code is well-written, follows code standards. The naming conventions are followed. However, in some parts code is not formatted."
1,The test plan is not there.
1,The write-ups been written well. A small suggestion to the team would be to explain their solutions in more detail as it would better the understanding of what the project does. Also the team could use code snippets instead of screenshots of the code.
1,Cases mentioned seem to be working fine. Can be a bit descriptive about the steps though.
0,"Yes, it looks they have converted all the cases into the Test Plan."
1,"Class and variables are name correctly.
get_bookmark_rating_response_map is an not an apt name for a function.
The word bookmark can be omitted in function and variable names inside the bookmark controller.
.when a student requests a bookmark it should show a bookmark test is failing"
0,They have included a test model video in which all the test are passing. It looks complete
1,It mentions what they did but doesn't highlight why they chose to implement that way. Don't seem to have implemented any design pattern as well.
1,The writeup seems apt. I had a little problem understanding the solution to problem 1 but otherwise it seems fine
1,The features work as intended however I am having trouble navigating and checking what are the differences between the original system and the improved system. Could have made a demo video showing the improvements or a step guide to follow.
1,The test cases have been developed into automated tests however edge cases or failing cases have not been considered. Only simple and straightforward scenarios have been tested. The video shows the test cases and the document shows the coverage. The document is well made.
1,More comments are needed because I had trouble following what the code was doing in some places. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Good work in this area.
1,All methods and variables are suggestive of the functionality. Only some of the code changes are explained and reason of taking a particular problem solving approach is lacking.
1,"The Test Plan was comprehensive. However, in the video they could have explained which screens and which methods they were testing instead of just showing some test cases pass on the screen."
1,"The authors do not explain why they did the word the way they did. Entirely new pages have been created with no indication as to why those pages were needed . Old redundant code has been commented but not deleted. Naming and code pattern wise, very good job."
1,"Function names look good. And most of them have len < 20 which is good. 
The tests make use of contexts effectively. This is great to see.
 
 Yes more comments are required especially in the controller code telling why an approach was taken and what the function does."
1,"Build fails, pls look into it. 
BookmarkRatingResponseMap has been replaced by BookmarkRatingQuestionnaire but the earlier naming convention just by looking at the name let the reader understand the data structure being used. I would have liked similar approach here."
1,"Yes they have a test section.
The amount of coverage added for the new tests is great. Keep it up, however I would have liked that the authors added more negative cases as part of t heir unit tests. 
I see mostly the +ve test cases being handled in the tests."
1,"No. I think the authors should have mentioned why a particular solution was taken. What was the main driving force for taking the approach that they have taken. This was entirely missing. Pls work on that.
They could also remove much of the commented code."
1,"Write up is good. Great job. However I could find few points that if rectified would make it even better. 
It would be good if the problem statement could list the issue (hyperlinks) that are being fixed. That would make it easier to navigate
Instead of pasting screen shot for solution it would have been good if few words detailing approach would be put. Post that screen shot could be put."
0,All the test plan is converted to automated testing.
1,"The code is well written, follows ruby guidelines and functions are of appropriate length.
 
No comments are provided what so ever, making the huge code change very difficult to follow."
1,"Use of a few variables is hard to understand. For e.g. : x.assignment.id 
Otherwise, most variables and classes are aptly named."
0,Testplen looks exhaustive and is explained well.
1,"Writeup does not mention anything about how the code works, alternative strategies possible or strategies they used."
1,"Write-up clearly explains with screenshots what is done. However, does not say how the changes have been implemented."
1,They did not have a Test Plan.
1,"I didn't find any information about how and why they did the work, they only show me what are the issues and the results after they fixed these issues, for example, in problem 2, they told me their is an average rating metric bug and they fixed the bug, but they said nothing about how they fixed the bug."
0,Could not detect any flaws. Works exactly as it has been been in the wiki. Good guidance.
0,Good work on including test cases. The app works fine after testing.
0,"Great work. Clearly Understandable. Functions are of appropriate length, Codes are in appropriate methods, Code is very well commented, Code follows ruby style guide. Good naming."
0,"The authors considered different pre-conditions, edge cases, invalid input values, and other possibilities and i clearly well written. Test Plan looks complete"
0,The writeup is clear. It is easy to understand what the project does.
0,All of the features mentioned by the author works successfully in the demonstration as well as in the manual tests performed by me.
1,The code follows most of the standard practices except the 3rd one. It does falls short of comments. It took a very long time to make sense of what the changes made by the author in a particular file does. This scenario could be improved in the future iterations.
0,"Yes. the variables have been very keenly named. Especially in the file, _rubric.html.erb, the variables are very accurately and effectively named, as there could have been much confusion otherwise. Kudos for that."
0,"Yes. The test plan is present in the writeup. Also, the links to youtube videos for the demonstration was particularly helpful too."
0,"The write-up is very clear and directs user to the main issue very well. The flow is very structured, in the sense that first it gives a high level view of what expertiza is, it then tells about the book-mark functionality, and then tells the problem and how they came up with the solution. One of the most professional wiki I've reviewed."
1,"The writeup expalins clearly enough what the authors did. Though, the part of ""Why"" the authors did what they did isn't elaborated with much depth. From the authors perspective, the articles seems exhaustive and comprehensive, but for a person reviewing the article, who doesn't have much background of the problem at hand, the article make it tough to decipher why certain program is written the way it is."
0,"Tested in the links given, the changes are working correct. The server is up and I was able to reflect the steps mentioned."
1,Code is clean and variable names are readable. Need a bit of formatting as some lines are not 'aligned' well.
1,Yes the team added test cases and the overall test coverage has increased. But the team seem to have only modified the existing test cases. The team could have implemented test cases of their own.
1,"The code is really well written , there are no bad names. The functions are also easy to understand. However, I would suggest them to include more comments in the code so that it becomes clear for the person reading the code that what the function and changes are all bout."
1,"The code hasnt been changed from the first round.
New definitions that were added follow naming conventions properly.
remove_administrator
remove_instructor
Viewing their pull request and code climate bot, there were few places where identical blocks of code can be found.But they are in the spec files.They could have refactored those areas alone."
1,"The code was well-written and no problem with long or bad names. But, no comments were present. Commenting would have made the code easier to understand. Also, refactoring was not done."
1,"Code written well. Remove the unwanted methods, there are few duplicate methods which can be removed."
1,"The code is well written. Although as suggested earlier, the team has not added comments to the code. In the wiki page, the team displays of how the code was before and after. But, I still feel this is not adequate information for a layman to be able to follow line by line what the code does.
Adding comments in the code for future projects would be my best suggestion. Or, as an alternative, briefly explain in a line or 2 as to what the code does."
0,"Code is written well with simplified approach.
Naming conventions are standard without long functions.
DRY principle is followed."
0,The code is not altered much but it follows the standards and not changed in the second round
1,Unable to login to the expertiza url
1,The writeup includes some of the work done.Although it looks a bit incomplete and does not convey much about the project.
0,The team does explain how and what they did.
0,Write clearly explains the changes done.
0,"Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. They have made an UML diagram as well."
0,"Written very well explained approach taken to solve the issue..
Along with what was the actual problem existed previously in the system and how team has given a thought process the fix the issue.
No type of design pattern is involved."
1,The writeup explains how the changes are made but does not state about design patterns used and the code dose not show any use of patterns
1,I can not see any test plan section in the writeup.
1,"Test plan is included in the Writeup section.
They have explained about the basic test cases and how it is implemented.
Edge cases, invalid inout values arent explained in the writeup."
0,Test plan seems complete enough.
0,Include the code snippet in the write up as well.
1,"The test plan is missing in the wiki page. The content in this section could be the one suggested in the above comment, to just include all the test cases added and write a brief description about each."
1,The test plan focusses on a particular scenario for the functionality to work and does not handle validations and edge cases
1,Test cases are failing
1,The project seems to be incomplete. The work done is also not properly mentioned in the writeup.
1,"The document clearly explains what was the problem and what was the solution they proposed.They have also compared and contrasted with the previous solution which is good.
They have talked about how different roles come into play with respect to security perspective and what the pros and cons of having/not having those roles.
Comparing the code changes gave a clearer view of the code changes.
One improvement could be in the 'background' part. 
Taking it as it was:
The majority of the project was related to solving issues regarding the deletion of Administrator and Instructor accounts. Administrator and Instructor are both account types that inherit behavior from User but are (1)handled and deleted in different codepaths. Furthermore, properties are used on a User that aren't on an Administrator, (2)such as team ids or course associations 
(1) The different codepaths could have been shown to get a better view (atleast a screenshot, considering it wasnt within the problem scope)
(2) Although, why these properties arent on Administrator is defined in the forthcoming sessions, it was little unclear while reading it. (It could have been quoted that 'as we will see it in the forthcoming sections')"
0,"The writeup is clearly and adequately defined. It shows what the project is about, what all changes the team have made, all assumptions they have made and edge cases which they have ignored as they were out of the scope of the project."
0,the write-up provides adequate information along with before and after code which helps in better understanding of the issues and changes made
1,"The test for each functionality is written. However,I could find only 2 tests running , that too not with satisfactory results."
1,"The deployed app on VCL doesnt work.
Their testing plan on wiki is clear, although their app is not deployed / screencase is available, so not sure how to test the functionality."
1,"Could not do the manual testing since the link mentioned did not work. But, the code seems good enough to work."
1,"The code works well for edge cases as well.
As they mentioned in the wiki sometimes the app throws an error (in English or SQL). It would be nice to know if they could debug a little and find out in which case the SQLException is thrown and in which case the English (handled) error is thrown."
0,"I have manually tested the changed functionalities and issues are taken care very well.
Team has given justice to problem statement assigned to them, but with in the scope of issue assigned.
Also taken care of edge cases."
1,The deployed setup cant be reached. The site is not up.
1,Functions are really small and absurd. Does not go along Ruby Style guide.
0,"They have explained about how they are using DRY principles in wiki.
Refactoring a new method like, 
def self.destroy_helper(params, position) in (users_controller.rb) clearly explains the DRY method being used"
0,The code seemed fine and follows the ruby guide style. I could understand the flow of the code and what different functions did.
1,"method remove_instructor is written twice in the same file, delete it."
1,"I would only suggest you to add more comments to your code. I know that no comments were previously added for you to feed off of, but I guess a major aspect of these OSS projects is to add as many comments as possible to the existing code."
0,"1. Function written are simple, crisp and clear. No long functions or dead lines of codes
2. Team has taken care of modularization. No part of code needs to be added as separate  method
3. Code and names given to variable do help to understand the flow of the code.
4. Code follows Ruby style guide.
5. DRY principle is followed very well within the two functions changed."
0,Functions are not long but are sufficient enough to understand what changes are made and how they are implemented
1,The newly added code does not resolve the previous issues to great extent.
0,"Names are clearly used and defined as given.
def remove_administrator
redirect_to action: 'list_administrators
def remove_instructor"
0,Function names seemed to be clear enough and satisfactory.
1,Build is failing. Correct it by understanding the reason. Good job on Ruby standards for the naming convention.
0,Pull request build passe well and there are no issues.
0,The code added in the project uses intuitive naming conventions. Good job guys !!
0,"Variables, methods and class names are given professionally with reasonable meaning.
The names very well indicate the functionality to be performed by the name/variable."
0,"Methods, variables and class names are well defined as per the standards."
1,I do not see any test plan in the writeup.
1,"As given in wiki for their test plan, 
The admin tests include building and deleting both Administrator and Instructor accounts using Capybara for testing the front-end web functionality.
it 'delete instructor successfully' do
it 'delete admin successfully' do
To test the role creation, Capybara was again used to check that the web page did not have any button for ""New Role"" and that navigating to the page manually resulted in an error.
it 'should not create a new role and redirect to index page when ""new"" method is called' do.
 
Although they havent explained the edge cases and negative inputs in the wiki, their test cases cover whatever has been discussed"
0,All tests added pass.
0,"Team has taken care of test plan with automated test cases.
As mention by team, they have implemented capybara testing and has good understanding of it."
0,Basic test cases are covered in the test plan
0,"This is not an expertiza project, but the pull request does pass."
0,It is already deployed on the production server
0,"The project is in great shape and has already been merged to the servo repository on Github which means that it is production ready. The team has fixed the few formatting issues pointed by a servo team member. 
The approach taken up by the team is in line with what is expected of them and it is a good start to advance the Webaudio API of the servo browser engine in the future."
0,All the test passed.
0,"I believe this code is ready to be deployed, and if it isn't, it can definitely be picked up in the future."
1,"Except for the lack of comments, the code was relatively easy to understand, and was sufficiently DRY."
1,"The Menu test case violates the DRY principle. The team can make use of factories to get rid of code redundancy.
Overall good work!"
1,"The tests describe the code they are testing not the behavior/functionality. Like for
""In this scenario, the controller_action attribute of the menu item is unavailable. In this case, the expectation is that a customized path is assigned to the URL variable.""
This just specifies what variable is being updated and I have no idea what workflow it represents. This is at least a brittle description for a test. Suppose tomorrow the variable is removed or some function ends up calculating the value, while the test it self might pass if the change was passive, the description is now stale and will confuse any user trying to update the tests."
1,"There are some small problems like final newline missing, but overall looks good."
0,The code properly provides test cases for both the Menu class and the Node class(in the Message class). The code follows the DRY principle such that all the test cases use the variables and scenarios appropriately.
0,code style is perfect
0,"The code is ""dry"" enough with some ""before"" statement to prevent duplicate codes."
1,"The code looks very clean. I am a big fan of the set up of the describe/context/it nesting that clearly defines the test cases' purpose. I am confused why there are two classes being tested in this spec. Is the purpose of this class to test Node or to test Menu? If two classes are being tested they should perhaps have separate rspec files to make clear the point. However, the actual syntax and implementation of your tests is beautiful."
0,good job
0,Well-written and self explanatory.
0,"From the pull request, it is clear that the team wrote test cases for the menu model and achieved a 100% coverage that checks for most of the edge cases. The variables included the mock instance have been adequately used for testing the methods."
1,"Not sure what ca_test1 really is.
I also didn't find an explanation in the write up for ""node"""
0,"The team has worked well on changing magic numbers to reasonable variables. For example, 1 to item."
1,The code follows the DRY principle and the Ruby style guide for writing the test cases. The code could be improved by providing comments. The code contains optimum length methods and the variables and functions have been properly named.
1,They add a lot of tests but they did not mention which test they plan to do in the Test Plan section.
0,All the tests passes with 100% test coverage. Great work!
1,Again the test plan is not about what they test in the Rspec test.
0,wonderful job with 100% coverage
0,"The wiki document coherently specifies the overall procedure adopted by the team for the project. From the page, it is seen that the team have given a general overview of the project scope and additional functionality and references used towards the working of the project."
0,The writeup Problem Statement section is very clear about what their work related to.
1,"I felt the section ""conditions tested in menu"" could have been more verbose."
0,"I think this team has done a nice job on the writeup of unit test, which contains every functionality of their work and is easy to understand."
0,"This wiki is the most comprehensive one I've come across. Right from the basics of Expertiza to unit testing to developing and explaining the test cases, everything has been done to perfection. Also, the result and the explaination for choosing the test case is provided, which is very much appreciated."
0,They have clearly state what the platform is and what they have tested.
0,"The wiki for this project contains tons of useful information about testing and rspec. I am not sure that some of it needs to be explained to the current extent (example: what unit testing and TDD is or the environment set up). They are nice to include but maybe less as the purpose of the project is not to educate on those topics. Overall, this wiki did an outstanding job of describing the purpose of the project."
1,"The topic assigned to this team is Unit testing on menu.rb. So, they had to create Rspec tests for the methods in the model file menu.rb in the new file spec/models/menu_spec.rb. The team has precisely tested the functionalities of every method including all relevant scenarios (as contexts) of both the nested class Node and the enclosing class Menu.
The names used for mock objects and literals are intuitive and follow the Ruby's convention. There were a few issues regarding incorrect indentation and the verbosity of the spec code in the previous round. The team has rectified those in this round.
In my view, giving additional comments for code in rspec is superfluous as the tests are already embedded with information on what it intends to do through the use of 'describe', 'context' and 'it' methods. 
The code is DRY through the use of reusable mock objects like menu, nodes, site controllers, content pages, controller actions, items and roles which span across the entire block where it is defined. Additionally, the use of before(:each) method to initialize and set up these objects further DRY's up the spec for the methods."
1,Overall well written code. Use of factory bot reduces code redundancy in building test cases. The team could have reduced the code redundancy inthe menu method test example.
1,"Review 1 comments weren't addressed. Better name could have been used than ca_testx. Also scenarios test the code and not the behavior- instead of- ""when x happens, this method does this"" we have - ""x happens so y contains this"". This isn't maintainable as changes to implementation will break/stale out these tests."
0,They do not have these problems in the first round.
0,The code follows the Ruby style guide and makes good use of the Better specs documentation for writing Rspec test. The team has also made an extensive use of the describe and construct contexts which helps to understand the code written.
0,"The code is well written.
No suggestions."
0,The writeup was really well explained.
0,well done! 100% cover.
0,"Their code is pretty good, and they solved most of the problems."
1,"The code is almost perfect except for the lack of proper commenting. The author has not improved or updated the ocde since the last review, as the last commit was about 11 days back."
0,There are some new commits in the 2nd round.
0,modify some to make it drier.
0,The writeup is very detailed and gave me a good idea of what was going on with this project.
0,"No new commits were found. But this was because the project was already done and did not need any changes. 
No suggestions."
0,"Yes, the code climate issues were resolved."
0,"Yes, new commits were added in the second round to fix the code climate issue"
0,There was a commit during the 2nd round. This was made after the user codeclimate pointed out a few issues with respect to the indentation and lengthy code.
0,"Yes, this team has been keeping push new commits during the 2nd round."
0,"As mentioned earlier, no new commits were added by the author."
0,"I'm not really sure how to categorize this project, but it seems to be structured and implemented properly."
0,2 Commit during 2nd round.
1,This project does not deal with UI
0,100% coverage
0,"The team's test plan includes running the oscillator binary file using the command ./oscillator. This will run the oscillator.rs where various oscillator nodes corresponding to sine, square, sawtooth and triangle waveforms are generated. Hence, the user will be able to listen to these waves after a definite interval."
0,"Coveralls shows the following :

Overall coverage increased (+5.5%) to 42.266%

The coverage of menu.rb has increased to 100%. Great job team!
No suggestions."
0,The team did not add or improve any team cases from the first round. The full path coverage of 100% was already achieved in the first stage.
0,"They add test cases for the first round and the coverage increases, however, they did not add more in second round."
0,"Yes, new commits were made during the second round."
0,Yes new code was added and committed during the 2nd round that implements oscillator node example to exercise different oscillator types and generate triangle waveform.
0,"Yes, It was committed and the changes were merged"
0,This code seems to be well structured and written
0,The code was very well-written and up to to servo standards.
1,The travis report shows failing case implying no coverage there.
0,Well written with understandable content
0,The commits show equal contribution by all team members.
0,no new added tests but the team had managed to get 100% test coverage in first round.
1,"The team has completed the missing code in the file oscillator_node.rs which generates different wave forms like sine, square, sawtooth and triangle. They then created the file oscillator.rs that generates objects and calls methods to run the different oscillator type examples. The code in both these Rust files have good comments that clearly explain what every snippet does and the significance of variables. This made it easy to follow the syntax and semantics of a new programming language like Rust (Rust is a systems programming language that focuses on memory safety and concurrency). The variable names used are intuitive and the code is well indented. 
One issue that I can point out here is that the code is lengthy and complex with a lot of redundancy; especially those that define the audio context, destination node, oscillator and a few other local variables in the file oscillator.rs are repeated for every oscillator waveform and can certainly be encapsulated in one function that can be called only once in the file."
0,"The team's project is unit testing the menu.rb model file. Hence they added Rspec test code in spec/models/menu_spec.rb.
The pull request indicates that the overall coverage increased by a significant 5.5%.
The report tells cites that 5779 lines have been covered and 13673 lines are relevant."
0,"Yes they have add some test cases, and the coverage increased."
0,"Yes, the team did added test cases, which have been clearly mentioned in the write-up. Although the results image isn't clearly visible, but it is still enough to figure out the team passed 100% of the test cases."
0,This team already had full coverage. I am not sure how to answer this question as new tests were not needed.
0,cover all!
0,"The tests execute perfectly well and this has been demonstrated by the video.
No suggestions."
0,The code coverage of 100% satisfies the minimum criteria. It works as intended which can be seen in the video. The tests covers all the scenarios for passing them.
0,They covered all the scenarios.
0,All scenarios mentioned in the writeup are properly covered.
0,"Yes, everything works. Well done!"
1,"The test cases have covered all the scenarios that I can think of including the cases when the objects passed as parameters are nil.
For example there are scenarios covering the cases when the objects like controller_action attribute, site_controller variable, content_page, menu items, parent id are nil objects; and also scenarios when URL of controller action is unavailable, when the by_name hash does not contain a given node name and when a menu id is not present in the @selected hash."
0,The new features work as expected.
0,"Yes, it works as intended"
0,"As mentioned above, the team did a really good job at this. The writeup talks in detail what all tests did the team implement, and from the pull request, we can make out that the team was pretty consistent with their efforts."
0,written up is also a brilliant work!
0,"The writeup is written in a verbose manner. The test plan is also mentioned. 
No suggestions."
0,The writeup is complete and comprehensive in that it fully covers the given functionality. It clearly and adequately indicates the working functionality.
1,"The writeup overall is good, but they did change the problem related to test plan like I mentioned last time."
1,There has not been any changes after first round in the writeup. So my opinion remains the same as it was in the previous review.
1,"The write up starts with introduction about Expertiza, Test Driven Development and Unit Testing. It then moves over to describing the problem statement, team members, test plan and implementation that contains detailed documentation on the procedure to set up the Expertiza environment, functionalities of Menu model, sample views , declaration of mock objects as test entries and finally the conditions tested on each of the method of the Node and Menu class.
The various methods tested on the Node class include initialize, setup, site_controller, controller_action, content_page and add_child. Similarly the methods tested on the Menu class include initialize, select, get_item, get_menu, selected, selected? and crumbs. 
The write up also includes the screenshot of the Rspec tests that were run. The screenshot of the SimpleCov coverage report is blurred and not readable. 
The write up ends with concluding remarks, learning outcomes and References.
Overall, the documentation was very precise and clear with all the information needed to understand the code on Github. The authors could have included and highlighted how to run the Rspec code since their project specifically deals with unit testing. Another apparent issue that I can point out is the quality of screenshot."
1,"The write-up is good, but it doesn't feel much refined or improvised after the initial edit. As mentioned above, the image isn't visible clearly, which means that it wasn't reviewed much after posting. But apart frm that, the flow of the write-up is very effective, in fact one of the best that I've reviewed. The concept of giving a higher lvel view, and then diving deeper into the implementation is very subtly applied."
1,"The Wiki should not include Conclusion and learning outcomes part, it is not a report of the project, but a page to show what the project itself is."
0,Fantastic wiki! Extremely informative about your project.
0,"The build can be definitely deployed once the Travis CI issue has been fixed.
Suggestion- Rectify the Travis CI issue."
0,meaningful test
1,"The team has worked on achieving the path coverage by taking the edge cases into consideration. But, as most of the builds have failed, it may need a working deployment for it to being deployed on the server."
1,Once travis build passes the project could be merged. I have seen specs in the existing code base that are very implementation dependent so this won't be an issue.
1,I believe this code is ready to be merged once the Travis CI passed.
1,One check needs to pass to get deployed.
1,"The team has created test cases for unit testing the model file menu.rb. The test cases are meaningful and are getting passed. Once the Capybara error quoted in the 3rd rubric gets fixed, the current code can be merged into the repository. Since the team's project is unit testing and does not concern modification or augmentation of any feature, there is no question of deployment to production server."
0,"Yes, if must be, they must need more test cases ot cover some edge cases."
0,"Yes, the code is perfectly fine, and is a great start for the team which would come in the future to follow-up with the work on this."
1,very few conflicts
1,"The travis CI test did not pass.
Suggestion: Rectify the Travis CI issue."
0,"Yes, they have improved after the last review"
1,Travis CI build indicates that the tests have failed. The code climate issues in the Danger Bot also did not pass. The team must look towards cleaning up the code.
1,The Travis CI did not pass this time.
1,1 check is failing so the build has not passed.
1,Some cases yes but most cases it needs more documentation
1,Please explain your test work rather than just paste your code.
1,The wiki page is divided into some great sections that provide details about the project. I appreciate that the team provided actual code snipits along with explanation of the test to afford the reader a deeper understanding. The first paragraph in the design section is a bit hard to follow. It would be helpful to have this explanation accompanied by the tests these stubs were associated with and/or the actual implementation of these stubs for a better grasp of their purpose. I would recommend combining the test and design sections for a easier flow of reading and following test implementations. Thank you for the Results section of the wiki that wraps up the project and is an easy point of reference for the reader to see the outcome of the project.
1,Travis build failing at ./spec/models/menu_spec.rb:120
0,"Yes, they have passed the Travis CI."
1,"The build #6205 of this project failed in Travis CI. 
I checked the conflicts and the failures that caused the build to fail, and they are:
1) assignment function creation page is able show tab due deadlines
     Failure/Error: JSON.parse(child_nodes)
     
     JSON::ParserError:
       A JSON text must at least contain two octets!
     # ./app/controllers/tree_display_controller.rb:96:in `child_nodes_from_params'
     # ./app/controllers/tree_display_controller.rb:207:in `children_node_ng'
     # ./config/diagnostic.rb:11:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   /home/travis/build/expertiza/expertiza/vendor/bundle/ruby/2.2.0/gems/capybara-2.17.0/lib/capybara/session.rb:145:in `raise_server_error!'
Finished in 3 minutes 27.2 seconds (files took 7.04 seconds to load)
55 examples, 1 failure, 11 pending
Failed examples:
rspec ./spec/features/assignment_creation_spec.rb:233 # assignment function creation page is able show tab due deadlines
I also noticed that there were many features that are pending to be implemented (which do not affect the suite's status) They are:
 1) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner declining the invitation makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:29
  2) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner accepting the invitation when the team is not full makes requester joins the team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:34
  3) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner accepting the invitation when the team is already full makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:38
  4) team invitation when current assignment is a team-based assignment with topics on teams#list page (instructor end) shows a list of students who do not have a team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:62
  5) team invitation when current assignment is a team-based assignment with topics when a student access studet_task#list page of this assignment contains 'Your team' link on the page
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:14
  6) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) shows a list of students who do not have a team and team owner can invite these students by clicking the 'invite' buttons
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:44
  7) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee declining the invitation makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:47
  8) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee accepting the invitation when the team is not full makes invitee joins the team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:52
  9) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee accepting the invitation when the team is already full makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:56
  10) team invitation when current assignment is not a team-based assignment when a student access studet_task#list page of this assignment does not contain 'Your team' link on the page
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:68
  11) assignment function Due dates tab Able to create a new penalty policy
     # Temporarily skipped with xit
     # ./spec/features/assignment_creation_spec.rb:682


1) timestamps for student's submissions when current assignment is in submission stage when current participant does not submit anything yet displays due dates of current assignment in student_task#list page
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:14
  2) timestamps for student's submissions when current assignment is in submission stage after current participant has uploaded a file displays file names with its timestamps
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:23
  3) timestamps for student's submissions when current assignment is in submission stage after current participant has submitted a hyperlink displays hyperlinks with its timestamps
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:18
  4) timestamps for student's submissions when current assignment (with single review round) is in review stage after current participant finishes an author feedback displays a link named 'feedback' with its timestamps (you could redirect to that feedback by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:36
  5) timestamps for student's submissions when current assignment (with single review round) is in review stage after current participant reviews other's work displays a link named 'review' with its timestamps (you could redirect to that review by clicking the link) 
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:30
  6) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant finishes an author feedback displays a link named 'feedback' with its timestamps (you could redirect to that feedback by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:58
  7) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant reviews other's work in round 1 displays a link named 'review' with its round number (1) and timestamps (you could redirect to that review by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:45
  8) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant reviews other's work in round 2 displays a link named 'review' with its round number (2) and timestamps (you could redirect to that review by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:51
  9) badge system when a student receives a very high review grades assigned by teaching staff (higher than 95 by default) assigns the 'Good reviewer' badge to this student on student_task#list page
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:25
  10) badge system in assignments#edit page has a tab named 'Badges'
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:13
  11) badge system in assignments#edit page when switching to 'Badges' tab allows instructor to change the thresholds of two badges (by default is 95) and save thresholds to DB
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:16
  12) badge system on participants#list page allows instructor to view badges assignment statuses of all participants
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:29
  13) badge system when a student receives a very high average teammate review grade (higher than 95 by default) assigns the 'Good teammate' badge to this student on student_task#list page
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:21
  14) expert review when current assignment with vary-rubric-by-round supports expert peer-review expert review feature works correctly
     # Not yet implemented
     # ./spec/features/expert_review_spec.rb:28
  15) expert review when current assignment with single review round supports expert peer-review expert review feature works correctly
     # Not yet implemented
     # ./spec/features/expert_review_spec.rb:14
  16) review mapping show error when assign both 2
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:83
  17) review mapping calculate reviewmapping from given review number per submission
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:102
  18) review mapping calculate review mapping from given review number per student
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:95
  19) review mapping show error when assign both 0
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:89"
1,"Yes, the build passes Travis CI. No, it did not had any conflicts. There was only one message, which was a warning, but apart from that, it everything seemed perfect."
0,Nice work!
1,"There must be some test cases that should have been covered according to Travis CI. Also the build has failed. However, the team claims that some of the tests are running locally. If some of these points are looked upon, the code would be ready to be deployed on the main server."
1,"The Travis CI build does not pass. 
Suggestion: Team should have rectified this."
1,"No, Travis test did not pass. In fact, I can see test failures for each commit. Continuous integration tests has failed."
1,Travis CI build is failing.
0,No there were no conflicts and do not need to be resolved.
1,Travis CI tests have failed. But there are no conflicts and the build is ready to be merged with Master branch.
1,"Because of the merge conflict in gemlock file, it is not merged and travis CI has not run. 
i believe they ran bundle update and committed the file which should not happen as it updates the dependencies and might break some features."
1,"The Pull request shows that the code has failed all the checks. Therefore it should not be deployed. 
Suggestions: Rectify the code climate, Travis Build and the merge conflict that is being displayed on the Pull request(Gemfile.lock conflict) . Once done, the code could be deployed. Functionality is working fine, no doubt but build must not be deployed unless the above issues are resoled."
1,"Not sure, since could not replicate."
1,"Build issues to be fixed. This pull request is not in ""ready to merge"" state."
0,"Yes, it works perfectly"
1,"I think User experience and code readability are as imp as producing a working code. So based on how urgent is the requirement for this functionality, I would prioritize refactoring the Notices and Display messages to more appropriately indicate what action was taken when we try to add a participant to the assignment or import using a CSV file. Secondly improving the comments as explained with an example in the first question."
1,"Needs some work, code climate changes, a bit of DRYness and a passing CI is needed."
0,"Yes , I think that the code can be deployed"
1,"The writeup is written in a very verbose manner. They still haven't added the test plan which was missing. 
Suggestion: I feel that the test plan should have been added explicitly."
1,"Writeup is descriptive. But missing the following:
1. Screenshots of implementation
2. Steps to replicate the problem 
3. Instructions not provided.
4. Too many sub topics for solution implemented"
0,"Very detailed.
Great job."
0,The writeup was written very nicely in the first round itself.
1,They should have added the code as a part of the writeup instead of providing links to github commits.
0,"The write up is well documented and covers all the needed information covering problem statement , a detailed explanation of how the functionality is implemented with what changes have been made to the different files and test case that they have added."
0,"The functionality works fine. Good job team!
No suggestions."
1,Could not find steps to replicate on UI. Documentation does not mention steps how to test the feature. More information required as I was not able to follow the steps
0,"Yes, it looks fine to me."
0,The system operation works well as intended.
0,"Yes, this does work properly"
0,Yes everything is working as intended
1,"The team added a test case. However coveralls shows the following. 

Overall coverage decreased (-17.2%) to 19.566%

I interpreted this as as decrease in coverage."
1,"The team has added one test to check if email is sent or not. However, the coverage as I can see on Github log is not increased."
1,"Yes, they have added a few new test cases.
But all scenarios are not covered."
0,The team has added test cases. The test coverage has increased.
0,"yes, team has added the test cases and they cover the portion tp check whether the email has been sent to or not."
1,"Test case has been added, but Since i cannot run it locally, i am not sure if it is passing or not."
0,"They have added the test cases with context as ""when participant is added to the assignment using CSV"" and the test case covers the required functionality that was intended to be  implemented"
0,There is code committed during 2nd round.
0,No new commits as fix was delivered in first round.
0,2 new commits - to add additional features.
0,Two commits were done during the 2nd round.
0,There are 2 commits
0,yes new code was committed during the second round
0,"Impressed by the coding and the way the solution was implemented. They implemented a complex feature in simple lines of code. Coding standard has been followed, naming conventions are followed and code is formatted."
0,"The code is well written.
No issues with naming conventions/coding style."
0,"The code was well-written in the first round itself. The method names, variabble names and class names are intuitive and suggestive of the functionality."
0,"Yes, I feel the code is written in a good format. I checked the changes made by the authors and didn't find any bad naming or anything else."
1,"There were some issues which I reported regarding comments and Notice messages displayed to User which needs to be improved. But they haven't been incorporated. It is not a blocker but definitely an important change to improve User Experience and better code readability.
For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later."
1,There is some repetition of code but overall code quality is ok. There are some comments from the professor which should have been addressed.
1,"They have kept up to the standards of the goof coding practice , like they have given reasonable  variables names and functions name which makes it easy to understand what is the function supposed to do. However, they haven't added the comments"
0,"Yes, all the have done are shown in the github link."
0,The writeup explains the implementation approach for every functionality that they implemented.
1,"Yes, the writeup explains the problem statement the solution implemented. But snippets of code not added and screenshots missing too. Too many github links. Could just add some snippets to make it more readable."
0,"Yes, the bug to fix flow is very well explained.
Comprehensive and easy to understand."
0,The implementation strategy is clearly discussed in the writeup which is easy to follow.
1,"Code changes does not follow the DRY principle in atleast two places.
Also, the comments in the code are not helpful.
All code comments are like ""# E1834 Fall 18"" which does not explain what is the code does, it only says when the code was added. Such comments may be removed."
0,"Yes each topic description starts with what the current issue is, what are the changes made and how is it impacted and what is the end result. Nicely Articulated"
0,"The report mentions all the required details like the problem statement , the old version of the code and the improved version of the code and how well it is improved and implemented , thus the report is also very well articulated"
0,Maybe add the code to wiki.
1,"The details regarding testing are mentioned in the writeup. But I did not find anything about the Test plan as such, in the writeup. The assignment_participant_spec contains a test. One edge case has been considered. I feel that the Test Plan should have been mentioned in the writeup explicitly."
0,Yes conditions are tested well.
1,"The ""Test Plan"" section is missing in the writeup.
But, they have included a separate section for explaining Rspec based automated test cases."
1,"The test case, does not handle the case when the imported csv is corrupted."
1,The authors have mentioned the test they have performed but no specific plan is presented. However they have adequate details about what is done and what is tested and how will the corresponding changes look like. edge case descriptions could have been included
0,Test plan is well thought out and thorough.
1,Only one test is implemented and validated for .
0,Very clearly. The authors provide sufficient information about improve the email function(such as when become a participant).
0,The writeup is written really well. The description about the functionality has been mentioned clearly. Good Job!
0,"Very detailed.
All the implementation details are clearly explained."
0,The writeup is written very clearly; gives good idea about the project.
0,"Very well written wiki, well explained with all the nitty gritty implementation details."
0,Documentation is concise and clear
0,Clearly mentions implementation details an the problem descriptions
0,The test has already covered edge cases.
0,Fix is working good. Link is up.
1,The features work. However the notice messages could be improved to state exactly the action that is conducted. Eg. One of the notice message says either user is already added or it doesn't exist. Narrowing it down will be of great value.
0,Edges cases are covered well in the tests
0,All the features are implemented according to the wiki documentation submitted.
0,Clear statement and well layout of the wiki page.
1,"I feel that the code from line 64 to 76 could have been written in a separate function to avoid making the function submit_hyperlink from becoming so large. 
Additionally, the functionality inside the function review_reminder_email could have been separated into 2 different functions."
0,The code follows DRY principle. None of the functions is very long. More comments could be added but not required.
1,"The code changes in ""app/controllers/submitted_content_controller.rb""
line 60-78, could have been in a separate method, such as send ""email to reviewers"". That would make the controller code clean and clear.
 
 
Code changes does not follow the DRY principle in atleast two places.
1.  In app/mailers/delayed_mailer.rb, there is no need to duplicate the code. The code in the new method, review_reminder_email  has been copied from email_reminder. The email_reminder method can be used instead of creating a separate method altogether.
 
2. app/models/assignment_participant.rb and app/models/course_participant.rb uses a same code to send the emails via MailerHelper.send_mail_to_user , that can be put in one place, so that it can be reused in both the places."
1,"Looks good. Comments could be improved. For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later."
0,"Follows most he good coding practices.
Follows DRY
Follows ruby style guide and has no error in code climate as well"
0,Code looks perfect. Follows standards.
0,"The method names, variable names and class names are intuitive and suggestive of the functionality."
0,No naming issues found
0,There were some issues initially when i looked at the code. But the professor has already made those suggestions about naming conventions and following the design pattern and to write appropriate methods in the right models or controllers. Looks good now.
1,There are some repetitions in the code which can be avoided by creating a helper function and calling that function from each place. But apart from that code is well thought out and implemented nicely.
0,Action mirror successfully implemented . Active record is also getting updated properly.
1,"I did not find the test plan in the documentation. However, there were details mentioned about the tests that the team wrote. One Test related to the issue has been written in the assignment_participant_spec file. The test works works properly. I feel that the Test plan should have been explicitly mentioned in the documentation."
0,"Yes, unit tests Rspec are provided."
1,"Most of the cases are covered in ""should send an email to the participant"" test case.
Reviewer part and its mail content checks are not covered."
0,All the cases discussed in test plan have been converted into automated tests.
1,An old test case fails. Looks like it was broken before and therefore not a result of your changes
1,Test plan is not described fully. However whatever is mentioned in the wiki doc has been implemented via Rspec. But there are some previously running tests which are failing because of the changes.
0,All test cases are currently passing
1,Not all changes has been verified successfully. few code climates rejects has happened as well.
0,The build passed in Travis CI with no conflicts.
0,The travis ci test passes.
1,"No, build pass did not pass Travis CI"
0,"The build has successfully passed the Travis CI test and there are no merge conflicts present in the pull request. However, there were a few code climate issues which I think can be easily fixed."
1,Few minor issues with the build which can be ignored.
1,"No, It did not pass travis ci and there are many conflicts that must be resolved."
0,Pull request build passes well and there are issues.
1,Travis says some tests have failed. No conflicts though
1,Build did pass successfully. Could have written version specific code to avoid errors
1,"I believe this change that affects the system as a whole, needs more test to be performed in all affected tables and functions to be sure, no other part of the system is broken.My opinion is that, once all parts of the system test is done, corresponding to this centralized db change the code can be deployed to production."
0,"Yes, just fix the few issues present and that should be fine for it to be merged into main line as the feature seems to work and there isn't any major code issue."
1,"According to write up, it's good to go but since there is no deployed link I couldn't manually check."
0,"In my opinion, this team has done pretty good work and the code looks like ready to be deployed on the production server."
0,Its ready to be merged.
1,"As It did not pass the test, it is not ready. For a future team, end of this project should be a good starting place."
1,"Watching the videos, I feel it is ready but no deployment link."
0,I think the changes are tested nicely and seem to cover all the necessary cases. This can be merged into the master branch and is ready for production use
0,"It can be deployed but first, it should be tested thoroughly."
0,The team has considerably improved the write-up. The write-up was very inefficient and dint provide details of the code-base also the video was encoded and impossible to view in Round 1. The team has rectified all these issues with round 2. they have documented their fixed more clearly with screen shots and code this time.
0,"The write up is well written, elaborate, and clearly elucidates both the manual test cases considered as well as the automated tests implemented. Screenshots of both cases were also included as well. Steps for manual testing were clearly written."
0,"Yes the write up is good, if they were able to host it'd have been better for checking the work."
1,Write-up is little vague. Some are not explained properly.
0,Pretty nicely written Wiki. Test Plan also describes how various tests were performed.
0,The write-up is well written explaining all the steps undertaken to make desired changes and displaying how the system works after the changes have been made (with screenshots). They have also added Test plans in the wiki page
0,Yes the code works has expected. it accepts the utf-8 codes now and also parses HTML tags in reviews like expected
0,Looking from videos all the intended features work
1,It was not deployed so couldn't check manually
0,"From the video links that have been shared, it is very clear that the features are working as they were supposed to. Even the test cases are passing. I see no issues with this part."
0,Yes code works.
0,It works as intended.
0,The deployment link hasn't been provided. Though they have put videos for the same
0,My testing shows things seem to be working as expected and documented.
1,Videos provided and the project is not deployed so cannot test from UI. But the issues are fixed and the system is working as expected.
1,Yes the team has added test for the UTF encoding acceptance. the coverage is not 100% and not tested with varied inputs but i believe would suffice for sanity check. Although the description of test in rspec file is ambiguous not clearly mentioning what exactly the test is expected to do. There is no test available for the issue 2 documented
0,Yes the team did add test cases that increased coverage. They are appropriate for the scope of the project.
1,Automated and manual tests have been added and coverage has increased by a very tiny amount.
0,Coverage increased by 0.04%
0,"YEs, the team has included the relevant test cases to test their changes and the overall coverage has increased by 0.04% which I think covers the scope of this project."
0,Video showing test cases passed. Good Job!
0,"Yes, the team has added test cases and it covers all the functionalities and issues."
0,The team seems to have thoroughly tested the use case and the coverage has increased.
1,Test cases added but the video is not very explanatory in itself to understand the test plan.
0,"Yes, the team actively committed to the project during the second round."
1,Yes there were some commits fixing the travis and code climate issues.
0,"Yes, there were few new commits"
0,The team has a really good job of committing their code on a regular basis. There has been some code commits even in the 2nd round.
0,5 new commits were made during second round
0,"Yes, there were many parts of the code committed during round 2."
0,"Yes, a lot of commits were made mostly to fix the issues pointed out by the CI tools"
0,Yes rspec and few changes were committed
1,There were not any bad naming in round 1 as well. Comments could have been added for new additions which is still missing. There has been no DRY issues
0,"The code was written clearly, DRY, and intuitive to follow the intended functionality."
0,Yes some of the issues were fixed.
1,Overall the code looks good with most of the coding standards being followed. However I think it lacks proper commenting and also there were few stray pieces of commented out code lying around. Adding few more comments and deleting unused code would be better.
0,Videos and code explained very well.
0,The code is extremly well-written.
1,The code was not much changed after the first round. They added a few more sanitation check and rspec. Functions are not long enough and understandable.
0,"Yes , it can be deployed and is a good starting point for teams in the future."
1,"Yes, the code already followed all the good conventions earlier, except the lack of proper comments. The code still lacks comments, and the author hasn't made any changes since the last review. But the overall code quality is upto the mark."
1,"The write-up has detailed how the author has done the changes. But it fails to address why the particular direction was taken, in some cases. It would be good to elucidate on that as well.
In ' Solutions Implemented...' section, it would be good to include the names of the files before each code snippet and not just the description so that it is easier for the reader to relate."
1,"The classes where the changes have been done are mentioned. However, it is unclear as to why those classes have been changed and the real pattern behind picking those classes or methods."
1,"The team has explicitly mentioned the classes and the name of the files where they have made changes. However, i would suggest the team to add the filenames above code snippets that they have attached in the write-up. This would make it easier for the reader to follow the workflow."
1,Could have been more eloborate. No mention of design principles or patters used.
1,"The writeup clearly explains the project- a single rejoinder per team for reviews, but does not explicitly say the advantages of having such a system. On the other hand the authors do justify the need to fix navigation issues for giving feedback to reviewers as it results in a user-friendly UI. The modification to summary report to accommodate collective feedback is logical and directly implied if the main problem statement of single rejoinder per team is properly justified."
1,The functionality provided as a result of each issue is not explained. The way of work or design principle is not mentioned.
1,"No, the write-up doesn't describe why certain methods were chosen and written the way its implemented."
1,No mention is made as to why the changes were made in which specific files. A few lines are given before each image but they are too succinct to understand anything. The code is well written but hard to follow (what is the functionality of the code is tough to decipher). Code is well written.
1,They have provided code snippets explaining what they did. No design pattern used or specified.
1,"The writeup mentions about the changes done in the code but not how and why it was done.
Instead, the team could explain each code change more and give a link to the code change(from github)"
1,The authors have just mentioned that the test cases were updated. It would be good if the code diff for the test case modification were also provided so that we get an idea about the kind of changes made.
1,Just a one-line summary has been provided about the testing but it is not clear what the test plan is.
0,"Unfortunately, the write-up does not include a test plan. The team has included the following line in the ""Testing"" section:
""Fixed the existing test cases for the review feedback by a team instead of a team member.""
The team could improve this by adding the test cases to maybe to check whether the ""get_feedback_assessment"" method returns the proper assessment using teamid or not or check whether the summary reports navigation redirects the user to the correct page or not."
1,The test plan does not look complete. It just says Fixed the existing test cases for the review feedback by a team instead of a team member. Could have mentioned the edge cases and how they tested it.
1,"The test plan section just states that the existing test cases for feedback per member is fixed to satisfy the new feedback per team implementation. It would have been effective if specific pre-conditions, edge cases, invalid input values etc are handled. For example, in this case the input with missing team id or one member teams can be used as good candidates to test the implementation."
1,Test plan missing.
0,Most of the edge cases seem to be covered.
1,The authors have considered various preconditions but edge cases are not tested. No test plan has been provided. Some tests have been edited to meet the new requirements. Many conditions have been checked using 'if else' cases which could have been more elegant.
1,Test plan not included.
1,"There is a separate testing section in the writeup, but it does not have much explanation.
Could have added a couple of test case explanations.
Also, a screenshot of a passed test case could work wonders."
1,"The team has written a well structured write-up, but it lacks depth in certain areas. There is need for more background on what an author feedback is. The project description gives a better idea. Please try to include details from there. The last sentence under the 'Motivation' head, ""You should change this to list the team’s collective feedback to its reviewers to a particular assignment"" is a bit confusing. Please rephrase the sentence so as to add clarity to it. 
 
Instructions on how to manually test the functionality is missing. It was difficult to figure out how to navigate to and test the functionality. It would be really helpful to add this in the wiki."
0,"Yes, the purpose of the project is clearly explained."
1,"The team has mentioned the problem statement and the methods which they have implemented to solve the problem.  However, there is a difficulty to follow the workflow since there are no screenshots attached or any video link provided. The team could improve this by adding a screenshot of the updated workflow below the changes shown in the writeup"
1,"I was able to understand what the project does to a certain extent. The writeup could have been more eloborate with views/snapshots of the page before and after the changes. 
It adequately indicated what functionality the work is related to."
1,"This project is on implementing a single rejoinder per team for reviews instead of per participant reviews and also makes the feedback link for reviews more accessible.
The writeup explained the background about Expertiza and the motivation for the project. It then moved on to list the tasks that were implemented and files that were modified in the project. It showed the current and new implementation clearly. The writeup, however, could have quoted the tests done using RSpec and the UI, instead of plainly mentioning the that the tests were modified to suit the current implementation."
1,Code snippets are provided but the functionality that was to be implemented and how has that been achieved is not explained.
0,Nicely written Wiki with screenshots describing some of the changes made.
1,No clear explanation is given as to which files are edited for which reason. Only file names are stated along with technical changes made. The method names and variable names are very well defined ! Kudos!
1,The write up is okay but could be a bit more descriptive. Could have provided screen shots of the changes to help reader understand better. No initial instructions on where to get started.
1,"The explanation is quite good to tell what is the current and the required functionality.
The screenshots placed are not complete, as in they cut the code at the right end.
Instead I would suggest to placed the github link to the code changes, so that the wiki becomes shorter and you can explain each code change better in the wiki. Also, the reviewer can compare the code with your explanation properly if he has the link to the code."
0,"Yes, the problem statement was explained thoroughly. Also, the team very aptly described why the issue needs to be fixed. great work !"
0,"Yes, I followed the youtube link to check the tests and they have tested the controllers."
0,"The write-up was splendid. All instructions were written thoroughly. I did not face any problem in understanding. Also, screenshots guided well"
0,It works fine for the cases tested.
0,Couldn't log in to test the code as no credentials were provided anywhere.
1,"Difficult to test and review the work one since there were no screenshots provided. I was not able to find an instance of a review which could be submitted as a team but not by individual members of the team. Some of the webpages crash after clicking on a particular assignment to view the review report.
Suggestions: The team could explain steps to access the ""review view"", so that manual testing could be done. The team could create dummy assignments for testing. Maybe, adding screenshots would help in the process."
0,"Please add a guide in the wiki where to test if the features work or not. Initially found it difficult in the expertiza page where it has been modified. 
The software works as expected in most cases. Was able to check the following

participant feedback displays author feedback view to whole team
checking feedback assessment
give feedback and edit feedback functionalities in the review view"
0,The features are working as expected in this project. The views have changed to fit the new implementation.
0,Manually tested the functionality of teammate review. Working as expected.
0,I could get things working.
1,The author's work runs smoothly. It could have been better had they provided a short demo video. I could not figure out where were the changes made in the system. They could have written the navigation steps. Directly giving the flow without any context is tough to understand.
0,features are working as intended.
1,"The code seems to work for basic required functionality.
Need to add more number of edge cases with test results where there is a possibility of a failure and a look into the work around is required."
0,The team has done a good job of maintaining the code DRY and as neat as possible. No suggestions to improve.
1,"The comments were sparse. Maybe, coming up with a few words before every method would make the project more understandable."
1,"The team has done well to follow the Ruby Style Guide and has ensured to keep the code DRY. However, my suggesstion is to add comments in the code for the reader to follow the code easily."
0,"The code has all 5 of the following characteristics:
(i) is DRY
(ii) follows Ruby style guide
(iii) is commented
(iv) does not contain long methods
(v) variables and functions are properly named."
0,The code is well modularized and separate methods have been created to provide different functionality. eg: added get_feedback_assessment method to add feedback for a team.
1,More comments are needed because I am having trouble following the code. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Good work in this area.
0,Up to standards with ruby coding practices
1,"The code has comments at the beginning of the functionality.
Could have added some more comments where the functions are larger for followup.
Can add why a certain change in the fetching process was made, so that next time it can be referred while coding further."
1,"grades_helper.rb:62
The parameter id is not descriptive enough. Please consider changing it to be more descriptive."
1,"All the names are reasonable except for a few like the function name ""get_feedback_assessments_for"". It is ambiguous as to what the function will be doing."
0,The team has properly used the naming conventions for variables and functions. The functionality could be easily interpreted by reading the name
1,"A small suggestion , new_feedback --> author_new_feedback
The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality."
0,All method names are suggestive of the functionality they provide.
1,"Everything looks fine, except for a few places where there are issues with indentation."
1,All methods and variables are suggestive of the functionality. The vm_question_reponse table could have been named/edited to be named in a more descriptive way. I do not understand what is the meaning of VM.
0,Naming of classes and variables are apt.
1,"Naming looks fine.
Could probably have used is_submitted? instead of is_submitted."
1,The team has modified the existing test cases to cover the new changes made. But this is not detailed in the Test Plan.
1,"As stated above, the writeup has a missing test plan which could be added by the team for the second iteration of the submission."
1,No cases were mentioned in the Test Plan hence could not tell it is converted into automated tests. Please elaborate it.
0,Existing test cases have been fixed for review feedback by a team instead of a team member.
0,Everything seems to be working fine
1,Testing has been done well. Testing could have been more extensive. Currently the system only tests if the responses are correct for proper input. Blank or no input or failing cases should also have been tested.
1,"There aren't any test cases listed in the writeup.
Can explain the test cases a bit in the github commit message."
0,The code follows standards.
1,"They don not have any test plan, So I can not judge it"
0,the build passes
1,"The code passes for the Travis build as well as Danger Bot. However, it fails for code climate with 3 issues yet to be fixed. In totality, the pull request does satisfy the need to pass the required builds."
0,Travis tests have passed. There were some initial failures but the team has fixed it. There are no lingering failures.
1,The build did not pass travis CI. I did a demo of their project and it seems to work given the credentials provided. THe encountered some minor indentation errors but otherwise the feature addition/fixing part seems good. The test cases written for the controller was very little though. The code coverage was just 14% approximately.
0,I could not find Travis CI
0,"Yes, the build request has been passed."
0,Travis-CI Passes
1,"Yes, the pull request did pass the Travis CI. It didn't has any conflicts with the base branch, but it did have some unresolved issues which needed to be fixed, namely: cognitive complexity was 6, and condition size for two files were too high."
1,"The team gave fixtures for the issues exist, but to make deployment, it is better to add more tests to make sure the function work properly."
0,"Yes, the code can be deployed on the production server as it passes the needed build of Travis CI. The project would work as required to."
0,"Since, the changes are reflecting, it looks good to be merged."
1,Excellent work but the codeclimate build has failed
1,The feature implementation section is good to go. However the test cases can be improved on a lot. That doesn't mean that the test cases shouldn't be deployed.
0,If it works just like in the video then definitely yes.
0,"Yes, it is ready."
0,The code seems ready for merge
1,"The code is almost perfect, apart from the code complexity issues, which in my view isn't very tough to fix. The project need not be done from scratch, and it is certainly a good starting place for future teams to pick up."
1,"The wiki provides enough introductions for this project. According to the wiki, I can get a clear insight about what the project is, what's the issues include in it, why the team do things as the way they said and the tests they give to make sure the functions work properly. However, the description for the first issue is not very clear and makes me confusing."
0,The team vastly improved on the writeup from the first stage by giving a general overview of the tasks taken up and the list of issues present and resolved during the project.
1,"Very impressed by writeup. One suggestion: Problem statement is not mentioned thoroughly however, solution is very well ellaborated with screenshots and code snippets."
1,"Overall the write up was not bad. Here were some of the things I believe that could be improved:
Problem Statement;Seems to be wrong. I believe it should be included in the background as it merely describes the files that they are supposed to work on."
0,"I think it is well written, quite understandable. It clearly and adequately indicates the working functionality. I can understand what the project is about."
1,"The write-up is very self explanatory. It successfully covers each and every aspect of the work done by the team, and also, to an extend, delvers what mindset they had while working o the project, which is very great. Just one sugestion is that, instead of simply dumping the files, they could have made a quick note of what the code in the file does. No one want to go through each and every line of code just to get an idea what it is meant to be."
1,"The team didn't no provide the link for the deployment, but according to the video they provided, the features worked well."
1,The test cases covers the required test scenarios and the system operates as intended. The video file submitted though seems to crash. A link could have helped.
0,"Following the steps, I can see the changes implemented."
0,The feature implementation was good. The TA can't edit the rubric of the instructor. But the test cases are very limited.
1,Haven't deployed so could not manually check. Though according video and wiki page it look likes that teh code would work fine.
1,The link does not work.
1,"Yes, everything that the project required to do works. There were a few things which caused issues in the pull request, but none of it related to the functionality of the product to be tested, but rather related to the code complexity. Even the video demonstration clearly shows the changes implemented."
0,The team added test cases for test_case.rb and the coverage has increased. which makes the overall coverage increases relatively a large extent.
0,The team did not add any test cases and the coverage remained the same.
1,"Yes the team has added tests. I am not sure of the increase in coverage as it is not mentioned in the doc. however, the team has very well explained how the tests were done and what areas they have tested."
1,They have added test cases but very limited. The code coverage was just 14 percent.
0,yes the coverage has increased
0,"Yes, the team has added adequate test cases."
0,11% Coverage Increased. Good Job!
0,"Yes, the team has indeed added test case and made a test plan for both the issues that they have resolved."
0,The team add some comments and test cases during the 2nd round.
0,The team did not make any commits from their first round. They had successfully fixed the issues in the first round stage itself.
0,Commits were done long ago and commits are regular. No new commits as changes were fixed in earlier round. Commit titles are well written and not ambiguous.
0,There were a good number if commits in 2nd round.
0,"Yes, 2 commits were done in the second round."
0,"Some New commits, improves the code a bit"
0,"No, no new committed were added during the second round. The last commit was around 13 days back, and no new code has been pushed since then."
0,All the names are used properly and the team adds some comments after last round.
0,The code was well written and implemented the functionalities needed. It made good use of naming conventions and the team worked on improving the code layout by following the Ruby style guide and DRY principles.
0,Code looks good. Well formatted and naming conventions are followed.
1,The code was written good enough. THere were problems with indentation. I have seen some improvement compared to the last round.
1,The code was already very well written. But the author did not made any changes after the first round. The lack of proper commenting still remains.
1,"The team has explained how to fix the issues but not clear enough, it is confusing what is each pre-existing methods they have used done and why these methods were used."
0,"The writeup enlists a thorough report from the environment setup to the project build. It includes a proper check on the problem at hand, the approach to achieve the goals and the solution implemented."
0,"The writeup describes the problem statements, solutions and the 'why' and 'how' of the problem. The screenshots were clear."
0,The document explains the different files which they had to change along with why the previous version was not up to par. Then they show their implementation of the file
1,"Yes, the writeup explains explains how the authors did their work and they have mentioned the steps behind each functionality. Design principles are not used but overall quite nicely explained."
0,Explained Clearly
0,"Yes, as mentioned earlier, this part was very aptly implemented by the author."
0,The plan gives enough roles for the first issue to test if the code works well.
1,"The writeup provides a gist of the project implementation stages. Though it does specifically include a test plan section, it has the list of tasks performed while testing for various scenarios as a part of the issues to be resolved section."
1,"Yes, the tests are thorough. Needs some formatting in the code."
0,"No test plan, even though they did have the task of testing the questionnaire controller"
0,The Test Plan along with the existing issues and its solution is given.
0,Test plan is nicely written and implemented
0,"Yes, the author did include test plans and test cases. Also the test cases seem sufficiently exhaustive to cover most of the edge cases."
1,"The description for the first issue is confusing, I am not very sure about what the function of the old version looks like. I am not sure what mean by the instructor under the instructor."
0,"The wiki document provides the necessary details about the project and the tasks performed by the team. It gives a general overview of the project implementations, the functionality carried out by the team."
1,Excellent writeup. The instructions were clear. The screenshots were apt. One suggestion: Could be shorter and precise.
1,"The writeup was clear enough to be understood by anyone familiar with developing or contributing on expertiza. It provided a high level view, and then dug deep into implmentation, which is great since it saves time, and also look concise. But for someone outside the domain of expertiza, it feels too sudden of a transition that it takes time and in many cases other resources to figure out why the author did what he did. But the overall flow and structure was very great."
1,The URL is not working
1,"The link for the work can not be accessed, but according to the video they provided, the features works well."
1,The link is not up. Could not test
1,"The authors work seems to work fine in theory. But unfortunately, the link provided by the author does not work, and hence there was no way to manually test it. But the demonstration video provided was a big thumbs up."
1,"The team should add more comments for the codes include in the two issues, it is a little bit hard to follow what the author want to do without comments."
1,The code contributed by the author contains long functions which are adequate and consistent considering the amount of task that is carried by each function. The team could improve upon the comments to enable high understanding of the flow of code written. The code does follow the Ruby style guide and supports the DRY principle.
1,They have added new test cases and hence code is not DRY.
1,"Except the comments, everything seemed to be fine. The code seemed to lack proper comments, and as a result of which, it took several seconds to determine why the author did what he did. Apart from that, the code seemed perfect. Functions were sufficiently long, and code was DRY enough too."
1,The test code follows standards. Context messages can be shorter and precise.
1,The names are very intuitive and one can easily understand the reason for each of the variables from their names. In addition the test coverage has increased however it is not very good.
1,"The pull-bots CodeClimate and TravisCI suggest there are a few issues with style and integration that need to be addressed, respectively."
1,They test the controller but not the model.
1,None of the controller or model are tested.
1,"Yes, the login / signup module seems to be very well tested, considering the fact that all the three types of users (admins, househunters and realtors) are managed by using the same table. But, there's also a small functional bug. Even if I hadn't regisitered as a househunter or a realtor, I am able to switch back and forth between the roles, which is kind of counter-intuitive in many ways."
1,No test cases could be found.
1,The team has not created any test cases to test the model and controllers of multiple entities.
1,"If company is delete, the house will also disappear, and the realtor need to find a new company. But the README does not cover edge cases."
1,"1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor. 2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company. 3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed.
The README.me did not cover how the system handles all these edge cases. README.md could be updated."
1,"Edge cases are not explicitly handled, but the validations and logic will limit edge case scenarios from affecting the application."
1,"1. This test case is a flaw as an admin can hitherto delete whenever and whatever he wants. 
2. This too is not strongly tested and runs into glitches on doing so. 
3. This too falls through when tested. 
4. The admin can be deleted and edited with. System fails overall when this case happens. Biggest flaw yet unresolved."
1,"(1): when an admin deletes a company which has existing realtors, it shows on the admin page that the company is deleted, but when the realtor signs in, it still shows that he belongs to the deleted company, and is able to update all the profile information of the company. So, it means the company is not being deleted, even when it says so on the admin page.
(2): the realtor isn't able to view any houses except his own company.
(3): No, the inquiries are not auto deleted, nor is the househunter removed from potential buyers list."
1,"When a real estate company is deleted, the respective houses are deleted, the realtors are not. Further, even after deletion, the company of those realtors remains the same. They can even edit the deleted company from their profile and list a house on behalf of the deleted company. When a realtor edits and updates his company after it is deleted, it actually gets created again.
When a realtor changes his company, he can view only the houses of his current company and is prohibited to delete houses of his previous company. This works as expected.
When a house hunter is deleted, (s)he gets removed from the potential buyers list, but inquiries are only partially deleted as in the row is still there but only two columns show data."
1,Deleting a company doesn't delete its houses.
1,"The edge case when a admin deleted the real estate company has  been handled as after the admin  deletes the real estate company the houses listed under that company are all deleted.
 The realtor when changes the company cannot see the house listed under previous company so he would not be able to delete the houses under previous company.
 
No, the readme.md does not contain any details  on the edges cases handling."
1,"Admin should not able to submit an inquiry and put a house in interest list. Also, the user should not able to sign up as an admin. And reply to the inquiry function must use the email system to reply, cannot do it onsite. When creating a company, the user can only choose Raleigh and Cary as their address. Cannot see the house list by other company."
1,Search is not working. Anyone can login as admin. no house picture is displayed if it is saved.
1,"The system works exactly how it is supposed to work.
I could not find any functionalities that are still failing. No bugs or error messages.
It would have been better if the realtor could send replies to inquiries directly from the application than opening a separate mail application."
1,"The system works well in most of the cases, except when the realtor creates his company, and then after successfully creating the company, he get's an option to edit his company details, but then when he clicks the edit button, it redirects to the homepage, and is unable to edit his company info unless he choses to belong to the particular company. A minor bug, but still breaks the consistency."
1,multiple success message still not fixed
1,Except inquiry reply all other functionalities work in my opinion.
1,"Realtors can sign up without specifying a company. This means if there are no companies in the system, realtors can't sign up.
While creating a new company, address field is given as a drop down, with only two options - Raleigh and Cary. Can't specify any other address.
Also, in the create company page, size of the company is again given as a drop down, with limited options. Can't give any other value.
Admin can't create new houses."
1,"The system has all the basic functionalities as per the program description. As per the last feedback, validation checks for invalid data has been added to the application. However, the system still does not have the null checks for field. 
For example: If a user creates a house without adding most of the details, the application breaks.
 https://housefocus.herokuapp.com/houses"
1,Inquiry doesn't belong to either a house or user
1,Inquiry mapping is not done.
1,Relationships have not been defined in the models.
1,"Yes, the system handles all the entity relationships well. There is no mapping table as such, but all relationships has been addressed in correct association degree in the application."
1,"They continued to update their project. However, some changes were made after the due date."
1,"The code is clean and readable, but there's only one suggestion. The page which lists houses (index) and search houses are handled by different controllers, whereas, they could have been easily integrated into one, without compromising code readability. It would have lead to a more integrated and a cohesive web app. In one or two instances, there were several functions performed within a function, which could have been better modularised too."
1,Code is well written. Functions are well defined. Some areas where it can be improved is moving the house search logic from controllers to the respective models.
1,"The code has been implemented in a modular way. However, there are few functions where Ruby naming conventions has not been followed for example :
""authenticateAdmin"" in UsersController class."
1,"Although scafolded code exists, there are no testcases written"
1,"Well, we can say that they have indeed tested the models they have defined in their README file on GitHub. The definitions of the functionalities in the 'db' folders and the controllers folder makes it very easy to follow how they have structured the code.
Also, the way the houses are added, the redirection the houses to the links such as CMU and NCSU websites is very intuitive and well thought out, and thus barring out a few minor mistakes in linking and page definitions the code has a good ability to run for the defined cases specially for the Admin to be failsafe. Only, one complaint though, the whole structure does crumble when one sees that they have allowed the admin to be DELETED. This is their biggest loophole."
1,"The login / signup module has lots of bugs. Like when a user tries to create an account with an already existing username, the application crashes. Also, a user cannot signup as both, a realtor and a househunter. Moreover, there isnt any validtion for the length of phone number, nor the validation for the email address is correct. (for example, it accepts aa@a as a valid email address). So yes, these functionalities in the login signup module could be improved, and these does not seem thoroughly tested. But the search functionality for the houses seemed to work pretty well, and as expected."
1,"No, testing portion of the code seems empty. No testing has been done"
1,"It is surely a very intuitive user interface because the ease of navigation is generally very well defined and the routes.rb file in git hub makes the session linkage explicit. 
Even, so one does fail to understand the empty blanks on their login page since there aren't any blanks at all. So, we get easily confused on what to do. Sign up is not validated for any functionality be it user or admin or realtor and we don't know what to do. 
Luckily, the README File does resolve the dilemma and help us to follow the steps."
1,"The user interface looks pretty, is clean and intuitive. But the placement of menu buttons was rather ""not-obvious"". It took time for me to figure out login / signup buttons, and I also had to actively look for buttons to perform actions after signing-in, which isn't actually much user friendly. Though it may seemed cliche, but I think it is very user-friendly to have action buttons on the content of the web-page, rather than having them at the top inside the header. But apart from that, the simplicity and the look and feel was pretty good."
1,"Admin credentials in README file not working therefore not able to test admin part. UI is confusing, there are multiple success messages displayed. Only ids are displayed in house list and no other info"
1,"The user interface lack multiple navigation functionalities such as it does have any cancel or back button. So, if a user tries to move back or cancel while creating a company, he would be stuck and would not be able to move to any other tab."
1,"The team has followed good ruby coding practices. All the code is neatly written and well indented. However, the code has no comments."
1,"The database schema, especially for the login / signup functionality is very well implemented, and includes lots of features that weren't asked for at the first place. So the extra hard-work is very well appreciated. The db design is very cohesive and seems fool-proof. The rest of the programs and the functionalities follow most of the principles for good ruby on rails coding practices. But, the one thing I find missing was the lack of proper documentation within the code. Given the short time frame, not having extensive documentation and comments within the code is excusable, but there were certain points where I had to go through the whole code to realize what;s happening, which could have been avoided if there was proper commenting inside the code."
1,"The code follows ruby and rails convention, but there are multiple commented files in the project such as logins.coffee and many more which have not been used in the application."
1,Build has not passed and there are two issues which are required to be fixed(code climate ).
1,The build did not pass Travis CI. The reason is because #scores method is commented out from the AssignmentParticipant class.
1,No build isn't passing. There's a test failing.
1,"No, the Travis CI build test has not been passed, but the forked branch has no conflicts with the base branch."
1,The project is almost done but the Travis CI build failed and 2 code climate issues need to fix.
1,Unfortunately the build does not pass in Travis CI and there are still some code climate issues.
1,"it says that the Travis tests failed, but the team mentions that they couldn't get rid of two issues."
1,The build hasn't passed in travis CI. There are  some conflicts that are to be resolved example : SignUpSheet.add_signup_topic will return a SignUpSheet when the topic already has deadlines
1,Need to fix the build issues and code climate issues(bank lines and indentation errors).
1,"The project fully covers the functionality for testing the participant. 100% code coverage is achieved.
However, the biggest problem is that the #scores method is commented out from the class AssignmentParticipant. Obviously this will break the existing code that relies on that functionality.
Furthermore, the future testing will possibly become complicated because the object under test for participant_spec.rb is an instance of AssignmentParticipant as opposed to Participant."
1,"The project is almost perfect. But, as mentioned above, they need to fix some issues."
1,"Though the code works well. The build does not pass. Also, some more edge cases will make the testing of the model complete."
1,"The writeup explains what is intended to be done. However, still the information is somewhat incomplete."
1,"The write-up did cover about the efficiency of Servo to render webpages quickly and smoothly when compared to Mozilla's other rendering engines. Servo does this using parallel layout, styling, web-renders and constellation and in turn sandboxes the processes, threads and tasks that allows the browser to fail better, hence making it more robust and secure. It justified the use of Rust to rewrite C++ and effectively the browser as well."
1,"It is not explained why the work was done, the way it is done. But the implementation looks promising"
1,The writeup includes the code used but it would help if the Wiki also explained how the authors came up with that solution
1,"The writeup clearly explained the need for the off screen canvas API; however, the explanation of how the feature was implemented was too shallow. What is in those .rs files?"
1,The writeup does not include any test plan.
1,The project didn't involve any kind of testing.
1,"The write-up has been written well including the problem statement, test cases, and the test result. However, I feel that information about tools such as 'Rspec' and concepts like ""BDD"" is not that necessary as the reader is most likely familiar with these concepts."
1,"The wiki page includes all the information. If they can add more details about how they test the methods, it would be better."
1,"The write-up does not include a test plan section. If a test section had been included then the different scenarios, pre-conditions, edge cases and invalid input values would have been dealt."
1,No Test plan was provided
1,No test plan.
1,There is no test plan section or any information on how or if the feature was tested.
1,"writeup is comprehensive and very carefully written. A lot of details included.
I would suggest to add more examples, and more explanations of why there's such mock cases"
1,"The write-up gave a good introduction to the project by providing the background information about the Servo parallel web-engine project by Mozilla for web page rendering and Rust programming language to execute HTML5 and CSS3 parsers. It then highlighted the OffscreenCanvas API that can be used to generate frames and also return the rendered image using the transferToImageBitmap() method. The writeup covered how web workers can be used to implement OffscreenCanvas API to render images as an independent process isolated from the webpage. The problem statement of of creating OffscreenCanvas and OffscreenCanvasRenderingContext2d interfaces with OffscreenCanvas Constructor, properties (width and height) and getContext() method was defined. The use of Web IDL to describe interfaces for web browsers was briefed and that was followed by the code flow and the code snippet of the two Web IDL files namely- OffScreenCanvas.webidl and OffScreenCanvasRenderingContext2D.webidl
While the write-up was cogent and clearly explained the work done, it could have elaborated on the implementation of the methods like transferToImageBitmap() and how the interface is integrated into the system to render images in a webpage using an isolated web worker."
1,A little too brief.
1,The Wiki lists a lot of terminology but few with how they do this project.
1,"Yes, the Wiki is clear and explains most aspects of the project but there could be a better explanation for the IDL files that were added and the corresponding changes that were made because of adding these files"
1,"The background sections were fairly clear, but the details could have been fleshed out more. Some description of the code would be better than a dump of the code."
1,"Even though the build is failing in Travis CI, there are no conflicts. The controller tests are failing as there is no flash message that is appearing. Please look into this."
1,"The code is running. However, few functionalities are not there."
1,I have no idea how to test the code manually.
1,"I cannot yet implement the environment to do the UI. The work looks very good. As test case, they have covered all scenarios."
1,The build fails and there are several issues and warnings that need to be fixed.
1,The build test failed in Travis CI. However there were no conflicts with the base branch.
1,Few of the travis tests have failed. The issues were code guidelines and spacing issues.
1,The features cannot be tested until the final changes are completed
1,"The implementation does not seem to be working, so it would be difficult to test this. Also, I am no Rust programmer, so there's that."
1,"The code is really well written and follows Ruby Style Guide, except some areas."
1,"No, according to Travis CI the build doesn't seem to have passed due to some bundle install errors. Although they surely should have resolved it because the code wouldn't be able to achieve the above results as stated by their video and wikipedia page."
1,The Travis CI build has failed however there are no merge conflicts. You could have fixed the Travis CI build errors in phase 2.  Still overall good job.
1,"The build does not pass in Travis CI check.
 
They build job for TESTFOLDER = controllers is failing currently. I would suggest them to investigate the cause of this."
1,"On checking the pull request, it shows the Travis CI check has failed."
1,The team has not implemented any function in the pull request. They have basically defined the ImageBitmap interface that will be implemented in the future by Servo. There can be a few comments to describe their code and about the previous implementation.
1,"All codes construct perfectly, though not much code I could see in the git."
1,There are almost no comments.
1,Coverage is same as was in the 1st round. No further addition
1,"No. The code needs to be cleaned up before it can be deployed. The build failure needs to be fixed. Also, as the project is not deployed, manual testing could not be done."
1,"If they can write more test cases to test their code and make sure their code does not have bugs, i think they can deploy their code onto server."
1,no new tests were added. coverage was achieved in 1st round.
1,"I believe that code, as it stands, is not ready to be deployed. More comments are needed and the code is hard to understand, so even though the changes are small, one might need to see id the changes can be simplified. I believe testing can be more thorough too."
1,"Some improvements are required before deploying it to the main server. There are changes suggested by codeclimate which need to be looked upon. The future team must ensure to pass the build. There is scope for the new tests to be written and code that would improve the overall coverage. Overall, the team has done a commendable effort with respect to the difference in the first and second submission"
1,"Unsure in this regard since they neither have the deployment neither the GitHub link to their repository, and also the coverage and the Travis CI say otherwise. Even so, in their video they show in proof that everything runs. One does wonder though, how to test without actually having the links of the repo."
1,Once the issues with pull request are fixed it can be merged.
1,they didn't add test cases in the second round
1,"There's no new commits after the first round review. But for the first time, there's already almost full coverage.
The tests covered the range of the project very well."
1,This code is ready to be deployed if they ensure that variables are renamed to resemble their actual functionality.  No big issues as such. Resolves the problems well.
1,"The code can be deployed once the Travis CI passes and there are some 6 minor warnings to be fixed in code climate. There are 4 failing and 1 successful checks, the team needs to make sure these checks pass in order to be able deploy the code onto the production server."
1,The build did not pass due to some minor inconsistencies.
1,"The team had not added a link to the wiki during Round 1 of the review. 
'Issues to be fixed' section seems incomplete and not the right kind of writing. Please review and try to add more details on the issues that are being addressed.
Otherwise the wiki looks good with relevant diagrams and code snippets."
1,"The newly added code includes the attribute height, the getContext() and transferToImageBitmap() method in the OffscreenCanvas.webidl file.
The name height given for the attribute height for the Canvas makes complete sense. Similarly the name getContext() given for the method that returns the OffscreenRenderingContext is also intuitive. The name transferToImageBitmap is a little long which might be the code less readable if the method is called often. Instead the accessor convention of using getImageBitmap() feels more intuitive and also logical at the same time."
1,"It is very well written with a nice flow diagram.
The second video link on the wiki page is unavailable, which can be fixed/removed in case it is legacy."
1,"The newly added code has not yet been accepted in the pull request but it does build. The corresponding rust implementation, however, has not been added and so the test coverage hasn't improved by much."
1,I don't see any test plans.
1,"The team did not have a writeup in the last submission. In this submission, they do have a writeup with the problem statement, the files modified, approach to solving the problems, and test plan. This seems to be a significant improvement from the last submission. As for the screencast links, I think one link is absent and the other one is a YouTube video of the same project submitted last year. Please check this, I think you have added the wrong link.
I would also suggest that a references section needs to be added to the Wiki page so that the deployment, pull request and other project reference links are shown."
1,The pull request does not show any Tests done on the project
1,Could not find any
1,"The writeup is great. I could get all the info i needed to understand the problem. Could refine the describing issues section a bit as I could see sentences like "" Please take a look at the Github issue for suggestions on how to solve this."""
1,"One of the videos linked in the wiki has a broken link. The other link shows the functionality is working correctly. 
Even though the wiki has given instructions to test the functionality, the team has not deployed there code. This has blocked manual testing."
1,Test Plan hasn't been defined because the testing is carried out by Mozilla
1,Everything works as per the video linked in google drive. A link to the same can be added on the wiki page.
1,"Yes, the code has been refactored to cover all the intended scenarios and the tests have been very well documented along with testing the edge cases as said from their videos. Their Rspec however doesn't seem to test many test cases but that's expected I guess given their problem statement."
1,The system works well and performs all the operations correctly. -1 for the aforementioned errors in code.
1,Everything in the pull request failed (although this is not an expertiza project)
1,Still did not pass the Travis CI
1,"I don't think this project is the type that would be deployed on a production server, and I can't say it's ready to be added because every thing in the pull failed on github."
1,I think that they need to fix some things that are mentioned by travis CI. Once they do that they are good to go.
1,"There can be a few changes incorporated to the code- especially the name mismatch of the web IDL and corresponding Rust file needs to be fixed. The unnecessary comments have to be removed. Moreover, the pull request shows that there are a few changes that have been requested and all checks have failed. So, the code can be merged and deployed only after these are incorporated."
1,Did not even pass the auto test.
1,"As suggested by the Mozilla team themselves, a few errors need to be rectified. The final code also needs to be formatted using rustfmt to make it consistent with the design"
1,The last commits were made on November 4 which was prior to the first review.
1,"The team has added a new test to cover the functionality. But this test is failing. There could be an issue with the notice that is generated, as during run time it is set to nil and this is checked against the string provided in the test. The overall test coverage has decreased by 0.6%."
1,no new commits after round 1
1,"They did add one test case, but I think it is not enough."
1,The last commit was on 11.04. There's no new commits. sadly.
1,There was no new code been committed in the 2nd round as the last commit can be traced back to 7 days ago
1,"Pull request failed the tests, so that must be fixed before merging."
1,The team has added one spec to check whether a different directory path is generated after generation of a duplicate assignment. The overall coverage decreases by 0.6% The written test covers one of the three issues given to the team. There is scope to add some more tests
1,"The build is failing, but it seems the team has it working locally. I think they can get it working with this approach."
1,They have added a test for the feature implemented. But coverage has decreased by a little.
1,I'm unable to get a really good idea of exactly what was done here for this project other than that it can be used as a display and rendering port and that it improves fail-safeness of browsers.
1,"Yes, a fairly good job in that regard. They have first explained their test plans, then even provided links to their RSPEC tests which I checked. Then they have run and shown their screenshots of the Rspec tests going through successfully. Even, so their coverage seems to be an issue since it hasn't been updates since the last submission that was 19 days ago as per their pull request which even shows a decrease in their coverage."
1,The overall test coverage decreased by 0.6%. You could have added test cases to  response controller.rb and application helper.rb. These files have contributed the most to the decrement in test coverage.
1,"The code is well-structured and easy to follow. Styling and indentation are consistent. 
One major issue that was not addressed is that the object that is being tested is an instance of AssignmentParticipant as opposed to Participant. As a result, the team had to comment out the #scores method of AssignmentParticipant to hit the #scores method of Participant. One possible fix is to define a new participant instance in factories.rb.
One further suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method."
1,"The team has added the test case for issue#1190 which are Rspec tests. The test plan includes how to test issues #391 and #1201 by logging in as an instructor, but test cases do not seem to be present for this part."
1,First review comments not addressed.
1,Some changes needed explanation.
1,"Authors mostly discuss the technical parts of each test case, i.e. how it works and what functionality it is testing. There is almost no emphasis on any design decision or pattern.
There is a mention of mock objects being defined at the beginning of the test file, however the wiki does not elaborate on the reasoning behind those decisions.
Some improvements can be done by explicitly stating and justifying the structure of the code.
For example, discussion on why there are no instances of before(:each) statements and how defining every let statement once at the beginning of the file is superior to having that data defined for each test suite separately."
1,"They did not explain why they did what they did, just what they did"
1,"The author has well listed the steps adopted to implement the test cases by giving a code snippet for each and every test .However, the author hasn't mentioned that why does particular test cases have been written in the spec file."
1,A short description fo every method change was required.
1,"Test plan is comprehensive and covers most of the edge cases. The test suite is achieving test coverage of 99%.
One minor issue is that wiki is missing two cases that are implemented in the code (#name, #fullname)."
1,"More edge cases can be included. For example, for Participant#team, can include a case when user does not exist."
1,there was no test plan section
1,"Authors explain the functionality of the test in wiki page pretty clearly, including participant_spec.rb, participant.rb and assignment_participant.rb. But there are not explain in video, it might be more convenient for reader to understand if authors add some short explanation in video."
1,"The primary objective of the project is defined clearly.
A comprehensive description is provided for technical steps needed to set up the environment and the functionality which is related to the test suite.
Furthermore, the team provides a detailed explanation of each test case along with the corresponding code.
My suggestion would be to remove or reduce parts like Expertiza, BDD and Rspec description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018_-_Project_E1852_Write_unit_tests_for_participant.rb#Expertiza) because they are redundant in this context."
1,The wiki is quite comprehensive and gives the build steps clearly. It could also include a more basic explanation in layman terms about what the OffScreenCanvas API does
1,This system doesn't have a UI I can view as it seems to be a browser add on.
1,No link was given to the demo of the project.
1,Some parts of the code are still left to be implemented
1,The build fails so this project will not work in its current state. There were instructions however on how to set up the project and show that it is working.
1,"I don't see any tests added by this team, although they do mention that their code additions were not particularly testable except with the existing automatic tests, which they enabled."
1,There many comments by auto bot on indentations and coding standard. Could have resolved it.
1,"The code is well-formatted and structured very clearly. It is easy to follow the expressed intent. Every 'it' block is succinct and contains one assertion. Indentation and styling are consistent. 
One suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method."
1,"The suggestions have not been improved. Comments aren't explanatory and does not give an idea about what the author intended to do. It would be good to include meaningful comments. Debug code is still in the commit. Even though we may used debug code like the puts statement, we should not commit these as they could create junk data in the application log. Please consider removing them."
1,The features work properly but still need more tests to test the functions.
1,2 Code climate issues pending. No explanation provided for why gemlock file is being added.
1,"The code is well written but it can use comments to help explain what the code is doing. For e.g. the code below is hard to understand:
          if quesparams[:assignment][:directory_path] == """" and quesparams[:check_validate] == ""on""
            quesparams[:assignment][:directory_path] = ""#{quesparams[:assignment][:name]}_#{quesparams[
                :assignment][:id]}_#{quesparams[:assignment][:course_id]}""
          end"
1,The tests were mentioned in the report but not in the pull request. There was also no coverage information. The approach looks good though.
1,"There are commits on a single day, that is yesterday. One suggestion would be to commit regular progress on the git."
1,Some small coding guideline related problems are there which can be addressed.
1,"Since, the git repo link of their hasn't been given it can't be certainly said how well the code has been written. But going by their video in which they have meticulously explained step by step what they have done, I would day It is reasonably well executed and follows the Ruby style conventions."
1,"No deployment link was provided, but from the video and tests they provided, the features works as intended."
1,The code has been modified to include the modifications requested (test cases added for failing scenarios and edge cases - two assignments with same name) in my previous review. Appreciated! Overall the code quality is good. Only some variable names are ambiguous for example: check_validate.  What does it validate? Name it like validate_same_name or validate_common_directory etc
1,"There are some functions long for example like scores , However, as this function is handling all the required cases hence , that length is quite valid and considerable"
1,New code was committed but all at once on the same day.
1,Could not find any test cases. The team seem to have made changes to only the views. The team should implement test cases for the issues they've fixed.
1,"The code is very well written, there are no bad names or long and complicated functions. However, there are no proper comments that have been provided for the viewers understanding. One suggestion would be to include some comments for better understanding."
1,"Naming conventions that are used in this project are clear, reasonable and follow standard Ruby practices.
There are some instances of variable names that are concatenated with numbers like topic1, topic2. While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required."
1,"Code looks good apart from a lot of commented code. If that is written by the team and was not already present, then it should be removed if not used before submitting pull requests."
1,"The code has almost no comments. I found some lint, particularly some commented-out blocks of code."
1,"Naming is good. There are few names(eg. is_selfreview_enabled ) which don't seem fine but they were from before, any thing new that has been added by them follows proper naming convention."
1,"All their test pass, but they don't have a test plan section"
1,"They don't have a wiki page link, so I cann't see their OSS writeup."
1,No writeup link provided.
1,"Unfortunately, the team has not provided any link to the write-up. Hence, I would not be able to provide reviews for this question."
1,No writeup/documentation found.
1,"Write up isn't provided. I went through their git commit and the requirement for  issue #1201. There is a 'puts' statement in the controller. I feel that should be removed, you guys might have added it for debugging purposes, but it should be removed before committing. Also, not sure how the changes made are applicable to the problem at hand which is to check if assignments have the same name if I'm not wrong."
1,"No, since no write up or no wiki page exists. it is clearly not possible to ascertain any of the above clauses."
1,The writeup seems to be missing.
1,The link to the writeup is missing.
1,There are no tests. Probably you guys will do it in the next phase.
1,"Issues #391, #1201 were fixed but i dont see any tests as mentioned in issue #1190."
1,"Unfortunately, no mention of the word ""test plan"" has even taken place in their whole doc. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository.  
 
Moreover, as a part of their project, one of their problem statements is in fact to write the tests for a specific problem scenario. I have reason to believe even that has not been done judging from the pull request."
1,Testing is absent in the project. This could have been because (by the looks of it) the issues were too small (only 20-30 lines code). Refer RSpec documentation to write tests. It is easy to follow.
1,"Didn't find any documentation link. But it was understandable from the code links on github.
 Goal is to create unique directories for each assignment."
1,There is no write-up provided as of now. The wiki page is also not done yet.
1,"No, the team has not been diligent in specially making a section of ""what it does"" as the introductory section of the doc so as to make us understand the goals of the project. They have seemed to not even make a Wiki page for the same or have seemed to forget to upload it. Because, how am I supposed to follow the approach and solution of the problem if there doesn't exist any documentation to check for the same."
1,No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given. No write up link has been provided. It was tough to navigate the code myself. No demo or link provided as well.
1,The writeup seems to be missing.
1,The link for the writeup is missing.
1,No video or deployment link provided to test manually.
1,They didn't provide a link for me to test their work.
1,The team has not provided any link for me to manually test the project
1,"The features work as intended however I am having trouble navigating and checking what are the differences between the original system and the improved system. Could have made a demo video showing the improvements or a step guide to follow. They could have also provided some steps or a visual navigation guide to see the changes. For edge cases you could check what happens when assignments have same names, blank or whitespace containing names etc."
1,Manual testing seems an impossible task since it is not having a wiki doc itself which makes it impossible to have a specific design flow for the project in question to go ahead and check the program.
1,"Since the test plan is not included, i am unable to do the manual testing."
1,"Issue #1201
In the assignments_controller code, the team has checked in a puts statement (line 48) which looks like debug code. Even though these are helpful during the development phase, we need to remove them before finally pushing them.
Issue #391
The comment (assignments_controller.rb:85) is not descriptive enough. The author has commented out a method call. It would be beneficial to the person reading the code to understand the intention behind this. Please provide a detailed comment on why this was done.
Again the author has use a puts statement (_submitted_files.html.erb:29) which should not be committed and should only be used during development/debugging. Please remove the debug code."
1,"The team has only made one significant change to the following file: app/controllers/assignments_controller.rb .
It is an if statement which is difficult to follow since the team has not written any comments for the same."
1,I feel you guys should add a few comments for a third person to follow.
1,More comments are needed because I had trouble following what the code was doing in some places. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Kudos!
1,Comments needed.
1,"Issue #1201
Below is the change made in _general.html.erb
Directory name will be autogenerated if not provided. In the form of assignment name_id_course_id.
The last part could be modified to something with a bit more clarity. From the assignments_controller code it could be seen that the auto-generated directory name follows the format <assignment name>_<assignment id>_<course_id> which is not what is specified in the text.
There is a typo in the word 'autogenerated', it needs to be hyphenated as 'auto-generated'."
1,"I can guess the array 'quesparams' means question parameters, but this variable name is confusing, I think they should use question_param instead."
1,"The team has only made one significant change to the following file: app/controllers/assignments_controller.rb .
It is an if statement which is difficult to follow since the team has not written any comments for the same.
 
Suggestion: The team could add comments and screenshots for better understand of the workflow in the second submission"
1,Good work. Need to work on tests.
1,"On checking, the code, we find that, in agreement with @TravisBuddy, the code had a build error which seems to be unresolved, which is strange, and should have been looked into. Moreover, the overall coverage shows a good amount of increase which is good. But one must say that the details in the code changes as few as they seem have been to a good extent for the majority of the part and thus worth the merit."
1,"Names could have been better designed especially the 'quesparams' variable. I get no idea about what that variable is used for or what that implements. You can rename it to question_params, or duplicate_directory_params etc."
1,The links provided are only of commits and not the code added.
1,"The names are all proper. However, there are lines of code which are commented out. Cleaning up that would reduce the clutter."
1,"Could not see the Test Plan as write-up link has not been provided.
Looking at the code also, it seems as if no tests are written. It is always a good practice to follow TDD. Please write test cases to test the changes made."
1,They don't have a Test Plan.
1,No tests added or at least link isn't provided
1,"As mentioned earlier, they have not considered testing at all at this point and hence, we are assuming that they are to implement testing at a further point in the project. Of course, mentioning an approach to the testing framework and how they would be going about it would have helped. Moreover, the absence of a wiki doc only adds to the grievances of being unable to decipher the problem statements."
1,I could not find any test plan or documentation and hence could not verify whether the tests have passed or no. Tests for checking for duplicate directories due to assignments having same names is missing.
1,The test plan seems to be missing
1,"Since I couldn't view the test plan,  i am unable to comment on it."
1,"The code is written very cleanly. The only slight problem I found was the ""search"" method in Houses_controller is too long as it has a lot of nested if statements."
1,"Short methods - Good.
project structure - good.
I feel you haven't committed everything to GIT. Please check that."
1,I really appreciate the organization of your code. Everything is grouped in appropriate folders and easy to navigate. I also like how most of your code is indexed and spaced. Great readability. Functions are clearly written to handle exactly what the name indicates. There are a few places where the continuation of parameters should be realigned (examples: company_params in Companies Controller and format of website in Company model). Overall great use of Ruby styling standards.
1,I couldn't find any test method other than the one in the sessions_controller_test class.
1,"No, all tests are missing"
1,NO I don't think they have submitted any test model.
1,No tests have been written
1,"The UI is simple however, because of the lack of functionality cannot be assessed properly.
One suggestion would be to rename the label of 'back' button to 'logout' to make it more intuitive."
1,Only user/realtor login has been implemented yet. Other functionality is missing. README stated that admin has not been configured.
1,"The README file isn't as descriptive as it should be. And UI is not very well designed. Printing ""Hello World"" on the home page seems to be a debugging strategy but it needs to be removed. And proper links needs to be inserted. Example: Link of 'Logout' is not present"
1,"For sign up, I don't understand what is the difference between ""I am shopping for a house"" and ""I am a realtor and I am shopping for a house""."
1,"Apart from the login functionality nothing is done.
Commit ID : 7fe864078b219bebacc0046b8f45c6e25cc1544c"
1,"The interface was very easy and simple to use, and was very user friendly, but it lacked intuitiveness on some levels. Also, the readme file didn't state anything about the UI."
1,"As this project is in the early stages of development, the UI is minimal. The title is prominently displayed as a header on the home page and subsequent pages to clearly indicate what this application is ""Real Estate manager"". The login and signup links are clear as to purpose; however, the intent in the presence of the words ""Hello World"" beside them is unclear. Additionally, the login and signup page functionalities are easily interpreted. I would suggest that the user profile actually display what kind of user they are rather than a number that only has meaning to the system, as well as, a log out link/button in the header for a user as he/she traversed your application.
The README file only contains the fact that there is no pre-configured administrator. I would recommend including the suggested context from the Ruby generator and the project write up."
1,"Only user model in app/models, rest of the models such as house, realtor, real estate company are missing
Same with controllers.
 
In user model, could add validation for email format 
 
I would suggest user gem 'devise' for user management and 'rails_admin' for admin functionality. 
This helps as the gems taking control of implementation and the developers can concentrate on business logic
 If back is clicks on user edit , the user is logged out instead of going to profile page"
1,In test.html.erb you shoud not write code like this: <%= User.find_by(id: session[:user_id]).name %>
1,"The database schema only consisted of the users table, and the CRUD functionalities on the MVC related to it. Due to the less amount of content to review, a proper justification for this question is a bit tough. Even though the amount of code was less, but it followed many of the good coding practices of ruby on rails, except a few. For example, he code lacked any sort of documentation or comments. It makes it tough for the reviewer or any other programmer to make sense of the code. But apart from that, the practices seemed fine. The variables were named appropriately, functions were named effectively, and the classes were defined definitely."
1,"There is no code apart from a basic scaffold generated. 
Commit ID Reviewed : 7fe864078b219bebacc0046b8f45c6e25cc1544c"
1,"The code in the project (not auto generated by Ruby) appears to follow the guidelines presented in class and by the style guidelines. The user model contains appropriate validations/syntax, while additional files contain appropriate usage of parenthesis, symbols, and pluralization of file names. Be careful about long lines. In the repo I can't necessarily see the column number; however, but don't be afraid to break parameters up for readability. I believe the guidelines suggest not going out past col 80. I appreciate your indentation. A simple thing can make all the difference in the readability of a file."
1,"There are no test cases other than those auto generated by the scaffold generator, thus cannot comment more on testing."
1,No tests for either model or controller are present.
1,Testing has not been performed appropriately. Handling only one case isnt called testing
1,No tests added for model or controller
1,No tests performed seem visible as executional flow is uneven.
1,No tests have been written. At least under the Tests folder.
1,"The application seems to have been developed, but not tested enough, as apart from just naviagtional bugs, there are also functional bugs. Many of the required things are also not implemented, hence there was not much stuff to rate for."
1,"There is only a single test file included with this application, sessions_controller_test. The functionality tested within this file attempts to cover starting a new user session. The test ensures that a new session is returned through an assertion statement equating to true. There are many additional functions of the sessions controller that should be tested including create, destroy, successful log in, etc. Making sure that each of these methods are functional will aid in the development of further successful application flows. I would recommend testing the basic models and their accompanying controllers before you begin implementing things such as house inquires and user responses."
1,"Most of the edge cases cannot be tested due to problems with accessing admin's account.
Functionality pertaining to inquiries add/edit/delete is not implemented."
1,"1. Cannot test as delete functionality is missing.
2. Cannot test as functionality is missing.
3. Cannot test as delete functionality is missing."
1,"Most functionality is either broken or not present
1. delete real estate company not present
2. create house not present
3. On user create get,""Welcome to the Real Estate Manager,user1
User was successfully created.""
4. Send inquiry, logs out the user"
1,"Since, there is no readme file, admin access is not clear or how to navigate to those features.
So most of the cases could not be checked due to ambiguity in the flow."
1,"1. Fails this edge case due to unavailable admin functions
2. This function fails to. 
3. Not available.
4. Realtor inquiries are also non functional."
1,I could not login as an admin using the user password combination mentioned in readme.
1,"1 ) Since Admin Login is not working, this cannot be tested
2 ) Realtor Can still edit the house after changing his Company
3 ) Inquiries Feature although implemented is not working 
 
Since the basic Functionalities are still lacking I believe the edge cases have not been handled anywhere."
1,I am unable to test any edge cases as logging into the system as any type of a user is not implemented.
1,"(1): Unable to login as admin!
(2): Realtor can delete houses, but houses don't seem to map to a real estate company, rather they are mapped to the realtor only
(3): Unable to login as admin"
1,"I am unable to log in as admin with credentials that are provided in README. 
Search houses functionality for house hunter is missing.
Inquiries are not added to the system and page that is supposed to display all the inquiries is not working."
1,"when sumbit an iquiry, the page automatically redirect to the homepage and can not find the user page."
1,"Multiple roles seems to be missing.
Eg. for the details for house hunter given in readme,i get logged into realtor profile
same is when  I create a new user and log-in 
create a company, get message that user has been created ""Welcome to the Real Estate Manager,hunter User was successfully created."""
1,Admin functionality is failing. Not able to log in as it should.
1,"The author improved the application but still did not fix all the problems. For an instance, the inquiry option is created but it does not work properly. After creating an inquiry the user gets logged out immediately. Also, the created inquiry is not visible under ""my inquiries"" options.
The interest in a particular house option is still not given."
1,"1 > Admin Login is not working for me
2 > Cannot Login through default Realtor/Hunter Accounts
3 > No Search Functionality for houses
4 > No Image upload for houses
5 > Views are a bit messed up, It shows Inquire About a House in create company page.
6 > Navigation is not proper, Creating a new house redirects you to the home page
7 > inquiries Feature although implemented does not work
8 > No reply Feature"
1,"There are a lot of functional bugs. Also, lots of required functionalities like listing a house as interested, list of potential buyers etc are missing. Also, there are a lot of navigational bugs. For example, when a user is both, a realtor and a househunter, he gets an option to create a new company when viewing list of enquiries, which should not have been the cae."
1,"Your home page is very clear as to the application purpose. Unfortunately, I am unable to sign up as a new user or login with any of the pre-configured user accounts included in the Readme. I can, however, attempt to sign up and/or login but this information is never saved to the database for future access or the appropriate transitioning is not implemented.
I like that there are two options listed on the homepage to either sign up as a new user or to login in as a current user. This is convenient for navigation. Consider spacing these links for easier identification. I would also point out that the options in the drop down box included for selecting user type during sign up is a great idea. The third option, is a ambiguous as to its purpose. What does it mean to sign up as a realtor who is also shopping for a house? Perhaps you can just limit the options to Realtor or House Hunter. The functionality of searching homes should be included in the Realtor services. Keep up the work. Once the database is successfully receiving user details and/or the appropriate routes are assigned, additional functionalities should be easy to implement."
1,can not log in as admin
1,"Following are some of the relationships missing:
 
house hunter has_many inquiries
realtor has_one company"
1,"As of now, all relationships have been commented out, I am not sure why this has been done."
1,"To the most extent of it. Since, the profile of admin is problematic and not allowing us to login at all. That area is unavailable for testing."
1,"All the 1-n, n-n Relationships have been commented out. There are no mapping table in Schema as well."
1,The relationship mapping was appropriate and worked as intended. The database unfortunately didn't implement all the necessary features required for the submission. (For example: list of potential buyers)
1,"It seems that some of the associations were attempted. (1) Real Estate Company contains many users and houses and (2) House belongs to a Real Estate Company and a user. These relationships are currently commented out so the dependencies are not enforced. There are additional connections missing such as the Users model, where a Realtor should belong to only a single company and many houses. The implementation seems incomplete, but the idea found within the company and house models is moving in the right direction."
1,"Most commits were done by one person which cannot be considered a good practice.
Naming of commits is done well, names are descriptive of the introduced changes.
I would suggest doing commits more often by dividing work into smaller chunks."
1,"The team has pushed almost all the commits on 2-3 days of the entire cycle, not regular.
Also, the commits are made by one person, which seems strange to me."
1,"No, majority checkins are near deadlines and not well spread out. Usage of multiple branch is good."
1,The team did not commit their changes throughout the project period. The changes were committed in round 2.
1,"Very Few commits in the project, with most commits coming just from one user towards the deadline period.
A lot of Commits done after the deadline period"
1,"The commits were not scattered throughout the development cycle, rather they were concentrated on a particular couple of days, which indicate that the project was a last minute rush, rather than a pre-planned and well executed one."
1,"There are no issues with code quality or naming. Code is clean and readable and follows Ruby on Rails practices. 
Most methods are short and do one specific task.
One possible improvement would be moving out authorization functionality from controller methods to separate functions."
1,some direction code is ambiguous
1,"The repository name isn't what it is supposed to be. Naming seems inappropriate. plus, there is no read me file explaining the flow of webapp."
1,"Most of the code is auto-generated from rails generator so they do the generic thing. Although they have connected most of the app, the basic functionalities are still lacking and no new code has been written. The only part I see is the sessions controller that has been written manually, and follows correct coding convention."
1,"The code is readable and easy to understand, but at the same time it is not effectively modularized.There are seveal methods which perform the functions of other methods too, which could have better been modularised Apart from that,"
1,"Code in the model methods looks very clean. Attribute symbols are appropriately validated and proper constraints are applied to measure uniqueness. The controller code has great parenthesis and bracket use for function calls and assignments. More consistent spacing of functions and function content would aid in the readability of the code. Also, there are a few instances where conditional blocks are empty. If there is no purpose for the block, it should be removed (example found in the static page controller). Overall, the code seems to implement good Ruby style standards."
1,Only basic controller tests have been provided
1,"The README.md does not cover how the system handles edge cases.
What will happen if the admin tries to delete a real estate company which has some realtors and houses?: System deletes the Realestate company but the app crashes when accessing the realtor account.
What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company? There is no validation at all, and there is no way to have a realtor without a company.
If this house hunter is a potential buyer of a house, will (s)he be removed from the corresponding potential buyers list: app crashes"
1,"Admin cannot delete users
Deleting a House Hunter crashes the app
No validation present in any models, eg Houses/Real Estate Company  
Admin cannot delete houses"
1,The team kept committing their changes even in round 2.
1,They started adding more commits after the first round of reviews.
1,"The code quality in this application looks good. I didn't see any extremely large methods, views were clean and simple, and controllers had one-to-one mappings with application-level functions. 
I do think I would encourage this team to consider using scopes in their models next time as I did not see many here."
1,Basic functionalities missing
1,"The code is very modular and clean. There is no bad naming in the project, naming conventions are followed. All the methods are concise. There are not many nested blocks and the code is clear and easy to understand. However the functionality of creating a house is written under inquiry which makes it difficult for the user to comprehend the flow of the website."
1,"The admin account is created in the user model instead of the database seeds file. Other than that, the project looks pretty good code wise."
1,Limited functionality for admin
1,"Apart from the ones that are generated during scaffold, there are no new test cases added to test the application."
1,There is just one user role in the current submission. Unable to test the admin functionality
1,"The implementation can only log one type of user on and even though not specified, the user has all controls so it can be assumed its an admin. Admins can signup as well."
1,"No information for admin login credentials provided anywhere. Under signing-up, no option to sign up as a realtor or a hunter is given. They should be able to do that because otherwise the functionalities aren't being differentiated for a hunter and a realtor."
1,"UI displays session info, file paths and # tags. Could be improved with little efforts"
1,"No admin account provided. No user role selections. Seems to be an incomplete project.
Looks like they use scaffolding to generate the templates but didn't fill in the necessary code."
1,"The application portal is same for all the 3 users. Therefore all users have been given same permissions.
 
ReadMe does not contain admin credentials . Hence, can't test admin functionalities"
1,"The application has bare minimum functionalities of what was required. A user signup and login has been implemented, but no information about what type of user has signed up/ logged in is available. ReadMe file is the default and no changes have been made to it."
1,"User interface should not show the location
Users#dashboard
 
Find me in app/views/users/dashboard.html.erb"
1,The code is well written. I noticed the controller for inquiries is well written but it is unclear how to access all those functionalities from the front-end.
1,Code is using Basic Ruby on Rails Structure which by default provides the CRUD Functionalty. But no details of Admin login provided. Also some of the models seem to be missing.
1,could not log in as admin. Rest worked as expected.
1,"1. Unable to login as admin. Hence, I was not able to test the scenario when a real estate company is deleted by the admin.
2. The list listing link shows only the 2 pre-existing houses by default. Even after applying the appropriate search filters, the newly created houses are not being displayed. Hence, I was unable to test scenario of change of real estate company. 
3. Since the admin login is not working, the test on inquiries could not be performed."
1,Deletion fails in most cases as dependent records don't get deleted. Model changes to add and delete these dependencies will resolve the issue.
1,"After creating the user from the admin , Why I am logged into the created user ?
 
Also, where can the user update the company info"
1,"The admin is unable to destroy a real estate company due to the above mentioned dependency bug on the model files. Since all users are listed in a common view without information about who is a realtor and who is a house hunter, the admin would be unable to specifically test removing a type of user unless he/she creates one themselves. On changing real estate company through update for a realtor, the real estate company change was reflected else where, updation has been implemented well. The realtor is also unable to see the inquires or reply to them."
1,"1. Could not login from the admin credentials provided
2. Realtor cannot change the real estate company. He/she is able to update the real estate company information, which in my opinion is the function of the admin
3. Could not login from the admin credentials provided.
4. Realtor can list a house without giving details of"
1,"As of now, I'm not able to sign in as admin with preconfigured account, I can't comment om test cases."
1,"Clicking on ""List of inquiries"" broke the application."
1,"Some of the functionalities are not fully implemented.

Admin login functionality is failing. The credentials given in the Readme file are probably wrong.
Houses listed by realtors are not being displayed in the index page. 
The edit, delete houses by realtor is not functional
Realtors are unable to view inquiries and submit replies
House hunters are unable to create interest lists and hence both interest list and potential buyers functionality is missing from the application."
1,"admin login fails:
realtors and other users successful. 
all functionalities works."
1,"There are still session variables and route names being displayed on some of the screens which were suggested to be removed. The functionality is quite good considering there was no implementation during first review.
Potential Buyers functionality is not implemented.
Enquiry functionality doesn't work . It throws application error check logs error when clicked. Possibly a deployment issue.
When  a new house is created , it is not displayed in the listings immediately.
Admin login doesn't work. It may be possible that someone might have edited admin login during review or else please paste the latest login details in Readme."
1,"Unable to delete users from admin
Why can the admin edit password of the users ?"
1,"The type of user in the view user panel through admin login is unavailable, would it be possible for the team to have two separate views/controllers and CRUD functions on realtors and hunters?"
1,"Signup functionality was not working.
I could not log in from the admin role and house hunter role provided.
After logging in from realtor's account, the link to inquiries failed(was broken)."
1,"The system works as expected and common functionality is working but still needs to focus on some areas:
1. Not able to sign in as admin with preconfigured account.
2. how to add inquiries or to an interest list."
1,The dependencies are not handled properly. It errors out when we try to delete parent record like company or house . Use of Dependent destroy and proper mentioning on belongs to and has many relationship in all models should solve this issue
1,The code on Github is clean and readable. The controller actions are specific and do only the tasks that are required. The naming convention used is also intuitive. The interest list functionality has not been implemented.
1,"The code contains comments which makes it little hard to read through.Other than that the organisational way, refactoring methods are handled good"
1,"The code quality is fairly standard, the code practices DRY principles fairly well. I would suggest creating new controllers for managing house hunters and realtors from admin profile since, on creating a new realtor/house hunter the admin logs out and this seems like stop gap fix."
1,Rpec file seems to be missing
1,The team has not tested model. The code in Github has the default controller tests. The team has not used the rspec gem to perform model/controller tests.
1,could not find model or controller testing.
1,The code there seems to be well organized. But the problem is that many functionalities are missing and there aren't too much code in models and controllers.
1,"Just one table is used for all users. Therefore there is no distinction among the admin, realtor and the house_hunter"
1,"The code is clean and easy to follow and each method handles one task. I could not understand the reason for some of the code, like the home action in the hunters_controller - the current user's role is set to 3 without any checks. So if the url is visited directly and user's role is something else, it will be set to 3 and saved, which can result in wrong behaviours.
Overall code is well written/"
1,"Instead of writing role = 1. It would have cleaner if some constants were defined. Then, role = ADMIN would have been much clearer
The create method in users_controller.rb is very big and contains several if else statements. It should have been broken down into several sub-methods like create_realtor or create_house_hunter
 
I did not find any user wricomments in any"
1,All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if else conditions.
1,"The code has been implemented as per the Ruby standards of coding. 
However, the author has used numeric ids for role comparison which is difficult to map with the code. It would have been more meaningful if the author 
could use the names of role so that it could be easily understood.
Also, it could be more easier for the reader if the author could avoid lot of commented code.
Specially in main classes such as ""UsersController"". 
Instance from code for point 1:



if user.id == 19


 
current_user.role = 1


 
current_user.save


 
else


 
current_user.role = 0"
1,"The phone number if exceeded 10 digits, the code breaks without giving any user-friendly alert."
1,Nothing's tested
1,Only the controller part is covered.
1,Model and controller testing are remaining.
1,"The application is breaking on clicking on the basic functionalities such as show or edit.

NoMethodError in Users#show


Showing /home/henry/OODesign/ooddprogram2/app/views/users/show.html.erb where line #29 raised:
undefined method `realtor' for nil:NilClass

Extracted source (around line #29):





27
28
29
30
31
32
              


 
 
<% if !current_user.realtor.nil? %>

  You are registered as a realtor, please visit your realtor home page here:

  <%= link_to ""Realtor's Home Page"", home_realtor_path(current_user.realtor.id) %>

<% end %>"
1,Not thoroughly tested
1,"UI is easy to understand, but problematic to use. 
Admin must use user ids to create hunters or realtors or inquiries and the display is via user IDs too.
Signup page redirect to show all signed up users. From there, any one who is not logged in can delete users.
Same user can be added as house hunter any number of times with separate entries.
No validations are added (I can choose role no. 5 for signup), and no error messages have been provided. Passwords are in plain text. In some cases, wrong notices are displayed - create user with wrong info gives ""User account was successfully created. AAA!"" which is incorrect as user was not actually created. 
Back to your page links do not work"
1,"The admin login ID and password provided in the Readme won't let me log in to the admin's account. Hence, couldn't test the admin profile information."
1,Intuitive UI. Could add a bit of bootstrap and CSS
1,Not defined in readme file.
1,Basic functionality and navigation is missing in the project.
1,"The code is well formatted and follows good Ruby and Rails practice. Except for a few missing functionalities, I found the logic very neat."
1,Integration tests don't cover authentication
1,Test Cases are written very well and system is tested well till some extend but many small cases needs to still handled.
1,"1.Admin can only delete a company which has no users(realtors/hunters), else he is unable to delete it.
2.Realtor cannot change his company and can post an ad under any user.
3. House hunter inquiry feature is absent hence could not test this test case."
1,"1) The admin can delete the house hunter that has an inquiry but the inquiry is still available.
2) Realtor is able to edit and update a company which is not listed by him/her.
3) Realtor is able to edit and update the house that is not listed by him/her.
4) Realtor is able to destroy a house that is not listed by him/her."
1,"Team has tried well to cover up edge functionalities but still can work on below measures:
1. if we try to delete an entity associated with other entity, system crashes.
2. I can not see company field associated with realtor while creating a realtor.
3. Inquiry functionality is difficult to understand. As mentioned in Readme it does go into error, but i did not receive any mail for it. Also I can not see inquiry associated with house.
4. We can upload image but image is visible as activerecord id and not as image when viewing the house.
    Potential buyer functionality not working.
    Search house functionality not working."
1,"Inquiries weren't mapped to houses. DEpendent destroy missing in companies for houses, hence getting an error when trying to delete companies which have houses. Admin is able to add users but they were not able to sign in as they are not created with a default password, but just added to the users table."
1,Unable to create company from admin
1,"Admin
1. Admin can not see all the inquiries by house hunters.
Hunter
1.House search feature -Not implemented.
2.House Interest /interest list feature -Not implemented. 
3. Even a hunter can post an ad of a house and create a company, missed implementation of basic checks on user roles.
4. The inquiry is not associated with the house, a separate tab is given with a generic form where the hunter has to select a realtor and that is failing when clicked on submit(maybe a Heroku glitch ).
5.No record of submitted inquiries.
Relator:
1. Seeing potential buyers -Not implemented.
2.Inquiry view/reply- -Not implemented.
3.Can post houses for any user(i.e under any company and under any realtor or hunter)
 
Many functionalities have not been implemented, if https://nameless-everglades-55236.herokuapp.com the link they have submitted for round 2."
1,UI for new house needs improvement. Forms need to be more precise rather than adding many radio buttons as in the case for 'New House'. UI for Inquiry/Reply needs to be more clear.
1,"Search for houses is missing 
While submitting inquiry, the system errors out but that has been documented. This was also pointed out in earlier review"
1,"1) logged in as a house hunter, I can edit a house, which should not be allowed.
2) logged in as a house hunter, I can edit the company, which should not be allowed.
3) Founded: 19677689 ----- the company year can be any numeric value
4) logged in as a house hunter, I can destroy house, which should not be allowed
5) logged in as a house hunter, I can destroy company, which should not be the case
6) Year built: 2001890 ---------- this field in house table for year takes any numerical value"
1,"Team has tried very well to fix the problems from first release and succeeded partially.
Errors and form validations are still not specific.
Below are few basic functionalities team could work upon.
1. House hunter is able to create and edit company as well as houses.
2. Admin can create users but no passwords."
1,"Inquiry part seems to be a bit confusing. The reply messages showed on the page is confusing. Displaying the message that ""error is occurring on Heroku but email has been sent doesn't look good."""
1,"Destroy not working
Unable to create user from admin"
1,"Foreign key integration is been done in DB, but as there are no separate active records for user types(hunter, realtor,admin) hence the 1-1,1-Many etc relations are absent."
1,"Team has tried very well to associate relationship between models.
It can be seen implemented, But thats also causing system crash when conditions not met."
1,DB relations are handled properly but dependent destroy is not mentioned because which there are issues when destroying entries which have a foreign key dependency.
1,Git has been used properly but needed team contribution. There is only one committer.
1,"The team has effectively worked on multiple commits, yet these suggestions need to be followed
 
Suggestions:
 
1. Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline."
1,Please submit the with pre-configured users. As I am unable to test anything.
1,I could not see the list of test cases
1,"The team has tested parts of different models, but none of the models is thoroughly tested for functional verification."
1,"They have tested initial testing but functional testing of functionalities is not done.
Once we log in , we do not understand which user is it. Realtor house Hunter."
1,"I am unable to sign up. I am getting the following error :
 

We're sorry, but something went wrong.

If you are the application owner check the logs for more information.
Therefore I am unable to test any of the features."
1,The interface is well designed and has a good UI but the basic functionalities are breaking. Unable to login as Hunter/Admin and can perform their respective operations. I assume the default user is the realtor.(as after login I can only post/add new house).
1,"Sign up for roles not available
Admin credentials not provided
Can not sign up as realtor/hunter from UI. Hence can not verify any of the functionalities
Can not find search feature.
README file is not informative. Too short."
1,"The UI looks appealing and very easy to follow. The choice of layout properly differentiates various class of functionalities possible with the application. Yet the UI lacks the below aspects
1. There is no concept of user role in the signup form. Though there is role field, it always shows empty.
2. Few links in the layout are broken.
3. Few fields like the phone number can be made optional for creating users which eases the process."
1,i could not find admin credentials in read-me file  rest of the interface is good
1,"(1) https://nameless-everglades-55236.herokuapp.com/users/sign_up does not let you enter Roles 
which then fails the user signup
(2) No details of admin given 
 
(3) Tried logging for companies and got an error, https://nameless-everglades-55236.herokuapp.com/companies
With some combinations, was able to login but then again when tried updating account got 
""error 1 error prohibited this user from being saved:"", I suspect that is because role field does not have a value 
(4) List of users being showed for creating a new house 
(5) Issues in sending messages tried sending a message got error ""https://nameless-everglades-55236.herokuapp.com/messages"""
1,"No credentials for admin available in the README. Can't access the admin section and hence cannot grade it.
 
Also, no roles have been defined in the signup form. Hence, cannot identify a general user as an admin/realtor/hunter.
 
Hence unable to review the access control methods of the project."
1,"User Interface is nice.
Team has tried keeping the UI as per standards and easy to access to user.
They have also added validation.
Team could give more clear and understandable errors."
1,"The pre-configured admin details are not mentioned on Git . Therefore, I am unable to test admin"
1,"The team has followed good coding practices with sufficient priority on MVC model. Each model/controller/view has a specific role which has not been repeated in other parts of the code.
 
I am giving 3/5 because
1. The code would have better readability if sufficient amount of comments are included in the code. Also, if the role of each model/controller/view is documented in the code file at the beginning then other contributors may feel easy to follow the code.
2. DRY concept can be used to a better extent."
1,"Lot of work is done, good job. 
Few suggestions from my end, 
(1) Tests not implemented for both model and controller
(2) I do see   <%= form.check_box(:role_ids, {:multiple => :true, :checked => @user.roles.map { |role| role.id }.include?(role.id) }, role.id, false) %> but roles are not visible in UI
(3) Though images are uploaded , in house profile it is not displayed, also as I understand multiple images for house are allowed hence its incorrect to use   has_one_attached :image_path.
(4) Validations for models such a House are missing 
(5) Its a good coding tech to add  : params.require in controllers 
(6) In UI it is good to add in tables so that all fields are aligned 
(7) you have before_action :authenticate_user! but in the controller tests I do not see login as part the tests."
1,"While the code is organized well and seems to follow the Model View Controller design pattern, the project doesn't seem to make good use of the relational database. There are multiple models/controllers (specifically the list of potential buyers) that are not necessary at all because of the relational database."
1,"You are following good coding practice. I have a suggestion that you can move realtors, admin and house hunters as childs of user. That is admin belongs to user, realtor belongs to user etc. Currently you have all the information in user model."
1,"The user interface is very confusing. It is difficult to get to the sign up page to begin with, and then the messages Isrealtor and Ishousehunter are cryptic to actual users (anyone other than computer scientists). It is very difficult to follow where the links take you on the website and what exactly you are looking at at any given moment."
1,"Its deployed on heroku, but haven't written about what all features you have completed and what all features are left to complete. Also there are few pages where you can add a link to go to main menu. Sometimes I have to go back 3-4 times to reach main menu."
1,The UI is intuitive and the README provides basic information to get started. A universal navigation bar at the top would be very helpful
1,"Links to create new functionalities are all in place and working perfectly. However, I would like to suggest the overall redirection of the user to various places in the app would greatly improve user experience as using the back button again and again in the browser tends to become irritating after a while."
1,"Several of the required functionalities are available, though many links are not working."
1,Could not find commits for Test files.
1,"Multiple controllers are thoroughly tested, but no models appear to be properly tested."
1,house hunter functionalties are chacked but there is scope for improvement
1,You haven't implemented testing yet. I didn't find anything in test files. Probably you'll do it in the next phase.
1,Testing for controllers has been completed. Unfortunately test cases for models were not worked on. A suggestion could be to test validation of inquiry if corresponding realtor or house hunter gets deleted.
1,Only basic validations have been implemented. Tests generated through scaffold are available.
1,"well done work except the lack of search 
the README file and the UI is not so good 
anyway It's a good work!"
1,Most of the commits were early this week.
1,You guys started pretty late seeing from your commit history.
1,Most of the test cases are auto generated.
1,Favouriates controller is tested. But not in detail. It just checks if we can navigate to it.
1,"Test cases seem to be written neatly.
It seems team has spent most of the time on coding, I would request team to perform rounds of negative test cases that might help them avoid functionalities fail and system credentials.
System allows to provide same email id to  realtor as well has house-hunter, but they have also provided ROLE while signing in, that distinguishes a user who is house hunter and realtor both."
1,"The admin model is tested however this seems silly as creation of admin accounts doesn't really matter as it is not possible. They are supposed to be predefined.
The admin controller has a very extensive list of tests. Very good work here."
1,"Most of the edge cases pertain to houses/inquiries/users. This cannot be tested if houses are not present in the system. Houses can be added through admin, realtor or seed. I would suggest fixing at least admin or realtor functionality or using seed for populating data."
1,"Cannot log in as admin so can't test deletion of a company. 
realtor is not able to add a company.
What will happen if a realtor changes his/her real estate company? Not able to add house so can't be tested."
1,Already covered in detail in above question. There are some issues with View and Create Houses functionality. Also Deletion of users is working fine but gives error when clicked on Realtors or House Hunter's Account Button in Admin View.
1,radme doesn't have admin details.
1,"1. Team did not provide credentials in readme file. Hence can not check these functionalities.
2. Realtor is allowed to change company, but only able to create a house hence can not review further functionality.
3. Again admin credentials not given and realtor not able to create house."
1,I was unable to sign-up as a Realtor and a House Hunter with the same email.
1,"(1) I don't have access to an admin account to test this
(2) There were no currently existing houses and I cannot create a new one
(3) I don't have access to an admin account to test this
(4) The README is still just the default one provided by rails."
1,Unable to create houses so couldn't really check any functionality.
1,Can not create new house.
1,"One major problem is that I am getting an error after adding a house as a realtor which prevents access to realtor-house related features, like edit/destroy etc.
Admin credentials are not specified in the README! I managed to find them in the seeds.rb file. Most of the admin functionality is implemented, however, I am getting an error when accessing new house page ( https://rocky-sands-72044.herokuapp.com/houses/new ) and so house cannot be added through admin(same case with Realtor).
Houses data is missing in the system.
Search functionality is present in the code however I was not able to locate the proper view for that."
1,"Admin credentials still not provided in the readme file. So not able to test any functionality related to admin.
Creation of a new house is failing. So anything related to house module (inquiries, reply, email) cannot be tested. 
As the house cannot be added House interest list module cannot be verified.
Phone Number validation is missing.
Inquiry module gives error page/"
1,nether admin nor realtor able add new houses . unable to send inquiry. no option to delete realtor and HH account
1,"Admin Login Details are not present in Readme.md file. Atleast Untill now. It may be a case of wrong Readme file commited at the last moment. I have looked into the seeds.rb file and got the admin details from there. Do make changes in the Readme file.
Things which needs to be corrected:
1) Admin Should not be able to edit any of his details apart from his name.
2.) Editing a company should only update it (which is working fine). The message shown to user says a new company is created which is slightly misleading. Will be a very small message change.
3) Creating and Viewing Houses Functionality not working currently. gives Application error with message check logs for more details.
4) Admin is able to create Realtor and House Hunter. But once I delete some users and then click on Realtor's Account or House Hounter's Account options given on the UI, it throws Application error same as above. Can you explain about about why this buttons are given and what should it exactly do? 
 5) Admin is able to delete himself from users/househunters/realtors list. This should not be allowed.
6) Not able to check Potential Buyers and Interests functionality as Admin, as creating or view house is not functioning currently. May be you can check the logs. Might be a small deployment error like get/ post methods misplaced.
7) For Realtor and HouseHunter Signup, it should be allowed to sugnup without specifying company or other details except name, email, password as per the usecase given. This is not allowed currently.
8) No houses are currently present and Not able to create a new house. It gives the same error as it does with Admin Login. So not able to test Potential buyers, Intersest and Deletion functionalities for it."
1,"1. Team has worked well compared to last release on UI and tried to cover up all the functionalities.
2.  I still can not see Admin credentials in ReadMe file, ReadMe file only states there will be only one admin in the system. Hence can not review admin functionalities.
3.  I am not able to create house using realtors login as well. It seems code only support specific inputs for house creation and i am not able to find those specific inputs.
4. Hence can not perform many other functionalities reviews from house hunter also."
1,"There were many missing pieces of functionality. I note them below:

I was unable to create a House as an Admin. 
I get an error when attempting to search for Houses. 
As an Admin,I was unable to update or create a Realtor, though I could delete them.
As an Admin, I shouldn't be able to set the password of a Realtor or House Hunter, that is a security vulnerability. 
I was unable to create a House Hunter as an Admin.
When signing up as a Realtor, I shouldn't be given the list of companies to join before signing up. This is a security vulnerability.
As a realtor, I was unable to create a new company. 
As a Realtor, I was unable to list a new house."
1,"The system now has the basic functionality that was missing last time like logging in. Good job on the fixes. It crashed when as a realtor I attempted to create a house, telling me to check the logs for more information if I was the owner. Still no information on an admin user listed in the github readme though."
1,Unable to create a new house
1,"The team continued to make changes in round 2 on a regular basis.
However, naming should have been more descriptive. In many cases it is not possible to understand the scope of the commit.
One team member's work is not reflected in GitHub's contributors panel. I would suggest fixing this by matching user's credentials of local machine and remote server."
1,"Yes, changes we committed in round 2. Code commit could have better by committing as soon as possible. Committing few files and writing proper comments and description for the commit was missing. As a reader, I was not able to understand what a particular commit meant and what module was changed because there was no proper explanation."
1,Although branching strategy was followed. The commits mostly seem to be made on the second-last and last day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
1,"Yes team had been pushing changes on github continuously with neat commit messages in Round 2 also. 
With 49 commits till now.
Yes i can see last commit on 11 th Oct 2018. But commits are not distributed equally."
1,"Overall, code is clean and readable. Naming and project structure is consistent with good practices.
One issue that stood throughout the code is that authorization is done directly in controller methods. It would be better if this common functionality was moved to a separate function call (e.g. validating user's role in houses_controller#create method)"
1,"Commenting was pretty weak in the files I looked through. Overall code style looked pretty good though, I scanned through the files and nothing caught my eye as poor."
1,Git was not utilized fully. There are only a handful of commits that do not capture the development process of project.
1,Default tests are present. Not the actual tests.
1,"While the typical Rails files for testing were included, I did not see a complete set of tests for model and controller."
1,Due to the lack of provided admin login and the fact that I cannot sign up for a realtor or hunter account it is impossible to evaluate the functionalities
1,"Im unable to signup as a house hunter or a realtor, so the controllers for the same have not been tested. A suggestion would be to provide details of already created users so that reviewers can atleast log in and test other functionalities."
1,"Although the application is deployed on Heroku and the user interface is concise and easy to use, the README file provides no information about admin account(email and password) and application features."
1,Could not test UI because links for signing up are broken.
1,Readme file doesn't have any information. Not able to login with admin credentials.
1,"Readme file doesn't details on setting up account for admin. 
I tried signing up new user for realtor and house hunter , whenever I try to sign up it is throwing error. it could be an issue with heroku .
 
however login prompt is designed very well."
1,"Readme.md file has no details on how to login and the signup pages for house hunter and realtors are not working.
So no way of navigating the application fully."
1,The readme file is still the default provided by rails. I don't have access to an admin login and when I try to sign up for a new account(realtor or hunter) I get redirected to a webpage telling me that something went wrong. The small ammount of the UI that does exist(login and create account) seems easy enough to understand but it appears that without logging in I cannot see any other links.
1,"The UI for the login page is the only thing that loads, as I'm unable to sign up. A suggestion for the future would be to provide a username and password for an account that is already created to be provided somewhere to ensure a reviewer can log in even if signing up does not work."
1,"Most of the code is well organized and follows ""good Ruby and Rails coding practices"". But I found some code has indentation problems. For example, in session_controller.rb, line 12-29 have obvious indentation problem."
1,"This application has the layout expected of a Rails application. However, not enough information was included in the README file about installation."
1,1. Switch role option is working for Admin too which is not supposed to be the case.
1,"Realtor is unable to create his own company. I tried creating one, it dodn't give me an error but didn't even show the company in this list."
1,"I am not sure how to create a house hunter and realtor using the same email. I see a link to switch roles, but can only see realtor option there as it didn't allow me to create an account for house hunter with same details."
1,"It tests the login function in the user controller, but not test any models."
1,"If delete a company, the realtor needs to find another company, and the house under this company disappeared. But the README.md does not cover the edge cases."
1,"Cannot upload the image to the house. And a realtor can create an inquiry which they should not. Also, the realtor should able to see the potential buyer for the house under their company, not only the house they create. The more button in the interest list does not work."
1,1. All realtors belonging to a company should not be allowed to delete the company. Instead only the realtor who created the company must be allowed to delete. Else it can be catastrophic.
1,"1. Switch role functionality could have been simplified. While logging there are two fields regarding roles. If a user forgets to mark yes for realtor, then switch role will be redundant. There is dependency between switch role and these fields. Both do the same functionality which results in code duplication.
2. A realtor should not be able to add inquiry, he should be able to reply to inquiry."
1,"I wasn't able to login as admin using the credentials given in the README file. Still, Edge cases are handled well."
1,"The Functionality is working just fine.
I noticed one small problem though. As a house hunter, when I added a house to my interest list and then click on more, it says that the page that I was looking for does not exist."
1,Code looks very clean. I did find some commented lines of code though.
1,Yes Most of the issues identified are fixed 1) Admin not able to delete user accounts
1,Basic functionality seems to be working. But no explicit test cases found.
1,Most of it default UI provided by rails but is easy to use.
1,the test for controller and model has been done. and all the details have been included into the Readme file.
1,"I can see that there are multiple commits on a single day. This might imply that team members have worked remotely without using git.
Suggestions:
1. Make complete use of git when working remotely.
2. Keep pushing changes periodically to avoid any code loss and to have a timeline of changes.
3. Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline."
1,"The team has tested parts of different models, but none of the models is thoroughly tested for functionality verification."
1,"The README file is developed to include all the necessary details about the project as a whole. Great work on documenting. The UI is simple with properly designed tabs. Few enhancements could include
1. The back button is missing in a few places which might be useful for easier navigation.
2. While creating a company, if size is modelled as a drop down to take a range of values then UI would be simpler."
1,"The team has a proper concern on MVC model. Each model/controller/view has a specific role which has not been repeated in other parts of the code.
 
Still, I am giving 3/5 because
1. The project has neglected DRY principle in many of the instances. This has resulted in a bulkier code.
2. As many authors say, a code looks good if it appears like reading a novel. This appearance of a novel like look is missing in many places which can grab other user's attention.
3. The code would have better readability if sufficient amount of comments are included in the code. Also, if the role of each model/controller/view is documented in the code file at the beginning then other contributors may feel easy to follow the code."
1,All commits were found to be done on a single day. i.e. October 1.
1,companies_controller along with a few other controllers are populated with the tests generated by scaffolding. No tests in models found.
1,"The code follows the good coding practices. However, there are some instances where I found commented lines of code in the controller. Ex. house_hunters_controller.rb lines 23-25 and users_controller.rb function switch_role"
1,Did not see a SPEC folder in the GIT
1,"The User Interface was working as described in the README file.  The UI functionality don't have any issues apart from the one noted in additional comments
If team would have given some assets/stylesheets config,  The UI would have been great on the looks as well"
1,Some of the controllers have tests
1,All commits happened at deployment.
1,"The login page is not made. All the admins information is listed on the first page which should not be allowed. It was difficult to understand if I was under the admin's page, realtor's or hunter's page."
1,"The user interface is done as it would be in a basic ruby application, which is good.
There is no login functionality, this is mentioned in the README which was helpful.
Some functionalities which could be improved are :

1)     1)  When I try to add a new house hunter from admin, I get a Contact Method is not included in the list error. As a user, I don’t know what kind of values your system is expecting in this field, so it might help to probably provide a dropdown selection element and put in your values there. In this way, the user will always select a value which your system is expecting. If there are a finite number of values, you can just hard code them into the html element, else pick it up from the db and populate your dropdown as such.
2)      2) When I click on back from the new househunter url, I am directed to show all house hunters url. You could improve this by updating the link-to for this back button by providing it with the user_url, or you could detect which is the current user logged in (Realtor/House Hunter/ Admin) and accordingly redirect to that role’s home page url."
1,"The user interface is very pimitive. The team could have done much more. They have not designed it very well. Although I was not looking for graphics, but the element placement could have been much more improved."
1,Login page is not available. Also back navigation from any page is not present. Very difficult for user to come back to the last page visited.
1,"Yes, the code was written well but a lot of functionalities related to the session was not added."
1,"error w/o company for realtor on viewing buyers
empty companies- validation missing for empty info on companies
admin view - realtor show not working
admin view - hunter show not working
Search by area missing- no fields to search by area"
1,"1. when a real estate company is deleted, then the house associated are also deleted
2. when i switch companies, the previous houses listed from that company, don't appear again.
3. cant make inquiries"
1,"When admin deletes a company associated with a realtor, it gets reflected in the realtors profile. His company name shows nothing and the houses listed were also deleted.
Admin is not able to view house hunters profile (error in deployment), but can view the same using Users section.
When a user is deleted by admin, his inquiries are removed and he is no more a potential buyer too.
When realtor changes/ creates new company, his previous company houses are deleted. This is reflected in the admin table too.
Realtor is not able to view houses listed by others. 
Edge cases
A company can be created without filling in the fields required. (Yes an empty row is displayed to the hunter when a company is created without any detail). But it displays the Company number (row number) while seeing the houses. So a house is shown for a company that doesnt exist in the View companies page.
Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered."
1,"Admin
- As an admin, when creating a user, there is an option to create an admin
- Can't add a house, gives me an error ( im not adding a picture when i save)
- can't make inquiries
- can't add houses to interest lists
- new hunter/realtors i made did get added to the table of all user
Realtor
- when i switch companies, the previous houses listed from that company, don't appear again.
Hunter
- search doesn't work
- can't make inquiries or add houses for interest list
-"
1,Models/Schemas do not have the relationships defined. Looks like manual table updation on actions which makes it difficult to maintain long term.
1,"company realtor relation should be 1-n but isn't. also realtor , house_hunter should belong to user."
1,real estate company-realtor relationship should be 1-to-n -  missing
1,No form validations
1,The team has a very well documented history of commits.  The commit history seems to be well spaced over the entire period of the project development cycle. The team has commits in each of the submission periods and have kept on adding functionalities and updating documentation. The team could have updated their readme a little bit more and added information regarding all the functionalities being assigned to individual roles and how the user experience is set up. Also the team could have adde information on how to run tests in Readme.md file
1,"The code looks comprehensive to a good extent with the usage of comments and clear naming.
1. Adding the not interested feature is a plus point.
2. The naming is done well with attention to the singular and plural nouns for models and controllers.
3. No problem with respect to the coding clarity."
1,"The functionalities have been implemented , but the back button is a major problem"
1,You are not testing anywhere yet.
1,"not all functionalities are working, but the once which are working are end to end tested and works fine.
there are few changes which are required -
Cannot create an inquiry 
Cannot check the potential buyers
cannot list a house
cannot search a house"
1,"I am unable to go back to dashboard. Hence I am unable to test the functionalities of House Hunter.
 
The back button is a major problem."
1,"User view is easy to understand and navigate.
There are certain links which don't work and doesn't load any page."
1,The back button is a loop. I can never traverse back to Dashboard
1,"Ruby way of writing ""if !some_condition"" is ""unless condition""
Couple of large if else structures that could be broken down."
1,"You are following good ruby coding practices. For some places where you are comparing for example in login_controller.rb
if params[:login][:email] == 'admin@admin' && params[:login][:password] == 'admin'
You can use a constant file where you can write these 'admin@admin.com' and use that constant. Its not a good practice to write it like this. Otherwise everything seems good."
1,the github code repository is concise and well maintained. The code base follows goo Ruby and Rails coding practices. The MVC architecture skeleton is implemented in an elegant manner. The desired features need to be implemented and the security issues need to be fixed.
1,"Well structured code using MVC pattern.
 Couldn't find admin credentials mentioned on readme."
1,I didn't find any testing done for model or controller. Nor anything was mentioned in the readme.
1,Only auto-generated test cases present.
1,Some tests present only for houses controller.
1,"There are some really great controller tests included in this application. Most of the functions in each controller are tested to ensure that they are returning and routing to the appropriate pages. Unfortunately, there are no model tests implemented. Model tests should be written to test that the appropriate attributes and relationships of each model are implemented successfully. It will prove extremely helpful in the improved functionality of your application. Make your model tests look like the controller test and you will be doing great!"
1,"If as a realtor, I am trying to update my profile where I only change my company to a random company ""ABC"", it is updating just fine which I believe should not be done because the company doesn't exist and is not even being added to the company list as a new company.
Couldn't check any of the admin's functionality.
Couldn't sign-up as a Realtor."
1,"Delete of company is not working.
Deletion of a house is not working
Admin should not be able to change/add to his role. I was able to make admin as a realtor. System should not allow that"
1,"Not handled (1) - No actual link created between companies and users as user just stores the company name as a string. Instead, saving the company_id for the user will create a relation between them as the company_id will act as a foreign key. That way edge case example (1) can be handled.
Not handled (2) -  Realtor can edit/delete any house that (s)he created even if company changes.
Handled. When a user is deleted, (s)he is automatically deleted from potential buyer list of house.


The README.md does not cover how the system handles edge cases."
1,"Success in edge case testing is determined by the association of the module, to self or with other modules. Many edge cases in this application are dependent on relationships between modules. For example, because houses are not properly associated with realtors or companies, reassigning a realtor's company appears to have no affect. Administrators are not able to delete users or companies, but  I would image it would not throw an error. There are cases that I tested that dealt specifically around the models. Example: user accounts can be created with the same email accounts as long as they are of different user types. This and other edge cases of it type proved successful. It would be great to have edge case information listed in the ReadMe to clarify how these cases were dealt with. Again, implementing the necessary dependencies between models will help to eliminate many of these edge case issues."
1,"I couldn't log in using the admin credentials. Rest worked fine for me.
Couldn't add houses in my interest list as a House Hunter."
1,New houses are not adding.
1,"Deletion of House by admin is failing.
Privacy breach - As a user, I am able to see details of all other users. Only admin should be able to see details of other users.
Overall very good effort. If the above issues weren't there, I would have given full points."
1,"Nice work implementing image upload for houses.
I found some functionalities missing:
- After deleting a company, an error page shows up instead of a valid page, also sometimes the company does not get deleted
- Company edit link goes to home page instead of edit form
- Realtor can create a house even though (s)he has no company
- Interest list page for hunter loads 'page does not exist'"
1,"The application has really come a long way from the previous submission. I believe most of the page routes follow an appropriate application flow. There are several of the dependencies that are evidently not implemented do to the following observations: (1) Users are able to assign him/herself a Real Estate Company that doesn't exist in the system. This assignment should only be made with existing companies to fulfill the requirement of mapping a realtor to a single company. This missing dependency also reflects in the creation of houses. Realtors are able to create houses that are not listed with the company that the realtor is associated with. This association should be automatically made according to the company assigned to the realtor. (2) Users can be both a hunter and a realtor at the same time and can switch back and forth. How do you differentiate between a users abilities? Probably the best option would be to only allow users to be either a house hunter or a realtor. That would eliminate some of the ambiguities is associations and some unnecessary profile fields like house hunters having a real estate company. (3) Inquiries are not associated with houses. This posses an issue with knowing what property the house hunter is requesting information about. Overall, there have been great advances in your application since the first submit. Continue implementing those dependencies so that the required associations can hold."
1,"I didn't see any mapping done between tables, for example, the company-realtor relationship isn't shown 1-to-n."
1,"Not able to see the mapping between inquiries and houses. 
Also, not able to see mappings between potential buyers and houses. 
Did you forget to commit? Because the deployed version is working but GitHub doesn't have the latest code."
1,User model doesn't include any relationship with other models.
1,Their GitHub Link is unavailable and non functional. They don't seem to have uploaded on Heroku App.
1,Unable to view the git repository. Git is truly your friend during development. Make a habit of really committing with useful commit messages and at appropriate feature development times. My team and I found that having different commits for each feature implementation gave many options for points in time that we could revert back to in the invent that something went awry.
1,"The git link is not correct. Also, the project is not deployed."
1,"The git may very well contain the appropriate testing files; however, I am unable to view the due to the privacy settings of the repository. I would suggest that your try and test those models/controllers that have the most complexity to increase the level of confidence in your product. Make sure to test the validations and boundary cases thoroughly, especially model attributes that have restrictions on things such as length and type.  There are also several instances in the project where various users can accomplish the same tasks but with slight differences. It will be to your benefit to pay close attention in creating tests that can replicate these tasks."
1,"There was no link included to allow a reviewer access to the deployed application. When you are finally able to submit the appropriate working link, I would suggest having a README that contains the suggested Ruby content, along with, the information encouraged by the project write up.  Additionally, I would suggest having a person not participating in the course to take a look at your application. He/She may be able to offer a way to gauge the ease and effectiveness of your site. They may also offer valuable insight into feature placement and page flow."
1,The project is not working at all.
1,"The Git link provided redirected me to a page saying ""404 Not found.""
Since there isn't any links of the deployed project, i could not test it."
1,Github link is broken and the project has not been deployed. Don't know how to review this project.
1,No GitHub link available as their page itself in not working by showing it is not available.
1,GitHub link is not redirecting. Shows 404 not found. Please deploy the application on any of the platforms.
1,GitHub link above gives 404 error. Please fix it.
1,"Unfortunately, I am unable to view this Git Repository. This is, most likely, due to the fact that the repo is set to private and only available to those currently collaborating. I would suggest making the setting adjustment for the repo to be public so reviewers and TA's can grade the work that has been completed. When coding, take note of the stylistic norms of Ruby regarding method calls, parenthesis, and syntax best practices. Additionally, maintain a consistent indention scheme for ease of review."
1,"1. tests are too few for models
2. integration tests missing"
1,Admin model has only two tests.
1,"Few issues that I found were :
1. different logins for different type of users
2. how does realtor switch roles between user and realtor"
1,"Unfortunately, most of the test cases failed while testing

The realtor does not get deleted from the system after the deletion of his/her respective real estate company.
The link to create new houses redirects to a different link, hence I was not able to create new houses and test certain cases
The inquiries submitted by the house hunter remain in the database even after the deletion of the house hunter
All the inquires of the particular house are shown to every realtor, which is not an ideal case

These are some of the cases that need attention. Owing to the work done on remainder of the project, these changes would be implemented easily with some effort"
1,Many normal cases are failing as told in previous case hence the edge cases specified are not even applicable
1,Deleting company doesn't delete it's houses. No form of cascade delete present anywhere.
1,Certain test cases are not possible to test due to the way edit realtor is implemented. The website takes real estate company id and not name for update. Being a user I wouldn't know the company id and hence won't be able to perform the right test
1,"The system performs all the desired functionalities. A shoutout to the idea for the auto filled inquiries. I really liked that feature where the inquiry is already filled after which the user gets an option to edit the inquiry. Some parts need improvement. For ex: The link ""new houses"" in the house list redirects to the  users/edit link. Its a minor issue which could be looked upon. The layout of the homepage for house-hunter can be fixed as links overlap each other. Also, the houses list shows edit/destroy options for the entire house list, that's a bug which needs fixing."
1,"- Admin cannot create new house, it redirects to error page.
- Realtors cannot reply to inquiries."
1,"Basic functionalities are working in the sense that able to add users but many features are missing.
Unable to use same email id for realtor and househunter 
Admin is not able to edit house records
Realtor cant view other realtors
Real Estate Company info not there for any house therefore it invalidates many requirements"
1,"While signing up as realtor or HouseHunter, all fields are not present. Only username and password is being asked."
1,"Admin has a separate login url and cannot login from the same page as other users.
Admin panel could be made a little more user friendly by separating links on different lines."
1,"I am unable to find many relationships in the model, though functionality seems to be in place either additional gems have  been used or code has been pushed in schema.db which is wrong."
1,There is no association between models.
1,No mapping table was found.
1,No mapping table present anywhere. No belongs to/ has_many relationship present in the models
1,Could not really find the required relationship mapping.
1,No For e.g house should belong_to a real estate company but its not handled in house.rb
1,Code looks good. The first cut for good too.  I still do not see code for models in model files if an additional gem has been used it would be good to mention that in readme
1,"-No validations implemented on the model's attributes.
- The models do not have associations implemented."
1,There are 16 commits in all. Not a lot changes have been pushed throughout the project period
1,Unable to test
1,There is no external  link provided to the application.
1,No not even one model or controller has been thoroughly tested
1,README FILE IS EMPTY!!!
1,"No link to the deployed app has been provided, neither in expertiza nor in github/README hence unable to test"
1,Couldn't check as no deployed app link was given
1,The application hasn't been deployed (or they forgot to submit the deployed link).
1,"The link for deployed project has not been provided so cannot test any features.Looking at the github codes, very little has been implemented. README file that has been provided is of no help"
1,No deployed!
1,"Code is great, usage of SearchController and PotentialBuyerController shows deep understanding of rails as a framework. Great job. But I find following missing 
1. In controllers, you will need to put before_action :authenticate_user!
2. Usage of devise for user management is good. 
3. Code for Models seems to be missing, House has no entries , validations , relations etc
4. You can use rails_admin for admin account management
5. Gemfile has ref to sqlite impliescode is not deployed on heroku atleast
6. Integrations tests have been written which is good."
1,The code seems to have followed standard practices. But there is not a lot of code to begin with
1,The team has a well documented history of commits. The team has been regular in updating the github repository. The team has kept on updating the repository through both the periods of the submission. The team also has used proper commit messages to document the commit history. The readme file has also been updated regularly and contains detailed report on the functionalities associated with each user role. Also the testing information has been updated on the repository. The team could have added information on how the tests can be run . The team could have added information on how to setup the environment after cloning the repository and what all dependency information is associated with the application. The readme file could have been more structured with proper titles and paragraphs.
1,"With a total of about 55 commits, the team has made more or less periodic commits. Labels for the commits could be better so it becomes more readable"
1,"The team has total 50 commits. However, they have made commits for the code during the end days of round 1 and round 2."
1,"Code mostly follows good styling guidelines but there are a couple of issues. I would suggest splitting nouns when naming classes (e.g. PotentialBuyer instead of Potentialbuyer). Spacing is inconsistent in some classes (househunter_controller.rb#search and houses_controller.rb#show).
There are some cases when decomposition and moving functionality into a separate method would make sense. For example in search method of househunter_controller.rb class, if statements could be moved to a separate method with a descriptive name. This would make code more readable.
There are instances where code is commented out (e.g. inquirydetails_controller.rb). Removing that commented chunk entirely would make code cleaner. Deleted chunk could always be referenced in git history."
1,"The team committed changes in round 2. However, the changes were not consistently committed throughout the project period."
1,code looks clean and neat. UI design looks very good and is elegant. Search functionality for the houses should have been in controllers and not in the model.
1,"3) The search method is a little long. Some of it could have been extracted to function calls.
 
Otherwise, the code looks good. Methods were short and names were sensible."
1,Spec folder is not there. There are just some automatically generated tests in the test folder. Model/controller testing has not been done.
1,No testing has been done. I checked the RSpec folder (not present) and no changes have been made to the pre built testing files as well. You could have easily written the tests for the user model and controller just by looking at the cookbook application. Good job overall with the DB validations and checks in the application (for login/logout)
1,"1) Realtor not able to view the house listing, so unable to check if inquiry deletions."
1,"Edge cases handled well.

After hunter adds an inquiry, the ""back"" button goes again to the ""create new inquiry"" form, letting the user recreate the same inquiry multiple times
README.md does not cover how the system handles edge cases."
1,"1] when the admin deletes a real estate company it deletes the house entry but doesnot deletes the realtors entry however, for realtor the company field becomes blank.
2] when the realtor changes his company he is still able to delete and view the companies that he had listed with the previous company.
3] yes the Inquires case is handled properly ."
1,"The 'View Listings' page for a realtor errors out and does not render when the admin deletes a house hunter who is also a potential buyer for various houses. The inquiries get deleted though, but the application breaks when it comes to handling potential buyers."
1,"Yes most of the issues identified in the Round 1 was fixed apart from below
 
1) Admin Login : While creating account The UI says password as option, but i am leave them blank
2) Realtor : VIEW Listing is not working as a result realtor is not able to see the inquireis
3) was able to delete the admin account"
1,"Most basic functionalities are working. Admin functions of add/delete users is now working well.
One issue that I faced: realtor view house listings button not working, so most of the realtor functionalities (as they are dependent on houses) are not working."
1,"https://pure-peak-85957.herokuapp.com/houses When this link is opened after registering as a realtor and adding a house, the application crashes. All other basic functionality works well. Great job with the design and methods! The flow of the application could be a bit more clear instead of just listing all the links in  one page."
1,"Don't see the role switch functionality and it's not mentioned in the readme file too.
While adding a new house by an admin, it is seen that I can add it to a company, say, A and and also add a realtor, R1, which does not belong in company A, but another company, say, B. So what is the flow here? The end result is the house has a company A, but has a realtor whose company is B."
1,Some methods are a bit long and nest quite deep.
1,"couldn't relate code with the application -
for eg - admin index page has Hello admin at the top, however, there is no such thing on the UI
Similarly for inquiries- LIST the Inquiries- not found in UI"
1,"The code is much clean and readable. All the functions are short and crisp with proper indentation . However, mostly they have tried to embed the functionalities which could have been separate to be in the basic crud functions provided by rails. for eg. here , they haven't maintained a different function for the potential buyer , instead they have used a hash for it which is embedded in the show functionality of the house controller"
1,Looks like the team has committed the project as a whole. Bug fixes are done incrementally.
1,All commits were made on one day
1,There are only four commits visible and no proper commit messages. Initial commit has 228 file changes.
1,I was able to check for the realtor and house hunter. Some of the functionality of a realtor and househunter weren't working.
1,Spec folder is not there. There are some tests in the test folder.
1,Tests exist for the controller but not models.
1,"Controller test cases have been covered, but no model test cases can be seen."
1,Requesting to GIT Link to verify the same. But i downloaded the Zipped file to see if there is admin credentials in README file and it was not there.
1,The interface was simple. Some of the fields input were not mentioned like for creating house
1,"UI looks nice but I found the it to be a bit confusing. The relation between User, House Hunter and Realtor is not apparent. It would helpful if it could be explained in detail in the README file."
1,The README is empty and does not contain the admin account information. It's hard to navigate around the interface and determine where all the functionality is.
1,"The code is very well written, properly organised and good architecture. No repetition.
Cons
Application logic written in controllers, for example, house_controller, which can be ported to the respective models."
1,"did not use Rspec, but team has done testing."
1,"The team has tested parts of different models and controllers partially, but none of the models/controllers is thoroughly tested for complete functional verification"
1,"When an admin deletes a real estate company which has realtors and houses, the company gets is getting deleted along with the realtors which is not the expected functionality because realtors can exist even without being a part of a company. The realtor should not get deleted from the database. Could not test whether the inquiries are deleted if the house hunter is deleted because the admin is unable to delete a house hunter from the Users list."
1,"1) If the admin deletes a company, all the related properties will be deleted and will remove the company name assigned to any realtor.
2) If the realtor changed his or her company, the realtor cannot make changes to old posts which they have posted for the previous company they worked for. So they will not be able to edit,add or remove the houses listed in previous company.
3) If the house hunter is deleted by the admin, all the inquiries by the house hunter will be deleted and their names in the potential buyers list is removed.
However, The README.md does not cover how the system handles all these edge cases."
1,could not test inquiry form
1,"(1): Works perfectly fine
(2): The realtor is able to remove previous houses! works like charm
(3): Enquiries are not auto-deleted"
1,Checked on a few tests tuned out to be handled. If an admin deletes either a house/company/user all the dependencies are deleted.
1,"Yes, but I find a small bug, the admin can edit his profile and select change his role to realtor, although his role did not change, there is no error report."
1,"Most of the functionalities are implemented. However, ""Not a valid URL"" Error message is prohibiting from editing companies under realtors even when given a valid URL. Not able to House Hunter from the users list through admin login. The following error message is displayed.

We're sorry, but something went wrong.

If you are the application owner check the logs for more information.
Upload picture UI could have been constructed better because the picture does not fit in the given space."
1,"Realtor not able to remove their own company from profile
Back button missing from some realtor workflows
Realtor was able to updated query content"
1,"The Facebook signup which wasn't working in the previous sign up works properly. The admin, realtor, customer functionalities are working fine and I can see a lot of improvement from the previous version. The realtor can send a receive queries by the customer. However, a small suggestion would be to ask a realtor for the company name while filling the sign up form. Apart from that, the system fulfills all the requirements of the project"
1,the inquiry form is not working
1,"Most functionalities are working great.
In the first round admin was missing some basic functionalities, now they are present and working.
One issue that I came across is that while admin is creating a new company, the system keeps raising an error saying that the website url is invalid and so the users cannot create new company. Maybe, there is something wrong with the validations of Company model. However, when realtor creates the company, this error does not occur."
1,User model doesn't have all has_many relations defined
1,"The commits were spread throughout the project duration, however the commit messages could have been more descriptive. The team still made commit changes in round 2 which shows they have proceeded with development."
1,Project name could have been better
1,The logout functionality does not work for any user
1,"The team seems to have tested the login / signup module pretty well. I could hardly find any bugs there. But the team seemed to have ignored testing other modules extensively. This is because the delete functionality in many modules is not working. For example, the realtor cannot delete houses or company, neither can a house hunter delete houses from his interest list."
1,"models/search.rb line 6: Don't need to use return.
controllers/home_controller.rb line 2: You should use one line to define a empty method. 
controllers/house_controller.rb line 34: No meaning line break.
controllers/user_controller.rb line 19: No meaning line break."
1,"They team has successfully followed most of the conventions of good programming principles of ruby. The schema was very detailed and cohesive, and the variables were named appropriately and effectively. The readme provided was helpful, but the project lacked in program documentation / comments, which made me to go through each line of code to make sense out of the code. Apart from that, the practices seemed good."
1,"Once any user signs in, he/she cannot log out. This is a major flaw in the workflow"
1,"The user interface is very well designed, and the cleanest and the most user friendly among all that I've reviewed till now. The UI is very intuitive and the alternate shading of the lists improves legibility a lot. The only place where the UI was deficient was that it didn't seem consistent. The login / signup page had a different UI compared to other pages. I suppose improving consistency would increase user friendliness of the application to a lot of extent."
1,"When the project was assigned, the team didn't made much commits. But after a week and a half, they started committing on a regular basis. The frequency of commits was then linear, which is a good thing. The project didn't seem to have been completed hurriedly or at the last moment."
1,No model has been tested.
1,No test cases are implemented.
1,The team has tested controller but not model.
1,No. Edge cases not tested.
1,no testing mentioned in readme file.
1,"When delete a user with inquiry data, the system crush and return an error."
1,No users or other features.
1,"The README.md file has not been updated hence it does not provide the instructions regarding this system. It does not mention how the system handles the edge cases. Since there is no heroku link given, I cannot test the system for edge cases and also the README.md file does not specify any details."
1,"Readme.md does not mention anything with respect to edge cases.
The linking is not intuitive. You have provided back buttons in quite a few places which redirect to that entities index.html.erb page instead of redirecting to the actual page I came from. Suggestion is put in a button for menu and link the menu to the starting page of the currently logged in entity. This will make things simpler."
1,Please provide the deployment link
1,Link to deployed application is not given.
1,can not test functionalities.
1,"(1)No login or sing uo
(2)No authorization for the user, basically, any one can do anything in this system.
(3)No picture function
(4)No search function
(5)No reply for the inquiry."
1,Only the skeleton of the project is implemented all major features are absent.
1,"The heroku link to this project has not been submitted. So I am not able to check if the system works as it is supposed to work. But through the github link, the code seems legible. Without the heroku link I am not able to check if there is any functionality is missing or not."
1,"- There is no admin account
- No roles assigned to any users
- Any users can edit/delete another user
- Functionalities of potential buyer, realtors, admin missing or incorrect."
1,Houses can still be deleted by anyone and not just the realtor who posted the listing. The application link to Heroku or any other deployment link isn't given. Readme is not properly updated.
1,"Interest list has not been implemented.
Please write a readme file in your repo to let us know the admin credentials
Please provide the deployment link"
1,"there are no deployed version of the project, readme file does not give any help, and I tried to download it, and run it locally, it is not working."
1,Can't run the application.
1,29 commits total. Only one user contribute to it.
1,"Not every member of team contributed.
Could see some commits after the deadline of round2."
1,The team did not seem to submit their changes throughout the project. The team have made changes only after round 1 and nothing on round 1. There are a total of 19 commits. It would have been better if the commits have been made with messages so that others can know what changes have been made in the project.
1,There are no any submission for round 1.
1,Clean and nice code. But lack of ReadMe.
1,"There are two git links given, not sure which one to review? So reviewing the one which has more commits.
Major functionalities are not implemented so cannot comment on this.
Namings are properly given as per the rails standard."
1,Validations are not implemented in all the models.
1,"The methods seem like the ones created by the scaffold command. Even for the views, there isn't any code for eg. to display house delete only to the realtor who has created it."
1,"Two names for the Realestate company references creates confusion: company_id, re_company_id"
1,"codes looks clean, but there are no deployed version of the project."
1,"Could not find the test file, and neither is it mentioned in the README."
1,"Couldn't find any testing done for any controller. Model ""User"" was thoroughly tested."
1,Model testing needs to be improved with more scenarios.
1,"Test for user model is done.
 One test for static pages controller is done."
1,The team has not implemented any test cases for any of the entities.
1,"I could not check if most of the edge cases work. All the ways I tried doing this failed:
Admin cannot destroy most of the users, admin cannot view/edit/destroy realtors, admin was unable to destroy househunter account I created ( it was also registered as a realtor acc ), 
When i destroyed the company, associated houses were also destroyed, and their associated inquiries and replies were deleted so that edge case has been taken care of.
 
I believe that maybe all the cases are taken care of, but I could nopt test them as their dependent functionalities are not working."
1,"When a company is deleted by the admin, the realtor's profile, belonging to that company, crashes."
1,"(1) What will happen if the admin tries to delete a real estate company which has some realtors and houses?
Houses got deleted and realtor got assigned with some other random company.
 
(2) What will happen if a realtor changes his/her real estate company? Will (s)he be prohibited to remove the houses (s)he listed in the previous company?
House also got changed to realtor's new company.
 
(3) What will happen if the admin tries to delete a house hunter who has submitted several inquiries? Will the inquiries be automatically deleted? 
Cascade delete is in place."
1,"1) Admin deletes real estate company - not tested
2) Realtor sign in/signup not working
3) Inquiries not visible for househunter"
1,"The readme file is very helpful and facilitates usage of the application. There are few issues which can still be resolved such as
> The navigation issue still persists, for example if a house hunter wants to cancel the inquiry there is no way to do that. The user would be toggling between the inquiry index page and the inquiry submit page.
> The validations have still not been addressed for example an inquiry can be created without adding any details at all with all empty fields.
> If the house hunter tries to switch to the realtor view the application breaks as below:

We're sorry, but something went wrong.

 
If you are the application owner check the logs for more information."
1,"There are several improvements over the last review. Dropdowns have been implemented, which make a huge improvement to the ease of use of the system. 
 
While the UI has become a lot better, there are several flaws: 
Admin is shown to be registered as a realtor, but cannot be redirected to the pages(househunter link works).
Househunter can set another hunter's interest liist by manipulating id. 
Househunter can edit companies.
Admin cannot destroy users, 
Admin can not create/edit/destroy a realtor - error page is shown.
Realtor can list houses even if not enrolled in a company
Admin can not destroy househunter.
Passwords are visible to admin,.
 
There are a few minor problems which, if dealt with, would make code even better: 
Proper error messgaes - while signing up with wrong password length, a heroku error shows up which makes it feel like the functionality isn't working, whereas the problem can be user's fault as they  could have entered only 4 digit pin. Let users know that they need to provide proper input.
 
Also, please do not ask passwords in a text field. A very simple change can go a long way."
1,"Almost 80-85% of the features are covered.
Dual role implementation is missing/not working.
Signup doesn't give an option to register as both realtor and hunter at the same time.
Input validations are not handled.
Remove from interest list option is missing(ideally, once the user clicks on add to interest list button, the button should be changed to remove from interest list).
Admin didn't have the delete option for all the users listed (this needs to be fixed).
A realtor was not given an option to edit the details of the house he/she has listed(only photo adding feature was there)."
1,System works well except for the sign up feature.
1,"Following errors:
Realtors home page cannot be accessed after logging in as admin. 
Signup for realtor is not working
Signup for hunter is not working
Realtors home page is not showing up after signing in as realtor
Cannot signin as realtor with the credentials given in the ereadme"
1,"The house hunter page is not working. I logged in as a realtor and then switched to house hunter view. I was not able to see any house list, any interest list, send inquiry form etc. Deducted points for that. no filter function."
1,"The application has almost all of the basic functionalities including pictures uploading functionality, however the below fails: 
> A House hunter is able to see the companies and edit them as well.
> A realtor can  create houses without adding any details at all."
1,The code in controller.rb files are still incomplete for CRUD operations so I am not aware if this was tested properly.
1,"Navigation is hard, while some models seem to work for most cases, inquiries for example is not tested, as im unable to create an inquiry"
1,I cannot get access to the interface and the readme is not provided. They should provide a readme file later to state how can I test the project.
1,"I'm docking some points here because Heroku doesn't appear to work. I think some malicious reviewer deleted the admin and the real estate company, and surprise! If a company doesn't exist, it doesn't let any user sign up. 
 
Please re-seed your database so I can test your app."
1,"While some links were easy to find and navigate, after editing houses and companies, I could not return back to a good home screen. I also was unable to log out."
1,"UI doesn't have proper navigation in many pages. A suggestion would be to display the data in a more spaced out way, using html tables or such methods, as it looks very cramped and confusing."
1,"It does seem this team tried to address my earlier feedback, but I still experienced several problems. I found the following issues:


I was unable to login as an Admin.
Navigation in this app was difficult. 
There were not very intuitive links. There were too many clicks to add/remove Interest.
The Inquiries listing gave me an error. 
This app did not keep track of my session very well.
The search Houses only had one ""filter"""
1,"The Realtor cannot delete the company he/she created. Also, if the house hunter shows interest for one house the interest and inquiry by the potential house hunter is submitted for all the house present.
Admin cannot create a house and assign it to a company. Admin cannot delete a company."
1,Unable to view an enquiry for a house.
1,Edge cases not handled properly. Company delete crashing until all realtors and houses under it are deleted. House delete crashes until all inquiries on it are deleted.
1,"Admin not able to delete houses or users or companies. Unable to test a few cases due to these issues.
Realtor not able to delete houses. Error page is getting displayed."
1,"1) Admin trying to delete a user that has an inquiry and interested in some house fails as expected but the failure is not graceful. 
2) Admin can edit a profile by making a user neither a realtor nor a house hunter and delete that user that has inquiries and interests in/on a house.
3) Admin cannot destroy a company...this operation is throwing error but after updating a company, the company can be destroyed."
1,"Edge cases are handled, but arent described briefly on the readme"
1,"I can create a company, but I cannot join it as a Realtor if I already joined a company without re-clikcing the Realtor checkbox on the Edit Profile page"
1,"Only admin is in the system, rest all tables are empty. No dummy data is provided as of to test on multiple edge cases. There is no time to add on users, companies, houses, inquiries to perform testing."
1,"Unable to change company as a realtor, readme file isn't discussing any of the possible edge cases."
1,"Basic Function still have some minor problem. Like a househunter can view the potential buyers and when click view the inquiry, the web page return an error."
1,"Comments from Round 1 are taken care of. 
 
Delete real estate company crashed.
View Inquiry lists inquiries from all houses, including ones that are not under the same company. These should not be accessible to the realtor. He should see only ones from houses in his company."
1,"Realtor is not able to reply. There is no text field for the reply. Only subject and content is visible while editing and inquiry when logged in as a realtor.
Not able to delete user after logging in as admin. Error page got displayed."
1,"1) If a house hunter is interested in a house, there should be only one entry specifying this interest in the database. In this app, the same house hunter can show multiple interests on the same house. This results to duplicates in db and must be handled.
2) After creating an inquiry, clicking on the Back link on the page should re-direct to /houses or which ever page was visited before creating an inquiry. This is not happening.
3) Founded year field of the company table takes any numeric value --- Founded: 465789
4) The house hunter is able to create a company which is not supposed to be an allowed operation. This happens when as a house hunter, I edit profile and choose to be realtor, I get an option to create a company but even without changing the role to realtor.
 5) Point 3 holds good for built year field of house table Builtyear: 7598
6) View inquiries feature is not working...throws an error."
1,"There are lines that were tested but commented out, which makes it little tough to read. Other than that the flow of the code, refactoring methodologies are good."
1,"The code quality is generally good. There are several places with large blocks of commented out code that should be removed. Functions are small however, and models are used properly where they should be."
1,"They use correct files to do specific behaviors and make advantage of the features ruby and rails provides. However, I think the structure of the files is not clear enough."
1,The code looks great. It's all scaffolding and really lean view modifications.
1,"I could not find the filters tab in the show houses section for the house hunter. Rest, everything looks great."
1,"The only thing I had trouble with was changing from a house hunter to a realtor and back. It's possible I just missed the option. In my opinion, that is a rather insignificant omission."
1,"1. When admin tries to delete real estate company that has realtors and house hunters in it, there is an error that says 'Cannot delete record because of dependent realtors'. Since real estate company is a foreign key in the realtor table, the system does not allow the deletion of real estate companies that have realtors under it.
2. When a realtor changes his real estate company, the houses that are listed by him are unaffected. The system also allows the realtor to delete houses listed in the previous company.
3. I was unable to view inquiries after logging in as admin, hence I am not able to inspect the condition of submitted inquiries after the hunter who created the inquiries has been deleted."
1,Most of the functionalities are working correctly. One necessary feature that is not working as expected is inquiries. There are broken links when admin/realtor tries to view inquiries.
1,"The code on Github has 1-to-n relationship between real estate company and realtor. It also facilitates realtors to create real estate companies of their own. My doubt is whether the realtor can view, update and delete the real estate company created by him, because I could not find such a functionality implemented in the application as well as the code."
1,"Cannot delete company. Reason cited is 'dependent realtor exist'.
Realtor is able to delete houses that he created when he was in company A, after changing to company B.
When hunter is deleted by admin and inquiries are checked, the page doesnt show up. (deployment error)
 
Edge cases
Company cannot be created without filling all details. This is implemented.
Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered."
1,"Same issues as of first review. Cannot delete company. Reason cited is 'dependent realtor exist'. I suggest that when a company is removed, realtor shouldn't have a company too. Because a realtor can exist without a company in his profile too!
Admin cannot edit his/her details"
1,There seems to be no testing done.
1,Test case 1 could have been handled better.
1,"Kind off. I felt that admin should have been able to delete the company irrespective of the realtors belonging to the company. I felt that that scenario should have been handled in one of the following ways:-
1. Realtor associated to the company should be deleted, obviously not preferable.
2. Realtor continues to exist but without the company and thereby no houses or inquiries assigned to him."
1,No test cases have been written
1,"Confusing method naming: eg can_create, can_edit, can_destroy etc all should return true/false, but itredirects requests as well, which should be done in the parent method which calls them"
1,"inquiries controller and interests controller are tested
no models are tested"
1,The team has not written many test cases to thoroughly tested one model and one controller.
1,Only the default tests are present. No Custom tests to test model admin as mentioned in Readme file. It might me that the code is not yet committed.
1,The admin is tested. The user model is not completely tested. Only the admin functionality is implemented
1,Test is implemented only for model. No test is implemented for controllers.
1,"When try to delete a user with inquiry, it return some error."
1,"The result of edge cases are :
1. The admin cannot delete real companies with realtors and house hunters.
2. The realtor can change real estate company. They ill be prohibited though from viewing previous company listings.
3. The house hunter account along with their inquiries are removed from the system.
4. The realtor account links to a real estate company with 1-to-n mapping."
1,"- After the admin deletes a company, its  associated houses, realtors are not deleted.
- Realtors who don't have a company can still post a listing, view/edit other companies' listing and also send/receive inquires."
1,"What will happen if the admin tries to delete a real estate company which has some realtors and houses?: App crashes
What will happen if admin tries to delete a house hunter who has submitted several inquiries?: App crashes"
1,"you can not destroy any real estate company, realtor, or househunter as admin with any realtor, house, or inquire, it will just throw an error.
you can have negative floors for house.
readme file does not tell anything about edge cases."
1,"Along with the above improvements some of the things you might want to take care of are:
Even if a company is deleted the houses and inquires remain as it is. (Partial reason is the above bug which allows to create a house and post reply without being associated to any company).When I try to delete a house it shows application error. So not able to test if dependent child records for potential buyers and house hunters are deleted or not. For Realtor and HouseHunter Signup, it should be allowed to signup without specifying company or other details except name, email, password as per the usecase given. This is not allowed currently."
1,The system doesn't check all edge cases. A realtor can see company listings even without choosing a company. The README does not outline exactly how all edge cases are handled
1,"The househunter can edit the company, which is odd."
1,"FIXED
-Users can log in and log out
-Admin can create/view realtors/house hunters/companies
- Users can edit his/her profile
- potential buyers funtionality implemented
- inquiry funtionality implemented
ISSUES
- Admin cannot create houses
- house hunters can edit real estate companies"
1,"Admin cannot see houses/inquiries
List of realtors does display company information
List of house hunter does not display all information"
1,"realtor can view all houses posted.
realtor can create house post without join any company.
add picture button is under company instead of house, and it is not working.
a house can have negative floor numbers.
house search function only shows the first match result instead of all.
as a househunter you can edit any company, which is not allow."
1,"There was no functionality implemented during 1st review. So there is a drastic improvement. However there are some functionalities which need further improvements.
1)Admin has no option to post or view houses.2)Admin is not able submit inquiry or reply to inquiries.3) Admin has no option currently to edit his profile. He should be able to edit his name. 4)Multiple Realtors and House Hunters can be created with the same email ID. There is no email or role validation. This will allow a lot of duplicate entries and the app will also be suseptible to attacks by robots. Can be improved by a 2 line validation code in model.5) Password should be encrypted. While entering the details too it should not be displayed as plain text. Can be improved by simply using type as password instead of text  in views. and applying encryption in model so that password is encrypted throughout the application6) Search House Functionality does not work when a new house is created. It shows the same old results.7)Also the description specifies Search by Price Range. But it has only one field to input price. This won't work if the user wants to see a house which is between 1000 to 3000 bucks or any house which is less then 3000 bucks. Since the app shows only houses greater then the price entered.8) Realtor is able to create a house even if he is not associated with a company. 9) Realtor is able to view potential buyers and reply to inquiries for all houses without being associated to a company. There should be a check to ensure that realtor is able to post a house only if he is associated with a company. Also the option to view potential buyers and reply to inquiries should only be enabled for houses which are associated with his company. In case of no company association he should be promted to associate himself with a company or create a new company first."
1,"The necessary functionalities are implemented. The README file explains how to access some of these functionalities also. However, the company listings appear even before the realtor chooses a company. This shouldn't happen"
1,"The DB design is incomplete. Although it has the correct 1-to-n or n-to -n relationship, it doesn't have any kings of validation."
1,"Many 1:n and n:n relations mapped incorrectly and they cause application crash.
Code does not use dependent destroy/delete when two related (RealestateCompany is deleted, Houses )"
1,Only basic scaffold tests could be found in the test folder and the spec folder did not have any tests. The README.md did not indicate where the tests were or if there were any.
1,"Test cases written and system is checked and positive testing is done properly.
Team could perform one round of testing and solve minute errors still present."
1,"1) No model is tested.
2) Home controller test appears to be thorough."
1,rpsec file found but is empty.
1,"The testing was incomplete, the model and controller were not thoroughly tested."
1,"The test cases seem to have no additional test cases other than those automatically generated during scaffold, some of the potential missing tests include testing the role based access given to a realtor, as he is able to create multiple companies."
1,"Could not find dile in which tests are done, neither is it specified in README"
1,Very well implemented. All edge cases I tried are working. README.md does not detail how the system handles edge cases.
1,"1) It seems that something is wrong with admin login functionality, as I am not able to sign-in as an admin with the provided credentials, thus I am unable to test this edge case 
2) Due to missing functionality of realtor being associated to a company, I am unable to test this edge case.
3)  It seems that something is wrong with admin login functionality, as I am not able to sign-in as a user
4) There is no potential buyer's list, hence cannot test this edge case."
1,"The README file is properly illustrated but it does not include how the system handles edge cases.
The relationship between realtor and company is not properly implemented."
1,There is no functionality to edit a realtor's company.
1,"1) As far as I can tell, an admin cannot delete a real estate company.
2) Realtors don't appear to have real estate companies.
3) House Hunters do not seem to be able to make inquiries.
4) The README does not document any edge cases."
1,"If admin tries to delete company, corresponding houses gets deleted.
Similarly association between inquiry and other models handled well.
System goes into error when we try to create house without images, though houses gets created multiple times. (Realtors login)
Team could probability add null check for empty references."
1,"For the same reason, 3/6 edge cases passing corresponds to 50% or three stars. the README.md was very detailed."
1,"Several functionalities are working, however a few of them are still not.  The list is provided below:
 
A realtor can not see houses which do not have images attached.
A realtor can not reply to a specific inquiry, and should not be able to edit inquiries.
Realtor and househunter cannot register by same email Id.
Admin cannot view all houses or inquiries.
A realtor is able to post houses of any companies, not just the company he belongs to. 
A realtor can not choose the company he belongs to.
Realtor can not see buyers even when the buyer has put the house in interest list."
1,"Since the first round, authors seem to have progressed a lot, and added most of the missing functionalities. However, following are some of them I found missing:
1.There is no potential buyer's list for a house that can be viewed by a realtor., however there is a link to the house inquiries.
2. I am not able to associate a company to my profile as a realtor. The realtor should be able to work for only one company, however, here I am able to add multiple companies, which should be restricted to admin only.
3. preconfigured admin - unable to login to the system as admin"
1,"The role switch option between realtor and househunter is not present.
Further the operation cannot be performed manually also as same mail id cannot be used for creating two accounts."
1,Issues are fixed but creating house from a realtor account breaks in heroku. I am unable to create an account which has same email address for realtor and buyer. Realtor does not have a choose company input field to choose his realtor company.
1,"The system is in great shape. It is easily one of the best I have seen, and they still didn't implement all of the expected functionality."
1,"1. User cannot sign up as both Realtor and Hunter, no role switching."
1,"Basic functionalities are working fine Except few.
Team could work on below functionalities.
1. System crashes when realtor tries to create house.
2. House hunter can create company.
3. When clicked on show company, system crashes.
4. Passwords are visible."
1,"The Realtor cannot select an existing company and cannot see the list of the companies.
House hunter cannot see companies"
1,"Since the app threw an exception on the homepage and was unusable, this score reflects what was achieved in round 1. 27/35 basic functionalities passing corresponds to 77% or four stars. The screenshots in the README.md only demonstrated definitively features that were working in the last version."
1,"The database handles all the relationships very well.
On the downside, there is a flaw in database design - keeping a single user table and single role type means the same email address can not be used for both realtor and house hunter profiles. You can either create separate tables or more than one columns to determine if the same email has more than one role."
1,"Peak work on few days, nothing on the other."
1,"The realtor can exist without belonging to a company, this should be corrected as the realtor must belong to a company."
1,"Inquiries and house interest lists should not belong to companies. They belong to houses which belong to companies. Also, a user should not have many companies. This is possible with the database and model configuration. Otherwise, the relationships were properly implemented."
1,"The team has been submitting regularly, however they have committed some of the changes quite after the deadline, i.e. 14th Oct, 2018"
1,"history shows lots of commits, but majorly from one teammate only."
1,"Nicely implemented code. Used ruby delegations appropriately, and the code is very readable. 
However, a few things can be improved.  for eg, in inquiriy_replies_controller, flash[] is used to transfer data from the new method to the params method, which is not the correct way.
Also, I believe that the implementation can be made more efficient by reducing the number of database hits.
For example, in almost all the controllers, there are redundant database hits: User.find(session[:id]).role_type == ""buyer"" could have been identified during login. A second hit to identify the role type or any such info can be avoided. For a small test database, this would not show any performance decrease but as the records increase the pages will become exponentially slower.  
Maybe you can store these in memory [Session?], which would reduce time taken significantly at a small memory overhead."
1,"The functionalities of interest list and inquiries are implemented in a crude way, i.e. by creating a drop down for a listings. It becomes very tedious for the user to go and choose a house from hundreds of listings every time to just add it to a interest list. A better way would have been by creating an option of adding to the interest list where user can see all the listings.
Adding a user to interest list does not add the buyer a to a house's potential buyer's list. There is no option for viewing potential buyers."
1,good coding practice followed.
1,"The code employed good naming and seemed to be DRY and follow standard Ruby on Rails practices. The methods were kept short. HouseInterestList would make more sense as HouseInterest. Each row in the table is one wish list entry, not a list of wish list entries."
1,The bulk of the code I deciphered was auto-generated via scaffold but the code that is changed follows good practices.
1,Only basic operation is available. Need to add lots of functionality.
1,Rspec files are missing from the github
1,Does not tell about how to run test
1,"The readme seems incomplete. A lot of information could have been communicated through readme.  As an admin, I couldn't delete any of the listed houses or companies which I think should be allowed for the admin."
1,Readme doesnt cover the edge cases.
1,"Mapping of a house to a company is missing.
Realtor Company mapping is also missing.
Destroy feature for a house is not working"
1,"destroy does not work at all, it will redirect user back to edit page of the object for houses and real estate companies. For users, if they have a foreign key association with any inquire, then you can not delete them."
1,"Deleting a house hunter does not work, possible error in deployment.
 
Edge cases
Company cannot be created without filling all details. This is implemented.
Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered."
1,"Here is something which needs to be focused:
1. I can't see the association between company and houses. 
2. Deletion of company by admin is redirecting to show.html.erb and not deleting the company.
3. I'm not able to view the inquiries too.
In most of the views, deletion is not working."
1,"When admin try to delete a user, the website return some error.
When the admin try  to delete a real estate company, it just redirect to the edit route instead of delete the company"
1,"As a hunter, I get a ""View house inquiries"" button but the system crashes when I click on it."
1,"The developers have put in dropdowns for role selection and company selection making the interface more intuitive. The application broke in Heroku when I tried to login though it might be a Heroku specific error. The login/signup buttons on the landing page don't seem to work. In fact, none of the buttons seem to work, and I am not even getting the hand pointer as you have mentioned in the readme."
1,"You should restrict the format of the website of company.
After add a company, I can't edit and destroy my own company."
1,"Issues - Able to create admin accounts.
View Inquiry is failing for HouseHunter.
No way to see interested house list."
1,"Realtor can not have no company, realtor is forced to join one of the real estate companies.
As a realtor I can not destroy the company I create, and only first real estate company on the index page has navigation buttons.
And any realtor can edit the first real estate company which is not own by them.
floor number can be negative. house image can only read local images, those houses created by other can not be seen.
you can not create an account that has both realtor and househunter role.
Househunter can not send inquiry in a house, it shows up an error said house must be exist."
1,"House images look broken.
Destroying a company does not work, instead leads to edit company page."
1,"There are some functionalities which needs to be implemented.
Areas you should focus on are destroy is not working correctly in some cases,application is getting crashed again and again. admin should not be deleted by user. how is house associated with a company is something which I was not able to understand."
1,DB seems well designed. I didn't see potential buyers. That will have a relation with house such that house has many potential buyers.
1,DB design is not taken care of properly. Various mappings between entities have not been established.
1,"Some of the relationships are handled in the project.  I can't find the other important association like:
1. company has many houses(why it is commented?)
2. house belongs to a user or a company"
1,"Yes, the team has committed changes in round 2 also. Overall it looks like the codes were pushed to master and one go. Regularly committing the files could have been better."
1,"Max commits were made on the last day of submission. No, no changes are committed in round 2."
1,"No, this team has not tested any model. The controller tests does not handle all the cases."
1,"HH is able to view all the other house hunters and their contact details which only admin is designated to view. Major privacy breach.
README.md file well written."
1,Not able to test as the sign up failed and admin couldn't add users too.
1,All commits were on just 2 days before and on the day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
1,They made commits but some commits combined a lot of features together at once
1,"Yes, team kept on submitting their changes throughout the project and no commits are made in round 2."
1,"- No validations have been implemented in any models.
- dependent constraints or foreign keys are not checked for destroy action"
1,"sessions.rb
create method has 3 large code blocks for the three role types. It would have been better to create separate methods for each type"
1,Tested but not thoroughly.
1,There could be more test cases included and did not find enough information on test cases in the read me.
1,Test cases for the user have not been implemented.
1,"1. If the company that a realtor belongs to is deleted, his or her company will be the admin company, which I think may nit be the best choice. The company can be empty and in that case, the realtor should nit be able to list a house.
2. The inquiry should be able to show the hunter's name, not the code string."
1,"1. If the admin deletes realtor/company accounts, house ads posted by them still shows.
2. If realtor changes his company then he can no delete the ad post posted by him previously.
3. If an admin deletes house hunters, inquiries remain saved."
1,"1. This test fails, as corresponding houses and realtors are not deleted.
2. The realtor's current company is not visible (feature break), thus it fails.
3. This test case fails as inquiry of the user is not deleted."
1,Deleting a company doesn't delete houses.Deleting househunter doesn't his/her inquiries.
1,"Many of the edge cases are covered.
One issue I found is that the back buttons for admin in the edit admin page and real estate companies page moves in loop."
1,"Most of the functionalities seem to work fine. Below are some of them which break or are absent:
1.Link to view current user's company breaks and there is nothing to show.
2. There is no option to change a user's company.
3. There is no interest list for a house hunter.
4. There is no potential buyer's list for a listing."
1,"This system does not seem to work correctly. When I log in as a realtor and go to view companies, I get a Something Went Wrong error from heroku, telling me to check the logs. Validation in adding houses also doesn't seem to work correctly."
1,Potential buyers section is missing
1,No way for a house hunter to to interested in a house. A user not able to have multiple roles
1,"Could not add a company as a realtor. Also could not attach and display a picture when listing a house.
When signing up as house hunter was asked to select a real estate company.
The house Interest /interest list feature  has not been implemented.
Also the inquiry is not associated with a listed house.
Cannot delete real estate companies."
1,Active record relationships are missing. All the relations are implemented through code logic.
1,"Some of the missing relationships I identified:
1. Company has_many houses
2. House has_many inquiries
3. Realtor has_one company"
1,inquiry doesn't seem to belong to a house and there is no table for potential buyes
1,The team kept on committing on the regular bases but needed team collaboration. Mostly commits are from one person.
1,Yes they did commit changes in round 2. But it seems only one person has contributed in a group of 3
1,Yes. The team kept pushing commits through out the duration of the project. The team even kept pushing commits during round 2. Though it seems like only 2 of the team members did the majority of work.
1,"It would be more modular if realtors, house hunters and admin were a different table. Since they are clubbed under users table, there are many checks performed in most of the views.
Cannot identify user names, company names as IDs are displayed. It would be helpful if this can be modified."
1,"The code in this project generally appears to be readable. Home controller should probably have a different name, just because controllers are generally supposed to be plural, but there is only one home in their website. Their house search controller appears to be in the model section of the project though."
1,I could see commits by only one person. Need team contribution.
1,"Yes, seems to be so the case in effect the last commit being just 5 hrs ago. But what changes against each file have been made is not clear hence its a bit unclear as to the extent and the number of changes made. Moreover, the amount of subject matter and the number of sessions or models are far too less to be implementing any changes as such."
1,"There are only ten commits and that too only from one account, which means it has only been done by one individual and not a team."
1,"the User model has been tested, although I can't say it is thorough at this point, as it only tests the validity that is already required by the model."
1,The team hasn't yet implemented any proper testing
1,"No, that doesn't seem to be the case since, it has been a very jumpy approach and also the functionality of only a basic login has been added. So, if adding the bare login and sign up is considered as an MVC architecture then they have surely built a bare backbone of it."
1,"Functionalities are incomplete, while able to log in through admin, cannot edit or create any other user because of the error."
1,"There seems to be many functionalities missing. I cannot register as hunter or realtor. Hunter, Realtor, Interest of Buying, Inquiries ...These model do not appear to be in the folder app/models/... Seems to be an incomplete project, unless the previous reviewer cracked the system."
1,"Doesn't seem like it. only user and company part have been implemented and I was able to delete the admin user easily,and in the company edit view for e.g year input doesn't check for a valid year(398343 is a valid year). Therefore it has not been thoroughly tested"
1,Readme file is absent.
1,There is a scope of improvement by eliminating multiple 'back' links on each page.
1,This UI is pretty good. It's fairly intuitive to follow. The only thing I'd recommend is to have a link to the signup page on your welcome screen.
1,"It is not a very intuitive user interface because the ease of navigation not achieved in it due to the ill defined 'db' folders and the routes.rb file in git hub makes the session linkage a bit hard to follow. 
Also, I fail to understand the structural flow of the program even after logging in after signing up. So, I get easily confused on what to do. Sign up is not validated for any functionality be it user or admin or realtor and we don't know what to do and that are we admins or any other user. Privilege separation has not been done.
Also, the README barely resolve the dilemma and is of minimal help to us to follow the steps."
1,"Admin - 
Not able to create a Real estate company - loads error page
After creating a new user, not able to see the user in the list
Couldn't find sign up for a realtor/House hunter - throwing an error - 

Company must exist

This is because of the foreign key reference and while creating the user there is no field to select one so it gets an empty or nil value.
No houses and inquiries functionality created yet.
Not able to check the functionalities of house hunter and realtor as was not able to sign up for that user because of the above error"
1,I cannot create any hunter or realtor accounts.
1,Readme not well defined
1,"It seems as though you have an awful lot of controllers that are supposed to have something to do with authentication that either don't get used or don't have any code in them. Other than that, the project looks organized like a Ruby on Rails project should be. There is a lot of code that is hard to follow, and I can't discern its purpose in several controllers."
1,"The code is properly written with good Ruby practices, however, no comments are mentioned."
1,"Yes partially, the code has the parameters not well defined for all only one conceivable user seemingly admin and that too is doubtful to have the correct MVC Layout. 
For instance, they seem to have created separate MVC architectures for Admins, Companies and Users only. This goes to show that they are lacking in a layered approach on access and privileges. 
Also, the code is written in a reasonably clean and formatted style with the variable definitions to be self-explanatory of the functionalities they perform in most cases for whichever few roles defined."
1,The code base is very minimum. Many functionalities are not implemented.
1,"With a total of 77 commits, the team has actively pushed changes to the project. Although not all commits are labeled very accurately, it is still easy to comprehend the pushed changes."
1,Could not find custom tests.
1,Extra credit features have not been implemented. No google sign-in and no email replies
1,"I could only check househunter UI. Since I could not find admin and realtor code on github either, I believe you are yet to implement the functionality. 
The UI I viewed was easy to use. Further site is responsive and incorporates several new features like requiring password for editing the profile. I guess that was work of a gem, but either way, good work!"
1,The design lacks dynamic paging for different users. all the links are visible to all the users and upon clicking the links an error comes that you are not authorized to perform the action. Ideally only relevant links should be visible to the user. It confuses the user regaring the actions he/she can perform. The user needs to perform all the actions visible in the UI to know what are the actions relevant for him/her. The readme file also is not well described about the actions that can be performed by the user. The readme file currently lacks any relevant information.
1,"Yes the UI is pretty smooth and a person can navigate freely. However, in some cases there is no ""back"" link in the web-page, so the user has to use browser navigation to go to the previous page."
1,"No, the README file tells me what I should do to test in local computer, and does not offer admin's information or any instruction of how to operate when login to the website."
1,"The User Interface is very intuitive. The idea to add a field for preferred contact is very smart and relevant. Displaying the number of registered users, however, seems irrelevant to the house hunter and realtor. Perhaps this can be a function of the admin account where it would be more relevant."
1,"UI is easy to use, a suggestion would be to display tables of data better, with better spacing (the list houses page for example has the columns cramped up together)"
1,The app was designed according to the ruby conventions and coding practices. The necessary authorizations are used along with gems to handle user session. Some models do not have the complete validations but the validations in place are using the ruby practices. The active record and association between models is also used in the project.
1,"I could not find any file in which tests have been implemented, and neither is the file mentioned in README."
1,Some test cases are written but not complete for one model and controller.
1,"The team has implemented test for the user model and controller. However, it would make for better design if they used the RSpec Framework to do the test. More comprehensive test cases could be tested such as if the passwords of the user don't match."
1,"Most models seem to be tested, with a few errors in some places."
1,"Admin cannot delete real estate companies, users or houses. I found that admin can delete these if they are not related to anything else, i.e. if there is a house which is not present in interest list, has no inquiries than it can be deleted. Ditto others.
I suspect that the error is thrown as the entry is being referenced in some other table as foreign key. This would imply that edge cases have not been implemented, or are for some reason not working on heroku."
1,App crashes if I test any of these mentioned cases
1,"Application errors out in edge cases. 
Deleting house shows error.
User deletion throws an error."
1,"First of all, I cannot login as an admin, so I cannot validate most of edge cases. But through the way they handle the relationships between models. I think some of the edge cases may not happen after fixing the problem."
1,The feature to add a company to a realtor does not work correctly in the application. The app crashes when he chooses the company. The team could try to fix this issue and correspondingly handle the edge cases.
1,"Unable to switch real estate companies, leads to an error page."
1,"1. I wasn't able to log in from the admin role to test.
2. When I tested, the realtor wasn't able to join a real estate company.
3. Couldn't login from admin account."
1,"The basic functionalities work nicely.
Creating houses, signup and signin, house search, inquiry and reply etc work correctly.
All the validations are present.
However a few functionalities are not working: 
1. A house without a photo can not be seen (Error in showing the house)
2. Houses information (index) is shown incorrectly - Forgot to add table headings? 
3. Potential buyer functionality not implemented correctly - Can not see any details, just show, edit,delete options
4. Admin can not delete companies, houses or realtors if they are referenced elsewhere - see next answer below for details.
5. Realtor cannot reply to inquiry and cannot destroy his house.
7. Admin can not see inquiries even when some are there."
1,"Cannot sign in as a Realtor. After signing in as a Househunter, you can view realtors list."
1,"App crashes when I try to create a RealEstateCompany
App crashes when I try to create a House, etc
App crashes when I try to add multiple Realtors into a Company"
1,"Admin login is failing with the credentials provided in the readme file. Not able to test any functionality of admin.
Clicking on show button for the house results in error page when I have logged in as a realtor.
Deleting my own account results in error."
1,"No, not really. First of all,  I still cannot login in as admin according to the account and password offered in README file. So I cannot see what could happen when I log in as an admin. Even though a hunter can put an inquiry for a house, but the realtor are not able to reply it. However, compared to the commitment in round 1, they have made a lot of improvements, but the admin part is still falling."
1,"The system has all the required functionality. However, it would also be useful if the README file explained where some of the features are incorporated. For instance, the submit inquiry field is located on the show page for the houses. This is not immediately intuitive. It could help if that is mentioned in the README"
1,Unable to view a newly created house.
1,"Basic functionalities seem to be working now.
I could see that there have been many functionalities been added in round2 which weren't present in round 1. Though, certain functionalities are still not present. eg. realtor joining a real estate company."
1,Most of the relationships have been implemented. I couldn't log in to the admin
1,"In general, The code of this system is in a clean and readable, and written in the MVC way. But there are some problems in the code. For example, in the realtor controller, there is no method to handle the ""join"" action when a realtor wants to join in a new company. And a realtor can not receive a inquires from hunter. Besides, in the models folder, I seems redundant to me: role, users, and users_roles, making reader easily confused."
1,"All code written is clearly in separate and well defined methods. Although the program still misses out on comments, but you can still find out what a particular part does as the methods have been named appropriately."
1,"Unable to list houses in the application. Since the basic functionalities are not working , the edge cases could not be tested."
1,"No test cases for models.
Controllers are partially tested."
1,"The team has written multiple test cases for the controllers of all the entities, however has not written any for the models."
1,Poor validation checks
1,"Admin can't delete a real estate company. Clicking destroy takes it back to the show page. So couldn't test the first use case. 
Realtor is unable to create new houses and admin doesn't have the option to create houses. So couldn't test the second use case.
Realtors can't see inquiries and potential buyers. 'Show' page running into errors.
 
Due to the combination of these issues, couldn't test any of these edge cases."
1,">Unable to test the edge cases as the many functionalities are not working as stated above.
> The logout functionality does not work. User is  enabled to login as an admin and realtor at the same time, but cannot log out.
> The validation have still not been implemented in the application for example entities can be created without adding any details in the field.
Please find the Real estate company creation screen as below:
Real estate company was successfully created.

Real estate company was successfully created.
Name:
Website:
Address:
Size:
Founded:
Revenue:
Synopsis:"
1,"1.realtor has to choose a company while signing up. Realtor can not create a company. Admin has to create the company for realtor.
2. Realtor cannot create a house. After clicking on the create house button , some exception is thrown in the console. Realtor can not list a house.
3. Logout is not working
4. Since the house can not be listed and there are no houses in the system , other functionalities can not be tested.
 
The basic functionalities are not working."
1,"1. Problem in Admin Logout
2. No option for updating profile for realtor
3. Realtor cannot create a new company.
4. Realtor cannot view Potential Buyers of his company.
5. Realtor cannot view inquiries for a house.
6. Realtor cannot submit replies for inquiries.
7. Realtor cannot sign out.
8. Hunter cannot edit his profile.
9. Hunter cannot view Real Estate Company information.
10. Hunter cannot add a house in his interested list.
11. Hunter cannot sign out.
12. Admin cannot view inquiries."
1,"The System just works in few functions. Even though authors fix the problem that admin cannot log in in the first round, it still lack many functions that the system supposed to have. From the admin perspetive, admin can edit, show and delete any users; create, show, edit and delete any companies, but it cannot create a new user. Besides, when I click the link of house, the 404 page jump out, which means that there is no way that I can see any houses listed. From realtor's perspertive, a realtor can sign up and log in. Apart from these, there is no other fuction that realized in the system. A realtor cannot switch his/her role or edit his/her profile, cannot list houses, choose company she/he belongs to, and reply any inquiries from hunters. From the perspertive of hunter, authors just realized the function of signup and sign in. Besides those, it doesn't have any other functions that the system is supposed to have.
Besides, there are some problems in log in part. When I  log out as admin and log in as a realtor or a hunter, I can still access"
1,"Realtor can't sign up without specifying a real estate company. This shouldn't be the case.
Realtor can't edit his profile after logging in.
Admin not able to create realtors and house hunters. Nothing happens when the submit button is clicked. Later this was found out to be because of the phone number not having 10 digits. But no error or validation message was shown. 
Admin can't create new houses.
Realtor after logging in can only create and view houses. No way found to view and reply to inquiries. Also, no way found to see potential buyers.
House hunters can edit houses due to session issues.
 
House Search feature breaks. It works only with location.
Realtors are not able to add new houses.
Admin can't delete a real estate company. Clicking destroy takes it back to the show page.
Log out running into errors."
1,"The team has tried implementing a lot of functionalities as per the code. However, the below ones does not work:
>The admin cannot view or delete the inquiries made by house hunter.
> While trying to logout as an admin the application breaks.
> The realtor cannot edit the information.
> While realtor tries to add/view houses the application breaks. 
 >While trying to view the houses as an admin the application breaks.

We're sorry, but something went wrong.

If you are the application owner check the logs for more information."
1,"The use of active record is missing from the application. There are no foreign key relationships in the schema. Although the relationship are maintained in the model file.
A separate database is created for admin/realtor/hunter which will store a lot of redundant data. There is no database for storing the response of inquiries. According to the db design , a house belongs to both a company and a realtor directly which is not correct."
1,"No, according to the commits record in github, I think that they seems created a new repository to replace the old one, and most of changes happened in one day, Oct 10. Besides, I cannot see the sign of team work. In Oct 6,  one guy submited the first comit, and the other guy submitted some changes in Oct 10, which doesn't look like a team work. Since they replaced the old repository with a new repo and didn't show much sign of team working, I give they one point."
1,"The application code is properly divided into modules. the controller have defined functions for various tasks. The functionalities of interest list , potential buyers , replies to inquires are missing from the application.
Class Reg1 is not a proper name for the class . Also the class is included in the houses controller which is not a good programming practice. The developers should have created a new controller for the Reg1 class.
The validations are missing for Company details.
Also separate sessions are created for different user types."
1,"Overall, it's good. Also in houses_controller.rb, the logic in the find_houses method should have been moved to the corresponding model. Application logic should be moved to the model. The admins_controller found in app/controllers is empty. What's it for? Also, when it comes to naming, house_controller and home_controller seems confusing."
1,The team has to tested any model or controller.
1,"No, automated tests for model and controller missing"
1,No models or controllers are tested
1,No testing done.
1,"It's hard to tell, but there does seem to be an attempt at test even though some functionality is still missing."
1,No controller nor model is tested.
1,"There is no admin credentials provided, so could not test the edge cases which involves admin. Could not establish a relationship between a realtor and company. There is no delete and update functionality provided so could not validate the edge cases related to them."
1,"Admin details in readme missing 
 No way to create real estate company, 
When admin tries creating new user, signup button shows, it should not be
In user lists, can see multiple admin accounts with same user name , email"
1,The edge cases have not been handled as these edge cases depend on one or more basic functionalities that have not yet been implemented.
1,"(1) Admin not implemented
(2) Real estate company functionality missing.
(3) Admin not implemented
The Readme.md wasn't updated to reflect the state of the application. As best I can tell the app doesn't handle any known edge case."
1,"There's no way to actually test this, but from the code I don't believe that any of the edge cases would do anything."
1,"It seems not working properly. When logged in as a realtor, click on the view inquiry will jump to the house page."
1,Many functionalities don't work as mentioned in the requirement. README doesn't provide enough description on how to finish the tasks.
1,"The login and sign up page work as expected. But the following have changes to be implemented -

The view is poorly developed.
Admin login credentials are not mentioned, so could not test the admin functionality.
Validation for phone number and email id has not been done. The system accepts a number which has less than 10 digits and an invalid email id.
Creation of a new house is inside inquiries tab under realtors page which is misleading.
Not able to associate a realtor with a company, hence not able to validate the update and delete functionality of a company from inside the realtors page. 
Not able to switch between realtor and house hunter if an user is both.
Delete and update functionalities have not been implemented.
Inquiry creation from house hunter page is not implemented."
1,"View Inquiries links to the CreateHouseInformation page, and when you are creating any type of object, there seems to be no validation, and you are required to manually input things like ID. It seems like inquiries don't exist in the system, and when you create a house, it's done through the inquiry page."
1,"1) Preferred contact doesnt have call as one of the options.
2) As a house hunter, I am unable to view and edit my profile.
3) As a realtor, I am unable to view and edit my profile.
4) Wrong error message while creating a house: Oops, couldn't create account. Please make sure you are using a valid email and password and try again.
5) While creating a house, the realtor is needed to list the potential buyers which is a wrong analysis. As a house hunter shows interest in the house, this information will be populated.
6) As a house hunter, I am unable to create a company.
7) As a realtor, I am unable to view or edit a company
8) As a house hunter, I am unable to create an inquiry
9) As an admin, I am unable to edit and delete users 
10) As an admin, I am unable to edit houses 
11) Interests and inquiry features are not yet implemented."
1,"Can't switch between house hunter and user.
Anyone can create a house.
viewing inquiries directs to creating a house.
Admin not configured(that I can tell).
Creating/changing real estate companies isn't implemented."
1,The View Inquiries link takes you to the wrong page. Users can't view nor edit their profile. There isn't (as far as I can tell) any way to post a house as a realtor.
1,Houses cannot be created.
1,"the relationships between inquiries and house, house and company, potential users and house are absent."
1,"There is a relationship established between users and the company. However, a relationship between a house and a realtor or a company has not been established. This has negative impacts on the functionality.  There is no relationship between an inquiry and a house hunter or a realtor, which has impacts on the functionality. For example, if a certain house hunter is deleted from the data base, the inquiry associated with the house hunter will not be destroyed."
1,"Relationships are missing  for eg relation between inquiry and sender , receiver missing."
1,"None of the relationships are handled with the built in has_one has_many or belongs_to functionality, except the user model which randomly belongs_to realestate"
1,No idea if it works as there was no admin login or create company functionality.
1,The inquiries aren't linked to house hunters.
1,None of the models specify any belongs_to or has_many relationship and no migrate nor schema stores an official reference to be used.
1,"The team has committed changes after round one. However, there are less number of commits and are not spread throughout the life of the project. A single commit is used for various functionalities which makes it difficult to understand the exact functionality changes. The commit messages are not appropriate which makes it harder to find out what the fix is about. There are commits even after the round 2 deadline."
1,Found commits only near the deadlines.
1,It seems like almost all changes were made on one day for part 2 of the project.
1,Nearly all commits occurred during round 2.
1,I'm afraid the code is not well organized because the functions are not working properly.
1,"Code looks okay, but I found few features missing. As far as code is concerned found admin details hard coded in the code, this is a wrong way to do. 
 Could have used tables for better alignment"
1,Missing many functionalities for realtor and house hunter such as login.
1,"Tests have been implemented for a model and a controller.
However, I believe that they are not exhaustive. Only one test case which will succeed has been implemented. You should try to implement more test cases, like what happens when one of the things which is mandatory is absent.
Further, I am afraid that the tests are not testing the correct thing. For eg, should create real_estate_company tests 
assert_redirected_to ""/real_estate_companies/#{r.id}"" while it should be testing if the company can be saved."
1,"1. the realtors also got deleted its a pass
2.switches successfully
3.previous company house cannot be removed
inquires, will not get deleted with the removed house hunter"
1,"Unfortunately, all the edge cases in the given question are failing

The system encounters an error while deleting a real estate company
After changing the real estate company, the realtor can still delete the house that he had created with a previous company
Even after deleting the user from the dashboard, the queries submitted by the users are not deleted
There was no potential buyers list available for viewing even after adding houses to the interest list myself

These cases could be seen upon and improved"
1,"Handles most of the edge cases properly.
There are some bugs related to Messages as i could not test it properly.
In some cases deleting a user or a company fails."
1,"While Trying to delete a real estate company with existing realtors, the system is failing."
1,"Admin can not delete or edit companies,
The search functionality for houses is not working (Filter by min price)
Admin can add house to only one company.
Admin can not view list of users
Admin can not delete inquiries from the system.
Realtor can not view inquiries sent to houses in the company not posted by him"
1,"1 ) Admin cannot reply to Inquiries Posted by the users. If he can I am not able to find that option from the dashboard.
2 ) Admin cannot delete the real estate companies in some random cases. works in some.
3 ) I could not find the option to switch between hunter and realtor roles.
4 ) Search is Case sensitive
5 )"
1,"A lot of commits were done in phase 2. A total of 106 commits were performed which is quite impressive. It shows that the team was working in a timely manner, so well done there.  However, I deducted 1 star as I could see 2 commits done after the deadline on Oct 13."
1,"Ruby guidelines are followed to good extent. Clean and legible code. A few things can be written in a more ""ruby like"" manner, like the index method of house controller. E.g. min_price = something if ... would be a better and more concise alternative. Models can have more validations. Other than that, code is well written."
1,"The login opens the user page which has which has 5 ""back"" links for some reason and they do not do anything. No common home page for all the list views. Have to all the list views go from user pages. List of companies is not in tabulated form, thus very difficult to read"
1,"One thing is that once the company that a realtor belongs to was destroyed, he or she can also list houses, and that should be reconsidered."
1,"This system is not properly linked together. Real Estate companies are not required to list houses, realtors can see and respond to all inquiries from everyone, creation of inquiries is not linked to a specific house."
1,"Unfortunately most of the edge cases fail.

The houses of the realtors are listed even after deleting the real estate company. Also the realtors list display the realtors associated with the deleted real estate company.
The realtor is able to access the houses owned by old real estate companies after changing their own real estate company
After deleting a user, the inquiries continue to be listed"
1,if a company is deleted the realtor and houses doesn't get deleted. and if a house gets deleted the inquires are not getting deleted.
1,"User Role-: Once a user is created, and goes to edit their profile, if they uncheck both roles there is no way for that user to get any role back. Their should be a check in the user table that both roles cannot be blank.
Also, unfortunately there is no mention of how the system handles edge cases in the Readme file"
1,"1. houses stillshow up after deleting company
2. when a realtor switches companies, their old listed house still shows up and is editable
3. no potential buyer list"
1,"It seems evident that there are deletion issues for any resource/user that is already indexed on some other resource/user. The solution to that issue would be  adding a destroy dependency in model files, for example for house hunters, has_many :inquiries, dependent::destroy"
1,"most the things are done in phase 2 only. but few things are missing. house hunter can't edit/delete his inquiry. no page for house hunter to see what all he has marked as interested. Not able to figure out as a house hunter if i have marked a house interested or not. realtor not . able to reply to inquiry, its throwing error."
1,"The code itself is fairly clean and readable. The class ListOfPotentialBuyers is poorly named, and I'm not sure you need a separate class for it."
1,"Overall the code is written in an extremely clean and readable way. Having said that I would like to propose one suggestion which may help in future.
There's 2 instances where code has been added in the index function of controllers (namely houses_controller.rb & list_of_pot_buyers_controller.rb). After the if else condition if search exists or not, the main search logic in houses_controller.rb could be added to a new function by passing the search params to that function.
Similarly in list_of_pot_buyers_controller.rb, the SQL queries should be put in other functions say ""def generate_list_of_potential_buyers"""
1,The quality of the code is reasonably good. Would it be possible for the team to avoid using the little interpretable ruby they use in the html files and instead use the controllers and its helpers for writing all logic?
1,"All the major functionalities work and most of them work. However, There are a couple of bugs that could be solved:

After submitting a inquiry and clicking ""back"", the user is redirected to the page where all the messages in the database are shown
The realtor is not able to view the potential buyers for any house

The look and all the major functionalities are running smoothly. Great work on that!"
1,"No, The changes were made and pushed only in one particular day. There is no consistent flow on GitHub for pushing."
1,"The team has implemented modules like: Login, signup, logout, List all companies and List all houses.
However, they lack in many functionalities and under each module. So they are not properly implemented. They lack validations, session management and things like multiple same email addresses can be registered with different users.
 
Hence, no the team has not thoroughly tested at least one model or controller."
1,No test cases have been implemented for any entity.
1,the README file is not maintained by the developer. The design is not complete. Whatever is done is intuitive but incomplete.
1,"Nearly all of the links seem to go to the wrong pages. For example, ""Back"" in Viewing Houses took me to a list of Users that had signed up, while logged in as a Realtor."
1,"Readme file is not updated and there are no instructions on how an admin or a house hunter can log in. The UI, though it didn't have any styling, is intuitive and self explanatory."
1,"Basic navigation is missing. For example, Once a user click on the edit profile and tries to navigate, its difficult to return to home page. 
There are no details available in the readme file to help with the application flow."
1,"Nothing mentioned in readme file.
user interface not easy .just provided links for realtor creation.
No link for house hunter."
1,"The application is modled according to the ruby practices but lacks the use of ruby features such as validations , associations and active record."
1,"The team followed good practices. No repetition of the code. DRY principles uses. How, there is an empty controller though, which is, the commons_controller.rb. What is its purpose?"
1,"Some indentation issues in the project.For example in index.html.erb indentation is not proper.
Splelling mistakes.For example in hunters view in index .html.erb  prefered spelling is wrong."
1,"Except the login controller, none of the models/controller seems to be well tested.There are no test-cases written for any of the controllers, or in general any component of the application."
1,"1) When the admin deletes a real estate company all the realtors associated with them are deleted along with all the houses posted by those realtors.
2) Currently the Realtor is able to edit/delete houses of other companies which is the fault in the behavior and the team needs to correct this to test this edge case.
3) If Admin deletes a house_hunter all their queries are automatically deleted.Also they are deleted from potential buyers list.
4) i)If a Relator replies to the query, the house hunter is unable to see them in the system.
ii) Validation on phone numbers should be enforced.
iii) Session handling could be improved, few left over data are present on screen after logging out and using direct links to access page. such as hunter query after logging out.
   No documentation on READ.me regarding edge cases."
1,"1. DELETES
2. NOPE
3. DELETES
4. NO EDGE CASES MENTIONED"
1,"All basic functionality outlined by the test suite is working as expected with few corner case bugs. The filter functionality should have been more flexible to filter for a range of price and Sq ft, rather than try to match exact numbers provided which is not user friendly. Also the realtor signup should allow realtor to choose company from list available which is more user-friendly"
1,"85-90% of the functionalities are covered.
 
Issues:
1. A realtor could edit the information of houses that were not part of his/her company.
2. Option to signup as both realtor and hunter at the same time is missing.
3. Role switching feature is missing(if a user has both hunter and realtor roles).
4. Feature to delete the uploaded image for a house is missing.
5. There was no option to view the replies sent to hunters queries."
1,"After logging in as realtor or house hunter, if we press the button create a house or an inquiry, and before creating if we press back button , the user is taken to home page where he has to log in again."
1,"The team has partially handled the relationships. 
Has_many:
They have aptly provided all the has_many relationships, such as RealEstateCompany has many houses, relators; A House Hunter has many interest and inquiry etc. One more relation should have been a relator has many houses under him.
Most of these relations are bi-directional associations, so there should ideally have been a belongs_to relation. Such as, if a Company has many realtors, then a relator belongs_company is an association. No such relations are found in code.
Also, as the realtor can only be linked to one company at a time, this calls for a has_one relation."
1,"No, according to the Git history, there has not been no changes pushed after Oct 1st"
1,No. They only have 3 commits and 1 branch so that means they waited until the last minute to do thi
1,"I can not see the completed devolepment procedure, the only commit in the github is happend on Monday, the week of 9/30."
1,"The project only has 3 commits, all on  a single day. So yes, it can't be said that the project was implemented or developed over a period of time."
1,"No, testing is not covered yet."
1,I don't think the test has been finished. the controller test file is basic empty and the same empty in the model test file.
1,"All the buttons which do what they say they do are quite good. Quite reasonably, I can click on these buttons and the expected behavior occurs. It's a little weird to have to select whether I want to log in as a house hunter, a realtor, or the admin at the login screen, and that it doesn't work without selecting the right user type.
 
Unfortunately, many buttons do not do what they say, or redirect the application to a dead page. Here are the functionalities which do not work:
1. Attempting to delete Real Estate Company makes you view Real Estate Company detailed info. Inquiries do the same.
2. Attempting to 'show' anything that's not a real estate company throws a 406.
3. As a realtor, I tried to Update/add company information and my change was rejected.
4. The List a House form has 'create company' as its submit button. 
 
There are also many things I expected to be able to do that there were not buttons or links for."
1,The UI is basic as of now. The 'show profile' link is broken.
1,"The user interface is very simple, clear and straightforward. But it lacks depth where it should have been extensive. For example, after signing up for the first time, the user is directed by to the login page to login again. This is not very user friendly, and is rather redundant. One must automatically sign in after creating an account. Also, the application should deduce whether I'm a realtor or a househunter or an admin from the email ID i entered. I should atleast now have to specify for househunter or realtor about my role."
1,The Code is structured as per basic rails norms. The CRUD operations operations actions could have followed the usual norms than custom actions defined. The routes config could have been more efficiently defined using match than defining each routes separately.
1,"Overall, the code looks fine.
Good code is self-documenting - So, your code could be improved by adding comments in all required places.
Make use of different logging options provided by ROR and avoid using ""puts"" in code."
1,"From what I see it looks like code we have seen in class. Although in the model classes, they don't have any associations between models."
1,"The project has successfully named it's varables and function names according to the principle. They are understandable form what the mean. But the project lacks any documentation internally, as well as a proper external readme file. Lack of code documentation makes it tough for the reviewer to make sense of the code. Apart from that, the design of the database schema isn't normalized to much extent, which makes data entries redundant."
1,"Tests are good, but RSpec wasn't used for any of them."
1,the link to git is not provided .
1,I Don't see the GIT Link to comment on this. Requesting the Team to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
1,"Only 4 commits, No Github link. Hard to review. Please update the Submission with a github link so other reviewers can maybe give some proepr feedback after testing the app."
1,Can not tell without a git link.
1,No git link available to track progress.
1,Test cases for 'house controller' have been implemented in the code. No test cases for model exist.
1,I Don't see the Deployment URL to comment on this and rest other UI questions. Requesting to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
1,"The project is not deployed on either of mentioned cloud platforms such as Heroku, AWS or VCL. Instead an locally run server's IP link is provided, which doesn't seem to work. As a result, I cannot test the interface at all. No README is provided as well."
1,No readme file found
1,Cannot run the app
1,Can not load the online page.
1,"No readme, or git link, code is difficult to sort through from the zip file."
1,The git repository link is not provided. A zip file is provided instead.
1,I Don't see the GIT Link here. Requesting to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
1,"There is no Github link provided. Instead the code was zipped in an archive and posted on Expertizza. The code has no implementation of any functionality whatsoever, however, 'scaffold' code files exist in the zip with nil developer implementation. Code for 'house' is added though."
1,Not uploaded on git.
1,"Though not much ""hand writed"" but still great code with good project structure."
