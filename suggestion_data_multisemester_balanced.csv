TAG,REVIEW
0,The test plan covers possible test cases and also covers edge cases.
0,Multiple diagrams visualizing and explaining the changes that need to be done to the system.
0,The design is well thought of. They propose 2 solutions and the final design chosen by them.
1,"The team has added details about UI testing. 
For automated testing, more information could have been provided on which parameters need to be tested in accordance to the changes they plan to implement."
1,"The team has provided a usecase diagram which is laid out well.
Although a flowchart would have been great to understand the flow of the functionality"
0,"Yes, the design appears simple and is explained well"
0,"Yes, the team has laid out a plan well which seems to fit the current design"
0,Overall explanation of the changes that need to be made are made pretty clear
0,They have followed appropriate design principles. They have made use of good design and explained it in sufficient details.
0,The changes are well explained and sufficiently detailed.
0,The design is clearly described and explained in sufficient details. It is simple to follow.
0,Yes. The test plan is elaborative and should help in testing the features after the code part is complete.
0,"Yes, the visualization help in understanding the approach of the solution."
0,I find it a little confusing. But the diagrams help in understanding how the author is approaching the problem.
0,"Yes, it is complete, sound and appropriate."
0,"Yes, the explanation is elaborative and complete."
0,The team have carefully thought out their test plan. They have covered a lot of context of the system and have figured out how the system should act in those scenarios. The tests are very detailed and will really test the functionality of the cake questions.
0,"The design appears to be simple for the most part. I just feel that explanations are a bit verbose and cloud the understanding of the reader. Also, the user roles seem to be complex and the roles have some complex flow of functionality."
0,The design appears to be sound and I don't see any major issues. The team have explained the problem statement in great detail and I think they have a proper idea of the work to be done. They have also completely figured what which files would they change.
0,The authors have explained the changes to be made in great detail. The explanation has been very nicely written while providing a lot of details about the system and the way it should ideally behave. The team have written the problem statement well and seem to have a great understanding of the way to approach the project.
0,"The team has used a UML diagram, a DB design and even screenshots to explain their project clearly yet succinctly. This helps in easy understanding of the project."
0,The authors have made detailed explanations for the changes proposed to the system. These changes seem logical and satisfactory to me.
0,"The design is simple and it seems easy enough to implement. Several view changes, creating a new model and editing a controller to add the model changes are clearly stated and it shows clarity with the team."
0,"The team has worked very well on this project design. They have added sections for different probable solutions, DB design, and future test plans as well. The chosen Solution A shows their implementation in a clear concise way."
0,"They have proposed two solutions for the problem and both of them does not look complex, but looking at the solution, solution A looks more simple to me. They have given screenshots of screens also that they are going to change, which makes it easy to understand"
0,"Yes, team has given good visualisations of both the solutions that they are proposing, both of them are good and explaining the process wisely. They have show DB design also which is really informative"
0,Team has given good number of test cases taht they are going to test the functionality. testing from different perspective is been done. They will be writing test cases and manually testing the functionality also.
0,"Yes design looks good, they have not made any changes in page for round 2 submission. It is same as before but they have covered everything"
0,"Team has done very good job in explaining about the changes they are doing, problem statements, UI changes and DB design as well.. Only thing is team have not mentioned which design patter is being used and how they are using it."
0,They addressed every aspect of the features that are to be tested.
0,They have used plenty of diagrams.
0,The use of diagrams makes it easier to understand the system.
0,They have included plenty of diagrams to make the user understand their work.
0,They have a dedicated section for code changes and explained them pretty well.
0,"Yes, mainly while deciding on one of the proposed approaches, they have gone with a far subtler approach of only removing a user session id check as against the other flow of introducing a new self review altogether."
0,"Yes they proposed multiple solutions, shown two approaches and justified one. Good job overall. They've extended the cake model from scored question model, which seems right."
0,"Yes, we understand exactly what is happening right now and why's it to be changed. They have certain open questions which could've been addressed by now after round 1."
1,"Design include manual the test plan in detail but short with the automated or Rspec test cases. They should include where the test cases will be added and what test cases will be added in order to ensure that the functionality is working as expected. Line ""We will be adding unit / integration tests to all the files we modify."" should be removed from the doc as it doesn't add any significance, instead test cases or meticulous test plan with Rspec should be included."
0,UML diagram has been included in the design and also the ER diagram but explanation regarding the diagram could be improved. It's difficult for other person to relate the ER with the project.
0,"Design appear to be sound, as the team has considered two approaches and selected by one by considering the pros and cons of both. New question type is being added by extending the models scored, choice, question."
1,"The changes are explained properly. They have given the details of the approach in detail but the UI details are missing. Team could add the UI details more specifically, like why the existing star component is efficient. Though i think it can be replaced by a slider. 
Also, the UI details for the instructor are missing, how these changes will impact the user experience for the instructor. Kindly include it."
0,"Yes, it does. For example, for enabling the teammate to self review, they are proposing a simple change to remove the session id user check, which was fairly simple. They are proposing other solutions as well alongwith, which is good."
0,Yes they have made use of various visualization however in someparts it looks cluttered.
0,"Design appear to be sound but the database design is kinda complex to understand, but it includes all the details."
0,The team has used a lot of diagrams and UML to explain their working which is really useful and easy for the reader to follow through the whole document.
0,"No, the design from the UML looks not very simple although that is a good approach and could yield a good result."
0,The team did well on explanations. The design sounds perfectly sound and the appropriate patterns have been suggested. I think they have done a proper job.
0,"Yes, the changes and the thoughts have been put out clearly that are to be done by the team."
0,The diagrams put down in the document are completely relevant and provide a very good understanding of the project
0,The changes are specific and well thought of.
0,The design document covers all necessary components required and is well structured
0,The document looks complete and well written. It is structured well and is easy to understand
0,"The design proposed looks sound and DRY. As this is an initial analysis, names of methods to be implemented/edited should not be expected at this point."
0,The changes proposed look good and if implemented well could result in a working feature. They have proposed 2 solutions and deduced which one is better.
0,They have made the document to encompass the entire functionality requested in the feature. It is thoroughly made with detailed analysis.
0,The UML diagrams is the most comprehensive diagrams I have ever seen.
0,all part is completed and meaningful
0,The design part includes all of the functionality required.
0,The design doc is very detail and meaningful.
0,"1. ER Diagrams
2. UML"
0,"1. No
2. No
3. Yes
4. It might because of database hits.
5. No."
0,The explanation is quite expansive and clear to why the solution proposed is going to work.
0,"Yes, it touches on all the functionalities."
0,It's a complete document for an initial document.
0,The design doc is well made and includes everything that is required in a design doc. The functionality is well explained with enough details.
0,"The design doc is extremely complete and includes everything. They have also explicitly mentioned a lot of tests along with the context in which they might be required. The statement has been explained well, the diagrams support their approach and testing plan is thorough."
0,"Team has made a very easy to understand UML Diagram and a DB Design diagram as well. Shows that they have understood their project well and are good at projecting relevant information to others.
Everything seems to be in order."
0,The team has explained everything very neatly and coherently.
0,"The design doc shows the current problems, the team's proposed solutions and code changes, UML diagrams and test plans."
0,Right now the doc seems complete and the team will update their test plan section and code changes section as the project progresses.
0,UML diagram is suggestive enough and provide information on how the program flow will work.
0,Author has provided with details on what changes are required and at which place these changes will be implemented.
0,"Author suggested two possible ways to implement this project, which gives good idea on how this problem can be solved but language is bit confusing sometimes."
0,Yes design include all the required functionality but the write up can be little confusing some time and its hard to follow what author wants to communicate.
0,Design document looks complete and author has added all the required details.
0,Visual aids are used properly
0,Design appears to be sound
0,Design doc appears to be complete
0,Complete functionality
1,"The UML diagram is too high-level yes, for instance, the instructor adds a question and sets its type while designing the rubric, which would be 'CAKE' in this case. The UML doesn't include this flow, nor does it provide any detail as to if this can be done. Trivial, but an arrow has been tagged incorrectly, Team A (a specific team) should be connected to the student. Also, UML don't include if-else blocks the way you've put, or do they? DB snapshot helps."
1,"In the documentation they've mentioned adding in the CAKE type as a star rated question, could this be more intuitive? A 5-star rating doesn't let me distribute them evenly, say between two members. Could I rather put in a percentage number directly? Not sure how if this can be done, but try show the previous rated contributions as well with the member names? More details needed on how a warning would be displayed on the UI as well."
0,"They've pretty much covered everything, the proposed solutions were detailed. They've stated two approaches and justified the choice as well. Test plan covers edge cases like self-review check enabled/disabled."
1,"UML and ER diagrams are given but UML should include multiple reviews for team members as the fraction of the cake type question will be shared across multiple reviews. ER is given for the tables but how the exactly the database will be used here is not explained in the doc? How the fraction will be calculated what all tables, fields will be used?"
0,Team has done a good job identifying the files to be modified and the decision to follow the consistent Solution A.
1,"Changes proposed are good but team should add few more details:
1. In the solutions, stars are proposed for the question type but i don't think that's the best way to do it, this will does not give the liberty to have any fraction for the question. A slider from 1 to 100 would be a better option or a number input. 
2. Will there be any info icon to for the reviewer to know that s/he has to consider the fraction based on the other team members, as if by mistake reviewer submit 100% for one team member then it will not be possible to provide any fraction to another team mate. 
3. This change is not only for the reviewer but also for the instructor. None of the details are mentioned about the Instructor flow"
1,UI details are missing. It would be great to include the UI changes for the instructor and reviewers that how the cake question type will look like? I could see details about Stars but i think this will does not give the liberty to have any fraction for the question. A slider from 1 to 100 would be a better option.
0,"The team has done a good job while creating the documentation. They have explained the approach well, as well as the test plan has been properly justified. The documentation is quite detailed."
0,"The team has completed the doc pretty well. All the sections are covered. The test plan, proposed code changes and the UML diagrams are aptly explained to justify the given problem definition."
0,The uml diagram do follow the principles and it is quite informative.
0,The Database design looks  complex. Otherwise its good.
0,It was adequate to follow what all things to they have planned to change.
0,Yes the proposed design does include the know-hows of the functionality required and how to achieve it.
0,Yes they have included most of it as far as I know and the content is also quite intuitive.
0,"Yes, the authors have used relation diagrams to explain the functionalities and the dependencies which explain the problem very well."
0,"No, it seems that the plan proposed is correctly done by the authors."
0,The authors have mentioned proposed changes and they are explained properly.
0,Yes the team has incorporated all the functionalities mentioned in the google doc.
0,The design doc seems to be completed properly and not much needs to be changed.
0,"The github link is not opening, so I can't figure out the email id and password of Admin. I tried signing up as a student but not able to create one because of the education level field. Tried signing up as librarian but the view seems broken as I am redirected to a page which displays a list of librarians which on which I can perform CRUD operations. Back functionality is broken, No link for home page."
0,"The team did not submit their changes throughout the project, the changes were mainly made during the deadline period of the submissions. However, they did commit few changes in round 2."
0,No. They have not tested any models
0,"1 Not able to login as admin
2 No book checkout functionality.
3 Dont know
4 Not able to login as admin"
0,"The admin is still not able to sign in. The team has implemented book search functionality, however they have not updated it on heroku. There is now image for book cover"
0,"No. The team has not used extensively the github for collaboration. they did push some commits in round 2. They have created project board, however there is very little usage."
0,Student can't issue book.
0,"Admin details provided are incorrect. Unable to login.
Book issue/return/Hold request not working.
No libraries can be added.
sign up form is incomplete for students/librarian."
0,Good number of  changes made  for round 2
0,Many basic features are not working and a proper testing should have be done before submitting final version.
0,Some of them is fixed. Admin can't log in.
0,"No, not enough commits throughout the project"
0,Only some of the show pages are working. *
0,The admin functionalities do not exist yet.
0,find just upload two days ago
0,can not find the admin account information
0,No features were developed for the admin.
0,"At present, there is no functionality about the admin."
0,"There are 6 commits in total and thus, the team does not really push changes throughtout the project period."
0,There is not a single module which is completely developed and thus it is not possible to event comment on thorough testing
0,"Admin functionality has not been implemented. Thus, I can not provide any feedback for this module"
0,No tests are in place.
1,"Interface is easy to use. I like that you have implemented dynamic web pages to resize according to the browser window size. However, there are certain links (View all books & Libraries) which are broken or result in error."
1,Use scaffold to create models views and controllers. This will automatically build basic form views and connect the MVC architecture.
0,"Only 6 commits are made so far, not much work is done."
0,Couldn't find the readme.md file
0,Not found the admin login and details.
0,"Yes. The code is clear and readable.
One method only handle one task.
The naming of models/functions are clear and easy to figure out.
Overall the code quality is great"
0,test files are not indicated in the README
0,"It appears that the book is deleted.
Yes admin account can be deleted
Students cannot be deleted as ""something went wrong"" raised."
0,Yes the team has been making changes throughout the project. Even in round two they still pushing codes.
0,"The code is understandable, MVC structure is maintained. Also no long methods in their code. overall, the code is pretty good"
0,Delete of users fails even in normal case
0,"Books added by admin do not reflect in student account. No quantity is being asked at time of book creation when done through admin.
Hold request not created when book quantity is less than 0. Only flash message displayed.
Overdue fines not implemented.
Deleting users or books fails."
0,Changes done for round 2.
0,"Long methods used, especially in books_controller"
0,No RSpec file present.
0,The code is well-written with well-defined functions and has clean project structure.
0,The commits are consistent throughout the project period and work seems properly divided into teammates.
1,"Controllers and views are written nicely. Function calls are not that much coupled and depend on other functions. Gem devise is used appropriately.
Though the authors should consider adding logic into models rather than controllers, as stated by MVC architecture."
0,Could not find any test files.
0,UI is easy to interact with.
1,"Should use ""Unless"" statements where you can. For example in app/controllers/book_controller.rb, line 139."
0,Sure.
0,"They tested libraries model and most of controller. Although most of test code are auto generated, there are some works on their own."
0,"The UI is simple and clear, which is easy to use."
0,"The application works great!
 
Seems like the admin can not update his/her name in the profile."
0,Yes there were constant commits for the last week. Also the UI is pretty good.
0,No extra-credit features implemented. The team has done testing for the library controller and model.
1,The new design will be short and concise since only added classes. The disgn strategy make sence.
1,lack of UI test description
1,"There are no figures that would describe what the user interface should look like once it is done. That being said, its not strictly necessary because it is fairly easy to imagine without it."
1,"The test plan is nicely put, and covers all the scenarios. However, I would advice the team to explicitly mention class and method names in the test description for more clarity."
1,The team have drawn a use case diagram which explains the schematics of the approach and it does provide a nice way to visualize the various actors and their primary functionalities in the system. It would have been better if they could have drawn a simple diagram or flowchart to explain their steps rather than provide more textual description.
1,The design seems to be very simple and the approach has been clearly illustrated. The team have explained the steps properly and I don't think there are any issues with their approach.
1,The design appears to be sound and this is very nicely supported by some great writeup by the team. They explain in great detail what they will do to complete the steps and how they will approach the problem.
1,"The authors have very nicely explained the changes both at a low level like which variable would be added, which files would be modified and also included high-level details as to what scenarios will be required for which user, etc. The explanation was lucid and easy to understand."
1,"The team hasn't improved on visual aids. As mentioned in the previous review, uml diagrams, like sequence diagram would have helped well."
1,Very well explained. Better visual aids could have helped more.
1,"There is only a use case diagram, and no screenshot in the design doc, therefore, this doc is no clear and easy enough to understand. it would be better if they add more details."
1,"Their design appeared to be sound and followed appropriate principles and patterns. However, it looks like the solutions and explanations are too simple, they should provide more detailed explanations."
1,"Yes, the authors explained all the changes, but I do not think the explanations are adequate, they should write more details in the design doc."
1,"Yes, they include test plan, but a little shallow.
First, they should improve their UI testing part, which will help reviewers to find whether their functions work.
Second, they can split their Rspec test into view test and controllers. Or they can classify Rspec test with different functions, which will looks more clear."
1,"Yes, their user case diagram help us understand the work flow of their function.
However, if they can use a UML diagram to show us how they will change the related controller and view."
1,"Yes, their design appear to be sound. Although They have not mentioned anything about principles and pattern.
I think they can improve their design after they finished the project."
1,"yes, they have clearly problem statement, implementation with design strategy but lack of design pattern; test plan is good, but need more description with the UI test."
1,a little hard to understand
1,"I like the way the test plan has been mentioned. It's concise and clear. It wasn't clear on how will they test this line:
There should be no link for the ""Supplementary Review Questionnaire"" for team members or reviewers if the instructor disables this section in Assignment Creation Page."
1,"The team has not used the visualization tool in a good sense, they have used only one use case diagram but that is a very high level. More efforts could be put in there to add more visual diagrams."
1,"The design is simple however, it's still undergoing, more stuff would clearly explain the design that the team is trying to implement. For example in below steps:2. add another file for a supplemental questionnaire and save them to the database.3. add a method to get the corresponding supplemental questionnaire and to add questions into the existed questionnaire.They could mention what will the file contains and also what will the method name be and the input and output."
1,"Yes, the design for creating a supplementary review questionnaire raises seems pretty clear. More stuff could be added in the wiki documentation to make it more elaborate."
1,"The authors did explain the changes that they are proposing but it is a very high-level view, more details could have been added in the various sections."
1,"> The design does include a test plan The basic functionalities testing have been mentioned covering most part. However, there could be more scenarios missing.
> However, the edge cases have not been mentioned enough. They had added ""to be continued"" in the first phase of documentation but haven't done any changes since then."
1,"> They have added a use case diagram which appears to be a little too simple and not explained enough.
> I would have appreciated if more diagrams could have been added supporting the proposed changes and how they would help."
1,"> The design does appear to be simple.
> The changes proposed seems minimal and enough to cover all the requirements.
> However, the exact number of changes and classes to be tweaked has not been mentioned, which doesn't help in verifying if there could be more optimal solutions."
1,"> The design appears to be vague and doesn't talk alot from technical perspective.
> Would have appreciated if more details were added.
> Nothing has been mentioned about the patterns that they are using."
1,"> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed.
> The explanation is a bit vague and needs to be improved.
> Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done.> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed. > The explanation is a bit vague and needs to be improved. > Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done."
1,The Use Case diagram wasn't extraordinarily helpful. It basically just summarized what was said in the above section. It may be more helpful to have a diagram that walks through how to do these things from login from each user's perspective.
1,"Under ""Design Strategy"" it may be helpful to specify who is creating the questionnaire when it says ""there should be a checkbox when creating the whole questionnaire"". Make it explicit who it is that is doing the actions."
1,"Would just be nice to have better diagrams in the ""Use Case"" section as mentioned in the above comment."
1,"The class diagram though helpful, is very abstract."
1,The proposed design seems fine. I would like the team to consider if the new class that they plan to introduce can be made more generic instead of SupplementalReviewQuestionnaire so that it can be used in the future for something else as well.
1,"The UML diagram is very helpful. I would like the team to add code level changes as well. While the class name is mentioned, detailed mention of methods/ their behaviour would help."
1,"Though pretty high level, the document is good enough to give an initial idea about the project and how the team plans to proceed with the implementation. Good job team!"
1,The section for Files to be added/removed doesnt list the files that the project plans to edit or create newly. I think it has been missed by mistake by the team. Please update this section before the next round of review. All the best!
1,"there is no UML diagrams, or mockups screens, which is a problem need to concern."
1,Their design strategy write about the Modifications in the User Interface is showed and the user cases looks decent and simple to understand.Test plan contains the most test cases also include the edge cases.
1,"From the doc, I konw that the team should add a new subclass of Questionnaire called, say, SupplementalReviewQuestionnaire, and do the “View” function for a rubric should display answers submitted for the SupplementalReviewQuestionnaire as well as the ReviewQuestionnaire. I can see the work they have done on the wiki pages which coverd enough about their project."
1,The authors have attached a UML diagram which graphically shows how the new system would like from the view of different actors however the diagram doesn't much elaborate upon the functionality and hence could have included the low-level steps mentioned in text form.
1,"The design by the team appears to have been carefully thought out.
The authors will be adding methods and variables to apt class only.
The functionality isn't so complex and wholesome that they might require a Ruby gem.
The new design may increase the response time of the system if the file is not properly fetched from the database but that can be verified only after feature is developed."
1,"The authors have given proper and clear explanations for the problem and their approach to solving it. They have laid out a step by step plan and mentioned what classes they will add, what variable will be defined where. They have mentioned a test plan as well."
1,"The design doc is complete. The team have clearly defined the project purpose, their approach to solving it, both at a high-level and low-level. The testing plan also seems complete for now. I am sure the team will come to know about other edge cases and will add it as the project progresses."
1,"Visual aids could have been a little better. The textual explanation is great. Converting it to some UML diagram, may be a sequence diagram would have been excellent."
1,"Design looks good. Once a new Supplementary Review Questionnaire is created, I hope you will provide a redirection to the primary questionnaire from where you opted to create new Supplementary one."
1,"They did draw a use case diagram, however, they should draw a data flow diagram to show the data flow of that new function."
1,"It looks like their design is pretty good. they should add a new function about subclasses of Questionnaire and they wrote the detailed steps in part ""How we will do this:"", it is clear and correct."
1,"I think their only use case diagram seems a little unnecessary. As the diagram provides not enough information. 
Besides, they may need a UML diagram in their design document. For they change a lot of things in controller."
1,"No, all methods they planned to add seem correct. 
As they plan to add some new functions, the new design may potentially increase the response time of the system.
Beside, I think they should spend more effort on the Design Strategy part. This part seems a little messy."
1,"No important part is missing. But I think their project design part should include more details.
Besides, their UI testing part seems not finishes. They can finish this part latter."
1,"the use case URL is too high-level description, need more details"
1,"the modified files not included;
not show design pattern;
new design may potentially increase the response time of the system (add additional questions)"
1,"can clearly understand that this project's aim is to solve the proble which students can not ask questions unrelated with topics.
they proposed solution is add more ungrade review questions, which is a good idea."
1,"should have a more precise problem statement;
lack dexcription about UI test;
should show the files need to be modified."
1,"almost every part is included, but lack of precise dexcription, all high-level description."
1,"Visual aids - UML diagrams are used properly. However, more diagrams could have been added here.  The current diagram is just one showing high level view."
1,"1. add a variable in the questionnaire class.
2. add another file for a supplemental questionnaire and save them to the database.
3. add a method to get the corresponding supplemental questionnaire and to add questions into the existed questionnaire.
4. we should add another method to show the supplemental questionnaire in the review page.
 
Yes, the above steps mentioned that they are adding methods and variables. The design looks good as of now. - more comments can be made once they implement the changes."
1,"Yes, all the below functionality has been taken care of in the design document. Supplementary Review Questions to the current Review Questions seems fine."
1,The design document is almost complete but more diagrams could have been added here to better explain the stuff.
1,"> Just one use case diagram has been added which is very high-level.
> Please add more diagrams or mockups of screens etc."
1,"> The ""files which are modified"" section is blank. Please add the name of the files which you might be tweaking.
> New design seems to be fine however more description is needed to understand if it would make the code smelly or not.
> Design seems to be straightforward.
> I don't see any claims for the performance improvement.
> I don't see the design needs more effort however definitely add more details."
1,"> Although the proposed changes seem to complete the requirements, however, the description for the changes is not detailed.
> The explanation is a bit vague and needs to be improved. 
> Also the proposed solution just has 2 lines which does not contain an elaborate explanation for the changes and why they are being done."
1,"> Yes the design seems complete and includes all the requirements.
> However, the description could be more elaborate."
1,"> The design has problem statements, proposed changes mentioned however a lot of things can be improved.
> More explanation should be added.
> Please add more diagrams for easier understanding.
> Please add classes that you might be tweaking."
1,"Rather than saying what needed to include, it is better to say what is more than the requirement. They even include the method code."
1,"> The explanation looks very adequate. They have given a pretty elaborate design detail.
> The file changes description could be expanded."
1,- The team hasn't included a test plan but it must be included given the fact that the plan includes to modify core components such as user controller
0,There are no tests for models. The tests for controllers are the ones generated automatically by scaffold probably.
1,"No. For the bookmarks model, it has 'belongs_to' relationships with student and book, but there are no corresponding 'has_many' relationships in book and student. Hold_record, librarian_approval_list and student_checkout_list should 'belongs_to' student and/or book instead of 'has_one'. The links to bookmark a book/approve librarian don't work. I wonder if that has anything to do with it."
0,"Yes. The team kept committing almost everyday throughout the time of this project, including round 2."
0,The code is very readable.
1,"Apart from default test cases, few additional test cases need to be added to test functioanlities added like borrow book , return book etc."
0,"Same user can be signed up with same email and password as graduate and undergraduate
This can create a problem while borrowing books, on maximum number of books borrowed.
on viewing books,
This blooming-headland-78968.herokuapp.com page can’t be found
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/books
 




HTTP ERROR 404




error page is shown
Librarian approval isn't working:
This blooming-headland-78968.herokuapp.com page can’t be found
 
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/admins/librarian/approvals"
0,"Able to login to admin page, with
Library Management System
         


Home(current)
   
Sign out
              eab@v.com


 
Welcome Admin
*
can also login as student or librarian without logging in, by just modifying the url
*while trying to edit admin profile,
This blooming-headland-78968.herokuapp.com page can’t be found
No webpage was found for the web address: https://blooming-headland-78968.herokuapp.com/admins/14
 




HTTP ERROR 404




the error message is shown"
0,the changes were committed and documented properly. The readme file was updated a couple of times that has reflected most recent changes
0,"Yes, and using Rspec"
0,"(1) It brokes if I click checked out books as a student.
(2) the hold request is still pending.
(3)No it can't.
(4) it brokes.
(5)If a student already has a book request, the same book request will be denied."
0,"I still can not  upload book image. Or maybe it just can not show up?
After I approve a librarian, I can not login as a librarian or using existed librarian account."
0,They did.
0,Looks good. But it brokes sometime.
0,Good Profile Management.
0,Yes. The schema shows that the relationships are managed correctly as well as the functionality are working fine.
0,"Many test cases in terms of controllers, but none for models."
0,"Indeed, it is said that a user can log in using GoogleOauth2, however, I think there is some error when I try this way."
0,"They use rspec to do the test. I found that they had tested bookmark function, but this function is missed on their heroku system."
0,this system handle the 1-to-n and n-to-n relationships properly
0,"yes, they keep on submitting their changes"
1,"Mostly,all the relationships are handled.But,dependent ::destroy would be something that could have been used."
0,"Signing in with Google has been tried implementing,but the link leads to a 400 error"
0,All testing appears to be autogenerated testing.
0,"I could not test this program properly in the first round due to having a private repo and basically no way to verify anything. The team seems to have no actual validations in place other than the presence of a field, so most functionality is broken or can be circumvented in some way. Theres not even a uniqueness validation. Basically anything that is solved by validation (uniqueness, formatting, etc etc etc) is broken. Student sign up requires admin approval and can literally just be fields of ........... . Additionally, I can go to /books/new and add a new book with all ............. for the fields (except for quantity which has to be a number). The skeleton of the project is there but it seems like any form of verification/validation that ensures proper functionality is missing. After adding a book, the home page is blank with literally zero links to go anywhere else (as a student). The admins password is also stored in plain text, displayed on the page, and can be viewed by users going to /admins/1. It can then be edited."
0,"It seems that this functionality is implemented correctly for libraries and books, but not for libraries and universities."
0,"They did, but they also committed past the deadline."
0,"1) What will happen if the admin tries to delete book that is issued?

Cannot test this because of Student(3) in above text area.

(2) Can Admin account be deleted?

The admin account cannot be deleted

(3) What will happen if an admin tries to delete a student who has multiple pending book requests, will the reservations be deleted? 
 

Cannot test this because of Student(3) in above text area."
0,"In the models of different entities, I found out belongs_to relationship but no many to one or one to many relationships has been established."
0,"Yes, the team has made a great job with the use of GitHub projects. They have committed regularly to the project. I can see changes after round 1 but before the deadline of round 2."
0,"Yes, the team does a good job in writing clean and readable code. For example, in the books controller, they have different methods for different functionalities like increase_count, decrease-count, add_to_hold, add_to_cart, etc."
0,"yes, they have tested the bookmarks_controller_test and the bookmark_test model."
0,"1,2,4) Checkout could not be performed so these actions could not be tested
3) No the admin account cannot be deleted"
0,"Yes, the relationship looks correct"
0,Yes the team had commit changes for round 2 but hasn't contributed all through
0,"There is a link to login through google outh but that isn't working.
 
Yes the code is clean
1) function calls are there2) the namings are appropriate3) code looks good"
1,"The UI can be modified to include only the functionalities that can be implemented by the current user.
The functions in UI are well organised
edit functionality should be implemented such that, the fields are auto-populated. and the user is able to edit the book fields. 
Ideally in controller, the edit page in the view gets called, with the record fetched from the database.
Editing books can be redirected to from the books show view page."
1,"The corner cases are mostly like against null values.
The users when signs in, they should be able to sign  up as student or librarian.
That way the next time, the user signs in, the type of user is stored in table
The admin should be auto configured.
one should not be able to sign up as admin, this leads to data privacy issues and malicious attacks"
1,"the admin cannot edit his profile.
all the users must be able to edit their profiles,
some functionalities like
-View Student Checkout List-View Librarian Approval List
are failing while the student/ librarian logs in.
These functionalities can be hidden from the home page if it cannot be implemented by for certain users."
0,"There is a commit almost everyday.
Also utilized Github project board to some extent."
1,"The UI looks clean and intuitive.
Sign out button is shown even when the user has not sign in.
Some options which should not accessed by other than admins are visible to normal users. Though they do work for students and profiles, it would be good to not show the features that they cannot perform."
0,Code looks clean with appropriate comments.
0,very clear and detailed. Quite sure what to click on if I  want to take specific actions.
1,"Actions in terms of students, books, etc. works quite well. But I didn't find where to edit the admin's profile. Maybe it existed some where else. But it would be better to add a link on the home page for reviewing purposes. That's my personal view, however."
0,"Yes, you can see it from their git commit."
0,The admin model is doing good.
0,"Yes,the team has been pushing the changes throughout the project"
0,"Yes,the team has tested atleast one."
1,"The landing page is a one stop for any functionality that is to be performed,but it would have been better if they were redirected properly"
0,"No clue, no git link."
0,"No README. Nav bar doesn't work, can't find where to log in, where to sign up, etc. No back buttons on pages to return to previous page."
0,"Yes, the team kept pushing their changes throughout the project period."
0,I can see regular commits and issues created for every stage of the application. It also follows good Ruby practices.
0,very simple UI but should have been a bit more organized. Work has been done throughout.
0,Not a thorough test has been done but the models are working with some glitches. Access is not restricted so anyone can get in with the links
0,Not so good looking UI but works
0,There are 42 commits. They kept on pushing changes of codes throughout the period.
0,It seems like there is only one branch(the default master).
0,"yes, but majority in last 3 days."
1,"Kindly display proper error messages. use flash notice.
student is able to create a book. kindly check at the back which kind of user is trying to do changes to the database.
Librarian sign up failure it says library must exist. It'd be good idea to have a drop-down option to select a library rather than keeping a text field."
0,"first commit is just a week earlier from project submission , after that commits are in progress"
1,There are just some tests that are automatically generated. It would be better to write some tests about models and controllers to tests validations and actions.
0,No.
0,"No, nothing in the test files. Nothing is working."
0,UI is intuitive
1,"When student got signed up and logged in page written HI appeared nothing else
when sign up for librarian I was giving library and it didn't sign up saying library doesn't exist.. 
so I went to admin and created librarian and choose from drop down provided still I couldn't sign up the librarian and was not able to see anything regarding that"
0,The applicaton is deployed on Heroku. The user interface is easy to understand and use.
0,"there is no any content in README file.
I cannot sign up any role including student, librarian or admin. Each of them I need to choose my university to sign up, however, there is no university they made.
Even if I cannot sign up and login, I still could go to index page of three roles by clicking the ""Home"" button from the sign up page which I cannot sign up."
0,"The home page is impresive, but can't really do anything, admin can only create student, but university requiered........No description in README"
0,"Admin can not log in.
Student can not log in.
Librarian can not log in."
0,UI is good !!
1,"UI was good, but focus more on testing."
0,"The interface is the best version among all I reviewed. It is of very high level and very good-looking. The README file gives a very brief information including a default admin account, however, I failed to login by this account. But the good news is that I tried to simply sign up a new admin account and I succeeded."
0,"The admin can't log in. So, I can't test other things that admin should do."
0,I cannot log in or sign up.
0,"Yes, controllers only take data from models and send to views."
0,code is nicely structured
1,"the credentials provided on GitHub didn't work. Anyways, I signed up as an admin and have reviewed accordingly. But we are supposed to have only one admin with fixed credentials."
0,Very accordance to the standards of semantics and formats.
0,They didn't test any models.
0,RSpec file has been created but no significant functionalities have been tested.
0,Tested only if the page appears or not.
0,Rspec tests were found for books model and borrowing history controller.
0,Only the basic tests provided by scaffolding are present
0,It is hard to find which model they thoroughly tested.
0,"1. Admin can not delete books regardless of it being approved or not.
2. System throws an error when admin tries to delete a student with checked-out books.
3. No, admin can not be deleted.
4. System throws an error when admin tries to delete a student with multiple pending book requests.
5. Student can jump from his profile to some other student's profile by changing the URL.
Student can also reach to admin's dashboard by changing the URL."
0,"1) book issue doesn't work
2) same as 1
3) no
4) same as 1(doesn't work)"
0,Edge cases are aptly taken cases of.
0,Could not find any edge case violation.
0,edge cases are tested properly
0,many of the basic functionality is missing to test edge case
1,"Some of the edge cases i was able to test like deleting admin - cannot do it, README.md file does not contain that much of information about edge cases or project. Students cannot access librarian data or admin data. Rest of the edge cases i was not able to test. If admin tries to delete student with book issued, it is crashing the application. Some of the exception cases has been handled."
1,"(1) The admin can successfully delete. The book was removed, along with the checkout records related to the book.
(2) Actually, admin cannot delete any students from system, because clicking the destroy button only leads to system's crash, and the list of students remains.
(3) No.
(4) Again, no students can be deleted due to malfunction.
(5) I want to see what will happen to the books and librarians and related checkout histories, when a library is deleted.
To my surprise, nothing happens to books. But all librarians along with all checkout and request records are gone as expected."
0,"The admin can log in now, and the admin can deal with multiple tasks that are related about books and libraries."
0,"All the functionalities regarding students and librarians which were not implemented in Round 1 are functioning well in Round 2 submission. Great Work!
Some things which are not working well:
- When clicked on approval request, the web app goes into inconsistent state
- Book image is getting displayed when the book is added but when viewed via Librarian dashboard the cover image doesn't get rendered."
0,"There is a huge improvement from the first round and almost all of the missing functionalities have been implemented. There are one or two missing ones like accessing hold requests from librarians and university id being displayed instead of the name but otherwise, it is working perfectly."
1,"yes, system is working as expected, librarian is getting approved by admin, admin is able to perform operations of librarians and student. Book history is not there in admin role. In Student i tried to search book with its title but i was not able find and hence was not able to check it out, return or bookmark it. Some of the things were fixed after review 1."
1,"Solved problems which originally showed up in first round:
1. Admin can now create student and librarian accounts.
2. Admin can now add new books.
3. Librarian can successfully sign up now, but there are some issues on the appove action of requests for librarians, which will be mentioned below.
4. Librarian can now add books and remove books. But the bug is that he/she can add books to other libraries.
5. Librarian can only edit and remove books of his/her own library now.
6. Admin can view the list of checked out books and librarian can view the list of checked out books, overdue students and hold requests now.
7. Books can be created and the cover photo can e uploaded now.
8. All validations are in place now including the uniqueness of ISBN.
9. Students can successfully check out, return, request for and cancel requests for books now. And they are not eligible to check out special collections now.
10. Bookmark features are in place now.
 
Unsolved problems:
1. Maybe a user can edit his/her profile now, but the thing is that the ""edit profile"" button is not clickable because of the failure of the dropdown list mentioned in additional comments.
2. Admin cannot view the lists of overdue students.
3. Firstly, no matter a user tries to sign up as a librarian on his/her own, or a librarian account is created by admin, this new account should be approved by admin. However, when I click on the approve button, the system crashes.
The thing is that, even though the system' crash, the request for signing up as a librarian is indeed approved. So weird!
4. Librarian has the ability to add book to other libraries, which he/she wouldn't be allowed to.
5. Librarian cannot view books of other libraries, which he/she would be allowed to.
6. There is no maximum checkout limit now.
7. Upon a book is returned, what happens to the next student in waitlist is that, his/her request for this book has been removed, but the book still remains available, rather than checked out by this student.
8. Because of the environment of this app is still development, I cannot use my facebook account to log in, although given that there is a social sign in button.
9. The main problem of books is that, no matter what library I chose when I created the book, it will always automatically be associated to Hunt Library, even when I delete this library. This may be because there is no relationship between Library and Book."
0,They handle associations very well. The associations between different models are detailed.
0,Book association with library is missing.
0,"Yes, the relationships are being handled properly. Books are being associated with their respective libraries and the same regarding students and universities."
0,"Yes team has maintained necessary relations in models. 1 to n relation for library and book , university and libraries is maintained. Librarian and library and all relations are maintained in models."
0,"Yes, team has been committing their changes throughout the project"
0,Did better in round 2
0,Yes i team has made changes throughout the project
0,"Yes, changes are visible in round 2 and are consistent as well."
0,"Yes, the team continued to commit changes post Round 1."
0,yes they did!
0,"There are commits dated October 10, 12, 13, 14 on GitHub."
0,They kept on submitting their changes throughout the project. And they still commit a lot changes in the round 2.
0,"The main problem in first round was that, the backend and frontend were not connected well. This time they made many commits throughout the period including fixing this issue and many other modifications."
0,Could not find any issues with the code submitted. The code is quite modular in nature.
0,I'm able to edit the URL to visit non-accessible pages.
0,Nicely implement important methods inside the model and not inside controllers.
1,"Code written looks good to me. There is lot of commented or dead code which can be removed, team may have saved it for future use i guess. for some of the things we dont have to create separate controllers which may make code less DRY. Logic seems pretty straight forward to me. Naming conventions are used in good manner, although we can improve in some of the cases. MVC structure is been followed."
0,The test plan is very clearly laid out and contains sufficient test cases.
0,Yes. I like the fact that the controllers to be changed are parts of the diagram.
1,"Design looks fine to me. Only thing I would change is to split up the ""status"" field of reviews into two boolean variables, ""private"" and ""selected"". This makes the design more clear since you no longer need to enumerate them."
0,"Yes, the solution was clearly explained and very easy to understand"
0,"Yes, the wiki properly listed the design patterns"
0,"Yes, the proposed implementation is very clear and possible files are listed and implementing methods are indicated"
0,"Very well out lined test plan! This is what I wanted to see, detailed steps (actions) to be taken by each role. Having this listed in words helps implementation in great deal based on my experience, I am glad this team did this."
1,"One graph is listed in this wiki, though the change involves way more content, for example data flow between models, interactions with controllers etc.. They already listed the files to be changed and this really wouldn't be that hard."
0,"Changes, listed in this document is completed. Though I am still not certain about the revoke access in the future part of it mentioned in #2 above..."
0,Great utilisation of the use-case diagram to demonstrate the functionalities of the system.
1,"Yes, the design is simple and easy to follow. I particularly like the fact that they have mentioned the design pattern they're going to follow - Delegation pattern"
0,"Yes, the design appears to be sound to me. They have done a good job with implementation details. I just think renaming it to ""Implementation Plan"" would be more appropriate."
0,"Yes. Other than the test plan, I think everything else is quite elaborate."
0,"Yes. It's neat, elaborative."
0,Neat and understandable visualization.
0,"Yes, they are following the principals and it is sound."
0,- A well laid out test plan is provided. They have provided proper steps for each type of user.
0,- The document is easy to understand and the visual aid helps. The only issue is that they have just a refactoring task and there are not a lot of details related to that.
0,- The visualizations are great but I do not see anything related to what they will be doing. It explains the changes which have already been implemented.
1,- They did mention that they will refactor the code as the code is already implemented. They do not provide details related to the changes they will be making and have just explained what is already done.
0,"Along with tables, the team has also added a user model flowchart to the design document. This really helps others understand what their project does."
0,"The project is simple and concise. The code changes are explained logically and the flowchart does a great job of showing the design. Overall, it is simple enough to be easily implemented."
0,"The design has been well thought out and they address each scenario to develop. They have also specified the design pattern using - Delegate pattern, which I think is the correct choice for this project."
0,"The changes have been adequately explained. The wiki documentation page will undoubtedly be updated as the project progresses. For now, this much seems enough."
0,Good amount of details of testing have been provided. Most of it is going to be manual testing from various perspective. They have not mentioned abut writtng any new test cases.
0,"No design is not that complex, they are going to add checkbox on the screen and rest of the manipulations will be doing on basis of that. not much is going on which can make it complex."
0,"They have included the test plan and have explained the test strategy for each individual scenario. If given the explanation as to which functionalities they are trying testing, that would have been even better."
0,They have provided the UML diagrams to describe their plan of work. Which is quite easy to understand.
1,"Yes, the design doesn't appear to be complex as understood from the UML diagram. Could have provided a clearer written explanation."
1,They have mentioned the use of delegation design pattern in their project. It would also be more understandable if they said where exactly are they employing it in their work.
0,The visualization is helpful.
0,Yes it was well written.
0,The design is simple to implement and understand
1,"The team explained the changes made in the previous implementation of this project, they do not explain in detail the changes that they will be making on top."
1,More visual aids can be added in the writeup to better explain the flow of the project.
1,"Yes the design is simple, one thing to add here is that 
Add a feature for students to toggle the visibility of their reviews. When reviews are marked 'public', instructors will have the option of adding them as a 'sample review' to any assignment. When reviews are marked 'private' they will not be shown to other students as a sample.
In the above feature, the toggle button should have a default value so that if student do not want to change it then it can the default one."
0,"The write up explains the design of the students could read through some sample reviews, in a very clear format. It's simple and elegant."
0,The writeup clearly explains what has been proposed as part of the design changes. It's to the point.
1,Test Plan is too verbose. Trivial areas can be trimmed off.
0,The visualization used was good enough to give a decent overview of the where is the problem focussed on.
1,"Yeah, the design appears to be simple although testing is lengthy. It could be cut short to what was required rather than explaining all the steps. Problem Statement is clear and concise."
0,"The code design is clear and DRY, one thing that missing explanation is that how the team gonna making changes to the db"
0,The explanation of the proposed approach to the project is very clear and easy to understand
0,"Yes, the design corresponds to the project requirements"
0,"Looks complete, they even mentioned that the project needs to care about removing the consent to share as well."
0,The use-case diagram explains their approach effectively
0,"1) No, I don't think there are any issues with the location of the proposed changes
2) Too early for me to say as it depends on how the team goes about whatever they've proposed
3) No, its not complicated
4) No, the response time should be the same
5) The document is good enough"
0,"Yes, the document addresses all the functionalities listed in the design document"
0,UMLs are present. They are clear and elaborate.
0,"1. The author is on the right way.
2. Don't think so.
3. No.
4. Maybe because of the database interaction."
0,I believe the proposed solution should satisfy the requirements.
0,Covers most component of a proper document.
1,"- Reading the doc it looks like all they have to do is code refactoring. If that is the case then they should have mentioned the problem areas in the previous code and their solution to it.
- They mentioned that they are going to use the delegation design pattern but I do not see anything which justifies the use of this specific design pattern."
0,"- They have given a detailed description of changes that needs to be done in the code showing that they have planned ahead.
- It is mostly code refactoring so I would love to see some pointers of the problem area in the previous code."
0,- Very well written wiki. They have written it well to make a reviewer understands what they are trying to achieve.
0,"The diagrams are neat, easy to understand and portray the essence of the project. So no complaints there."
0,"Various changes are done to the bookmarks functionality and the team has also written sufficient test cases to test these changes. Apart from this, various typos in comments were fixed."
0,The write is very well-written. The screencast links and snippets helped a lot to understand the project. The steps mentioned in the testing plan were easy to follow.
0,"I was only allowed to add a valid bookmark. All validations worked fine. It would be good to show the user what validations are required for each field.
Average was also being calculated properly."
0,"Lots of test cases were added by the team. The coverage is decreased by 1.9%. I am working Mozilla project and unfortunately, I am not sure how to improve this."
0,The build has been passed. There are no conflicts with the base branch.
0,11 commits were performed during the 2nd round. Almost every day someone worked on the project which is great.
1,"The code is readable The flash error messages were also written. Review bookmarks using rubric functionality. Comments are written in HTML files also. Testcases are also well written.
Usage of Bookmark.create! Using banged create should be thought of again as banged methods are dangerous."
0,the code is ready to be deployed onto the production server. there are no concerns corresponding to the project.
0,the writeup is pretty good. the work done is explained very clearly along with the screenshots and in which methods changes were made.
0,the projects work as intended. all the bugs were fixed and validations have been made. everything is clearly mentioned.
0,yes test cases were added. test cases were added for the response controller. newly added tests pretty much cover the entire range of this project.
0,"yes, the build passed in Travis CI."
0,"yes, 11 commits were made during the 2nd round."
0,the code is well commented. almost all the methods were commented which explains the functionality of the method. The DRY principle is followed. all method names make sense which explains the functionality of the method.
0,"Yes, made one commit"
0,"Yes, the authors were missing test cases before the first round but now there are lots of tests. `"
0,The code is in a good shape and can be merged with the beta branch of production.
0,The requirements are met. They have incorporated my comments from the 1st review.
0,Build is passing and there are no conflicts.
0,New code was added constantly.
0,The code is well written and follows Ruby style guide. The code is DRY
1,"1) Add some negative test 
2) add tests where new bookmarks are added and it get reflected in other pages"
0,"1) writeup is clear and concise.
2) More screenshots in writeup can be added to show what was before and what is now which is fixed in this work"
0,"They added TDD approach to add bookmark test
From UI it works as intended"
0,"The code coverage overall decreased by 1.9%. 
But after first review, they worked and it increases code coverage (before it was decreased by 16.3% which is not 1.3%)"
0,Yes this expertiza project build passes the Travis CI.
0,"Yes, new commits are added. where refactoring and work on comments are done"
0,Bookmark might be think as a great code the depolyed onto the server.
0,The writeup is updated and It's really better than I have seen in the first around. Which has a lot of improvement.
0,Almost include all the scenarios i can think about.
0,"In Nov 6th I saw they add test cases commit in the github website, but in the commit they have some test cases which are failed."
0,No confilt and all checks has passed.
0,"there  are some commits during the 2nd round, and the code has changed only a little bit."
0,"little lack of the comments in the code, but during the testing part is okay."
0,"No, I think it is a good starting place for a future team to pick up, but I do not think it is ready to be deployed. There's still some problems which I mentioned above need to be fixed."
0,"1. I do the test manually, and it seems the functionality does not work as they mentioned in the test plan.
2. From the test plans on the wiki page, they gave the steps to test the UI, but it not so clear."
0,"Yes, they did add some new test cases, however, the coverage is decreased.
In the test plan, this team showed the code about running the test, but they do not add any code of Rspec. Also, about the test video, it showed that I need a permit to log in that google drive to check, so I actually cannot see the video.
I think they did not do the enough test."
0,"Yes, the build pass in Travis CI."
0,"Based on the explanation of the current problems and what they wish to improve upon, the proposed changes seem logical and are coherently described."
0,"The document is well-drafted and has all the appropriate sections including File Changes, UML Diagram, DB Changes and Future Test plans."
1,UML diagram should be more descriptive and provide program flow as well. UML diagram does not follow conventions.
0,"Explanation is clear and easy to follow, author has mentioned what changes are required and where it should be implemented."
0,Yes design incorporate what is required to be implemented in this project.
1,Most of the things are covered in the document only a bit more effort in UML and scenario where a student submitted a public review and want to make it private should also be added with details.
1,"Create a view where the student can see a list of sample reviews of the assignment and have a detailed view of each.
this functionality of user can be added to UML"
1,"In our approach, we will modify the code to work on the reports that already existing in the assignments.
modify could be elaborated"
1,"the 
Future Testing Plan
needn't explain the whole flow of the testing proposed
Rather can include only those steps that are relevant to the project 
For eg:
 

Log in
Click on Manage->Assignments
Displays a list of Assignment

is redundant, 
It can be reduced to 

Click on Manage->Assignments"
0,design is complete
1,"Though the authors talk about the designs,they donot specify as to which methods they plan to add,in what class etc.So, that can be explained better."
1,"The author has tried explaining the changes that he proposes with diagrams and flowcharts.But,it could have been a little more briefly explained"
0,"Yes,the design includes the functionalities required as part of 'to be done'."
0,The visual aids are helpful in understanding the functionality required.
0,Yes. It explains in details the functionality required.
0,Nicely done.
1,"The approach they are using is changing/refactoring the preexisting solution, So the design document should have also talked more about the problems in the solution code in detail and the changes they plan to implement. The code is probably already implemented in delegation pattern which they plan to refactor, so essentially they are not implementing any pattern as such."
0,"Visual aids are very well created and they look great. However, more diagrams could be added here to explain in a better way. ""File:UseCase.png"" is created in a nice way."
0,The design proposed in the Implementation Details section clearly explains the stuff. The design does not intend to potentially increase the response time of the system.
0,"As per the design, everything seems good and the changes are placed at right places. The steps are clearly explained."
1,"The design incorporates the functionality - ""If the students could read through some sample reviews, they would gain a better understanding of how to write reviews. This project aims to do just that"". This functionality is very well designed on wiki."
1,"The design document is almost complete, just adding a few more diagrams could have been better. The steps are clearly mentioned."
0,The only diagram given was informative.
0,The rationale behind using the Delegation pattern was not specified.
1,A few of the points mentioned in the Project Description were not given in the Wiki Page such as also showing ratings along with reviews.
0,Test Plan was well written and adequate.
0,"For an admin, Book Hold Request tab has books that have been deleted"
0,"Last commit was done on 9 October, no changes in round 2."
0,"The admin user was not accessible in round 1, hence creating books and libraries was not possible. The author seems to have fixed the issue.Now that it is accessible, all functionalities work perfectly. 
The book checkout feature is not available. A student cannot check out any book regardless of special collection status."
0,The system handles 1-n relationships as well as n-n relationships correctly. There is no problem related to any of these relationships.
0,"In general, the team kept on submitting their changes throughout the project and made a lot of commits which is a very good practice.
In round 2, the team constantly committed changes as well (16 commits)."
0,I went thoroughly through the library model and controller and can say that it is tested correctly.
1,"- The admin, while changing the status of a librarian, from unverified to verified is made to type the password of the librarian. However, as per the requirements, the admin is not expected to know the password of the users but just the basic editable details like name, university, library etc. In other words, there is no need to re-enter password of the librarian for just updating some fields.
- Also I don't think there is a double authentication required just for editing the user profile. If a user has signed in, he is the correct user in the first place. Or for that matter, even if an impersonator would have signed in with the correct user details, authenticating again would  not prevent him/her to change the user credentials. Hence, I feel that putting in the password again for changing credentials would not serve any purpose."
0,-The team did push the changes on git as and when required but I couldn't see much changes pushed after the first review mainly because most of the functionalities were working even during the previous review.
0,No such issue found when skimming through the code on Git
0,Seems to just be the generated testing.
0,"1: It seems the book is deleted but the checkout stays there in the ""history."" 2: I do not believe anything happens as far as I can tell. 3: Not that I could manage. 4: The books stay checked out or the reservations stay pending."
0,"No real error message on failed log in attempts or URLs you aren't allowed to visit. You can add Universities, which I guess is fine but since users do not belong to Universities it could create problems. Students for some reason require admin approval. It appears that I have to 'verify' a student to create them, but in doing so I have to give them a new password, overwriting the password they signed up with."
0,"The team has tested at least, one model and one controller."
0,"1) The book is still deleted if it is issued by some student.
2) If a student is deleted still the count of book is not increased so other students cannot get the book.
3) Admin account cannot be deleted.
4) If an admin tries to delete a student with a pending book, the student is deleted and the book count is not increased."
0,A student can still log in in spite of admin deleting his/her account.
0,"Yes, the system does handle relationships."
0,"Yes, the team did submit their changes throughout the project"
0,"Getting the following error while logging in by facebook.
App Not Setup: This app is still in development mode, and you don't have access to it. Switch to a registered test user or ask an app admin for permissions."
0,When a student is deleted with a checkout book then the book is still displayed in orders by that student.
1,"(1) When a book is deleted, the hold request on it is not deleted. 
A student creates a hold request for a book, and then Admin deletes that book.
However the hold request for that book doesn't disappear, which means the hold request isn't deleted.
(2) When a user is deleted, the borrowing relationship is not deleted.
A student borrows a book, and then Admin deletes that student.
However Admin can still see the borrowing relationship in the checkout list page.
(3) Because their models doesn't have dependent :destroy validations, so destroy operations will cause a bug or even make the system crash.
So almost all tests for edge cases that destroy one of a relationship pair will not pass."
1,"(1)The attribute Published for book doesn't mean the publish date but the Press which published this book.
You can see this on the library website of our school (library.ncsu.edu)
(2)We cannot see the image of a book.
Only creating a book with an image, we can see this image. For existing books, we cannot see their images.
(3) Admin cannot borrow a book.
 (4) Admin cannot bookmark a book.
Admin can do anything student/librarian can do as written in the documentation.
My suggestion is that we can create two entries for admin to borrow books or bookmark books. As you use User model, it's much easier to add these abilities to Admin role.
(5) Admin cannot approve a unverified librarian.
When we sign up a new Librarian, this account is unverified.
Then we login as Admin and edit this new account(librarian), we want to change its status from unverified to verified.
However when we click update, error notice comes up saying that ""password can't be blank"". This is because the password is lost when we edit an account.
The point is that Admin doesn't know the new librarian's password, so Admin cannot update(approve) this librarian.
My suggestion is that you can make an entry for approving librarians other than editing a librarian status attribute.
Then Admin can click a Botton for approving librarian, and the codes will help us to modified the librarian's status from unverified to verified.
 
 (6) No notice for making a hold request
The document require us to inform a student whether this book is unavailable or this student is at max borrowing limit when he/she wants to create a hold request.
As written that ""Inform the student that the book is unavailable or max limit reached.""
However your system only tell the student that ""You can not order this book. Please raise a hold request by clicking""
Student doesn't know what's going on.
My suggestion is that you could add more if closures in borrow method to react to different situations, and then render different notices.
 (7) Admin cannot approve a hold request for special book.
Admin can do anything as librarian can.
(8)Student cannot see their profile.
When we click  ""view profile"", we directly go into the edit page.
 (9) student cannot borrow a same book twice.
A student has the ability to borrow a same book twice if this book is available and this student doesn't reach his/her max borrowing limit.
(10) Not properly creation of hold request.
In the document, student create a hold request only if he/she cannot borrow this book.
However when we login as a student, we can create a hold request for the book that we can borrow..
The point is that if we can borrow this book, why do we need to create a hold request for it?
 (11) student cannot borrow a book after returning two books.
Create a new student, email: test@ncsu.edu name:test, education level: bachelor, then login.
We can borrow at most two books. After borrowing two books, we return them all.
However, when we want to borrow other available books, the system says ""Sorry we cann't process this order now""
The question is that now this student have no checkout books(he/she returned them all) and he/she wants to borrow another book but gets denied.
My opinion is that may there's some bug in returning module, when a student returns a book, he/she will have a ability to borrow more books."
0,"All models participating in a relationship doesn't have dependent :destroy validation.
Dependent :destroy validation is vital because if there's many destroy operations on books, libraries or students, there may be many bugs.
Because the attribute of order will become nil.
If one in a relationship is deleted, the whole relationship need to be deleted."
0,"Yes, they keep on committing."
0,"The code is beautiful and easy to understand.
I have read almost all model and controller codes, and find it's enjoyable."
0,"Test cases are executed thoroughly.
Student cannot register using same email -id. No two books can be given same ISBN number."
0,"Students can still access his account even if the admin deletes that.
Readme file doesn't include details facebook dummy login."
0,"System works smoothly. Authors fixed broken links.
Still there is one problem, while updating verified for librarian, the page says you must enter the password. (Password field cannot be blank.) And Admin is forced to change the password of librarian (Even though this changed password doesn't update the password from Devise Authentication, Admin remains in false idea that he have changed the password.)"
0,"A book cannot present in two libraries at any given instance, satisfying 1-n constraint for book and library.
While a student can order a book from different libraries, satisfying n-n relation."
0,"The team committed changes distributed throughout the project.
In round two, they rectified their errors and committed those changes on the Github."
0,"Code is written nicely, different methods are there to handle different tasks.
Naming is good and gives a hint about the use of the element."
0,"Models have not been tested.
Controllers only have tests generated by scaffold."
0,"Yes, the model relationships have been well implemented. Models have appropriate 1-n and n-1 relationships. 
dependent destroy has not been used where necessary."
0,"yes, the system handles the 1-to-n and n-n relationships properly. The library-book relation is 1-n, The university-library relation is 1-n, The university-student relation is 1-n, The library-librarian relation is 1-n"
0,"Yes, they kept on submitting changes throughout the project. Also yes, this team did commit changes in round 2. Mainly, the project of this group was done before round one, but, they added additional functionalities and fixed a few errors that were there in the first round."
0,"The code quality is reasonably good. One method only handles one task, There is no bad naming."
1,"All contributors have committed frequently throughout the duration of development of the project.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit.
Instead of using one or two words, use a couple more words describing the exact change made."
1,"The university model and controller have been tested thoroughly.
Suggestions:
Consider adding more thorough testing to the university model."
0,Good ruby & rails coding practices have been followed.
0,The back button worked
1,The changes made to git have been thoroughly pushed on git however I would recommend that the commit names be specific and not general. For instance replace 'bug fixx' with something that was actually fixed. This would not only help to keep track but also make it easier to refer the log files.
1,Usage of Bookmark.create! Using banged create should be thought of again as banged methods are dangerous.
0,No new method added. Only basic modifications are done. The changes are self-explanatory.
0,The model 'book' has been checked and tested thoroughly with all possible test cases.
0,The write-up is not clear.
0,No mention of the design pattern used (not sure if it's applicable). The write is not well written it took a while to understand the problem and statement.
1,"-The User Interface has made sure that the elements are placed correctly on the web page however I would suggest to make use of some better color templates to make it look much more professional as well as enhance the user experience (something like blue and white or black and whilte)
- You can also display the name of the user in the top right of the navigation bar when logged in.
- ""Hello user_name"" is unnecessarily big in size and is occupying more pixels even when not needed.
-Also the login and signup could be improved by scaling it down since both username and password would not exceed 20 characters in most cases."
0,"There is some testing done on the University model as well as the user controller. I don't think its as thorough as it could be, though."
0,The wirte-up is not well structured. It explained the problem. But the approach is not mentioned.
0,Beautiful UI that is extremely easy to navigate.
1,while the static code changes seem to be appropriate. the Travis build fails. please look into it
0,Seems to.
0,The interface is easy to use.
0,there is no test plan mentioned.so cannot comment on the same
0,The code does follow good RoR coding practice.
0,comments are not provided for the changes made in the code and for some methods.
0,The interface is awesome! well done.
0,The UI uses many JS codes and looks soooo beautiful
1,the build didn't pass. the team needs to look into Travis CI log
0,"Wonderful ruby code, easily to read and understand, and learned a lot from your code!! Thanks"
0,The team has 95 commits
0,the documentation is good enough to understand what the project does. functionalities are clearly mentioned and the feature is quite understandable.
0,"It looks like at least one model and controller have tests, though I'm not familiar enough with rails to know how much is generated."
0,Not clear from the writeup
0,Just having the icons next to the book names does not give me a good idea of what they do.
0,"According to the code breakdown, only 4% of the project is written in Ruby. Everything else seems to follow good coding practices. The code follows MVC and a RESTful interface."
0,I tried making bookmarks and used the url of the current page but it wasn't accepted. Maybe the ip address made it fail. I noticed bookmarks with same name can be created. When I changed my score of a bookmark to 0 the average shows '-' instead of '0'. It doesn't do this for numbers 1-5.
0,1. Everyone seems to have participated equally in the project contribution and committed the code after every change maintaining the integritiy.
0,There wasn't a test plan and I didn't notice any new tests added.
0,1. The application seems to be bug free.
0,I noticed in the average_based_on_rubric method there is a magic number 5.
0,"There are no comments, like in most of expertiza, however the code itself uses appropriate variable names and is not too hard to follow."
0,The Travis CI build failed  and the coverage has decreased. The variable names and methods have understandable names. The name average_based_on_rubric for the method to calculate the rubric was very well named.
0,"1. Followed the good Ruby practices, such as use of ! while calling a method, used blocks for loops etc.
2. Models are used efficiently to validate data and to set up some default values such as max books allowed, overdue fine etc.
3. Models are also used to increment or decrement available number of books."
0,Yes commits have been made but the commit messages aren't informative.
0,"Yes, the model for books has been well tested and works well."
0,It's a good looking UI which is intuitive and looks clean.
0,There is no test plan.
0,The commit messages of commits aren't explanatory.
0,They have provided appropriate screenshots and icons they will be using and have properly described the changes.
1,The test plan could also cover how will they ensure that they have written all test cases for their code.
0,Their approach seems to be pretty simple and clear.
0,The design appears to be pretty good.
0,The hace provided a good explanation in their wiki doc.
0,"Appreciate the flow diagrams, they are very informative. They are easy to go through and contain adequate amount of information. The first and second screenshots are both of the current implementation, thus I find them repetitive."
0,"Design seems to be simple, and the changes on the views seem to be user friendly."
1,"The organization of current implementation, problem statement and improvement seems good. The goal of conveying what the problem is, what the approach would be and what the desired outcome should be is clearly conveyed. The methods to be added should be named better. More details on the anticipated code changes could be included."
1,Expected results and current implementation has been the focus of the team and these sections have been written well. However the actual implementation plan and testing plan needs to be mentioned better.
0,"Yes, well explained."
0,"The author's proposal of changes is well described and depicted through UML flowcharts and UI mockups. The problem statement is described in a simple manner and its easy to follow. Not sure how the ""toggleable column"" to show the ratings and average rating would work on the UI, I think this is not shown in the mockup."
1,"It appears so. Most of the problems to be solved that are described in the problem statement have corresponding solutions in the proposed approach. However, The test plan could have been more descriptive and more test cases could have been included."
1,"The design appears to be sound. Design description could probably have included more data about the design patterns and the flow controller in the controller because functions themselves are not descriptive.
-The design doc is pretty well explained. The project purpose is listed in an easy to understand way, and changes proposed for views and controllers look comprehensive.
-The spec test cases could have been defined in more depth. 
- Not sure how summary of reviews is fetched, apparently it already exists. Could have dwelled upon this a little more to give a glimpse of the design."
0,"The project design is simple to follow, they have written how they can do view and controller improvements."
0,"Yes, the authors have adequately explained the changes to be made."
0,The design includes a test plan using Rspec to test the functionalities.
0,UML flow chart has been used to describe the project flow.
0,Yes the design appears to follow a simple logical flow.
0,"The design appears to be sound, and follows appropriate principles and design patterns."
0,"Based on the comprehensive UML diagram, and their statement on what to improve on view pages, they have adequately explained all expected modifications to the system."
0,"Yes, this team has the diagrams about their workflow, and it is clear and easy to understand."
1,It is simple and easy to read. But it looks like the doc is too simple to explain their whole design of this project. It would be better if there are more detailed solutions.
1,"Yes, changes are explained adequately, however, I think it is too simple, they should mention more detailed solutions and test plans."
1,"the design does include a test plan. but automated testing and coverage of testing could've been explained with more details. ""The coverage of Coveralls bot will be filled after our finish all our work"", didn't exactly understand what this statement means in coverage."
0,the UML flow chart diagram and screenshots describe all the changes to be made to the system.
0,"yes, the design appears to be as simple as it can be. clear and concise"
0,the authors have pretty much explained the changes to be made to the system in detail.
1,The diagram is meaningful. add some explanation may be good
1,The test plan section is really impressive. They have complete test section including all cases with really details explanation.
0,Does not include a test plan.
1,"Yes, they have test plan.
More info of your each test plan is needed. The test plan is too short for each case. And bound case if you have any."
1,Diagram of UML is good. But I want to see a user diagram which demonstrate your functions and relations in the flow.
0,The design is straightforward to be understood. I can totally understand what they have written in the writeup. Good job.
0,"Pattern is good. They have problem statement, design pattern, improvement, and test plan section. Flow is pretty complete."
0,"Yes, the changes looks good and should work."
1,"Yes, the design does include a Test Plan however, it does not provide any details of the test plans. Please add all the test cases and a little description. The test plan section can be significantly improved."
1,"As I had stated in the last review, I still feel the visual aids used are quite high-level which does not provide any low level details of the functionalities. For instance what do you mean by ""Visualize the result""? Please add more details to the diagram."
0,The design does look sound. It appears to have taken into consideration all the functionalities.
1,"The team has identified the controller they need to make changes to. However, what changes and how they will try to accomplish them are not stated. Please provide what changes will you make in which controller."
1,"Test Plan has been improved and now includes automated Rspec testing along with the TravisCI.
However, the Rspec testing is abstract at this point and ""We will add a Rspec test in each controller which tests our new methods, such as have_file_added and have_link_added."" is too vague. They have identified an edge case that assignmentID exists, but I think this is already being verified in the code base."
0,"The UML diagrams do not make much sense to me.
For issue 1384, under Design Strategy, the ""show"" and ""not show"" should really be ""show on homepage"" and ""show on assignment page"" or something like that.
For issue 1430, under Use Cases, shouldn't the ""yes"" case be the one where the TA can make changes? Currently it says that if the TA is not on the course list, they can remove/unassign assignments."
0,"1) They draw multiple diagrams to describe their project
2) Each diagram is clear and helpful for user to understand their design"
0,"1) The design is elegant and easy to understand
2) I think it is as easy as possible"
0,"1) The design looks reasonable and does follow appropriate principles
2) However, no design pattern was used"
0,"1) They well explained how they gonna to make change to the system
2) There are diagrams to help reader to understand those changes
3) The explanation is adequate and reasonable"
0,The diagrams are created really well and are helpful in understanding the scope of the project. Good work on the detailed UML flow chart.
1,"I can follow the flow charts of the design strategies of first three issues to catch their design logics of related functionalities. All include necessary steps and show simplicity.
And they have listed all test steps of the last three issues as well.
 
One problem is that there lacks the flow chart of issue#1354. It looks like they have successfully implemented this issue. But they should have made clearly statement on this issue."
0,The authors proposal of changes is well described and depicted through UML flowcharts and UI mockups. Problem statement is described in a simple manner and its easy to follow.
1,It appears so. Most of the problems to be solved that are described in the problem statement  have corresponding solutions in the proposed approach. The test plan could have been more descriptive and more test cases could have been included.
1,"The design document has become very unorganized to follow through efficiently, post changes made by the team for round 2. Request them to structure it in the way it was for round 1. I would suggest to include more details on the design strategy.
The results seem to be incomplete. I am not able to understand what the team wanted to achieve by looking at the screenshots."
1,"No principles or patterns are specified. And the design strategy does not appear to be completely sound for the following reason:
1. For issue #1354, not letting two assignments of the same name being created is correct. But another check should be added whether this same-named assignment is being created in the same/different course. If created in different, the same name has to be allowed since each course will have almost similar assignment/assignment names. This was something I was told to consider during my project, and hence I feel that it would be applied here too."
0,"I understand what the problems are that they are trying to solve, but how exactly this is done is not made very clear. For example, for issue 1384, they say ""we need to create a boolean attribute to control the action icons"". It would be helpful to indicate that this boolean will be changed on the user profile page."
0,"yes, it cover5s all sections from design to code changes and test plan in adequate detail."
1,"design document looks good, its easy to understand, although they have given alot of details which are not required for a design document. But good thing is they have mentioned about all issues in assignment , related all of them from expertiza github and gave solution/ approach to solve all of them, which makes it easy to understand and not get confused."
0,The document starts by telling what is the current implementation and discusses the solution and test plan. The team has done a good job with the wiki page.
0,The solution proposed seems relevant and adequate. they have correctly detected the problem and are working on it.
0,Ample uml diagrams are added.
0,The diagrams in the document are all helpful for understanding the goal of the work.
1,The images are too big and the ext between subsequent image is really small.So it makes hard to read the doc and if we are already making video about showing our implementation why show images?
0,The explanation makes me easily understand whole process.
0,"Yes, the design incorporate all of the functionality required."
0,There are no missing part of the document and the details are all clear.
0,"I would suggest to include more details in the write up. Currently, most of the details provided on the document are already part of the problem statement provided."
0,The changes proposed by the authors are thoughtful and well put through.
0,The authors have explained the changes quite well.They are easy to follow and understand.
0,The design incorporates all the functionality required.
0,Visual aids are used properly. In the implementation section. They draw several UML diagrams to help us understand what they plan to do.
1,"All are helpful and useful to take a clear look at the correspondant content.
One advice is that, because the main reason of showing the current view is to compare with their expected view after implementing, it would be better to place the figure of current view right next to the figure of view after improvement."
1,"They just mentioned what to do with the current view pages, including adding a toggleable column, and another column of additional file or link, and applying other improvements.
But no applicable strategies on how to modify which codes have been specfied. So they still have a lot of statements to write so far."
1,"They did draw the diagrams for each issue, but there are some suggests.
1. For issue #1430, the diagram they draw is not so necessary.
2.  issue #1430 should not just have use cases diagram, but also need the data flow diagram."
1,"As mentioned above, their design strategy seems to be kind of shallow, and did not cover how to implement on specific files or codes. However, the documentation is comprehensive in general."
0,their design is pretty well. It looks very clear and does not make the code be complicated or increases the response time of the system.
0,"They mentioned what they plan to do and where all they want to make code changes. However, a clear description of what exactly they plan on changing with respect to the current system and how it will all be displayed on the UI is not mentioned."
0,"Yes, also they have put in a lot of thought in coming up with a scoring system which was commendable."
0,The proposed code changes were explained visually which was very unique and easy to understand
0,"The quality of explanation is pretty well, they separated their design to view and controller improvements, and give the screenshot and diagram for each part to help us understand."
1,"Most parts are pretty good, they have all the parts including problem statements, project design, code change, and test plan.
The thing I think they could do better on test part,
e.g. they should write more detailed steps about the manual test."
0,"Yes, they have identified all their tasks and come up with proposed changes."
1,the diagram is clear but need to scale bigger.
1,"1.on method add to a wrong class
2.there is no prove that the code will be ""smelly""
3.design part is good for me.
4.it will not increase the response time.
5.yes, the test plan and code changes is need to improve."
1,"The project design is well explained, but the project design diagram is too small to read.the code changes part is not clear."
0,"yes, all the introduction, implementation, and problem statement, design, is covered, however, more detailed about test plan is welcome."
0,all part included in the design doc
0,"Really good design, easy to impelemet."
0,Looks good enough. I don't think it needs other things to be stated.
0,The task itself is a bit complex. But the design has been made as simple as it could have been possible.
0,The design appears to be well defined and looks like good research is done to come to the conclusion of using this approach. The document explaining the way to derive the formula is very interesting and I appreciate the team for the efforts.
0,"The design documentation is well done, including all the sections, graphs, descriptions. It is clearly explained."
1,The test plan should include automated testing as well as manual testing. The test plan provided is not sufficient it just gives list of scenarios. Include the test files which will be modified and also different scenarios for testing.
0,Well completed. All sections included.
0,Adequate explanation.
0,"Yes, the design appears to be simple and the code change flow diagram is helpful in understanding the solution."
1,"1) Looks like they've identified the class they need to make changes to.
2) The design doesn't look smelly.
3) They have incorporated gems that make the code simpler.
4) I think the design could increase the response time of the system.
5) Sufficient effort has been put to identify the changes. More clarity will be achieved when they start implementing those changes."
1,The overall design looks good and follows all the appropriate principles but does not mention anything about the design patterns to be used for the implementation. Please mention the design pattern which they are following already or you are planning to implement.
0,Solutions are tough to understand.
1,The changes proposed by the author are pretty much the changes recommended in the project document. Nothing different was evident from it. I would recommend you to add more low level details regarding the changes you're proposing.
0,The changes proposed are good.
1,"Rest of the document is okay but I feel, the Test Plan section could be improved significantly. Only 2 lines have been written about the unit tests. You could include all the details regarding the test cases. For instance, when you say ""We will add a Rspec test in each controller which tests our new methods, such as have_file_added and have_link_added."", add details regarding what these tests will plan to validate?"
1,"They could have added more test cases. eg - the composite score should be displayed on View scores page, alternate view sis displaying heat map of scores"
0,The design appears to be sound
0,"Yes, the design includes the test plan and it seems quite necessary."
0,"Yes, the design is sound and follows appropriate principles."
0,"According to their explanation, the design seems simple but practical."
0,"Yes, the diagrams in the document describes the intended changes clearly."
1,"The tests are shallow, and hopefully the team will incorporate the RSpec testing too, once development has begun. (or already done so, if development has begun)"
1,"More details could be included on how the team actually plans to implement the solutions. Lots of step by step details are included for the manual testing part, which makes it clear for the reviewer to expect such kind of test cases. Appreciate the flow diagrams as well, although in issue #1430, I believe that whether the TA has access or not must be checked before he/she is allowed to make changes to the assignment (the action should be a click on a button perhaps, instead of remove assignment from course, as that is what we want to restrict) . Perhaps some rephrasing would help."
0,"Yes, the necessary changes that will be incorporated have been mentioned, including things like formula being used, and the team also has narrowed down the files that are to be changed/involved moving forward."
0,"Yes, the design does seem to be solid and uses the right methods/files involved for designing the project."
0,Yes. they have adequate visual aids
0,Had a hard time understanding the problem statement.
1,"The documentation is very comprehensive. It covers all six issues in thei tasks, three of which are to fix bugs and implement those funtionalities, and the other three come from the last group requiring furthur tests. The design pattern and test plan of each issue have been fully included."
0,They have derived a formula that they will use but have not talk about how will they implement it.
1,"Code-Level specifics including proposed files to be changed and methods to be implemented is required.
Design Pattern to be implemented needs to be decided.
Test Plan is vague and details only the use of Travis CI."
1,"As far as I can understand there are only 2 major task:
1 Combine author feedback data with review data
2 Create an interactive visualization
The problem statement is mentioned on the wiki, however detailed description on each part and organization is not done properly."
0,The code changes flow diagram shows the files they plan to change and their work order. And the use case diagram describes what student and instructor can do.
0,The design is as simple as possible. There is no plan of change that is unrelated to the project.
1,"The code changes flow diagram shows the files they plan to change. But they can add more details about how they plan to do the work. 
For example, ""Display the composite score on the “View Scores” page."" is the result. It would be better if they write specifically how they plan to display the composite score."
1,"1) The diagrams are good and really helpful
2) Each diagram does follow the conventions and essential comments are also provided
3) The Project Design diagram could be separate to a general one and specific ones for each part"
1,They have a code change flow diagram that shows what files they plan to change. But they didn't write how to change the files and what method they plan to change or add. It would be better if they write more details about how they plan to change the code.
0,"They have draw charts for Code Changes Flow and Use case, which makes their design much more clear. They also make a screenshot of Web API, which introduce us how to use their function."
0,The design is simple enough to highlight main point. But it's not too simple and I could get the system structure and the relationship of different table.
0,"The design appear to be sound, following appropriate principles and using appropriate patterns. The design document contains Problem Statement and Overview, Code Changes Flow, Use case, Current Process, New Process and Test Plan."
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Problem Statement and Overview, Code Changes Flow, Use case, Current Process, New Process and Test Plan."
1,There is no mention of how the test plan will be carried out. Appropriate mention of patterns along with screenshots of the system could be more useful to understand.
0,Yes the visual aids are used effectively.
0,Yes the design is simple and clear.
0,Yes the design is sound and appropriate.
0,detailed The test plans are described in good way in documentation.
0,"Yes, it is as simple and easy to understand."
0,the design is good and followed all pattern.
1,"Design document is well written only few details are missing like what specific code flow need to be changed, or where to add changes. Other wise document is easy to understand and contains proper details."
0,"yes, the UML diagram and other figures clearly describe the changes to be made to the system"
0,"yes, the design appear to be as simple as possible"
1,"1) Changes they proposed are mess
2) For the front-end, the description is not elegant and hard to catch the point
3) For the back-end, only few files mentioned that may need to be modified
4) It would be better if they could describe changes generally then separate to front-end and back-end"
0,"Yes, multiple models and controllers"
0,"(1) The book can be deleted
(2) Books aren't automatically checked out for other students
(3) No it can't
(4) The admin can delete such a student, the reservations aren't updated"
0,"Cannot add librarian
Book count is not implemented"
0,"Yes, changes were committed regularly"
0,Code is readable with enough comments
0,"yes, the authors adequately explained the changes to be made to the system"
0,Student is deleted and books issued then student is deleted but book never gets available.
0,All good practices are followed .
0,"Yes, the team has thoroughly tested books model."
0,"Yes, the visualizations are properly inserted with suitable content."
0,"Admin can delete a student who has books checked out.
When we sign up with google oauth, and admin deletes this user, I am unable to login again using oauth.
Admin account cannot be deleted."
0,"Yes, it is as simple as it can be."
1,"1) They covered all the functionality required in the document
2) They also take previous implementation of this project as an example
3) It would be better if there could be a work follow showing the current implementation"
0,"Yes, problems found in first round have been fixed.
In the first round, on update profile page, user had to enter a new password. This has been fixed."
0,"Yes, the design is good and they have followed all patterns."
0,"Yes, the mapping has been maintained."
0,"Yes, the team has committed changes in round 2."
0,"Proper coding conducts have been followed.
Code looks clean and readable."
0,I don't find any specific tests apart from the auto generated code.
0,"Some of the observations are:
If the user is book is deleted then that book is removed from the checked out list of the users.
If the same book is available in different libraries then the book can be checkout only once, not sure why the user cannot checkout the book in the other library.
Multiple copies of the same book are being assigned to many users. Not able to see the quantity of books available actually to see the count getting reduced or increased.So, even though when we delete the user, we will not know what is happening with the book.
Forgot password is not working for some reason. The page not working error is displayed."
0,"The team has implemented the feedback properly. Some of the functionality naming is not done properly in UI perspective last time but it is perfect now.But when the user logs in, we are directly take to the edit profile link forcefully and even though if we change nothing, we have to click on the save profile etc. which has not yet been implemented. But overall the basic functionalities work well."
0,"All the 1-n and n-n relationships are handled properly by the team. We can see that a library can have many books, users can borrow many books, many books can be bookmarked etc. All these can be seen in the migrations as well as models folder."
0,"By no means is the design simple, but the complexity comes from the problem hence I give the benefit of doubt to the authors."
0,The team worked everyday on the project and kept pushing their changes onto git.There is a clear clarity about the work progress and work division among the team members.
0,"Code is readable and understandable by the users.
There are some parts of the code where we can find the lengthy methods continuously checking various conditions which can be avoided.
SOLID principles can be followed by seeing that one method will handle only one action.
For example, in the contains controller, we can see that the the name doesn't suggest the proper functionalities related to that controller.Maybe this can be avoided.
Including the comments will help the reviewers understand what is going on."
0,Yes the team has done the testing of model and controller
0,"1. Checkout Request was raised by the student for one of the book but Librarian was not able to see the request.
2. Librarian was allowed to checkout the books
3. Search by date functionality - If a student puts any date - all the books show up, the search by date functionality is not working.
4. Admin was able to delete the student with Book checked out.
5. Error Flash when a librarian tries to delete the book - Student cannot edit books!"
0,Yes the explanations are adequate
0,"Yes, most of the functionalities are corrected in round 2 which is amazing. However, few of the functionalities still doesn't work as expected (but these is very small task and can be corrected easily):
1. Librarian - Did not see an option to add a new book created by Admin to add into my library.
2. Librarian - Was able to sign up and then login without the approval of Admin
3. Admin - Add new student and Add new librarian option is not a hyperlink but just a simple text"
1,"I feel the design flawed for calculating the self score
 
In the Document following is mentioned
""The self score is an indicator of how much you know your work. Basically, self score of 1 means that the
Average Ratings matches with the Self Review Rating. It is worth noting that Self Score will be out of 1.
The lowest Self score can go is 0. This will happen when one of the score (either the Average Rating by
Peers or Self Review Rating) is 0 and other one is Maximum.""
 
The bold part is what concerns me, formula is self score = 1 - (avg - self) / max rating.
Since it is mentioned that either avg or self ratings can be 0, let's consider the scenario where only avg is 0 this means  the self score actually increases.
If only self is 0 then self score is 0 only when avg rating = max rating. 
 
Hence i urge the team to look closely into the formula if what they want to achieve is mentioned properly 
 
Moreover I feel diving by avg rating will be a better choice as it'll be a wider distribution"
0,"Yes, the system does handle the associations properly. A library is allowed to have multiple books."
0,"Yes, the team did keep on committing their changes to the repository. Also, changes made during the round were kept on committing."
0,"Did a complete test, and authorizations have been properly dealt with. However, a student was able to visit the page of editing something but he/she was not able to destroy it. I think visiting that page should be blocked as well."
0,"2. Cannot delete student.
4. Cannot test as the student delete functionality is missing.
can issue new book if count is less than 0"
0,"Admin cannot delete library, book, user, librerian"
0,"I do not see test details in their readme.md file.
Only auto-tests in the test folder."
0,"Hold request not yet implemented correctly.
Book not assigned to user who has request a unavailable book when a book is returned.
Book count can be negative number in library.
ISBN validation not added."
0,"This system has improved a lot from the first round. They added many function including librarians. Checkout book and return good. 
Student dependent destroy implemented.
Hold request not yet correctly implemented. Admin cannot approve a book request.
Admin create users not yet implemented."
0,"Necessary relationships added.
Admin cannot delete a university, and destroy dependent objects.
admin cannot delete a library, and destroy dependent objects."
0,"The group made 174 commits throughout the entire working period.
Everyone committed to the repository.
They work through round 1 and round 2."
0,"Code is clean and readable. No redundant code.
A method implement only one function."
0,The design document incorporates all the required sections. It covers all the functionalities as well.
0,I cannot find their tests.
0,"1. The routings confused me, I can login after I sign up as a librarian, and can edit my profile, but after submit, it shows me to wait for admin's approval.
2. Admin cannot add books, it shows ""something went wrong"" page.
3. Admin cannot add new students.
4. Admin cannot add new librarians.
5. Librarian cannot view book history.
6. Librarian can add books that not belongs to his library."
0,"I cannot find clear relationship between some models, such as librarian and library, book history and books."
0,"yes, they keep on submitting their changes."
0,"Yes, they thoroughly tested at least one model and one controller. But not all tests are meaningful."
0,"Some methods are too long, such as show_lib_book method in contains_controller.rb, and I cannot find some important methods such as add bookmark or methods related to book histories.do not ex"
0,- No model tested. Controller scaffold generated test cases are present.
1,They only test the controller. But they seem not test the model at all.
0,Looks like models and controllers have been tested .
0,"(1) What will happen if the admin tries to delete book that is issued?
The admin can delete the book successfully. However, when a student try to see his checkout list or hold request, the page will go wrong.
 
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The other student will still wait for the book. As the checked out record seem still here.
 
(3) Can Admin account be deleted?
No, admin account cannot be deleted.
 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
As the ""Viewing hold request"" are broken, I cannot test this edge case."
0,"I checked there books controller, I can see functions for return, borrow, cancel request but unfortunately I cannot see these functionalities implemented on the deployed application."
0,"The admin's function that ""View Checked out Books"", ""View Borrowing History"", ""View Hold Request"" seems not work.
As a admin, when I want to new a book, I should choose which library it belongs to, rather than ""add book to library"" separately.
As a librarian, the function ""View Checked out Books"" and ""View Borrowing History"" doesn't work as well."
0,"They treated the library-book relationship as n-to-n. It means they think a book can belong to many libraries, and a library can have many book. So I think this is a small bug they should reconsider it."
0,"Yes, they kept on submitting their changes throughout the project, and they still commit changes and polish their functions in round 2."
0,"There is an entrance for Google login, however when I choose my account, the notice will show ""User was not found"". So the extra credit seems not work.
 
The code quality is good. One method only handle one task. There isn'y any too-long function. And all functions are named well."
1,I couldn't see the thorough testing of any single model or controller. More unit testing could have been added for taking care of special cases.
1,"1) Admin was able to delete a book that was already issued. However, as a student, there doesn't seem to be any functionality available to see their checked out books. As an admin, the record for this book was deleted from checked out books list.
2) Deleting a user who had issued books and other used waiting for the same book does not assign these books to the waiting students. They still appear under hold.
3) Admin can't be deleted.
4) Deleting users who have pending book requests also deleted the requests."
1,"Most of the functionalities works as it is supposed to be.
 
Improvements:
> Search functionality seems to be working now. However, there could still be some improvement like not making it case sensitive or ""contains"" search.
> Back button has been added mostly but I could still spot some places where it was missing. For example the ""show bookmarks"" page.
> Missing features have been added. For example: bookmarks etc.
 
Issues:
> Negative book counts. This was highlighted in the first review however team hasn't yet fixed this."
0,"I can create books without linking them to any library.
I could not see any db relationship mapping table.
Books count keeps decreasing to negative. This seems bizarre.
I could link same book to multiple libraries. Also, for the count part, I could select values like -5 and -0 and it still submitted."
0,Yes. This team continued submitting their changes through out the project and specially after the 2nd round. I see over 170 commits which shows the amount of work done!
0,"Code quality appears to be fine. 
> Methods haven't been cluttered with loads of tasks and are specific to the one they are supposed to perform.
> Naming conventions have been taken care of and the code readability is good.
> Methods are usually short and properly commented."
0,"They didn't handle the association between books and libraries.  A book should belong to library and a library should have many books. And a university should has many libraries. 
But they have some other associations in their models which are good."
1,The design doc requires addition of proper UML diagrams and elaborate more about the test plan.
0,"Yes, the commits are frequent and incremental"
0,"DB design is good
Could have made a relationship between book and library using primary key of library."
1,Code would be more readable if there were more comments
0,"Yes, the property of the relationship has been well handled ."
0,Yes enough github commits.
0,Admin has been implemented in a great way.Except for the edit.
0,Very nice UI.
0,"Yes, the team keep pushing throughout the project duration. They didn't commit changes in this round 2 period."
0,Admin not able to edit his profile.
0,"Yes, the team was very organised and worked consistently on the project pushing code day by day from the moment they started delivering small chunks of functionalities."
1,"Their code is somehow clean. But there are some functions such as the fuction which deals with borrowing, it handles the whole progress. It would be better that it is divided to some small functions."
0,"Most of the code is written in a clean and readable way. The code quality of some functions can be improved. For example, the edit1 function in the student page controller seems meaningless. Perhaps the team forget to delete it. Besides, there seems to be several useless comments in the code."
0,"The team did not implement the extra credit functionalities.Also, very basic test cases can be found for controllers. Models are not tested but the files are created.Some of the test case scenarios can be the following after testing the UI:
- Login functionality for different users.
-Forgot password functionality and reset instructions to mail.
- After clicking on cancel account, try logging in.
-search functionality without entering any filter criteria.
-redirection to home/ back button testing in various scenarios.
-admin approval of librarian account"
0,"Yes, the code is written consistently and nice. But some methods like show, edit, destroy in main controllers like librarian, admin and student are blank"
0,"The functionalities in the UI are designed very well. The readme file gives the clear understanding of what to expect and what is yet to come. Pretty clear.
Some observations regarding the UI are:
-The moment the link is opened, the user is restricted to login until then no functionality is shown. Instead, a good UI page welcoming the user can be designed and give a user basic understanding of what the website is and what to expect would always give a good look and feel and this will be useful for general users who just want to surf the site.
-After signing up, displaying a good dashboard showing different options the users can make use of will be really nice. Restricting the user to definitely edit profile is like leaving no choice to the user.
-If the user by mistakenly clicks on edit profile and wants to go back, there is no home button. He has to click on save profile which is when he is taken back to dashboard. Having a home button there or cancel update button would be nice. The cancel account button is quite confusing whether it is cancel update/delete account which can be improved.
-If we click on cancel account, we are still able to login and after logging in no options are displayed. Not sure what is happening.
Overall the functionalities are easy to understand and working fine but UI can be more user captivating and user friendly."
1,"A lot of controllers defined and are highly decoupled. I think those controllers, models which can be merged should be merged and the functionality can be given through using policy gems, etc."
0,"-Comments in the files can be included for developer understanding.
-appropriate naming of file. For example, there is a file called static_pages_controller and going in we can see functionality of pending approval lists for admin.
- We follow DRY (Don't repeat yourself approach). In the registration controller.rb, we can see redundancy in sign_up_params. If appropriate, can be corrected.
-We can follow the SOLID principles while adding methods in the controllers, by taking care that one method does only one function - single responsibility principle.
-Also, keeping more logic in controllers instead of views.
Since, most of the code is scaffold-ed, it is perfectly according to the standard."
1,"Keep going,dude."
0,Github repositories seem to be updated regularly by multiple users throughout the project period.
1,"The testing has been done. However, all the functions have not been tested. Most of the functionalities of the librarian are not a part of the test case written. Like the admin can destroy the books etc. Also, attaching few of the links which are showing error, once the test cases are written, these links should work properly or else easily identifiable."
1,"There are quite a few commits and the commit messages also signify what feature/bug fix is being pushed. However, peer review and pull requests were not used in the team. There are no pull requests created in the Github project, which can be improved moving along. One good thing that I found was the use of Github Project in the repository, however, not extensively used but still is a positive aspect."
0,"It is not very clear how simple the team is making the design. 
As the team has not mentioned what method they plan to edit/add and where in the code"
0,"The User Interface has been beautified with HTML and CSS and is very intuitive, showing all the fields correctly in place where it is supposed to be. The home page button is available to easily navigate, also the services available to the student is shown clearly."
0,"Since I can't see the code, I can't answer all these questions. Maybe you have not reached this step."
0,"Yes, their design appears to be to the point and seems to follow a lucid logical approach."
1,"The code is well maintained and the business logic is kept separate from the Views and Models. This brings the good practice implementation in the code. The code has been well intended. However, more comments could have been put in place to make the code more easily readable to other users."
0,yes the design is simple and clear.
1,"1. No, The Student model has all functionalities to be yet developed.
No Checkout, return, hold functionality added. The link only shows the list of books. The student can permanently destroy a book from the libratry(This needs to be fixed). No functionality for calculating overdue fines.
2. Librarian Model is almost complete but as end to end flow from student to a database update is not complete. We cannot fully test if a book is actually added in the hold list. The databases are populated in different views, but that is not sufficient to guarantee a particular function works as no end to end implementation. No functionality to view overdue fines of a particular student."
0,No Third party signup
0,They start to push and commit 7 days ago. there are two weeks between they did no work on the hw.
0,No self test. Only auto generated tests written.
1,Clean and user-friendly UI
0,"Yes, the team well explained the changes and files that possibly will be changed"
0,"The outlook is good. Very neat framework, coded front-end layout. Clear buttons for linking to main pages and function pages."
1,"Although the user interface is intuitive, it is difficult to navigate and view as there is no border or margin spacing and it sticks to the left o0f the screen. I suggest to add some CSS and improve the UI by adding margins and padding appropriately."
1,"It is well defined where to implement the next operation. The UI looks clean. sign_out button is displayed on every page, which is kind of convenient for the whole test process."
0,Yes they plan to make adequate changes in the system
0,"i can not login using their pre-config admin username and password, so cannot create librarian role and test profile changing function."
0,- The changes are listed out very well. They know exactly what files need to be worked on which is definitely a good thing.
0,"Yes, you can see it from git commit."
1,They followed the MVC structure of Ruby on Rails to write their code.
0,Their stusent model is doing good.
1,"I believe you guys did a good job, so please provide the link to github next time."
1,"Yes, however I think the anticipated code changes are too broad and should have been further narrowed down."
0,They have explained the changes properly.
0,good interface.
0,"many functionalities are missing.
student is able to add new books, which means that testing is not done properly."
1,The code on Git looks clear and well organized. And also the coding standards are well followed.
0,Good interface.
0,"Yes. Overall, the doc is comprehensive."
0,good coding practices followed.
0,"Yes, all functions are easy to find, except some function have not finished.
Besides, I think the function of add new books seems strange, as I can only add counts. I cannot add a new book for the library I want as an admin. That seems a small bug."
0,This team tested several controller thoroughly but not any model. They can polish their test afterwards.
1,"Yes, the user interface is easy to use. And I can find some the instructions from the README as well. However, there may be some function they have not done, so I cannot find the entrance. I think they can point the functions they haven't finished in the README as well."
0,"I cannot find how to create students and librarian accounts as an admin. There is no such link on admin's dashboard. I cannot find any instruction in README as well. I cannot see the borrowing history of a book as an admin or as a librarian. I cannot see the students who have overdue books as well. And the function of viewing checked out books and books in hold request is missing.
I cannot borrow books as I want, as I cannot find the book I just add as an admin."
1,"1. The team did push their changes but mostly during the latter part of the project period. They could have started a little earlier.
2. Most of the changes appear to be within a week from the deadline. But I can surely see continuous commits since then."
0,"1. None of the extra credit features were implemented. A student can create book by changing the URL. (HINT: Try exploring the ""before_action""  filters for implementing this.)
2. Thorough testing is not provided. Most of the code was the default that one gets using ""Devise"" etc.
3. The signup integration with LinkedIn, Facebook etc. can be done using Rails OmniAuth. The team can try exploring that."
0,"The user interface looks intuitive enough however I did find some things can be fixed.
1) Some of the pages, I couldn't find a back button. For example: When you click on show books for an individual book, I couldn't find an option to go back. I could always use the browser back button, but this won't be consistent with the application overall.
2) The search functionality could be merged with the books view instead of having a separate module for it.
3) Also, the search functionality seems to be broken. I kept getting ""something went wrong"" error message."
0,"Overall the code looked good. 
1) The indentations were properly made.
2) Instead of ""for"", the team has mostly used ""each"" which is more readable and better practice.
3) Redundancy has been mostly avoided.
4) The team has followed the ""Fat models, skinny controllers"" guidelines."
0,"Yes, the design incorporates all the functionalities mentioned in the document"
0,The screenshots and diagrams in the document are instructive.
0,"Yes, their design document have incorporated all of the functionality required."
0,Very complete and wholesome document.
0,"Well one major change would be the way the overall score will be calculated, from just the peer review to now also include the self review. Though the ""New Process"" heading does give a link to a google doc, explaining the formula that would be used, this still does not make things clear, as to what methods are going to be used to achieve the same, in what class are these going to be used, and also what global (if any) variables will be introduced. Also, the code changes flow section does not seem to be specific enough to understand what the significance of the arrows mean in this case."
1,"Yes, the wiki does cover all aspects of the design that is to be changed, and includes all the functionalities that are to be achieved. One of the requirements was also to avoid the use of global variables in the code, and I feel that the new instances or instance variables that will be introduced can also be mentioned in the document. This would definitely showcase how that specific requirement is also being fulfilled. Maybe this could be incorporated in the ""Code changes flow"", wherein, instead of just arrows pointing to the data flow, it can also show the variables being introduced."
1,"More details on the UI would've been nice. By this I mean, more insights as to how exactly would the design be achieved from a user's stand point? Would the others work be disabled or not shown to the student, until the self review is completed? If so, then how is this going to be achieved on the UI? A wire frame for the same, with more technical implementation changes would've helped in understanding the end to end picture of what exactly is going through the authors mind, when designing the project. 
But otherwise, on a high level, the overall picture seems to be clear from my point of view."
1,"As I have mentioned above, the changes can be made in test plan and they can add the files they are planning to change or any file they will add."
0,"They have a code changes flow that shows the files they plan to modify and the relationship between those files. The diagram is clear and helpful to understand the project. 
And the use case diagram shows how self-reviewing is created and performed."
0,They have a code changes flow diagram to show how they plan to change the code and what files will be modified. I think they found the right files and right class to change or add code.
0,The design incorporates all of the functionality required in the given document. The functionality required includes three main points that are all described in their design document.
0,"The design document is complete. It includes the problem description, their plan of work, some visual aids helps better understand the project, test plan, and their plan of the formula."
1,"Their introduction of requirement and the method to accomplish function is great. But their test plan is synoptic. I think they should add more detail. For example, they could list the test cases."
1,"I think they could add more detail about their test plan. For example, they could list the test case."
1,"Code changes flow is a little hard to understand at first. I would suggest to put some explanation on how and what should be changed in the code file. Also, how they propose to change the files is not mentioned."
0,Yes They have incorporated all the changes.
0,Diagrams are good and quite easy to understand.
0,The code can be deployed to production; with the caveat of verifying the code coverage.
0,The writeup is very exhaustive and covers all possible sections needed to understand and review the feature. Good job team!
0,The functioning of the project did not change after refactoring.
0,"No new test cases were added, The coverage went down, but this seems to be an issue with coverall."
0,TravisCI build was successful. The branch can be merged without any conflicts.
0,No new code was committed.
0,Looks good to be merged.
0,The write up is pretty detailed. The changes in the code are explained well with snippets of the code changes.
0,The features work as they are supposed to and the spec tests pass.
0,No new tests were added in this round.
0,"Build passes Travis CI.
No conflicts with the base branch"
0,Looks like no new commits.
0,It follows good coding styles and practices.
0,"- Yes as most changes are refactoring related and the tests execute correctly after the changes; it is ready to be deployed
- The code must be once deployed on test server and the review_mapping_helper must be tested manually before deploying"
0,"- The document is well written explaining the changes
- The team added screenshots of tests implemented"
0,"- Not deployed, need to manually test the controller"
0,"- No new test cases added
- Refactoring project"
0,- The build is passing
0,- Yes new code was commited in 2nd round
0,- The code is well written and is readable
0,"The code passes all the test case and hence is ready to be merged. However, I was not able to test the changes from UI."
0,The writeup very well explains how is the refactoring being done.
0,It is a refactoring project. The team did not made any changes in the test cases becuase it was expected to work in the same fashion as it was working before. The team did a great job in refactoring.
0,"Travis CI and CodeClimate Checks have passed:
 
 
All checks have passed
1 successful check
 
continuous-integration/travis-ci/pr — The Travis CI build passed
Details
This branch has no conflicts with the base branch
Only those with write access to this repository can merge pull requests."
0,Last commit was made on 5th November.  The commits were continuously during round 2 of the project timelines.
0,The refactoring is done very carefully. The method changes follows the DRY principles.
0,"Yes, the code is ready to be deployed."
0,"The writeup is well written. It shows a comparison of before and after of the code which is refactored. 
The flowchart and images help us verify the approach used to refactor by the team."
0,"The code was to refactor the test cases so no more test cases needed to be written. 
The test coverage has somehow reduced decreased."
0,"Yes, the project passes all the Travis CI build test cases."
0,"Yes, a few commits were added in round 2."
0,The program follows the DRY principles and it was very important for them to do so as it was a refactoring project.
0,"Yes
The code has been commented.
Passes all builds
There are still some concerns about variable names, but it does not affect the ability to be merged"
0,"Since the team has only done refactoring of existing code, they did not need to write new tests. Their refactored code was successfully able to pass all rubocop tests. Also all the travis builds have passed successfully. The coverage decreases by 6.2%."
0,Yes the pull request passes the travis Ci with 24.302% coverage.
0,There are a few commits but they are primarily directed towards adding comments and does not make the changes suggested in review 1.
0,"Yes, this code is ready to be deployed onto the production server, the changes are good enough, the refactoring is done correctly and the project works pretty well. This is a good starting place for a future team to pick up."
0,"The writeup is pretty good, there is no lack of explanation, no lack of functionality. I could understand the writeup very easily as well as the functioning. The functioning and the working of the project is explained precisely and concisely."
0,"Yes, the features work as they are supposed to. The refactoring is done correctly."
0,"Yes, the build did pass Travis CI. No conflicts to be resolved."
0,Yes there is 1 commit. This commit changes the file app/helpers/review_mapping_helper.rb.
0,"I didn't find any problems with the code in the first round, just the lack of comments, that they have added now, so in this way, the authors have improved the code."
0,The write up has been significantly upgraded and looks much better now. They have added video link and screenshots which improve the quality of the wiki.
0,The features are working as described in the requirements.
0,The build passed and there are no merge conflicts
0,The team regularly added new commits.
0,The code is coherent now. There is good improvement to enhance the code quality compared to the 1st round.
0,"I had no issues with the writeup in the first round either, theirs is one of the best ones I have seen."
0,They covered the tests in the first round itself. They have also included a video describing the same.
0,"Though I still disagree with the obtain_team_color and get_team_color naming, I couldn't find any other issues in the code."
0,"All the tests are building successfully, and their test plan looks promising. So the code can be deployed to the production server."
0,The writeup is very illustratively written. Clears everything about their task and how did they complete it.
0,"The task was to refactor the controller. Since the Travis CI is passed, every functionality is working."
0,Team had committed all the required tests in the previous commit only.
0,The Travis Build has passed successfully. And there are no conflicts with the existing expertiza project
0,"Yes, the authors have added more comments to the code."
0,No deployed link provided.
0,"No test cases changed or added, the test plan only shows results of running the existing test cases."
0,"There are no new comments added, the controller already has comments for most of the methods."
0,"The Travis-CI build has passed, however the test coverage has reduced by 6% after the last build was created. The naming convention is intuitive and easy to comprehend with the implementation."
0,The writeup is great.
0,Writeup is good. Doesn't provide test case details only displays results upon running them though.
0,"Though not very detailed, the test plan covers all aspects of testing."
0,All changes seem to be good and suggestive of their respective functionalities.
0,"The test plan is not very detailed, but given that it is a refactor feature, it is good enough."
0,The best documentation I have come across. It is detailed and covers all things that are required to understand the project.
0,"The quality of the explaining issue is good.
The explanations are concise and clear to the point.
Also the method of explaining new formula in Doc is quite good."
0,The wiki page is very well documented. Has supporting screenshots for reference. Good job team.
1,"The writeup design doc seems to include everything.
But adding any activity diagram helps more to understand the flow."
0,The features work smoothly.
0,All test cases work as they're supposed to.
1,1) The flow of their approach to solve issue is clearly explained but  the testing Plan and how what are the final result that will be outcome of this changes should be explained in more detailed way.
0,"1. Functions are not long.
2. Function names are mostly within the proscribed length limit.
3. The authors have considered cognitive complexity, cyclomatic complexity of the code and have made right changes."
0,The comments have been provided for most of the methods and describe their functionality.
0,Variable names and method names are according to their use and needs.
0,"The test plan contains pre-conditions, edge cases, invalid input values."
0,The write up is concise and is self-explanatory. I found it easy to understand.
0,"Yes, the write up is very clear. Diagrams are also present to explain the design. Screenshots were also made available in the write up."
0,- The code doesn't seem to be deployed as the project is refactor only
0,- Yes the team has included test plan and implemented tests as per the plan
0,"- Few functions seem bit long
- Most functions are properly refactored to be of appropriate length"
0,- There are comments indicating the function the method is performing
0,- The variables are approprioately named
0,"- The test plan looks complete
- The team has tested all the methods"
0,"- The writeup explains most of the details
- The document doesn't explain why particular approach was taken; only how the refactoring was done"
0,- Very clear to understand and defines the functionality correctly
0,The features are working fine. Deployment link is not available to test.
0,Test cases have been passed.
0,Cyclomatic complexity has been followed very well. DRY principle and Ruby Style Guides are followed.
0,"Comments like this - # checks the submission state within each round and assigns team colour, properly explains what needs to be done."
0,Test plan has been properly explained in the write-up and yes they have been executed as well.
0,The writeup is very well. The refactoring has been done carefully. The principles are followed while making the changes.
0,Writeup is very carefully written and includes images to explain the changes being made.
0,"No, VCL/app deployment link has been given. Although I can validate that the application works based on the screenshots attached in the wiki page."
0,"As this is a refactoring project, no new test cases were required to be written."
0,"Yes, the code added/deleted follows most of the above ruby principles.
For example, huge blocks of code have been modularized and distributed in different methods"
0,"Yes, the code is well commented and the comment properly explains what each function does."
0,"Yes, the names of the methods accurately depict the function they perform. For example: obtain_team_colour and check_submission_state."
0,No new tests were required to be written for this project. They executed the same rspec file and have checked whether the application is working.
0,"Yes, the authors have explained why refactoring is required for that particular file and they have identified the issues and worked on it."
0,The writeup clearly explains the changes in blocks of codes by giving both before and after version.
1,"While there is no link for testing from user interface, pulling their github repo and rebuilding the expertiza into vcl I was able to test the functionality. I would suggest the authors to setup a VCL instance."
1,"The code refactoring of certain methods like get_review_team() does not include comments detailing the functionality. Suggest commenting the code
get_awarded_review_score: The new variable TeamID is confusing with another variable team_id. I would suggest using some other variable name. In case the var name is localized, include a comment to differentiate."
1,"The code refactoring of certain methods like get_review_team() does not include comments detailing the functionality. Suggest commenting the code
Also suggest add a line of comment for new variables created and their functionality."
1,"get_awarded_review_score: The new variable TeamID is confusing with another variable team_id. I would suggest using some other variable name. In case the var name is localized, include a comment to differentiate."
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes.The code embedded using pre tag in the expertiza wiki runs over the page and is not  visible. I would also suggest setting the flowchart image to center of the page. I would suggest to combine the refactoring changes for same reason eg: Abc complexity, into one group as this would simplify the reviewing process even more."
1,"The write-up details all important aspects of the project. however, there are certain problems with structuring. The Code and flowchart both are flowing out of screen. Also I would suggest rearranging the refactoring changes into categories of similar problems:for instance abc complexity. The authors have also included certain unnecessary sections like the Travis-Ci build testing which is redundant. The screenshots for Rubocop testing can be aligned in a better way to include side by side sections for code and results"
0,"Yes, the features work as intended. The work is refactored."
0,"Yes, the authors have converted all the cases discussed in Test Plan into automated tests. I don't find any tests that failed or are missing."
0,"No, The functions are not too long, the code does not need to be extracted into seperate methods. The comments are descriptive enough. The code follows the Ruby Style Guide and is DRY."
0,"Yes, there are comments for each method, and they are descriptive enough to tell what the method does, and how it does it."
0,The coverage has decreased. The method's names that are added seem reasonable and suggestive of the functionality. Same with variable names. The class names are the same.
0,Team presented documentation with proper diagrams.
0,"Yes, the writeup does include Test PLan section.  They carried out testing to check the cognitive, cyclomatic, perceived, lines of code and abc size complexities of the functions. They tested it using Robocop and Rspec. I am not quiet sure about the testing the edge cases specifically, but they tested the code on travis ci, so everything looks fine."
0,Problem explanation is given for the problem and proposed solution. Various diagrams and flow chart makes it easy to understand the problem.
0,"Yes they have considered all the functionalities mentioned in the problem statement and came up with justifying solution to this problem,"
0,Documentation looks good to me.
0,"Could not find any edge cases for which it did not work. But as I am not aware of the exact use case of the parent code, I could not test it for all possible things."
0,The diagrams are good and follow the conventions.
1,"All of the system design things are explained in the flowcharts and uml diagrams. But, more textual description to describe would be better for the reader."
0,The cases described in the Test Plan are all working.
0,"The quality of the explanations is good. The explanations are quite clear and consistent, especially the one in google doc where they explain about new formula."
0,"The code looks clean. As it was a refactor story, DRYness is ensured."
0,The comments look good.
0,Yes it is explained well. The documentation is pretty thorough. There were some unnecessary images which caused the doc to bloat up.
1,"Authors could have included a gist of formula proposed so that reader has the option to choose between reading the entire document, currently readers have to read the document to understand what's going on."
0,It is explained in exhaustive details.
0,They have added tests and provided screenshots for each as well.
1,"I see comments for new code which was added, maybe they could be more descriptive but they describe the functionality well enough."
1,"In my opinion, get_team_color and obtain_team_color mean almost the same thing, so maybe obtain_team_color could be better named to reflect its functionality, or maybe rename both. Other than this issue, the code seems good."
0,There are sufficient tests with all the edge cases covered.
0,UMLs and flowcharts are given in the design which are always welcome. This helps in understanding the design in a better way
0,The problem statement and the procedure followed is explained in sufficient detail. There are a good number of screenshots provided as well.
0,"There wasn't much difficulty in understanding it since it was a refactoring project in the first place. Having said that, the team has provided a descriptive flowchart of the procedure they followed while tackling the problem as well as screenshots of the code and tests, which further enhances comprehension. I think they have done a good job overall."
0,All tests pass.
0,They've added comments for each method. They are descriptive and concise.
0,Variables and method names are suggestive of functionality.
0,Test plan looks thorough and covers different cases.
0,"1. Yes, the writeup is clear about the changes made and reasons for changes."
0,"Yes, one commit can be seen on the GitHub. This commit has added various comments to the existing code."
0,"Great! another team which specifically mentioned what design pattern they are going to use! While comparing to the previous they did not mention which specific file (object/class) they're referring to, but I'll give them a pass"
0,"The proposed changes look good.
The changes right now do not look smelly. Though the code to improve upon last sem's code would be worked upon while the project is ongoing and it will be checked later on.
The checks look sound enough. No need for new gems, I think.
The expectation is that since they are improving on last sem's code, the response time will same or less.
The design has been well thought out and seems appropriate enough."
1,"Yes, the project is ready to be deployed onto the production server, the refactoring is done correctly, the features work as intended. Yes, this is a good starting place for a future team to pick up."
1,"Functions have been rather reduced in length, string literals were replaced by constants. The logic has been separated according to views and controllers with proper refactoring."
0,The code seems to work the way it is described. The bugs that are still not fixed are mentioned clearly in the doc.
0,No test cases added. This also causes test case coverage to reduce.
1,"Write Up should have some code snippets explaining the functionalities added. Without this, it becomes tough for the doc to remain coherent. The Functionality and Testing part is explained in good details. Some screenshots would greatly improve the overall doc."
0,The writeup is clean. The functionalities mentioned there are working.
0,Yes the feature work correctly
1,"Add comments in method average_based_on_rubric.
Though it is self explanatory(the process), but still adding comments is good practise"
1,"In the form for adding bookmarks, when user enters invalid url then it flashes notice then it is invalid.
Functionality is fine but instead after invalid form message user should be provided original form to edit the url which is not shown here.
It will me much more intutive."
0,No. test cases for issue related to bookmark page back-link.
1,"The writeup well explained issue, solution and how one can check/verify the solution with steps.
But it does not include the screenshot and test section.
Also, discuss the way you come up to the  solution."
0,"The test cases have been extensively written,ensuring all the scenarios are covered as long as the functionality is concerned"
1,"There are very less number of visual diagrams included.To explain the design,t is suggestive to include  UML or such visualization"
1,"Th design appears simple as the requirement is broken into pieces and resolved,but the design could haven been explained using UML diagrams or flow charts for better understanding"
0,"The test plan is a little thin, with just a description of the base test case. No other tests cases are included."
0,"No UML diagrams are used to describe the flow. However, UI screenshots are relevant and helpful."
0,The design appears to be sound. Some of the issues that are described in the problem statement are not clearly understandable with little context.
0,"Yes, it appears so."
1,"It includes UI based testing which is shallow testing, but test plans for specs should have been added."
0,"Yes, the authors have explained the changes and in few cases they have even explained how to implement the changes along with the the files required to be modified."
0,"They have added screen shots and thus, all the issues can be understood from it. For implementation they have made use of mock views which makes us easy to understand."
1,"as it is UI improvement project, there might not be any rspec test. but yes they can write some capybara test cases to test what they have modified."
0,"as it is more on the side of the UI improvement, I think they do not need to show any diagrams to depict the flow."
0,yes the design is very clear and simple. the layout of the table and screenshot of the pages makes it easier to understand.
0,"yes the proposed design looks sound and complete as per the problem statement. 
it did address all the aspects of the problem definition."
0,"yes, changes to be made are well described by them. I can clearly understand what they are trying to do to improve the UI design."
0,It does a fair job of describing the changes made to the system
0,Yes the design looks impressive
0,"yes, the design appear ti be sound , following appropriate principles and using appropriate patterns"
0,The design includes appropriate test plan to test each of the test scenarios.
0,The documentation does not include a UML flow diagram to describe a project flow.
0,"Yes, the design follows a simple logical flow."
0,The design is simple and follows appropriate design principles.
0,The authors have explained it reasonably well.
1,"The test plan includes the steps to test the application flow. 
Nothing was mentioned about the tests the team will be writing to cover the bugs they are going to solve.
May be some of the tests can include:
- checking whether the anonymized names are getting generated or not.
-Placement of checkbox or the space adjustment for different features etc.
 
-"
0,"The design seems simple as the team will be working on fixing the bugs. 
There is no anticipated enhancements mentioned by the team.
So, may be only few files will be modified fixing the bugs and not much drastic changes or additions of files will take place as per the wiki page."
1,"The motive of the team is pretty clear about what needs to be fixed and is clearly mentioned in the wiki page.
But there is not much discussion in code point of view on the wiki page so not able to comment on the design patterns/principles that the team is anticipating to follow.
May be the code snippets of the issues where the team expects to make changes will give an idea about the work that the team will do and will be easy to give suggestions.
And since, the project is all about bug fixing, there can't be much design patterns involved as the team will fix the bugs on the existing code."
1,"The team listed the files that will be modified.
Also, mentioned in few places the code variables which will be corrected.
Apart from these nothing much was discussed.
May be a few code snippets of the areas where the anticipated changes might take place will give more clarity for the reviewers since the project exclusively deals with only issues and not new enhancements."
0,"no URL image included, just text description"
0,"looks like simple, can fully understand what they are going to do, but no URL images included"
0,no design pattern included in wiki page
0,"yes, text with an image is good"
1,The test plan is basically program flow. Although a few more edge cases could have been included.
1,"It would have been even better if the test plan can be explained as a flowchart, it would be easy to understand and comprehend"
0,"Yeah, the description is as simple."
0,"Document Organization is hard. Traversing the document is a bit hard
."
0,"Yeah, Explanation was clearly given for whatever stated."
1,Test plan cab be improved. Right now test plan is very abstract and does not indicate the components of code which are going to be impacted by the proposed code change
1,No use of class diagram and UML diagrams. It will improve the readability of document and will help to understand the flow of proposed work in better way.
0,"yes, the design appear to be sound, following appropriate principles and using appropriate patterns"
0,"Yes, the authors adequately explained the changes to be made to the system"
0,Yes it includes.
0,The changes are clearly.
0,Yes it is simple and easy to understand.
0,Yes the design appear to be sound.
0,Yes they adequately explained the changes.
1,"Yes, it includes a test plan. But they have just mentioned the steps needed to test the plan. They could focus on the corner cases which may not be discovered easily and test the system on that. Explanation on these should have been provided."
0,Yes. The design can be understood easily. The explanation provided for their approach is clearly expressed. They seem to have a clear idea of what they have to do with the project.
0,"Yes, they have explained their approach neatly. In addition to that, they have added the table to further illustrate the design. They have studied the code base and have suggested relevant changes in the appropriate files."
0,"Yes, the changes are well explained. They have used screenshots and tables to juxtapose the given problem and how their solution solves it."
1,"Yes, their test plans are included. But only some step by manually to check whether their function works.
I think they should also include their Rspec test cases.
They can also list some screenshoot for their manually testing expected output."
0,All their diagrams are clear and describe their design properly.
0,"Yes, the design is simple and clear. And all sentences are easy to understand."
0,"Yes, their design document includes appropriate principles and using appropriate patters."
1,"Yes, they have explained a lot about their changes. 
But I think they can perform better if they include more details about how they will change the related controller and view.
They can include more details about their test plan as well. Which has already mentioned in the test plan review answer."
0,They did not make use of UML diagram but they did make use of mock view of their implementation which looks easy to understand.
0,Design appears to be appropriate.
0,It was easy to understand from their writeup about what needs to be done and how they are going to do that.
0,"Yes, it describes the complete functionalities along with which files need to be modified and a brief description of their implementation strategy."
0,I think their writeup is complete as it consist of all required fields.
0,the project does not need any visual aids as it is mainly focused on the User interface improvement. layout of the table is also given for their proposed solution. which i believe is good.
0,Changes proposed by the authors are good but not descriptive enough for every one to understand the proposed changes thoroughly. they did said which files they are going to update but did not said why that file and that method in particular.
0,Problem statement stats things that needs to be done. and their design document stats both of these problems and proposed solution.
0,I believe from the problem statement that they are covering almost every aspects of the requirement.
0,The explanation was not very clear
0,Issue-based functionality not given.
0,Issue-based design strategy was not explicitly given
0,The proposed changes look good to me and would address both the issues accurately.
0,The authors have described both the issues assigned and the proposed solution in detail along with the design document.
0,The design document incorporates all of the functionality required.
1,The authors should have included UML diagrams to explain the flow.
1,"Well, the team has not depicted any UML diagrams or the flowcharts for the reviewers to understand the flow which when include will be nice apart from the screenshots which were already available in the final projects document.
 
But whatever is included, does the job."
0,"Upon studying the expected outcomes and the teams anticipated changes, I feel the project is a set of issues which needs fixing without any drastic addition of changes/files. So, I don't think there will be some issues until I go through the changes done by the team toward the end of the project."
0,"Yes, the team clearly mentioned the problems with the feature and even the code files and the locations where the changes are expected.
Looks like the team has done the basic ground work. The design incorporated all the expected functionalities."
1,"no URL images, which make me hard to understand. so I need to read all the text dexcription for a long time to fully understand what they try to do with these issues."
1,"in their design strategy, "" In the _review_report.html.erb file, replace the ""team_reviewed_link_name"" with randomly generated team names.""
this may cause the code ""smelly"", maybe they should just use a anonymous or else signal, use the exist random name is not necessary."
1,A more interactive explanation could have provided.
0,Their procedure was well explained.
0,Test Plan is also clear.
0,Design looks good to me.
1,More pictorial representations can be used to present information properly. Please add more flow charts and UML diagrams.
0,Yes documentation address all the required changes mentioned in the problem statement.
0,Document looks good to me.
0,It is drawn in good quality! good job
0,I think the author had made a good plan of it.
0,It is in good explaination.
0,Yes it incorporate all the functionality required.
0,They have completed all the parts in design doc.
1,No high-level diagrams used. Though the text is intuitive it would have been better if they could have added some basic UML diagram like a use case or activity diagram
0,"They are adding changes to the relevant files. Also, they are doing some refactoring as well by removing the duplicate header lines. The design looks simple to implement and easy to understand."
1,They have suggested good changes to improve the user experience and effective utilization of the web page space. While the first three points in the description seem easy to understand the last one seems a bit insignificant. They could have provided more explanation on it.
1,"Yes. They have given good screenshots of the current situation of the page and how they can improve it. Also, they provided a four-point implementation plan for the functionalities. The last point ""Get rid of Review Round 1"" is a bit unclear. They could probably shed more light on it. I think the existing one looks better."
0,Only UML diagrams are missing. The rest of everything is covered.
1,They only use some mockups of screen. But I think as their task is up to 10. Table may be necessary for them list all tasks and solutions clearly.
1,"They gave out several solutions for a task, and said that they will see which is better. I think they should give more effort to compare the results after they finish the whole document.
And in the summary page, the design strategy part, there is a typo ""conmment"". They may mean ""comment""."
0,"Yes, they analyze five tasks for main page and five tasks for summary page. They also listed design strategy for all the tasks."
0,I think all their explanations are easy to understand.
1,"The project purpose, project design and test plan are all stated. But I think their test plan should include more details about Rspec test.
Beside, they combine the project statement and project design together. If they splits them up, it will be more clear."
0,The build passed the Travis CI. All checks have passed and there are no conflicts.
0,"Yes, a lot of changes have been made during round 2. Almost 40-50 commits have been done during round 2. Looks like a lot of efforts have been given."
0,The code is written nicely. Standard naming convention and Ruby style guidelines are followed. It would have made the code much more readable.
1,"Yes the team has added test cases. But, there is a small improvement which can be done in the test cases. The test cases written in the file ""assignment_participant_spec.rb"" are too long. Instead the team could have divided the test cases into smaller parts and to test each small functionality individually."
1,"The writeup is very good and explains almost everything which is required to understand the project and the work done. The ""How to test"" section was very helpful for testing at my end. But I have found one problem and I would like to make a suggestion for that. In the ""Solution and code changes"" section, rather then quickly going to explain the code changes, it would have been better if the team had explained a bit more about their approach. It might have helped in understanding the code easily too."
0,"Yes, the code looks like ready to be deployed when merged. The checks are passing and functionalities are also working properly when tested from front end and rspec."
0,The team has come updated the code and implemented the feedback provide in the 1st round.
0,Yes I can see new commits . The team have updated test cases in 2nd round
0,Yes the build pass in Travis CI. No there were no conflict that must be resolved.
0,Yes the team has added one test case and updated the other. The new test case cover pretty much for the work team did
0,Yes the feature seems to be working as per the description.
0,"Yes, I think the code is ready to be deployed onto the production server. No the project need not to be done from scratch."
0,The code is written well which follows good naming and does not contain complicated functions. The code looks dry and also contains comments.
0,"Yes, there was a new code committed during the 2nd review."
0,I checked the pull request and the Travis CI build passes. There were no conflicts for the pull request.
0,"Yes, the team has added the test cases and the code coverage increased. The newly added test covers a large range of the project. lets us look at a scenario where we add the headers for the CSV file, what is the error it displays or it does not import the CSV file at all because the values in the fields make it invalid."
0,Yes the system operation from the UI works as expected. The project does not require any refactor or fixing. The issue is fixed and the features work as intended.
0,The writeup is really good and each step to be followed while reviewing explains well. The writeup could have explained a little bit more on the test cases as what test cases are doing exactly.
0,"Yes, the code is ready to be deployed onto the production server, the code also contains comments which explain the flow really well."
0,They have added new comments. There are no coding guidelines violation.
0,They have committed new changes in the 2nd round
0,The pull request passed successfully. And there are no conflicts
0,The test cases cover the functionality.
0,Yes the system works as it is supposed to work.
0,"The write is pretty verbose and clearly states the reason behind the project, and the test plan."
0,I think the code can bed deployed on the server after adding some tests cases for csv upload and mail check functionality.
0,Well done !
0,yes the new code was updated
0,yes they passed it
0,yes they added the new test
0,yes it worked
0,it's pretty good written
0,I think it might be ok to be deployed.
0,The code is well written.
0,There are many commits after the 1st round. I see they were trying to pass the build in Travis CI. And they did. Great work.
0,Their build passed the Travis CI.
0,"Yes, I think some part of their code is ready to be deployed onto the production server."
0,I checked their wiki page. The writeup is good.
0,"In the first round, there were only manually tests. But this time they added rspec test and passed the build."
0,"Yes, everything works."
0,I got an email when I tested by adding a participant to an assignment
0,changes done are self-explanatory.
0,No new method implemented. And the changes done are self-explanatory.
0,Just adding an if condition resolved the issue. No other variables or methods added.
0,The task seemed to be complicated but apparently a simple if statement resolved the issue. The identification of the root cause of the problem is praiseworthy.
1,"As such, the team did not have to change or add a lot of code. Code which is added is fine and readable. Variable names are also good and understandable. But, I would like to give a small suggestion. In file ""app/models/assignment_participant.rb"" on line no 203, the variable name is ""attributes"" which should have been more descriptive name (like ""student_attributes""). Maybe ""student_attributes"" can be wrong, but I couldn't understand what attributes they are by looking at the code."
0,Test plan is not mentioned. Testing is not done. Can't evaluate this section.
0,"I tested by adding a participant to an Assignment. Then I got the email in the entered email address. So, the functionality seems to be working."
0,"The team did not have any method to implement. The if condition which they have added, doesn't require comment as it is intuitive by reading."
0,"I didn't find any comments for the changes made. Also, I feel that since the changes were made in between the functions and were already explanatory, comments may not be needed."
0,The changes made and variable used for the functionality are as per the guidelines
1,"Write up is good. But I feel that there are lot of unnecessary screenshots in the write up. Instead of it, if it would have have Change Flow graph, it could be better. Like wise, author'c could paste the code and explain in the wiki.
Moreover I cannot see Author's name in the wiki"
1,"The writeup explains the problem clearly but they could have explained a little bit about the present implementation and they could have explained their intentions more clearly. Yes, I can understand what the project does."
1,"The authors did not explain any reason for doing what they did. They did not describe any design pattern or principles if they have used it. As their implementation includes modifying the existing methods it may not involve implementing a new design pattern. For their feature, they could have used a composite design pattern, if possible."
1,"They have mentioned steps to test the feature. The steps give good clarity but the link provided for testing the feature does not respond. They did not cover all the cases, what if the CSV file has an invalid email id. Does it import the CSV or it gives an error."
1,The method are pretty descriptive themselves. Being modular they are easy to understand. I think that they could have added a comment or two for assignment_participant import functions
1,No new test case have been written. Could have aded a test case for csv upload and mocked mail behaviour or added mail check in existing test scenarios.
0,The wiki page is pretty explanatory with images to shows details.
0,"There is no test plan in the wiki doc. Also, no changes in any rspec file for the test cases."
0,"Code looks good, by looking at the changes which is really really less. It's difficult to give the feedback on these points."
0,There's no test plan for the implementation. Only the screenshots for the proofs are attached in the wiki doc.
0,Writeup is fairly decent for the bug but writing test cases was one of the project requirement as there's not enough development work in this project. So team should have spent enough time on writing test cases and plan.
1,"Though what exactly has to be tested has been clearly shown with screenshots, the RSpec file that is used to run the automated tests is not present in the document. Maybe adding that will help in running these test cases to check for consistency in the code, and also coverage?"
1,"Comments are missing, and I believe would help in understanding what each method call is doing and why existing code has been changed."
0,"The naming convention seems to be alright, as whatever has been refactored has been done with existing code, thus making the author not liable for names being used."
1,"The author clearly shows screenshots of the code changes after pull, showing the code has from what it previously was. The problem is also explained briefly before digging into code changes. But a more descriptive explanation of why such changes had been done to those specific files would've helped in the reviewer understanding the code, and the approach taken to solve the issue. Like for instance, why a line has been commented out in the mailer.rb and not removed completely? So, in the writeup instead of just mentioning file changed: <<file name>> , more description in regards to the same would've been nice."
1,"Though a Test Plan section is not present, the manner in which the project has to be explained is clearly written with screenshots. Pre conditions, such as the csv file and sample data is also being shown, which helps in testing. The only issue is the RSpec file used for testing the application is missing in the document, which would've helped. Also, mentions such as what happens when anything other than an email is passed, and what is the exception handling being used could've been mentioned as well."
1,"The scope of the project is understood from the document, and how to test it on a high level is also clearly shown with screenshots. My only issue is the specifics. Code changes and why code has been changed the way it has, can be more explicitly shown, which will help later down the line, when the code is merged into production. Also, maybe explain on the line you have mentioned in the document below: 
""Issues were found in some parts of code as highlighted by the snippets shown below""
What issues were found and how were they fixed? That would definitely make the document more specific to the issue being solved."
0,"1. There are bugs in a critical feature. 
2. Some features are not implemented."
0,The code has only one of the following characteristics: (i) is DRY (ii) follows Ruby style guide (iii) is commented (iv) does not contain long methods
0,"1. The write up is less than passable.
2. Less than half of code changes are explained
3. Very little explanation is given for the approach they used."
0,"(1) some of the functions are too long;
(2) more comments are needed, because you have trouble following the code;
(3) the code does not follow the Ruby Style Guide
(4) some code that is not DRY."
0,"1. There is no test plan in their writeup.
2. They do not explain how and why the do the work the way they did.
3. They do not have a video to show their test."
0,"1. The writeup indicate the functionality the work is related to.
2. I cannot understant clearly how they did the work."
0,The  funcitons seems good to me.
1,"No comment here. Eventhough the code is clearly, but I think it will be better if they write some comment here. Well done !"
0,The naming is good :)
0,I can not see the test plan here. But the screenshoots seem pretty good.
0,Yes they have written the wiki correctly and so detailed.
0,The write up is clearly enough
0,"Their link is broken. I can't test it manually. But I checked their wiki page, it looks like the email feature is working."
0,They did a manual test. I can't find their test code.
0,Their naming looks good.
0,"Before methods, they have comments."
0,"Yes, they explained the work they did on their wiki page. They provided a log of screenshots. More comments and explanations would be great."
0,The code is readable and well-commented. No DRY problems were found.
0,The team did a lot of commits. But it seems most of them were for passing Travis build test.
0,The code passes all Travis build test and there are no conflicts with the base branch. Lots of commits were done to pass the build test. May be could have been achieved in less no of commits.
0,Many new test cases were added. Some old ones were also modified. Don't know why there is a blank line in spec/models/user_spec.rb line 35 and in config/routes.rb in line 6. It can probably be removed. The coverage was found to be decreased by 2.6%
0,I got the email for account creation and csv upload worked perfectly well.
0,The writeup is very well written. It was very easy to understand because of screencast video and how to test the changes section
0,"No test plan here , so I have no idea of it."
0,It work wonderfully. Good job!
0,"No test code. Also, the failed the ""Participant#email sends an email to the participant"" test case"
0,Detailed test plan included
0,"Document contains the relevant diagrams such as flow chart, execution flow, etc. to clearly describe the intended change"
0,The proposed design is to-the-point and accurate.
0,Document contains the appropriate software principles and patterns.
0,The changes are appropraitely descibed and mentioned in the document.
1,"Yes the team has added test cases with different edge cases. Just one thing, the team could also explore the automated testing using any of the web browser testing tools like selenium."
0,They have added the flow diagram for different functionalities/cases.
0,Yes the design is simple and easy to understand.
0,They have used the existing function/made to changed to the existing one which will help to dry code.
0,Yes the team has explained what changes are needed to be made in the system.
0,"Yes, test plans are thoroughly"
1,"The flow charts explain the solution pretty well, however, there is no UML or class diagrams that describe how the classes work together"
0,The design appears very simple and clear in flow charts
0,"The team listed the proposed solution and the files that likely to be changed, which is good"
0,"Yes, the design is complete and sound."
0,Visualisation is clear and easy to understand.
0,"Yes, the test plan is clear to understand."
0,The design appear to be sound while looking through the Proposed Solution. The author give solution to the wrong anonymizing of the team naming and the anonymized view for student.
0,The design appear to be simple since the author added the flowchart. which explain the problems they have and the possible solution to it.
0,The flowchart is easy to understand and precisely explain the design.
0,"The author created four test plan for the four issues. Any issues test plan is explianed by the author. For example, the author stated two cases of the wrong anonymized."
0,"The most impressive part of the document, a very detailed test plan."
0,The diagrams are really neat and are very effective in enhancing the reader's understanding the proposed solution.
0,The document presents the design in a way that makes things really clear to the reader.
0,No problems with the design.
0,Every change proposed has an explanation to support it.
0,there are visual aid present for each case and it is well described
0,Yes the design is simple and easy to read
0,The design is well documented and consist all the section with well description
0,yes the do
0,Yes they include the test plan.
0,Yes the figures are clearly described.
0,It appear to be simple and easy to understand.
0,It is sound and appropriate.
0,The authors adequately explained the changes
0,"The design appear simple. In places where OO concepts are required, the author has done a good attempt to paste the code which would be extended which shows the clarity of thought in designing ."
1,The design is crafted using object oriented programming paradigms. The design would have been better had the authors described the design patterns that they are planning to use .
0,The design is as simple as possible.
0,"Yes, it is well designed"
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contians  Introduction, Problem Statement, Proposed Solution and Test Plan."
0,The design is simple enough to highlight it's point. But it's not too simple and I could get the system structure and the relationship of different table.
0,"Their design include the test plan and there are five test cases in it, which thoroughly test the system including corner cases."
0,The design document includes the test plan. The test plan includes all the part they should design. And the plan includes several cases related to their design problem.
0,The figures shows the design flow related to anonymized view clearly.
0,The design appear to be as simple as possible. There is nothing in their document that is unrelated to the project.
1,"They can write more details about the ""Wrong Anonymized Names"" section. They can list which files to be modified and what method they plan to add."
0,"1) The diagram does comprehensively describe how their design works
2) It is easy to understand and really helpful"
0,"1) The design is simple and clear
2) It is easy for reader to follow
3) Diagrams also elegant enough"
0,"1) The design appears to be sound
2) They do follow appropriate principles
3) No pattern was adopted"
0,They have added flow diagrams to explain the flow.
0,The methods given in the wiki looks fine.
1,The write is pretty good. My only suggestion is to remove the code and add more description in its place.
0,Yes the team has clearly explained the requirements and details of the improvements.
1,The existing flow charts are very easy to understand. It would be better if the team can include a UML diagram explaining the whole structure of the files that this project associated with
0,"The proposed changes are clearly stated along with the code, flow chart and pseudocode, which is very good and easy to understand"
0,"Yes, the design is perfectly corresponding to the functionality requirements"
0,All the necessary visual aids are present.
0,"1. Yes.
2. No.
3. No
4. No.
5. No"
0,The explanation is not hard to follow.
0,The design is complete.
0,"The flow chart added in the wiki, which look concise and simple, and excatly tells the reader about their design strategy."
0,They give the solution of the each issue and they all make sence. The solution they make is just precisly fixing the problem.
0,"Their design strategy write about the Impersonating Student Using Anonymized Names,Anonymized View For Students, Anonymizing Team Names and wrong anonymizing names. Their flow chart looks concise and percise.Test plan contains the most test cases also include the edge cases."
0,"From the doc, I konw that the team should fix the bug of Students cannot switch into and out of anonymized view, allow impersonation of anonymous usernames , fix some things are not anonymized and Team names are also not anonymized. So i can see the author list all the problem in the wiki doc and describe their way in solving it."
0,"The design doc is quite comprehensive, since it's include the design strategy, test plan, user cases and etc."
0,There are visual flowchart representing the flow of the problem
0,The changes proposed are detailed and the explanation is to the point. They have mentioned the files that they will change and also what changes will they amke
0,The design document is well made and include everything
0,Yes the UML is clearly and easy to follow.
0,No problems. It's all done.
0,It is written in gooe explaination
0,Yes it incorporate all the parts.
0,Well done . It's in good completion.
0,The authors have made use of flowcharts to explain the expected output of the functionality. This helps the user in grasping the information without having the need to read through the text. These flowcharts convey accurate information without overloading it with details or even does not give a too high level design.
0,"The design proposed by the author in most of the cases include tweaking in conditions to the existing code. In case of implementing 'Impersonating Student Using Anonymized Names' there is a chance of code to become smelly due to the fact that it would be reverse of doing anonymized names . The efforts made on the design are however, meeting the expectations."
0,The authors have explained their solutions in concise manner ensuring that it will be understood by newbie. The code snippet along with the flowchart attached points to the exact grey area and the solution gives clear view of the changes that needs to be done and how it should be done. This would ensure that the design document can be implemented by a new developer who is not familiar to the system.
1,"The authors have incorporated all the functionality that have been mentioned as a part of design document . The descriptions in the problem statement are crisp, however, these descriptions can further be improved to include the importance of the functionality to the users and the potential effects or in conveniences faced.Eg in Anonymised team name section, the authors can mention about the reason why anonymizing is required and how it not implementing it can breach privacy."
0,"I believe that the explanation is quite good, albeit a little confusing if you aren't familiar with what the ""anonymous"" feature of expertiza already is."
0,It seems to intend to implement complete functionality.
1,"The visual aids are good. From my personal perspective, the second graph are not necessary."
0,Design appears to be sound so far
0,"The Wrong Anonymous View solution is not specific enough. The Anonymizing Team Name solution are not adequate enough, it is a little bit too hard to understand the solution."
0,"Yes, they did get all functionalities included."
1,"Test plan are not complete. Besides, it will be better if they can imply the files need to be changed."
0,"Their diagram is helpful, follow the conventions and provide enough details."
0,"(1) They added methods to correct classes.
(2) I don't think the new design may potentially make the code ""smelly"".
(3) The new design is simple enough.
(4)I don't think the new design will add load to the system.
(5)Their design is good enough."
0,"Their explanation is clear and high quality. I'm shocked that they have accomplished their function, list the code and almost completed the test case."
1,"1) Overall is very good, each part has been explained in details
2) It would be better to have a diagram for the whole solution
3) Anonymizing Team Names could have more explaination"
0,"1) The design covers all the functionality required in the document
2) Each problem is explained in simple and elegant words which are easy to understand"
0,It mentions they will have automated tests but don't say how. I'm curious how they plan on automating testing for checking if a user spent more than 3 minutes looking at something.
0,"Yes, they do have test plans."
0,The test plan is very thorough but a little vague.
0,"Yes, the test plan is presented and the UI testing was very clear and could test the whole project"
0,yes they are planning to test the functionality that they are planning to implement. they have decided to create test suite using rspec.
0,Good extensive test plan.
0,The test plan is complete.
0,"Yes, the design doc includes a test plan, the authors plan rspec tests and manual UI testing, and yes they really test all the functionalities."
0,"Yes, the wiki document provided a test plan which explaining the features that they are testing and seems to be testing properly."
0,They do have a test plan section but haven't mentioned what tests will they be writing.
0,The visual aids help communicate the ideas very clearly and I get a greater understanding of the changes to be made.
0,"Yes, the diagrams in their design describes the intended changes clearly."
0,yes the visual aid is plus point to understand the flow of the project. They are descriptive enough to get the knowledge of basic flow.
0,The flow chart displays the logic in a understandable way.
0,"The database visualization is simply derived from E1791 and is trivial.
For the instructor behavior diagram the step to click on a particular student is missing. Also see the reports section in expertiza.  
They said that the problem with E1791 was ""Currently, if a student has an external link open as well as the Expertiza page, time is being tracked for both."" However, if you look at their flowchart: the same problem persists."
0,Very well constructed complex flow chart explains great deal.
0,The workflow diagrams in this document are really helpful in understanding what they are implementing.
0,"The team has implemented 2 flowcharts, one from the student's perspective of how the individual times are calculated and saved, and the other from the instructor's perspective of how s(he) can view the total time spent on a review. Both these flowcharts are very self-explanatory. They properly describe the working of the system and I cannot find anything wrong with it."
0,"The flowchart clearly indicates the flow the reviewer is supposed to test.
Also, the flow chart incorporates the changes that are going to take place.
The snapshots also indicate the changes that are going to take place in the UI ( such as a clickable link for the popup)."
0,"A very thorough diagram, pretty helpful in understanding the flow. Promising flow, good research behind."
0,"Yes, the authors have made use of flowcharts which are understandable and clearly describe the functionality and the changes that need to be made to the system and are necessary."
0,They have added UML diagram which explains the flow of their work.
0,The team has used enough visual aids and figures to explain the working which is easy to follow for the reader and explains the work better.
0,"yes, according to their explanation about the design, it is simple but practical."
0,I think the design is simple and the plan is clear and easy to understand.
0,"The flow chart is very clear and easy to understand, and the proposed solution is very easy to understand and follow"
0,Yes there are no unnecessary steps.
0,"Their design implementation and visualization is heavily derived from E1791, the project which they are extending their work on. The code level changes are extremely simple to understand. 
[I am a little dubious about the code level changes as I think you may need a different approach][There is reports tab for graphs][Creating a new model might not be necessary]
Also they don't mention certain intricate details: it is mentioned that they are creating a new controller to handle popups, however no mention about how they are going to connect the mvc architecture. 
They said that the problem with E1791 was ""Currently, if a student has an external link open as well as the Expertiza page, time is being tracked for both."" However, if you look at their flowchart: the same problem persists."
0,The design is simple and well built.
0,Yes it is easy to understand and simple.
0,I personally find their design really modular and having less interdependency. They have broken down the main problem into 3 subproblems and have explained the proposed solution for each. The solution also contains the possible files that can be modified.
0,"They've demarcated the changes well enough, and stated exactly how well they'll proceed with every change. The problem statement itself is demanding enough, and that makes the implementation complicated as well."
0,"Yes, the design is quiet simple and with minimum complications and easy to understand. The authors have made use of flowcharts which helps a lot"
0,They have provided the Use Case diagram which helps understand their work
0,Yes the design appears to be simple and well explained.
0,"Yes, their design is sound and follows appropriate principles."
0,I really like the design and especially appreciate the table showing proposed database changes.
0,The design corresponds to the project description and the design pattern was well stated.
0,"yes, the design is complete enough to handle all the issues that has been given in the problem statement."
0,"Code-Level specifics including proposed files to be changed and methods to be implemented was not present in last review, now it is done. Design Pattern to be implemented has also been decided."
0,The design appears sound and clear.
0,Yes the design seems sound.
0,"The design proposed by the team seems reasonable.
There is a mention about the strategy design pattern going to be used in the project and since not much discussion was there regarding the code in a deep perspective not sure what kind of principles/patterns the team is going to implement."
0,"Yes, pretty elaborate documentation. Including previous/other projects under current implementation was a good point."
0,"Yes, the design appears to be sound, following appropriate principles and using appropriate patterns. The design looks to be correct and understandable."
0,The document looks detailed and contains ample amount of information to understand their work.
0,"Yes, the design appears to be good and sound. It follows all the principles and appropriate patterns."
0,"Yes, the difference between the system before and after their changes is very clearly defined."
0,yes all the changes have been proposed correctly. it if easy to understand all the code changes and Why those changes in particular.
0,Yes they have adequately explained their proposed course of action
0,"Do you have a clear plan for 'For other files that need to be download and open locally, we can only make an approximation for review time.' ? How are you planning to approximate some downloadable files? Except for this, everything else looks great."
1,"Well, the team has mentioned about the anticipated changes. 
They have mentioned about the files that will be added/ modified as well as the new model that is gonna be reused.
There are a bunch of files that are listed on the wiki page but not sure what files are for what functionality and what are reusable files.
May be a detailed split up of files functionality wise and anticipated changes listing in that manner may give more clarity about the new changes that are gonna come up, to the reviewers."
0,"Yes, all the changes have been explained really well. I could easily visualize the problem and its solution too."
0,"Yes, except for the downloaded files. They haven't exactly addressed how they are gonna go about the downloaded tine counter increment when the student is on an expertiza page."
0,"Yes, the authors have adequately explained the changes to be made to the system. They have made use of flowcharts which clearly explain the functionality."
1,"They have mentioned the files to be changed, but not mentioned or gave a sample of what they are going to change in each file. I suggest giving 1-2 files for sample, it'll help understand what they are trying to acheive."
0,"Yes, the authors have explained the changes properly and easy to understand."
0,Their diagrams are accurate and informative. I can easily understand their steps of the implementation.
0,The diagrams are great! I especially like the sample page changes.
0,"Flow chart is perfect to understand the problem statement and suggested solution. It looks very useful to the reader. no, they are not too high-level."
0,The flow chart is great. It easily conveys the logic of tracking the time.
0,"They have detailed flow diagrams for each and every type of user, however there is no UML to show as to who can do what. They have also not mentioned a path to resume time. If a user goes to another link for more than 5 minutes that time is save. At a later state on resuming the start time is updated, deleting previous record."
0,"Again, the best visual aids I have seen, out of all the reviews I did. No issues here."
0,The flow chart is very helpful in understanding the functionality.
0,"They've added 2 flowcharts, one from the reviewer perspective and one from the instructor perspective. Both are self-explanatory and seem correct."
0,"The flowchart, screenshots are adequate enough to explain all the details associated with the functioning. All the diagrams are necessary. The diagrams follow all the conventions and provide enough details."
0,UML diagrams present
0,The team has used flowcharts to show their workflow and also their plans. The visual aids are properly made which helps in understanding the project better.
0,The design proposed are carefully thought out and I think they provide an effective way to implementing those designs.
0,I think a lot of this design rests on a previous project and also am unfamiliar with the general tools being used here. I don't think I can comment a lot on this although I will say that I don't see much mention of actual class/controller names which will be edited.
0,"Design proposed by the team looks good enough as of now. they have decided to add controller for pop-ups and that is really good approach. 
From the explanation present in document, proposed change does not looks that much complicated."
0,The testing will be difficult for this project. They have done a good job coming up with a plan.
0,The authors don't detail any proposition for code changes or testing. It is all pretty abstract at this stage with no mention of controllers or methods to be added.
0,It's hard to determine whether these problems exist because there is too few explanation.
0,Design is very well built. Doesn't show any flaws.
1,"I just have one doubt; whether an entirely new controller will be really needed to handle only the pop-ups. Unless it's going to handle more functionalities, I think that function can be integrated with the controller that currently handles the amount of time spent on looking at the expertiza page and external links. The other changes seem sensible."
0,"According to the team's proposal, the anticipated code changes are to add a new controller to handle pop up. Not sure to what extent that will be needed. It will be safe to see if we can add a new method in the existing controller and create a new view and manage with it.
Also,since the code for logging the start and end time is already implemented by the other team and they are reusing it, I am clear as to why do we need a new model?"
0,"The design look pretty good. There are no methods being added to the wrong class, the new design doesn't see smelly, the new designs are simple enough and do not need gems. The design does not seem to potentially increase the response time pf the system, the efforts given seem good enough."
0,Detailed proposed solution
0,The authors have proposed design changes which have been shown by a figure in the document.
0,Their explanations are detailed and easy to understand.
0,"Authors are approaching the problem in very efficient way. Although they are going to use already implemented code, they are not blindly copying it. They proposed to do all the changes that are required."
0,I think everything is perfectly explained.
0,They didn't share the details on how they will implement the design but the explanation of how the timing should work makes sense.
0,The explanation is easy to follow and written in a lucid language. The tasks are highlighted with detailed description below them. The easy language coupled with the Flowchart is enough to understand the task description as well as the proposed solution.
0,Very clearly explained. Best reading today!
0,The proposed implementation is quite vague.
0,I found the explanations really lucid. They decomposed their entire problem into 3 parts and talked about the current scenario and the proposed solution for all these 3 parts. The explanation was very easy to follow and the  changes proposed also seemed sensible.
0,The changes that the authors have proposed seem good enough. The overall quality of the explanation is very understandable and expressive. They have used flowcharts to explain their functioning which is quiet helpful. The anticipated code changes section also looks fine.
0,Detailed explanation
0,Yes the authors have proposed changes.
0,"Yes, the design document of this team incorporates all needed functionalities."
0,I think this solution tackles the given problem very well. I especially like the solution of a timeout timer which times out if the user is idle.
0,"yes, the design document stats all the things that have been requested in the problem statement."
0,"Yes, they have a good idea on what they will do."
0,"Based on my understanding the functionalities to be implemented in the project are:
Track time spent on Review page: Mentioned
Track time for external links and downloaded files: Mentioned
Track time for externally hosted submission: Not mentioned
Show time on review report page: Mentioned"
0,"Interesting project. Seems tough. Do you have a clear plan for 'For other files that need to be download and open locally, we can only make an approximation for review time.' ? How are you planning to approximate some downloadable files? 
Also, you suggested that you will display a pop up to test if the reviewer is still reading. Great idea. You mentioned that you will create a pop up every 5 minutes right. Something that can make reviewer's life more difficult is, displaying this popup at random intervals of time ranging from 1 to 5 minutes. Just an idea. Can make the system more robust!"
0,Yes it explains the functionality well.
0,"Yes. By reading the Google doc and their wiki page, I can see that they have systematically broken down their main problem into 3 subparts and explained briefly, the current status, and the work to be done, for each of these subparts. It is in sync with the problem statement mentioned in the Final Projects Google Doc."
0,"The expectations out this project according to my understanding are:
- Make the user more user friendly
-Write the appropriate test missed in the previous work along with the tests for the work going to be done.
The team is building upon the existing one. Most of the functionality is being reused. But the team mentioned about:
The issues they are going to resolve and the tests they are going to write for the existing work and also for their fixes which is the requirement of the project.
Everything seemed to be simple and clear."
0,"Yes, the design does incorporate all the functionality required."
0,Complete functionality
0,Yes all the features and functionalities are incorporated in the document as mentioned
0,Very complete and wholesome.
0,This design document is incredibly thorough and descriptive. Great work!
0,i just want to add one thing to the cases team is going to take care of. What if the reviewer opens some external link and then start their own work instead of actually reviewing. will the proposed design handle such cases.
0,It is complete. Includes all sections.
0,Code-Level specifics including proposed files to be changed and methods to be implemented is required. Design Pattern to be implemented needs to be decided.
0,The design plan should be more concrete.
0,"The project purpose, statement, design and the test plan, have all been properly explained. There is just one edge case that I'll like them to consider; that if a reviewer opens the Expertiza page, opens an external link at the side, and works on his own work on a completely different window, the time for the external link will keep ticking. It is definitely an edge case, but I'll like if they even take this into consideration."
0,"The design doc is complete. The authors have added the test plan, anticipated code, purpose, project design etc."
0,Design doc is detailed
0,The wiki page is very well written and organized properly which is easy to follow.
0,Code is production ready
0,Contains all the relevant information
0,system operations are working as expected
0,UI test cases are included
0,YEs
0,"I cannot say for certain since I have not tested their UI operations. But on the basis of the code that I saw during their commits, I can say that all the changes made, seem to follow the modular and compact structure of the original code. And hence if the UI is working properly, it can be ready to be deployed onto the production server."
0,The write up is very well-written. It is nicely formatted and all the sections are nicely supported using screenshots and embedded codes.
0,"I'm sorry but I am unable to access the link that they have provided (http://152.46.16.57:8080/). I'm receiving a ""This site can't be reached"" error, so I cannot test the UI operations."
0,"They did not add any test cases. Their changes dealt mainly with the user interface and hence the overall coverage decreased 6.2%.
Their test cases involve directly testing the UI."
0,"Yes, their build passed in Travis CI. No problem with that at all."
0,"Even during the first round, I had mentioned, their naming convention and coding style are good. There seems to be no violations of standard Ruby coding constructs."
0,"Yes, 1 new commit was made during the 2nd round."
0,The website was down - but from what I could see it should probably work.
0,I feel like RSpec tests could have been written for this project - but I understand why they weren't.
0,There were 2 commits.
0,Code is readable.
0,I am not sure of this as the code cannot be tested manually because the deployment link is not working.
0,The wiki page covers all the points. It tells about the problems and identifies the issue. They explain which files have been modified and this is supplemented by a youtube video which helps graphically understand the before and after scenario.
0,"Unfortunately, I cannot test the project manually as the link to the deployment: http://152.46.16.57:8080/ is not running.
Although the team has supplemented a video I would have loved to test this manually."
0,"Most of the code is written in html. The variable names in the html files are fairly relevant. For example info, warning, etc. Most of it is html code, so not all of the ruby principles need to be checked.
No new ruby methods have been added"
0,Only Comments have been added in the commits for round 2.
0,Al the test cases for Travis CI build have passed.
0,"The test plan encompasses of manual testing. I think automated tests are not possible for this type of project so full credit to the team.
The code coverage has somehow decreased by 6.2%."
0,I guess it can be deployed because it looks good to me.
0,It is in good written.
0,"Yes they added test cases, thouth the coverage decreased. But I think most of our issues are causing decreasing too."
0,It works fine.
0,Well done ! Keep going and make it better next time
0,Yes they added new code.
0,They passed it.
0,I think so.
0,Really good and clear writeup.
0,"Yes, it works."
0,"Yes, they did."
0,Looks good to me. They do not have bad code style and DRY problems etc.
0,"Yes, it was."
0,"Yes, it did."
0,"The writeup is well written and is easy to understand,"
0,"Yes, it works as intended. Everything seems fine when I test manually."
0,"Their test coverage decreased. In 2nd round, they didn't add any test, so the coverage remained same as round 1."
0,"Yes, they pass in Travis CI."
0,Their code follows DRY principle and is clean enough to follow.
0,Yes they add new commits in 2nd round about comments.
0,"Yes, it's ready to be merged."
0,The document is good.
0,"yes, their new features worked since the first submission"
0,no. there's no test. the coverage decreased.
0,"Yes, they passed the build in Travis CI."
0,2 new commits.
0,Their code is good.
0,"Yes they eased out the ""Purpose and Scope"" section of write up which was previously confusing as been pointed out in my previous review and they added some background as to what is score report. So overall it is now easy to follow."
0,"Yes, I thinks it is ready to be merged as they have fixed previous bugs and the code is easy to follow for future students."
0,Yes everything works as expected.
0,Yes all checks were passed.
0,"Yes, they did commit and add necessary comments suggested on previous review."
0,Yes they have improved code by adding more comments to it.
0,Works as expected
0,"No, automated tests are missing"
0,PR does not contain any method
0,the test coverage has decreased.
0,"Yeah, It contains the required info."
0,Nicely written and documents all the relevant info.
0,"WorkYes, the write is quite self-explanatory and describes what the PR is trying to achieve. Work is majorly related to UI, so no standard design principle can be applied here."
0,Yes all the functionalities work pretty well as expected.
0,The got some UI testing for their project
0,"1. no;  2. no, their code is for views,  no method involved 3. more comments would be helpful, but their code still understandable, cuz most of the code is for the layout of the pages;  4. yes their code follows the Ruby Style Guide;  5. code seem DRY"
0,the names are all reasonable and understandable
0,"The test section is understandable. Since the team only changes the layout of several views, there is not much pre-conditions needed, their testing section is enough to follow"
0,"The writeup is clear and easy to follow, I totally understand what the issue is and what they have done for their project. I would recommend adjusting the size of the screenshot on the writeup page to make fit the browser."
0,"Yes, the review report function works as intended. But the problem statement also says that they have to build a functionality for users to search between reviews. I do not know whether this is a mandatory or an optional functionality but either way, I do not see that implemented in the write-up nor in the video."
0,"As far as I know, UI is generally not tested by any testing tool. The test plan of this group describes a sequence of tests to test the UI which I think is good enough to check that their functionality is actually working properly."
0,"They have made changes mainly in the .html file. Hence all the components that they have added like the warnings, the tabular format and the supporting css functions, all seem necessary. No function is too long and the code follows standard HTML style."
0,"I could not see any comment given in the html file that they modified i.e. in team_users_popup.html.erb.  But the file itself is very intuitive.
They have given a comment in the grades.scss to indicate what the class .grade_circle is for."
0,"All the variable names like scores_round_, max_score_round are intuitive and short. I cannot see any change that uses wrong naming conventions. In fact, they have followed the standard html code construct everywhere."
0,"They have modified only the UI of the application. They have made changes in the .haml and .css files and hence their test plan includes a sequence of steps to test the UI. I followed those, they are pretty clear, and the UI seems to be working very fine."
0,"Yes, the score report and the review report have been combined to give the same basic UI to both these functionalities. Because of its consistency, they chose the student UI to be the base template. They write up is really detailed and the screenshots make it easier to understand the before and after scenarios."
0,"Yes, the write-up was the first thing that I read and I could immediately identify the current scenario and the expected scenario. Screenshots made it easier to understand what they did. The write up was neatly written and in detail."
0,"Yes, the test plan works."
0,"Since the problems are fixing view, the tests are UI test and are complete enough."
0,"Yes, the team added comments that are necessary."
0,"Yes, the test plan look complete enough."
0,"Yes, the explaination is clear."
0,Seems to work from what I can see.
0,No tests really added here.
0,"As far as I can tell, there would be no additional test plans or edge cases. Its just a simple view update."
0,"Yes, the said functionality is working."
0,"Most of it is html code, so not all of the ruby principles need to be checked."
0,"Yes, the variable names in the html files are fairly relevant. For example info, warning, etc"
0,No new methods have been added
0,I am not sure if this can be automated in some way(there is no automated test) but it gives steps for a manual test which works perfectly fine.
0,"Yes, the writeup clearly suggests what and where the issue was and changed code blocks are appropriately added."
0,The features work correctly.
0,"Eventhough no comment here, but the codes are very to follow. Well done :)"
0,All well done
0,Yes they discussed them in the test plan.
0,The naming and functions here are good written. But the test coverage decreased as same as most other students.
0,Writeup is very clearly and easy to follow. I can understand what the projects does and how the project does what it does.
0,"Their writeup explain very clearly, good job !"
0,Yes they indluede the test plan part.
0,Looks good to me.
0,"Yes, there are."
0,The coding style looks good to me.
0,I think they have.
0,Works well.
0,"Yes, they does."
0,Really clear writeup.
0,"Yes, looks good to me."
0,"Because they didn't change the layout of the view, they converted the view file from haml file to erb file. So they only did UI test for this part."
0,"(1) No function is too long.
(2) No method needs to be split into two methods.
(3) Comments are enough in this scenario.
(4) The code follows Ruby Style Guide, it's clean and easy to understand.
(5) All the codes are DRY."
0,"The names of variables, methods and class names look fine to me. They all follow the principle of naming!"
0,Because they only need to do is to change haml file to erb file. There's no need for them to add additional comments.
0,"Because they only changed the layout of the view, so they test for what they have changed using UI testing."
0,"Yes, they explain what the problem is here and how to deal with that problem. The write-up is easy to understand."
0,The writeup is well done. It explained the work very well and it is very easy for me to understand what they have changed in this issue.
0,"Yes, the new layout of review report looks more beautiful than before. And I need to say again that, they only change the layout of the view so there may not any edge cases."
0,"They only test from UI testing. But they explained why they chose these. As they only change the layout of the view, so the automated test may not works or them."
0,"(1) Their function doesn't need to change the function
(2) Their function needs no separate methods; 
(3) The comments of scss style seem practical for the code;
(4) Yes, all code follows the Ruby Style Guide
(5) No, all code is DRY."
0,"As they only changed the view and scss files, and they didn't change any methods in controller. So they didn't add comments for methods. But they actually add comments for the new scss style. Good."
0,"Yes, all their methods look reasonable."
0,"Yes, they explain how and why they did the work in wiki. And they used DRY principles during their coding process."
0,"Yes, they explained why they choose UI Testing and give"
0,"Yes, their wiki document seems clear and adequate. I can know why they finished this function and coding process."
0,The changes are not commented thoroughly.
0,Yes the names are very easy to follow
1,"Overall, they have included all the necessary steps in the test plan to test the changes easily. There is one scenario which could be included in ""Test UI for Student Login"" section which shows reviews which are given by the student to particular team :-

Click ""Other's Work""
Click ""View""

Then they could compare that view with the view they changed for review report."
0,Yes they have explained all the things related to the work adequately in write up.
0,"Yes, the test plan is there with a scenario."
0,"Yes, their test plan is very specific, they will really test the functionalities."
0,The document includes a well defined test plan using Rspec covering possible test cases.
0,"Yes, they included a test plan in the second round with a cursory overview of how they'll be using RSpec tests"
0,The test plan specifications are quite reasonable and cover pretty much all the scenarios.
0,"In the previous review, the team was missing test plan. Now, they have come up with an extensive test plan which looks great."
0,"Yes, the team has done a very good job of describing the test plan thoroughly."
1,"> Test plan has been provided in the the design.
> RSpec test details have been mentioned for the scenarios.
> I would also suggest adding some negative test cases.
> The mentioned tests will test the functionalities properly."
0,"As compared to the previous version, they have added a solid Test Plan and have also mentioned the plausible files affected. This time they have identified the cases in which testing will be required and described it in detail."
0,There is an elaborate test plan for Rspecs. UI testing plan is missing.
1,"Yes, the team explained the scenarios where the bugs exist and the test cases they are going to cover for each of the issue very clearly.
Looks like the test cases will cover the bugs they are going to fix.
But since, there is a new addition of column to the model, test cases for that needs to be written carefully without breakage of code. 
Otherwise, everything is fine."
0,Enough test cases are written under the test plan to test the given functionality.
0,The team has not mentioned anything about the testing or the test plan.
0,"Yes, the sequence diagram is describing the proposed changes."
0,Maybe it would be better if you add more diagrams in your 'Design - The Gruby Details' part.
0,UML diagram/Sequence diagram describes the flow of the project appropriately.
0,I love the way they've used the sequence diagram to illustrate the entire process.
0,"There is no class diagram in the wiki document, however the sequence diagram is quite helpful in understanding."
0,The sequence diagram presented in the documentation properly explains the approach.
0,Th sequence diagram provided very clearly explains the flow of control throughout the life cycle of the feature that the team will be working upon.
1,> A sequence diagram is added however it has not been explained. Without the explanation its a little hard to follow through at first.
0,"Like before, they have kept the same sequence diagram (which is good because I had given it 5 stars in the first review too.) It is really self-explanatory. It covers the cycle right from creating a conference type assignment to sending the link to authors and letting them add co-authors. It covers the entire functionality needed."
1,The team has done a good job on depicting flows in the sequence diagram. The DB interactions could also have been graphically explained.
1,"The wiki page is mostly theory which in fact conveys the point the team is intending.
There is a sequence diagram indicating the flow which is kind of hard to follow. May be a better diagram can be given like use case etc for clear understanding of the reviewers at a glance.
Also, the diagram states the flow and not the changes to be made to the system."
0,"Only sequence diagram is described as part of visualization, however, the sequence diagram is very descriptive."
0,"Yes, they use a sequence diagram to show their logic, it's simple and easy to understand."
0,"Yes, the design is simple."
0,The design appears to be simple and logical.
1,"Yes, the design appears to be to the point and logical. However, as mentioned in the first round, I think big changes like ""bypassing approval from instructor"" should be decomposed into smaller ones"
0,Yes the design appears to be simple. They have properly explained the  changes to be done and also the files associated for the same are specified.
0,The design is simple and straight forward.
0,"Yes, the proposed plan is simple and very clearly explains the changes that the team plans on doing."
0,- The design seems to be bit complex as the team plans to bypass instructor approval to add new co-authors on the assignment
0,"> Yes the design seems to be simple.
> The changes considered seems to be minimal and most optimal.
> Also it has been explained very well in the documentation which is appreciated."
0,They do have many nested conditions but this is a part of the problem statement itself. I feel that this is the best that they can modularize it without making the code too complicated.
0,The design is fairly simple. The flow where co authors already have an account is missing from the sequence diagram.
1,"Looks like the issues are a bit intricate. Take time to understand the requirement itself.
Since, it is needs thorough understanding of the account creation, instructor activities, then author activities etc. the changes proposed may touch several files in Expertiza.
Also, there is an addition of column to a model which means there will be migrations involved. So, design will not be simple I suppose.
Better test cases should be written for a fine work."
0,"The explanation is given in steps it is easy to understand. Also, the explanation is reasonable and comprehensive and easy for the reader to follow. The design appears to be simple."
0,The design appears fine.
0,The design appears to be sound and follows appropriate design principles.
0,They did not write what their design pattern is.
0,"Yes, the design doc seems to be sound and follows appropriate principles and patterns to describe how the team will be addressing each of the issues."
0,Yes the design appears to be sound and seems to follow appropriate principles.
0,Well constructed design.
0,"Yes, the design appears to be sound. However, no specific patterns have been used as such."
0,"> The design does appear to be sound and detailed enough to cover all the requirements.
> However it seems to follow the principles and patterns but nothing has been explicitly mentioned about it in the documentation."
0,"Yes, their design seems to be good. A good description of the problem statement and the proposed solution. The design proposed appears sound."
0,"The design seems okay. However, like I pointed out in the previous review, a new co author will be assigned as a student which doesn't seem right to me. Maybe the team has spoken with the mentor and decided to go this way. It is also possible that the team has been instructed not to create a new role. I have rated accordingly."
0,"The design is clear. There is no code snippet included which highlights the location the team is anticipating the changes.
Cannot comment on the design patterns/principles followed by the team as nothing of that sort is discussed on the wiki page.
But anyway the changes proposed seems reasonable."
0,The design is decent.
0,"Yes, file names are there to be going to change."
0,"Yes, they adequately explained the changes to be made to the system."
0,The authors have explained the changes made to the project reasonably well.
0,"Yes, I think the changes proposed by the authors are well thought of and adequately explained."
0,- The doc adequately explains the changes planned by the team
0,"yes, the proposed changes to the system are adequately explained."
0,Very well explained. I see no issues.
0,"Yes, the authors have done a really good job of trying to explain the flow and the changes that will be required to incorporate it in the existing system."
1,"> The proposed changes are pretty well explained.
> I would have appreciated a bit more explanation to the sequence diagram.
> Also the files to be changed could also add a section for what exactly needs to be tweaked in that class for covering the required functionalities. However, the explanations are overall good."
0,"Yes, at first glance the problem statement itself seemed complicated. But they have broken down the problem into 3 subparts and have explained each individually. They have given an overview of the changes required for each of these parts which makes the flow of the system clear for me."
1,"The changes have been explained in sufficient detail. The file changes section mentions coauthor, that could be rewritten as coauthor (role = student) as the team is essentially just creating new students and not coauthors (this role does not exist)."
1,"Yes, the team has clearly stated the changes they are going to make. 
The requirements they are going to work on and the test cases they will be covering is also stated.
The new additions to the model or the fixing to be done in the existing code files is also explicitly stated.
May be including the code snippets where the appropriate changes are anticipated would give a more clear idea.
Otherwise the intention of the team can be clearly seen."
0,"Yes the code passes travis test,comments are provided where they are needed and code is dry enough to pass for production ready code.So i would recommend."
0,Yes the writeup is well written but as i said in previous round they only added screen cast of 1 st issue not of other two;
0,Yes the project works well.
0,The team has added test cases although the test coverage has decreased.
0,Yes thepull request has passed Travis CI build test.
0,Yes during 1 st round I found that there are not enough comments for the code written but that has been improved. So the code written is of good quality.
0,"Yes, as majority of the changes are done in the views of the pages, no major changes are made in any functionalities. So, can be deployed."
0,Writeup is well detailed and precise.
0,Test coverage decreased to 24.297%.
0,Travis CI passed all the tests and no conflicts need to be resolved.
0,The write up is good and can be understood easily. They have listed everything properly and in orderly manner.
0,The functionality works as intended
0,The team added a single test case and has suggested to check the functionality in the UI. The code coverage has decreased by 6.2% and as only one test case was added there is no significant improvement in the code coverage.
0,Yes the travis CI for the project passes and there are no conflicts.
0,All the features are working as intended.
0,"The update has test cases which are passing in the build, however, the test coverage does not increase."
0,The new pull request is passing in the Travis CI with no failures.
0,No new commits were made during the 2nd round of review.
0,"The code is well written, adhering to all good coding practices."
1,"The writeup is good, but it can have less number of screenshots. I don't find significant changes done from the first review."
0,"On following the link, it does not work correctly for step3. On clicking view submissions, it does not work correctly for it."
0,"Yes, new code was committed during the second round."
0,"Yes, it follows DRY principles."
0,Ready to be merged but Travis CI not passing
0,No new commits
1,"1) Maybe some UI based testing is required for issue realeted to missing header
2) and some more rigorous test related to dropdown menu
 
Otherwise it is ready to be deployed"
0,"1) Yes, there issue is related to UX, and after resolving issues, it works as intended."
0,"1) Yes, new code commits are added.
2) they added new test cases which is related to view assignment name on top or on content page"
1,"- Too many commented lines of code in the PRs. This PR needs refactoring before being merged to avoid the future task of refactoring.
- I am not too confident about adding another column like use_dropdown_instead I suggested in my previous review to get rid of DB changes as another column dropdown is already available. They also didn't explain the need to have this redundant column.
- The name with postfix instead is confusing as it suggests that there is another column like do_this for which they have do_this_instead
- Also, the column name should be a noun"
1,"- It works fine.
- Just a small suggestion, in the show header issue they can do some string formatting to make it more visually pleasing. Eg: instead of show new2 they can camelize and add spacing `New 2`"
0,"The code is almost ready but Fix Issue #1312: Assignments with “Use dropdown instead” cannot be saved is not working
I remember this working in the last round so i'm not sure why it is not working anymore"
0,The write up is very good and easy to understand
0,The team has added 2 test cases but one of them is commented completely
0,All of the checks have been failed but there are no conflicts with merge request
0,There is only one new commit
0,"The architecture of their wiki page is clear and easy-reading. In the first round, I recommended more instruction of design pattern, and they did make corresponding improvements."
0,Yes. It work as intended.
0,No. The build didn't pass in Travis CI. All check were failed.
0,"I didn't see any problem in the first round, neither in the second round."
0,"Yes, the code is good to be merged"
0,The write up is thoroughly
0,The UI works fine
0,Test cases added
0,Yes it passed
0,The code is good and dry
0,Yes the authors feature work well.
0,No they have not written any test cases
0,the variable name are well written and method names are also self explanatory.
0,"Yes, the test plan looks alright."
0,"Yes, the writeup is written very well and they have explained why they did what they did."
0,Yes thee writeup is written clearly but the screen cast is provided only for 1 mini task they solved not for other.
0,The code is sufficiently commented.
0,"The build passes completely on Travis CI and codeclimate.
Code coverage decreased to 28.97%."
0,Test plan is very robust.
0,Yes the names are intuitive and easy to understand.
0,The changes were in the UI so the test cases were not present.
0,the document is very well formatted and clear. Everything is easy to understand.
0,Write up was very good and I was able to understand all the stuff.
0,The features work as intended.
0,Functional test cases are missing in the writeup.
0,The code meets all the above five requirements.
0,"The build is passing , however the test coverage has decreased to 26%.
The variable and methods have been named aptly and are suggestive of the functionality."
0,The writeup does not include the Test Plan. The test cases for the functional testing are missing.
0,"The writeup describes the issues and its fix in a great detail, along with a snapshot of each. This is by far the best writeup I came across."
0,The writeup covers the issue and its fix in full details.Reading the document made the issue and its fix more easy to understand.
0,Edge cases handled perfectly
0,Code written nicely
0,Comments for each method mentioned
0,Naming is intuituve
0,Does not include a Test Plan section but includes a Testing UI section
0,"Yes, it explains everything briefly"
0,Well explained
1,methods are concise. just add test for DB changes
1,"Methods like change in drop down model are self descriptive.
But still giving description would be better."
0,Yes the write up is descriptive and well formatted.
0,"- The code was not working but it looks like it was not due to any file they changed.
- I really liked the way they solved the 'p' tag issue. They probably read the documentation of that plugin and used the available options instead of creating their own functions and monkey patching things."
1,"- It needs more comments on what the line is doing.
- Added new column in the table which should have been the last resort for an app already running on production. There is a column dropdown that has a boolean value as well. They should've tried to use that field only and try to fix the issue of why it was not working. Instead, they added on to the code.
- If there was a reason which they faced while using the same column they can write that in the wiki for future reviews."
0,"- Very well written. They have added links to the actual issue on the expertiza which helped me understand the issue better.
- Added screenshots which makes it easy to understand."
0,"- Well written writeup
- I liked that they added links to the main issue on expertiza page as well.
- Added screenshots and explained their approach well."
0,"For most part functionalities work just fine, but when i clicked view submission for new4 the website crashed.
 
I am not sure if this is an existing issue or something induced by the team"
0,"The code written is pretty standard, the only smelly code that i found is that tables have been modified."
0,Team has done a good job of including the comments and all comments are very descriptive
0,Most of the code added uses preexisting variables and ruby coding standards are followed
0,Test plan is descriptive and well written. But edge cases are not included here
0,The write has just about all of the details required
1,The write up contains a brief explanation of what has been done. There could have been screenshots with regards to travelling in the UI as it took me some time to figure out where to go and what to click.
0,Their test works correctly in any situations.
0,They didn't write any code about automated tests.
0,"The variables, methods, and class names in the newly-added code in the pull request is clear and good."
0,"Their test plan is complete. They have considered every pre-condition, edge cases, invalid inpiut values, and other possibilities."
1,They clearly explain how and why their job were done. But they didn't mention anything about design pribnciples or patterns in their wiki page. Maybe they should add some descript sentences about it.
0,They clearly describe their fuction and their solution.
0,Works good
0,Not test cases wrote
0,Not many methods created
0,Names are good
0,Good enough
0,No test plan
0,"the author shows us the Behavior Diagram for Instructor/TA Diagram, which we can clearly know how to track time of the tagging data."
0,"The design is simple and clear, form the approach, the author propose to use `updated_at` in `answer_tags` model for each user to calculate gaps between each tagging action."
0,The design make sence. From their approach I think the solution is doable and also tries to solve the problem.
1,"The authors have done an excellent work of using visual aids for describing the proposed system . It helps in getting a clearer view of the proposed system behaviour. The flow chart however, does not mention about the the changes that will be made to the system. This could have been done using UML diagramd"
0,The authors have well explained the proposed set of changes along with how they are planning to implement that as well as what files would be potentially modified.
0,They mentioned the files they will be changed.
0,The design is very crisp and well detailed. It is explained simply making it easier to follow.
0,The design is sound and provided in good detail. It makes use of the required patterns wherein all the top level sections are all present.
0,This doc has improved since the 1st round. They have taken into account the comments and used them in the system.
1,"No, the design does not appear sound. They first said there have to be metrics to decide if tags are reliable or not but how they will calculate what will be the metric what parameters they are at least considering. I suggest parameters like the time between successive reviews, time spent on the current tab. Also there main emphasis to decide if the metric is reliable or not is ""time"" that still does not fully solved th problem whether the tagger is write or not which is the ultimate problem. I suggest to look at this article https://roamanalytics.com/2018/07/26/on-the-viability-of-crowdsourcing-nlp-annotations-in-healthcare/ Here they used Expectation Maximization algorithm to decide whether the given tag is written or not."
0,It is well designed.
0,Thet indeedly include the test plan.
0,Yes they clearly explain the figures.
0,yes it is very easy and simple to understand.
0,Yes it appear to be sound.
0,Yes. The team added a 'Behavior for Instructor/TA diagram' to show how the feature works and the relationship among different parts. The diagram is clear and helpful for people who is not working on this project to understand the function or relationship among different parts quickly. The quality of the diagram is great.
0,"Since the design pattern is not applicable on this project. According to the diagrams and proposed approach, the design is simple and clear. The team describe the logic clearly through the diagram and the proposed approach."
0,The authors adequately explained the changes. Good job!
1,"Yes. The team has 'Proposed Approach' section to show the plan what will be done and how they are going to do in this project. However, if the team could add more specific examples or modification of code, will make the description clearer, more convictive and helpful to people who is not working on this project. Overall the quality of explanation is good."
0,They did a good job explaining why rspec will not work in this case.
0,The one visualization is clear.
0,"Yes, there are no unnecessary plans."
0,"Under the test plan, it mentions that the graphing feature cannot be tested with RSpec because it requires visual analysis and too many preqrequisites. However, there is very little in the ways of how to do the UI tests. It simply states to test manually, but it doesn't go through the flows of how to test."
0,"The design seems as simple as it can be, as it is just going to add fields on top of the existing classes related to tagging. It doesn't have unnecessary complexities."
0,The behavior diagram in the write-up looks quite intuitive.
0,The design looks simple and the team has done good job explaining it in the write-up.
0,Since no design principles are required but the proposed changes look sound.
0,The changes have been adequately explained by the team in the write-up.
1,They have explained the approach using the a flow chart which explains the flow clearly. They could have added more details about the timer and other things.
1,"Overall, the design proposed is good and nicely structured. But, there are certain gaps that I would like to mention

The design does not much say that what approach/metrics they will use to track time. They just told they will add new fields to track the time but did not disclose further about the number of fields or will they use any existing library functions to track time like ""Time.now"" class or will implement their own class to track time with different helper methods.
Also, what if user clicks on new tab in middle of tagging activity. According to flow diagram this situation cannot be handled as it may happen that user spends less than 3 minutes actually tagging but overall spend more time in viewing other tabs. You could track if user moves to other tab by tracking the focus of the window. Refer link https://stackoverflow.com/questions/10338704/javascript-to-detect-if-user-changes-tab
Also there is nothing mentioned on the reason behind keeping the threshold for 3 minutes."
0,All the changes proposed and corresponding explanations are easy to follow and correctly identified.
0,Yes they have taken into account all the necessary functionalities.
0,They have covered all the necessary sections.
0,The visual aids are good and they explain the proposed solution succinctly.
1,"There are some design decision which I think might make code smelly like the loop in the flowchart to check if is any tag tagged is done in javascript frontend or they check it using querying because that would put a load on the server and will make website slower.
Also in testing they said about gaming the timer like the opening website and doing other work in a different tab. This can be done by checking if the user is in the tab or in another tab.
I found a nice StackOverflow link which might help you https://stackoverflow.com/questions/23690666/check-if-my-website-is-open-in-another-tab
This data might ensure that the user is paying attention to tagging and not using other tab or spending time on other websites."
0,the proposed changes are easy to follow.
0,"Yes, they incorporated all functionality required."
0,"Yes, they get all the functionality included."
1,The syntax can be arranged better to make it easier to read. There shouldn't be any introduction on expertiza. It is better to have UI test.
0,The UML diagrams is easy to understand and good explaination.
0,They made a good plan of changes and modified .
0,It is in good explaination
0,Yes they incorporate all the parts.
0,They completed all the parts in design doc.
0,Yes. The design contains all the functionality that is required in the document.
0,The flow chart is great and easy to see the logic of what they will do.
0,More effort should be expended on the design. The explanations were vague. I don't have a good understanding for how it will be implemented.
0,Diagrams looks good to me.
0,"The explanations are good, clear and adequate."
0,Looks good.
1,I liked the high level flow chart because it helped me understand the flow of the system with tracking the time students clicked through tags. I think it would be useful to add a UML diagram. This would help readers better understand the class level design.
0,"1) Looks like they have found the classes to be changed.
2) I don't think the new design will make the code look smelly.
3) The new design cannot be solved by any gem as far as my knowledge goes.
4) The new design may increase the response time of the system since timers are activated and saved all the time.
5) More efforts will be required to implement this design."
1,"Just one paragraph has been written regarding implementation of all the functionalities. It would have been better it this was better organized. Also there is no mention for how these functionalities will be implemented, just a vague description is given. Please mention any design principles or some logic for it."
1,"The design document can be improved significantly. The project purpose has been copied from the project description document, the design can also be improved by including detailed plan behind the solution. A detailed plan can also be given regarding the Test Plan."
1,"I think the image for showing what files need to be changed is unnecessary, you can juest type it, and maybe you can add some visual aids along with your ""Design - The Gruby Details"" part."
0,UML diagrams describes the flow well.
0,The sequence diagram is added.
0,- The team has used sequence diagrams to explain the flow of their new implementations which make understanding easier
0,Excellent use of the sequence diagram to explain the flow!
0,The aids provide good amount of information. I am not sure in a sequence diagram if we can work from right to left. The communication between coAuthor and controller is from right to left. Please check.
0,The sequence diagram included helps to understand the flow clearly.
1,"> Sequence diagram has been added as a visual aid and is detailed enough.
> I would have appreciated some use cases, database design or class diagram too.
> The only diagram added seems to follow the conventions."
0,"They have provided a sequence diagram. It sequentially describes the flow of the system, and it easily helped me understand the functionality that they are going to implement. The diagram is really good and self-explanatory."
1,"The given diagrams make sense, however no UML diagram has been provided for the DB and the relevant tables."
1,"-The team came up with a sequence diagram. It indicates the flow between different entities. But it is pretty difficult to understand what the entities are.
-May be a better UML diagram can be included next time like the use case diagram for more clear understanding of the reviewers.
- Including of pictorial depictions makes it easy to understand."
1,"There's a sequence diagram alone, but is pretty detailed. However, a diagram related to the DB design should also be included."
0,A sequence diagram has been provided which is useful and is easier to understand.
0,I think they did not specified what design pattern they would use.
0,The new design seems fine.
0,"1) I think they have mentioned the appropriate controllers for the proposed changes 
2) To early to judge
3) The new design doesn't seem complicated but the project is vast enough to make things complicated so the team should be careful
4) No, I don't think the new design will increase the response time
5) Not needed"
1,"- I see that the proposed solution allows adding student bypassing approval from Instructor
- This seems bit unsecured as the instructor may have no control on whom the author adds as a co-author, checks must be in place to verify if the co-author added belongs to same course"
0,The design and implementation plan looks fine.
0,The design does not look like it will make the code smelly. It is well thought especially the part where co-authors' emails will be recorded so that only the intended people can join the assignment.
1,"1) The classes mentioned for changes seems to be appropriate. However, I would have appreciated more text describing the change and the need for it.
2) I don't believe the new design would make the code ""smelly""
3) Design doesn't look complicated
4) The new design would server the functionalities required but I don't see the reason behind any performance improvement yet.
5) A bit more granular detail on the changes proposed to each file would be appreciated."
0,"A good thing is that they are thoughtfully adding new methods in the appropriate existing controllers and views, unlike what the previous team had done. I feel that the methods that they have suggested (which are not a lot), seem just enough for the functionality to be implemented without making the code too complicated."
1,"The proposed changes plan to add coauthors as a student which is probably because all the student methods are supposed to be used. Instead, a new subclass that inherits from student can be created and used for the proposed changes."
1,"The team gave a high level understanding of what they want to add and in which location. 
But could not get what they want to add in terms of code perspective. Is it the controller/view/model they want to add or just the code tweaking etc. Not able to comment on it as it needs some more clarity."
0,The reason of doing code changes in StudentTeams controller is not justified properly in the document.
0,No designs have been proposed by the authors.
0,They clearly stated what files need to be modified.
0,Proposed the changes with good explanations.
0,The authors have explained the proposed changes covering all the issues that need to fixed.
1,"The changes proposed by the team are well thought of. I think some big changes like ""bypassing approval from instructor"" should be decomposed into smaller ones"
1,"- The changes proposed are explained efficiently
- Some features such as creating account if the user is not yet registered, seems to be implemented already and I believe should not be included in the scope"
0,Thre was adequate explanation on what changes the team wants to do.
0,"The explanations were pretty clear for the most part. However, there was some repetition which can be avoided."
0,"The authors have given an in-depth explanation of the proposed solution right from the files to be changed to the sequence of actions. Each file to be modified has a corresponding elaborate explanation. Though, they have not mentioned any test file that will have to be modified/at least affected, in this process."
1,"Most of the changes proposed seem fine.
However, when a coauthor doesn't have an account, he will be redirected to /users/request_new?role=Student according to the wiki, the role for coauthors should be different than a student."
0,"-The team listed down what needs to be done and where they will be changing based on the tabular column of their wiki page.
-But Not sure whether this base functionality exists and the team is building upon it or is it a complete new enhancement.
-The wiki page is of complete theory which makes it difficult to grasp quickly what the project is about."
0,The existing changes are explained in a decent manner.
0,The authors did not seem to have proposed many solutions as they could not be understood very well.
0,"I think that this code is ready to be deployed onto the production server for the OSS project
I do not have any concerns about the project.
The project need not be redone from scratch using a different approach or picked by a different team. As it is a refactoring project & the team has already done all of the work required."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
Test plan has been thoroughly covered with all the screenshots.
Before & after code has also been added with the required explanation and need of the changes done."
0,"The UI works as intended.
The features work exactly like they are supposed to.
The newly added test cases work correctly and pass as well."
0,"The Build passed in Travis CI.
There are no conflicts that need to be resolved."
0,"No commit was added during the second round.
No new code was added."
0,"The code is well written.
The authors have renamed functions as well as variables to match Ruby's standard requirements. They have made corresponding changes in the spec files as well.
No new code has been added in the second round, so as such there has been no improvement in the code in the second round."
0,"- Most code is same functionality refactored and as all the tests are executing, it is ready to me deployed on the production"
0,"- The documentation is explanatory and describes approaches taken by the team
- Lots of additional details like the Work plan and flowcharts reduce focus from main changes made by the team"
0,- Yes the changes work as supposed to
0,"- The team didn't add new tests as the project was refactoring based
- The tests were moved to correct files as part of refactoing"
0,- The build is passing in Travis CI
0,- Not many changes were done after first submission deadline
0,- Code follows many good coding principles
0,Good to deploy.
0,The writeup is descriptive.
0,Tests are added and covered with the code changes.
0,No code was added.
0,"The team had added test cases in the past, but the coverage didnot increase."
0,the code is  well written
0,"yes, the existing code works well"
0,tests are not modified to reflect the changes made.
0,No code was committed during the 2nd round as there were no changes required post the 1st round
0,"Yes, the build passed Travis CI and there aren't any conflicts to be resolved"
0,"Yes. Since it's a refactoring project that has been tested exhaustively, I think it is ready to be deployed onto production"
0,The code was very well written I was not able to find any problems with it.
0,No new commits were added as they did all their commits in round 1.
0,"Yes, this is an expertiza refactoring project and the Travis CI build is passing."
0,"This is a refactoring project and the link provided for the deployed application is not working. However, they have very well explained in the wiki the changes they have made and have also added appropriate screenshots. But I am still not sure about the functionality as I am not able to test it."
0,I found the writeup very helpful and informative. All appropriate screenshots were added. Good job team.
0,Includes detailed test plan.
0,"Yes, the wiki page has a design section that includes both RSpec tests and Manual UI tests. The RSpec tests state what scenarios will be covered by the tests. These cover multiple, deep paths through the system, such as non-zero weighted scores and zero weighted scores. The UI tests check the same scenarios, but give instructions on how to do it. They do a good job of giving these steps in a concise way."
0,"Yes, they write their test plan. And it seems like it will cover most of edge cases."
0,"Yes, they have added test plan mentioning new test cases they are going to write and how they are planning to do manual testing too."
0,The test plan describes both the automatic test cases in Rspec and the manual testing instructions in detail for the four issues recognized.
0,An elaborate testing plan for Rspecs and manual testing has been provided. Tests don't seem shallow.
0,The test plan is good and it does cover all the cases.
0,Yes it does include the test plan
0,The test plan is really good. Giving specific steps on how to test the project.
0,The design document includes their test plan. There are tests with RSpec and manual testing. The test plan covers the functionalities they plan to add.
1,"The figure show the flow of ""review update and notify reviewer"" clearly.  But it seems that there should be a line between the ""Author"" and ""Review"" since the author can see reviews related to the work."
0,The class diagram does not show that much amount of detail and is not very informative.
1,"The user diagram could be made easier to read, in my opinion. I believe leaving feedback on it in round 1, but I cannot specifically recall. The numbers can be quite confusing and the way it is structured (visually) makes it clunky to read - not to mention the graphics themselves could be done much better in a program like lucidcharts or draw.io."
0,The visualization is good and understandable.
0,"The uml diagram aptly describes the impact of user actions on different entities involved: assignment, email and review."
0,"The team has explained the flow adequately using a flow diagram. Also, there are some UI snapshots for one of the functionalities (Email preferences - again don't know why this is being done) that shows how will the app look after the changes are made."
0,It's a fairly okay work
0,"Yes, their graph is easy to understand."
0,"Yeah, they have added the mock UI screen of expertiza pf how their changes are going to get reflected in expertiza, which is a good thing and they have also added flow chart to explain how sending email notification functionality will work when there are new submissions."
0,They have used diagrams appropriately.
0,Yes. The design is as simple as possible.
0,"Yes, it is as simple as possible"
0,Yes they have kept it as simple as possible
0,The design is simple and clear and the approach is proper.
0,"The proposed design appears relatively simple. The team has explained the new code changes required to generalize the review versioning, which involved adding new functionalities and testing the associated features with the rspec testing tool."
0,The design is fairly simple. I don't understand how the email preference css change is relevant to this project.
0,"Yes, the design appears to be simple as it clearly mentions the flow if user actions and how it impacts the entities: Assignment, Submission, review and email."
0,Yes it looks good
1,"Not very simple. In order to make it more clear to others, they provide much information about their issues, plans, tests, designs and so on.
My suggestion is that maybe you can make it a little simpler though it is good enough."
0,The design given in the document looks simple and clear.
0,"The design seems very simple, they are only modifying files directly associated with the functionality they need to implement. There doesn't seem to be another way to implement this that makes it more simple."
0,Their design is reasonable and follows appropriate principles and patterns.
0,Yes they have not localized the changes to be made but it is a good design
0,Yes the design is good and understandable.
0,"The team has done quite a good task in making the documentation. All the aspects have been covered pretty well. The sections for problem statement, proposed code changes and test plan have been drafted well."
0,The design does appear to be reasonable.
0,"Yes, the proposed solution section contains the strategy to rectify the problems and is well backed up by UML diagram which explains the entity relationships."
0,Yes fairly good
0,"* NOT RELATED TO REVIEW: DISCLAIMER: I have reviewed this Page in review 1 and when prof started review 2 mistakenly i started to review this page again, so i think because of that i was not able to see my review 1 comments to compare too for review 2 also, i think it is because of the issue came in review 1 last day. Piazza issue @445 .  Just wanted to mention that i have review this page 2 times**
* REVIEW ANWER* 
Yes, Design appears good to me Requirement is not that complicated and team is making changes using the completely appropriate files. Although i am not sure if they are following any particular design patterns been discussed. Design remains the same after review 1."
0,They have given use case diagrams to help understand the system.
0,"Yes, their doc is very clear and easy to understand. 
They have everything and their logic is clear."
0,They listed the files and methods to be modified and methods they plan to add. And they described how they plan to do the work.
0,They are yet to localize it .
0,They have explained every change with best possible clarity.
0,The code changes as well as the visual changes required in the application have been appropriately stated by the authors in the documentation with the help of use case diagrams and test plan.
0,The team has segregated functionalities and tagged files to be changed with each functionality. This makes it easy to understand what's going to happen where.
0,"The authors have adequately explained the interface, quality portability and performance requirements. The proposed solution covers all the issues recognized."
0,Yes it looks adequate
0,"Yes, they explained every proposal changes they plan to make."
0,They don't have a dedicated section that states the changes they are going to perform.
0,All the diagrams are well given and they do follow the semantics.
1,"There could be more visual aids, honestly. They describe a lot of stuff thoroughly about the existing design but having visual indicators would be helpful to those less familiar with Expertiza."
0,UML exists in the doc for the new requirement and there's no UML required for the bug fixes.
0,"UML diagrams are good, precise and easy to understand. All conventions were followed."
0,Photo of the issue and one Uml diagram has been added
0,They explained their plan well and clear. They wrote about how they would change or add code and what files they would change.
0,Particular sections are been created for each change which makes it easier to see and understand
0,Adequate amount of information has been given for the proposed solution. Team have missed adding the method names in which the changes will be done for the bug fixes or additional requirements.
0,The proposed changes seem fine. The changes proposed for the email functionality can be removed.
0,It proposes changes in weighted and unweighted scores which seems reasonable.
0,The overall quality of explanation was decent.
0,Team has taken great efforts in explaining the solution pictographically and in writing as well. It looks like team has explored the project and found out the files that contain methods which are going to be helpful. It looks like team has given information that is all over the place.
0,Adequate Explanation
0,I thought the write up does a good job of explaining the problem and solutions. The diagram of the system from the point of the user was very useful.
0,"The design document incorporate all of the functionality required. The functionality required includes zero-weighted scores problem, non-zero weighted scores problem, and review update problem. They are all included in the design document."
0,"Yes, they get all functionality included."
0,"Yes. Team has covered all the required functionalities in the design and requirement section of the doc. Also, i could see few additional functionalities which is not part of the project based on the project description. So glad to see that they have taken additional functionalities to contribute more."
0,Yes it does include most of the functionality required
0,"Yes, they have incorporated all the functionalities. However, they are not sure if non-zero weighted scores work properly or not."
0,"All the given functionalities have been covered in the document.
However, there is an extra functionality that the problem statement does not include - Profile Email Preference"
0,"Yes, all interface, performance, portability, quality requirements are covered."
0,Very  clearly explained
0,"Yes, Team has incorporated all the important details like what files needed to be changed, optimising the solution, test plan. I would also like to appreciate teams efforts in explaining the problem in greater details. Flow charts helped to understand the problem. Team has mentioned about test cases that they will write newly to test the functionalities."
0,Complete Functionality
0,"Their design document includes problem statements, their plan of work, and their test plan. The test plan includes test in RSpec and manual testing. Their design document is organized and includes all the things required."
0,It seems to be pretty complete. Covers all the aspects.
0,The document is complete. Everything is proper. I have added my suggestions above.
0,"Doc is really good. Requirements, design and test plan is explained in detail, even the performance have been given an importance for the project."
1,I think the authors should include a separate design section in the wiki page.
0,"Overall, it was decent."
0,"The wiki has a section for purpose and testing plan. The proposed solution section acts as the design section, as file changes are discussed here. I think the document is quite thorough. I like how it broke up the design based off of each piece of functionality that needs to be added."
0,Design doc is complete
1,"They add a visual aid to their profile email preference problem to explain how it works. It is clear to understand. But I think a line between ""Author"" and ""Review"" should be added since author should see reviews. And they can add visual aids to their other problems to explain their plan more clearly."
0,"Yes, the design incorporate all of the functionality required."
0,Good use of UML and Design Diagrams.
0,UML Diagrams were informative.
1,"very detailed URL diagram;
but seems the use case diagram is unnecessary, since the data flow diagram already include all these steps."
0,The points explained in the Goal of the project are more of a problem to be tackled with than a proposed solution.
0,I think so. It does.
1,"need to add files which need to be modified and added;
test plan should include more details."
0,There are regular commits throughout the project duration
0,The extra credit features have not been implemented.
0,Yes the team kept committing their changes throughout the project phase. Also the round 2.
1,"I think there are a lot of controllers defined, they can be cut short by enforcing policies or restrictions in the same controller or view itself. And not very DRY"
0,"Library relationship
Book history relationship not clear"
0,Yes they have test thoroughly.
0,Yes they have the right relationship
0,Yes they are keeping commit
0,There are commits primarily on 2-3 days only. So code seem not to be updated regularly but again it depends on the developers how frequent they prefer to commit their code.
1,"There's no separate login page for admin/librarian/student. But other pages looks pretty neat and clean, though styling has not been done but i think that's something which can be considered later once the functionalities are required."
0,Team has very actively pushed changes throughout the project period.
0,Seems like the books functionality is working great. Tests seem not to be implemented though.
1,"UI is simple to use, but due to lack of formatting, I am facing issues in understanding which link belongs to which record. Kindly change the formatting to bring a better impact on the user."
0,The team has pushed most of the code in 3-4 days
0,Team has tested one model and  one controller
1,"User interface is interactive,however the UI can be made more clearer look wise and adding labels"
1,"Github changes were regularly made.
 
However, I do not see many UI functionalities for the librarian. Like creation of books is not visible in the options shown on the UI."
1,"Functionalities can be checked in the test case - like - All Borrowed Books can be again borrow, hence giving a negative number. This can be easily detected in the test casees. Hence, testing can help in getting the model and controller function correctly."
0,There are regular commits to the repository.
0,The test cases are covered as part of development and cover basic functionalities.
0,I don't see any test folder in the application
1,"The Codebase doesn't appear to be DRY. Instead of declaring three separate user types, a policy gem could be used to enforce restrictions."
0,"yes, they are keep working on the project 2."
0,No
0,Please add the profile part.
0,"Yes the team has thoroughly tested the admin controller, However I was not able to find the appropriate testing done for any models. Have a look into it."
1,"The user interface is intuitive, however I feel you can use navbar to make your page look more cleaner."
0,The code has been implemented in accordance with the standards and the team has also done testing of at least 1 controller. Kudos.
1,"Most part is good
there are some suggestions: 
1. Add the ""back"" button on the all page.
2. Some buttons and information are duplicated. for example, there are a lot of ""new_user"" button on the user management page."
0,"After I pointed out that there lacks the interior logic behind why they implemented as what they did, they made an update to the wiki page, which now contain the depicted project scope explaining precisely how the program works and what is the logic behind it. Thus the documentation now is complete and detailed."
0,"During the second round, they did not added new test. They mainly focused on issues about other objects and further functionalities."
0,Ignore.
0,"They have named everything properly and reasonable. However, there is still few comments in their codes, which I actually do not know whether it should or should not be like this."
0,The project is already merged.
0,Write up is good and everything can be understood. They have developed the documentation which is comprehensive and understandable.
0,Yes the build is successful after following the steps described in document.
0,Yes the commits were added after round 1.
1,"One PR is already merged and the other PR is having some issues. But since the team is having constant interaction with ""jdm"", I hope they will be resolved and it will be merged soon. If they are not able to do it, I suggest team to take these issues to the final project and complete those steps along with the subsequent steps of the project."
1,"The system operation cannot be tested from UI because this is a Mozilla Project. Their project was to fix/modify/add code such that WebAssembly programs can be compiled asynchronously. One of their PRs is merged there are positive comments on the PR which is not yet merged. This shows that the features are working as expected. However, the PR maintainer ""jdm"" made some changes in their code and it caused 14 test cases to behave unexpected. I suggest the team to review it ASAP and find the reason why those tests are not passing."
1,"Most of the variable names and method names are readable but I suggested the team to change a few variable names like ""maybe_url"" which they have not changed. I feel this must have been their code's requirement to have such variable names. Other than that, variable names and methods are pretty straight-forward."
1,"The writeup is good overall however it would have been much more helpful if the team had included what exactly is WebAssembly and how it is useful in browser engines. Due to this, it was a bit difficult to understand exactly what they were trying to do. Also, the team could have worked more on explaining the code they wrote. It is not possible to understand the code by just looking at it. Other than that, it's proper."
0,"According to their Servo project page, it seems their steps don't require external tests to be added from their side. The Servo team has predefined test cases to check whether new code works or not. Since their tests pass, their code should have the correct behaviour."
0,The team has regularly committed changes.
0,Build not pased
0,Build not passing on latest commit
0,Committed even after deadline
0,The writeup explains the issue and the reason for solving the issue has also been mentioned. The writeup explains the functionality well.
0,They have provided steps to check the functionality and it works as expected. The project may not require any refactoring. The goal of this project was to support compiling WebAssembly programs asynchronously and this goal has been achieved.
0,They did not add any new tests but they have tested the servo implementation against the servo provided automated test suite.
0,"This not an expertiza project, so ignoring this question."
0,There was a new code committed during the 2nd round.
0,The code was written well and they added meaningful comments so it was easy to follow the code. The code had no bad names or long functions in the previous round as well.
0,"Because their pull request has passed the test and already been merged, eveything works fine. And they have made a contribution to this open-source prototype web browser."
0,Everything they wrote was in normal length and followed the normal standards of the whole project.
1,"Maybe implicity is one feature of the servo project, so they did not write down any comments inside the whole block of codes they added. But I still recommand to add some comments as a special reminder in some cases."
0,"Yes, all the function names are very natural and easy to understand. All the names are accordance to the normal principle."
0,"No additional tests needed this time, and they have thoroughly run test-tidy."
0,"As mentioned in their wiki page, all their work focused on the implementation, and they have made statements clearly about what they have done and their changes to the codes."
1,"No long methods.
More comments are needed to explain the functionality."
0,NO comments and no description.
0,Variable names are understandable.
0,"As discussed above, there are no test plans included. Rather some standard tests of Mozilla and a command to build servo is run to test if everything is working fine."
1,"Definitely more comments are needed to make the code more understandable and readable. Otherwise, the code is written using proper functions that are small and task-specific. The language is Rust and not Ruby. So, can't judge based on Ruby Style Guide."
1,"The newly added code is written by following standard practices. The authors did not have to create a lot of new methods or variables. But I suggest changing names of variables ""maybeurl"" and ""maybeSourceMapUrl"" on line 868 of file ""components/script/script_runtime.rs"". This names are not good as per as what I feel. why a ""maybe"" in variable names?"
0,"The test plan is not implemented but the authors have run two commands (""./mach test-tidy"" and ""./mach build -d"") that, as per authors, executed successfully. It means that the code is correct and the changes are passing standard tests and the code is able to get built successfully."
0,The code's behaviour cannot be tested as the authors have mentioned on their test plan page that their code addition doesn't impact the behaviour as it is.
1,Comments are needed which explain what the code does. Other things follow the style guidelines. The methods are short and should be doing what they do.
1,"The authors have properly attached screenshots of the exact changes made in the files along with a brief description of how they added the code. Since the Moz projects don't include writing a brand new file, the aspect of design pattern cannot be commented upon. It would be good if the authors explained the parameters and stuff."
1,"The page is well-written explaining what their project is and how it integrates with the whole of Servo browser engine. They could have simplified the terms so anyone could understand what is web assembly compilation in browsers and why exactly asynchronous compilation is needed. Other than that, I feel they have included necessary details and linked to their project page for more details."
0,No comments present
0,"No variables, methods or class names changed"
0,This section a sequence of commands. Not sure about those.
0,Very shortly given
0,The pull request is on another project
0,"There are no design patterns required in this work, it's a implementation of something outside of expertiza"
0,I have an understanding of what it does.
1,No tests are added and the existing tests fail. I think for your case if the existing test cases pass that should be good enough.
0,The pull request has failed and the test coverage has not increased as there were no test cases written. The variable and method names are good and they followed naming convention.
0,They did not write any test cases but they had the steps for the test plan which looks reasonable for their requirement.
1,The implementation section shows details of the steps as to why it was implemented. They could have provided more description for each step and what the step was doing.
1,Make the writeup more descriptive and add each step and explanation for the step. I could understand what the project was doing but not completely. Add the existing system which improves the understanding.
0,No new automated tests added for the new code.
0,"No comments provided, but the functionalities are descriptive themselves."
1,"The repository definitely needs more comments as I had trouble following the code. However, the function naming convention and size are good as they are."
1,yes there exists UML and such diagrams in the documentation that explain the overview of the proposed changes.The naming could have been a little more relavent
1,"They have added two charts, used case diagram and data flow diagram, into the documentation. Both are necessary for comprehending. However, there needs to be more charts showing UI of related funtionalities."
1,"The design appears to follow appropriate principles and use appropriate patterns. It does so by having a 'Goal to the project' section and a Project Description section, wherein the authors explain what the current implementation of the topic at hand is and how they plan to change it. The wiki also has 2 figures which represent Use Case and the Data Flow diagrams. The design also includes a Test Plan section which gives an insight into the planned testing for the issue."
0,"yes, the class diagram and other figures clearly describe the changes to be made to the system"
1,"yes, the design appear to be sound, following appropriate principles and using appropriate patterns. but test plans can be more detailed and can point the files which are going to be changed."
0,"Yes, the design includes a test plan which covers the different types of tests they will be carrying out."
0,"Yes, proper visual aids have been used to help user understand the flow."
1,"The design appears to be sound and complete. However, no specific design patterns have been used as such."
0,"Yes, it passed in the last commit."
0,Build is passing.
0,The pull request has passed.
0,Yes build is passing
0,yes the travis CI passes and there is no conflict with the base branch.
0,"Yes, the Build passes and there are no conflicts"
0,"1) They have created pull request to beta branch
2) It does pass Travis CI
3) There is no conflict need to be solved"
0,"Yes, it can be deployed. Yes, this is a good starting point for the future team to pick up."
0,Yes it is
0,Good to go.
1,"I think the code they have written is good enough compared to the rest of the code. However, the add_reviews method is very long and if they can separate out some portions of it to make it more modular it would be better."
0,The writeup is clear and complete.
0,The writeup is the best part of the whole project. It is pretty much detailed and well-written
0,It is well written and have improved previous problems
0,Very good write up.
0,Write up is clean.The problem statements and solutions have been suggested with screenshots etc.
0,"The write up was not extensive. It only had screenshots of what they've done. No design, implementation, test plan sections. No description of problem statement or tasks. I have given this comment in the previous round as well."
0,"In the previous review the introduction to the problem was not clear, but now they have changed it and it more understandable for first time users."
0,The write-up is written very well and is detailed
1,"1) They have create a wiki page for their writeup
2) The writeup is not well explained, instead of explain everything in words or work-plan follow, they use a lot of screenshots
3) The code comes with enough logic explanation but no reason for why they do it in this way
4) The size of screenshots need to be adjust"
0,"Link down so cannot check, but it seems to working as the test cases pass."
0,"When i Click on the View score following is displayed
 

SyntaxError in GradesController#view


/home/pmgaikwa/expertiza/app/models/vm_question_response.rb:172: syntax error, unexpected end-of-input, expecting keyword_end"
0,Coverage decreased.
0,"From the commits log, it seems they reverted the tests as TRAVIS CI was failing. The test coverage was reduced from 29 percent to 16 percent by factor of 13 percent."
0,yes but the coverage decreased
1,"The team added has test cases,the coverage has decreased. So,there are not many newly added test cases,so considerable amount of test cases have to be written"
0,They modified an existing test case to get full coverage for the newly added code.
1,"1) They have modified existing tests to suit their implementation
2) It seems they delete more Rspec test than add new ones, also the coverage drops
3) I could not figure out their test's relationship with their implementation since there is no comments at all"
0,No new commit is made.
0,"1) They have been keep working on this project
2) New commits do happen in second round, but mostly committed in first round"
0,The code is great.
1,"Overall the code has been written with ruby conventions.But,there could have been comments included in the code for easy understanding"
0,The code don't have any issues when it is seen in terms of following standards
0,"comments missing in the code, but the documentation covers that."
1,They did not add comments which explained the code. They have some code that has been commented out left in the pull request in the spec/models/vm_question_response_spec.rb file.
0,There are no comments in the code.
0,"I cannot see any comments added in any of the code, probably because they were busy finding the working and where to implement the functionality. This is the area where the team can improve for the second round of review"
0,"1) Though it only fixes bugs with few codes, there should be some comment to help read
2) The comment could be telling what it does and its approvement compared with previous code"
0,It is quite clear to see what the problem was and the proposed solution to address the problem.
0,They haven't mentioned design or implementation details. They only included details aiding the reviewing on the deployed URL
1,Everything is well formatted. Documentation is easy to follow. It was a little tough to understand at the start. I would suggest to to change the introduction because I had to read it 5 times just to understand the what the problem was.
1,"The write up is lucid.
This page http://wiki.expertiza.ncsu.edu/index.php/E1967_:_See_It_In_Action in particular helped me to navigate and understand the requirements in a better way"
1,They have a section called Tests other than Test Plan which did the same thing. The tests section could have been more detailed making reviewers could easily understand the major steps of the test.
1,"Code testing seems to be good. But, they should try to explain and cover some corner or edge cases."
1,The write up does nit include test plan section but does mention the work done. I also think there should be a ending section including the result and various commands to run the environment.
0,There is no test plan specifically written in the wiki page.
1,The Test Plan have been completed and pre conditions and edge cases have been checked but can be improved on.
0,The writeup is good enough
0,It is written well but it can be improved.
1,Write up is a little hard to follow at first. I think some of the sentences such as one in the introduction should be changed so that it becomes easier to understand.
0,Write up is elaborative and is adequate. It is easy to understand as well
1,"Yes, it works well."
0,"yes, the feature works properly."
0,The team has done a good job in completing the features and they work as expected in all cases that i could think of
0,All the features work properly.
0,Everything is working well.
1,The functions are not too long and also the code follows the ruby style.But the code needs more comments
0,Good code
0,Everything in this section is proper and requires no modification according to me.
1,"1) Generally, it is very good, no long function, no too long code, does follow RSG and DRY enough
2) There definitely should be more comment to help read"
0,Its hard to follow the code since it is not commented well enough.
0,"The build is passed but,the code coverage is reduced"
1,"The team has not changed too much of code which is a good thing, whatever code has been added by them follows coding standards and variable names are intuitive, and standard.
 
The only suggestion i would have is, instead of participant = Participant.find_by(id: feedback.reviewee_id) they could have used reviewee= Participant.find_by(id: feedback.reviewee_id)
participant seems a bit generic"
1,Class names and variables are used but variables name can be better.
0,"Yes, whatever tests they have written, they did convert it into automated tests."
0,there has been tests written by the authors.It covers considerable number of test cases
0,They have covered all the test cases and everything is working fine.
1,"I can see all tests being passed in the pull request. However the test plan does not discuss on in depth test plan, that might probably because of the less complexity of functionality"
0,There is no test plan but the test cases have been written in RSPEC according to the requirements of the issue which is valid and is explained clearly in the wiki page.
0,They are missing a few implementations but overall its all good.
0,They clearly stated which controllers or models need to be modified and give their proposed solutions step by step as well.
0,They don't really fully explain why they chose their proposed solution.
0,The design plan is well organized and easy to understand.
1,The team has given a high level overview for most of the requirements. A few details explanations can help the reader understand the project better.
1,Some sections need more information to be added e.g test plan and proposed solutions should be more detailed.
0,The authors do a good job of explaining the new functionality that needs to be added (automatic mentor assigning upon team forming and notifications). They did a good job of explaining why this is needed.
0,It's good enough
0,The overall quality of explanations is good. They've clearly explained what neet to be done in the next couple of weeks.
0,"The solution thet proposed generally follow the chain of responsibility and the work flow, as they state their design clearly, I think their proposed design is good."
0,No such problems so far.
0,The design seems ok to me.
0,The design seams good to me. The use of Chain of Responsibility is a good practice.
1,No in-depth details of the design pattern have been included in the wiki page. I suggest the team to include more details.
1,"The design pattern diagram was useful, but it didn't help me understand how this pattern fit in with the project. The wiki says that there are ""multiple handlers with responses"", but I'm not sure what exactly this means regarding the project. It would be helpful to connect the pattern more to an in depth description of the applicable functionality. The code modified section lists what files will be changed, but not which methods. It should give more details about what the changes will be. This would let the reader understand how the design works with the code. For instance, what method will be called when the team reaches 50%? Since the new design is event driven, response time shouldn't be slow (polling isn't required to check the team's size constantly). Similarly, it doesn't look like any class changes will make the code smelly, but is hard to tell without details about changes to the classes/methods. I think the project is  supposed to focus only on assignments without topics. However, the project description states ""Assignments with or without a topic could be assigned with mentors automatically""."
0,There's a diagram for the whole process and help me to understand what they are going to do in this project.
0,"The visual diagram is very clear and helpful. There is one diagram with explanation used for 'Design Pattern', which clearly shows the chain of responsibility in design pattern. The other one is used to explain the work flow which is also clear to others to show the structure of the function."
1,"The UI screenshots, flowchart, and chain of responsibility diagram were all helpful in understanding the design. I would add a UML to help the reader better understand the intended code changes better. Since there are no UI changes, no new UI mockups are needed."
0,"Yes, uml diagrams and flowcharts are included."
0,"Yes, the team has made use of UML diagrams to make the user understand the flow of the changes that the team will be making."
0,"The diagrams are quite good, help to understand the design."
0,I can easily understand work flow by work flow diagram.
0,"They added a screenshot to state their issue, which help me understanding their issue quicker, and they also added a work flow chart to show their proposed solution, all in details."
0,They have a workflow diagram included in their wiki. But the instructor part doesn't follow the convention.
0,"For the most part, their document is complete."
0,"Yes, I can see from their wiki page that they use  Chain of Responsibility as the design pattern, and they have considered all the functionality they need to realize by showing the work flow chart."
0,It seems to.
0,"Yes, all the requirements are covered."
0,"Yes, the design document incorporates a good portion of the requirements."
0,"Yes, it pretty much covers all the sections."
0,"Yes, the wiki covers that a mentor should be automatically assigned to a team at a threshold, that the mentor should be emailed when this happens, and that team members should possibly be notified as well."
0,"Yes, it has complete functionality"
1,More test plan can be added.
1,"Testing could be more specific, for example having steps of ""creating assignment, adding mentors to pool, insert team member, check if mentor is assigned."" Doesn't have to be complete, something that could point out the direction would be sufficient at this stage"
0,The team didn't miss important part in the document.
0,All part is included and comprehensive.
1,"The test section says that new Rspec and UI tests will be added, but there are no tests provided. These should be added to the wiki. Apart from this, the design, testing, and purpose sections all exist. I would just add a test plan that checks if mentors are assigned once a team has filled up halfway."
0,"The project purpose, the project design, and the testing plan are included."
1,"Yes, the design includes the 'Test Plan' section. The section basically provide the direction what the team is going to do on this project but may need more details or explanation. More details may need to be provided for Rspec Test and UI test respectively."
1,The test plan does not give a step by step plan of UI/manual testing. I would recommend the team to add this.
0,"Yes, they state their design pattern by showing a picture, which appeared to be as simple as possible."
1,"The design is explained in simple terms. However, the team could have done a better job at providing more details."
1,The team get the test plan included. But it is not detailed enough. At least they can write down some basic steps for UI test
1,"I feel that the test plan could be a bit more in depth than just a brief overview, but it at least covers the general of what needs to be done."
0,Their document stayed the same as last time. No changes.
0,"Yes, they use Chain of Responsibility as the design pattern, which is sound and appropriate to deal with the function they wanted to realize."
0,"It is well designed, with visual aids illustrating their design pattern."
0,Design doc have appropriate principles and patterns
1,"There's no design as such explained in the project. Rather the expected results are given in the proposed solution. Please include how will you guys approach to solve these issues. Also, why that would be the best way to do that."
1,"The team has identified the design pattern to use but no details have been given. They say multiple handlers are involved, but it would be great if they can be more precise on which handlers/entities are involved."
1,"The design appears to generally be sound. The team is using the chain of command pattern, as there are multiple handlers of trigger events. I find it a little confusing how this pattern fits in. Are the handlers the classes for the mentors and students? Or is it the flow through requirements and assignments, as in the flowchart? They do list what files they plan to change, and state what needs to be changed. I think the design is good, but more detail on the design pattern would be helpful."
0,"Design appears to be sound,"
1,"I think some more detail could have gone into the proposed solution, elaborating on each of the bullet points."
1,The authors need to work more on explaining the design strategy in more depth and elaborate on the test plan section.
1,The team listed the files in controller and models that might be modified during this project which is clear. More details or explanation may be helpful if how they are going to modify the code or what will be added/deleted about the code could be provided.
1,"Yes, they use figures well. It is better if they can put the workflow diagram in the middle of the page"
1,Flow diagrams are clear and one can understand it easily. Class diagram can be added to the design as that will help what are the classes that'll be extended to achieve the desired functionality.
0,"-Student is not able to edit personal information such as university, education level.
-The image of book seems can not be shown properly.
-some book doesn't have the checkout box to be selected to checkout.
-I failed to log in as admin using the email and password given on github page."
0,"Pull request has been made since round 1, so I think it is good."
0,No conflicts are present. The latest commit has passed Travis CI build
0,yes the pull request passed the Travis CI build.
0,"All tests are passing. 
However, schema.rb was committed and wasn't reverted."
0,"Yes, the build passed in Travis CI. So there is no conflict to resolve."
0,I think it's ready to be deployed.
0,Not sure. The test coverage has decreased.
0,"Of course, it is good enough./"
0,It can be merged.
0,yes I think the code is ready to be deployed. everything looks fine and it passed the Travis CI build as well.
0,"Project can be deployed. 
Next team can pick up from here."
0,"I think they have done a good job enough to be merged into production server, because their code is clear and follows Ruby Style."
1,"Although all their changes seem easy to understand, but I think they still need some comments between their code."
0,"They updated more test plan, which is good. Really good write up."
0,It is elaborate and complete.
0,I think it is clearly and easy understandable.
1,Same comment as last time. Providing navigation to test the changes shall help understand better.
0,"the writeup is very well written. the work done is clearly explained, the problem, tasks, approach, deployment, and tests are explicitly mentioned."
0,The wiki is written in great detail and is contained.
0,"The writeup is easy to follow, I can understand their work."
0,"Their writeup is well-organized and beautiful. I like their code part in their writeup, as it is clear to see what they changed for their functions."
0,"UI works fine, except could test all the functionality in the given time frame."
0,UI is perfect fit the style of other part.
0,Works as expected.
0,the project works as intended. all the features work as they are supposed to be.
0,"Task1: working as expected. Institution names appear in alphabetical order.
Task2: working as expected. New institution can be created
Task3: working as expected. Institute is displayed against instructors."
0,"Everything works fine to me, I check manually all the functionalities they implemented."
0,"Yes, their function works as intended."
0,The wiki page has plenty of details about the task and how they approached their solution. Good job on the documentation.
0,the tests are well written.
0,"The code follows the style guidelines, contains method of appropriate length and properly named variables."
0,No comments added
0,Code looks good.
0,The project itself was to write tests. No explicit test plan section
0,Writeup is detailed and nicely done.
0,Write up is clear and adequate
0,the test-plan is not explicitly mentioned since the project is on testing.
1,"the code is well organised and contexts and it are covered appropriately
 but in topic name class



 


describe "".topic_name"" do


 
 
 context 'when topic name empty' do


 
 
 it ""return -"" do


 
 
 expect(student_task.topic_name).to eq(""-"")


 
 
 end


 
 
 end


 
 
 context 'when topic name empty' do


 
 
 it ""return topic name"" do


 
 
 



two different scenarios are provided for the same context"
1,"- even though most test_cases are easy to comprehend, some comments could be added to specify the function tested by each method
- Also the test_method names can be more descriptive, elaborating on what the particular operation is performed on
-"
1,"the method names are specified however the function and implementation details can be more broadly specified since. 
The method names can follow to the ruby naming practices, by inserting  '_'  between any 2 words within the method name.
For example, the method 
 

complete? can be changed to task_complete? or  stage_deadline_complete? 
Get_due_date_data can be changed to get_due_date_timeline since it returns the time_line specifically"
0,"the project is based on improving the testcases and adding more testcases.
Each test-case has appropriately handled the edge cases"
0,"the listing of test-cases are provided however, the function that each test-case performs is not written. hence it's hard to follow the same"
0,The code works well. There was no feature or edge cases because it was test case.
0,"There was no test plan. However, authors have tested most of the code in student_task."
0,"Everything looks good. They followed the ruby style guide with proper indentation, which makes it easier to read. The code is DRY. Functions are small and tidy."
1,Each and every function doesn't have a comment. It is tough for a reader to understand why this method was added. I would suggest writing comments for those functions which are tough to understand.
1,"They have created variable named ""participant3"", ""response2"", but i can't find use of it in the code, so I would suggest removing the unused variables."
1,"It was clear to understand what they were trying to accomplish. They haven't used any design patterns, because they were writing test cases. There was no explanation of what Student_task.rb does, so it is tough for a reader to understand. I would suggest writing a short write-up on what student_task.rb does."
1,"Write up was good, I think there should be short description of what student_task.rb does and how it works on the project."
0,All the tests pass. There are no new features added.
0,All the tests pass correctly.
0,The test examples are all concise and easy to follow.
0,"This project is only about writing tests so there are no new method. However, the added tests have descriptive context block and it block that serve the function of comments."
0,Yes. It describes each test case well in the .rspec file.
0,Yes. The writeup clearly lists the methods they intended to test and in the .rspec file each example is descriptive of what it's testing. It's easy to understand why each example exists.
0,"Yes. It is about increasing the test coverage of student_task.rb, and the writeup lists all the methods they wanted to test. They did it by inspecting the coverage report and adding test examples to increase coverage"
0,"Given that it only adds test cases, naming convention doesnt really apply. The test coverage has gone down according to the PR, So giving 4/5."
0,The code is not commented at all.
0,"While the code seems good, it is not commented. But because it is a Rspec file, it is pretty much self explanatory. Good job."
0,No test plan in place so cannot comment.
0,"As preemptively mentioned in the documentation, the test for reviews_given? does not work. Rest is fine."
0,The write up is quite informative and and has adequate descriptions related to all the documentation sections.
0,Edge cases are missing in the test plan.
0,"Although they have added tests for various student tasks, but there are no comments associated with the test cases."
0,Yes they have covered all the test cases.
0,All the unit test cases related to the student tasks are passed.
0,"The code follows all the good practices and did not have any problems during the first review and they haven't made any changes after that, so it is ok."
0,"Yes, the project build passed in the Travis CI."
0,"Yes, the team added test cases but the coverage decreased by 3%."
0,The working could not be verified as the deployment link has not been provided and also the video link is not working.
0,"Yes, the writeup looks good with the test plans written along with the code provided for each section."
0,"Yes, it seems it can be deployed from the first review. However, now the deployment and the video link both are not working so the work could not be verified."
0,This project is mainly related to writing the test cases. They have covered good number and ways of scenarios to be tested. i do not have any critics.
0,"Yes, team has made commits after review 1. They have worked on the changes i pointed out in first review. Good Job to team."
0,"Yes, build pass in Travis CI and there were no merge conflicts."
0,This Project was to write test cases. Coverage has increased to 92% from 31%.  This is a really good improvement made by team. Team has considered it from very beginning how the test coverage can be improved and they ave achieved it
0,"The project was to write the test cases and team has done good job. I have looked into the test cases, they have tried to cover many scenarios in the testing like  different stages of assignment, review deadlines, project deadlines."
0,"Yes, these test cases make total sense to me and i think they can be put easily in production server."
0,"I'm not the best at writing RSpec tests, but it looks good to me."
0,One new commit was added to update/revise some comments.
0,"I am hesitant to say this covers all scenarios as there could always be some bizarre edge-case I can't think of due to the nature of expertiza, but as far as I can say the tests seem to be exhaustive."
0,"The writeup is fairly good, a few typos here or there but it looked good overall. I do still wish they talked about every new test they added but I'm probably in the minority there."
0,"They have already completed their project in first round. Thus, no new commits"
0,The team added test case but there is 27% decrease in coverage
0,"The writeup is really very good. They seem to improve after first  round. They have explained their project, work and implementation in a good manner"
1,I think they should increase few test cases so that the overall test coverage would increase
0,"- No new commits made after 24th October. Only one commit on the PR
- But they did made changes in the wiki."
0,- The build is passing meaning that the new test cases added didn't break the build.
0,- Their task revolved around adding test cases but apparently their coverage decreased according to the Travis CI.
0,- The test cases mentioned in the wiki are working fine.
0,- I think the writeup is sufficient. They have added enough information for me to understand what were they doing and what did they achieve. I also liked the fact that they added information about possible fail scenario were they might get issues.
0,- Written test cases works fine.
0,- Do not need them. Their task unit test cases themselves.
1,- Convention in `describe` not used in many places. They have used '.' in many places for instance method when they were supposed to use `#` with them.
1,"- Problems in naming convention in the `decribe` block. Should us '#' instead of '.' for instance variables.
- Increase in code coverage in the screenshot attached but the PR shows otherwise may wanna understand how they defer."
0,- They have described steps to setup and possible caveats.
1,"- Can add more details on what particular scenarios they are testing.
- Under the heading description of the current project, they can add little details about the scenario in front of their method name. Just a small description will do."
1,"- Very well explained but I am already using and working on the app but a new user may not grasp it so quickly. Adding more details about student tasks apart from their method name would really be helpful.
Example: xyz(): used to create a user"
0,There is no new commits during 2nd round.
0,"Yes, the build passes and there is no merge conflict."
0,"The team added new tests. However, the coverage decreased. It makes no sense because they only added testing codes and nothing else."
0,"Yes, the tests cover all scenarios."
0,The write-up was already well-written.
0,"It only adds new tests, so it shouldn't affect the main functionalities. The tests are well-written and easy-to-read."
0,"No, I think the code is well written by following proper ruby coding standards."
0,yes a new commit was added during 2nd round.
0,Yes the Travis CI passes.
0,"Addition of new test cases led a decrease in code coverage. Code coverage was decreased by 3.3%. Well overall, the test didn't increase the code coverage."
0,Yes they have covered all the scenarios including empty or no data.
0,The wiki page is very well documented and can be understood easily.
1,"the method names are specified however the function and implementation details can be more broadly specified since.
The method names can follow to the ruby naming practices, by inserting '_' between any 2 words within the method name.
For example, the method complete?
can be changed to task_complete? or stage_deadline_complete?
Get_due_date_data can be changed to get_due_date_timeline since it returns the time_line specifically"
0,"although new commits were not made , the existing code is complete and requires very little change"
0,"yes the build has passed in Travis CI, before the 2nd round."
0,"the newly added test-cases has increased the coverage of the specified project, but the coverage of the whole project has reduced.

Coverage decreased (-23.1%) to 7.341% when pulling d9dec9f on tusharkundra:beta into 28eb0da on expertiza:beta."
0,"the UI need nit be tested
The tests added"
1,"The write up can be more concise, the code snippets can be taken from git diff"
0,"yes, the code is ready to be deployed"
0,PR already merged
0,Conflicts are resolved and PR's merged
0,Code coverage decreased by 23%
0,Detailed write up
0,"No concerns were reported in the first round, the same code exists now as well."
0,Yes there are commits after 1st round of reviews.
0,Yes the build is successful.
0,"Yes new test cases were added, but the coverage dropped after this PR."
0,"It is a testing project, and the test cases are pretty exhaustive. Good job!"
0,The team has added all the missing elements that were reported in the last review.
1,"Given that this is a project to add test cases, the measurable output should be an increase in test coverage, but it has surprisingly dropped. I however dont think it is because of their code, but rather some issues with coverall (as some other teams too have reported issues with a drop in coverage despite adding new cases). So my only concern would to verify if the code coverage has increased for real. If yes, I think the code is ready to be released to prod."
0,"Suggestion was made to add comments to the code, changes regarding the same are not done."
0,No improvements were suggested in round 1.
0,There are no comments
0,"It is clear from the writeup about what they did in the project. However, it was hard to understand the need and the problem statement of the project from their writeup."
0,"It was hard to understand the need of the project from the writeup. Also, the problem statement is not clearly mentioned. However, it states what things they implemented and where they implemented."
0,"Its RSpec testing, so though there are not comments, the way the tests are written are intuitive enough to understand."
0,Seems good to me. They talked about why they had to do it and how they were going to do it. A little more specificity on the cases that would be covered would have been nice.
0,i pulled their code and tested it manually and test cases are working perfectly fine and team has done very good coverage of test cases.
0,yes they have converted all of them in test cases.
0,yes team has commented the test cases and give good description about what they are going to do and also name explains that too.
0,Yes they have increased coverage to 90% which team has considered as target from way beginning in test plan also. the have given good description to test cases and they are self explaining
0,Yes team has done good explanation about test plan. they have covered scenarios in quite detailed form and even edge cases too. Some of the edge cases are not covered though.
1,"Yes, team has explained well about what test cases they are going to write, and why they decided to write those test cases. Though they have not used design pattern. And it would be nice if team can explain about test cases. because some test cases are hard to follow and in order to understand it you will have to understand the background of it. 
Example hyperlinks? what does current stage means?"
1,"Wiki page can be improved.,it would be nice if they can give project description and problem statement before sharing the test plan. Indentation can be improved, Team has used etc etc word alot that can be improved. They have give all teh details in references, team members and mentor that i like."
0,Edge cases are working
0,All the tests pass
0,"1) functions are of correct length
2) the test cases are in their proper files
3) no comments made
4) the code is in proper format
5) no"
0,No there aren't comments for methods
0,The test naming is done very nicely
0,Not a plan but a general description
0,Yes it is clear to follow what they did
0,Yes the write-up is pretty well written and explains the working
0,Test coverage decrease.
0,I think the test which submit last round is good enough.
0,The team has thoroughly tested the added functionalities. I see test cases for all the issues they have covered.
0,no new test cases were added and coverage didn't increase. but the old tests pretty much covers the project.
0,"The team has added extensive tests and seem through.
The coverage, from what I can see, has decreased."
0,"They add test cases for the code they changed. The coverage decreased.
There's no new added tests, so the coverage remains same as round 1."
0,"Yes, they have added test cases but the coverage doesn't increase. With their wiki, I think their tests they added have already covered the most common situation of their function."
0,I see only two commits.
0,"Yes, there are some new change has been made in 2nd round."
0,No new commits have been made during 2nd round. The last one was made on Oct 29th. Must be because the functionality is complete.
0,no new code was committed during the 2nd round.
0,There were 2 commit made after the 1st round.
0,There's no commit in 2rd round.
0,"Yes, they have new code committed after the first round submission."
1,I found a few places where the redundant code was present. Functions could have been cut to a smaller line of codes.
0,It looks good.
0,"Since the first round itself, there weren't any coding issues. All is fine. There were no comments, at all, but it's fine as the code and variable names are self explanatory."
1,"the code is well written. it has meaningful method names, following the DRY principle. but could've added more comments."
0,The code is written well but lacks comments.
0,Comments are present everywhere.
0,They did a good job on this part.
0,"Nope, but the code is kind of self-explanatory."
1,could've added more comments to clearly explain the functionality of the methods.
0,"There is only one method added and no, it does not have comments. However, the method is just a few lines of code and simple enough to understand so I think it's understandable to leave out comments."
0,No comments have been made for the committed code.
0,Yes they have comments for their code which is helpful to understand what they were trying to do.
0,"No, there are no comments. But for each task, they've only add a few lines of code, and they are easy to read. So I'll say no comment is fine."
0,Test plan looks complete and comprehensive.
0,Of course Test has cover every part they done.
0,Authors have considered all cases.
0,the test looks complete enough. tests for each of the tasks are included. all the possibilities were considered. test plan could've been more descriptive.
0,Yes. The tasks of this project are about some specific scenarios. The tests cover all of them.
0,The test plan section is just called test but has all the required information for test plan. The required tests have been mentioned in the testing plan.
0,Yes they have testing for all three tasks.
0,"No, there's no test plan in their wiki. But they've provided many Rspec test code in their wiki. Those code are easy to read."
0,"Good writting, really clear writeup."
0,It is clearly enough for me to understand it
1,"Please add link to your pull request. https://github.com/expertiza/expertiza/pull/1506 
Also please provide navigation for each task the reviewers should take to check. Shall really help. Rest all looks good to me."
0,the writeup briefly explains the functionality of the work. it pretty much explains what the project does and how the tasks have been implemented.
0,Yes. It's concise and descriptive of the project.
0,"The document has been written very well. From explaining the problem, how to solve it and how to test it, the document has everything."
1,the write has adequately detailed the project and the code is added. I would recommend not to include the instruction to Expertiza as it is redundant.
1,It would be better if they could add more comments in their wiki. Even though the code they wrote is easy to read.
0,Writeup explains everything in detail.
0,"excellent display in youtube, I can totoally understand what they done."
0,"The purpose of the work, how it is achieved is clearly stated."
0,"the writeup is very well documented. clearly explains the author's work. the problem statement, tasks, tests, project videos, and deployment are clearly mentioned."
0,"Yes. It's easy to read and explains the work clearly. It also includes the goal, the solution, the result, and the tests for each task. There are no specific design patterns that they needed to use to fix the features."
0,The wiki page is very well written with detailed explanation of whta needs to be done and how the team has done it.
0,Yes the writeup is well organized. Also the videos they provided are helpful for understanding what they have done for their project. I would recommend adding more something like  flow charts on their page so that reviewer can quickly follow them.
0,"Yes, in the wiki, they provide details about what they did, what the problem is."
0,Code is production-ready
0,Nicely written documentation
0,RSpec test cases added
0,Features are working as expected
0,added code followed all the necessary coding standard
0,"I think that this code is ready to be deployed onto the production server as there were small refactoring changes made to the quiz_questionnaires_controller.rb which were tested against the pre-written tests.
I do not think that the project should be redone from scratch.
I strongly think that this project is a good starting place for a future team to pick up from."
0,"The writeup is very well written and provides a good introduction and explanation to the controller, the issues and their solutions.
The code snippets help in following the written part even more.
The Testing section also gives a good insight into the testing of the quiz_questionnaires_controller_spec.rb with RSpec and includes link to the YouTube video and a screenshot of the successful Travis CI build."
0,"Could not verify the operation and testing as the deployment link does not load.
As this was a refactoring project, there was hypothetically no need for an actual deployment link, the team had still provided one and showed the testing on the deployed link in their YouTube video."
0,"The team did not add any new tests as it was a refactoring project and hence made use of the existing tests to test their project as shown by them in the YouTube video.
The code coverage after the latest commit had decreased by 3.3% to 27.162%."
0,"The Travis CI build passed successfully and cleared all the checks after the latest commit, which was expected as the latest and the only commit made after the initial review only involved addition of comments to 1 file.
I could not find any conflict with the base branch that needed resolving."
0,Only 1 new commit was made during the 2nd round which added comments to all the changes made during the first round in the app/controllers/quiz_questionnaires_controller.rb.
0,"The new code was well written and nicely refactored without actually changing the existing logic.
The code did not have any bad names, long functions or redundant code. There were no DRY problems as well.
The code followed the Ruby style conventions and was very readable and easy to follow.
The addition of comments to the refactored code in the 2nd round helped in understanding the changes made by the team and gave an insight into their thought process."
0,The code is good enough for deployment because it adheres to the ruby principles and passes most test cases and it is just for refactoring.
0,It is working as expected. The refactor things have not affected the functionality of the code. Good job.
0,The pull request passed the build for Travis CI and no conflicts were present.
0,Small code changes were integrated in the 2nd round.
0,The code has been improved a lot and refactoring is done in a good way.
0,Ready to deploy.
0,Yes test cases are added.
0,Passed.
0,"Yes, the new code is committed."
0,The code is descriptive.
0,"The team has made the required changes and also modified the existing specs to incorporate the changes. The tests also pass after the changes. So yes, the code can be deployed to production."
0,"Yes, the write up is very well written and has relevant screenshots added where necessary."
0,"The team did not add new test cases. However, they modified the existing specs to incorporate their refactoring changes.
No, the test coverage did not increase."
0,"The provided link does not work. Also, as it is a refactoring project, the features work as they are supposed to. The team has included a screenshot for the same."
0,"Yes, the build passes in Travis CI. There are no conflicts with the base branch which need to be resolved."
0,"The last commit was 9 days ago. So no, it seems like the team did not commit any new code during the 2nd round."
0,The code is very well written and follows good Ruby coding conventions. The refactors names are all in accordance with Ruby coding principles.
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
They also added a section on the current implementation, which includes the functionality as well as its drawbacks & solutions. This is a great addition and very useful for readers."
0,"The UI works as intended.
The features work exactly like they are supposed to. (this being a refactoring project)"
0,"yes, i think code is good to be moved, but still i would suggest to do thorough integration testing as well, as many methods of this controller seems to be getting call from questionnaires controller also, team should just make sure all kinds of tests are being passed and been tested."
0,i did test to best of my knowledge and the way i did in review 1 and i donot see any issues. It would be better if in wiki page they can give better detailing of how to test thoroughly.
0,"Team has not added the new test cases as they are just refactoring the code, but they did run the Rspec file and made all the test cases pass. and after my manual testing also i didnt find any issues."
0,"Yes build did pass in Travis CI and team has already merged there changes to beta branch, so i guess they have already resolved the conflicts."
0,"last commit show is of 6 days ago, so i don't think team has made any changes after review 1."
0,The code is ready to be merged.
0,The write up is well written.
0,The system works as it is supposed to work.
0,test cases added but the coverage has decreased.
0,"Yes, the build has passed."
0,The code is written well.
0,Less commits in the second round.
0,"The write-up is pretty thorough. It explains the problem statement, current implementation, what improvements were made, and shows the tests pass."
0,"Test cases were not added. However, quiz_questionnaire_controller_spec.rb was updated so that the current user was stubbed to be a student. This was needed since only students can edit. Coverage decreased by 3.3%."
0,The pull request passes the Travis CI build. All conflicts from previous commits were fixed.
0,"There was only commit during round 1, which was adding comments."
0,The writeup is very good at explaining the functionalities and the work that has been done. So there is no issue in the write-up.
0,Yes the team has added test cases but the coverage has decreased by 3% as per the travis CI.
0,"Yes, the build has passed in the Travis CI."
0,No new code has been added in the 2nd round.
0,The code was perfect during the first review and therefore there weren't much changes to be made and looks good. The authors did not need to change anything further.
0,Working as expected.
0,"The PR itself was about refactoring the existing code, so the added followed all the coding standards and conventions."
0,"I could not find the comments for extracted private methods, neither for the refactored methods."
0,Test plan covers all the required cases.
0,Nicely written and documents the relevant info.
0,I tried running the test myself and all the tests passed as expected. The features work perfectly.
0,"The Travis CI build passes successfully on the latest commit and clears all checks.
The test coverage decreased by 6.1% to 24.35% after the last commit.
All the variables, methods and class names are suggestive of their functionality and follow Ruby naming conventions. The names make it easier to understand what's happening in the code and the flow of the code."
0,Questionaire is working as expected so no changes in the functionality detected even after the refactoring.
0,Edge conditions were not mentioned and apart from that test plan was good and most of the things were well specified and rspec testing was done and shown in the video which is very good.
0,Yes everything was mentioned as the problem statement provided the details. The changes were well documented and
0,"Tests are updated but in the write-up, the test plan is not mentioning why the tests are written in this way."
0,Yes feature is working.
0,"variables, methods, and class names are explaining the cause well."
0,"Yes, I can understand what has been done."
0,"Yes, the team has modified Rpecs to accommodate their changes."
0,The team has followed good coding practices.
0,The names are intuitive and describe the functionality that the methods perform.
0,"Yes, the team has mentioned about the changes they made to the existing Rspecs to accommodate their changes. They've also included a video for the same."
0,"Yes, the team has done a great job of explaining all the changes."
0,The write up is very well written.
0,The feature has been implemented properly and the the functionality is working as intended.
0,The build has passed but the test coverage has decreased
0,Test plan has been included in the writeup and it has been written considering enough conditions and cases
0,The write up has been drafted neatly and it is easy to follow
0,The functionality have been clearly and adequately explained in the writeup
0,The authors have not created any test plan. They have only demonstrated test cases passing using the existing RSpec file and no changes are made to it.
0,Reasonable and meaningful names have been given to the newly added functions.
1,"They did fix some problems that I mentioned in last review, that is good.
Suggestion:
1. The test video needs a permit and the viewer cannot see it.
2. Please paste the Rspec code to the wiki page, and give the comments."
0,There is not any comments in each method and there is not any comment during the changes.
0,"1. There is no comments for the methods.
2. They do not explain clearly what do each method do."
1,"The modified code doesn't have comments in some files, which is pretty difficult for the readers to understand. May be a two liner about why a particular method is added or why some of the lines are removes would be useful.
Also, if the comment includes a hint for the user about the flow of code like before this which file we can look at, might be useful to understand the flow.
Big chunk of code has been removed and the same has been added and modified. Not sure what happened may be github issue."
0,"1. Their writeup only shows the functionality of Bookmark.
2. There is no test plan, no statement about how they modified the code.
3. They did not explain how and why they do the work.
4. The link to the audio is broken."
1,"1. They wrote a lot about what to do of the bookmark functionality, however, there is nothing about the solution and how they fix these issues. 
2. I cannot watch the video in which there's a video link on the wiki page.
3. Please add the code part to show what files you changed and the details about the code.
4. please add the test part like the Rspec test."
1,I think it's better to describe the problem first in your Problem Statement part.
0,"Yes, all the functionalities are there."
0,"Yes, the design doc seems to have incorporated all the functionalities of the conference/journal assignments from the requirements doc."
0,"- The document incorporates all the functionality
- It is unclear whether the feature is already implemented and the team is improving on it or the it is to be implemented from start"
0,"Yes, the design incorporates all of the functionality required."
0,"Yes, the design seems to incorporate most of the required functionality."
0,"> The design statement looks pretty detailed out and includes all the functionalities required.
> The sequence diagram gives a good understanding of what needs to be achieved."
1,"Overall the main functionality has been described properly.
The Google doc talks about two more things which were not covered in the Wiki Page:
1. A generalized review code has to be implemented/modified to let reviewers bid on papers (just like our normal project selection.)
2. What if a co-author clicks on 2 different links and becomes a part of two different conferences? The Google doc says that a team should be responsible for only one assignment. So a way to handle such a scenario should be thought of.
These topics are not mentioned in the Future Scope either. And hence I'm putting this problem down here."
0,All functionalities have been understood and a plan for implementing the same has been shared.
0,"The tasks to be accomplished section indicates the motto of the project.
The design lists all the steps needed to accomplish the tasks like the checking flow, what needs to be created etc."
0,Yes the design incorporates all the functionalities mentioned in the google doc.
0,Your design doc is missing test plan.
0,A test plan is missing.
0,The document is missing the test plan that would be implemented to validate each fix.
0,They forgot to mention the Test Plan!
1,"- Test plan must be included as the team intendes to add multiple features which may modify core features such as user signup
- Test plan may include tests for new features as well as tests for existing features if the are modified in some cases"
1,"The testing plan is missing. I know it is difficult to come up with test cases right now, but write few one-liners on ideas for implementing testing. Rest all looks good to me."
0,"Except for the test plan, everything else is included and is well documented."
1,"> Project description, purpose, design and changes proposed have been very well defined.
> However, testing plan needs to be included.
> Some use case diagram could have also been added. However, sequence diagram serves most of the purpose."
1,"I feel that they should have added at least the testing files which would be affected/which they would modify, corresponding to the controllers that they are planning to edit. For example, as they are planning to bypass admin approval for creating accounts, this will definitely affect the existing test case and they will have to develop new ones especially to handle the conference author & co-author case."
1,"Most of the aspects are covered. However, there is no testing plan. The team needs to add a UI and Rspec testing plan."
1,"-The intention of the team is reached to the reviewer but with a lot of effort. 
-The wiki page can be improved by adding pictorial diagrams and also code snippets where the team thinks changes to take place.
-Pretty confusing when we read for the first time like what needs to happen when the admin creates a link for the author and should the co authors be validated etc. Needed to refer the projects doc.
-Can include the important reference links that the team is referring to so that it will help the reviewers while doing the review."
1,The design doc should have been written a little more elaboratively as to describe the plan of work and what are the things they are exactly working on in brief.
0,All the feature works well .
0,Normal features work fine. Corner cases are hard to test manually.
0,"All the three tasks are working as expected. Universities are in sorted order, I am able to add new instructor with new university(Auburn), universities are listed in list of users page."
0,the features work as intended. all the three tasks work as they are intended to be.
0,Yes. The features all work correctly and there's no errors when I test.
0,"Task1: Alphabetically listing university names: Working fine.
Task2: Adding a new institution during creation of an instructor profile: Manage Users page doesn't load, request timed out
Task3: Listing of instructors should show their institutions on the same line: Manage Users page doesn't load, request timed out"
0,Yes all the features work pretty well as expected.  The institutions are listing alphabetically. A new institution can be added when creating instructor profile. Related institutions would be on the same line when I list the instructors.
0,"Yes, I checked the wiki page add see the work they need to do. They've successfully finished their job. They've handled all three issues."
1,"On a whole it's a nice code.
Functions are not too long. Need not require separate methods. Some comments might help, but not essential to understand. follows ruby style guide. smell free."
1,more comments are needed. though for some methods the method name itself is self-explanatory adding comments could've made things easier to understand and more clear.
0,It follows common Ruby style well and no functions are hard to read.
1,"The methods look fine and have separated logic as expected.
However, it is possible to refactor instructor_id method in user model."
0,"1. not too long;  2. no code needs to be extracted in to separate methods  3. although their code and the comment is readable enough, i think more comments would be helpful absolutely;  4. they followed the ruby style guide;  5. code seems DRY to me"
0,"(1) No, no functions are too long.
(2) Yes, in User controller, two create methods have some duplicated code
(3) No
(4) Yes, their code are following the ruby style guide
(5) No"
0,Variable names are relevant.
0,"Yeah, the variables, methods and class names they used is all reasonable."
0,Test coverage has decreased a little. Naming conventions are all simple and understandable.
0,pull request is not given so cannot comment on the build pass/failure. the variable method and class names are appropriate.
0,"The naming is clear and descriptive. The test coverage decreased, but every team I have reviewed so far has decreased coverage, even with the teams that only added new tests and no other codes, so I think it's not their problem."
0,"No pull request has been created in spite of making the required changes and committing them.
The variable/method names in the commits look fine."
0,"The team didn't provide the URL of the pull request, so i couldn't check the build pass and coverage. Most of the names are reasonable."
0,"The variables, methods and class names meet the code standard."
0,"Yes, they have."
0,Tests have been added for every task.
0,all the test cases for each task have been converted into automated tests.
0,The tests all passed.
0,"The test plan has sufficiently well covering tests and these tests have been implemented as it can been seen in the provided videos.
However, these tests don't seem to have been committed as the code for some of the tests is missing in the pull request."
0,They got a detailed description of the testing.
0,"No, all test case passed."
0,"The code is clean and DRY.
The only problem is that they can add more tests to it."
1,Their code seems good in the first submission. All the methods and names are in Ruby style. They have already did a great job. So they don't need to change them in this round.
1,"There is a link given in the document to another document which gives the details of Gale-Shapely (supposedly algorithm in question to implement). It would have been helpful if a gist of the document was mentioned in the wiki.
Team could have included a flow chart or a diagram explaining different domains and their responsibilities for all of the proposed changes.
Initially it was hard to comprehend what exactly their changes are going to be as the changes proposed are embedded in the problem statement and challenges"
0,This is the weakest section in the proposed design. The test plan is very abstract and lacks details
0,Visuals are abundant here and they are all related and elaborate
0,I am not sure if the feature is complex from the inside as from the out it looks fairly simple. But the solution seems complicated
0,The design seems to be spot on
1,The test plan is pretty solid but I feel it could add some additional information like how are they going to test it and how are going to ensure that their code would have 100% coverage.
0,The wiki is very well documented is explain everything about the project.
1,"Basic tests are mentioned. However, tests are shallow, could have included more edge cases and descriptive tests that are going to be written in RSpec."
0,"The UML diagrams for models are good. The inclusion of relationship between bidding and team, participant and response is well-explained through the use of diagram"
0,"Yes, it appears simple and easy to understand."
0,"The authors have done a good job of explaining all the changes that are required for the project. A detailed plan of changes is described. The functional requirements, bidding algorithm are clear, UML diagrams are helpful."
0,"The changes to the system with respect to code are not much described. However, on the high level the inclusion of budding algorithm, functional  & non-functional requirements is good and clear."
0,"The team has laid out a well defined 6 point test plan which seems to cover all possible functionalities that may need to be tested.
A great job done in test planning."
0,"The design appears to be very straight forward with every detail laid out int he design document.
The possible issues and the pitfalls have also been highlighted by the team."
0,"The design doc is very well explained.
Project purpose is explained in detail as well as in a fun and practical manner."
0,"The authors have very nicely explained all the changes that need to be made and a detailed plan of the changes that are going to make.
It included the algorithm they plan to implement as well as the functional & non-functional requirements of the project."
0,They have mentioned in an overview what the team wishes to test. This is enough for now
1,"Yes, the team has provided some diagrams which help to understand the system better.
However, a flowchart would have been a good addition to consolidate all the ideas laid out"
0,"Although the process seems complicated, the team has broken down the steps and explained them well"
0,The team seems to have learnt well what changes are required and what needs to be done
0,"Yes, they have mentioned all changes that are required in order to achieve the goal laid"
1,"The test plan is not detailed enough. It should mention the functions/files that will be tested. Also, if a new service is being introduced, it needs to be tested independently, with its unit tests as well as integration tests for the entire application. The test plan doesnt cover this."
0,"As in the previous review, the diagrams are very intuitive for the existing system. No visual representation exists to explain the proposed logic."
0,The logic is fairly simple and appropriate for the problem at hand.
1,I dont remember seeing a mention of external Flask service in the earlier draft. Just not sure if this service needs to be an external application in itself deployed on an independent server. Creating a new application can raise a lot of potential issues for maintenance. Can this logic not be embedded into existing expertiza application? Does the logic of matching qualify to be an independent service? I hope you have taken into consideration all these factors. https://webmasters.stackexchange.com/questions/49832/what-qualifies-as-a-rest-web-service Here is a link that might be helpful in deciding.
0,The document clearly explains the proposed changes and is helpful in understanding the feature at hand and its solution.
1,The testing does not cover all the functionality and include automated test plan for the implementation. Explain in detail about the tests. The existing test section does not test the bidding part in all dimensions.
1,"No, they did not use any UML diagrams to explain the solution or the changes to be made. Use a class diagram showing internal changes to be made to the system."
1,Their design gives us the basic details about the problem and how the problem can be solved but does not explain about the internal implementation of the exact code changes required. The design requires improvement and it does not contain about the design patterns.
1,"The test plan looks decent as of now however I would suggest that you also add the exact steps in testing from the UI.
Moreover, include edge cases encountered (during the implementation) and also make a note of how these cases are being handled by the altered code."
1,"The test plan can be elaborated to include how they plan to test in addition to what they plan to test. 
For example,

Testing that the color-coding feature is working and appropriate.

Testing the color-coding feature is understandable, but can include how they plan to conduct test to check if color-coding feature is working or not
Also the testing for ""appropriateness"" is abstract"
1,"In the topic,
Approach for matching students with topics
the variables used

both the variables are different but in the lines that follow
""calculate k, p|, and p|. The goal is for each topic to be assigned to either p| and p| students""
The 2 variables appear similar. 
Either the variable names can to be changed in picture or appropriate documentation should be present
Further these variables must be defined before use"
0,yes they have explained well
0,The team has done an excellent job trying to explain what I understood is a complicated bidding algorithm. My only reason for not giving full points is that I still am not able to grasp how it will be implemented in code.
0,The explanations made by the authors are in great detail including mathematical equations as well when appropriate. I think they have done a good job overall.
0,Test plan includes what different kind of test they are going to perform.Also some test with UI is good to add
0,The design is simple and is easy to understand .
0,"Yes, the design pattern is sound and appropriate."
0,The information included is perfect and good enough to understand the changes in system.
0,Yes it include the test plan.
0,Yes it does.
0,"Yes , the author deeply explained the changes."
0,The design is simple and is easy to understand as all the details with respect to issues are upto the point.
0,"Yes, the design pattern is appropriate"
1,"Diagrams have been added to explain the relation between reviewer and reviews, which is good.
However, additionally, a flow diagram would have really helped to understand their thought and approach."
1,"The issues in current implementation have been explained very well. Although not much is written about their plan and what changes they are going to bring in.
It would be great if the team identified parts of code related to the present implementation and at least build around what they plan to change and where"
0,The document covers fair amount of functionality required in a design document. But lot of details in each section are missing
1,"Overall, it is a good document.
Some details need to be added in all sections of the document to help the reader understand that the team has a clear plan of implementation."
1,The diagrams present are helpful in understanding the current design. I would recommend the team to have mapping diagram as is the case in current implementation for the proposed solution as well. This will be helpful in understanding the incoming changes/impacts.
1,"The proposed changes are nicely listed in the document. One suggestion would be to put in the technical changes as well, meaning the classes or functions that you plan to change/introduce."
0,The problem statement as well as the background is very well stated.
1,The design document does not involve any UML diagrams. They have used a diagrammatic approach for explaining the implementation of the mapping.  Please add UML diagrams explaining the design approach.
1,I was unable to follow the changes required to be made to the code. Include the code which has to be changed and also the files which has to be changed. This gives a clear understanding. They have mentioned the algorithm to be implemented but do not give an overall view for the approach.
0,They have one functionality to cover and they covered their major functionality in detail. The design document explains the detailed view of the functionality.
1,The design document requires the addition of the UML diagrams and database design to explain it in a better way. Other details are included but elaborate on the testing plan to be done.
1,- They can create a UML diagram for functional design instead of listing it which will make it easy to understand the entire flow of things.
1,"- Nothing related to the implementation was provided. They should at least mention the probable file changes. For this, they can refer previous implementations to get a basic idea of what and where changes need to be done."
0,- They seem to understand what needs to be done and have written the functional flow of things that their implementation should do.
1,"- Needs more UML diagrams.
- I would love to see some basic details on the implementation
- They can explain a bit more about the algorithm they are planning to use and why it is better."
1,"The mapping diagrams clearly explain the cardinality of the entities so great job on that!
However, I would also recommend that you add some project specific use case UML diagrams as well as database design schema which would make the implementation even more elaborate.
The test plan really looks highly abstract and I would recommend that you give a brief description of each of the tests which would also benefit other reviewing users.
Also adding some annotated screenshots is a must."
1,"Nothing was explained about the alterations to be in the current code and the files that need to be modified without which not much could be commented on whether a wrong method was added or whether the code looks 'smelly'. 
The document just gives a brief idea of the project and does not focus much on the code implementation part."
1,"As mentioned previously, the changes proposed by the author is to the point and clear. However, there are some sections that need to be even more elaborate.
Include a brief summary of the tests for each of the features being changed/ implemented.
Make use of flow chart to explain how the bidding algorithm works or write down what's happening in an algorithmic form.
Avoid using links and include the content in your document as well."
1,"The design document incorporates most of the functionalities required and also clearly explains their proposed solutions.
However, I would suggest that you also give a gist of what was done previously rather than just including links like 'E1856' and 'E1928' respectively.
Make sure that you summarize what was implemented in the same document itself, since this would prevent unnecessary navigation to other site as well as let the document serve its full purpose."
1,"The document looks complete in all its aspects except that it should be a little verbose at places mentioned in the above comments as well as some images should be added for better visualizations and understanding.
Make a tentative list of the files that would be changed or altered during the process.
If possible also give a gist of the changes made in each of those files."
1,"The writer has included  2 diagrams along with the below lines
 
The Mathematical formulation is itself wrong in E1856 and E1928 and they have used the below shown diagram to represent the relationship.
Though this serves as visual aid, it's misleading as the process the diagram describes is wrong"
1,"This web service must either be called from the LotteryController or a new controller can be created on the same (if Lottery Controller becomes too complex).
this doesn't follow requirement s specified"
1,"in the section:
 
Why does the difference is the representation matter?
 
Since they have modeled the problem on the same lines, they have used the same version of the Gale-Shapley or Top Trading Cycles Algorithm used for one-to-many or one-to-one approach. Famous Problems Dealt on these lines.
 
the above lines could be explained, since everyone might not have a background of understanding the algorithm mentioned. It would be better if they can include a simple overview of the algorithm"
1,"From a Student's Perspective:

Because he/she does not have to spend a lot of time understanding what is going on.
The Student would be more focused on giving the review and hence judgment made tend to be more objective than subjective.
This would improve the quality of reviews and will also be helpful for the reviewer.
Also, Bidding in Fun !!!!!!!

the bullet points in purpose can be improved"
1,The authors have explained the problem and the solution in great detail but I think they could have been more specific with regards to what steps they plan on undertaking.
0,"I could not find anything the document lacked, it seems to cover everything from the motivation to the plan to be followed."
1,The test plan section could be more detailed.
1,"the second diagram (mathematical formulation) should be more detailed as the difference is not clearly visible on first view.
Some other diagrams can be included"
1,"The plan is quite good but more explanation on how they are going to solve it is required to judge the pitfalls in the system, if any."
1,"They have provided links for the previous implementation which is nice. Also, diagrams describing one-one and many-many are also good to understand. There are certain mistakes of spelling like reviewer and reviewer, which should be reviewer and reviewee"
0,"Yes, there is separate functional requirement section in the documentation regarding that. They have mentioned of the new algorithm, they are going to implement."
0,"Yes, most of it is done."
0,It's in good design and the pictures are good drawn
0,I think they may choosed the right class to change
0,Good explanations.
0,Yes they included all.
0,Perfect!
1,"There are diagrams included to explain why existing system is wrong, but the team could have also included diagrams to show the approach they are planning to use."
1,"For most part, the design does include all of the functionality required but, all of the details are listed under 
What needs to be done?
 
Though background is detailed the approach for implementation is not. The team has mostly focused on what is wrong with existing solution rather than striking a balance between what is wrong with existing solution and what is the approach."
0,"As I have mentioned throughout, there is not enough importance given to the design of approach or the proposed solution. That's a major flaw of this document"
1,"1) diagrams are good to understand what the issue is and how they gonna resolve it.
2) the second diagram  (mathematical formulation) should be more detailed as the difference is  not clearly visible on first view."
1,"1) diagrams representing relationship (one to one and many to many ) is quite clear and good to understand the issue. 
-----------
2) check for spelling message like in
Why Should a Student bid for Reviewing Submissions?
This would benefit both the reviewer and reviewer 
Instead it should be reviewee."
0,"1) Yes the document elaborately describes the functionality required.
2) they mentioned what's wrong with past implementation and now which new algorithm/approach they gonna try to implement"
0,"Yes, the code is written in a clean and a readable way."
0,I do not see the code.
0,There're only 35 commits
1,"Yes, they do have pushed code time to time. It would be better if they had used issues functionality of github project."
0,Sorry...I couldn't see the code.
0,It takes a while to figure it out but it's functional
1,Overall UI is good. You have made it simple and concise but not reaching to proper location after pressing back button. Work Flows are can be improved. For student it is showing status of book as checked out but when I look for checked out books it is not displaying any book there. Over all at some placed it becomes confusing to understand the behavior of application but minor fixed will definitely make everything perfect.
1,"- The UI starts with asking user to either sign up or login as a student/librarian. In terms of UI perspective, it can be improved a lot to give the user a look and feel and also allowing users to understand the functionality well.You can create two buttons and displaying appropriate forms based on selection.
-Also, since the log in/sign up is divided into two forms, entering the admin credentials is not accepted by both the forms thereby failure of admin login.
-Once we sign into the UI, all the options are jumbled and there is a text overlap confusing the user.
Overall, the functionalities work and can be understood.but can be better."
1,"Could not locate the README file since the repo is not public. Since this is just the first round, I understand that some of the pieces need re-work. Hopefully, my suggestions would help :- Please provide `Back` button on all pages. Little counter-intuitive to use the Browser's back page- There were errors when I hit a Back button from Student Edit page
See screenshots
https://snipboard.io/ha5HRl.jpg"
1,The code is structured as expected from the standards of Ruby and Rails. Code in views can be moved to helper files for reuse.
0,Team has used scaffolding and they kept the structure and seems to follow the coding standards as well
0,You have followed good coding practice and code structure look good to me. It is easy to find the required files based on directory structure. good work
1,"-Code comments can be added.
-Code can follow SOLID principles assigning only single responsibility to each method.
-White listing can be specified in the respective controllers instead to other controllers like Student controller can contain the student parameter white listing.
-Can try helper methods instead of rewriting  the functionalities."
1,It follows usual good practices overall. Just add more comments in the code and refactor some code from books controller to model which is related to business logic. Also make sure that all the links/buttons included in UI have some responding action attached as Show button in books list of librarian login home page redirect to error page.
0,"Yes, the test plan is there with explanations."
0,Yes it does include the test plan it is highly localized
0,"Yes, the test plan has been laid and all tests have been explained well."
0,"Yes, they have mentioned a very elaborate test plan. It includes an overview of how they intend to test their functionality using RSpec"
0,"Test plan is okay they haven't figured out how they will check the response time of API, which is one of the requirement of the system."
0,"The team has mentioned in detail the testing plan and the corresponding high-level rspec for each test scenario is written. Also, some of the edge cases are mentioned."
0,The team has added one flowchart to present the flow of the actions. It helps in understanding the system.
0,Yes the figure are appropriate and captures the flow of application.
0,"1) The visualization is excellent and really helpful
2) Diagrams well explained how their project works"
1,"A flowchart is given demonstrating the flow of events and where and how they will be handling external API calls. All of this is color-coded which makes it super easy to follow.
It would have been a good idea to show the output of PeerLogic API in a table for some sample text."
0,"Yes, they have one big flow chart explaining all changes. The chart is pretty easy to understand."
0,- No changes done on the suggested changes. They are stating CORS as a separate task yet again.
0,The design appears to be simple. There are no complex logic blocks which are hard to understand. The team have very nicely explained everything related to the problem statement and it doesn't seem that their design is complex. The flowchart also depicts as there are no cross edges and everything is pretty much linear in their workflow.
0,"Yes, from the flow chart, it looks like the solution is as easy as adding a few conditionals, and CRUD operations to save/retrieve feedback. I am not sure how complex the queries will be."
0,"This wiki page covers changes to be made to the system, did a comparison between that and the previous implementation, I think it is complete and is ready to go."
0,"1) They explained problem first and then propose solution
2) The changes are explained step by step which make them easy to follow"
0,"As I mentioned before, the team have properly explained the issue, their approach and how they will go about completing it. The changes have still been described in text form and it seems the team has not figured in which files would the change be exactly made."
0,"Proposed solution seems very reasonable and feasible, however, the team did not include any design principles or patterns they are gonna use"
0,The design appears to be sound.
0,Yes the design appears to be logical and according to me will help in achieveing the functionalityu
0,"By the overall look of it, the flow looks appropriate"
0,The design is quite sound. There is appropriate flow in the design which helps us understand the document better.
0,"The design appears to be sound. The team have explained the problem statement, the steps to be taken and also what automated tests are required to be written to guarantee the proper working of the system. It is good to see that the team thought about more test cases and have included those in the writeup as well."
0,"The proposed solution is sound, in that the team has explained every little step they'll take. It looks  like the solution is well-thought and should solve the issue."
0,Since this is a mozilla project the design steps are predefined.
0,yes there is test plan present in the design document to test the changes that they have proposed to implement.
0,yes they have did added diagram to describe the flow of the functionality that they are implementing. It makes it easier that way to understand for other persons who are reviewing the document.
0,yes proposed design is simple and neat. it is self describing for anyone to understand.
0,yes it seems that they have pointed out both the point that were present in the design document.
1,"As tests are already made for their final project, some details regarding possible UI testing would have been good."
0,The document is described in simple language and clearly explaining their approach and progress so far.
0,The document is well designed and explained in good details.
0,They have explained the changes made well and explained them with good details.
0,"According to the document, no tests need be added. However, these participants have still laid out how they will use existing tests to test their functionality."
0,The visual elements are great and much appreciated!
0,As far as I can tell. It's difficult to determine since I'm unfamiliar with Servo.
0,I think the design is very good and much more fleshed-out than the original submission of this document.
0,"This is difficult for me to determine as, again, I am unfamiliar with Servo."
0,"The design does include a detailed test plan.
The tests that have already been conducted as a part of the OSS project and the ones that the team plans to run after completion of the final project changes are not shallow and they will really test the functionalities implemented in the project.
The team has not really mentioned about writing any new tests. The test plan mentions a plan to test the projects using existing tests, such as:

Check if code follows style guidelines
Check if code has no compilation errors
Check if servo is built successfully
Check if test pass, i.e. servo can process srcdoc iframes:"
0,"The team has added a flow chart to explain a high-level view of their proposed solution.
This I believe will greatly help any person reading the document.
Also, the images used to explain the HTML page content as well as the DOM tree are really useful for a person who may not understand what DOM features are."
0,"The design proposed by the team appears to simple and straight forward.
It is easy to understand and give a clear idea of what and how the team plans to work on the project.
The flow of the proposed project design is also easy to understand and has been well described by the team."
0,"The project design appears to be sound and well-thought-out.
The team has rightly mentioned that design patterns are not applicable to their project as it involves the implementation of methods and modifying various files and that the implementation section provides details of why certain steps were implemented the way they were."
0,"The authors have laid out a detailed stepwise plan of the changes that have already been made to the system as a part of the OSS project, as well as the changes that the team plans to make as a part of the final project, under the scope section of the document."
0,- They have listed the details related to a test case that is failing while merging but have not provided any details for the reviewers of how and what to test.
0,- The proposed changes are easy to understand.
0,"- The design, coding standard and pattern is as per the servo guidelines and is appropriate for this current project."
0,"- Given the specific changes and need of the issue, they have given enough information for the readers to understand the changes needed."
1,The team's test plan seems adequate and they are thoroughly informed as to what to test and what to expect. This specific approach is neatly explained as well. Probably can add a few more edge cases for the DOM test scenario.
0,"They have added plenty of legible flowcharts for the DOM, their implementation and many Github code diffs. This vastly increases the impact of the design doc."
0,The design is clear and their detailed explanations help others understand what the project does and what its steps are. The changes are easy to follow and looks like the implementation is also simple enough once one understands the logic.
0,The design document seems well documented and is complete. The team has explained all the steps properly and has even added a flowchart to outline its implementation plan.
0,The changes are very well explained. No complaints there.
0,"The design for the entire project, that is the OSS and final parts is quite clear as flowcharts make the flow easy to understand."
0,"It does include the test plan in detail. Also the team has mentioned that there are some issues because of the test cases from Servo's end, so the pull request will be raised based on the resolution of blocker."
0,"I don't think that this project/document should have UML or class diagrams.
There's a flow diagram in the document which explains process or flow for the changes and that's quite helpful."
0,"There's no design section in the document also team has mentioned about why they don't have one. 
I think the way changes has been done and explained is enough to understand. Minute details are included for everything which is really helpful to understand the changes and the project."
0,"There are no design principles to be followed in the project, as clearly mentioned in the document. 
Team has given the explanation for why certain changes are made in specific way and that explains enough."
0,"Code changes are explained in detail, why certain changes are done in specific files and why that's the best way to do it."
0,Yes. They have included the test plan for the final project. It seems they have done most of the testing part in the OSS project step itself. But they have made a separate section for the final project. They have described the match utility commands to test their system.
0,"Yes, they have utilized the flow-chart diagram to explain their design strategy."
0,The design looks comprehensive and simple. The flow chart in the design document clearly explains their design.
0,"Yes, their design looks good. As mentioned in the earlier review, they have used good flow diagrams to clearly explain the changes they are making to their project."
0,"Yes. The document looks comprehensive. They have included screenshots of the system, flow chart for the design strategy and a food testing plan.  It is easy to understand and follow the document."
1,"- Yes the doc includes a test plan
- The test seems to be already in place and the team must make sure the their changes must not break existing changes
- Must try to add new tests if required"
0,- Few visualizations used indicating places where the team intends to make changes
0,Yes the design is simple
0,- Yes the design appears to be sound with appropriate principles
0,Yes the author have explained the changes required
0,The team gives detailed steps on UI test. They have provided the RSpec tests which is good.
0,The explanation is given in steps it is easy to understand. Also the explanation is reasonable and comprehensive and easy for the reader to follow. The design appears to be simple.
0,The document contains the appropriate software principles and patterns. No pattern was adopted but the design looks sound.
0,all things that they have decided to alter looks clean and efficient to me. it wont complicate the code or produce any unnecessary response time.
0,They did stated all the changes that they have decides to change. It looks complete from my point of view to resolve the issue present in the problem statement.
0,yes. the project implemented the first issue from the problem statement in the OSS project and the second issued are going to be implemented in this final project.
1,design document does address all the aspect of the issue but still I think they should add more about the solution instead of just writing what files that they are going to change. if they add some description about files then it will be easy for anyone to review.
1,"Pros: They have made use of sufficient visual aids to explain what they have implemented so far.
Cons: Maybe one diagram regarding the flow of data would be good to have and some figures regarding how this phase of the project would be achieved."
0,Documentation is complete with all the parts present and explained in good detail
0,There are no visual aids for the issue being addressed by the final project.
0,"It's difficult for me to comment on this, being unfamiliar with servo, but the changes seem to be well thought out."
0,The proposed changes are very well explained and easy to understand.
0,It seems that the project outlined on the servo page related to 2 issues and this design document covers both very extensively.
1,"The visual aids ie. the diagrams used to introduce what DOM features are is great. It helps the reader understand what DOM features are.
There are no diagrams or visual aids to explain the flow of what the team plans to implement in the final project or their test plan or design plan. 
Suggestion:
- Adding visual aids for design plan/project flow/test plan would help the reader understand the project much faster and much better."
0,"Changes to be implemented as a part of this final project have been given in a detailed and pointwise manner, which is easy to read and understand for the reader."
0,"Yes, the design includes all of the required functionalities."
0,"I believe the design document is complete as it covers the required aspects:
- Purpose: Covered as a part of the scope and initial intro
,- Project Design: It does not have any details about the project design
- Test Plan: The test plan for the final project is well defined."
1,"- No UML diagrams related to this particular change provided. 
- A diagram showing the probable state diagram of what should happen with the change. Example: The problem is not able to get named getter so showing the flow of thing reaching to this step before and after the fix would help us understand the issue a bit more."
0,- Based on the previous review's PR it is clear that servo has a very fixed standard in terms of what needs to be written in the source code and their code/suggested change follows that.
0,- The changes are very specific as specified in the issue on Servo GitHub so cannot argue much about that. They have mentioned everything that they need to do in this project.
0,- The doc is in continuation of the previous project and has many details. It's great that they added some information about what is the problem user-facing and what would happen after
1,- Overall almost complete but I would love to see some more UML diagrams of the flow of the states before and after the changes.
0,"The team has explained the project using flowcharts of DOM and screenshots of their test plans.
All the diagrams are easy to understand and provide the details needed."
0,"The team has maintained the documentation page really well and has explained the setup of the local environment for this project, introduction to Rust and Servo and the methodological process to make their proposed changes to the DOM. Their efforts for the Final Project are clearly stated and the test plan has also been explained."
0,The team has worked on the Mozilla project for their OSS project as well and they have very well documented their efforts and proposed changes.
1,"As of right now, the design doc seems complete. More information can be added to the doc if they are asked to address some other issue by their Mozilla mentor."
0,Doesn't contain many explanatory diagrams. Contains more code snippets from the previous OSS submission.
1,"It can be elaborated more, however what is mentioned is pretty self-explanatory."
0,The writeup is pretty decent.
0,The document contains all the necessary sections.
1,"The document seems almost complete. However, if the team adds more elaborate implementation, would be better."
0,No UML diagrams used
0,Complete
1,"Since I am only considering the material for the final project, more diagrams and screenshots could be added though I understand that it is a continuous project."
1,The comments are well written for the OSS project section but the final project section could be more descriptive.
0,"There's no design for the project, so i don't think that having diagrams would make sense in the document of this project."
0,"Team has specifically mentioned in the document that design patterns are not applicable for this project. As far as i tried to understand the code, changes looks good to me. They have given proper explanation for the changes."
0,Yes. They have listed down which files they are going to change and which part of the code has to be modified. They have mentioned on their wiki page that they haven't started implementing it. The design looks clean.
0,"Yes, the test plans are well designed."
0,"Yes, the test plan is neat, clear and understandable."
0,Whole task is to write test. So there is a very extensive test plan. All the manual and automatic tests are mentioned
0,Test plan included.
0,One of the best test plan I have gone through/reviewed. The visuals associated with each scenario are really helpful and self explanatory
0,"There are two issues for the project and both are covered in the document. As this project is an extension of the OSS project, so the document includes that as well."
0,The project itself is a testing project. they have mentioned all the cases that they are going to test very clearly.
1,"The test plans have not been discussed in the write-up. In each scenario that they have mentioned, they could have written the different test cases that they are proposing to write.  Example - Scenario 2: Author(s) get emailed when a reviewer has reviewed their work, they can mention the test cases and the plan of testing how is the author getting email."
0,All the necessary details are explained in detail. Team has also mentioned why the pull request is still pending and that's because of the test cases but not the implementation and code changes.
0,High level diagrams are not there. Don't know if it is expected in the Mozilla project. But they have added a lot of screenshots of the code they modified in previous project.
0,They have given a good explanation of what is expected from them in this project and what they are going to do to implement it. They have also given the flow diagram. This makes it easy to understand.
0,Yes. They have covered the functionalities required with proper diagrams.
0,"yes, the design include the test plan"
0,"Yes, their test plan almost cover every scenario with regard to their project."
0,All the required components of design documents are covered.
0,"Since the project itself is about Testing a functionality, the team has covered most of the aspects with the help of scenarios and flowchart."
0,- The document doesn't specify any visual aid for the final project part
0,"Yes, the diagrams help me to understand how tests run."
0,Diagrams and flowcharts explain the flow of the application clearly and in a very simple manner.
0,All the test cases are represented through simple easy to understand diagrams.
0,good use of visualization.
0,"- The issue states implementing missing DOM features and the authors have specified each feature to be implemented and the changes expected
- The document doesn't seem to specify any design changes proposed by the authors"
0,They have used flow charts to explain the various scenarios associated with the test plan which I found to be helpful for my understanding.
0,"in last round, there were no visual aid present in the design document. but team took the reviews into the consideration and have added the flow diagrams of all the scenarios that they are going to be tested. which really makes it easier for everyone to understand."
0,"Yes, the flow charts are very well explaining the changes proposed in the system. The team has used the flowchart for all the scenarios that they are testing."
0,"yes, the class diagram and/or other figures clearly describe the changes to be made to the system"
0,I never expected so much of visuals for a testing project! Great job!
0,- The authors have proposed changes with good quality explanations and have throughly considered the issue to be resolved
0,The team have explained the scenarios using flowchart which is good and easy to understand.
0,- The document provides all the functionality required
1,"- The document says the tests have already been written which is a good practice in behavior driven design
- The Doc must contain some information regarding how each feature would be tested"
0,The team has used visual aids which are easy to understand.
0,The authors haven't proposed any design changes.
0,The authors did not write about any proposed changes. But they have already written some initial edits.
0,"Yes, the team has mentioned all the functionalities that are required and mentioned in the google doc."
0,"Yes, the design is simple and clear."
0,"Yes, the design is simple and easy to understand through UML and visual diagrams."
0,The proposed design appears to be quite clear and precise.
0,"Yes, the team has done really good job at making it as simple as possible. it is easier for every one to understand yet describing all the necessary cases that needs to be tested."
0,"Yes, the design is simple and clear to understand. It is explained by the flowcharts. The changes they are proposing are simple, they are simply testing the email functionality in various scenarios."
0,"Yes, clear and simple."
0,"Yes, the design seems simple enough."
0,The design is sound and complete.
0,"Yes, the tests for the issue are well designed."
0,The test plan sounds reasonable and it is well designed.
0,The design appears good.
0,The design associated with the test plan is pretty elaborate.
0,"Yes, they have been given five scenarios in the problem statement to address and the team did come up with the design solution which points out all of those issues."
0,Yes the design appears sound and well-formed. The team has done a great job in designing the whole project. The flow charts in the design clearly explains the tasks for the project. The 5 scenarios that they have mentioned on the wiki page which clearly explains the design.
0,The design is well designed
0,"Yes, the design seems to be sound.
There're Problem Statement, Proposed Approach and Test Plan."
0,Yes the design appear to be sound. Team has done great work explaining the scenarios for email testing.
0,"Yes, the authors well explained all tests plans."
0,Authors have explained details in a very well structured manner.
0,"Yes, changes are explained adequately."
0,Profound explanation is provided pertaining to the changes to be done to the system.
0,"Yes, the team explained every scenarios really well that they are going to write test cases for. explanation is self describing for anyone to understand."
0,The changes are less discussed but the team is clear about the places where they need to test the email notification functionality.
0,"Yes, they have explained why they want this change and how to do it."
0,"Yes, the authors have adequately explained the changes to be made to the system."
1,"No test plan exists at all. 
No section about running existing test cases.
No section about writing new test cases or modifying existing test cases.
 
Suggestions:
- add a detailed test plan (including running existing test cases, adding new ones or even modifying existing ones)"
1,"Test Plan is very straightforward and it does not include any edge cases. More test cases can be added like: if required,is functionality where more than 2 TA's perform review of a same assignment supported of not."
0,The test plan looks complete on preliminary exam. They have identified all the edge cases as far as I am able to comprehend
0,No test plan was mentioned.
1,"No, the flow chart is wrong well actually it is according to there previous solution where the instructor or ta is a participant. There current proposed solution suggests adding a ""hidden"" field (which again is bad variable name) check if it is on or not. So I suggest changing flow chart."
0,"The team has done a great job in creating an activity diagram that summarizes their proposed implementation and the issues.
This diagram is very well made and has a lot of details about the implementation plan of the project."
0,The design includes UML flow chart that explains the project flow clearly.
0,"Changes are not made in the diagram as per the new implementation plan.
Diagram still depicts the issues which were described in the first round of review."
0,The team has used visualizations to explain the proposed changes
0,The authors have done an excellent work of using visual aids for describing the proposed system . It helps in getting a clearer view of the system proposed.
0,They have made use of visualization to explain the requirement and current flow in good details.
0,"By adding an actual screenshot of the actual Expertiza page and a Flow diagram that shows the flow of the actions that lead to the Reviews page and Assign Grades page, it is very easy to follow the flow of the process and gain valuable insight into the thought process of the team as to why they proposed all the changes.
The visual aids on the design document definitely helped in making the understanding process easier and by adding more to the relevant content."
0,"Yes, it is simple as possible."
0,"The design seems to be pretty straight forward and very simple to understand.
The team has done a great job breaking down the whole project into 4 major issues that need to be addressed.
For each of these issues, the current scenario, the requirements and the proposed solution is mentioned. Along with screenshots where ever possible."
0,The  design flow is logical and simple.
0,Issue 1.2 is very refined and implementation is made much simpler than it was before.
0,"The design appears to be fairly simple. The issue section has been broken down to the current scenario, requirement and proposed implementation which allows for easy understanding of the approach."
0,"Yes, the design appears good and simple."
0,- The design seems complex and the changes need to be explained clearly in the doc
0,Yes the design and approach they mentioned seems well explained and simple & easy to understand.
0,The authors have lucidly explained the changes that needs to be done in the project. The ease of explanation as well as abstracting details to give a higher level view makes it easier to understand what authors wants to convey. The design is also intuitive and use of examples provide a better illustration of the information to be potrayed
0,The doc is very clear and flows smoothly. They have presented their approach and solution in lucid detail.
0,The write does give a good overall view as to how the approach is being undertaken. it does seem simple and straightforward .
1,"Yes, the design appears to be sound. But the proposed implementation in issue 1.1 to make authorization helper file does sound fishy as it can be checked through if conditions or I suspect expertiza should have the implementation of checking whether the user is course staff member so I don't think it is necessary to create new helper file.
Also, they suggested adding field name hidden which I think is a very bad name for the variable. Here hidden is used to indicate if the user is hidden or not which is not indicative in a variable name. So I suggest the name to change to is_hidden_participant or something like that."
0,"No mention of using any design patterns or principles exist in the document.
Apart from that the problem statement, the current scenario & the proposed implementations have been well defined."
0,"Yes, they have mentioned the approach how they are going to solve this."
0,Yes the design appear to be sound and follow principles.
0,"The design appears intuitive and Ruby coding principles appear to be followed.. However, I cannot see any design patterns that are planned to be followed."
0,"The design appear to be sound, following appropriate principles and using appropriate patterns. The design document contains Problem Statement, Current Scenario and Proposed Implementations and Activity Diagram of the Proposed Implementation."
0,"The proposed design plans to reuse the existing code, thus, follows DRY principle. However, the design suggestion to add a hidden field is not a scalable solution but seems like a hack, a better solution should be thought after before implementing the code."
0,The design presented is sound and well thought out. THey have detailed explanation of how they are going to go about in implementation.
0,"Yes, the design does seem sound and is following the appropriate patterns."
1,"Though the design document covers all the important content that should be in a design document, the way it is structured does not follow appropriate principles and appropriate patterns.
I think the team should have a Goal and Scope of the Project section at the very beginning ( before the Problem Statement section) which has the Goal of the project stated clearly.
It would also be a good design practice if the design document is not sectioned into issues themselves. I would suggest sections like Current Implementation, Requirement, Proposed changes and Expected Outcome, all of which will have information related to all the issues."
0,Yes they are well explained.
0,"Apart from the Test Plan, the authors have done a good job explaining all the possible issues that need to be deal with this project.
For every mentioned issue in the design doc, the team has mentioned:
- Current scenario
- Requirements
- Proposed solution.
this straight forward approach helps the reader understand the project very easily"
0,The authors have adequately explained the changes made to the system.
0,Changes are not pinpointed but described well.
0,"Yes, they have mentioned the changes done to the system."
0,- Must elaborate the change planned for each issue
0,Yes the changes are mentioned with detail view and approach they will take to solve this issue.
0,"The authors has made it a point to address each issue as a set describing the current scenario, the requirements and a proposed implementation . This clearly defines the vision and clarity of thoughts which reflects itself in the form of adequately explained changes that will be proposed to the system."
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Problem Statement, Current Scenario and Proposed Implementations and Activity Diagram of the Proposed Implementation."
0,The team has taken the 1st review into account and modified the doc accordingly.
0,"The authors have adequately mentioned the changes that are proposed to be made to the system. By mentioning all the files that the changes will be made in,  the authors have localized the issues and traced them to their root.
It becomes easy to understand the proposed changes along with the file names as it gives you more information about the  specific controllers, helpers, etc. that the issue is associated with."
1,The diagrams are pretty good.but in the activity diagram they should ask a mentor if the instructor can do a review after the deadline if ye then they would have to change the diagram.
0,UML has been used to describe the flow in detail.
1,"Diagram depicts the approach very well observing the current scenario.
One thing missing as per the current approach is ""checking if the user is a TA/Instructor"" before ""Is TA/Instructor a participant""."
0,- The use of flow diagram to explain the working aids understanding of the plan
0,added flow chat which is quite explanatory.
0,Flowchart was made to show the approach to solve the problem
0,They have made use of bare minimum required visual aids to explain their point. This makes the doc flow easier and be less cluttered.
0,"The proposed changes have not been explained in detail, hence I am not sure if it is the right fix."
1,"I think Issue 2.1 and Issue 2.2 can be merged in to a single method and a simpler implementation can be figured out. I am not sure of this but I am assuming that there might be a place in the framework itself where you can get list of all the instructors and TAs of the course and if you get that list, approach to tackle Issue 2.2 and 2.3 can be refined."
0,"New Course_staff_helper may not be necessary. Look at alternative approach.
No mention of database changes for Review mapping. This is necessary to check and store the reviews done by TA? Instructor
Adding TA/Instructor as a participant: may not need
Showing Student that their assignment has been reviewed by instructor/TA: perfect"
1,"Issue: Allow TA/Instructor to add himself as a participant
For this the proposed implementation of adding TA/instructor as participant is not good instead you should add some kind of role based permission mapping."
0,Without more explanation I cannot say for sure if it is the case or not.
0,The design seems good and would not introduce any code smells.
0,The approach seems pretty solid and doesn't seem to lead to smelly code.
0,Yes the proposed changes are easy to follow and overall quality of explanation is good.
0,The proposed changes have not been explained in detail.
0,"The explanations are very well written, easy to understand and are sufficiently detailed."
0,"Issue: Method to check if the user is instructor / TA for the selected course
Trivial as the method implementation should be a part of edge case check for reviewing itself.
The explanation is easy to follow and written in a lucid language.
The tasks are highlighted with detailed description below them.
The easy language coupled with the Activity charts enough to understand the task description as well as the proposed solution."
1,"Though a proposed solution is given for each issue, what exactly is being changed is not clear enough. By this I mean, what files around the existing files are being considered, what technically is being changed, and an understanding of what other files are dependent on the files being changed is not clear."
0,Yes design incorporate all functionality
0,The design document included all the required functionality.
1,The changes made in the DB should be mentioned via some form of chart or diagram.
1,"- The team has incorporated most of the functionality required
- The writeup must explain whether all the TA could review all the assignments or particular assignments would be assigned to certain TAs
eg. TAs focusing on Mozzila projects may not reviewing Expertiza projects."
0,The explanation for proposed changes is a little vague.
0,All the functionalities are well described and given good explanations on the doc.
1,"The design document does incorporate all the functionalities to be implemented. Although, the project has already been done but there were a few challenges and comments written in the google doc. Maybe mentioning how this design would override the projects already done, and how this code would be cleaner compared to the code already submitted, would help in understanding the difference in approach in a much better way."
0,The design doc contains all topics required.
0,The design document should have included a concrete test plan.
0,Design doc is sufficiently complete. It is also very detailed and is written in simple language.
0,"Code-Level specifics including proposed files to be changed and methods to be implemented is not clear.
Design Pattern to be implemented needs to be decided."
0,There is no mention of test plan in the document.
0,"1) Test plan section is missing.
2) Rest all is explained perfectly"
1,Test plan and automated testing approach seems to be missing in the doc. Also more insight into why the existing code fails and how it is being improved will give a better understanding of the project at hand.
0,The flow chart is added.
0,"I like the way they've used the flowchart to indicate the changes and the code flow for both, the students and the instructor"
0,Visual aids are proper and makes the flow of the application clear.
0,The visual aid and bullet pints were provided to give more clarity nd better explanation
0,The team have drawn a very nice flowchart which shows how they are going to approach the problem while specifying details about what data format will they use to pass data and which web service API will be used. It really simplifies the statement and is a perfect balance between low-level and high-level design.2
0,Designs looks fine.
0,"It has not been mentioned which files are associated with their project or where changes will be made. 
The proposed flow however looks well laid"
0,"1) response_controller.rb is where they claim to make changes. However, they haven't mentioned anything about the methods to be changed/added
2) Too early to judge if this new design will make the code smelly
3) I don't think the new design is complicated.
4) As far as the response time is concerned, I think it will certainly take a hit because of the API call
5) The design is good enough"
1,"The design to solve the problem looks fine. Since reviews are handled by response_controller, it makes sense to add methods in that class to calculate statistics for review feedback. The code would not get smelly if the team take care to always make modular changes. The design doesn't look complicated. The team might probably find gems which calculate some basic statistics and be able to visually display it. The response time may increase slightly but it really depends on the way they work with API's and pass data through the pipeline."
0,The explanation is good to understand.
1,"- I like the language they used to explain the changes but some of the stuff seems like they are making stuff up to add more lines to the documents. For example, they used Check whether CORS needs to be enabled for calling API. This doesn't make sense and doesn't need a separate set of tasks to be listed.
Simple concept: In the frontend, if you are calling anything other than what belongs to your domain you need CORS in the backend you do not. 
Suggestion: Check the response time of the 3rd party API. If it is small write a wrapper in your rails code to avoid cors issue which you will surely face if you are doing it in the frontend."
0,"Yes, I the changes proposed by the authors seems to be logical way to go about this task."
0,easy to understand.
0,"The team has pretty much considered almost all the scenarios. To show suggestions on the feedback to the reviewer. however for the instructor part, how exactly a review is termed as constructive. Is it binary 0,1 or some fractional score- that is not clear."
0,The explanation was detailed and covered all the points. Good job
0,The team's explanation of the problem statement is lucid. They have properly defined their approach by mentioning low-level and high-level details and also have a test plan set up.
0,Yes it does include all the functionality required to be executed.
0,"Yes, it does incorporate the main functionalities mentioned in the document. However, they haven't mentioned their plan to measure the total time the API will take to generate the metrics."
1,yes they have incorporated most of the functionalities in their document. However they have not said anything about how are they going to test the running time of API. One suggestion from my side is to use Postman to find out the average running time of API. There is an option in postman which is titled monitor. there you can find the average response time of your api.
0,"1) The functionality required in the document is covered in the design
2) They have separate problems and described it more clear than it was in the requirement"
0,The explanation was very clear and it sounds like the problem has been addressed fully.
0,The design doc has included everything.
1,"- The design doc looks good. Need a better UML chart. Suggestions are given above.
- I would love to see some details on the API which will be used i.e. probable contract, dummy request etc."
1,"The design is fairly complete. As far as the testing part is concerned, I think they should make use of SimpleCov too."
0,The design seems compelte and perfect
0,explanation is easy to understand
0,"They don't have a test plan section, however, I understand testing the UI could be challenging."
0,They have provided appropriate visuals and screenshots explaining the current behavior of the system.
0,The design appears to be pretty straight forward and clear.
0,Their approach seems to be very well designed and they also have a backup for their approach.
0,The authors did a great job of explaining their project through wiki.
0,"Yes, they have explained well about why they want to make a change and what they plan to do."
0,No test plan/ test cases are included
0,They included screenshots to explain the current issues present in the system and how they are planning on rectifying it. But there are no UML diagrams that explain the work they are planning on doing.
0,"Yes, they have a decent design in mind and a way forward."
0,"They explained their approach however, test cases and files to be modified were not explained in detail."
0,Yes they have added the test plan describing the scenarios..
0,"Yes, the design is simple and easy to understand."
0,Yes they have added the details and clearly explained what needs to be done for the project
0,"Test plan has been included, but what files are being considered for RSPec testing isn't clear in the design document."
0,"An update in regards to workflow is being shown this time around, which definitely helps in understanding the big picture for the project. Also, UI changes have also been shown, helping in understanding what is to be done."
0,"Designs seems straightforward, but its just what is being used to achieve the expected result is still unclear to me."
0,"Changes being done in which files is clearly mentioned, but how it is going to be done is not clear, in my opinion, which previously existed in the same design document."
0,yes the test plan is well described.
0,They have implemented the visual aid as suggested earlier.
0,"Yes, they have made the changes suggested and design document is well documented."
0,"The design follows appropriate design patterns and appears to be sound. The team has aptly explained all the sections of the document, emphasizing on the proposed code changes. Along with that, the UML diagrams and test plan has also been explained properly."
0,"The authors have explained the current scenario, the issues in that and what will be the newly proposed code changes. The test plan for the same has also been appropriately explained."
0,Diagrams are properly commented and explained to give the reader a complete understanding of the proposal of their changes.
0,"Yes, design is simple and properly explained using visual aids."
0,Authors have put effort to find out different ways of achieving the task and selected the best one.
0,"Yes, authors have explained the changes to be made and documented carefully to make it easy for the reader to understand."
1,"The test plan for UI testing is simple and clear as well. My issue is with how the team has described writing tests for code changes, as it is quite brief. For instance, they could elaborate on what their plan is when writing new RSpec tests."
0,The team has made better use of screenshots and flowcharts compared to the previous round. The design is now way clearer and easy to understand.
0,"I could not find any clutter or redundancy in the design, it is as clear as could be."
0,"Yes, all tests are well planed."
0,"Yes, all diagrams are clear and helpful."
0,"Yes, the designs for all problems are clear."
0,"Yes, the solutions of the team to each problem are well designed."
0,"Yes, the wiki well explained all changes to be made to the system."
0,"Design does not appear complex,but as it is not explained properly,its a little ambiguous"
0,"The design document talks about different issues and provide solutions accordingly.But,there has not been design patterns used"
0,"Yes, they have included flow-chart diagrams for their changes. It clearly explains the changes they intend to make."
0,"Yes, the design is simple and intuitive. They have utilized good flow-chart diagrams to explain how their solution is going to solve the given problem."
0,Design diagram is very descriptive.
0,"Yes, the design looks good. They have used UML diagrams to explain their design strategy and other screenshots to explain how it will work."
0,"No, structure seems fine."
0,"Yes, they have well explained the changes to be made to the system. They correctly juxtaposed the given problem issue and the appropriate solution they are planning to implement."
0,No desgin pattern.
0,Changes are clear.
0,Detailed Rspec for Issue not given.
0,The test plan is detailed enough.
0,The only figure mentioned describes clearly the flow of the solution.
0,"Too technical, team does not seem to have viewed the reviews at all."
0,"Like previously said, the design isn't presented well enough for the reader to understand."
0,"The design seems to be an extension of existing design, the changes being an extension of existing functionality."
0,It is kind of hard to grasp from the document the exact design the authors are proposing. So it cannot be said how good it is.
0,They have only mentioned the files that will be modified. There is no explanation as to why those changes are necessary.
0,"s in the previous review, the explanations were not clear and the only major addition in this roud is the addition of the test plan."
1,"The test plan is a bit vague, I would suggest the team to add files/method names that would be created/updated as part of this feature."
0,The document has a single class diagram which is good enough to understand the proposed solution as the solution itself is very simple.
0,The design is very simple and has minimal changes. Good job team of keeping the design simple and not trying to over engineer the solution.
0,The design is sound and perfect for the problem at hand.
0,"While the document is very helpful in understanding the changes, mentioning the files and class and methods at appropriate places would help in getting further clarity."
0,Yes it does but it is redundant since they have barely mentioned anything.
1,"The team mentioned the issues and also test plan for each issue they are going to fix.
Also, the files needed for the issue is also mentioned.
The test plan consisted of the test steps to reproduce and test the issue.
Since, it is the bug fixing and the it is not the enhancement that the team is going to do, the steps mentioned in the test plan seems reasonable and will really test the functionalities in my opinion.
Some of the other tests can be
-whether the meta review option is available if we login as a TA.
-What happens if the student has requested for a review and begin link is appearing on the screen or not etc."
0,"Yes, the design seems ti be simple."
0,"Yes, the design appears to be good. The authors have used appropriate principles and thoroughly thought of the design process."
0,Yes the authors have adequately explained the changes which are to be made to the system. The authors have described each of the Issues thoroughly and explained the problem and solution for the issues.
1,They have attached screenshots of what needs to be done but having mockups of tables would have been great way to make their changes more understandable.
0,"Since, it is 3 bugs that needs to be fixed, the proposed design plan of introducing a boolean variable seems simple according to my opinion.
And since it is not a major enhancement, there won't be any drastic changes in the code files.
Also, since there is no proposal of new model/controller which might again include tests for them, I think the design is simple and easy to implement too."
0,The author failed to mention three issues but all other issue which are mentioned are explained really well.
1,"For the approach 2, they could add more explanation with design diagram."
1,The team has propeosed to change the already added method. The approach 2 add a new framework which might indirectly increase the time of the system.
0,"Yes, they have included test plans for each subgroup of issues/changes and have covered all the functionalities to test."
0,Yes they have incorporated all the required functionality and gives details about the requirements.
0,The wiki is missing the test cases
0,"Yes, design appears to be pretty straightforward and easy to follow because of good use of visualization."
0,"Yes, they have explained all the necessary changes to made in the system in the form of diagrams and also mentioned in which part of the code these changes will be reflected."
0,"Yes, they have clearly listed all files to be modified among the first three issues.
Since the last three issues only need supplementary tests, there is nothing to be modified so far."
0,"I can follow the flow charts of the design strategies of first three issues to catch their design logics of related functionalities. All include necessary steps and show simplicity.
And they have listed all test steps of the last three issues as well.
One problem is that there lacks the flow chart of issue#1354. It looks like they have successfully implemented this issue. But they should have made clearly statement on this issue."
1,"They have placed the test plan, but there is nothing like RSPec test. Manual testing is good but it has its own disadvantages. They have not mentioned anything about rspec tests. I think addition of Rspec test will make it more robust and less prone to errors for future usage."
0,The team have not mentioned the files they will add or edit except one file in which i do not find any problem.
0,All diagrams are proper.
0,Design is simple and clear.
0,"Design is good, but they have not made any changes since last submission."
0,There is a test plan in the writeup with detailed steps for testing the functionality to be changed.
0,"The team has used screenshots, flowcharts and UML diagrams, all to great effect."
0,The proposed code changes look good. The new design proposed by the team looks simpler and the name of classes where changes are proposed look appropriate.
0,The proposed changes have been aptly explained by the team. The team has attached screenshots as to where they will make changes and what type of changes will be made. Appropriate explanation is given stating why the said approach and what will the team do if that approach does not work.
0,"The design is remarkably lucid, I don't think the team could have done a better job."
0,"The authors have explained the changes in great detail, including the files to be changed as well as what screens will be impacted due to theses changes."
0,The design incorporates all the functionalities required as stated in the document. The team has included the issues present in the existing design and the  new proposed solution.
0,They've inserted at least a screenshot for every problem they are supposed to solve. Which makes it easy for the reader to visualize the problem.
0,"Design is not explained descriptively, so it is a bit difficult for the reader to understand what they are proposing of doing."
0,"Again, I am not sure about the exact implementation the team is going to follow, though the high-level plan of action seems to be sound."
0,"Yes, they have drawn a use case diagram."
0,"Yes, the design looks simple. They have drawn a UML Use case diagram to explain the design. It makes the design easier to understand."
0,They have used good screenshots to explain the changes they intend to make. They have also described the problem statement and the appropriate solution at every issue.
1,"Other than lack of explanation of the plan to be followed, my concerns are that the authors should include more details in the problem statement and add a test plan section which is currently missing. The high-level explanation seems to be fine."
0,The test plan provided does not seem to cover all the edge cases that may occur. The team can do a better job here.
0,They provided with screenshots to understand this problem.
0,"Yes, the team has made good use of UML diagrams to assist readers in understanding the flow of the project."
0,It looks fine but cannot say for sure untill some implementation is seen and details of the code is reviewed.
0,"Yes, the design has been explained in simple terms. Use of visual aids further helps clarify any doubts that a reader may have."
0,Good explaination was given for the approaches that they are taking.
0,"Yes, the design appears to be sound an complete. However, the team has not mentioned any design pattern they will be leveraging."
0,"Yes, the authors have provided adequate explanations and made use of visual aids to help a reader understand the flow."
0,I thin the design that they propose can help address this problem fully.
0,"Yes, the design does include a test plan and also there are seperate test plans for each issue. They do really seem to test the functionality."
0,"Yes, the class diagrams and flow charts clearly describe the changes to be made to the system. They explain the functionality pretty well."
0,"Yes, the design appears to be as simple as possible, without any complications and unnecessary additions."
0,"Yes, the design doc appears to be sound, following appropriate principles and using appropriate patterns. The files to be modifies seem to be correct."
0,"Yes, the authors have adequately explained the changes to be made to the system, and also the use of flowcharts and class diagrams help a lot."
0,The visual aids are helpful for understanding the problem.
0,"Images are useful viaual information for the documentation, though a bit large."
0,Explanation of the issues is fair enough. Diagrams and images provide useful information too.
0,Document provides a great overview of what is to be done in this project.
0,"While there are some diagrams, they do not always serve the purpose they are meant to."
0,The authors did not propose a design.
0,"Yes, they have added the solution and approach they are going to follow to fix the issues."
0,The testing plan and the design strategy are not mentioned. Going ahead in the implementation of this project it could be very vital to refer to.
0,The project design is missing. (There is a sub-topic called project design in the document. But the content under it cannot be called project design.)
0,"SS of the app at problem locations are given which help understand the problem
UML Diagrams are not provided."
0,"Given that the problem statement is not that complicated, the team has included a flow chart which is more than sufficient to understand the strategy. Concise yet good enough."
1,"1. I think addition of Use Case and Sequence/Flowchart will help understand the design.
2. No requirement of UML here
3. None"
0,"1. The author have not described classed for Issue 1. 
2. No
3. I think the design is pretty good
4. I don't think it would increase response time.
5. No"
0,Very good job on putting together this document. I was able to understand all the issues that you plan to fix.
0,The only thnig that needs to be added is code level changes. Good job team!
0,"Yes, they've addressed all the issues listed in the specifications doc"
0,"There is no specific proposal of the changes as it is not a new enhancement.The team mentioned the files in which the issue can be fixed at the end of each issue.
Since, the issues are pretty clear with the snapshots and all attached, there was no difficulty in understanding the motive of the team."
0,"The team stated the problems to be fixed and also indicated in which file the issue can be at the end of each issue.
The motive seems to be pretty clear to fix the 3 issues related to the meta reviews which is the expected outcome."
1,"The wiki page is clear and conveys the intent of the team.
The team can include the code snippets if possible so that people who might have already worked on that feature can clearly guide them whether the point at which they are thinking to make change is appropriate or not according to their knowledge."
0,All the changes proposed in the form of flow charts and design strategies seems good and are easy to follow.
0,They have covered all the necessary sections of the design doc.
1,"As mentioned above, the flow chart of the design strategy of the last issue did not clarified what exactly to be done in response of different values of `isMetaEnabled`.
Besides, there should have been another figure on the second issue - showing the wrong number of meta-reviews left."
0,"Their descriptions on every issue completely covered specific problems and illustration on how to operate on UI system, thus the explanations are very comprehensible."
0,"Yes, there are three tasks issued in total. The first two are about fixing existing bugs about meta-review, one for the link and the other for the number. And the last one is to enable instuctor to whether to open this section.
And the wiki of this team completely contain all these three issues and correspondant illustrations."
0,"The descriptions, the approaches to implement functionalities and the test plans of every single issue have all been specified clearly."
0,There was no solution in the text only the file names were mentioned. How and what all changes will be made is still unclear.
0,Yes they have incorporated all the changes.
0,I think visual aids are used properly.
0,Flowcharts and UML diagrams are used when appropriate and are also specific in nature. I think the team has done a good job.
0,The team has divided the problem cleanly into separate issues and mentioned a good plan of attack for each.
0,"Yeah, this part seems good."
0,I could only see the wiki but code or interface.
0,I didn't understand why they post a screenshot of system error.
0,There is no expertiza link in they submitted.
0,"Yes, they used UML diagrams to describe the design strategy such as Use Case diagram and the flow chart which explains how their changes are going to solve the issues provided. The use case diagram follows the design style for UML standards."
0,They have spent enough time on the design document. They added the proper and relevant screenshots. The UML diagram shows that their design is easy to implement.
0,Yes. It covers functionalities required to fix the given issue. They have given good approaches and solutions to the issues with the diagram.
0,The team has made use of visual aids nicely to help the reader understand issues and the proposed solutions.
0,The changes proposed appear to be sound and it doesn't seem like the changes will lead to smelly code.
0,The test plan could've been a little more detailed. Everything else is well written and seems complete.
0,The flowchart looks very descriptive and explains the functionality pretty well and they are pretty helpful.
0,The changes that the authors have proposed seem good enough to execute the functionality.
0,"Yes, the design strategy does implement all of the functionality required."
0,The design doc seems complete and good enough.
1,"No visual descriptions, screens are provided. But since this is a test project, I don't think it should be of much importnce. Although, the team can create a small diagram explaining the scenarios which will be tested. Also, UML diargram can be used to explain the tests' relation with database."
1,The changes proposed by the author are clear and the test plan looks to be nicely designed. Just one problem is that they have not considered inter dependecing between those 5 use cases. Team can add some more tests covering multiple use cases in one to test them.
0,There are no diagrams
0,Lacks any sort of visual aids.
0,"NO UML diagrams, or mockups of screens or tables."
1,"There are no visual aids which are used, the team could have used dependency graph to help the reader understand a bit more.
But i would like to give the benefit of doubt to the team as it is hard to come up with some visuals for any testing projects in general"
0,No pictorial representation is used.
0,"Since it is a test plan, the diagrams may not be applicable.
1. Not applicable
2. Not applicable.
3. Not applicable"
0,"1. No.
2. No.
3. No.
4. No.
5. No."
0,The team has covered all the scenarios in a basic sense.
0,The design is not explained properly.
0,Doesnt look like there are going to be additional methods. It is just the testing of email functionality.
0,The author have purposed approaches to test the missing functionality for email and have explained their steps and test plan in detail.
1,Yes the design incorporate all the functionality required. The author may add Use case diagram for email functionality.
0,The design seems good with test plan being explained properly and files that are to be modified are also listed.
0,"The background and problem statement is not very clear, what is the problem details about?"
1,"In scenarios, they've written the name of controllers related to some functionality. To make it more informative they can provide the name of methods and different routes used to call them."
1,The authors approach is mentioned but the can also add the scenario that what will they do if the  testing fails. How will improve the functionality in that case
1,"- The authors have proposed the tests which they have planned to perform
- The document must highlight how the current testing for the feature is or if there isn't any and the need for each test they are writing. eg. method x must be tested as it is a query call or a command."
0,The changes look good.
0,Scenarios have been beautifully explained in Wiki Design document.
0,"All the other implement is good, the proposed approach does not include the design pattern analysis and design diagram."
0,"Yes, the design incorporate all of the functionality required"
0,The design document considers all the scenarios and functionality tests.
0,- The document describes the features where mails are sent
0,Functionalities are covered.
0,The scenarios are carefully identified and team did a great job in idenfying the places where changes are needed in such a short time.
0,Yes the design includes all of the functionalities
0,The document contains all part needed.
0,Everything else is mentioned correctly and descriptively.
0,The design is almost complete with a few changes that can be done.
0,Design and the analysis of the changes needed looks complete and near perfect.
0,documentation is complete.
1,"They have embedded two Use Case diagrams. But both these diagrams are exactly the same. The description says that one is for teammate review and the other one is for view submission, but the diagram does not reflect it. It may have been by mistake. Both the diagrams are the same, one would have also been sufficient, the other is unnecessary."
0,UML diagram explains the flow of code and its helpful to understand whole design of the project.
0,Design is clear and easy to understand. Proper details are present in document to understand how the implementation would be done.
0,Plan proposed by user is clear and easy to understand.
0,Document mention clearly what is required to be done is this project
0,"Design doc looks complete, author have mentioned every thing for this project."
0,"Yes, they have captured all the requirements in their Wiki page."
0,"No, they are adding things like creating a new controller. But it is too avoid complicated code in the current controller which the previous team has modified. I feel all the changes that they have specified make sense."
0,They have included and explained all the mandatory sections. It is seen that they have given a lot of thought to their test plan. They have carefully jotted down each feature to test.
0,The authors have included visual aids.
0,Yes all the functionalities are included.
0,The design doc is complete
0,The explanation is good.
0,the design of the project incorporates all the functionality required. all the metrics required to assess teammate contribution.
1,the two use case diagrams provided for two approaches are almost similar. more explanation needed for the use-case diagrams.
0,"the design proposed by the authors is pretty good. they addressed all the issues along with code quality, redundancy, etc."
0,"The design plan sounds good. They've proposed to follow good coding practices in ruby, such as DRY principle."
0,Author has mentioned the changes carefully and distinctly. Documentation shows the details of changes category wise which helps the reader to understand the tasks.
0,The design doc overall is very complete and covers every aspect needs to be displayed.
1,"The use case diagram looks helpful, but the 2 sides of it feature some redundancies. It may be possible to combine them into one use case diagram. It would also be helpful to add a UML of the relevant classes."
0,"1. Everything seems good and the use case diagram did help me understand the project.
2. The use case diagram follows the convention.
3. All the diagram provide enough details."
0,"1. the task doesn't require methods to be added.
2. No.
3. No the design doesn't look complicated. The design provided by team is enough.
4. Not applicable
5. The effort provided by team is enough."
0,"Yes, The design incorporates most of the logical functionality and is clearly explained."
0,The design looks good enough. Nothing is missing.
0,This design document fully incorporates the required functionality and has great plans for how to refactor existing code.
0,"After reading this, I have a great idea of what functionality will be present after the change and how the students for this project intend to refactor existing code."
1,I like the inclusion of a use case diagram but I don't think it adds a lot. I think a UML/other class diagram would be more useful for illustrating how the additions affect existing code.
0,"Overall, the design doc seems complete. It covers most of the required aspects. Details are added but only at few places, not many."
0,"Not many changes are proposed. However, authors have identified many RSpec tests."
0,"The design doc is complete and is adequate enough. It is concise, expressive and understandable and easy to follow."
0,"Yes, the design doc implements all of the functionality required and is adequate enough."
0,The changes that the authors have proposed seem good enough. The explanations are descriptive and understandable and adequate.
0,The designs proposed by the authors seems pretty good and there do not seem to be any errors.
0,"The use case diagram given by the author are very understandable and helpful, follows all the conventions."
1,"The team has made just one use case diagram, no class diagrams were used. They could have helped in understanding the database design's connection to the classes and stuff like that. Two diagrams of the output result are shown which are quite impressive."
0,"Yes, the design looks robust and appropriate principles seem to have been used. The write-up also mentions those quite well."
0,"As mentioned in the last review, the proposed changes are not adequate to me, and no changes have been made so far."
0,"1) The explanation is adequate and easy to follow
2) Changes are explained in detail and sound reasonable"
0,"1) The design is absolutely sound and comprehensive
2) They have considered specific principles for this project
3) The pattern is appropriate and good."
0,"1) The design is simple enough
2) Each task/step is explained in elegant words and easy to follow"
0,"1) The test is deep enough
2) They covered how to test manually form UI
3) They also explained the automotive RSpec tests"
0,The authors do a great job of explaining why changes are required. They list each feature and what needs to be changed for it. This is under the Feedback and Improvements section. They state each problem and solution here.
0,"As this is a refactoring project, it focuses on simplifying everything. It plans to DRY out the code, as well as to manage the javascript used by the project. A new controller must be added as well."
0,"The test plan seems pretty solid. There is a list of what tests need to be added for the RSpec. The functionality seems covered by these tests. The team explains that there are no required UI tests, as mostly an API connection to Github is getting updated."
0,Design is clear and very simple to understand. Helps to follow the functioning of the code.
0,"Yes, authors have explained the details about the changes to be made to the system."
0,"yes, the design does include the test plan. and as per the document, the tests are not shallow and they will test the features."
0,changes have been as requested in the previous review. the use case diagram provided for the two approaches clearly mentions the changes that will be made to the system.
0,the design appears to be pretty simple and precise.
0,"yes, the design doc has all the required things, following the patterns and appropriate principles."
0,the authors pretty much explained all the changes to be made to the system in detail.
0,Yes the authors have adequately explained the changes.
0,"Yes, the design document appears to be sound."
0,"There is a test plan, but it is not properly elaborated."
0,"Yes, they have added more visualizations and text to explain the problem statement better than the last time."
0,"Yeah, the existing code has many issues which they have properly identified. They have also provided reasonable solutions for the identified problems."
0,I see that they have updated their use case diagram from last time (which had 2 similar diagrams.) They have also added an explanation to their use case diagrams. The diagrams seem adequate.
0,"Yes, team has provided very good and descriptive visualisation.  I am not sure how they have taken some of the data and made graphs."
0,"Team has given good information about in design document, they have covered all the details required for a design document, only thins is that they have not mentioned about which design principle they will be using and how."
0,"No, the way team has explained, design looks simple. Team has done good explanation of the design. They have made section about plan of work which is really descriptive and make it easy to understand."
0,"There is no class diagram. However, they have added a new use case diagram."
0,"Yes, the design appear to be sound and the team seems to be using appropriate principles."
0,"Yes, the design seems simple as team have given thorough planning for UI, work flow and test plan."
0,"Yes, the team have provided thorough test plan with RSpec Test and UI Test."
0,"Yes, they have explained the changes very well."
0,I love the explanation and implementation for the design!
0,As simple as a design can be which attempts to consolidate multiple past attempts.
0,The visualization makes very clear how the proposed changes are designed and how they will affect the look of the system.
0,The test plan is very thorough in scope but vague in detail.
0,Explanations are detailed and sufficiently explain the changes to be made to the system.
0,Old and New graphs are added but use case diagram is not changed
0,"Yes, the authors have explained the changes to be made to the system pretty well, making use of use case diagrams and bar graphs."
0,"Yes, the design appears to be as simple as possible and with minimal complexity."
0,"Yes, the design includes a test plan, and also plans rspec tests. These tests really test the functionalities pretty well."
0,"Yes, the use case diagrams and the bar graphs explain the functionality and the changes to be made to the system pretty well."
0,"They have screenshots which shows what they are going to do in the project, which is understandable enough."
0,"Yes, team does include test plan, they have clearly mentioned about the test cases they will be running and creating to test the new functionality. Although they have not identified new test cases."
0,"The authors have adequately explained the proposed changes made to the system by including localized information about the issues  i.e. the files associated with a particular issue and the exact part of the code in that file that will actually be changed.
This helps in giving a view of how the issues will be resolved."
0,"The visual aids on the design document help in understanding the issues and proposed changes even better, especially the User case diagrams."
0,The design doc mentions all the functionality and more. It pulls from the requirements page and adds to it.
0,"1) It is a refactor project and they have covered every functionality required
2) They have referenced previous design of this project and make some improvement based on that"
0,Proposed changes section is very poorly written. Solution for only one problem has been mentioned whereas solutions for other problems are just written in one line.
1,"Great explanation has been given regarding the project purpose which helped me to understand the purpose. The description about design principles could be expanded. Also, regarding the tests, more description could have been given regarding the tests, for eg. one line description regarding each test case."
1,"After seeing the requirement of 1985 in Google doc. I find there are a lot version of this function, and it seems that those version both have some drawback. I understand those version is provided for reference, but I think the instruction of this project should mention whether or not they will refer those code and the reason."
0,The explanation is fairly adequate.
0,The could have been more explanation for this.
1,"- The writeup mentions adding new methods but doesn't speficy how the methods would achieve the functionality.
eg. it's interesting to know how the course_staff_helper.rb would determine whether the current user is a student or a TA
- Adding TA as a participant might be confusing and might start showing up on the team in reviews, marks and probably other parts which might get very difficult to handle; 
Consider adding TA as another entity (reviewer or something) rather than participant and having only option to review"
1,The authors have diligently explained the changes they want to add to the servo code base.
0,The design seems to follow appropriate design principles. They have properly articulated their design in the document.
0,"Although the project seems a bit complex, but the steps help in proper understanding of the proposed solution."
1,"They have represented the flow of their steps via a diagram, helped in mapping the proposed solution to its implementation"
1,Testing section only include results form previous project. The team does not mention the new steps for this part for the project.
1,Diagrams are very descriptive. Snapshopt of Github help to easialy see the changed made to the code.
0,Design looks clean. There are enough sections in this report.
0,"This report seems complete. This project is a follow-up, so it makes sense to be with some degree of completeness."
0,"Overall, I don't see desciptions about the new modification to be done next."
1,"The design does include a detailed test plan.
The existing, currently passing tests are not shallow and they will really test the functionalities implemented in the project.
All of the 44 already existing test cases are passing currently.
The team has not really mentioned about writing any new tests. The test plan mentions a plan to test the projects using existing tests that the servo build is successful and no errors are reported."
1,"The team has added a new flow chart to explain the steps they plan to carry out in their implementation fo the final project.
This is in addition to a very well designed flow chart they already had explaining the changes made in the OSS project. (as this is a continuation to that project)
This I believe will greatly help any person reading the document."
1,"The design proposed by the team appears to simple and straight forward.
It is easy to understand and give a clear idea of what and how the team plans to work on the project.
The 7 step plan that the team is going to implement in the final project gives a detailed insight to the reader of the changes the team is going to make in the project."
0,"The project design appears to be sound and well-thought-out.
The team has rightly mentioned that design patterns are not applicable to their project as it involves the implementation of methods and modifying various files and that the implementation section provides details of why certain steps were implemented the way they were. (Although the implementation section only covers the OSS project)"
1,"The authors have laid out a detailed stepwise plan of the changes that have already been made to the system as a part of the OSS project, as well as the changes that the team plans to make as a part of the final project, under the scope section of the document.
The flow chart also kind os summarizes the changes to be made to the system in a stepwise manner which is easy to follow."
0,Tests are not described. Neither is the testing plan.
1,"Block diagram of already provided step on the project page has been created.
A better diagram could have been made including what exactly the authors want to implement."
1,"No.
Design could have been made simpler."
0,Nothing much has been added for the Final project after 3rd OSS project.
0,Explanations are not profound and are not very easy to understand. The wiki lacks lot of details and intent to describe.
1,Mozilla Project. No tests are required to be written by the team.
0,"No visualizations present. It might be difficult for a Mozilla project due to the complex classed being involved in case of a browser. However, a simple flowchart would be really helpful."
1,The team has included all the steps to follow for the final project. Although a brief explanation about what is to be achieved by these steps would have made things clearer.
1,The team is clear with the next steps involved but has failed to provide a detailed explanation about how they're going to complete them and what exactly is the problem statement for the final project.
1,"It would be a good idea to create separate sections for the final project, add the files that are going to be changed with some brief explanation about changes, and include flowcharts if possible."
1,"The design does include the testing command. Based on the writeup and their project page, it seems that their initial and subsequent steps are one continuous work and hence the team haven't outlined the testing procedure again. It would have been better if the team could have mentioned this somewhere in their writeup."
1,"The visualization is good. The team have listed all the steps in a simple flowchart manner. It could have been better if they could have simplified some steps in order to make it easier for the reader to understand what is going on. Anyways, I don't think visualization is necessary since Servo projects involve changes in files and small modules only."
1,"The design should be simple and clear. However, I cannot comment on it since I am not able to understand the steps to be undertaken by the team. However, the steps have been listed by the Servo team so they would be well thought out beforehand and would be able to be done in a simple fashion since they know students are not fluent in Rust and working with such large systems."
0,"The design appears to be sound. As I previously mentioned, for Moz projects, the design is mostly taken care of by the maintainers and wouldn't need to be modified or dealt with unless there are some errors encountered in tests."
1,The authors haven't explained the changes very well. It seems they have listed the steps from their project page but I believe it must be because of the complexity of Servo system where a lot of files are involved and the program flow is extremely complex.
1,"The team mentions that they have not modified any major functional/behavioral aspects and also go on to show that they test their changes using the Servo provided automated test suite. However, they fail to mention what project are they proposing this test plan for - OSS project or the final project. The team can provide such details and probably more as the project development proceeds further."
1,Visualization aids such as flowcharts and Github code diffs have made it much easier to go through the document and get the gist of the design for this project.
0,"The design seems to be hidden in the steps explained in the scope and implementation section of the document. Though the flowchart really helps in understanding what the team is doing, it would be most effective if they were to modify the document to highlight the files changed, the major code changes and why the code changes are required (possibly with another UML diagram)."
0,"The design has been well structured. The document encompasses introduction to Rust and Servo, their design sketch and the implementation steps. The team could have stated their design more clearly, though the flowcharts are a real bonus. They can modify the document as the project progresses."
1,The team has made a very good effort to document their changes in the system. They have explained this with a detailed and coherent step-by-step write-up.
0,well documented test plan.
0,easy to understand diagrams
0,good desgin.
1,The test plan has been involved correctly along with the steps mentioned to run these tests.
1,"The team has made use of flow diagrams as of now under the scope section however, I feel that this would not be sufficient.
A separate flow chart should have been included in order to provide a bigger picture of how the implementation would look like taking into consideration the current changes done. 
If possible, I would recommend adding some annotated screenshots which would make it easier to visualize stuff."
1,"The design appears to be comprehensible for most of the users with appropriate flow diagrams included along with the detailed explanations.
However, when it comes to code changes, I feel that the description should have been a little more verbose as it would have added clarity as to why certain changes are being done."
0,The design looks to be sound in most of the aspects and covers almost everything right from scope of the project to the testing phase. So great job on that.
1,"I think that the implementation section could have been more descriptive explaining about the changes been done. 
It was expected that the changes made be represented in the form of code along with the some detailed explanations as to why the required code has been changed."
1,Yes. The design includes the test plan. The test plan has provided step-by-step instruction of commands to explain how the team is going to test functionalities in this project. Overall the quality of the 'Testing' section is good.
1,"Yes. The team has 2 diagrams explaining the details of steps they are going to follow. Including what changes they are going to make and details. For some step of the diagrams, it may be difficult for people who is not working on this project to understand. If more explanation for specific step can be provided, the diagram will be clearer and helpful."
0,"Yes. The design appear to be simple. In the 'Implementation' section the team explained the steps they are going to follow, which is clear and simple. Also, the diagram also explained steps in details. Overall the design seem to be clear and simple enough."
1,In the document the team clearly mentioned the design patterns are not applicable as the task involved just implementation of methods.
1,"Yes. In the 'Implementation' section, the team clearly shows the steps to do on this project, plus the explanation of each step and the screenshots of the modification of code, which is clear and helpful."
1,The visualizations repeat what is written directly above them and doesn't help me understand any better.
0,The project already had a test plan.
0,They used the automatic tests suite provided by servo so there are no new tests.
1,It still does not include a diagram showing the components in the system. The workflow diagram does little more than the textual description.
0,Yes it is easy to understand.
0,"The implementation of the project does not require a specific design pattern but the design seems sound. However, it seems to only include scope of project 3."
0,"No, there's no mentioning about how they will approach project 4."
0,"As exlained before, the diagrams are just a repetition of the written code.Not helpful at all."
0,design and explanation does not seem simple considering no background.
0,Extremely unsatisfied with the explanation of the project.
1,"The test plan for subsequent steps of project is not mentioned in the document. I assume it will be the same as the initial steps. But even if it is the same, it would have been a good idea if the team had mentioned that explicitly."
1,"The team has given a flowchart on the wiki explaining how will the approach the problem. As mentioned in previous review round, It can be made more informative by providing more useful information like which action will affect which other classes, call which internal functions and what would be the result of that action and how would that result be used by the next step in flowchart. Other than that I don't think that as such any use of visualization is required in this project."
1,The design seems complicated. It is complicated because servo itself is a huge project. But the team can try hard to make the design simpler/ understandble by using less technical terms and using more descriptive sentences in the scope section of the document.
1,"Since, this is a Mozilla project, as such, there are no specific design patterns required. But the scope written by the authors explain almost whole plan/approach towards the problem."
1,"Yes the authors have thoroughly and adequately explained changes which they plan using text and flowchart. But as said earlier, explanation is still very technical and not easily understandable by someone who is not aware about the code. For e.g. Call ""InitDispatchToEventLoop in new_rt_and_cx_with_parent passing the new function and the boxed network task source as the closure argument"" this line is hard to understand by someone who is seeing this for the first time. Team can try to make such things more simpler."
1,"Diagrams illustrate the steps only. It would be better to have an UML diagram to better show  the modified methods, variables, etc."
0,"The Wiki page describes changes already done. As this is a follow-up project, consider explicitly stating ehw changes to be done next."
0,Esplanations are clear. They provide links to useful links which help to understand concepts.
1,Design document seems complete. Probably this is a follow-up project.
1,"Design Document looks good so far, though update the team can improve the layout: sections can be splitted or add more."
1,"The visual aids ie. the diagrams used to introduce what DOM features are is great. It helps the reader understand what DOM features are.
There is a diagram to explain the flow of the project team plans to implement in the final project or their test plan or design plan."
1,"1) There is no concept of classes in Rust.
2) The design plan seems to be appropriate and will not make the code smelly.
3) It is not a Ruby on Rails-based project so, there is no question of existing gems.
4) The new design is adding a feature that currently does not exist, so effect to response time is out of the question.
5) The design documents appears to be great and comprehensive. A lot of effort has been put into developing it."
1,"Changes to be implemented as a part of this final project have been given in a detailed pointwise manner.
The flow of the changes to be implemented are given in visual form as well.
The explanations for the changes to be implemented all make sense and are well written."
1,"Yes, the design includes almost all of the required functionalities."
1,"I believe the design document is complete as it covers the required aspects:
It covers the Purpose of the feature (project) as well as detailed Project Design (steps) to accomplish it. 
- Test Plan: The test plan seems to cover running existing test cases. It does not include any plan to add new automated tests to test the newly added feature."
1,"No UML diagrams or tables are present. It might be difficult for a Mozilla project due to the complex classed being involved in case of a browser. However, a simple flowchart would be really helpful."
1,"No proposed changes in code. But from the steps, it seems quite challenging to make an estimate of what the changes will be."
1,Explanation about what will be achieved by the steps that the team will be following for the final project is lacking.
0,The team is clear with the next steps involved but has failed to provide a detailed explanation about how they're going to complete them and what exactly is the problem statement for the final project. It would be a good idea to create separate sections for the final project and include flowcharts.
1,"The team have developed a flowchart so the way in which they are going to approach and complete the steps is much clearer. However, the team could have shortened the sentences and added simple explanations for the steps in the flow-chart. Currently, the details are extremely low-level which might not be helpful in understanding the project at a high-level."
1,"Design is proper. Anyways, the Mozilla project maintainers have well-documented the steps and the system is huge so I don't feel there is a need to change the design unless maintainer feels so. The code does not look smelly and the functionality is complex that there do not exist pre-defined components."
1,"The explanation is proper for the initial steps however for the subsequent steps, the team did not explain the steps they are going to take to complete their functionality so it is hard to follow. They could have simplified the language a bit for the readers."
1,"Yes, the documentation covers all of the functionality. It would have been better if the team could have simplified the language of the requirements so others could understand it better."
1,The design doc is almost complete. No important parts are missing as theirs is a continuous project. The project purpose and design are clearly stated. Moz projects are a bit complex so I understand that they did not mention about testing the code.
1,The team has made flowcharts to explain the step-wise changes made/expected in their project. Everything is well-described and coherent.
1,"Changes look good.
The code doesn't look smelly. 
Mozilla codebase changes - code design seems alright.
Response time will probably not increase.
The design seems alright. No need to expend more time than required."
1,The explanations are adequate and the flowcharts illustrating the steps are very helpful.
0,The team has explained all the functionalities for the project very well.
1,The design doc looks fine enough. The team can probably add more test plans for the final project part as the project progresses.
0,easy to understand flowcharts.
0,"Since first PR is already merged into master, means no issues were found."
0,"detailed descriptions of project purpose,design and test plan."
1,"The document mostly consists of screenshots of the commits done. 
In order to make the functionality much more visual and intuitive, I recommend you to add some annotated screenshots to the wiki document as this would make it easier for the reviewer to understand what exactly is being done.
Also if possible put in some UML use cases pertaining to your project."
1,"I think the code looks fine at first but in order to make it comprehensible, I recommend to give a brief gist of why those changes were made and what exactly is happening with the code.
Since, the implementation section was not explained elaborately, not much could be commented about the performance and simplicity of the added code."
1,"Most of the covered topics have been addressed correctly, however, I would suggest the following:
The implementation section consists of only the code that has been altered whereas there should have been a separate section for this namely 'Code changes', consisting of at least some brief explanation of what is happening since it can't be expected from every user to understand the functionality by just looking at the code at first sight.
I would also recommend creating a 'proposed solution' section and then explaining not elaborately but in a gist about what would be the approach decided by the team in order to tackle the problems mentioned in the problem statement."
1,"The document incorporated most of the functionalities and most of the terminologies were clearly explained however, I see some redundancies. The briefing about Servo was mentioned both at the start as well as in the introduction section.
Secondly, instead of mentioning Step 1 ,Step 2 and so on in the content index, write down the actual steps involved in order to reduce abstraction."
1,"I think the test plan has been written in a nice and systematic manner.
Add some images of the working feature rather than the code itself. This would not only make the document more user friendly but also add value to the document.
Finally add the team name to the document."
0,There are 2 diagrams introducing the steps for the project. If steps could be separated into different part with more details for each step will be more clearer and easier for others to follow. Overall the visual diagram is associated with the description well and helpful.
0,"1. None 2. None 3. None 4. None 5. None
The quality of design proposed is good."
1,"There is step-by-step instruction with explanation for each step which is clear. Screenshots of code is also attached to show the modification. For some code if there could be more details, description or introduction will be more helpful for people who is not in this project to understand. Overall the quality is good."
0,Yes. The design contains all of the functionality required.
1,"The completeness of the design doc is good. All parts required such as project purpose, project design and testing plan are included. Screenshots, diagram for specific section is provided which are helpful. For 'Implementation' section, if more details or explanation will be helpful for people who is not working on this project. Overall the completeness is great."
1,I don't see a design but the work they've done seems adequate.
0,There is a diagram but I don't think it adds much to the page. It simply repeats what they wrote in the paragraph above the diagram. It would be easier to read if only the paragraph or the diagram existed.
0,The explanation of what they have done is good. I can understand it.
0,I don't see a design.
1,The flow charts in the Scope section are not really helpful. They basically give the same information as the textual description above them. A diagram showing the components of the system would be more helpful.
1,The explanation is very detailed and well-written. It would be better if there is a diagram showing the relations of each components instead of just flow chart.
0,Yes it has the links directed to the functionality.
0,It's quite complete.
0,Flow diagrams just repeat in text whatever is said in description. Totally redundant.
0,Very confusing and difficult for the reviewer without proper background. layman explanation expected with less description taken from Git and lesser code snapshots and more self written description to understand the context.
1,"The flowchart which they have given on wiki, explains how do they plan to address the issue. It is somewhat clear but it can be made more informative by providing more useful information like which action will affect which other classes, call which internal functions and what would be the result of that action and how would that result be used by the next step in flowchart."
1,"There is no design pattern in the documentation as it is Mozilla Project. But the scope written by the authors explain almost whole plan/approach towards the problem.1. Yes, they plan to add methods. But all of them seem to be in correct class/files as they in harmony with what project page on github says.
2. I don't think that the code will become smelly because of those changes.
3. yes design seems complicated. I understand that this is rust so there might not be gems like in ruby. But the team should give it a try to make the design simpler.4. It will improve the performance by starting the compilation of WebAssembly while the program is still being fetched from the server.5. The team can try giving a bit more effort to make the design simpler."
1,"The changes proposed look to be genuine and adequate as they follow the subsequent steps given on the project page. But, the explanation is very technical and it makes it harder to follow. If explanation is simplified or supported by some changed code snippets, it would make it easier to understand and follow."
1,"The design document incorporates every functionality mentioned on the project page. But the only problem is that when the scope of the functionalities is described, it is becoming very technical for a reader to understand. I suggest the team to make it less technical for other people to understand easily. For e.g. the point number 2 says ""Pass network task source"", which I don't know what it is. So, here, the team can briefly describe in 2-3 lines about that or just simplify the full statement by simply using a more understandable alternate of ""Pass network task source""."
1,"overall, the design document looks complete. Although there are some ambiguities, but after the actual implementation and once the design doc is made much simpler, I feel the ambiguities will go away."
0,"The authors have not made any changes to the system. But yes, they have very adequately conveyed all the changes that they have planned."
0,Test plan does not explain what cases are included.
0,No custom tests written
1,"The team included the snapshots of the issues that are expected to be solved.
Apart from these there are no visual aids for the reviewers to understand the classes/ entities involved or the flow diagram.
May be a few of them can be included if felt appropriate by the team."
1,"The changes proposed by the team are reasonable.
The team has clearly studies the code and the root cause of the problems which is really great.
It would be more informative if the team would have explained their thoughts with code snippets as it is easy to understand instead of using the name of variables etc, which is hard to follow."
0,"The explanation is clear and concise.
Charts and screenshots make it quite easy to understand the issue and their approach"
0,"Yes, the design appears to be sound."
0,"Yes, changes to be made to the system are explained nicely."
0,"Yes, the test plan is explanatory."
0,"Yes, their design seems sound to me.
They have Plan of Attack, Tentative work and Test plan."
0,"Yes, simple and easy to follow."
0,"Yes, they have drew a diagram shows what changes will be made to this system."
1,"Yes. There's a test plan. But they don't show exactly what kind of test will they do.
Maybe unit test or UI test?"
0,Authors have identified which files need modifications and why exactly each file needs to be modified. This has made the design more sound.
0,Explanations are sufficient enough to understand.
0,the test plan can be more specific
0,"the class diagram provides overview about what the problem is, not much visualization about the plan to handle this problem."
0,yes!
0,The test plan is not in depth and just lists the teams' responsibilities
0,There is just one flowchart which is included and even that is not elaborate in terms what will be achieved
0,The exact changes or approaches is not mentioned
1,They wrote the test plan in their design document. The test plan is a little bit abstract. It would be better if they list the test files they plan to add test to. And they can add more details about testing from UI.
0,The design seems to be as simple as possible. They write the work progress and the methods they plan to change. Their design is appropriate and has no point that is unrelated to the project.
0,They write their design plan organized and the design seems appropriate. It follows right principles and using appropriate patterns.
0,The team has added good visuals to make us understand the problem with the existing implementations which are pretty good.
0,The design appears to be very straight forward with every detail has been explained clearly. The test plan is also clear.
0,The authors have very nicely explained all the changes that need to be made and a detailed plan of the changes that are going to make.
0,"Yeah, they have described the changes to be made very well."
0,Poor test plan. Doesn't mention any concrete plan to test the code changes required to fix the issue.
0,No significant visualizations added.
0,No design mentioned.
0,No concrete design is thought-after by the team. They have only written the problem description from high-level and mentioned that they will make changes to make that happen. None of the changes are appropriately described.
0,"Yes, the design appear to be as simple as possible"
0,"Yes, the design appear to be sound, following appropriate principles and using appropriate patterns"
0,"They have user diagram which let me understand the case. But no UML diagram included, so I don't understand the class relationship and how are they going to change the files."
0,I am not sure because they do not include concrete solutions in their modification sections. They only include files that need to be changed but does not state how to change them.
0,They have all sections that need to be included.
0,I know how they want to do the project. But details are not included.
0,The design is simple enough to highlight main point. But it's not too simple and I could get the system structure and the relationship of different table.
0,"Yes. Authors have adequately explained the changes to be made to the system. The design document contains Project Overview, Current Implementation, Plan of Attack, Files which require modification (Tentative) and Test Plan."
1,"They used a flow chart to show the process of their function.
However, I think they should include more details and steps in their flow chart.
They can also add a diagrams to describe the changes they want to make."
1,"Yes, they include test plan. However, their test plan seems a little messy.
I think they can split unit test and UI testing.
And then adding some screen shot for the expecting output."
0,"Yes, their design looks simple and clear."
0,"Yes, they listed all the files and methods they may modified, which is quite clear."
0,The Wiki page clearly explains about the places where changes will be made and why are they necessary.
0,A flow chart is added but is not detailed.
0,The new design looks fine.
0,The explanation should have been more detailed.
0,"Yes, all functionalities are incorporated."
0,Project design could be more explained.
0,They have added a UML diagram which is nice but their writeup is so clean that it was not really needed.
0,"The purpose, current situation and their proposed implementation is explained really very well."
0,Amazing writeup!
0,the UML diagram is informative
0,Explanation is not exhaustive but I feel it is adequate for the first round
0,Yes the design includes all the aspects of the problem in hand
0,All in all documents seems pretty standard and good
0,The description looks clear and concise.
0,Test Plan is abstract.
0,The writeup doesn't explain a solid principle of solving the issue.
0,The writeup doesn't provide any solid approach that they will use to solve the issue.It lacks a lot of details and good explanation.
0,Flow chart was incorporated to provide visual aid.
0,The quality of explanation is satisfactory but it can be improved further by explanation.
0,The plan of attack is a little abstract and can be more specific and comprehensive in the future.
0,Project design can be more detiled explaining why they are doing it in this way.
0,"Target classes are all good. Code is not smelly.
The new design looks not complicated."
0,"I think their explanation is clear and easy-reading. It not only contains why or how to accomplish the function, but also includes the files which require modification."
0,I think all their explanation are easy to understand.
0,I found explanation in their design document seem suitable for the function required.
1,There is not a design proposed outside of the approach proposed in the given requirements. There should be a design section that talks about what classes and methods will be updated/added. This will need to be more than part of the requirements; the design should talk in detail about the plans for implementation.
0,"Nicely written documentation, added code followed all the necessary coding standard"
0,I can easily understand how the team fix the problems.
0,All the features work as before. There's no bug in all manually tests I have done.
0,"Team has not given any comments to any method, code is not commented"
0,The build is passing and there are no conflicts as well.
0,The Trravis CI build is passed successfully. There are no conflicts which need attention.
0,"Yes the build is passing
I am able to see the pull request on github"
0,"Yes, the build passes Travis CI. There isn't any conflict that must be resolved."
0,The team managed to make the build pass.
0,The build is passing in the Travis CI. There seem to be no conflict.
0,The build was successful.
0,"Yes, the code has passed the build in Travis CI."
0,Yes it is ready to be deployed.
0,"Did not get to test the application myself so can't say for sure, but the refactoring definitely helps if merged to the master."
0,"It can be deployed. Build passes and the team did addressed the commented issues on Round 1. Besided, changes were mostly renaming methods and classes, and the build passing reflects that those changes were made appropiately"
0,"The code should not be merged to the production server. The team has done a good job refactoring the code, but the test coverage has decreased which is substantial part while merging the code."
0,The code can be deployed in production; just need to verify if the code coverage has indeed gone down.
0,"Yes, it seems the code is ready to be deployed but without checking the deployment on a local server it is difficult to say that."
0,It is elaborate.
0,"Write-up consists of a lot of code snippets than the description of the changes. Also, Screenshots from GitHub's diff feature would have been a better representation of the code changes done, but I can go to the GitHub pull request to see that, so no need of such massive code snippets in the wiki."
0,The writeup is very clear and self-explanatory. They've also added a video to explain about their changes
0,"- The write up is well written explaining the issues and according fixes for same
- All the code changes were put up on wiki which makes it cluttered and difficult to read; only crucial snippets should have been added on wiki with explanations"
0,"The write-up is well written, much improvement since the last time. They have clearly mentioned the issue along with the solution and also mentioned the code they have changed."
0,"Project is well documented. Documentation is long enough and explains code changes, tothegether with testing procedure."
0,"The writeup is very well written. It consist of well stated issues, implementation and results."
0,"The team has substantially improved the write up after the first submission. However, the write up still lacks the videos for the test cases."
0,The writeup covers all the issues that need to be updated and is well documented.
0,"The writeup is very good, explaining the problems and the changes that they have made."
0,"It works good, the UI works as expected."
0,"No deployment link is provided, so no way of testing the fix. But the youtube demo does show no affect of the refactoring on the functionality."
0,The task is completed correctly. And the functionalities work as they're supposed to work.
0,"- Couldn't find the deployed image, couldn't verify is sign_up_sheet_controller works as expected after the changes"
0,Video shows procedure of how to drop a student. Test case cover this as well.
0,"As the project was not deployed, I was not able to run the project and see for myself. However, everything looks fine from the video which they have included."
0,The system performs the features from the UI as required after the code was refactored.
0,Everything works as expected.
0,The UI is not available so could not be checked as the team has not deployed the code. But from the video that the team has provided it seems to be working perfectly as desired.
0,Test coverage decreased.
0,"New Tests cases were not added, but the ones added in round 1 are sufficient enough. The overall coverage, however, is educed by 23%."
0,"They have not added any new tests, because there was no need of new cases."
0,"- No new tests were added as refactoring project
- Coverage did not increase"
0,No new test cases have been added and the coverage has decreased by 7%. Please add test cases in-order to increase your coverage.
0,They added test cases for the sign_up_sheet controller in various spec files.
0,No new test cases were added and the coverage has decreased by 23%
0,The team has added the test cases for the newly refactored code. however the test coverage has decreased. The test coverage needs to increase so that the previous working code is not hampered.
0,"No new test cases were added. The code coverage went down, but this seems to be an issue with coverall, and is not specifically because of their code."
0,Yes the team had added test cases but the coverage has decreased by 7%
0,Not a lot of commit. But the initial version was good and did not require lot of commits.
0,No new code commits were made since the last review. Neither were needed.
0,No new commits were added after first round submission
0,No new commit was made after the 2nd round. Last commit was on 26th October.
0,Las commit was on Oct 26
0,"Their project was completed before Round 2. Thus, no new comments"
0,"No new commits, since there were no new changes."
0,The team has committed during the second round. The code has been refactored aptly.
0,No new commits were made.
0,No new code has been added in the second round
0,Didn't find any.
0,The code write-up was found to be well enough in the previous round review as well.
0,1. They've solved every problem statement they were given. 2. They also tried to find some inconsistencies on their own.
0,"- Most changes are wekk written
- Method name changes like changing load_add_signup_topics to retrieve_signup_topics, etc. made the code more readable"
0,Code follows guidelines. Renaming is made according to requirements.
0,"The code follows the Ruby Code of Conduct and is DRY.
The functions are apt in size, function definitions are not too long."
0,Did not have any specific feedback to the team. Good work team!
0,"The code follows all the good practices and did not have any problems during the first review and they haven't made any changes after that, so it is ok."
0,No comments
0,"They've written notes i.e. comments for most of the methods, yet some functions lack comments."
0,"Not a lot of comments, but the code is descriptive enough."
0,"The code does not include appropriate comments. Good comments are required for understanding the flow of the newly added code. However, the code lacks good comments."
0,The comments are decent and are added to all methods as it was one of the issue mentioned in the tasks.
0,All the methods that lie in the scope of this feature are well commented.
0,No the methods don't have comments which could have been added
0,The writeup is very concise and hard to map to code.
1,"1. Documentation is fine and mentions everything they have done so far.
2. Though everything is clear, they should've mentioned reasons for whatever they did. (for e.g. issue :Refactor participants variable in load_add_signup_topic).
They could mention refactoring is done because of so and so reason."
0,The write up is not very detailed. There is no description about the design of the module or the patterns followed or the code changes.
0,"- The writeup clearly mentions the issues and what steps were taken to address the issues
- The use of if-else condition to create or update is confusing as Rails by default provides routes specific functions, the method call_create_of_update seems unnecessary if routes are properly used"
1,"The write-up is very poorly written. It just highlights the solutions to the issues in one line which is not sufficient. No mention of any design principles or patterns is included. It is very hard to follow the changes you have made if the pull request was not shared. Please include more details about the changes you've made in every file (which method, which line, etc). Also mention the reason for doing the changes that have been made. If any design principles/patterns have been used, mention the reason why you thought this would have been the best solution."
0,"The writeup is well written and explains the need for project improvement, the problems and their respective solutions."
0,"While the wiki page mentions the solutions, it does not mention the reasons behind these particular solutions."
0,The explanation is very brief and could have been a little more elaborate.
0,Missing test plans on the writeup.
0,"Since code refactoring is the requirement, there is no need for new testing specs"
0,Since the task was to just refactor and they have not written any new methods or so. There is no need of writing new test cases.
0,There is no test plan in the write-up.
0,"The write up does not include the Test Plan for the project. The test cases are important as the newly added functionalities should be thoroughly tested in order that the previous functionalities are in place. However, the recent pull request does not demonstrate the inclusion of test cases."
0,"Since it is a refactoring task, there is no test plan."
0,The document does not contain a test plan so cannot comment.
0,"No, the team have written nothing regarding testing"
0,The writeup is precise but it is very concise and can be a little more elaborative.
0,The write up content corresponding to the code changes made does not match up!
1,"1. They could've mentioned how the methods work. But since their job was to just refactor, they've done the documentation part very clearly.
2. Only thing I would like to suggest is that authors should think of adding some snapshots of the work, which helps the reader to better understand the changes made."
0,"The write up is not very detailed. Just reading through the wiki, it is difficult to understand the background of the feature or what functionalities are missing."
1,"- The write up is clear but not adequate enough
- The doc explains issues and what the team did to fix each, but doesn't explan the need for each fix
- The doc should indicate which principle was used for corresponding refactoring and what impact the change made"
1,"The write-up has been poorly written. In the write-up, it is written that only one file has been modified, however the pull request shows that many more files have been changed, some new files have also been added. The write-up just covers the problem statement and the solutions in one line per issue. Please add more description in the solutions that have been provided (for instance in which file the changes has been made, what changes were made, what effect does it bring, any specific constraints that were added, etc.)"
1,The write up could have been better. The team needs to add actual code snippets and screenshots as well as the test plan for the test cases. A video for the test cases can also be added.
0,Yes the writeup is clear but it only mentions about the problem and the solutions and doesn't mention about the methods or why it is done.
0,Hard to test all the features. Tested a few and they worked fine without breaking.
0,Code seems to work fine on DRY run.
0,"Since the task was to refactor, there is not much to test. All the test cases passe, which indicates the code is running as expected."
0,"- Changes doen't look to be deployed yet
- Not enough proof for tests working for refactored code"
0,No link for the deployed app for me to check if the features are working or not.
0,The claims made by the author seem to be working fine. The refactoring of the sign up sheet controller reflects the changes and the functionalities are working as expected.
0,Application url not provided.
0,"Yes, the features are working as intended."
0,The code has been broken down nicely.
0,"1. They've solved every problem statement they were given.
2. They also tried to find some inconsistencies on their own.
3. Only problem is they should've added some more comments."
0,"signup_as_instructor_action can be broken into smaller functions.
HTML markup code is very well written."
0,"- Most of the functions are of appropriate length
- Code is not repeated, the repeated code is appropriately added to separate functions where required
- Some places the code doesn't follow ruby style guidlines as create / update can be directly called from routes rather than explicitly calling"
1,"1) 'def list' & 'def save_topic_deadlines' quite long. 'def get_status' is also long and has quite many nested if-else conditions.
2) According to me, in 'def get_status', 'return' should be a common statement instead of passing it in every if-else block.
3) There are several if-else blocks in the code. Please add more comments specifying what condition each if-else block covers. 
4) The code follows the Ruby Style Guide. The team has made commendable efforts in this area.
5) There is a lot of code duplication in 'signup_sheet_controller.rb' which could be refactored."
0,"The code refactored has functions with apt length. 
 
The code follows ruby code of conducts."
0,The code follows Ruby style guide and is not DRY.
0,"1) functions are of the correct length
2) the test cases are in their proper files
3) no comments made
4) the code is in proper format
5) no"
0,The code uses lots of naming from the old code which could have been refactored.
0,"The code coverage should not have reduced considering the changes were only of refactoring.
And The code is very short of comments and documentation"
1,"1. Seems they've changed a name for a method, then the TRAVIS CI failed and they again reverted back to the old name. This long route could've been skipped if they would've run Rspec locally before pushing the changes to git.
2. There are some more times where they've done the same thing. But that shows they've attempted to do some changes."
0,"Good work on the new code that's added. The rename of sign_up_sheet has had effects across the application, but the authors have taken effort in renaming it across. 
New changes for html.erb files is also well written and follows ruby patterns."
0,"- Descriptive variables and funcition names have been used to make the code more readable
- Naming made consistent across classes
-"
0,"The variables, methods and class names are all well defined. The team has done a good work while refactoring code. Not only have they done appropriate changes, they've also made sure to correct the changes in the comments."
0,The test coverage decreased by 7 percent.
0,The team has done a good job in renaming the methods and has added plenty of comments to old code.
0,No new variables or methods have been created as it was refactoring but methods have been merged so similarly named variables have been used but those used are proper.
0,"No new test cases neede, and no test plan mentioned in wiki"
0,"Authors have not added new tests or modified any of the existing ones. But all of the changes they mode don't cause any of the test case to fail.
And also the TRAVIS CI build passes on the last commit."
0,The automated cases are missing.
0,"The author has not added any test plan in the write up. So it is difficult to decipher the authors test plan. However the pull request shows that the author has included test cases for the refactored code, which run successfully."
0,"No test cases added, existing test cases pass."
0,No test plan has been mentioned in the document.
0,No testing has been done
0,They have a good test plan.
0,"They have provided good visuals including use case diagrams, database designs and the relevant database tables."
0,The design appears to be simple and clear
0,Their approach appears to be very well designed
0,"Yes, the team has made great efforts in designing the approach and documenting it in the wiki."
0,"Yes, they have talked about automated and UI tests that they plan on doing."
0,"Yes, they included a use case diagram, DB ER diagram and the table relationships of the tables they would be touching."
0,"Yes, the design was simple and illustrative with steps to reproduce"
0,"Yes, the design was well thought out. They listed the use cases and edge cases as well and how their design takes them into consideration"
0,"Yes, the changes they plan on doing was well explained with files changes they proposed as well."
0,The design appears to be sound and the doc is very well explained. The project problem definition is well defined and clear definition of the proposed solution.
0,"It is simple to understand. All the problems to be solved are described in the proposed approach. The UML case diagram, database design, and test plan are helpful too."
0,"The UML diagram, database design are very well crafted."
0,The tests are really good. The team has done a good job in describing the tests per model.
0,"Yes, the test plan is there with covering all scenarios."
0,"Yes, Use case diagram and Db changes diagram are added."
0,"Yes, the design appears to be sound and simple to understand."
0,"Yes, very well explained."
1,"Yes they have added the manual test cases. The needs to add test cases to test multiple search conditions. Just one thing, apart from manual testing, the team could also explore automated testing using some web browser testing tools like selenium."
1,"They have added the db diagrams which helps to give the details of the models like user, but does not add much to explain the functionality. As stated earlier, if the team would have added mock ui screen, e.g. the user screen with search boxes, it would make easier to understand. Overall the design is good."
1,"Yes the design is simple and easy to understand. They have clearly defined the details and requirements. Just one thing, it would be great if the team could add mock screen to show the final ui. It would help to visualise the functionality even more clearly."
0,The proposed solutions looks good and follows the design principles.
0,Yes the writeup is clearly written and sufficiently explain the changes and the solution
0,They have added all the details about the automated test and also regarding the manual test to be performed. it looks like they have covered testing all the functionalities.
0,"Yes, their design looks very simple and it is easy to follow and understand."
0,Test Plan section is detailed. Each test cases are given along with what to be tested.
0,The design has already been worked upon so it looks clear and simple to me.
0,The design they've chosen and are improving upon do look to encapsulate all the functionalities.
0,"The authors have mentioned in the document what changes they will make, but I believe they will understand more details as they start the implementation."
0,"> Yes the design does include the test plan.
> The test plan is in great details covering both the regular use cases and the corner cases."
0,"> Yes they have added a lot of visualizations which helps in understanding the proposed changes much better.
> They have also added representations for relevant tables which is very good."
0,"> Everything has been explained in great details.
> The use of multiple visualizations helps in understanding the changes very well."
0,UML diagram and database design diagram clears the concept of the design and changes authors are proposing.
0,"Yes, everything is explained clearly. Flowcharts and diagrams help you to read and understand the design nicely."
1,"Yes, the design appears to be reasonable and very detailed. Some more emphasis should be given on how to work on the given test plan."
0,"Yes, the test plans are included in the design doc, and they described each test in detail."
0,"Yes, they have very detailed diagrams to describe their changes and functionalities."
1,"Yes, they explained it in detail, but it could be better to add some diagrams."
0,Design do include test plans and manual test from UI
0,Visualizations are good part of this documentation.
0,"Yes the design appear to be sound, following the appropriate principles and patterns."
0,Yes the author put efforts to describe the changes to be made.
0,Manual tests work.
0,The tests are automated.
0,"The variables, methods and class names suggest the functionality well."
0,The writeup does include a test plan.
0,The writeup is clear.
0,Yes the features are working properly
0,No comments have been made
0,Yes the variables and class names are proper and appropriately used
0,They have tested using RSpec and put a video of it so there is no supposedly no loopholes
0,The writeup is done excellently and doesn't seems to have any faults
0,Writeup is done very thoroughly and is self explanatory
0,The test plans are described thoroughly.
0,"Yes, the design is simple and everything is mentioned in flow."
0,"Yes, the design appears good and helpful and they have used appropriate patterns."
0,"Yes, they have proposed changes of what they have made."
0,"Yes, the design include Test plan. The authors have thoroughly given test plan for automated as well as manual testing."
1,The diagram are pretty good. One improvement would be dividing the given use case diagram into scenarios.
0,"Yes, the design seems to be simple. The search for User, Assignment, Questionnaire and Review seems good as the required search field are taken into consideration."
0,UML diagram is self-explained.
0,Design is good.
0,The explanations are in detail.
0,"Yes, functionalities are incorporated."
0,The design doc is descriptive.
0,The design document is pretty verbose and clearly explain the requirement.
0,They have clearly defined all the changes needed.
0,They have designed the wiki keeping all the functionality in mind. The wiki page is pretty descriptive.
1,The design document is pretty verbose and clearly explain the requirement. It would be good if they could add mock ui screens to show how the user interaction will be.
0,They have used the UML diagrams for explaining the design and how the interaction between the system takes place. The diagrams are really helpful and they also used the database design which makes it more clear. The UML diagram follows the convention.
0,The design document incorporates all the different functionalities involved in improving the search facility. They have covered all the possible functionalities of search which are searching for a user by different attributes etc.
0,"Since the team has only done refactoring of existing code, they did not need to write new tests. Their refactored code was successfully able to pass all rubocop tests. The overall coverage has decreased."
1,"The project purpose, project design, and testing plan are included in the design doc. The only thing they could add is the code snippets which have to be changed."
0,"Yes, the build is passing."
0,"The team has used the visual aids properly however, it would not be appropriate to give them credit since they have just copied those visual aids from the last year's team design document."
0,"1) Correct methods are being added to the correct class.
2) Well, their task is to make the current design which is smelly to make it not so. Based on what they propose, it looks like they might be able to do so.
3) The new designs don't look complicated.
4) The new design could increase the response time of the system.
5) Sufficient effort has been expended on the design."
0,The changes recommended are quite coherent. It was easy to follow.
0,"Yes, the design looks to have incorporated all the functionalities."
0,"The project purpose, design and test plans have been explained very well. Although some of the material is courtesy of the last year's team work but they have done good work identifying the changes and selecting just the required material."
0,the UML diagram is included only for instructor while students can also perform other functionalities.
0,"The teams role in the given project is not specified. Although the overview of the functionality is given, the team's specific role is not elaborated"
0,"> The proposed changes are very well explained and in great detail.
> Diagrams need more explanation. They are a little confusing."
0,"> The design seems to have included all of the functionalities and very well detailed.
> Search by several criteria types have been included in the proposed changes."
0,"> The design document looks complete.
> All the essential sections like problem statement, change proposals, diagrams, test plans etc. have been included."
0,Yes the code is clean. All the method and variable names used are intuitive and clearly explains what their purpose in that block.
0,"The writeup is written well. They have covered all the required components and explained in easy to understand language. Also the code snippets which was inserted/modified to fix the bugs is mentioned. Also, they have included the flow diagram to explain the work flow."
0,Yes the features are working as expected and probably as mentioned on their wiki page.
0,"Though the coverage of the pull request has decreased, they have added test plan in their documentation. It also includes the Rspec tests perform."
0,"Yes, the build pass and the merge has no conflicts."
0,No new commits were made in round 2.
0,"The code is commented wherever possible, They have used good names for variables and methods,"
0,Yes the code is ready to be deployed. Not sure about the testing part since the coverage has decreased.
0,The write up is well written
0,The system works as it is supposed to.
0,the coverage has decreased.
0,The code is written well
0,"1) I think the code is ready to be deployed since the function works and code pass all checks
2) It is good for another group to pick up since they write it really good and writeup is comprehensive
3) There have been enough comment for the code so it should not be hard to follow"
0,"1) This refactor project could be test from UI
2) Everything works as the original one, the refactor is succeed"
0,"1) They have modified existing Rspec tests to fit their implementation
2) Since it is a refactor project, they did not 'add' any new test(I guess simply change existing ones would be enough)
3) The coverage is same since just change method names in existing tests."
0,"1) The pull request passed all checks
2) Travis CI passed and no conflict needs to be solved"
0,"1) They have been keep working on this project
2) They did commit a lot to pass Travis CI in 2nd round"
0,"1) There is absolute no bad names for variables and methods in this round
2) The method are all in healthy length and easy to catch up
3) Essential comments have been provided with the code
4) The code is DRY enough"
0,"Though I could not find any significant issues, I'm not sure whether it is of sufficiently high quality to be merged. It is certainly a good starting point for future work, though."
0,The writeup quality has significantly improved from the last round. The team has taken suggestions into account as well.
0,"Since it was a refactoring project, the team has mentioned in the wiki that they ensured no tests failed due to their changes. Yes, the coverage has increased as well."
0,"Yes, it passed the Travis build in the last commit."
0,This is a refactoring project and all the test cases are working however since the project link is not working I am unable to test the basic functionality.
0,"Yes, tests were adjusted according to the refactoring changes are all of them were working."
1,Some methods like assign_quiz_dynamically are a bit too long and could be refactored by pushing the if-else conditions into a separate function.
0,The team has paid close attention to coding guidelines while renaming the variable and classes. They have also documented the reason for renaming on github.
0,"Since this is a refactoring project it would have no edge cases. However, all the test cases till the last commit are working and the test cases are adjusted according to the refactoring done."
0,The wiki properly explains the project work the team has submitted till now. Each refactoring change is properly documented on GitHub as well as on wiki.
0,The writeup is pretty good and very well explains each refactoring change.
0,Project was on refactoring and the build passed so all the features work
0,Yes. They seem to have converted all the test cases in accordance to the changes they made in the code
0,"Yes, they have given exhaustive explanations for all the changes they have made and what led them to make those changes. However, in some cases"
1,"the application hasn't been deployed
Heroku | Welcome to your new app!

Refer to the documentation if you need help deploying."
1,"some variable_names are too descriptive to a extent that is not necessary ,
participants_with_min_assigned_reviews
the above variable can comfortably skip words like with."
1,"comments are mostly descriptive



 


 selected_participants.each {|index| ReviewResponseMap.where(reviewee_id: team.id, reviewer_id: index, reviewed_object_id: assignment_id).first_or_create }


 
 
 



however the above line may require comment to completely comprehend"
0,"yes, the write up comprehensively specifies the changes made and the impact of them"
0,"Yes, the authors feature does work as intended."
1,"(1) Long methods can be broken down. In some cases, methods could have been extracted from existing long methods. Such as in case for peer_review_strategy function & assign_reviewers_for_team
(2) Code has not been extracted to separate methods appropriately (as in case of create method)
(3) Comments have been added in some places but when new functions are created, more comments are required to make following the code easier
(4) The code does follow the Ruby Style Guide.
(5) Code is DRY & does not have any smells apart from Long methods at some places and"
0,"The write up explains in detail, the functionality of the work done by the team.
This being refactoring project, the authors have provided sufficient details of what the problem was with the code previously and what they have done to improve it. I can clearly understand how & what the project does from reading the writeup.
Write up includes the changes made as well as the files those changes are made in."
0,"The writeup clearly and adequately indicates the functionality the work is related to.
The need for moving test cases has not been very clearly shown."
0,- Project not deployed as its a refactoring project
0,- Test plan not included for refactoring project
0,"- The tests are included
- Test plan needs to be updated in the doc"
0,"- The writeup is properly written and explanation is provided for each change
- The required changes are properly mentioned and the reasons for each change are properly stated"
0,- Write up clearly and concisely writtent which adequately indicates the functionality
0,The code is ready to be merged and no changes are required.
0,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan and flowchart of expected behaviour. The proposed changes are attested with code snippets that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. The good point is that they have also mentioned the details as to why did that issue crop up which is a good documentation methodology."
0,The system works as it is intended to work. The tests which are mentioned in the documentation is working as expected. The bugs that were already present are resolved .
0,The build passed and there are no conflicts that needs to be resolved.
0,Commits were done in during the second round based upon the feedback given in the first round
0,The code is written keeping in mind all the coding practised and following Ruby norms and conventions. No problems were found in the previous round as the code was already DRYed and following the norms
0,"I think it can be deployed, the functionalities worked well, just theres no rspec test cases for it."
0,The writeup is very detailed. They have everything covered.
0,They worked as intended.
0,They didn't add test cases.
0,"Yes, it passed all test and have no conflicts."
0,There's two modifications.
0,The code is clear and DRY.
0,The write-up has been written coherently and it is easy to understand their work with the presence of flow charts and code snippets. The authors have improved upon the test plan section also.
0,UI has been tested and the code works as intended.
1,"The team has not added any test cases to the Expertiza project.
The code coverage has decreased marginally. 
The team could have added simple Capybara test cases to check for the redirection (test plan 1) and to check for UI elements (as a simple test case) in instructor's editing others' rubric (test plan 2)."
0,All the builds in Travis CI pass. There are no merge conflicts in the code that need to be resolved.
0,The code commits to the project happened regularly. Development and bug fixes occurred throughout the project duration.
0,Code was neatly written and it follows the DRY principles of Ruby. There are good and descriptive comments in the code to explain their changes and the newly added functionality.
0,Yes it does
0,There are tests for the student model and controller. The model does a good job of making sure that each field for a student is present before the model is saved. The controller tests are even more thorough and complex enough to the point of checking that students cannot edit each other's information. Well done!
0,Not sure. The test coverage has decrease.
0,Elaborate and very clear.
0,Works from UI perspective.
0,Student model and controller has been checked using rspec
0,"Yes, the team has thoroughly tested the student model and controller and have written ample amount of tests to check if the controller does what it should."
0,Not a lot of commits after first revision.
0,Didn't find any while going through their code.
0,Yes the code can be improved and be merged into the main product.
0,The write up is very easy to read and great.
0,Yes it does work.
0,They have thoroughly tested one model and one controller.
0,Yes it passed the Travis CI
0,Added comments on the code
0,No test cases were added or test plan was mentioned.
0,IT followed most of the principles.
1,Yes they have tested one model and controller however more use cases could have been added. Like a library belonging to only one university.
0,"The system is operational from UI
I found the following inconsistencies in the current version . 
In  Issue1384, I could not reproduce the exact behavior. The documentation mentions that the bug exists as the flag value is not updating, but it is not clear as to if it just affects  the visual presentation or if the implementation is also failing. 
When a new TA is assigned to a course and if he tries to change the course assigned to an assignment, the code breaks."
0,"Yes write up very well written, they explained the problem, mentioned the design, how they solved it, step by step documentation, testing screenshots. they have explained it really well. Good job to team."
0,"since credentials for ta is not provided in wiki page, unable to test the functions manually"
0,"Yes, In test plan session team has clearly defined the steps that reviewer can take to test the issue they fixed. I have done the manual testing on UI and they have resolved the navigation issue. Even in review 1 also this team has done a good job, the only thing was of test plan which is also resolved now."
0,"Most edge cases seem to work. However, if a student checks out a book and then returns it, then the admin cannot delete the student. I noticed this problem with many applications, it likely has to do with the fact that students belong to requests. Apart from this, everything looks good."
0,Yes teams build has passed on travis CI! They have no merging conflicts. They had build issues but they have resolved it.
0,Yes team has made commits every other day after the review 1.
0,No new test cases have been added.
0,Deleting books deletes all pending requests and checkout requests for the book. I am not able to check anything with regards to availability of books as book count is not visible (may be I don't know where to find them).
0,"Edge cases are handled well. 
1. Admin can delete book that is issued and change is reflected in the student's account.
2. Student with issued books cannot be deleted.
3. Admin cannot be deleted."
0,"some edge cases have failed such as :
admin is able to delete a book that is issued
The reservations are not deleted even if the student who has multiple pending requests has been deleted."
0,"I can now get to the profile page of users. This is slightly concerning because I was unable to before, yet nothing has changed.
 
Whenever I try to change my preference in the profile for where I want actions to be displayed, I am unable to do so. Upon saving, it just defaults both options to be enabled."
0,"There were no new test cases. Coverage decreased, but that is probably not their fault."
0,"The testing part does not include any unit testing plan
Also, no video provided for demonstration and testing (anyway not done)."
0,"The code looks fine as it follows Ruby principles. However, in order to merge the code they should have provided all the required test cases."
0,"Task1: Redirection to questionnaire/courses/assignments is working as expected.
Task2: Working as expected, instructor6 cannot edit questionnaires created by others."
0,The writeup is written well but does not provide details on how to test the UI. It was hard to check the working of their project.
0,No the admin account cannot be deleted.
0,They did not add new test cases and their coverage decreased by 27%
0,They have submitted links to two pull requests. Thus. I checked the later one and yes they have few commits
0,"1,2,4 ) Can't test as there's no book and can't create one.
3) Admin can't be deleted."
0,"Yes, commits were made during the second round."
1,"No comments have been added.
Some variables are named in shorthand, like rubBuffer should be rubricBuffer."
0,"The major functionalities seem to be here for creating books, checking them out, book marking them, etc. I couldn't find any failing functionality. The UI is helpful since it displays the limits each use has for checkout books. I could not find any missing functionality."
0,"Since the code is lack of testing, it is better to have testing cases before deploy"
0,I think code is good enough to be merged as authors have used better variable names explained all functions properly in comments. And also looks fairly decoupled code which can be easily reused.If these are the qualities you look for production ready code then you should merge this.
0,"For the wiki writeup, it is very hard to find the differences between before and after of the long list of code by human eyes, which is not very reader friendly"
0,It seems no test cases were added and the test coverage decreases
1,"Yes, the authors have followed the coding principles successfully. they have included comments and written rspec tests. However, There are certain concerns I have regarding the deletion of certain fields in schema and several other redundant changes. while the redundant changes would certainly not damage repo, The changes made in schema require a more careful scrutiny."
0,Yes project works.
1,"The write-up details all important aspects of the project.The problems with structuring have been resolved. However, the images in the wiki are misaligned and have different zoom levels making it harder to review. I would suggest adding a flowchart to the wiki documentation to assist the review process."
1,"There are some commented redundant code, which could be deleted"
0,"The basic functionalities all work great. The UI is good and I couldn't find any major issues with the code. The only functionality that I feel is erroneous is when a user who has books issued is deleted, the system throws an error because the relationship might not have been properly defined."
0,"No, the test cases haven't been added and the test coverage was decreased."
0,I am not sure. But their wiki is too short to provide enough information. So I believe not ready to be deployed. A good product should be published with good using instruction.
0,"Yes, the Travis build CI has passed and there are no conflicts to resolve."
0,Basically nothing has improved in the 2nd round. The write still have not enough information for others to test your functionality.
0,The coverage has decreased by approximately 3%. The team has added the test cases in the late_policy_spec.rb checking if violation of policy does not allow creation of late policy and that if the policy is in accordance it allows creation.
0,"Yes, the Commits have been added."
0,Yes they have made changes compared to the round 1 but admin is still unable to delete a student
0,"The code seems to work, but there is no clear instruction how to get to the UI testing page. I believe they have the same wiki issue in the first round but it is still. Sorry that I am not sure how to test this function. So 3 marks for your coding work."
0,"Yes from the first round code is fairly improved. As per my criticism from the previous round that they didn't provide comments which they rectified in this round. Also, variable name are also good enough."
0,No new test written although passed the travis CI. test plan section has nothing about new tests.
0,"Yes, the system does work as it is supposed to, there are many functionalities that are added which were not there in the first round. There is an issue, when I login as an admin, i am getting to see the student homepage, i can't see any admin functinalities."
0,There are commits during the 2nd round. But the git repo has 2 beta branches and they also pushed code to master. not a good idea.
0,The code passes the travis build and coverage is at 27.125%.
0,Instructor is able to see all the courses while editing the course for an assignment
0,No automated tests present
0,There are a few commits with regard to adding comments as mentioned in previous review.
0,No pull request link has been submitted
0,"redundunt changes:
app/controllers/late_policies_controller.rb 
app/views/assignments/edit/_late_policy.html.erb
app/views/late_policies/index.html.erb
app/views/late_policies/index.html.erb : Changes made are redundunt and create unnecessary
review delay db/schema.rb : [DANGER] Field Feedback is removed
                                             : Certain changes made are redundunt"
0,Missing test plan
0,"The code functions correctly under the constrained steps in the use case.
Concern: However, if anyone were to create a new late policy without first visiting any assignment, the code will break on clicking the ""back"" link from the new late_policy page.
This can be solved with a quick fix from the team or can be taken up as a bug in the future by later teams. As of right now, apart from URL injection to reach this particular case, the code works just fine. Can be merged after code inspection."
0,the write up is very descriptive. It explains the issue and the solutions well
1,"I don't think the code is ready to be deployed to production server. I think I have already mentioned the issue in last round where the array was hardcoded. Moreover, it seems the tabs numbering are stored in session, the code could utilize something like localstorage instead of sessions."
0,"The DB design looks good, foreign keys are stored properly as integers. There are also tables for concepts such as requests and bookmarks. This is good practice as compared to storing those fields on the book."
1,"The code works as expected. Following the steps and the documentation, the Expertiza project works perfectly.
However, if you were to do this: 
1. Login as Instrcutor6.
2. Do not go to any assignment. Stay on the home page or manage page.
3. Directly go to  /late_policies/new by manually entering the link, and then click back.
Result: it would throw a RecordNotFound error since the 'back' link is hardcoded to go to the last assignment_id's page."
0,"since credentials for ta is not provided in wiki page, unable to test the functions manually."
0,"the test-plan is not given in the wiki page.
Neither is the testing complete"
1,"In  module helper,
# ta_ids = []
      # ta_ids << Instructor.get_my_tas(session[:user].id)
      # ta_ids.flatten!
      # ta_ids.each do |ta_id|
      #   ta = Ta.find(ta_id)
      #   ta.ta_mappings.each {|mapping| courses << Course.find(mapping.course_id) }
      # end
 
The unused and modified code like the one above should be removed"
0,The team has used library id as a foreign key to library in the books table to achieve the 1-to-n mapping. Libraries to universities also is a similar mapping.
0,"the pull request link is not provided
 the build hasn't passed
This branch has conflicts that must be resolved
Only those with write access to this repository can merge pull requests.

Conflicting files
app/helpers/assignment_helper.rb"
0,"the test-plan is not included in the write up.
Although the section heading is written"
0,All builds passed in Travis CI and there are no merge conflicts in the code.
0,The latest commit was made on 1st Nov 2019. Development and Bug fixes were continuously done throughout the project duration.
0,"Writeup seems good. The team has taken great time to explain the Issues, Functionality, Process, Test-Plan and code snippet. They missed the test plan on 1st round but have included it in second round."
0,The code was neatly written and follows DRY principle in Ruby. The team has done a good job here.
0,"the following sections
Process Video
Test
are incomplete in the wiki page."
0,The code is ready to be deployed to production.
0,The team has not provided any credentials in the wiki page for the functionality to be tested.
0,"There is no test plan in the first place. So, there are no automated tests as well. Cannot suggest any test scenarios since no credentials have been provided to test the changes."
0,"In the first review, I pointed out saying there were no navigations provided in the documentation. The team came up with a very good writeup this time."
0,"Yes, the feature seem to work as intended. But I do have one doubt, when I copy the url and open it in a new tab or window, the tab i opened seem to be retained. Is it expected?"
0,"Genuinely happy this team read the suggestions i made on peculiar edge case that i mentioned in the first review. In first review, there was problem where, while creating a policy, if I enter max penality as 'a', it gives error message as
The maximum penalty cannot be less than penalty per unit.
but not that it is not a number. Now the team has corrected it to show the error as
'Max penalty is not a number'
 
The UI and features work as intended."
0,They have handled 1-to-n and n-to-n relationships properly.
1,"Yes, the team added well written test cases and coverage increased."
0,"yes, the system handles the 1-to-n and n-n relationships properly. The library-book relation is 1-n, The university-library relation is 1-n, The university-student relation is 1-n, The library-librarian relation is 1-n"
0,"Since the project mostly focuses on UI part, the team has not added test cases. However, they have written the test plan on wiki page. Coverage seem to be decreased in the CI build by -13.7 %."
0,No conflicts. Travis CI build passed.
0,"No commits in the second round, after November 1st. Not sure if the team has took all the suggestions and implemented them on the same day as the deadline for the first reviews, which is November 1st."
0,"Whatever small changes had been done uses the existing variables, the code is according to the ruby standards.
But the new code added need some comments for the user to understand what is happening with the application."
0,"Yes, the Travis CI seems to be passed. The branch did not have any conflict with the base branch."
0,"There are no comments provided for the code that is modified.
A new file has been added and there is no description about the action it does and why did the team had to create a new file.
New attributes in db schema are added and the description about them is not available which if in the future can be added, it will be useful."
1,"Relationships between tables have been taken care of. They have given the feature of linking a book to one single library only which takes care of 1 to n relationship. 
However for cases when same title books needs to be added to multiple libraries then multiple copies of it will be needed to create."
0,I see corrections being made based on suggestions. Everything is well written.
0,I can't find the pull request based on the links provided by the team.
0,I can see that only comments were updated on second round. I didn't find any code that has been updated on 2nd round.
0,There is no test plan mentioned in the wiki page by the team.
0,"I think the additions/ fixes done might be working mostly. My only concern is that it should be tested once since I could not do so, as the credentials are wrong and have not been updated by the team correctly in the wiki file.
And I don't really think that the project should be redone since most of the cases have been covered by the team and I can vouch for the working by looking at the screenshots and explanations in their document."
0,"I think that the write-up has been written in a systematic and proper manner covering most of the stuff.
Moreover, some things that were told to be added like for eg. test plan has not only been added to the wiki doc but also has been explained illustratively with the help of screenshots which make it easier for the reviewer to visualize rather than just simply putting the code changes made as of last time.\
I only felt that the login credentials should have been updated correctly in the wiki doc."
0,"I think that the team or someone else just changed the login credentials which is why I was not able to login as instructor. It got redirected towards forgot password and asked me to enter my email address for password changing.
In order to avoid any consequences, I did not change the password and thus could not test the project from the UI."
0,"I think the code is well-written. Naming convention were good. However, the feedback given in round 1 were not addressed in this round."
0,"The team has pretty much covered most of the test cases as seen in the Rspec test file.
Moreover, I think there is an improvement in the test coverage which now has become 27.125%"
0,I think that the build passed successfully in Travis CI and there was no problem that was detected.
0,"Looking back, I'm not sure what problem 2 is trying to fix. But, as an instructor, I cannot add any course to an assignment that I don't own.
As for the profile settings, I get an error when I try to look at my profile:
undefined method `preference_home_flag' for #<User:0x0000001287e8c8>"
1,"Yeah I could see commits done during the second round of submissions however not many were done since maybe most of the task was already committed during the first round.
Also the commit names have been given correctly which according to me is a good practice so good work on that. :)"
0,"Not only did the team push throughout the entire project, they showed exemplary version-control practice by using merge requests. They committed before and during round 2."
0,The team has been highly active in pushing their changes continuously.
0,The code is working well even in edge cases.
0,There are no comments that I can see.
1,"Based on the test cases I tried, the code is ready to be deployed. The team has made sure to include edge cases in the implementation and also included them in the write-up."
0,"From what I could tell, the code looked all right. However, it's difficult to tell since some of the changes are made to master, some are made to beta, and some don't change anything at all. The same line has seemingly been erased and re-written.
Also, the pull request isn't made from this project to the main repo."
0,"The write-up is well written. Good work on that. The team had given details of the problems, solutions, its explanation as well as a detailed Test Plan."
0,"Yes, the team kept on pushing their changes throughout rounds 1 and 2 which is evident by their 200+ no. of commits."
0,There is a section titled 'Test' but it is empty. It should be filled out with a test plan.
0,The code works as intended. The team has done good work and have solved the problems stated in the first review. Great work.
0,"As I said, I'm unsure what problem 2 aims to fix. I'm also a little shaky on what the user is supposed to be able to change in their profile and was this setting is supposed to do.
Also, I wish the code was better explained."
0,The website is down because of which I cannot test the author's work
0,"Yes, the team was submitting their changes throughout the project. They committed changes in round 2 as well."
0,"Yes, the team has added new test cases. The coverage has decreased but it has decreased by a very small number so it's okay."
0,The names are descriptive enough to omit the need for comments which is a better way than by using comments.
0,"There is no test plan that is presented by the author in the writeup. Also, the website is not functional which makes it difficult to gauge and comment on the possible pre-conditions, edge cases and invalid test cases and other scenarios that can probably be included in the test plan."
0,The variables and methods are according the conventions and the code follows the community standards. All the names are suggestive of the functionality that it performs.
0,Cannot manually test the site as the given link is not working.
0,No new test cases are created.
0,"1) The length is good but the cource_optoins can be broken down in smaller functions.
2) Looks good
3) I feel that that more comments needs to added
4) The ruby style guide is not folllowed at some places.
5) No"
0,"No, I have to look at the code how it is working the options = ['--------', nil] is a strange value, have to look at the coed to understand what it does"
0,"This application did a good job of putting more code in the model than controller. However, the controller code is still a little bloated, as in the students controller.  No methods are horribly big and everything is named properly."
0,No the build failed. There are some code climate issues.
0,"Yes, the build passes Travis CI."
0,"Yes, new commits were made during the second round but now new code was committed, only test cases or comments were added."
0,"I like the organization of the methods in the controllers, I find them intuitive to understand the function and relevant to the model they are placed in. Some methods with similar tasks seem to be repeated, but the content seems to be different, so I can ignore that."
0,"The wiki page explains what is the current functionality and what are the issues and what need to be done. But comments/clarification is missing for the new code flow. There are some issues: dead code not deleted, pull request created in master branch, code guidelines not followed. Test case not changed to cater model changes."
0,I couldn't find any bad names or long/complicated functions. Comment have been appropriately added. The team has made sure to follow good Ruby coding standards and the code follows the DRY principle.
0,"Cannot get to the profile page of any user. It results in an error when ""Profile"" button is clicked."
0,There are no tests in Test Plan.
1,There is a decrease in the coverage so more rigorous testing can help in increasing it.
0,No comments.
0,The coding practice followed is good. The methods usually do what they say and there are not many commented blocks. Nesting sometimes becomes more in some methods but nothing to worry about majorly.
1,"preference_edit_flag and preference_home_flag aren't that intuitive. Perhaps something like ""actions_on_edit_page_flag""?"
0,The writeup is well documented and it is understandable.
1,"Markup made sense, but it could have been useful if some details were given to explain the code changes."
0,Yes it does work as intended.
0,"No link of pull request is mentioned thus, I can't review"
0,"Yes they did add the test cases!, however the coverage did decrease."
0,The code structure is good and easy to understand. One method handles one functionality.
0,The project does not consist of Rspec changes which is required as they have made changes to the controller.
0,Yes it did pass the Travis CI
0,The commits were not made but i feel they achieved whatever was required before only
0,"It seems right, but however seems like the VCL server down due to the network or local problem."
0,No Test Plan specified
0,It followed fundamental code writing rules.
0,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan. The proposed changes are attested with code snippets, screen casts and flow diagrams that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. The good part is that they have also mentioned about the reasons behind the error which shows clarity of thought process."
0,"Code quality appears to be fine.
> Methods haven't been cluttered with loads of tasks and are specific to the one they are supposed to perform.
> Naming conventions have been taken care of and the code readability is good.
> Methods are usually short and properly commented."
1,My biggest concern is that no tests have been added. This should be done first to ensure functionality is correct.
0,The problems I found with the writeup last time have not been fixed.
0,No Test plan given
0,Good through
0,No test cases wrote
0,"Yes, the code looks clean and it is ready to be deployed onto the production server. The only suggestion is to add appropriate comments for the code written."
0,The testing section is blank
0,"I am impressed with the writeup, it includes all the details required for a reviewer. The writers have improved the write-up and they added more screenshots that are easy to follow. Please add the code snippets in your writeup so that it easy to go through the code added."
0,"They don't have test plan in document, and there's no new test cases in repo."
0,"Yes, the UI works as intended and the error messages are appropriate. There is no need for refactoring the code, the code looks good. The feature works as supposed."
0,"1. The writeup is lacking in terms of explanation of how to test the functionality thoroughly.
2. At least half of code changes are explained.
3. Explanation of reasons for the style of code and problem solving approach is lacking."
1,"The team added all the test cases and different scenarios were explained and screenshots of them have been used to explain it in a better manner. Yes, the coverage increased for the case they added. According to me, the newly added test cases cover the full range of the project. Just an add on[not important] but you could add a case where the penalty per unit and maximum penalty are the same because in the real scenarios that do not make sense when we have the option of selecting hours or days."
0,The names are easy to understand.
0,Yes the Travis CI build passes. There are no conflicts that must be resolved.
0,The last commit was made on November 1st. There was no new code committed during the 2nd round.
0,"Just same as the above said, I do not see any tests written in the rspec file folder"
0,Their test failed on github check.
0,I don't see they mentioned test in the document.
1,"There is no test plan on both the wiki page and Github. 
Please add the Rspec test and convert them to automated tests."
0,It's well organized and in detail.
0,"Yes, the writeup is clear and adequte. But I think the second part didn't finished, I don't see the change on views, regarding the requirement."
0,Functionalities are well mentioned in the README file.
0,"The first scenario to render the correct view as directed (fixed stored ""manage content ... "" issue) by going to the manage content and selecting an option that differs from the one stored as manage content - is working as expected. Checked multiple times and also checked that the URL changes accordingly. 
The second issue has been tested manually and the page doesn't show editing features for the rubric that doesn't belong to the instructor. Cases also checked - changed the URL to try and edit a rubric not belonging to the instructor - worked as expected."
1,"Though there are flow chart diagrams to explain the expected workflow in the project, there ain't any explicitly mentioned test plan and there are no spec files modified to run the tests. However, this can be modified in the next iteration of the project."
0,"Readme is appreciated, which has details on admin account and predefined student and librarian accounts. Navigating forward and backwards from one page to another is a little difficult. Admin can log in but not log out."
1,"Code is DRY and follows Ruby convention. The functions are neither long nor too complex and are appropriately written. Comments can, however, be added to ensure the changes and added functionality to help in the further iterations of Expertiza project."
0,No test plan and it's related test cases were converted.
1,"There are original comments for the functionality already present in the files. However, there are no comments to explain the changes made in the code. The team can add comments, especially in the tree_display.jsx file for the one-liner changes and block code added in the file. Comments can also be added to the tree_display_controller.rb file in the ""action_allowed?"" and ""confirm"" functions to explain the minor changes made throughout."
0,The code has been well written and the variable names are properly used. They are intuitive and easy to understand.
0,The github page is not opening but I downloaded the README file which is attached. The README file is well described.
1,"Though the test plan section is absent, the documentation provides a complete flowchart as to how the correct code should work and what is expected of it. It would be better if the team were to explicitly state that in a new test and test plan section. This can be implemented in the next iteration of the project."
0,"Github link seems to be incorrect as it gives a 404 - page not found. Hence, could not check this."
1,"The workflow is documented properly and though there are a few missing sections the overall flow is understandable. The purpose has been explained clearly and there are a good amount of graphs to explain the project use cases. The major and minor fixes done for the project are explained well with the help of code snippets. There's also a screencast of one of the fixed bugs.
The team can improve upon the wiki documentation by adding the test plan explicitly and adding the screen recording for the second bugfix (task 2: Instructors can make changes to each others’ rubrics )."
0,"1) Admin login is not working. I get a blank page with this message: ""Find me in app/views/sessions/create.html.erb""
2) UI is not very intuitive. Readme describes the basic features but the flow has not been described properly."
1,"The write up has been carefully written and it is structured well enough to get a good grasp of the project. The flow chart diagrams definitely make it easier to understand how the code is expected to work and the accompanying code snippets help in understanding the changes made to the code base. Lack of a test plan section is one thing that can definitely be fixed by the team in the next iteration. Overall, from the introduction to the major/minor bug fixes description has been neatly laid down."
1,The code looks good and it follows the ruby coding principles. The code had no flaws and there was no need to improve the code. They could have added meaningful comments for the code which was not done.
0,No comments are available.
0,Pretty Clear
0,"Definitely, this code is ready to be deployed."
0,The write up was extremely detailed and very informative. No information was missing from it.
0,Functions are small and are written for what they are intended to do.
0,The webapp works how it was intended to work
0,The class and variables are named relevantly and are semantically correct.
0,Test cases were added and code coverage was increased.
0,Yes the build was passed
0,"Yes, new commits were added."
0,Didn't find a lot of comments.
0,The code was written very well.
0,There is no mention about the tests at all from the team's side.
0,I think it is ready to be deployed.
1,"UX wise the app is well designed. Links should be on new lines, though. Navigation is pretty easy. However, I consistently saw an error trying to perform different actions in the app : `We're sorry. Something went wrong'."
0,Really good. Good job!
0,I didn't find any test plan on the wiki page.
1,"Yes, they did. But the coverage decreased."
0,Yes it did.
0,"Yes, in that sense code is very elaborative along with diagrams to support."
0,Looks good  to me.
0,It is clear in terms of explanation.
1,"I think more comments need to be added. I saw they add comments for tests and views they changed. I think they still need more comments for their controller changes. As they added a new controller for late policy, so they may need to add comments about it."
0,"The writeup is well-organized. The test plan is much more specific than before. I just follow flow of the test plan, and I can easily find out what the function they have finished."
0,"Yes, the project works well. And adding new policy and ""back"" link works as they supposed to. New policy can be created correctly according to the fields input. And clicking on ""back"" link can be directed to right page."
0,Yes the features work as intended.
0,"They added test cases for all cases. And they even post the screenshot of all Rspec tests' result. Although the coverage didn't increase, I think the newly added test already cover most range of this project."
0,The test plan section is missing and Manual testing of one task is done instead of the automated testing even with the UI.
0,"Yes, the build pass in Travis CI, and there isn't any conflict that need to be resolved."
0,Yes there are sufficient comments!
0,The test plan is not mentioned and only one ui testing is done that too manual clicking based.
0,"Yes, they committed new code during the 2nd round. And they created the right pull request this round. Great."
0,Everything is well explained and very easy to follow.
1,No problem. The code seem dry and easy to understand. The only thing they need is to add some comments for all their changes.
0,Yup the write up is easy to understand but missing the test plan
0,The authors have implemented all the Test cases mentioned in the Test Plan in their respective Rspec files.
1,"The new functionality implementation is done using if condition in the same method. this is not in accordance to ruby principles. This also makes it harder for your changes to be merged into the final project. Also there are no comments for the changes made. 
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
0,"Build failed, and there's no test plan section in wiki"
0,"Fair, there exists reasoning in the wiki doc and the function names are descriptive, though there're no specific comments for the methods."
1,"The authors have implemented the new functionality using if condition in the same method. this is not in accordance to ruby principles. Also there are no comments for the changes made. 
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
1,"app/controllers/late_policies_controller.rb : The variable name change from penalty_policy to penalty_policyx is unnecessary and confusing: need to refactor
app/views/late_policies/index.html.erb : Changes made are redundunt and create unnecessary review delay
db/schema.rb : [DANGER] Field Feedback is removed
                      : Certain changes made are redundunt
spec/models/late_policy_spec.rb : Comments needed"
1,The test plan section of the documentation is organized properly with subsections for each problems and further bullet points for the checks made.
1,The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes.The code embedded using pre tag in the expertiza wiki runs over the page and is not visible. I would also suggest splitting the Solutions to problems into 2 sections: 1st one detailing your proposed implementation and the 2nd section detailing Code changes.
0,"The reasons of implementations on bug fixes are clear, yet there isn't any mentioning of any design patterns"
0,"The wiki write up covers issues assigned to this team, and detailed documented the steps it took them to fix these issues"
1,"The write-up details all important aspects of the project. however, there are certain problems with structuring. The Code snippets are flowing out of screen. I would suggest adding a flowchart to the wiki documentation to assist the review process. Also the code coverage section is empty."
1,"The naming of the variable and the methods is great, partily because the code uses a lot of variables which already have. And there is a glitch, if the  validates_format_of   is validates_url_format will be better I think.
The code  validates_format_of :url, :multiline => true, :with => /^(http:\/\/www\.|https:\/\/www\.|http:\/\/|https:\/\/)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/ should have same comment."
0,"The code works properly and has been tested locally. Cases tested include blank policy creation, back buttons functionality."
0,"yes i have reproduced the issue and then also checked after the change, issue does not exist now."
0,All test cases have been addressed.
0,Code follows all the Ruby conventions and functions are properly modularised. The code is DRY and everything seems to be in order.
0,"1. I cannot even find the pull request for this project #1939. (this team did not give the link of the pull request and I have looked all the 84 pull requests)
2. The writeup is lacking in terms of explanation of how to test the functionality thoroughly. Since there's no code part on the wiki page, I tried to go find on their Github, but they did not change many lines of codes and I did not find any comment.
3. Explanation of reasons for the style of code and problem-solving approach is lacking."
1,There are a couple of comments but they are sparse. There can be comments in the LatePolicyController.rb and test cases for the controller so that it is more readable and easier to understand.
0,Team has not tested the code
0,All method names are intuitive.
1,"Test plan has been written and it documents the steps to create a new late policy and how the back condition works. However, the team can discuss the edge cases and what they can test further. These changes can be made in the next iteration of the project."
1,"The wiki page is coherent and well written. However, the Code Coverage section is left empty and there can be a screengrab/recording of their working implementation to make the page more intuitive. These changes can be made in the next iteration of the project."
1,"Write up is well written. As per the comments on question 1, screengrab/screen recording can be added and Code Coverage can be filled up."
0,Code looks dry tp me but the name of variables could be improved. Since this was bug fix so team has used pre existing variables and not refactored the code and use more meaningful name for variables.
1,"Policy validations are all working well. Able to create policies.
One edge case I found is, while creating policies, if I put 'a' in maximum penalty, it says
The maximum penalty cannot be less than penalty per unit.
It must say, 'maximum penalty must be a number' right. Just a minor correction required."
1,No they have no created any test plan. Team can test the existing test cases and make new test cases to test the methods which they have creates.
1,"I really liked the write up by team in how they have showed how to reproduce the issue and explained in greater detail, gave many other project details too. Just team should write test cases."
0,"Task1: Inappropriate redirection: Working fine
Task2: Instructors can changes rubrics created by others: Working fine, however, the reproduce part in the wiki is a little misleading. What the team has done is remove the edit button for rubrics created by others and hence the functionality is working."
0,"No tests cases written, no test plan mentioned in the document."
0,The code seems fine. Good coding practices have been followed. Methods are concise and handle single functionalities.
1,"Most variables seem fine.
Can look into renaming variables like selMenuItem to selectMenuItem, selMenuItemInd tp selectMenuItemIndex, rubBuffer to rubricBuffer."
0,No test plan provided
0,The problems and the teams approach to solve the issues has been well documented.
1,"The documentation is fairly complete and explains what, why and how it's done.
Test plan can be added to make it complete."
0,The tests have failed and the test coverage is also decreased. Looks like new methods have been added. Most of the methods use the existing variables so it is according to the ruby standards. Method names are proper in sync with the existing code.
0,Yes the feature work as intended.
0,no test added
0,"1)code is short and concise.
2)code is decoupled
3)comments not given on any if conditions and variable names are not self-explanatory."
0,Comments are not provided for the method.
0,"The code overall looks concise but variable name ""rubbuffer"" is not self explanotary.Also variable name ""selMenuItem"" also not self explanotary."
1,"Overall writeup is good but while explaning the ui glitch/ui path error that authors have solved could be explained with more accuracy as there is ui path problem explaining problem with bullets like how to go to that specific page and what will happen would be more helpful.
As current explanation in sentences which is more verbose and confusing. Like the said if you are on assignment tab but how to go to the assignment tab."
1,the writeup is well written but there is no screencast for 2nd task. also as said earlier bullet point approach for explaining ui path would be more helpful.
0,"1. function is well and do not need to be separated.
2. more comments are needed to make others understand easier."
0,not code is not ready to be deployed
0,"Yes the feature works as intended. When I was change from courses to Assignments and click on Manage content again, the page landed back in Assignments."
1,I was't able to see any Test plan or automated test. Test should be written for app/controllers/tree_display_controller.rb and modified for other ruby files
0,The build is failing after latest commit.
0,"1. All the functions are adequate
2. No, the length of methods are fine.
3. Adequate information provided on wiki page
4. The code follows the ruby guidelines.
5. All code looks good"
0,"The team has made changes in multiple files where they need not create a new method, hence no comments there. The wiki pretty much explains what they have done and how they have done it."
0,"The variables used in all files like app/assets/javascripts/tree_display.jsx, app/controllers/tree_display_controller.rb, app/models/questionnaire_node.rb, app/views/tree_display/list.html.erb are good. The code clearly depicts what it is doing.  I didn't find anything where names doesn't suggest the functionality."
0,"According to me, the code looks good enough to get merged. Once the Mozilla team approves their testcase changes, their changes can be merged into the OSS project."
0,"Code not ready for deployment, unable to merge the code"
0,The document explains how to test the feature but I couldn't find the test case as such.
0,"1) The function of the framework works and the code is DRY
2) Essential comments have been provided for another team to pick up
3) The test after create pull request did not pass and says there are existing conflicts"
0,"Yes, the write up seems pretty clear. I was able to login and check the functionality with help of wiki page. The Flow chart help me understand what should I do."
0,Code write up is clean and easy to follow.
0,"just as the author said in the wiki, ""Bugs that are still to be fixed: 1. When the instructor doesn’t allow the bookmarks to be created, we can still add the bookmark but cannot rate or review it."", the bug they have in their programme. And the things finish in the wiki has been tested manually."
0,wiki page is very well written. They have explained the proposed changes and why did they chose that approach.
0,The write up is pretty detailed with screenshots and code snippets.
0,"- The writeup is much better now. They have added enough information for reviewers to understand. They also explained the reason for not doing things like adding comments etc.
- They included screenshots now which is good and a good addition."
0,The write-up is very well written with Github code diffs shown for code snippets which provide for easily readable code. They have also neatly addressed the test plan section and very well explained the setup and steps in their project.
0,"1. There are bugs in a critical feature.
2. Some features are not implemented."
1,"1) The writeup overall is good, they explained in detail about their project. Like file they modified, the work-paln of the framework
2) The size of the screenshots varis, some are too big while some are small. Need to be improved
3) The reason/user story for this project is not well explained"
0,"Most work they have done well, but there are still some bugs need to be fixed just like the author said on the wiki page:  When the instructor doesn’t allow the bookmarks to be created, we can still add the bookmark but cannot rate or review it.
Issue 1 and 2 are finished including the ""back"" buttons and security measure of the form for adding bookmarks."
0,System is working as it is supposed to be but there  are few issues in PR like merge conflicts.
0,The topic does not include improving the or dealing with the UI.
0,No new test cases written
0,The code works as required. The doc takes care of the rest.
0,"According to the PR comments and the wiki documentation, we can see that their current code works as expected and their test cases also return true for the iframe tests (expected behaviour). They have also worked upon their code as their per the guidance of Mozilla mentor to write the best version of the code."
0,"1) This project is supposed to test manually
2) Everything works as it was required and the framework has been improved"
0,Team seems to have added few new test and removed some older test.
0,"yes, they wrote test cases to test the functionalities that they have implemented."
0,"Servo project, test cases already written"
0,- They didn't add any new functions or files but they have made many changes in the available test cases related to their changes.
0,"Not really clearly about the bookmark function, but I just follow the steps it list, still not know what the bookmark really does. Since there are too many instrcution about the procedures."
0,"1. The writeup indicate the functionality it is related to.
2. I cannot clearly understand the project since they do no have test plan and their methods do not have comments."
0,"1) There is no automatic test for their fixes in the frameworks
2) The pull request seems did not pass Taskcluster's test"
1,"For the reviewers as me, I am not familiar with this project like the author, and I cannot clearly understand the detailed function of the bookmark from the information of the wiki page.
Also, as I mentioned above, there's no code and test parts which makes the reviewers feel harder to do the review. 
suggestion:
Please add more detailed content on the wiki page including test and the explanation of the code."
0,The build did not pass and there are merge conflicts as well in the pR
0,It is not an Expertiza project.
0,The question is ignored since it is a Mozilla Project.
0,Travis CI did not pass
0,Ignored since it is mozilla project
0,Changes are made during 2nd round of project.
0,yes they keep submitting their code during second round.
1,"Whatever is mentioned in the write up is clear but as mentioned in the above comments it can be more clear. Some screenshots of work or a quick video would be good.
Also, the process to guide the user to check the functionality can be more clear and in points so that it is easy to follow.
Mentioning the code files  modified in the wiki page and showing a giving a quick glance of code snippets.
Wiki page isn't sufficient to get the complete understanding of the project so the user had to go to the projects description in the OSS document to get more understanding on it. To avoid this, the team can make their wiki page more informative."
0,Code was regularly added.
0,- They regularly made some commits in the PR submitted.
0,The latest code commit was made on 06 Nov 2019. The team made consistent code commits throughout the project duration.
0,New code was commited
0,"1) They have been keep working on this project
2) There have been commits in 2nd round, but most in 1st round"
0,Code is well written and functions are not very long or complicated
0,"Overall, the code written was very well and self describing. Names of the variables are self explanatory."
0,Code written according to open source guidelines
0,Code is DRY and well written. Work looks pretty good. Once the dependencies get resolved this code is good to be merged.
0,- The author constantly collaborated with the reviewer of the PR and made changes when needed and asked by the reviewer.
0,"No, I have not seen any test write in the RSpec and the author did not mention about test plan on their wiki page.
 
Also, I have looked through the code of GitHub, there's no Rspec file is changed."
0,"Code has been written well, and they have improved upon the code as per the mentor's comments."
0,Well written
1,"1) The code is DRY enough, there is no bad names for variables and methods
2) No complicated function which should be separate in the code
3) I think there could be more comments since modification with the framework usually associate with a lot of things, sometimes it is really hard to follow with little comments"
0,Build seems to be working and code is working as intended.
0,"yes, this implementation is working as it is supposed to be."
0,The build works. There are still unaddressed comments on the PR.
0,All the basic functionalities are working properly but the code written is inefficient/uses bad logic and/or does not follow coding practices. Some cases don't work.
0,"1) The build was succeed, however, I do not know whether it works since it only fixes bugs for framework
2) There still are features waiting to be implemented for the entire project"
0,test plan covers all the possible scenarios.
0,"The test plan specifies the prospective test cases to be covered and the basic code structure/styling, which they pass."
0,Did not discuss all the cases in Test Plan
0,"The code has any 3 of the following characteristics:
1. is DRY
2. follows Ruby style guide
3. is commented
4. does not contain long methods"
0,"1) The code looks good and no method is too long
2) There are no automated tests at all but only to test it manually"
0,"Code does not have any long methods, this code is written in rust not ruby so i don't think"
0,actually none of the tasks needed much code and most of them were to updating the already existing code.
0,The code done so far looks clean. But cannot comment extensively now as there are still issues that need to be fixed.
0,- There are various comments on the PR related to code issues. Changes are very small to judge any of the above criteria.
0,No such code found. Very less files changed
0,"1) No functions are too long
2) Since every method is implemented concisely, there is no need to separate
3) Some comment are not comprehensive enough but only left a url
4) It does follow RSG
5) The code is DRY enough"
0,"Proper comments are present in code, helpful to understand what is being done in the method."
0,comments were very precise and to the point in their project. it did not took a lot of time for me to understand their code.
0,Comments are desriptive and nicely written.
0,There is great code commenting done. They explain all they have done very well.
0,"- Very well commented code.
- They have even added TODOs which is a good practice."
0,All methods and line changes are heavily commented on their reference source and working functions.
0,"1. There are comments for each method.
2. They descripe the method thoroughly."
0,Methods and name to be suggestive and reasonable.
0,All name of the functions and variables were logical. every one can understand what does it mean by its name.
0,The naming convention is followed well. The build failed though and thus the merging is blocked. Also I see some issues are still open and not fixed. The writeup is well written and the stuff that is done is easy to follow.
0,"- Build check failed on PR
- No information of test coverage provided
- Variable names seem to be according to the project specifications as the issue description contains all this info."
0,The variable names are properly labelled and the function methods are intuitively named.
0,Well commented
0,Writeup is well written
0,They have provided with test plan.
0,they did come up with the plan that was sufficient enough to test all the proposed changes. good job guys.
1,The writeup does not have an explicit Test Plan mentioned. It does have some commands for testing. The testcases that have been used are not explained. I would suggest that add custom testcases and write a bit about them in the Test Plan section.
1,The test plan section is succinctly yet accurately written. The test plan can be improved by adding a screencast / screen grab of the actual test to make it more impressive.
0,Not sufficient cases included
0,"Their test is good, but I think they still have some problem unsovled, since their check is failed."
0,"1) There are no automated test implemented for the project
2) The manual test works with no error
3) Functions are not all implemented yet"
0,"yes the writeup is easy to understand and clean, they mentioned that design pattern are not applicable for this project."
0,yes the write up shows exactly how they approached the problem and why did they took those steps.
0,They have explained the approached in a detailed fashion.
0,- Well explained doc. They have added snippets along with the code step which makes it easy to understand their approach.
1,The wiki page is very well written and detailed. It is coherent and easy to follow the flow of logic. The setup of the project environment could be expressed eloquently.
0,Well documented
0,"The writeup is well written and easy to read, they clearified what the do step by step, and attach images of the files they changed."
1,"1) The writeup does tell the work they did and how they did it
2) The reason for doing this(user story) are too short and really hard to understand why should they do this
3) They used screenshots to help explain the code and there should be more comment to explain also"
0,Proper details are provided in the wiki to understand what changes are done
0,wiki page were excellent to understand the project thoroughly and all the proposed changes. problem statement was mentioned clearly in order to understand the project purpose.
1,The scope can be explained more. What is done and why it is done can be elaborated.
0,Explanation of requirements and details of implementation is done with sufficient details.
1,- Good writeup but I would love to see a description according to a user. What was I not able to do and what can I do now after this change. It would make it easier to test as well for reviewers.
0,"The variables, methods, and class names in the newly-added code in the pull request is clear and good."
0,"(1)None of the functions is too long.
(2)None of code needs be extracted into separate methods.
(3)There is no descripe comments for each method. But the code is very easy. I could get it.
(4)The code does follow the Ruby Style Guide.
(5)The code is DRY."
0,"They have converted all the cases discussed in Test Plan into automated tests. However, there is some mistake in their pull request."
1,"I can understand the project clearly by their writeup.
I recommend you put more details of modifications that you have made to the project. What did you do to fix the bug? Why the changes?"
1,Explained with tons of details and well explained but can improve by adding screengrab/recording of their implementation.
0,"Class name, variables, method name are good. Nothing seems wired."
1,"Functions are not long. No code needs to be saparated to two methods.
 
More comments would be better."
0,"Their writeup well written and easy to read, however I cannot thoroughly understand the project."
0,"Yes, their tests are written in rspec and can be automatically run by pull request.
 
Did you add tests for all cases for coping an assignment?"
1,"It shows that 8 files have been changed and I personally feel the following after going through the changes: 
1. The Gemfile.lock file Ideally should not be changed, unless documented or requested upon doing so. This file basically contains the versions of each gem and changing it might alter behavior in production, on a running expertiza application, which might cause the application to behave differently. 
2. The test cases (RSpec) when writing it ""XXXXX"", you don't have to mention the method name again, as it becomes redundant. Redundant because the method name ideally is used when writing the clause for describe. We usually say - describe '#getname"" (for example for an instance method), and it ""returns name"" or whatever, so writing it ""returns name from #getname"" is basically redundant. 
Otherwise, the code seems fairly DRY."
1,"There are no comments anywhere in the code, and when adding a new file (view/checktopicscopy.html.erb), it is expected that comments are written to better help understand what exactly is being added."
1,"1. The function methods don't seem to be too long
2. Code is being refactored and divided into different methods and onto different files, which makes it clean. 
3. As answered above, the comments are missing, and having to read code is becoming tedious. Please do add comments to make code easier to read. 
4. The code does follow Ruby Style Guide, with right practices for views/models/controllers. 
5. Code is pretty DRY and well written."
0,"The code seems to be using RSpec, and coverage does increase too. Automated test cases have been written, and though some redundancy is observed when describing the test cases, the test cases themselves are working as expected."
0,I have manually checked and the cases it fails is already mentioned in the writeup and is well documented.
0,"The write up is detailed and informative.
I could understand the problem statement, issue and approach very easily"
0,Test plan is detailed and lucid but it does not include the edge cases
0,"All of the code added follows Ruby on rails principles and the variable, method and class names are standard."
1,"Code added is very well maintained and written with all principles in mind, but it doesn't include any comments. I would suggest them to add comments even though the code is intuitive"
0,I cannot see any test cases added/modified in the pull request
0,Yes it explains with great ease what all the issue were about and gives the plan properly to fix the issues.
0,Yes the write up does explain what the authors have done and how to test those changes. It is informative
0,Yes the code is adequately commented. It is not heavily commented which is a nice thing.
0,Yes it works!.
0,"The write up explains in detail, the functionality of the work done by the team. This being a feature/functionality improvement project, the authors have provided sufficient details of what the problem was there with the code previously and what they have done to improve it. I can clearly understand how & what the project does from reading the writeup."
0,"Yes, the write up explains all the work done by the authors and also, why they did what they did and the way they did it.
It explains the problem statement, the solution and the way to test the solution.
Everything is easy to follow."
1,"The write up does include a very well detailed test plan.
Test Plan shows how automated testing passes all the existing test cases as well as how manual testing for the team's feature implementation can be done.
No newly added test cases exist for the new code written by the team. New RSpec test cases can be written to test the newly added functions."
1,"Reasonable and meaningful names have been given to the newly added functions.
Not a lot of newly added The variable/method names can be improved by following some convention, like `CamelCase` or `using_underscore`"
0,"Comments have been added in the describe section of the spec.
No new comments have been added to the source files."
0,"The feature works correctly. 
Description is very well defined in the wiki page."
0,The write up well explained and include the steps done and to be take to run the test cases
0,The write up well explained and include the steps done and to be take to run the test cases.
1,The write up doesn't include the name Test Plan but the content include the test plane and is well described. I think the code modification can also be mentioned so that we don't have to look for the code changed or added.
1,"The name are suggestive of the functionality and  defines the variable methods and class name clearly. There is some redundancy in the code that can be avoided.
The gemfile is changed and it shouldn't be unless mentioned. It may affect the website."
1,"No, there are no comments which make it difficult to understand the code properly. I think comments can be added that would make it more readable."
1,"more comments are needed, because you have trouble following the code. Rest of the things works properly."
0,"Yes, the test are automated  in the test plan. The code has increased coverage."
0,I have manually checked and the case that fails is mentioned in the write up
0,The write up is very detailed.
0,"The problem statement and test plan are very well documented in the wiki.
The authors have explained the steps to generate the issue with screenshots and the files that were modified for the fix."
0,"Yes, the test plan looks well written."
0,Not a lot of newly added functions.
0,The documentation is done with great details.
0,The write up has a detailed test plan which describes the tests and their automation process.
1,Some edits are only adding indentation (For example: app/controllers/assignments_controller.rb). This should be fixed to make the commits better and merging easier.
1,Codeclimate has listed out 13 issues which are detailed enough and can be made with relative ease. This will make the code DRYer. Ruby style guide needs to followed more.
0,They have done a reasonably good job on adding testcases as described by the plan.
0,Code seems to be working as tested.
0,The problem statement along with different scenarios and the solution are clearly explained. Proposed recommendation looks promising.
1,"variable copytopics is a string that seems to have 'Y' as the only possible value. It might be helpful to keep boolean it instead.
copytopics use copy_topic (snake case for variables)"
0,The writeup is well written and easy to understand.
1,"if variable copytopics is a boolean then naming it ""copy_topics?"" is more rubistic."
0,I tried a few scenarios and I couldn't reproduce the issue 1321 as well. So it seems to be non-extant.
0,"the test case for scenario ""when copy topic equals YES"" is well-written."
0,"wiki page does not have a video embedded, it does not have a test plan. the overall structure of the document can be improved."
1,"The write up is very clear and easy to follow. The team has stated what the previous problem was and what did they resolve and what is pending too. The steps for checking the bug is very clear.
But there is no explanation about the how did they do it or which parts of the files were modified.
May be including the screen shot of situation before the fix and after the fix would be great because it would be easy for the readers to follow and identify the work doe by the team.
The team tried to include a video but I guess the link is not embedded properly. It is still a text."
0,Yes. They commited new code during the 2nd round.
0,They added test cases and every test increased the coverage.
0,"Their task involved modification of existing methods, and the features work as they are supposed to."
0,"In the second round, they add more instruction about test coverage in their wiki page, which makes the writeup more complete and clear."
0,"One test case was written for 1st pull request (issue 1321) but it covered all possible scenarios.
One test was written and coverage decreased for 2nd pull request (issue 1211). https://github.com/expertiza/expertiza/pull/1569"
0,"Names are good, no long functions. enought comments. A lot of commits to improve the code accordingly."
0,"Yes there are commits during the 2nd round. They made to codeclimate, added tests and revised the wiki page."
0,"Pull request for issue 1321 failed. https://github.com/expertiza/expertiza/pull/1564/commits
Pull request for issue 1211 passed before 1st deadline. https://github.com/expertiza/expertiza/pull/1569"
0,some checks are not successful. but no conflicts.
0,"There are two pull requests. There was only one commit in only one pull request.
But it seems that both of them were almost completed before the 1st deadline."
0,They have some test cases written in rspec. Code coverage does not increase. cases are mostly covered.
0,The code looks fine. Tests have most scenarios. But I still go to edit assignment page after clicking copy.
0,"It was an amazing idea to loop through all the paths by iterating through a list/array for testing non-exsistence of bug 1321.
There was a minor change in solving issue 1211. And the test case for the same has been well coded."
0,Very clear writeup. They added a lot of screen capture to state the ui operation i believe it is good enough.
0,No new code is added in the 2nd round. Last commit is on nov 4th
0,the code may not be deployed onto the production server as the Travis CI build didn't pass. the features build failed which might be random. so I'm not sure of it.
0,2 Specs have been modified and one spec has been added
0,Yes the system operate as it should
0,The write up is written very well and is lucid
0,"the write up is very good. the problem, approach, test plan everything is mentioned and explained in a clear and concise way."
0,The code seems to be ready to be deployed but the only concern is with issues related by code climate
0,the URL given cant be reached. so cant comment on the system operation from ui.
0,"The code is written in regular style, I think it is ok"
0,the team didn't add any new test cases. the coverage of the tests didn't increase.
0,Yep
0,pull request has been made to repo.
0,"yep, test has been made since last time."
0,the latest pull request didn't pass the Travis CI build(pull1564).
0,the project has two pull requests. and a commit was made in one of them(pull1564).
0,the code is well written with meaningful method names and comments as well. the DRY principle is followed as well.
0,UI is ok for me.
0,No serious problems.
0,"The writeup is very well written. By dividing the writeup into 2 different sections i.e. 1 for each issue, the team has done a good job of introducing and explaining each issue, the solution and the conclusion.
For each issue, there are sections like Reported problem, Investigation approach, Testing, Results and Conclusion.
The Testing section for Issue #1321 had a very good illustration (flowchart) of all the possible paths that can lead to the bug. The illustration was followed by the same paths in writing which would have been really helpful in testing the project, had the deployment link worked."
0,No verification of testing or system operation could be done as the deployment link does not load.
0,I think it is Ok
0,The code was decent enough and followed most of the principles
0,Yes they made commits.
0,Code climate not passed
0,"Yes they added the test cases, not sure about the coverage"
0,Yes it works.
0,Write up is very informative and well explained
0,Yes it can be included in the corresponding OSS project.
0,"The team did not add any new test cases during the second round but had already done an amazing job with the testing part of both the issues.
The coverage on PR #1569 was the same as it was during the first review period as no commits were made to this PR. Hence, the code coverage after the latest commit on this PR had decreased by 3.4% to 27.121%.
The coverage on PR #1564 had surprisingly increased by 3.2% to 33.657%. The reason this is surprising is because the coverage had decreased by 6.2% to 24.298% after the last commit during the first round.
As the only commit that was made after that only dealt with the addition of a few comments to a single file, this does not look right, as comments have nothing to do with code coverage. I think that this behavior of coveralls can also be termed random."
0,"The code is well written.
Variables have been named appropriately. A few more comments could be added, but it's fine.
No new code has been added in the second round, so as such there has been no improvement in the code in the second round."
0,"The team did add many new test cases.
Some existing test cases were also refactored.
The code coverage did not increase, it decreased by -0.003% to 24.391%
There are many new added test cases, so it essentially increases the tests covered range of the project.
Added tests:
- redirect to checktopicscopy page 
- rendering of checktopicscopy page
- copies the original assignment to a new one and returns the new assignment_id when copyoption equals copyWithTopicTeams
Edited tests:
- redirect error message when new assignment is not able to be copied"
0,"The UI works as intended.
The features work exactly like they are supposed to. I am able to view & test the added feature when attempting to copy assignments.
A great job done on adding the feature."
1,"There were no new commits on PR #1569 which addresses the Issue #1211 and 1 new commit on PR #1564 which addresses the Issue #1321.
The commit dealt with the addition of comments to spec/features/peer_review_spec.rb as was suggested to team in the first review.
Note: Please check the Additional Comments section of this review."
0,"The authors have done a great job on the write up of the project.
They have added screenshots everywhere it is necessary.
All the required subheadings have been covered in the writeup.
They also added a section on ""Our Recommendation for a Separate Issue (For Instructors only)"", which includes the issue that the team feels should be addressed on priority. 
They have also added enough information on how to precisely test their added feature which is great."
0,"I think that this code is not completely ready to be deployed onto the production server for the OSS project. It will be after the refactoring required to resolve code climate issues.
I do not have any concerns about the project, apart from the fact that some refactoring needs to be done to resolve the 3 code climate issues mentioned above.
The project need not be redone from scratch using a different approach. This being a new feature adding project, the team has done a great job to implement as well as test the newly added feature."
0,"The code is well written and there are no problems like bad names, long functions, redundant or repeated code.
The new code added follows good coding style and all the Ruby style conventions.
As I had no problem with the code in the first round, the code still looks good to me. Better in fact, considering the addition of new comments.
The new comments make the code even easier to follow and gives an idea of the team's thought process behind the tests they wrote."
0,No such problems
0,"No, there is no new code added."
0,No the Pull request is not passed
0,"yes, everything works fine"
0,The write up is well scripted.
0,"Yes, it is"
0,Yes the code is ready to be deployed onto the production server.
0,"The writeup is detailed and includes the issue, its fix and test plan."
0,The project/ fix works as intended. There are no failures and it covers all of the scenarios.
0,The team has added test cases however the test coverage does not increase.
0,The build is passing in Travis CI with no test failures.
0,Code quality is good and it is DRY.
0,Regular code commits can be seen.
0,The code is well written and follows all good coding practices.
0,Team has added meaningful test cases wherever required.
0,There were no new code commits.
0,Everything works as described in the requirements document.
0,The document is well written with detailed description of what is done and how it is done.
0,"Yes, there were a total of 6 commits during the 2nd round."
0,Yes the Travis CI build passed successfully.
0,new testes cases were added and few older ones were modified. All the tests passed. Not sure about coverage as last comment about this by codeclimate bot was 18 days ago.
0,"1. copy without topics: I didn't see 'Topics' tab near General tab.
2. copy with topics: I saw 'Topics' tab near General tab. Topics had been copied and students weren't.
 
3. copy with topics and students: Both were copied under 'Topics' Tab."
0,"1) As the site is not reachable when reviewing, i am not able to test the UI and see whether the functionlity works or not
2) moreover, on basis of documentation, it seems they fixed the 2nd issue assigned to them"
0,"1) though the build does not pass, the code coverage increases by 3.2% which was previously decreases by 11.6%
2) in new commit they just add comments to old test cases."
0,The problem statement along with different scenarios and the solution are clearly explained. Good to have code snippets.
0,1) the new commited code does not pass the Travis build CI.
0,1) YEs the team commited new code during second round
1,"1) It follows DRY principle and Ruby coding guides
2) comments in test file need to be add and explain why this test is added"
0,"Yes. They considered all pre-conditions, edge cases, invalid input values, and other possibilities."
0,They didn't explain how and why they accomplished the fuction. They just explained what their job is. They didn't need to use any design principles.
0,They did a good job in wiki.
0,TRAVIS CI build case is failing
0,The writeup is good and detailed especially the test plan section.
0,The UI link is not reachable. So not able to justify on this
0,"Yes, the coverage increased to 34 percent. The newly added tests does have several paths to test."
0,"The build did not pass in TRAVIS CI. The test passed for model, view and controller but it failed for feature class."
0,"Yes, new code was committed with additional test cases during second round."
0,"Yes, the authors do have improved that."
0,"It doesn't seem to me that the code is ready to be deployed.Though there have been refractors made,the test coverage is decreased.Also the build doesn't pass.So,this code needs further changes."
0,"Operation from UI seems smooth and works as intended.But,there seems no major difference in the feature implementation"
0,"There are test cases added.But,the coverage has reduced"
0,This project has 2 builds.One of it is passed and the other is failed
0,"Though there seems to be a commit made,it has failed and not many commits were made in the second round."
0,"Overall the code looks good in terms of the ruby conventions,there are no complicated functions written"
0,The write up is great but no changes are made during the second round.
0,The tests cover the all the scenarios since the cases which can happen is not a lot.
0,The team do not added tests since it's already cover the range of this project. But the coverage decrease.
0,All the checks are passed and there were no conflicts towards the base branch
0,"The project has no new code commited during the 2nd round, the latest time to update is in October."
0,"The code style is satisfied with the DRY principles, and i think is okay in their naming, but no changes are made in their comments."
0,"No, I do not think that this code is ready to be deployed or a good starting place for a future team to pick up.
Basically, the first issue they said the bug does not exist, and for the second issue, there's only one line of code be changed, and I cannot even log in to the website to test manually."
0,"They did not improve the writeup at all.
It seems like they did not keep working on the wiki page at all, it is the same as the first round. 
the wiki page is still lack of detailed solutions, code parts, and explanation of code."
0,"Since the website is crashed, I cannot check any function of this project."
0,"Yes, they add the test cases, however, the coverage is not increased.
On the second round, they did not add new tests."
0,"No, their pull request did not pass in Travis Cl. (both pull requests in round 1 and 2)
It seems like they did not keep working on the wiki page at all, it is the same as the first round."
0,"Almost no new code committed.
It seems like there's only one new commit during the second round, and the most is about comment.
And the website is crashed, and they did not fix it."
0,"They did not improve the code.
They did not add more commits to improve the project and the website is still crashed."
0,"Although, Tests have been reported to be passed in the local, failure of integration tests could be a problem when merging"
0,"Pull Request for one issue passed the Travis test, while it didn't for another PR"
0,A new issue itself was created
0,"tried a few scenarios, i couldn't reproduce the bug as well."
0,Various test cases scenarios and edge cases tested.
0,nice idea to loop through all the path by iterating through a list/array.
0,testing code is readable. and the write-up is well written
0,Problem statement not mentioned(what's the original bug Issue #1321). Design pattern not applicable as only testing was to verify the existence of the bug.
0,yes features work as intended.
0,as mentioned on the wiki page. all the test cases discussed in the test plan were not converted into automated tests.
0,comments are not descriptive of the code functionality.
0,There are two pull requests where the build passed in one but didn't in another. There were no changes made to methods and class names.
0,the test plan is detailed but doesn't have code to support it.
0,the writeup is pretty well documented. everything is explained in a clear and concise manner. the issues were clearly mentioned and the approach and the solutions they designed for the issues were very well explained.
0,"the writeup is well documented and clearly indicates the functionality the work is related to. the problem, the approach, testing, and the results and conclusion are clearly mentioned."
0,"I cannot inspect the work, the deployment link is down."
0,The tests seem fine.
0,All of the code looks great!
1,The code documentation is good. I feel like the tests could be a little better documented. Some method documentation would be very helpful.
0,The code I have seen looks fine.
0,"The testing for the first half and very extensive. As you said, the testing in the second half is incomplete although I think the tests will also be very extensive once completed."
0,"The write-up is very, very clear about what was expected, done, and not done during this stage of the project."
0,The write-up is incredibly clear and descriptive.
0,"Yep, the pull request has been made to repo."
0,The Travis CI Build is Failing as of now. No conflicts as per the GitHub report.
1,"Travis CI: 3/4 builds passed. 1 failed due to changes made in app/models/tag_prompt.rb - 
 round_number = AssignmentQuestionnaire.find_by(assignment_id: assignment.id, questionnaire_id: questionnaire.id).used_in_round
One case might have failed since the tag returned the slider instead of ID(?). 
There were no conflicts but there might be other surrounding UI/functionality checks to be completed before merging the code."
1,"No, the build did not pass in Travis CI. There are failed test cases in tag_prompt_spec.rb, answer_tag_spec.rb."
1,"Well, the code did not pass Travis Ci test and the errors are in model section of testing so I would not recommend deploying onto the production server. As why it is failing the test has to be addressed first."
0,I think it could handle all kinds of problem in their function.
1,"The functionality of review count works as explained on the wiki: increase and decrease appropriately. However, the ""Alternate View"" button leads to an error page. That needs to be rectified. This too, is only for the assignment for which the tag counting functionality is enabled. It works well for other assignments."
1,"Some comments are unnecessary which are written for the understanding of the reviewer. Changes in the schema.rb file also need not be pushed. More extensive tests need to be written. Also, the tests failing the build need to be fixed. But otherwise, the code is DRY and need not be done from scratch. I believe this is a good place for a future team to pick up."
0,All the tests described and brought up in the Testing sections of both the issues were converted to automated tests using RSpec in features/review_assignment_spec.rb and features/peer_review_spec.rb.
0,"1) None of the functions are long. All the functions and tests written are very concise.
2) The new code does not need to be extracted into separate methods as each function does exactly what it is supposed to do and there is no method refactoring required.
3) Comments were provided to help the reviewer understand the code.
4) The new code follows the Ruby Style Guide and the relevant Ruby conventions.
5) The new code does not have any repetition and follows the DRY principle."
1,"There are comments provided for each new test which help in understanding the purpose of those tests.
Though the name is suggestive of what the test does, I'd still suggest the team to add comments to the ""is able to review when submissions overlap with review window"" test in review_assignment_spec.rb to explain how that test is testing that case."
0,"The Travis CI build passes successfully for the last commits of both the pull requests.
The test coverage decreased by 6.2% to 24.298% on the first pull request(#1564) and decreased by 3.4% to 27.121% on the second pull request(#1569).
The new variables, methods, and the tests are very readable and very suggestive of their functionalities."
0,"The Test Plan is separate for each issue and perfectly describes the additional tests that the team wrote to check the implemented functionality.
The team tested 1 edge case for Issue #1321 in which a review date is changed when a reviewer is in the review window, which I think is a very good edge case."
0,"The writeup is divided into 2 sections i.e. 1 section for each issue. For each issue, there is a Reported Problem section which introduces the issue, an Investigation Approach section which very clearly describes the team's thought process and also gives a better idea about the project, a Solution section which describes the team's solution to the issue.
A Testing section which describes the Tests that they ran and how they think those tests help in obtaining the results and conclusion which are given in the Results and Conclusion sections."
0,"The writeup explains each issue, the corresponding approach and the solution in detail. It is easy to follow the flow of the project because the writeup was smartly sectioned.
The flow chart and the flow paths for Issue #1321 were really helpful in the understanding of that issue and in visualizing the paths to get to the Begin Review step."
0,The authors work is working as intended.
0,"The code has been tested, covering most of the test cases."
0,All test cases have been implemented. The authors have considered the pre-conditions and different input values for the fix introduced.
0,The writeup explains the bug and its fixes in great detail.
0,"The writeup is quite detailed, it explains the issue, current workflow and its fix appropriately."
0,"yes, They converted the explained test plan in write-up section to test."
1,"The coded functions are average in length.
But More comments especially in file like review_assignment.spec.rb will be more helpful."
0,"Considering latest commits there are 2 comments which are well explained,
The total additional and deletion is about  10 lines of code and  so there are good enough comments which depict the functionality.
The comments help me to understand what flow they used and devised solution"
0,"Total code coverage decreased from 3.4 percent to 27 percent in the final project commit.
The practise to wrtie variables name and following ruby pronciples (DRY) methods are well followed here."
1,"1) The test plan in writeup section is looking enough from the documentation part.
2) The test plan in write-up section should have included some detailed comments regarding what test cases are write for what and it will help in future other who will work on adding test cases"
1,"The write-up is lucid enough. put screenshots of the of the work. Also write more detail about previous work on the same issue that someone worked on.
It will be convenient to reviewer to understand what new update team worked on.
 
Team  tries to explain the core of the issue and the process they went through about how they approach and all. While some of information such as mentor meeting and such is not necessary to be included in the writeup.
Rest all is perfect"
1,"Write-up is clear and it should have:
1) screenshot explaining what was before and what is after the solution
2) more test which may lead to finding the issue/bug which is your 1st issue."
0,"The test plan exhaustively includes all the tests. The bot passes the tests, but due to not able to check the functionality, I can't assure."
1,The functions are good in length. More comments especially in review_assignment.spec.rb will be more helpful.
0,"Yes, there are 2 comments in their latest commit, one of which is good enough to explain. The code change is about 10 lines, so there are good enough comments which depict the functionality."
0,"The code coverage decreased by 3.4 percent to 27 percent in the latest commit. The variables, methods are good enough to comprehend"
1,"The test plan section looks complete enough from the documentation part. As, I was unable to test the link, because it was unreachable, so couldn't specify about the testcases and edgecases. The test plan should have included some comments regarding what each of the condition does or a screenshot of it in the writeup."
1,The writeup is good and clear. But the issue related to Varun should be explained in more detail. More screenshots of the working if included would have been helpful for the reviewer.
0,"There has been tests written,with certain functions,but the tests are a little too lengthy"
0,"There has change in files,but there has not been any functions implemented"
0,"Yes,comments have been provided for each change made."
0,"The build passes,but the code coverage has decreased.But there can be methods written in a better way instead of merely changing the variables"
0,There has been a test plan put up. Writing test cases including different end cases is suggested in peer_review_spec.rb
0,"Though tried explaining the functionality,it is not properly explained as to what the project does"
0,"I cannot goto the page through vcl, so I cannot log in and test the author's work manually, so I cannot test the edge cases."
0,"I saw the rspec the author write in the both issues, I do think the second issue might have may have another case which is it's sucessfully review submission has done."
0,"Not any functions are new created, so hard to review. But the test function is easy to read."
0,"There is not new method create by the author, but the test in rspec  has reallly simple comments and easy to read and understand."
0,"There is no new method created, so the naming will be automaticly be cool since they just do the test of the old method which is given by perivous work."
0,"They have test to provide the evidence that they have contain enough possibilities in issue #1321, but not the issue #1211, since they just test for the simple case."
0,"The wiki pages said that the bugs are not acutally true , so the most part of the work done by the group is writing the tests."
0,"The wirteup is clearly to show the work and the solution they give us, I read it really easily."
0,"1. For issue #1321,  the tests in test plan are good and all converted to automated tests.
2. For issue#1211, just like the author said ""he didn't end up having much time to write exhaustive tests to establish this change"", so there's only one test which I do not think it is enough."
1,"1. From the wiki page, it looks like that the author only changed != ""submission"" to ""review"" to fix the bug, and I cannot check does that work since I cannot log in to the website. So I think the code is DRY and follows the Ruby Style Guide, but I am not sure it works or not.
2. more comments are needed on both the wiki page and Github."
1,"Pretty well, their variables, methods, and class names are reasonable.
1. The writeup is well written and easy to read.
2. It is adequately descriptive of the work done.
3. it attempts to explain the reasons for the style of code and problem-solving approach.
suggestion:
still, need more explanation about code part."
1,"The features work well but the build did not pass in travis ci, so not sure if the code is ready to be deployed onto the production server."
1,The write-up is good. It is written in good easy to understand language with relevant sections required. It would have been better if they could also highlight the part of code which was earlier and part of the corrected code to easily comprehend the work they have done.
0,"Yes, for the first issue #1321, they did a lot of tests and followed the OSS project documentation make sure that bug actually not exists. They do the test from different perspectives and get the conclusion.
For the second issue #1211, the test looks not complete enough. And it seems like the author took a lot of time to figure out the reason for this bug and made the description, but do not explain clearly about the solution."
0,"it is ok, since it is in same style which is regular."
1,"Yes, they have explained why and how they did the work on their wiki_page, but please add more code part on the wiki page.
In issue #1321, they did very well that gives a flow chart to help others understand this project, and they did the test to make sure this bug does not exist.
In issue #1211, the author wrote the process of solving this project clearly and detailed. However, I cannot fo the website on VCL from the given link on the above, please run the project on VCL again. It seems like the author only changed the code from ""!= ""submission"" to ""==review"", they did not explain much and also I cannot check it since I cannot log in."
0,Yes everything works fine.
0,UI is good enough.
1,"The writeup indicated the problem statements clearly, however, it did not give enough solution explanation.
Please add more comments about the code part and more explanation about the solution part. It is important to show others how you solve a problem instead of showing how hard you are trying to figure out what makes that problem."
0,"This link is broken and not able to test the deployment. Also, since this is an investigation topic, and the build has passed,  the changes of broken functionality are low."
0,"Although code is not commented very well, the write up explains the reasons"
0,Yes the teamhas added test cases in rpsec file.
0,The test work well on the function they assigned to.
1,"They added tests for the student_tasks_controller. However, they also made considerable changes in grades_controller and tag_prompt model for which tests weren't written. But the written tests seem to be extensive."
0,"yep, some difference has been made in second round."
0,It is good in this part.
0,The code seems pretty fine. There were issues in the round 1 which seem to be fixed now.
0,The test plan is impressive and complete. Very detailed explanation.
0,"The team has now included a test plan section to their documentation.
They have identified the Rspec files to be changed as well as the edge cases which need to be tested. I am not sure as to how you would test concurrency, unless you end up creating threads simultaneously to perform tasks."
1,"Yes, the design includes testing through RSpec and also manual testing but does not cover all the scenarios. Explain testing considering different scenarios will help to test all the features."
0,The team has included a test plan.
0,"The team has put in a lot of thought into the UI testing and mentioned them in great details. Rspec test plans could be detailed out. It seems like the team is yet to plan how to test the functionality mentioned in the problem statement - ""There should be an option when creating assignments that allows the creator to select whether the assignment will use team reviewers or individual reviewers"""
0,"Yes, there is a Test Plan section. It has a step-by-step description of the test to be impelemented."
0,An elaborate test plan has been added to the document. It was missing in the previous round. The tests don't seem shallow.
0,Both rspec and UI tests will be covered and all the steps and conditions for each of these are written. It is not clear how exactly rspec for the following test mentioned can be written: Reviews submitted by teams are treated identically to reviews submitted by individuals.
0,"Yes, they have included UI and rspec tests both, however rspec tests only have the file names, a one-liner about the tests they'd be performing in those files and how it affects would be good."
0,"yes they have included test plan in their design document. They have mentioned about what rpecs files they are going to change and importantly what functionality they are going to ensure in those test files, they have given step by step description of what UI testing they are going to do also."
0,"Yes, both Rspec and functional UI testing has been clearly mentioned in the write-up, showing that the authors know exactly what has to be tested moving forward."
0,"they have RSpec test and manual UI test, good"
0,"Their test plan part is quite complicated and includes all tests they may need.
I like their UI testing part, as our reviewers can easily follow the step to check their functions works or not."
1,"They have clear UML diagram. If a user diagram is included, it would be perfect. User diagram states the relationships between roles and functions."
0,The use of class-diagram and screenshots of before and after are sufficient enough to understand the change made and the underlying implementation.
0,The UML diagram clearly explains the changes to be made to the system.
0,There is good visualization.
1,"Screenshots are helpful. I would like to suggest to the team to modify the flowchart to not only represent how the models come together, but also include the controllers and the views."
0,Images are descriptive. They even contain annotations.
0,"The team has provided snapshots for all the changes that will be made to the UI. Also, a new UML diagram has been added - describing changes and interactions in the models."
0,The UML diagram is self-explanatory and gives a clear idea about where the changes are to be done.
0,"Pretty extensive diagrams, the class diagram is included, screenshots are included wherever necessary. However, they haven't worked on the last time's reviews, and the uml diagram still contains a descriptive text which it shouldn't."
0,"yes they have given mock up screens of how things are now and how they will look after their changes, which screens they are going to change they have also given UML diagram showing the links between different classes and how they plan to implement their feature."
1,"Both a UML diagram and pictures depicting changes in UI have been mentioned, showing the exact changes the team is looking to go about. A database relationship depiction would also have been nice, considering the changes are being done when reviewee_id is being entered into the ResponseMapTable. Nonetheless, it does give good visual aspect to the design document."
0,the URL image is very good
0,"Yes, the UML diagrams clearly describe the relationship between controllers and views they want to modify."
1,"They state the broad case, and files they are going to change in the wiki. More details of what actions are you going to do to these files and why are you going to do are needed. Like a more concrete solutions."
0,"The project seems to be completed and not completed at the same time as there exists a section ""changes to code"", while at the same time screenshots tell that the changes have already been implemented. The UI testing section also suggests that changes have already been implemented.
They have adopted Bullet point style for functionality and subsection containing proposed solution.
The proposed changes are easier to understand as the authors have included both a raw plan as well as a section detailing how they are going to implement the functionality in code using which methods."
0,The design is very simple and easy to understand the flow.
0,"Design document is very straight-forward, sets the required expectations for the reviewer and easy to understand."
0,Design doc has enough sections and images help understand the changes.
0,The design is straight forward and easy to understand.
0,The design is as simple as they could get. The database changes have been mentioned clearly and migration requirement specifically mentioned.
0,"The statement mainly deals with concurrent task execution. They are using the rails mechanism already exists to facilitate a lock on page edits, so that should be good."
0,"design is not that complex, the approach they are following looks good to me, and i think that is the only way we can do it, but to put this design to code needs more of research about what inbuilt features they can use, otherwise i am not sure how team will be able to get this done."
0,The design seems to be straightforward and clear.
0,"yes, can fully understand what they are going to do"
0,"Yes, their design document seems simple and clear."
1,"They design is completed and straightforward enough. But in the change of code section, I expect more details of what you are going to change these methods and files and why."
1,"The team has now included a Test plan in the documentation. They have also removed references for spring 2019. 
The changes proposed by the team sound appropriate at the moment. However, as mentioned in review 1 as well I would suggest trying to assign all members of the same team a common Id rather than having an extra field in the review map. This would simplify the whole process of assign_review_dynamically, automatic_review_mapping and a lot of other functionalities, which rely on obtaining reviewer_id from review_map to establish unique reviews and avoid duplicates or reinforcing review limit, which you will need to change on your current methodology. The only problem would be with the locking situation, which can be solved by a field ""locked by"" and contains a student_id. This will save you a lot of effort according to me."
0,"Yes, the design looks good and it is easy to follow. They have followed appropriate principles and patterns as well."
1,"The document is extremely neat and organized. I would suggest to start with the problem statement and then write the purpose of the project to tie it up together. Also, please don't mention the problems of the design implementation for the proposed solution under ""Purpose and Problem section"". Those are caveats for the proposed solutions."
0,"Changes are clear, but no design pattern is mentioned in de design doc."
0,"Yes, the principles like using a lock have been addressed appropriately and seems like the solution will work."
0,The design documentation is well-written and looks almost complete. The team has added the testing plan since the last review.
0,The design is sound and every detail of the changes mentioned along with screenshots of everything. The design changes in the database and UI have been mentioned clearly.
0,"The document was written as a wiki this time, changed from previous doc. Includes all functionalities, covered the design approach well."
0,"Yes, design looks good to me. They want to enable team reviews rather than individual reviews for some assignments, for that they have to do UI changes and corresponding backend changes. They will be looking for rubrics that can help them lock and unlock the review page when one of the person from same team is reviewing the assignment"
1,Project scope and expectations are very well mentioned in the document. Kindly work on the design or proposed solution along with the test plan.
1,"Wiki page overall looks good to me, but they could add some more details about their approach to solve the issues, and some more details in test plan. Team has written very basic details in these sections. Rest things look good to me."
0,The team has given a flowchart to explain what the implementation will look like after the fixes have been made
1,Nothing about which parameters will be tested has been written. It would look more clear if the team mentioned what parameters they plan to test according to the changes made
0,The test plan is detailed and clear.
1,There is only one flowchart.m but it is reasonably clear. There is scope for more visualizations to be added.
0,"The design is as simple as it gets. But it doesn't contribute much, if anything, to the document's purpose."
0,The design approach presented is a 'general' approach that can be applied to literally any software problem.
0,The explanations are very brief and absent in some cases.
1,"yes, as they are working on controller which never had test cases written, team is going to write test cases from beginning, but in test plan section they have just mentioned about the test cases related to new functionality, i am not sure about testing the functionality that is already there. In code coverage they have mentioned about covering 100% so i guess they have covered it in that."
1,yes they have given visualisation of all the issues and explained very well what and where the issue is. and they have also given flow diagram of how they are going to track the progress of their project. Mentioned about the approach they plan to follow.
0,"yeah, they are solving issues one by one. issues seems easy, but they may have complexity involved in depth. 
They have not mentioned any design as such to solve the issues, but just the issues."
0,"They have given good description of the issues but they have not mentioned about what exactly they are going to do to solve the issues, as it have been mentioned in all other wiki pages i am reviewing except this one. But otherwise team has done good job in giving full picture to review about the issues and their test plan."
0,"This project is regarding solving the issues related to deadlines, as marks are deducted automatically when user does not submit the review on time. They are not as such following any design they are solving the issues in current system."
0,The authors have adequately explained the changes to be made to the system.
0,"Yes, the design does appear to be sound."
0,"Yes, it kinda is simple"
0,The class diagram and/or other figures clearly describes the changes to be made to the system.
0,The design includes the test plan.
1,"The design includes the test plan. However, the team could have better explained the testing phase in the documentation. The features which will be tested in the late_policy_spec.rb and late_policy_controller.rb is also not mentioned by the team."
1,"The team has not attached any UML diagrams. The screenshots give an idea about how the User interface will be affected by the proposed code changes. However, use case diagram or a class diagram can give the reader more insights about the code implementation and the new features being added or getting affected because of the same."
1,"The design looks medium complex. The implementation proposed by the team, involves changing the current method to some extent and adding new methods to solve the issues related to deadlines and late policy."
1,"The design appears good. The team has properly explained the issues with the current code and how the new code will be implemented to overcome these issues. Along with that, the team has attached screenshots of the places where the code will be reflected. This gives the reader an idea about how exactly the code will affect the application."
1,The team has attached the screenshots. But the team has not explained the exact places where the code will be affected and what code changes will be made.
0,"Yes they have included test plan section. Compared to previous submission, they have included well-defined and easy to follow test plans for each of the functionality."
0,"The diagram related to the changes in the implementation is well described. But, it only covers part of the issues/changes proposed in the design. Like, it does not cover the issue related with dates updater."
0,"Yes, the design appears to be very simple and clear as it is well documented and they have clearly expressed the changes in the flow in the form of diagrams."
0,"Yes, the design sounds good and it followed appropriate principles but it is not clear which patterns are being used by them."
1,"Overall, they have explained the changes they are going to make in the system.
But, they have not explained how their test cases will definitely increase the test coverage which they claim to be. They should have mention some of the examples of how they will include edge cases in the test cases apart from the happy path. Like, they could have mentioned in the ""automated testing using rspec section"" that they will test whether on copying the assignment having due dates the same gap is preserved or not when you increase/decrease dates from date updater."
1,"> I think the existing issues have been explained but the changes proposed could have been more detailed.
> More details to expected results and the diagrams would have been appreciated."
1,"> Yes the design is sound and follows the principle.
> No mention of the patterns, however.
> A lot has been explained in the existing issues but a little more into how they resolving them would have been appreciated."
1,"> The design does appear to be simple and the changes seem to be most optimal.
> I would have appreciated some more points in the HOWs for the changes probably."
1,"> They have added few visualizations that make it easier to understand.
> Few explanations to these visualizations could have made it more readable."
0,"> Yes they have included both manual and automated test plans.
> The test plans covers all the functionalities and also the corner cases."
1,"I think the tests mentioned in the test plan give just a bigger picture of how things would look if the implementation is done correctly.
The team has however, not made a note about the edge case that are possible and how they would be handled while making changes to the current implementation. I am not insisting on providing an pictorial representation however at least some brief explanation could have been provided."
1,"The team has followed the review comments to some extent and has added annotated screenshots and a flow chart corresponding to their project.
However, I still feel that the flow diagram under the ""Approach"" section is redundant and is not required.
The flowchart under 'Expected Results' explains in a better way about the feature implementation post the changes and serves its purpose correctly."
1,"I think that the design has been explained quite verbosely by the team, with the help of pictures and diagrams and is much easier to understand as compared to the one provided during the first submission. So great job on that!"
1,I think that the design appears sound and most of the changes have been made to the document by considering the comments provided in the round 1 of the reviews. So overall the team has done a decent job after round 1.
1,"The flow chart under 'Expected Results' gives a decent bigger picture of how things would look like when the implementation is all set and done.
However, I feel that again there should have been a detailed explanation about the files and methods being changed and how this would affect the current implementation. 
As mentioned in the previous reviews, the section under project scope appears to be vague with not much details about the estimated code alterations."
1,"Yes, from the diagram I can see that their design appears to be sound."
1,Their explain about the changes is a little high-level. Such as 'fix the function in ruby'.
1,"Yes, the diagram is clear and easy to understand, however, it could be better to add more details."
1,"They write what should be changed in the 'Project Scope' part, however, it's not very detailed. You can specify which method or model should be changed."
1,"They have test plans, it could be better to not only use automatic Rspec test."
1,"Changes are not mentioned in details. Very few changes are explained, also if there's no design then it's not possible to figure out what changes will be done in the system. I can figure out based on the issues listed but it takes time and should be included as part of the design document. There are no details about the files which are supposed to be changed."
0,There's no design or proposed solution given in the project. Only the requirements and expected changes are mentioned in the document. Many of the issues are UI changes but there's no detail about how these will be fixed.
0,"As mentioned in the above question, there's no design section in the document as well as proposed solution, It's not possible to comment on this question until there's a design. Kindly include the design or proposed solution."
1,"There's one UML diagram in the document which explains the flow of late policies. The diagram explains the flow for the post implementation but it would be great to describe the diagram with some text. Aren't there any changes in the DB ? There's no design so i can't figure out but it there's change impact in the DB, kindly include the appropriate ER diagrams."
1,Manual testing steps are given properly but there's no detail for the Rspec changes. As the team is planning to create two new files for the test cases but it would be great to include what test cases will be included in these files. Coverage behaves unexpectedly so I am not sure if it's viable to assert that addition of test cases will increase the coverage.
1,"The authors have explained expected code changes, but they are on a basic level. Deeper insights into code implementation can help the reader understand the features of the system better."
0,"The solution design appears okay. The team has explained the current scenario and the places where the code changes are required. However, the documentation lacks the exact places where code changes are expected and how those changes will affect the application."
0,"The documentation lacks proper explanation on the implementation of the new code. The team has attached screenshots, but without a proper understanding of the expected code changes, it is difficult to decide whether the design would be simple or complex."
1,"The team has added a use case diagram. The diagram gives the reader a basic overview of what changes are expected in the application and at what places on the user interface will these changes affect. However, a class diagram with better code explanation would have sufficed."
0,"Test Plans are important as the newly added code does not affect already existing in place features of the application. The team has documented the test plan. However, it lacks the exact places where the rpsecc testing would be done, and which features will be tested."
0,Good explanantion.
0,Simple and easy to understand.
0,Flow chart is provided. Also the issues and changes have been show in images.
0,Test plan well documented
0,"It is difficult to determine the design the team has intended to implement. 
For every issue, the team has mentioned 'fix this issue' in project scope.
It is not mentioned anywhere what the 'fixes' are."
0,The intended flow is not very clear. The team has identified the issues through UI well. But it is not clear where code changes are required and what pattern is planned
1,"From the document, it is very clear what the issue in the current system is, in terms of functioning.
However, that is just the project description as provided in the project description document provided to us.
Nothing has been mentioned on code level what is wrong, what part of code needs to be changed or possibly what methods could be added/modified to make the desired changes."
0,The design plan is completely missing and the test plan needs to be much more detailed.
0,"The document only mentions the f required functionalities, but not how the functionalities will be achieved."
0,No specific changes were proposed.
0,No was design proposed.
0,There is a screenshot
0,"1. Team has not created any diagrams to explain the design, they have just mentioned about basic structure of solving issue and testing issue in loop. 
2. No UML were created
3. Diagrams seems irrelevant"
1,"1. No, classes looks correct 
2. what design they are going to follow is not written thoroughly, team has just mentioned about files to be modified and the issues in the file
3. Design or issues does not look that complicated to be resolved. 
4. New design wont effect the response time of the system. 
5. Yes, team should have spend some time and gave more details about design."
0,They have not really proposed about what exact solution they are going to implement to fix the issues. Explanation is inadequate about HOW they will be solving the issue.
1,"Team has incorporated all of the things in majority but explanation could have been improved. In test Plan section team has mentioned about running test cases which is good but what new test cases for all the issues are going to get added, team has not mentioned about them. Enough explanation of what issues are there is done but team could have give a better explanation about how they are going to solve the issue rather than just telling about the file names. some of the issues are self explanatory but for some other issues it needed more explanation. Like for issue 2, 5"
0,"The write up lacks UML diagram. Use Case diagram helps the reader to understand the scenario and get an idea of the proposed implementation. However, the write up lacks Use Case diagram. The team has however added screenshot of the page where issues are present and the features on which they are working. However, the diagrams can be improved further."
0,"The new design lacks proper explanation. The team has written the expected results. However, the file names, the type of code that will be changes is not explained. Also, the write up lacks the test plan description."
0,"The authors have proposed changes for the given issues. However the proposed code changes could have been better, if it was supported by comments, and description of files where the new code will be written."
0,"The design explains the issue as well as the proposed code changes. However, the explanation could have been more detailed. The test plan also lacks description as to what files will change and which new functions will be tested using the rspec model of testing."
1,"The design documentation lacks the proper description of code changes and test plan as well as the UML diagrams. The team needs to work on the documentation and add diagrams, file names which will undergo changes and comments for the same."
0,"Overall, they have used diagrams well and are easy to follow. They have provided their approach to implement the project in a nice flow diagram evaluating each code change well. Just the approach diagram provided is high-level and they should have added another diagram that adds to the approach diagram and provide more low-level details like from which parts of expertiza sections(Model, View, Controller) data will flow to achieve the approach proposed."
0,"From the proposed changes they have included in test plan section, the design looks good that they are adding two spec files to handle test cases related to fixes in the required files and are also using the existing gems to improve code coverage."
1,"They proposed only test related changes in the test plan section. Also they did not explain in detail apart from adding two spec files about what will be the content of the test file or what cases they would test. For example, they could have added test case like that check whether correct edit assignment page renders on click of back button."
0,Yes they have covered all the functionalities mentioned in the project specification.
0,"> Approach flowchart is added however it's hard to follow through without explanation.
> Diagram follows the conventions.
> The only flowchart is high-level.
> More UML diagrams, mockups would be appreciated."
1,"> All the required functionalities have been covered in the design.
> Project scope describes what needs to be done and then there's expected results. However, how and what to be done is not mentioned clearly. There's a diagram for the approach but the team should describe it also."
1,"> Most of the sections are added however they need more elaborate descriptions.
> Please add more description to what exactly you are changing and how it will help."
0,"> Class mentioned for changes seems to be appropriate, considering most of the changes are in ""late_policies_controller.rb"".
> Doesn't seem like the new design would make the code smelly however more explanations need to be added to come to the final conclusion.
> Design seems straightforward.
> I don't see any reason for performance improvement or better response time.
> Design needs more explanation and specific Whys and Hows."
0,"> Quality of explanation is not very good. More details should be added.
> The ""Approach"" flowchart is added but it has not been explained.
> Problem statement is also very briefly explained."
1,"While reviewing the document I felt that, the flowchart mentioned under the 'Approach' section is too generalized for the project since that would be the case for any project.
Hence, it does not serve any purpose in understanding the requirements of the team's approach towards the problem statement. I would suggest that the flow chart is redundant and should be removed from the document.
Rather I'd encourage you guys to add some case specific UML diagrams and/or Database Design which would make it easier for the reviewers to understand how things are actually taking place at a lower level.
Also the screenshot put in the document is just copied as it is and left to the reviewer to understand what is actually wrong with it. I would highly recommend that you point out or highlight the flaws in the current design which would give more value to the image added."
0,"I think that the document covers most of the functionalities that are not working in the form of pointers however, it was also expected that you mention a high level proposed solution saying where the changes would be made and how would you implement those changes."
1,"The language used for the changes made in each of the controller and model is vague and hence I cannot comment on whether the authors plan to add a method to a wrong class.
All in all, due to the abstractness of the document, the problem statement was easy to understand however, when it comes to understanding and comparing the current and previous implementation, not much can be commented on it."
1,"As explained in the previous comment, the explanation for the proposed solution is too vague maybe because the team has not come up with a solution themselves and hence was not able to explain what has to be done. 
Like under Project scope, instead of just writing 'The scope of this issue is to fix the function in ruby and write appropriate test cases' every time, mention specifically as to what is wrong and what changes would be made in that method/class.
Same thing with the flowchart."
1,"I think there were a lot of changes that need to be incorporated in the document i.e. removing some redundant sections, altering some content and adding some stuff.
Add UML diagrams and Database design in the document if possible.
Adding some annotated screenshots is a must. This makes it easy for the reviewer to visualize what's going on.
Refactor your content indexing as every sections comes under 'Fix issues related to deadline and late policies'."
1,"In your 'Approach' section, their diagram is too high-level design. I think it's better to clarify what the expected output is."
0,I cannot find their proposed changes on their wiki page.
0,"The diagram and test plan are too high-level, and I cannot find the proposed solutions."
1,"The test plan is missing details, I think it's better not only use the automated code."
0,"Yes, they incorporate all of the functionality required."
1,"There's no proposed solution in the document, how the team will approach to fix all these issues with the current implementation. In test plan, team has mentioned that they'll create test files but what all test cases will be written in that is not mentioned anywhere. There are no details for the manual or UI testing. 
Please include the proposed solution how these bugs will be fixed, also UML or ER diagrams can be added to understand the design more appropriately."
1,There are no proposed changes in the document. Please include this in the doc. It would be good to have UML and ER also along with the approach.
0,"There are no details for the methods, classes which will be edited to fix the issues. It's difficult to comment on this question until those details are available in the document."
0,"There's a flow for the issue fix, test but not for the actual use cases. No UML, ER is available in the doc."
1,"There is no UML diagram. They have included a vanilla diagram, stating really general things like analyze the code, make the corresponding changes, test it etc. Milestones could have been more detailed as well."
1,"Testing plan is fairly inadequate, it tells what files would be changed, wherein it should be telling of all the different edge cases, explaining the handling. The UI driven testing segment should be a stepwise traversal on the URLs that'd tell the user how to test if the code is functioning as expecting."
1,"The good thing they have demarcated the issues clearly, and at a low-level as well. Like what button links are missing and all, however, there hasn't been a profound study on how they'd do about implementing the same. The topic being about late submissions, it deals with job scheduling, there is no mention of that in the architecture anywhere. Expertiza, for instance, uses Sidekiq, how would that be addressed?"
1,"Project scope is defined at such an abstract level, no details provided about the files and all whatsoever. No file names specified. There's no proposed code changes as well, no comments. Can't get an idea of what would be done, and what impact it'll have on the other segments."
1,"Not enough content to evaluate this question. There's no mention of code changes or the files changes anywhere. Please include it all in the next review. The models you'd be touching, or the schema tables, just include a snapshot of the same."
0,The flowchart is kinda useless.
0,Design seems pretty straight forward.
0,"They mentioned what files need to be changed/created, which is good."
1,Could have explained what is the current implementation.
1,"It is clear what the issues are in the current implementation.
But it is not clear what they plan to change and where the changes will be made, what methods will be added/modified.
In the test plan, it would be nice to learn what parameters the team plans on testing"
0,There is a flowchart but it doesnt add much value to the design document. Because the flowchart is general and about the steps of project lifecycle and not about actual plan/action/code the team wishes to implement or flow of code.
0,"The code is DRY and properly commented, and functions are properly modularised. Code is neatly written and follows proper coding guidelines."
0,"The authors have explained the issues well.
But not much is mentioned about the changes or how the changes will be brought in."
0,"It covers almost all necessary functionalities required in the document. Although, the flowchart and project scope sections add no value to the document."
0,"The design document has all sections required. However, lot many details are missing in some sections."
1,"only one doubt - why ""it 'returns Unknow' do"". shouldn't that be unknown??"
1,Good write up.
1,"Link is down so cannot be verified, but was working when checked last time."
0,Coverage decreased by 2.2%. Also test cases have been added.
0,Yes Travis CI build passes.
0,Yes many commits have been made
1,"improved bad naming, follows DRY method."
1,"Given the writeup and the screenshots, I would say yes but the link is broken so until one could test the functionalities properly it is difficult to say that it can be deployed onto the production server."
1,The writeup is very clear and has codes and screenshots to explain the working which comes in handy while reviewing.
0,The link provided doesn't seem to work so could not test the features if they are working or not
0,The team added test cases but the coverage has overall decreased. It covers 16.586% of the code
0,"Yes, the build passes in Travis CI."
1,"Yes, the team has committed during the second round. Made changes in the test cases."
1,"No, the code was good in the first section itself and so did not require such changes."
0,"There are no test cases at all in the recent pull request, the write-up has no test case code or test plan as well."
1,"There are no test cases at all in the recent pull request, the write-up has no test case code or test plan as well. Even if test cases aren't written, you could document the test cases and define the test plan by demarcating the edge cases so that they can be implemented at a later point of time."
0,"There are all in all three methods included, all one-liners. Can't be shortened, neither can be extracted into separate methods. Code commenting not done, git commit messages have a specified format as well, which is not followed."
1,"There's no commenting on the code committed at all. Comments are required while adding new snippets of code, as they provide a readable explanation of the code for other developers to follow, and hence should be given their due importance. The newly added code does not have enough comments to portray the proper flow of code."
0,"The test coverage decreased from 13.9% to 16.586%. The build has passed as well. DRY principle followed thoroughly, method naming is according to the ruby code of conduct. They do perform atomic functions, all the methods introduced are one-liners only."
0,"The latest pull request does not cover test cases. The refactored code should be tested in and out before releasing it for prod. Test cases ensure the previously written code is not failing anywhere due to the recent changes, and we can be ascertained of the changes. The write-up does not include the test plan."
1,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. It could have included the before/after snippets showing a clearer comparison of the two, or rather the screenshots of the code. No test plan coverage documented. Other details like team members details or short video explaining the passing test cases could be included."
0,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. It could have included the before/after snippets showing a clearer comparison of the two, or rather the screenshots of the code. No test plan coverage documented. Other details like team members details or short video explaining the passing test cases could be included."
1,"The authors work functions well. It was a difficult task, to create a  staged deadline assignment and finish the deadlines. However, I was able to test the scenarios and the refactored changes seem to work well. The stage deadlines respond properly to the finished? method for any given topic as well as if the topic is missing a deadline as it is a last assignment."
1,The authors have not added any test plan in the write up. There are no test cases present in the most recent pull request.
1,"The newly added code has short functions performing atomic tasks. However, more comments are needed to understand the flow of the functions. The function names do not follow the ruby code of conduct. The function topic_missing? can be rephrased as is_topic_missing(topic_id). The functions should follow proper ruby code of conduct for the reader to understand the flow of the application."
1,"The pull request shows that the newly added lacks enough comments. Comments are required while adding new snippets of code, as they provide you a path for better understanding the flow of the refactored code. The newly added code does not have enough comments to portray the proper flow of code. More comments are required."
1,"The pull request shows that build has passed. The coverage decreased by 13.9 %, falling to 16.586%. The method names of the newly added methods, are according to the ruby code of conduct and perform atomic functions."
0,"1. Methods and classes look good, which team will be modifying.  Questionnaire model is required to get non weighted score and calc is required to get weighted score. Potential changes will be done in corresponding spec files too. UI files are also mentioned. 
2. New design looks good to me. As i have done work in questionnaire controller i can understand the design. 
3. No new design does not looks complicated. It seems like easy design and those changes are needed to be done in those files only.
4. No, design is not complicated and even it is not making that much of change which may effect response time.
5. No, team has done good job in explaining"
0,"I believe the design definitely looks complicated but it might need to be. If anything, it just looks like it might be a lot."
0,As far as I understand they follow good approach.
0,No such problems so far
0,"I think they found the right files and right classes to add code to or change code. For example, the on_the_fly_calc.rb is responsible to calculate review scores."
0,The design seems fine.
0,I did not find a separate design section but the Uml diagrams are pretty clear.
0,The design was not to point but was understandable.
0,Design is detailed
0,yes design is very neat and clean. Also it is very simple to understand for even those people who does not have experience of expertiza.
0,They've taken a lot of effort to make the diagram concise and self-explanatory. Going through the diagram lets user understand most of the design doc easily.
0,Design doc doesn't contain details about the function or how they're planning to encounter the problem.
0,Changes proposed are clear and descriptive. An adequate explanation is also provided along with it.
0,Design doc explains everything in a detailed manner. It covers all the problems mentioned in the problems page.
0,"i think the code is ready to be deployed but as it is not passing Travis CI build, I am not sure whether it should be deployed or not."
0,wiki page of this project is very informative and it is easy for anyone to understand what the project is about and how they approached the problem.
0,"Yes, from UI point of view, system is working as it is supposed to be."
0,yes they have added 2 test cases to test the functionality that they have implemented.
0,yes they did keep committing their code after the first round of submission.
0,code quality is very good. Variable and Method names are self explanatory and comments are very handy to understand the code.
1,"The write up is fairly written. the issue has been explained well and also it is clear how the implementation must be tested.
Although, not much has been explained about the changes made in the code. It would be easy to understand with snippets of small blocks of code with little explanation supporting it."
0,"On logging in as instructor and going to manage-->assignments 
and going to participants...it is giving dropdown to change the role of the participant. But there is no submit button. Hence when we refresh the page, the changes are undone.
I tried testing it for many assignments; even the particular one shown on their documentation; but could not see the submit button"
0,"Yes, test case has been added and it has good coverage,"
0,The build did not pass in Trvavis CI.
0,"Yes, commits have been made  in round 2"
0,The adequate test cases have been added to Rspec files and the code coverage seems to have increased.
0,The Travis CI build failed once before but I think the team made sure that the conflicts were resolved and that the build passed.
0,"Commits were done continuously during the period between the first and the second submission but the number was not considerable and would be proportional to the task being implemented.
Also the label given to the commits are quite verbose which makes it easy to keep track of the changes being implemented so great job on that!"
0,"The code looks well written since not many changes have been made (except for the unit tests in rspec) with reasonable variable and method names. 
Moreover, comments have been added wherever required which again makes the code even more intuitive to understand."
0,"The writeup does a very good job of introducing and explaining the topic, the issues and their solutions.
The team added a Test Plan section to the writeup as was suggested to them in the last review.
The Test Plan shows the code coverage after adding the new test and the code snippet of the actual test.
The team has also done a great job of identifying additional problems in the views and actions related to Participants that were not a part of the assigned project and how they fixed those issues."
0,"The system operation works as intended on the UI. All the new changes could be seen working on the team's deployment link.
The test 'validate_authorizations' in the participants_controller_spec.rb covers the scenarios when the updating is successful and when there is an error in doing so."
0,"There were 5 commits made during the 2nd round, out of which the commit '6ba1e4f' dealt with adding new code for flash message after updating participant attributes to app/controllers/participants_controller.rb and the corresponding test to spec/controllers/participants_controller_spec.rb.
The commit '945008b' dealt with the change to participant header, which involved small code additions in multiple html.erb files.
Commit 'fc7f4ca' dealt with fixing the handle issue with import and and adding a test in participants_controller_spec.rb for case where an error is encountered in update_attributes.
In the other 2 commits, the team added comments to all the code changes that they made."
0,"The overall new code was very readable and understandable. There were no bad names, long functions, redundant lines of code used.
There were no DRY problems and the team made a successful effort of adding comments to each and every change that they made to their project.
The newly added comments definitely helped me in understanding the code flow and gave an understanding of the team's approach to the new test and the project as a whole."
1,"As said above, please correct the problem of submit button being completely invisible. Rest all looks good to me."
0,No issues with writeup. Everything was explained clearly.
1,"There's one issue I noticed. The submit button that the team showed in the documentation is not visible. The button is present at the same spot as shown in the pictures in the documentation, but it is 'hidden'. Using browser Inspect element, I noticed the problem.
<button name=""button"" type=""submit"" id=""button7487"" style=""font-size:15px; opacity:0;"" class=""btn btn-md btn-default"">Submit</button>
The button is given opacity of zero, which means it is not visible but it is present at the spot. Please correct this problem."
0,The team has added testcases and this increased coverage.
0,Travis build didn't pass. The latest performed on November 6th has build failure. The ones before the last commit has travis build pass.
0,Yes there are new ones.
0,"More comments were added, which helped understand code clearly."
0,No since build didn't pass yet I dont think its ready to be deployed on production yet.
0,Write up is clean and easy to understand.
0,System changes are working as expected.
0,"Yes team added test cases, overall coverage did not increase."
0,Build did not pass for this project.
0,No new code added after the deadline and author made few changes during round 2.
0,"Code is pretty simple and DRY, easy to understand what is author doing in code."
0,"Tests were added for checking if a user's authorization to be a reviewer was changed when their role was changed. It looks like coverage only decreased by .9%. However, the team achieved 100% coverage on their tests."
0,"Yes, there were a few commits throughout round 2."
0,"The code seems to be well-written, and was mostly front-end or test-related. The added code is DRY as well, and doesn't have much duplication. Functions look short as well."
0,"It has two issues:
1. Submit button is not visible on GUI.
2. Travis CI build failed.
Both of these issues are minor when I had a look at the Github repo and could be easily fixed, I encourage the team to go through the project again and fix this."
0,The writeup is well organized and one can figure out what the problem has been solved very easily. the photos made it very clear. Test Plan tells us the rspec test written by the team.
0,"I cannot see the submit button on the UI when I compared with the photos on wiki page. The submit button is invisible but I clicked on the area where it is supposed to be the functionality works. 
So the code is working, just I cannot see the submit button."
0,"Yes, the test case for validating authorizations has been added."
0,The Travis CI shows build failed. There is one failing check.
0,"Yes, new code was committed in the round 2.
Issues fixed are related to import functionality and test cases."
0,The code is well written and commented.
0,"The code not yet ready to deployed onto the production server, because not all the pass of Travis test pass."
0,"The Github wiki is very well explained, with picture to illustrate the problem. the authors does improved the writeup accordingly. the Test plan is not very clear."
0,"yes, they have a workable UI, and it work as intended, their project intend to change the assignment participant  role, and it work when a instructor assign a role to them."
1,"Yes. the coverage decrease, Test in participant_controller spec + flash message for update, this is a meaningful test, however more test need to be done."
0,"yes, they did have new code committed during the 2nd round."
0,"The code is well documented and there is no bad names, long or complicated functions or bad code style."
0,"No, I do not think so. Because it did not pass the Travis CI."
0,Clear writeup.
0,"Yes they did, but the coverage decreased."
0,It did not pass.
0,No new commits.
0,I think this code is ready to be deployed. Because the function works very well and two tests have been written for the function. the changes now can be successfully reflected in database. issue fixed.
1,"Their writeup clearly state the issue, and let me know how to get to the page they worked on very well. I have no confusion when reading their writeup.
-1 mark because the test plan is too short. Test plan should cover what you have tested, and how you write the tests."
0,"Their code works very well in the first round, and still good now. 
I manually tested their function. The function does reflect in the database, so full marks."
0,The team added two tests in spec/controllers/participants_controller_spec.rb. However the coverage did not increase (from the pull request). There might be some original tests failed after they have updated their code. So I would give a 4 to this question.
0,The build passed in Travis CI. No conflicts.
1,"I think it is better to write more commits for others understanding your code. The code is good, no long method, no bad coding style."
0,they did really good job in order to resolve the problem. best possible solution.
0,can not find the test plan in the wiki page. so can not test that.
0,they used ruby guideline in good form. i can not find any major problems.
0,"name of the methods, variables all are well formed according to ruby guidelines."
0,I can not find test plan in the wiki page. but they did increased coverage.
1,yes wiki page shows correctly all the problems and screen shots of the solution. you guys should also add the main code snippets.
0,team did best that they can do to resolve the mentioned problem. I can understand the project by reading the wiki page of the project.
1,"yes the feature has been implemented and works well.
scope of improvement: instead of having submit button for each participant individually, instructor must be able to change as many participant roles as needed and then click submit just once. 
 
What is happening right now is that one must select for each participant, click submit; page refreshes and then do for next participant"
0,no automated tests have been implemented
0,code is written optimally and principles seem to have been followed
0,not many comments are added
0,the pull request link submitted is before the changes were committed. no automated tests have run after the changes are committed
0,does not specify any test plan
0,the writeup explains well the issues and changes made by the team.
0,"writeup is well written
it is descriptive and gives overview of entire project"
0,I have gone through all the features and can say that they are working fine and thus say that they have been implemented correctly.
1,"The comments have not been in the code as to why a line has been added.
I would recommend that you add some comments just above the changes being made so that it becomes intuitive and easily understandable for the reviewer or for that matter any user who is viewing the code."
0,"As per the claim in the document, the test coverage seems to have increased.
Most of the code remains unaltered, along with a couple of changes done at most and hence it can be inferred that most of the variables, methods and class names are all intuitive."
0,The document does not consist of a Test Plan section covering all corner and edge cases.
1,"After going through the wiki document I can say that the bugs were explained correctly, the description of the project was concise and could be understood in a single go, the testing from UI section was explained in a detailed manner along with some visualizations (with the help of screenshots) and most importantly, the test coverage was addressed.
The only thing I can point out is that the code should have been included in the document under the 'Files changed' section along with the newly added or altered lines of code highlighted with some other color. This would prevent back and forth navigation between github and the wiki document, just to view a couple of changes being implemented."
0,The write-up is very well written in plain simple English and makes it easy relatively much easier to follow rather than trying and testing the functionality and UI directly. So kudos to that!
0,There were no comments found. But I think the code is kind of self explanatory here.
0,Contains only minor changes. Everything looks fine.
1,"It was only mentioned that 'We have noticed that the test coverage increased by two percent.'. If you are testing, please describe the test cases and their results."
0,All the navigation is clearly explained.
0,Very clean. Easily understandable.
0,"Tested  the changes made, functionality is working  as it is supposed to work."
0,No test plan is provided but changes seems to be trivial and working.
0,Code is according to ruby style coding and DRY.
1,Comments are missing but looking at method one might be able to understand easily what is being done. But a small line of comment would be helpful.
0,Variables and method names used are reasonable and suggestive. I had no problem understanding what changes are being done.
0,I don't see the have made few changes and test coverage also increased but i don't see any test plan.
0,Write up is clean and easy to understand. It shows what author wants to do and how they have made changes.
0,"Writeup is easy and descriptive, steps are provided on what needs to be done and how changes should be tested."
0,The code works as intended and I could not find any failing edge cases.
0,There is no test plan section as mentioned.
1,I could not find any descriptive comments explaining how the code works. I think a short comment describing the changes to export_file_controller.rb file would suffice.
0,"There are no new methods or variable names being introduced, so nothing to review here."
0,"The writeup only mentions that the test coverage has gone up but there is no test plan section mentioned explicitly, nor could I find any mentions of tests other than that they have tested the code and it works perfectly."
0,The writeup is quite clear and there are sufficient screenshots explaining the changes as well.
0,"Yes, I was able to log in as an instructor and change the role of a student in an assignment. Furthermore, I was able to refresh the page, and the role stayed the same. This means that it saved to the database properly."
0,N/A there is no test plan.
1,"The build passes, and coverage has increased by 2%. No methods or classes were added. All added variables had good naming. The method 'exportdetails' in 'export_file_controller' should be renamed to 'export_details' to better fit with Ruby's style though."
0,There is no test plan section. N/A
0,The writeup gives a good explanation of the current functionality compared to the desired functionality. It then discusses which files were modified and why. They did not use design patterns. I think everything was explained well in the writeup.
0,"Sorry the VCL site is unreachable, so I wasn't able to test it."
0,The code added/deleted is easy and simple to read.
0,"No new methods have been added, so no need for any comments."
0,Only 5 lines of code have been changed which involved slight modifications. The names used/added are valid and suitable.
0,"I did not find a test plan in the pull request, although I am not sure this project requires a test plan."
0,"Yes, the wiki page clearly explains the issues, the implementation and the modified files."
0,The writeup is well explained and ample screenshots have been added to make it easier to read and understand.
0,The server is down so I can not test those features.
0,"I only know is they probably did some test, but I don't know the test plan concisely."
0,no problem
0,There is comments for each method but those are not too meaningful
0,The test coverage did increased.
0,Test Plan only said the there is coverage increase but not specify which part they modify.
1,"Over all the wiki need more explanation of the code, and the test plan need to be specified"
0,"The screen shot did explain what they did, but there is no code in the wiki to see where they change."
0,No Test Plan.
0,Coding style looks good.
0,"No new methods, no new comment."
0,Looks good to me .
0,"They don't have a Test Plan section, only test coverage."
0,Really clear.
0,The work is good. Work is saved in database. bound case as looking into the data using student end works good.
0,"There is no code written. Looks like that after they pushed their changes, some tests already written can be passed so there is 2% increasing in coverage."
1,"No comment. Because the work you have done is related to models and controllers, so it is not easy to read into your code without any hint. Better comment your code for each change."
0,"On wiki, they stated that ""We have noticed that the test coverage increased by two percent."" but what made the increase of test coverage?
There is no test statement or code on wiki and I did not see any one github repo either. The issue is fixing bug, but I think there is some way you can display your solution on tests. 
 
(Plus in project rules, ""For each project, you must write related tests."")"
1,"On the wiki page, they stated the issue, and how does the view work after they fixed the issue, but they did not explain what part of code they changed and why the change. I looked into their github commit, there seems some changes in the helper model and export file controller. Not sure are those the correct corresponding files? I think you have better put your code on wiki so that everyone can see what and why you made the change."
0,They have followed all the guidelines properly.
0,The build is passing in Travis CI. There are no conflicts to resolve.
0,"Yes, they did pass all the Travis CI test. and I have check all the pull request on Github."
0,"Yes, they did pass in the Travis CI. 
They improved a lot of things in second round and did the project very well."
0,Checks were passed
0,Build successfully passed. There are no conflicts in the pull request.
0,Travis CI Build successfully passed. There are no conflicts in the pull request.
0,"Yes, the build is pass, Also there are no merge conflicts with the main branch."
0,pass pull request
0,"The Travis CI Build passes successfully and clears all the checks after the last commit.
There is no conflict that needs resolving."
0,"It seems okay to be merged, if the UI testing is passed"
0,"Yes, I do think this project is a good starting place for a future team, but it may not ready to be deployed on to the production sever since I cannot check it online. (the website on the VCL is crashed.)"
0,"Yes, the have a detailed test plan and all the test pass, so I think it is ready to deployed onto the production server."
0,Yes the project can be deployed on production server.
0,"Yes, code can be deployed to the production. All the test cases passed, comments are added and code follows the design principles, so this looks like a production ready code."
0,"Yes. The build is pass and there are no merge conflicts. Also, they have added comments wherever possible. But the overall coverage has decreased a bit. Might want to consider this?"
0,"It's a production ready code now, All the test cases passed, comments are added and code follows the design principle."
0,I think the code is of good quality and ready to be deployed.
0,"I do not see any conflicts of the new code with the production server, which is backed by the results of the Travis CI build and the Pull Request page that shows that there are no merge conflicts.
I don't think this project should be redone from scratch and this is a very good starting point for a future team to pick up."
0,"The writeup looks good, however the vcl seems broken"
0,"The write up did very well.
All the required parts are mentioned. This team described the issue clearly and give detailed solutions. (However, I cannot log in to do the test.)
And they gave the screenshot to navigate reviewers to know that they did."
0,"The writeup is clear, they well explain all the code in expertiza wiki."
0,The documentation is in-depth and explains the issue and its fix in detail.
0,"Team has spent fairly decent amount of time to improve the write up. There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future which will help the expertiza team to list the future enhancements."
0,"Team has spent fairly decent amount of time to improve the write up. There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future which will help the expertiza team to list the future enhancements."
0,"The writeup covers all the required components and sections. They have explained each functionality they worked on plus the test cases for that as well has been written to test the new code. Also, a guide to manual testing is given which was helpful to test their work."
0,"Write up is really good, the code changes are explained fairly along with the problem description. I could also understand what is the impact of these fixes and features on the expertiza. 
There were many things such as test plan, code explanation which was missing in the round 1, all of those has been added now. They have also added possible enhancements for the future."
1,"I think the writeup is great. There are 4 issues in this project and all of the 4 issues are well defined. Also, for each issue the solution is provided to explain the plan or idea how the team will fix the issue which is helpful for reviewers. The code change shows in which file and how the code is modified, which is very clear.
If the team could add more details about how to check the work will be better.Overall i think the quality of the writeup is great."
0,"The writeup is very well written and introduces and explains the project, each issue and the solution for each issue in a very detailed manner.
The authors have improved on the writeup by adding a Test Plan section to it, which was previously absent from the initially submitted writeup.
The Test Plan section granularly explains tests for each issue and the corresponding way of testing it in the UI.
It also gives a very good idea about the team's approach to testing."
0,"They deployed server seem down so that I can not test the UI operation, so It is hard to say it work as intended, but from their expertiza wiki, those feature should work as they supposed to."
0,The fix addresses all the issues and works as intended.
0,Three bugs are working fine and also the extended feature. Steps given in the test plan of wiki doc helped to test the application. VCL is little slow so it's taking time to test but that's not the project issue.
0,Three bugs are working fine and also the extended feature. Steps given in the test plan of wiki doc helped to test the application. VCL is little slow so it's taking time to test but that's not the project issue.
0,"Yes, it works as explained on the wiki page. The features work as they are expected to. Also, they have written enough test cases to test the new code written."
0,This project is to refactor and fix code. There are four issues in this project. The features after fixes work as they are supposed to. The details of code modification have been uploaded to wiki page which is clear.
0,works
0,UI could not be tested as the deployment link does not load.
0,"Yes, they did add some tests, however, the coverage not increased.
The thing is, I still cannot log in to the website on the VCL. the website is crashed."
0,Coverage decreased (-3.3%) to 27.175% when pulling ac1cf81 on NisargC:beta into 28eb0da on expertiza:beta.
0,Test cases have been added to the project and  the test coverage has increased.
0,Team has added significant amount of test cases. Coverage has decreased by 3.3% but test cases are in place for most of the changes except for one new feature but that is clearly mentioned in the wiki that functionality didn't have any test cases from the beginning so it can't be done.
0,"Yes, they have created comprehensive test cases. Almost 5 Rspec case for the new code written is created. But the overall coverage decreased slightly."
1,Yes. The team has added new Rspec test cases. The new test case is used for 'Import_topics_helper' and test expects the attributes should not be empty. The newly added test well covered the project.
0,"yes, have test case
Coverage decreased a lot"
1,"The team did add new test cases to spec/helpers/import_topics_helper_spec.rb and spec/models/team_spec.rb.
In import_helpers_spec.rb, the team added a test to 'define attributes' which confirms the value of attributes and checks if the trimming of ascii characters with whitespace returns a non-empty string.
In spec/models/team_spec.rb, the team added tests that checks if the expected output is 'new team name' and 'no name' when the 'handle_dups' option is
'rename' and 'rename_existing', respectively.
 
 
Although new tests were written, the test coverage decreases and it decreased by 3.3% to 27.175%."
0,"New commits have been added during the 2nd round.Commits include comments, Rspec test cases  and test cases."
0,"Yes, they did have new code committed during the 2nd round."
0,"Yes, they added some new code and did the commit during the second round."
0,There are commits during the 2nd round. Many test cases has been added also some code has been changed.
0,"Yes, they have added few commits in the second round."
0,Yes. The most recent commit was 2 days ago which is on 11/06. There are some new code committed during 2nd round.
1,"There were 7 commits made during the 2nd round, 2 of which dealt with new code in app/helpers/import_topics_helper.rb and the corresponding test in spec/helpers/import_topics_helper_spec.rb.
1 commit dealt with adding 2 tests in spec/models/team_spec.rb.
The rest of the commits added comments to app/helpers/import_topics_helper.rb, app/controllers/import_file_controller.rb, app/models/sign_up_topic.rb, app/views/import_file/_sign_up_topic.html.erb."
1,"In the _add_topics.html.erb
the expected_fields in the form contains a lot of &nbsp which makes the code looks bad"
0,"Yes, they did improve a lot of things including more comments, more test cases, the test plans. Most of things they did very well.
But they still did not improve their website and I cannot check the functionality."
0,"There is no bad names, long or complicated function or lack of comment. look good for me"
0,The code is well written and implements all good coding practices.
0,"There were no comments in the first round, team has added comments in the second round. Design issues weren't there even in the first round."
0,The code is clean. Variable and method names are intuitive and meaningful. They have followed the DRY principle.  They have also given inputs on possible further enhancements.
0,"There were no comments in the first round, team has added comments in the second round. Design issues weren't there even in the first round so looks everything in the code looks good."
0,"I think the quality of the code is great. I didn't find any naming, comments, or code style issue."
0,"The code was well written and follows the existing Ruby naming conventions. There are no bad names or long functions that could have been shorter. 
There are no DRY problems in the code as well.
The new code was also very readable and the comments added perfectly described the new code and made it even more understandable."
0,They have clear and useful visual aids.
0,"From their use case diagram and detabase design diagram, I can see their design is good."
0,"Yes, their design incorporate all of the functionality required."
0,"Their design doc is good, they have detailed test plan, and explained their proposed solution clearly."
1,"The ER diagram which is explained here seems dificult to understand.
Instead having small activity diagram seems to better understand the functionalities proposed."
1,"1) Explain more on the design part and add it to wikipage document
2) Focus on some of the redundant searches"
0,"Yes, the document do explains and incorporate most of the functionalities required."
0,"Yes, The doc includes most of the topics and approaches."
0,Search for Reviews: -> point 2 empty
1,ER diagram seems kind of too plain and full of abstractions. Providing UML diagrams would have been seen to be much better.
1,The quality of explantions can be improved by reducing the size of the page can be reduced by not stating every small change as a bullet point.
0,"Yes, the document does implement most of the functionality."
0,"Yes, it does include every section."
0,"The team has given essential design like Use case diagram, Database design etc.
1. I think that Table Design screenshot is not required.
2. UML diagram follow all the conventions.
3. All diagram provide enough details."
1,"1. None of the methods point to wrong class
2. No
3. The only doubt here is, what if the data is to large, will this search work?
4. I think, the search could be made faster using indexing.
5. No, effort provided by the team is good."
0,Yes it worked.
0,"Yes, Since the check is made in the controller, even logging the url request and re-sending it again does not result in edge case by sending the same request again and again from wireshark."
0,"The explanations are adequate. The possible paths for all scenarios User, Questionnaire, Assignment and Reviews are explained properly."
0,Yes the design incorporate all the functionality. The team has given extensive details on Use case scenarios and functionality to be implemented.
1,The design document seems good. Only thing I would like to add is the Sequence diagram to allow others to understand the flow.
1,I think that the task are implemented correctly and the functionalities seem to be working fine. My only concern would be that the test plan should be much more understandable with the help of illustrative images and steps.
0,the project works as intended and the features work as they are supposed to be.
0,"Their work seems fine to me, but I don't know why they didn't pass the Travis CI."
0,work successfully
0,There was a problem before with the test plan lacking a lot of detail. This has since then been fixed.
0,"Their writeup is good and easy to follow.
I can understand what they have done."
1,"The writeup is great. The team has really explained the core problem that they have tried to solve and how they approached it. However, the writeup would have been much better if the team would have explained the code in a brief manner as it would have enhanced the understanding of the project. The writeup did not lack an explanation of any functionality of any sort. However, the team could have specified steps on how to check the feature from UI because as an Expertiza newbie, I had great difficulty navigating to the desired page."
1,"> The writeup looks decent enough however there were a few things I would have liked to be added for more understanding.
> Testing from UI section only describes what credentials needs to be used. I don't see any flow talking about how exactly the application needs to be tested
> A video demonstration could be added which can show the fix that has been done.
> Fix for the second issue has not been described properly. Would have appreciated more information about what and why the change was made."
0,"the writeup is pretty good. the design pattern, solution, and implementation along with the test plan is explained very well including the screenshots and changes made in the code as well.."
1,"The write-up looks all well organized except for a few areas that I would like to mention below:
1. The test plan is not explained illustratively with edge cases.
2. Moreover, the test plan does not elaborate the steps to test the implementation from the User Interface (adding screenshots there would have made the testing even more intuitive) and just includes the credentials.
3. Code Coverage should have been added which would have helped to gauge the importance of changes being implemented after round 1."
0,"The writeup is well written. They covered issue description, solution, implementation and test plan."
0,It's well explained.
0,successful deployed
0,the Travis CI build didn't pass successfully. so even everything seems fine. this might not be ready to be deployed into the production server.
0,"The implementation fixed the problems, just there's one rspec didn't pass."
0,I think it can be deployed.
1,"> Overall the code quality is fine.
> However, some of the variable names could be improved. I had mentioned ""sFileName"" but I dont see it getting fixed.
> Some of the comments are redundant and could be removed."
1,"Overall, the code looks good. The JS function is a bit long but the functionality that they are trying to achieve is a singular one so one function suffices. The code has fewer comments so it is hard to understand why the statements were written as they were. The variable names could have been better specifically in the JS function since other than that, the team has used the class objects and SQL queries to accomplish 1st feature which will follow proper naming convention. Unfortunately, the authors haven't improved the code accordingly."
1,The newly added code has been added to existing methods: Consider creating new methods with detailed comments. This makes reviewing the code harder and is not suggestive of the functionality of new code. Creating a new method by name : Check_Ta_Access or something like that makes understanding much easier.
1,"I found the comment description to be concise and easy to understand. However, I would suggest that you make use of more comments for the upload file section that you changes the code for. This would make the changes easily understandable to most reviewers and thus save us some time. :)"
1,the methods are not well commented. could've been more descriptive to explain the method's functionality.
1,"> There are a few comments but more can be added. Instead of putting a lot of inline comments, team can add comments for specific functions.
> Besides, there are some commented code lines that should be removed to make the code clean."
1,"In _submitted_files.html.erb file, there's a if-else closure, and the name of method is not much easy to understand.
In my opinion you can add some comments for these if-else closure."
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes. However, They have not mentioned the design principles they have used. The Test plan of the documentation include only ""Modified the existing Rspec Tests for controllers to fit current implementations."".Which does not say much. I would suggest to make the documentation detailing the issues and subsections as problems and proposed changes. This would make it much simple and easier to understand the wiki. Move the code part to another section ""Implementation"". This creates a streamline so that while reviewing the pull the expertiza authors can process it faster."
1,"The instructions to test the working from the User Interface only consists of login credentials and the details of student7126. However, what was expected are the steps needed to navigate to the correct page and test the default functionalities and compare it with how the changes being made affected the current working. 
Moreover, the files modified section contains the entire code which is fine however, I would recommend that you highlight the newly added code or the modified code either with green or some other color (as on github) and paste it on wiki so that it would become convenient for the review to view the changes and not move back and forth between github, expertiza and the wiki page just to view some few altered code."
1,"1) The writeup looks good enough for understanding the issue and the modifications done. The issue reproduction steps however, have not been detailed out.
2) Team could have added a video for the test that they have done or something which could show the fix.
3) The second issue fix hasn't been described with enough details. Could add few more lines for the description.
4) Nothing has been added to the testing section of the wiki. Also, a ""References"" section could be added."
1,The edge cases and corner cases have not been mentioned in the document. I would recommend that you mention atleast a few and validate these during the next submission round.
1,There should be examples to test the upload file limits as well. They only added the tests for TA changing grades.
1,"They modify the existing test to fix current features.
Here's a small suggestion. Maybe they can write more test for the new features they implemented."
1,"1) The writeup looks decent but a lot of modification needs to be done. Some of the things have been mentioned without any structure. For example: Testing from UI section only describes what credentials needs to be used. I don't see any flow talking about how exactly the application needs to be tested.
2) Some of the sections like ""References"", ""Testing using RSpecs"" are missing.
3) A video demonstration could be added which can show the fix that has been done.
4) The issue has been discussed but any pictorial representation for the same would be great. I can understand the project and what it does but more details or visuals would make life much easier.
5) The code fixes for issue #2 needs more description."
1,There are no testing instructions mentioned in the wiki document which is why I couldn't test for any cases. I recommend you to please mention a list of instructions in the testing from UI section during the next submission round
1,"> The cases seem to be working however since the details were not clearly mentioned in the Wiki, it was tough to get it working.
> Please add more details or maybe some sort of flowchart to your wiki so that anyone can easily login to the system and follow the instructions to test the features."
1,"I think it is better if there are more comments in the code, which is more easy to follow. But it's also good to follow in the current file, good job !"
1,"The modified code does not include comments.
The newly added code has been added to existing methods and needs to be separated
: Consider creating new methods with detailed comments."
1,"The number of lines of code changed is pretty much considerable and I would recommend that you make it much more modular next time. For instance, the java script function written seems to lengthy for a single pass and would be better understood if it were broken down into sub functions instead of having those big block of if statements.
The comments would have been more, intimating the changes being implemented which would make the code intuitive to any user."
1,more comments are needed to understand the functionality of the method. comments could've been more descriptive
1,None of the functions is long and there is no need to separate code into methods. It is modular enough. More comments are definitely needed because the code change in core expertiza file is easy to follow but the new JS function if had comments would be easy for anyone to follow. The code definitely follows Ruby style guides. There is no code that is not DRY.
1,"app/controllers/submitted_content_controller.rb : Rename type to uploaded_file_type as it is more suggestive.
The newly added code has been added to existing methods: Consider creating new methods with detailed comments."
1,"I think most of the methods, variables and class names added newly are all intuitive. Just focus a bit on modularity next time!"
1,"> Most of the variable names makes sense, however some of them could be improved. For example: ""sFileName"" isn't very clear.
> There are some unnecessary comments left out in the code. This should be removed."
1,"The authors have implemented the Test cases in Rspec file, However, the documentation does not include a detailed analysis of the testing plan and would highly recommend updating the documentation"
1,Write up should add why you have done anything.
1,"The functionalities are working as expected but I feel that the code needs to be backed up a strong set of test suite before we can deploy it on production server . Thus, this project can lay a solid foundation for future team to pick up on writing exhaustive set of test cases after which the project will be ready for deployment . Also, one more thing that needs to be fixed before we look into deployment of this project is fixing the issue which is out of scope of the current project and only then we will get to know if thew build is passing with all the test cases or not ."
1,"The overall code is written well adhering to the Ruby community guidelines and programming practises. However, there are  minor areas which can be improved like max_due_date would be better framed as final_due_date, method naming can be  improved eg email_submission_reviewers, submission_mail_to_reviewr . Also there is one instance where the function are long ie method email_reminder sends email as well as composes one, this can be split up into two different methods each one catering to a functionality defined by method name"
1,"Yes, there were some commits made in the 2nd round."
1,"Cannot verify as the Google won't let me sign in to the account mentioned. Also I thought the email should be sent to the new user added, which I didn't receive."
1,"Write up is neat and clean but few things are missing:
1. Explanation of code changes, why the change has been done at particular place and why it's the best possible fix. 
2. Test plan doesn't include Rspec changes or test cases. 
3. Problem description could be described in detail."
1,You can send mail in the background task.
1,Typo in submission_mail_to_reviewr
1,"The functions look good. email_submission_reviewers function could have a better name as this one is too long and does not convey the meaning well. Also, some more comments are needed as it becomes difficult to follow the code."
1,"The writers have explained aptly how the changes made by them carried out the required task. For fixing the issues at hand, additional helper methods were required. These methods were also properly stated."
1,"The functions are of appropriate length just doing the functionalities as the naming says.
line 75-79 submitted_content controller.rb can be extracted .The reviewers object in line 80 of submitted_content controller is not used before and we can safely assume that the code above is independent and can be extracted
Also, the code mentioned above is difficult to understand as to what functionalities it performs. 
Code follows ruby guidelines and is DRYed"
1,"There are no comments in the methods that are declared. But the self-explanatory naming of the variables eliminates the need for comments. eg: notify_reviewer_for_new_submission, email_submission_reviewers methods. Also, the code 75-79 in submitted_content controller.rb is not clear as to what it is doing."
1,"The authors have done a good work in writing clean and concise code which adheres to the community guidelines.The code is well commented. However, there are a few areas where the variable naming could be improved can be improved.
In submitted_content_controller.rb, the variable names

cur_date can be refactored to current_date which is more meaningful
max_due_date is not suggestive of the function it performs. Instead, replacing it by final_due_date would be more sensible options.
rev_res_map can be better written as review_response_map

Implementing these changes will make the code better as it will indicate presence of self-explanatory variables and eliminate the need for using comments."
1,"The writeup is well written. The writeup starts with feature that they are talking about, followed by the problem statement that mentions about the issues they they are trying to resolve and what is their proposed plan. The proposed changes are attested with code snippets that make it easier to comprehend the work that has been done in this direction. Along with this, the language is really lucid and easy to comprehend which makes it easier to understand and think about their vision in  the project. However, there is a scope for improvement where the authors can elaborate more about the test plan they they have envisioned for the project,  the design principles that they would use. Also, adding an video showing before -after changes of the system will make the document look complete as well as visual understanding of the project will be improved. There should be a section where the reader should be able to replicate the issue and"
1,The code as I said earlier is very nicely written. They have separated the code behaviour into different functions which are good to see. They definitely need to add more comments because some database-related code and array indexing cannot be understood just from the code alone.
1,(3): More comments are needed
1,"Not really. I understand the way Mailers work in Ruby so it wasn't hard to follow, but if I wasn't experienced with them I would be lost looking at this code. Comments are definitely needed."
1,Some names could be completely spelled out to be more concise but are shortened for some reason. Things like cur_date should be current_date or rev_res_map should be review_response_map.
1,"descriptive comments are needed 
General design principles and naming conventions look fine"
1,"Project is short so documentation is short as well, However, more info/descriptions about the work done would help to review it better."
1,"the email_reminder is bit too long for me, may be can use mailer.rb to handle the email sending, the email_reminder only handle the sending logic."
1,"In the part of ""Modified function email_remainder to add functionality."" I not sure what functionality actually add into the system, can you specify that in the Wiki."
1,"Explanations are good, more details on what code changes are made can be included.Team has marked the screenshots well to highlight the changes on the UI.""Purpose and Problem"" section needs to be worked upon, in terms on structuring and organization, rest seems good!"
1,"The proposed solution and changes are indeed required and are correctly identified and explained. It is perfectly fine to take time researching for the best solution for locking the page while being edited by one of the teammates. If the database approach is finalized it would good idea to have enum defining the current state of the review i.e. whether it's in edit state, locked state, submitted (final), etc."
1,UML diagrams are included. Good format. But I expect a higher level diagram stating how your roles and function work.
1,"Diagram is helpful in understanding and concise. The only problem I find is that I don't understand how the views and controller changes tie up with the model changes, perhaps having arrow across models, views and controllers would help. Currently only the changes in the models tie up together well."
1,"Diagrams were missing in the doc, and some visual aid would've helped in understanding the overall project much much better. But the document is pretty clear, and the implementation wise it does give good insights."
1,"The changes proposed by the team sound appropriate at the moment. However, I would suggest trying to assign all members of the same team a common Id rather than having an extra field in the review map. This would simplify the whole process of assign_review_dynamically, automatic_review_mapping and a lot of other functionalities, which rely on obtaining reviewer_id from review_map to establish unique reviews and avoid duplicates or reinforcing review limit, which you will need to change on your current methodology."
1,The authors have identified the right methods to make the code change. The design does not make the code smelly and design looks very simple. One improvement is that they could have included the current implementations and then proposed the new changes in code.
1,the design is good. could have written more.
1,"The code does not seem smelly or DRY in any way. 
In regards to locking mechanism, most BPM based software in the industry- such as PEGA and Salesforce have solutions to the locking mechanism mentioned in the document. Both these softwares are predominantly written in JAVA, and here's how they implement locking: 
You have a dedicated class (in PEGA it's System-Lock), where the class is mapped to a table that holds entries of all the objects that you'd want to lock. To lock an object in the system, you would call a method present in this class (or can be implemented in any higher class - such as the object class itself), which basically persists an entry into the lock table. This would help in defining a generic lock table, and you should be able to use this moving forward. Also, you could run a cron job in rails, which is pretty straightforward (https://dev.to/risafj/cron-jobs-in-rails-a-simple-guide-to-actually-using-the-whenever-gem-now-with-tasks-2omi) , which would delete entries in this lock table, if the entries have been there for more than a day (or whatever). 
Having been a senior system architect in PEGA, myself, this solution worked real neat at a production level. It's one neat way of going about this project."
1,"--
0-More effort on designing is needed
1
2
3
4
5-Design appears to be sound

 


1) the authors only plan to modify existing methods, 
2) the new design make the code ""smelly"", 
3) the new designs look easy to understand, 
4) the new design update some create() and new() method so it may potentially increase the response time of the system 
5) I think they should add the ""Test plan"" part"
1,"The write-up is not thorough, the issues mentioned in the OSS documentation haven't been mentioned clearly. The write up does not include code snippets of the newly added code or the references of the affected areas of the code. Also, the list of team members is missing out."
1,"The specification says ""The best place to specify this is probably as a dropdown on the Review Strategy tab of assignment creation (prepopulated to say that individuals, not teams, will be reviewing). "" feature be implemented to achieve the goal. It has been written on the design document that this feature needs to be implemented, however before and after UI changes screenshots do not include those. The boolean value has been added though.I suggest that it would be a better if the authors could explicitly mention what they have achieved so far and what is left, so that it is clear for the reviewers to look for the same in the screenshots."
1,The features work as intended. Their task is not to change any behavior.
1,"The method ""get_current_stage"" and ""stage_deadline"" have almost the same function. These two methods may be able to be reduced to one method."
1,The name of the new methods they added are clear and reasonable. I think their task is to reduce those five methods to three or four methods. But they add three extra methods and now there are eight methods related to one behavior.
1,"They didn't write test plan section in their writeup. Since their work is to refactor those five methods, the methods may change after their work and the tests may be rewritten. But they didn't write tests related to their code."
1,"The team should explicitly mention polymorphism as the design pattern. Though it appears in the diagram, it should also be mentioned explicitly in the 'Changes to Code' section."
1,The explanation for Modification to Assignment Class is a bit misleading/vague. Maybe the teams means they will limit assignment be individual or team if the review strategy is so changed.
1,"The proposed solution and changes are indeed required and are correctly identified. It is perfectly alright to take time researching for the best solution for locking the page while being edited by one of the teammates. If the database approach is finalized it would good idea to have enum defining the current state of the review i.e. whether it's in edit state, locked state, submitted (final), etc."
1,"They have given enough explanation about the problem and design they are proposing. Explained by attaching screenshots. They have mentioned about the files that needed to be changed, but they could have given a better explanation about how they are planning to do it. They have clearly mentioned about some of the things that they will be analysing in deeper sense."
1,"The writeup explains the Expertiza background, the description of the problems that they need to solve and the results of their work. It would be better if they add their pull request link to their writeup so that reviewer can find their pull request easily. 
They didn't write what design principles they need to develop the code."
1,"They included Expertiza background, description of their task and what they do to achieve the results. The structure of the writeup is clear. I think they can add more details about the description of the problem and add how they test the project. They can also add some sentences to describe why they choose such way to do the work."
1,The code seems to be well written with decent variable names.
1,"Yes, The pull request passed in Travis CI."
1,It was a refactoring project so no need of new test cases.
1,"Yes, it looks like projects are doing what they were supposed to do."
1,"There is no test plan, I can't see any tests anywhere because there is no link to the pull req"
1,"Under the proposed solution section, specifics into what fields are being added to classes, by that I mean the names being used, could've been incorporated in the design document itself, would've been nice. Also a general flow, a UML diagram explaining what methods, models, views and controllers are being considered in the project would've helped in understanding the scope of the project better."
1,There is no link to the github repo or the pull req and no access to any code.
1,"All the functionalities are well mentioned and their respective proposed solutions are given as well. The problem section is in paragraph mode, I would highly suggest a bullet point style."
1,"Yes, all points and user stories mentioned in the specifications have been incorporated in the design document, so of them have been implemented already. (I would suggest, that at this stage, it is a ""Design document"", so it would be better to not include changes that have been implemented already. Further, if the changes are halfway through, please avoid including them as screenshots as it is a little confusing for the reviewers what to look for.)"
1,More comments are needed.
1,"While there are a few comments here and there, I don't suppose they were added during refactoring. The new methods do not have any comments associated with them."
1,"I could only gather from the write up that you have added a new function next_due_date(topic_id = nil) and that DueDate.get_next_due_date(self.id, topic_id) was replaced by a call to private method next_due_date(topic_id). The write up did not include a compelling reason why this was necessary."
1,Test Cases have not been added or refactored.
1,Comments could have been added to the methods refactored.
1,"There are code changes, but no corresponding tests.Please include tests if this PR introduces any modifications in behavior."
1,"Test Plan is not mentioned, which makes sense because it is a refactoring project."
1,"All the functionalities have been included.
However, I think one of the functionalities have been misunderstood. Even if reviews are to be done by teams or individuals, the assignment can be either. The team is proposing that changing the review strategy will limit if an assignment be individual or team.
It's possible that the team has just made an error while writing as the 2nd part of the proposed change under Modification to Assignment Class seems fine."
1,"Yes the write up does explain the project. However, somethings could have been well elaborated, the writeup is too short. Eg.- deals with refactoring of stage deadlines in assignment.rb file."
1,"Yes, their design document incorporate all functions required. But why do they use wiki?"
1,The design document looks incomplete because it does not contain any test plan. Please include an elaborated test design or implementation on how to test. The document contains other parts such as project purpose and project design.
1,"As mentioned before, though I had little trouble following the code, comments describing the added methods would not be amiss. Other than that, I feel that coding guidelines have been followed well."
1,More explanation needed.
1,There are quite a few cases that could be considered as edge cases for this project. Please include in the design document as to how this design would be compliant with tests or how you plan to modify the tests. Please also mentioned the edge cases that you come up with.
1,"Though the choice of naming is good, I could not find any comments added by the team describing the methods in the code(A short description for methods like finished? and topic_missing? would suffice)."
1,"No Test Plan is provided.
Pehaps a brief explanation in the 'UI Changes' section would help to better undersantd the provided images"
1,"Overall this document looks pretty good. It would be good to include the test plan in the document, I really liked how team has created the mockup screen and added in the design document. It really helps to understand that where the exact changes are being done."
1,"A test plan, and how testing for this project will be done is missing in the design document. Also, a diagram of how each method relates to one another, or an overall picture of what models/views/controllers are being used can also be incorporated in the design document, making it much more complete."
1,"I think they need to added the Test plan part.
Besides, their solution part could be renamed into ""design"" part. Which seem more suitable for the design document."
1,"The authors have described the problem statement well and also given descriptions for the changes they have made with respect to the code. However, I feel it could be more descriptive as it is not clear on first glance why individual changes were made. Also, screenshots of the code/output at proper sections would be helpful as well. Though not necessary, a section mentioning team members and a link for the pull request(Since there isn't one here on expertiza) could be included as well."
1,"The wiki explains the changes done by the team along with the code snippets. However, it would have been helpful if they provided more information about the existing scenario."
1,It looks like the team has made quite a few code changes but no new tests were written and the code coverage has decreased. So I would not recommend deploying it onto the production server.
1,"It is an Expertiza project, and it did pass the build in Travis CI."
1,"Functions added followed exactly the conventions of Ruby and the code looked DRY. However, no comments about either changes of the source code or functions added by the group."
1,"The only concern would be to verify why the code coverage has gone down. Else, the code is in good shape to be moved to production."
1,"- Yes the system is operating for questionnaires page, most features are working as they are supposed to
- Getting issues when checking ""Bookmark Rating"" questionnaire, the page crashed"
1,"I suggest the group upload a link to the page of pull request of this topic be given either on the wiki page or the project page on Expertiza. The final commit passed the check process, but no test at all. Therefore, how can you ensure that your changes in code would not affect other functionalities?"
1,"I think that this code is ready to be deployed onto the production server for the OSS project
I do not have any concerns about the project, apart from the fact that code is not commented well enough.
The project need not be redone from scratch using a different approach as it is a refactoring project & the team has already done almost all of the work required. This may be considered a good starting place for a future team to pick up and increase the code coverage by adding more useful tests as well as commenting the code to make it more easily readable."
1,"The team did not add any new test cases.
The code coverage did not increase, it decreased significantly by -10.8% to 19.649%.
There are no newly added test cases, so it does not affect the tests covered range of the project."
1,From their problem description i can understand what the problem is and the work done by this group. I think this description could be more detailed.
1,I thought I was able to know most of the work and functionality related to the work. I also thought it would be better that the writeup could be more detailed.
1,"Yes, there is just one commit. They have changes variable names in app/controllers/questionnaires_controller.rb."
1,"There is no test condition. They should have added rubocop scores, build test or rspec test report."
1,From the description I can tell it is a refactoring project but I don't know anything about what they did exactly and how they did it because sourcecode link for github is not provided. I cannot check anything.
1,"For most part it is code refactoring, so code's been changed in place, no edge cases involved."
1,"Descriptive comments, wiki page contains different descriptions for save_all_questions though."
1,"Wiki page is thoroughly written, the statement is about refactoring a controller class. Used the right design principles, primarily reducing on the passing of class variables in function calls as parameters. Replaced string literals with constants, followed DRY principle throughout. Could include the test case changes in the write-up, and be provide a thorough description of the changes. Before/After code snippets could be more clearly demarcated in the write-up."
1,"While editing the questionnaire I received an error
 
undefined method 'each_pair' for nil:NilClass
 
Rest of the code runs as expected"
1,I think test plan can be added for automated test.
1,"- New tests haven't been added as the existing code was refctored and the team added repeated methods as private which need not be refactored
- Few methods like ""question_size"" methods are added which are query on self and need to be tested"
1,"- Methods which are abstracted to maintain the DRY principle are commented
- Few methods seem to be over commented, with what the comment does
- The comment must only answer why the function is as it is, the function itself must cover what it does"
1,"The test plan is just a single line description mentioned in the document however, it would be recommended that you atleast visualize the edge cases getting validated with the help of screenshots. Not only it shows that you have tested the application yourself but also makes the reviewer aware of the test cases for which the program is failing so that he/she can suggest some new edge cases for your task.
Moreover, I would also recommend you to give a list of instructions for testing the same from the User Interface, which would enable the reviewer to view your working rigorously."
1,They only make UI test for the codes they changed. Maybe you could add some unit tests for new feature added.
1,"There is no test plan offered by the authors. Nothing has been done in regards to testing for the newly added code., such as writing RSpec test cases"
1,"Yes, there are descriptive comments after each method added by the team which is well descriptive of the functionality of the method."
1,"No, the writeup does not have a Test Plan section at all.
Authors have not added any new testing criteria, and have only showed test cases passing from the existing RSpec file."
1,"Yes, the write up explains all the work done by the authors and also, why they did what they did.
They have mentioned a 'Testing' subheading under which nothing has been written.
They have not explained anything about the testing done on the code refactored by them (either manual or writing test cases)"
1,- They have commented few functions which they were supposed to remove. Considering that this is a refactoring task it is not a good idea to leave code commented as then it would need another refactoring task to get rid of that.
1,Doesn't involved naming/creating functions but they have followed conventions based on what was asked in the issue.
1,"- The build does not pass. The travis CI build is failing.
- Code coverage decreased but the change was minimal
 
- When naming the constant on the top they have used `QUESTION` as a prefix in some of them example QUESTION_MAX_LABEL but some have `QUESTION` in middle eg MINIMUM_QUESTION_SCORE just a suggestion. Following a similar kind of variable name makes more sense in terms of code readability and is even easier to remember for the developers."
1,"The provided link does not work. However, the team has added extra test cases which did not exist for a couple of existing methods which cover the functionality of those methods."
1,"The write up is well written and explains the existing scenario and the required changes very well. However, there are a few spelling mistakes (refractor) which could have been avoided."
1,"The team has done a great job of implementing all the requirements and doing them in accordance with good ruby practises. They've also added new test cases to test the functionality of existing methods. Thus, the changes are good and may be deployed to production."
1,"I think the changes made are good enough for further modification in the future. Though I could not pinpoint any specific failures in coding practices, I feel it could still be better."
1,"The code follows Ruby writing styles for naming . The business logic is well supported by comments which make it easier to understand the code . This commenting feature was absent in the last submission . However, some code in app/controllers/review_mapping_controller.rb (line 92 onwards) can be split into multiple methods as the method name is doing more than what it is supposed to do ."
1,The 4 tests added to review_mapping_controller_spec.rb are not DRY because they share the same first 10 or so lines. This could be reduced with a helper method.
1,"Since the code coverage has decreased and no new tests have been added, i think the code isn't quite ready to the deployed onto the production server."
1,"The method ""finished?"" is a little abstract. They can rename it to indicate that what is finished."
1,"Good work is done in efficiently and concise writing the code. Also, There are no methods that are defined in the author's work.However, all the code that has been newly is self explanatory which eliminates the need for comments.
It would have been better had the author mentioned about alternative way to implement the solution and why did they opt for this way of fixing the bug."
1,"The variables, methods and the class names are declared properly. I would like to suggest that in line 89 of app/controllers/review_mapping_controller.rb variable review_mappings could have been written in singular form as reviews_mapping as it maps the reviews given by the author."
1,"There is no mention of the design patterns in the documentation. The documentation was clear enough to understand. Some more screenshots, especially regarding the testing scenario would have been more helpful."
1,"The screenshot, current implementation and the improvements made were nicely described. The documentation could include more test cases, screenshots."
1,"The team has developed the write up pretty well from the first submission. It included team names and test cases as well as screen shots for all the refactored code. However, the write up still lacks the testing video where the newly added test cases can be seen successful. Besides that, the write up looks good."
1,The deployed VCL link is not working. No way to comment on the asked question.
1,"The write-up is decent, a snapshot showing if the test cases have run would have been helpful."
1,"No comments were added for the methods that were updated. You should add a comment where you check the review mappings size and compare it to the number of reviews allowed for the assignment explaining what it is doing. Fortunately, it isn't too hard to understand what this code is doing. It would be good to add similar comments explaining the changes to it."
1,"There was a mistake overlooked, the code has the following in a commit:
allow(assignment).to receive(:swathi).with(123).and_return('Finished')
Please proofread your code before commits thoroughly.
Not ready for deployment, looks good except for this trivial mistake."
1,"The build passes, but there are error notifications from code climate. Specifically, there are 120 issues to fix for code climate. Code coverage decreased by about -6%. No methods were updated, but they were extended to have new functionality for checking the review number. Similarly, no variables were added. However, the field of assignment 'num_reviews_allowed' is named well. Therefore, naming seems good. I would just look into the errors with code climate."
1,"The document contains a ""Testing from UI"" section, not a test plan. Rather than being focused on pre-conditions and edge cases, it gives a list of steps for a happy path through the new flow. Alternate paths should be added."
1,Pull request link has not been provided to check also the github link is not provided so the code could not be checked
1,Code commenting can be done.
1,Commenting has not been done. Adding commenting before the changes would help understand the code better.
1,Could have provided the github link
1,"The test plan could have been written in wiki page. Currently, the wiki page only explains the UI testing manually."
1,"The write up does explain explaining everything very well and in brief. However, test plan could have been explained in write up"
1,Test plan section is missing
1,Please provide directions for reviewer. I was able to test by reading the links from your snapshots. Otherwise it would have been more difficult.
1,"The first thing I checked while reviewing the document was the testing instructions from the User Interface but unfortunately I could not find these documented on wiki. Moreover, due to this, I was not able to do a check on the edge cases by myself and feel that the testing instructions would have proved to be more helpful in doing so."
1,"The functionalities are modularized as required. However, I would recommend that comments be added to the changes done so that it would be easy for most users to follow and understand the functionalities being added."
1,"The different edge cases like fields cannot be empty, penalty point is a number, maximum penalty should not exceed a particular value etc., have been taken into consideration while creating a new policy and the screenshots for all these cases have been added to the document.
Depending on the form fields available I feel that most of the edge cases were checked for and ensured that they get validated."
1,"Comments have been provided in student_task_controller.rb for the tag count feature - however, a similar comment could have been given for the tag counter modifications in grades_controller.rb to make the changes more easy to understand."
1,I agree that the variable names used are quite intuitive but the comments are not included. Maybe because they just tried to fix the bugs. It would have been even better if you could describe the logic or action in one line as a comment.
1,"The Documentation is written well enough, also listing the missing/unimplemented parts. They however do not mention why they chose to perform the counting in the back-end(grades_controller.rb & student_task_controller.rb), as doing it on front-end would have been faster and the user would not have had the need to refresh the page to see the updated result."
1,They explained how they did it very well. Documentation was clear and illustrative. But they haven't mentioned what other design choices they considered or why they did the work the way they did it.
1,"Project requirements, key points, and implementation have been addressed neatly on the wiki page. The test section or the test plan is, however, lacking on the page - team can add a section about the test cases covered or prospectively to be covered. The team can also add a screencast/screen recording of the use-case to make it handy."
1,"The authors did not had test plan but they had deployment example, so if instructors are expecting section test plan they should rename it."
1,"Currently, the team hasn't specified any test scenarios or edge cases covered in the project. They can highlight it in the next iteration of the project."
1,Overall it is good. It can be better with test explained.
1,Yes the writeup is actually good and concise.also the diagrammatic explanation is good.But they do lack the screencast of there feature
1,"Yes, the description was very elaborate. Only thing missing was the test plan"
1,Code works when tested and changes in count values are reflected upon refreshing the page. The team can probably add some js to make the code not dependent on page reload to show all changes.
1,"1)in the student_task  controller they added two methods where the get all the comments in one array and then did another loop for the array vm list to find total number of tags.So they added two methods in the same controller maybe they can decouple it in private methods then call that method to view team controller.
2)Sugested above
3)comments needed for explaining the logic and they justput one comment which says the title about there project which is very general."
1,"In app/controllers/grades_controller.rb and app/controllers/student_task_controller.rb, huge pieces of code is added. It could have been better understandable with more comments. Also, see if they can be shrunken in size."
1,Most of their code change seems to be in the view action of the studentTask controller. And the function is pretty long. They have included the logic for tag count inside the view function. Which means that the function is doing more than what its name suggests. They could separate the tag count to a different helper function and call it in the view.
1,"(3) Code in student_task_controller.rb is long, and would be better if there are a couple of more comments.
(1),(2),(4),(5) are all satisfied properly."
1,1. the functions are not too long;  2. no;  3.yes team need more comments to make it more readable;  4. yes their code follows the Ruby Style guide;  5. the code looks good and follows DRY
1,"variable name ""vmlist"" what does this mean.Not understand ""round"" variable.Methods are not thare where there should be as code written loops could be written as function."
1,"Names are pretty intuitive, one of the index names in the schema.rb file seems to be long ""index_track_notifications_on_notification_id"" but since it's not very widely used, i think its okay."
1,"Test plan isn't specified in the wiki page, this can be implemented in the next iteration of the project."
1,"I don't see any automated testing section in their writeup, would recommend the team update their page and describe more concisely about testing"
1,"After reading through the code, a lot of the things did make sense, but when first reading the wiki, the same wasn't the case. Adding a high-level understanding of what the code does, especially in the model/questionnaire.rb and also how refactoring was done on the create method would definitely give a better understanding of the code and problem statement."
1,"The deployed version on Heroku does not work. However, pulling their github repo and rebuilding the expertiza into vcl I was able to test the functionality. I would suggest the authors to update their heroku projet or setup a VCL instance."
1,I would suggest the authors to add comments detailing the reasons for renaming a variable or moving the method. you could add a comment next to new variable //previously oldvarname. This would make it easier for someone who just pulled your source code and would not find the old variabe.
1,"The authors are first detailing all of their proposed changes without mentioning any reasoning. the reasoning is mentioned in the next section ""Changes implemented"". I would suggest to reverse the order and also rename the sections to motivation - detailing reasoning and then giving a description about all changes. Also the reasoning is mentioned in a paragraph format for each change. I would suggest using sub-bullets for each change detailing the function, the problem and solution(change). This would make it easier to read the wiki."
1,"The team has done a good job of documenting the proposed changes along with the reasoning behind the proposed changes. However, They have not mentioned the design principles they have used. Also, there are certain changes like the ""Created a variable named ‘allowed_actions’ in method choose_case(action_in_params)""  is proposing a new logic for implementing the code rather than refactoring. I would suggest to make the documentation detailing the issues and subsections as problems and proposed changes. This would make it much simple and easier to understand the wiki."
1,"The team has done a good job when it comes to naming/renaming methods and variables. The justification for each such action is also clearly stated in the writeup. In my opinion, no_particular_topic still doesn't capture the meaning well enough, it could maybe be renamed to no_topic_preference or something along those lines."
1,"Some of the methods they did write a little comment, but some do not have any comments.
e.g. In the app/helpers/import_topics_helper.rb file, the team adds a new function called self.assign_team_topic and should add some comment to tell others what this method does."
1,There are no comments for the new code. Add the comments for the new methods also for the changes which has been implemented. Comments would help others to understand why this particular method is written.
1,Though the variable names and method names are good and intuitive they haven't added comments to most of the part of their work. Adding more comments could help other people understand the flow or what the person intended to perform with this piece of code.
1,There are no comments for the code additions at all. Add the comments for the new methods also for the changes which has been implemented. Comments would help others to understand why this particular method is written.
1,Seems there's not comments for each method. Adding comments will be great to understand better about the code that is modified.
1,"There are only a couple of new comments that describe what the new code is doing i.e. the 2 comments in models/team.rb describes the change in the following code that fixes one of the issues. The comments gave a good idea about the changes and helped me in understanding the new changes.
Though the test names in the completely new spec/models/sign_up_topic_spec.rb were themselves descriptive, the authors could've added short comments before each test to describe how each test was working."
1,"Yes, they did explain why and how they did the work.
 
Suggestion:
1. Please write more explanations of the code of each issue.
2. There's no test part like a video test or Rspec test on the wiki page."
1,It has been explained fairly but can be improved little more. Like why the functionality is important for the application.
1,"Yes. It has been explained that what was the problem with the existing implementation. In few bugs, it has not been explained as it was a new implementation but describing it why the implementation has been done in a particular way would help others to understand."
1,"Yes, the wiki page looks good. They have added code snippets as well as the screenshots from the UI clearly explaining the working of the project they have done. They could have added more explanation for the solution they have implemented and the approach they followed to implement it."
1,The write up been explained fairly but can be improved little more. Like why the functionality is important for the application.
1,"1. On their wiki page, there's no any explanation about the test part.
 
2. In their Rspec file, they did write their own test, so please mention it on the wiki page.
 
3. I cannot log in any account including instructor6. After I check the database.yml file, I found there's a blank of password, probably you should set the password to ""expertiza"", then you can run the database and the reviewers could log in the expertiza by using user: instructor6, password: password."
1,"They haven't mentioned anything about the test plan. Since this project was to fix glitches, they should have tests and enough description to make sure their solution is working correctly."
1,"No test plans included in the wiki doc, can't tell if automated testing was done or not. Even if not, test plan should be included for future scope so we can test the changes at some point at least. Some test cases were committed but not for all bugs, that would be as the modification did not have existing rspecs."
1,"The writeup does not include any Test Plan section, though the authors have written new test code for sign_up_topic_spec.rb and team_spec.rb. There are various tests that test different possibilities for example, ""returns false if user_signup_topic.is_waitlisted == false"" and ""sets sign_up.is_waitlisted = true if slotAvailable is false""."
1,"Yes, most of the writeup is pretty well.
they did write about the brief introduction about this project to let others understand what it does, and also indicate the functionality clearly.
suggestion:
1. write about the test part.
2. write the detailed explanations for each code part."
1,"good wiki page, the only thing need to do is add test plan and everything will be fine."
1,"The coverage has been decreased by 4.4% and that's because of the new methods which are added, though for certain methods like i mentioned in one of the above question that it's not possible to write cases so coverage may not be increased."
1,"Explanation of what issues they have fixed and what code they have implemented is good.
It would have been better if they could explain the approach they followed to correct the bugs in the project.
They gave the code snippets on the wiki page. They could improve the solution by further describing the solution textually or by drawing the flow diagrams to show action flow."
1,"Write up could use some more effort, like outlining the test plan clearly, even if not implemented, for future scope. Screenshots check. Could be more descriptive, the problems and solutions/drawbacks could be described in more detail."
1,"1. The functions they added are pretty well and the code does not need to be separated.
2. more comments are needed, it can help the reviewers to understand it better.
3. the code is good and does not duplicate."
1,"Function length is in shape
 
There are no comments at all in the code. Please put some
 
Code does follow Ruby guidelines."
1,"Function length is in shape
There are no comments at all in the code. Please put some
Code does follow Ruby guidelines."
1,"The features work as intended. One problem I found was that when I create a new late policy, and click on the back button it goes to the page editing the late policy and when I click the Back button on this page, I get a ""ActiveRecord::RecordNotFound in AssignmentsController#show"" error. Please fix this."
1,"1) Most methods are okay, but I found the function 'update' in late_policies_controller.rb to be quite long that could have been modularized. It also contains many if-else blocks.
2) Update method in late_policies_controller.rb could be modularized.
3) Many more comments are  required. No comments have been given for the new code that has been added.
4) The code does follow Ruby Style Guide.
5) The code does not smell and follows the DRY Principle."
1,No comments have been added in the code that has been added. Please add multi-line code before the beginning of a method describing what the method does and single line comments inside the method wherever required.
1,"The write-up does not include a Test Plan section. It just includes the problem statement and the solutions to those problems. The write-up only mentions in one line that RSpec tests have been added. Please add a test section highlighting the pre-conditions, edge cases, invalid input values and other possibilities."
1,"The write-up includes the problem statement as well as their solutions but it does not provide much insight into why they have used any specific design pattern or why they've done what they've done. Also I had a hard time figuring out how to get to the 'Create new late policy'. Please add the flow from how to get to that for any assignment. Aldo, please include more details about the test plans including the automated test cases."
1,"The write-up is well written, it contains the problem statement as well as the solutions for them. The authors have done good work by including screenshots as well as some code for the solution they have implemented. However, the write-up does not include any mention of design patterns and no reason for choosing the solution they've implemented. Please add reasons for choosing the solution you've implemented."
1,"The problem statement makes references to steps that are not present. For example, it says ""(step 2 above)"" where there is no such step."
1,The create policy feature works as intended but the backlink does not work. On clicking the back link an error occurs that is the RecordNOT FOUND error. Please check whether the assignment id is stored properly or not. I think the assignment id is null.
1,The functions are short. The code requires more comments because I had trouble following the code. Other things are fine that is the ruby style and also the code is not DRY.
1,They did not mention anything about the test plan. I cannot see any test cases. They should have written test cases testing whether the policy has been created or not. They should also write the test case for the backlink. By using the capybara they could have tested whether the link redirects correctly or not.
1,Write steps on how to reach the page where we can create the policy. It is difficult without the proper steps to test the feature. I have tested by changing the URL looking at the screenshot. The screenshots do not explain the steps properly so add a description for each screenshot.
1,"I cannot connect 

http://152.46.17.218:8080
 . Maybe you should try RDP (from piazza), so that you don't have to run the commend ""rails s -xxxx"" everyday."
1,"Yes, they comment each method for late_policies_controller.rb, and every comments seems practical. But method late_policy_params, instructor_id and late_policy have no comments."
1,"Yes, they add correspond Rspec test for their function. But I think they should add some valid test cases. Besides, If they can have a picture of their test cases on wiki, I think that would be much better. Last, I think they should add some UI testing steps for the policy function."
1,"> I can see some comments for submitted_content_controller.rb. However other than this, I dont see any comments.
> Also, please delete the commented lines of codes which are no longer used."
1,"> Names for the variables/methods/class seems to be well chosen. They are descriptive of the functionality it offers.
>  However some of the variable names can be improved. For example: rev_res_map."
1,"> There is no Test Plan. Please add this. 
> Neither can I see any testing screenshots or anything like that which would show the fix. 
> Consider making a screencast of the testing and add it to wiki."
1,"1) Write up is very brief and does not include all the details.
2) One liners have been added for each issue. Please give more details to them or add some pictorial representations to help understand better.
3) Fixes to the issues have not been described. Please describe what exactly you have fixed and how."
1,"Good thing is that all the implemented features are working properly. There are few spelling errors in the template of the email. Just correct it. 
Templates can be improved with the content and can be more professional."
1,"None of the test cases has been written, also there's no test plan in the wiki. I suggest that you guys should write test cases because in production applications, even a small piece of wrong code can break the application and it can get worse for the business."
1,There's a change in the file db/schema.rb where as there's no description about it in the wiki. Change in schema should have been explained as schema is the heart of the application always.
1,"cur_date could be current_date which is more specific and gives better understanding of why the variable has been used. 
rev_res_map: this variable doesn't imply anything by the name. Can be improved by changing rev to reviewer 
There is a comment in the mailer_helper.rb inside method submission_mail_to_reviewr: If the first name is not required why to keep the comment in the code? 
Unnecessary space at the end tag of the method inside file mailers/mailer.rb"
1,They are checking if an assignment with the same name already exists in the create method of the controller. I think this action can be separated out and that would help keeping the code DRY and reduce the size of the method. It would also make the function more transparent since the function will be doing what it's called and not other stuff too.
1,"As per the commits in the pull request link, I see that most of the commits have been made during the second round of submission which implies that most of the changes were added then.
I also think that the commit labels should have been more verbose which would not only make it easier to understand but also help in back tracking the changes being done."
1,"Even though all the tests and bots have passed, this project might not get merged as this team has committed schema.rb. The changes in schema.rb don't seem relevant to the project. A commit was made with message 'Original Schema'.
Also, the code needs a bit of refactoring as mentioned in the next question."
1,"The create method in assignments.controller is huge and could benefit from refactoring.
In the previous review, I found some variables that needed renaming. These variables are still left as it is.  ""A lot of variables have been named in shorthand. Like cur_due should be current_due, ques_array should be questions_array."""
1,"Overall, it works fine but on one edge case when I try to save two assignments with same name under same course, the application throws exception which should be handled with error message at the user end."
1,Yes they did try to improve the code and resolved issues related to code climate. But still the indentation is not uniform and also they could have added more comments in the UI part and in assignments_controller
1,"Good code practices, they've used constants for string literals everywhere. The labelling is consistent, comments are written everywhere. Methods are introduced at the write files. Two methods have names get_drop_topic_deadline and get_deadline_to_drop_topic, which could be written better"
1,"No test cases are created by the team.
I think they should test some of the methods that they have implemented. 
They wrote in the wiki page that they have modified the already existing test cases but it is not visible in file_changed in the pull request."
1,"If the code snippets were taken from git diff, we could have a better idea about what was already present and what was chacnged"
1,"Though no test cases were added, the explanation was given in wiki
Although for views, if test cases can be added.
The existing tests  for calculation of deadline duedate, for the following cases can be included



-if no deadline date is set on topic'
-if date prior to the topic submission deadline is set as drop topic deadline
-if date after the topic submission deadline is set as drop topic deadline"
1,"When I go to edit some assignments, I see the error message: undefined method `id' for nil:NilClass.
This is followed by the code snippet:
function populateDueDates(topic_id, review_rounds) {
elementsArray = [];
$('[id^=""due_date_<%= @assignment.sign_up_topics[0].id %>""]').each( function(i, e) {
/* you can use e.id instead of $(e).attr('id') */
elementsArray.push($(e).attr('value'));
});
It looks like there isn't a null check in this function before looking at the due date. It's unclear if this error is related to new functionality. Apart from this, the functionality seems to work. I could modify the deadlines of assignments."
1,The code displayed on the wiki has some functions that are huge and could benefit from refactoring.
1,I found over all code is well written but as mentioned above two methods are a bit longer and can be reduced into smaller method calls.
1,The wiki page lacks the guidance for user to test which is crucial part for the review. May be that can be included next time so that the reviewers can get to test the changes properly. Otherwise whatever is on the page clear.
1,"the link for pull request hasn't been submitted.
The code specified in wiki page has used proper variable names  which are compreshensible.
However the min_left variable can be changed to min_time_left to indicate that the measure is time."
1,Good wiki page. They have also attached a video that explains the working of work they did on this project. They could have added the explanation for why did they choose this approach to solve the issue. More explanation for the solution section could be added.
1,"The test plan mentions that there is no need for unit tests as most changes have been made in the views. However, it is possible that some functional/integration tests would be required."
1,"Testing from UI is mentioned. 
1) Write Rspec test cases for DB persistance change"
1,"The code is very neatly written with descriptive comments and intuitive variable names. The team has also added test cases to cover their bases in the code functionality testing. 
Concern:
The code changes made to tag_prompt.rb has some bugs due to which ""Alternate View"" for a student viewing his/her assignment now does not work as intended. This can be resolved by a quick fix by the team. Once this is done, the team can test their code (expectation is that everything should work fine) and the code can be merged after code inspection.
I do not think the project should be done from scratch, future teams can pick up from here."
1,I don't see enough comments to tell what they did. I think they need more explanation to help to understand the code that they have modified.
1,"- The writeup is good in terms of presenting the information. They have added screenshots and descriptions of the bug which makes it a bit easy for reviewers to understand.
- Best part they added loopholes although I am not happy with the title it's good that they are aware of possible `caveats` which may hamper things.
- They didn't add any information on how to test and what to look for when testing. In the test plan, they have just added screenshots of their test suite running but didn't state how can reviewer run it to verify the changes."
1,"Answering each question mentioned above below: 
1. The problem given to this team is to refactor and reduce the length of create method and create_questionnaire method, and they have definitely done so. The code is as short as it can get for functionality to work as expected. 
2. This has been done, by moving the code onto model file, as expected in Rails. 
3. In the question above for this rubric, this question has been tackled in detail, where more comments would have definitely helped in understand the code better. 
4. The code is being built on top of existing code, which did not follow the Ruby Style Guide all that well, but this team has done so by removing methods that are not necessary and also moving code onto the model, from the controller. 
5. Coding seems to be DRY."
1,"Yes, the current code is ready to be deployed, however I would suggest to add more tests for and around this module ."
1,"The team's major role here is to refactor code, and use/remove existing methods, and thus this question does not seem to apply to them. They have added new variables in the questionnaire model file, such as : 
create_questionnaire_node, create_new_questionnaire_obj, etc.
which seem to suggest their functionality.  I have no further suggestions for improving the names of such methods, as they definitely seem to indicate their functionality per se."
1,"I am not sure if the code is ready to be deployed to production server. Overall the team did a good work on code but I think the export functionality needs to be improved or optimized using inbuilt function like Range. The current code will take a lot of time if the data is huge. Moreover, the test cases must be written for all the cases before deploying to production."
1,"A test plan section had not been included in the write up. But most of the edge cases seem to have been covered by the team. The ones that they have missed is clearly shown in the pull request, and seem to be simple ramifications of refactoring, wherein considerations such as: 
1. when id --> nil,
2. timestamp issues. 
The RSpec for questionnaire controller seems to have this covered, and simple tests against this would definitely help the team in overcome the issues outlined."
1,"The team has done some nice work with the writeup. They have included all the important aspects like Introduction, Implementation, code snapshots ant test. However I feel that code snapshots needs more description and test and test plan should be under same heading, something like ""Rspec Test"" and ""Manual Test""."
1,"Yes, the team had added the test cases. However, team could have written the cases thoroughly. I can see test cases like  ""can create an empty csv with just headers"".
But test cases with more edge cases need to be added like 'large csv files', 'csv with characres', etc. Overall the coverage decreased in the CI build."
1,"Yes they have well written comments. One comment in the reports controller says ""extended functionality"" I think they can come up with a better title for this."
1,"Comments have been provided in one line wherever possible, but in reports_controller.rb, the newly added code does not have any comments. I would like to make a suggestion, please give a multi-line comment before a method that explains what this particular method does, and a single line comment inside a method wherever required to give details about a specific line that might not be so straightforward to understand."
1,It is complete enough with a video included. It will be better if they can rearrange the order and put the link of the video along with the test guide.
1,Test Plan is shown as testing step for users. I think Test plan should include Rspec or any functional or integration test.
1,"Few screenshots are missing, like the location of the ""Veiw Report"" buton.
Also, the Design section needs to be moved up in the wiki, probably after the motivation section."
1,"The write-up has been well written with almost all details. It gives good description of the problem statement, solutions, output, etc. It also contains the way to reproduce the displayed output. However, the team could have written more briefly in the Test Plan section. Please add more edge cases, conditions, etc in the Test Plan section."
1,"The variables, method and class names are properly defined. By looking at the code I was able to get an intuition of what the code will probably do. However, I came across a variable name 'rname' in _review_report.html.erb and I am not sure what that does. Please change it to something more human readable, if possible."
1,"I would suggest to use clear names for the review file being generated, as is the case with the rest of the application (Try Export in Assignments / AssignmentParticipants) . The file is named review_scores which is not very indicative (or which scores or what assignment or which student)."
1,"There are some attempts of writing test cases for the new functions. But those seem to have failed while TRAVIS CI build was running.
Authors should consider writing some test cases to test the code automatically."
1,Most of logic is written in controller instead it should be in model.
1,"The code is mostly in controllers and views. 
Whatever methods are written are mostly handling single tasks but there are some methods that have a lot of logic and refactoring might help."
1,"I can't say if it can be deployed onto the production server since I don't have the link of the deployed application to check whether the functionality is working or not. Additionally, the code coverage has been decreased by 13.7% so I would not recommend it to be deployed. the tests and refactoring code looks good to me but I would need to test the deployed application."
1,"The code looks good in terms of the function complexity,names etc.But there could have been comments put for better understanding of the code"
1,Authors could've attached a little clip of video explaining about the changes they made.
1,Some of the methods like 'create_approved_user' and 'create_requested_user_record' are still too long. Since this is a refactoring project I fell these methods should also me broken-down/modularized and comments should be added for those methods.
1,The names are very descriptive are the code looks user-friendly. I feel RequestedUser should be renamed to UserAccountRequest instead of AccountRequest.
1,"Though the code follows rub style,there could have been more comments added,separate methods could have seemed even better."
1,"The writeup explains the problem statement.So,it explains as to why they are working on this project.What and how they have worked on the project is explained.But,this could have been explained considering individual issue and how it is solved"
1,"The witeup indicates that the task is to refactor the UserController. The writeup includes the Expertiza background, the abstract of what they should do in the project and the results of their work. I think the abstract section can be extended. They can write what they should do in the project in details. They can list all the task included in the project. They only included the refactoring task, but there are other tasks like invoking the paginate_list method in the right location. They should include all the task they need to do. Also, a section that describe how to test the project in UI should be included in their writeup."
1,There are some comments that are added but not to all the refactored method. Should be added for the remaining methods as well.
1,"The writeup decently explains what they have done in the project. However, could have improved by comparing what was the existing implementation to their proposed changes."
1,Writeup is decent but should be improved by mentioning the distinguishing features from the existing to the proposed functionality of the controller and the refactoring tasks they took.
1,"> Most of the variable/class/method names are fine. However, there are a few that could be improved.
> For example: per_page in Users_controller, ""foreign"" method in account_request_controller. It does not suggest functionality."
1,"> Team has updated the tests for the new controller, however I don't see any specific ""Test Plan"" section about all the changes done.
> It would be nice if the team could run the tests all over again after the updates and add some results for the same in the wiki. A screencast or even pictures depicting the test run would be nice.
> Could not test or consider all the edge cases as there isn't much talk about the test plan. Please add more and the results as mentioned above so that more rigorous testing scenarios can be considered."
1,"1. Almost every change they made is reasonable and doesn't attract any ambiguity.
2. Changes to the variable names followed by comments would help to understand their use. (for e.g. paginate_user  doesn't  give hint about what it does)."
1,"There is no test plan section.
I recommend you have a section that tells how to get to the page you are working on Expertiza system.
For the hard code part, did you add all of these codes? Or did you revise any of them? Please state what did you do and why."
1,"Not really. 
For issue1, I am confused about what it means. I can understand issue2 for a little bit by reading the instruction. 
If you can post some screenshots about how to get to the page you worked on."
1,"An obvious error is in the model of Librarian, there says `has_one :library`, which should be `belongs_to :library` instead. Because the orginal relationship between these two categories should be that one librarian belongs to one library and one library has many librarians, in other words, the relationship beween library and librarian should be 1-to-n. And in the model of Library, there is no code related to the relationship, instead, they should add `has_many :librarians` into the file.
Another error is about the models of HoldRequest and Book, and HoldRequest and Student. Again, in the model of HoldRequest, the code `has_one :student` and `has_one :book` should be replaced by `belongs_to :student` and `belongs_to :book`, then in both models of Book and Student, `has_many :hold_requests should be added.
Last one, in the Book model, there is a code `belongs_to :library`, which means the relationship between library and book should be 1-to-n. Therefore, a code `has_many :books` should be added in the model of Library.
The relationship of book to authors is correct, as 1-to-n."
1,"The relation between, authors and books can be modified. One author might have written many books. Dependent destroy , deletes the author of one book who might be the author of other books too.
book to author relation should be many to many.
The relation between librarians and books to library should be specified in library model as well.
The library model should have one to many relation with the books and librarians"
1,Interface is fair: it contains the basic elements to navigate across the page. However it is better to provide detailed instructions in the Readme file.
1,"The interface is pretty intuitive. I would recommend adding a ""Back"" button on every page which would redirect to the homepage. For example, after I'm done submitting a form, using the browser's back button I go over the form that I submitted all over again which doesn't seem right. Overall, it is intuitive."
1,"The addition of admin credentials were helpful in the login page.
But as the page passes the signup page and goes to the view :/logins, page shows. This might be a problem associated with deployment of the app on heroku.
The admin is credentials provided redirect to non-exiting page.
There can be different pages for login and sign up and the type of user(librarian/ student) could be added while signing up
 
By going through the code  in Github, I 
In the login controller,
the user is able to edit the login information,  This functionality can be added in the home page, which could be seen as that present in logins/show. Immediately after logging in, the user can be redirected to the show page, where the functionality to edit profile can be added. The approach adopted also works well , but this would be a more intuitive approach
 

We're sorry, but something went wrong.

If you are the application owner check the logs for more information"
1,"Admin should not be able to delete his/her credentials from the system, because it is preconfigured and admin cannot sign up.
Since the admin got deleted, I cannot review further.
Cannot review the code on Git as the repo is private."
1,"1) Writeup is overall good but more screenshot of what the issue was and how it was resolved will be more clear
2) More comments can be added to assignment_team_member_spec.rb"
1,"I couldn't find comments in the authors' work. They have added a few comments in spec files. But changes in files ""app/controllers/teams_users_controller.rb"" and ""app/controllers/student_task_controller.rb"" should have been explained with comments so that anyone who sees the code and doesn't have the documentation of this project is able to understand what is done in that part. Authors can write comments based on their documentation itself. It will make the code more readable and understandable."
1,"The writeup is very detailed and explains all the subproblems inside the problem and their reproduction, causes along with all the changes in code and all the test cases which are written. Just one missing thing is that link to PR is not in the documentation. I suggest the team to add the link to PR to the documentation. (Although we can see the PR link from submission details.)"
1,Very little comments have been added. Please add multi-line comments before the beginning of a method describing what the method does and add single line comments inside the method wherever required.
1,"The write-up is well written. It does cover the problem statement, solutions and the reason for those solutions. However I believe the write-up can be improved further by reorganizing the content. For instance, your write-up includes files modified, list of changes, methodology under the same heading ""Solutions"". These all can be divided into sub-headings to make the write-up more readable. Have a look at one of the reference wiki write-ups given by the professor to improve your wiki content organization."
1,Although function and variable names are intuitive. Adding comments would help understand what is happening in the function.
1,"There are no comments in the code. There are comments for test cases, though. Since the code doesn't have a lot of lines, I didn't have difficulty following through the code, despite missing comments."
1,"1) Most of the code changes are related to tests (RSpec). However, they seem to be all of decent length.
2) Don't need to extract them into separate methods.
3) Some more comments would make the life of a reader much easier.
4) Code perfectly follows the ruby style guide
5) Code is not smelly. The tests have also been written well."
1,"> Comments have not been provided for all the methods however there are few inline comments here and there.
> Please add comments to every method giving a gist of what you are achieving."
1,Most of the function  name and variable name are reasonable just found one case where constant name can be improved. Added proper comment for the same in PR as well suggesting required change.
1,As there's no test plan in the wiki doc so really difficult to come to the conclusion that if those case has been converted to automated tests. But there are test cases in the commit for few bugs but not for all the bugs but i understand why it's not there and doesn't look like team's fault. As i explained above that why it is not in the code as it would require to write all the test cases first for import topics and then make changes for these bugs.
1,"It seems they have implemented the Rspec tests but haven't included the same in the test plan on the wiki page. As mentioned in Piazza's post by the professor, explaining the work done on the wiki page is much helpful."
1,More comments will be better and more helpful.
1,I wasn't able to find the comments on the method. Moreover comments can also be included in conditions like 'if !exist_assignment and !exist_directory' in create method
1,"Write up is good. The writeup explains about the problem statement, also explains the code on create using snapshot. The UI testing part is also self explanatory.  The thing missing would be Flow chart or process if create rather than using multiple screenshot. The wiki can also include References of original expertiza project"
1,I can see a lot of changes being made and would suggest that the reviewer would gain more insights if you would have mentioned the purpose of adding or altering the code in the form of comments at places where the code has been altered. Would suggest that you do the same in the next round of submission.
1,"The document is systematic to some extent however the test plan is not mentioned anywhere inside it.
I would suggest that you jot down the test plan including all the corner and test cases for which the tests have been run correctly. This would not only save the reviewer's time to test already tested edge cases, but also allow him/her to suggest or test some new corner cases."
1,"The project is documented systematically, however, I would suggest that you first mention the problem statement, then write down the  bugs involved in the current implementation and finally list down the changes made to the project and how these changes are implemented.
You can also include the new code and highlight the newly added code either by green color or make it bold so that the reviewer does not have to switch back to github just for checking the altered code. This would not only save time while reviewing but also make the purpose of the document to be whole!"
1,The variable names look good. One minor suggestion for the variable exist_assignment and exist_directory is to call them directory_exists and assignment_exists as this reads more like the english language. The if statement becomes (if !assignment_exists) which is almost like a complete English sentence.
1,There is one test in the test plan. It tests for creating assignment with an existing name. This may be tested by previously existing test (although I couldn't see it) but there should be a test for testing if a default name for assignment can complete successfully.
1,The assignment create function is very large. It could be broken down into smaller modular parts. They could have truncated the lines after 80 column length as per the style guide
1,The functions are pretty self explanatory. They could have added some comments for the javascript function.
1,"A lot of variables have been named in shorthand. Like cur_due should be current_due, ques_array should be questions_array."
1,They have included much of business logic in assignments_controller out of which some code could be shifted in model and also for the successful save message return in create method they have used it two times which could be DRY out further by adding simple flag.
1,They didn't add test cases during 2nd round. But they already have test case in the first round.
1,"Not exactly, because I think there is some bug. As I mentioned above, their functionality did not work on a random assignment that I selected."
1,"The operation did not work when I tried to delete the topics under the assignment ""Madeup problem."" I clicked on the delete button, the page refreshed, but the topics were still there. Though the operations work just fine on the assignment that they recommended. I deleted a few topics and all topics too. I also created my own topic and deleted it. The select all option also works well."
1,"It seems like the authors have catered to most of the requirements and done a good job in added the functionality to the views and controllers. However my only concern is that this approach seems to not work in certain cases. One such case has been pointed above. It seems like the authors have tried that case out as well, but they were not able to fix the issue. ""6. Then you shall see they are deleted. (For some reason we don't know, it failed when editing a staggered deadline assignment.)"". I believe, if they can do some more testing to figure this issue out, the code could be deployed, to add a useful functionality."
1,"I still face the same problem that I faced during the first round of reviews - ""When I try to delete the topics, sometimes they are actually not getting deleted (if I select 1-2 topics), but flash message is displayed as per expectation. Try (Assignment ""Madeup problem"" -> select topics 1.2.1 and 1.3 and ""Delete selected topics""). These records are retained even after the page reloads. Probably this is the case for completed assignments, in which case restrict the action or add appropriate flash messages.""
Additionally, I followed the test plan for UI that the authors have mentioned on the wiki - ""2. Choose an Assignment ( Final project (and design doc) is recommended). Then click ""Edit"" below Actions."" . Please note that there are two such assignments loaded from the scrubbed db and the first one does not even have a ""topics"" tab, however the second one did. I would suggest that when you suggest to use example data, please make sure that the directions for the reviewers are clear."
1,"There was just one commit to add comments to the code. While I understand that the team has already finished majority of their work for the first round, it would have been nice if they could have taken up issues around this module and fixed it for the second round (one issue was mentioned by me in the previous review)."
1,"Yes, I think the code is ready to be deployed into production but I do have a minor suggestion. When a topic is being deleted from an assignment, the the topic number still remains the same. This is not indicative of its actual topic number post deletion!"
1,"This code is not yet ready to be deployed onto production.
The biggest concern is that the functionality seems to be working selectively and the problem needs to be identified and fixed.
 
Also, a few more before-after conditions need to be taken into consideration. eg. One must not be allowed to edit the topics once the final deadline has passed and submissions for the topics have already been made."
1,"The write up is well written. The problem, solution and test is explained well.
It also honestly states that there is a glitch in the implementation. However, they have not identified and mentioned the problem due to which it doesnt seem to work."
1,"The functionality is working selectively.
On testing it for various assignments, it behaved differently each time.
eg 1. It worked totally fine for assignment 'Final project (and design document)'.
eg 2. For the assignment 'madeup problem', none of the selected topics got deleted. 
eg 3. For the assignment 'writing assignment 1a', from the 3 topics selected, 2 topics got deleted and 1 did not.
 
At first, I thought it is not allowing to delete topics from an assignment whose deadline has passed. But that is not the case. All above assignments have a past due date."
1,"Because you have changed the views on page, I think you should test the element on the front end."
1,"The features work correctly as intended under manually test.
I tested the situation that clicking on the ""Delete Selected Topics"" button with no topic is selected. No topic is deleted and the page is refreshed. But I think it would be better if there is a error message saying that no topic is selected under this situation."
1,"There code is readable. There are some methods that each perform a single task. And there isn't any long method.
They can add some comments to the method ""deleteTopics"" in file ""_add_topics.html.erb"". Because it is a little hard to understand how this method perform its task."
1,"They included the RSpec test section in their writeup. But they didn't write how to testing from UI. It would be better if they add a section that describe how to perform test from UI and test some edge cases like what will happen if click on the ""delete selected topics"" with no topic is selected."
1,"Only one variable called ""ient"" that I encountered in the javascript function was confusing. I didn't understand what it indicated. The other function and variable names like checkboxes, deleteTopics() were very intuitive and good."
1,"Yes, the test plan is very specific and properly explains the test case. They have built the test case to delete all selected topics. I think they should also take into consideration the Delete All scenario as it flashes a confirmation message too and they can build a test case around it too."
1,"When I try to delete the topics, sometimes they are actually not getting deleted (if I select 1-2 topics), but flash message is displayed as per expectation. Try (Assignment ""Madeup problem"" -> select topics 1.2.1 and 1.3 and ""Delete selected topics""). These records are retained even after the page reloads. Probably this is the case for completed assignments, in which case restrict the action or add appropriate flash messages."
1,The current description is short and crisp. Details on what each function is aimed at doing can be more detailed.
1,"The authors can probably check whether the selected topics actually get deleted from the database. There is test function checks whether the flash message is displayed correctly, more could be included."
1,"Yes, there are comments describing each method and they tell us what the method does. However, the javascript methods haven't been commented"
1,"The code is modular and isn't too long. Separate functions have been created wherever needed. However, a little explanation about why something deserves a separate function would be helpful"
1,"the topic does not go away when clicking on delete selected topics
Madeup problem > Topics > check and delete selected topics
This does not work, while the individual deletion still works"
1,Steps and files changed are  mentioned well. Only missing aspect is impact of changes
1,"Unfortunately, no explanation has been given on how to navigate to a particular page. I tried searching for the page based on the files changed but could not find it. It would be great if you could add the navigation part to your wiki page."
1,"Most of names of variables, methods and class names look fine to me.
In app/views/sign_up_sheet/_table_line.html.erb, the name of the table is name=""query_mySelectBox"". This looks like a ruby and java naming style.
My suggestion to change it to ""query_my_select_box"""
1,"Although there's no test plan in writeup, they did test for the functionality of new feature.
I have a small suggestion that perhaps you can test more cases for this new feature, such as the scenario that what if user doesn't select any topics and click ""delete"" button."
1,"Code is written in rspec, can be automatically run when created a pull request.
But is there anyway you can test the view for checkbox? and the button ""“Select all""?"
1,Namings for function and variables are good. Code is not too long. But more comments are needed because I could not tell a loop or a new line is for what.
1,No comments in code. But there is some comments on wiki for the adding codes.
1,"Naming is good, class name is good.
Test coverage decreased.
It is better if you could commit your messages more details."
1,"There is a section ""Test"", better change it to Test Plan. 
Test Plan should have more documentation, and how to run it."
1,"Code changes are displayed on wiki clearly, there are some comments. 
If you could provide some logic analyze the logic in your code, will be more persuasive. Also I recommend you place more screenshots for the manually testing. (idk how to go to the page you edited)"
1,"I recommend you place more screenshots for the manually testing, because I hardly can find the page for deleting topics on instructor end."
1,The code can be read but a few more comments would be useful
1,yes the code is written in clean and readable way. The naming convention is also good. Only thing is set_receipe function in books controller. It doesn't match the project functionalities.
1,test cases are written for student controller and model. But the test cases are not proper. Could have written more test cases to ensure the application works properly.
1,"Bookmark can belong to books 
All Has one and has many validations missing."
1,Some of the methods are too long and too much use of if-else. Methods could be further modularized.
1,"No extra credit features added
 
Some naming has not been done well. eg. tablename bookreqs and bookrequests
Code looks clean and small functions have been defined.
One identifiable malpractice is that lot of controllers have been used. Just writing a function in the books controller would have sufficed for many cases."
1,libraries should belong to universities
1,"The entire book module is failing because of which I am unable to test the majority of features. However, the authors have fixed a few issues from the first submission. There are a few logical flaws in the system like library can be created  for university which does not exist. Validation is not taken care of as of now."
1,"The system takes care of one-to-one relationship using belong-to. I cannot see any cases of one-to-n or many-to-many relationships. Also, the Db design would have been better if there would have been foreign keys and references. Also,there is no mapping table for mapping these relationships."
1,"1) What will happen if the admin tries to delete book that is issued?
As I cannot find the entrance to see all books, I cannot deleted books as an admin, so I don't know the result.
 
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book? 
As a student, when I click ""show all book"", the page went wrong. So I cannot check out books or hold books, so I don't know the result.
 
3) Can Admin account be deleted?
No, admin account cannot be deleted.
 
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
As a student, when I click ""show all book"", the page went wrong. So I cannot check out books or hold books.
So I cannot created a student who has multiple pending book request, so I don't know the result."
1,"In most controller, one method only handle one task.
There is few bad naming. As there are bookreqs and bookrequests at the same time, that seems confused.
And other coding quality seems good."
1,"Yes, they handle associations well. A book belongs to library and a library has many books. And a university has many libraries. 
And it would be better that a library has many users(students or librarians), and a user belongs to a library."
1,"The code is clean. But some functions such as the one deals with request, it handles the whole progress. It would be better that it is divided to some small functionsl"
1,"In the modules implemented so far, good coding practices are followed. However, most of the code is generated by scaffold. Please get started with custom methods in addition to changes to the default scaffold methods."
1,"For all the modules built so far, the interface is easy to understand. However for admin -> profile is leading to users. It should probably be directed to show admin's profile. Readme file is very informative, includes screenshots."
1,"User interface is neat and clean but can be little more engaging. for e.g. Fine per day doesn't have any currency. It could be changed to 3$ or something, like currency can be added along with the unit. I couldn't not see all the books, it says you don't have enough permission."
1,"Comments can be included for the user to understand the code while testing
Also, business logic in the views can be reduced and shifted to the controller as in MVC format."
1,"There're many long method in book controller, such as borrow method.
My suggestion is that we can split it into many small methods to integrate a big method."
1,"1) The DB isn't designed in the right way. I would suggest separate models for each type of user.
2) According to the design, book as a 1-to-n relationship with reservation. 'has_many :reservations' is missing in book.rb."
1,Changes were committed in round 2 but I would suggest pushing commits more frequently.
1,"-""Published"" field for books does not mention the format for date, just mentions that it cannot be blank. Image needs to be uploaded twice, for some reason, in case some of the other fields are also changed. -Admin -> Profile is still leading to users, probably this should lead to the admin's profile. -Creating a new user (by admin as well as by sign up) also still logs admin out and logs into the new user , this was also mentioned in the previous review (although this has now been included in the readme )."
1,"The UI could be better. Some o the actions are missing like 'requesting a book', checking the list of libraries for student. Instead of showing 'unauthorized' message it might be better to not show button in the first place."
1,"The team has tested the admin model but there are a few suggestions from my side.
-The admin should not be destroyed in the first place and hence no need to test whether admin has been deleted correctly. Rather you can check whether someone is requesting to delete an entry from the table and that entry turns out to be an admin. In that case do not allow for the deletion of the entry. Maybe this vulnerability caused the admin to be deleted and hence I could not test the admin features at all!
-Secondly whenever someone wants to edit or update some profile details in the admin section, make sure that the person requesting for the same is the admin himself and no one else."
1,"-The User Interface is a basic template which is fine however the flow and navigation was not explained in the README file.
-I felt that the elements could have been well organized with the blue links on the left of the page, navigation bar elements pulled to the left and sign out tab to the top right. Also the view books and libraries would have been better if the data was maintained in a tabular form.
-Bookmarks and over dues could be formatted in proper html tables which would make the data much more organized.
-Moreover, instead of having two different signups, you can just have a form field like a drop down mentioning the type of user and add an attribute called 'user_type' in the users database (assuming that you have made two separate databases for librarian and student).
-Also while signing in, you can provide the name of the user in the navigation bar pulled towards the right corner."
1,"(1) What will happen if the admin tries to delete a book that is issued?
Books view is not working (CRUD/checkout/bookmarking not possible)
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
Books view is not working (CRUD/checkout/bookmarking not possible)
(3) Can Admin account be deleted?
No, it cannot.
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
Reservations not accessible
The README.md should also cover how the system handles edge cases.
The README does not cover how the system handles edge cases."
1,"1) Delete student not working 
2) Approve librarian account by admin not done 
3) Librarian can access account without admin approval. [Change this to -> Librarian can access account only after being approved from admin]"
1,"Bookmark functionality is breaking.When the user tries to login with and after view books , in the show page when tried to bookmark the books the system fails.
The edit functionality. in edit profile option, the edit page should display the already existing values in the page and allow users to edit the values.
The function implemented can be modified to include editing through text-fields and populate existing values in these boxes
After destroying a particular student from admin page. the page is redrected to student home page with the student logged in and the functionalities of sstudent are displayed"
1,"The problem with sign in has been resolved. The sign up page earlier not working is now working fine. The use of gem correctly .
the view and show functionalities are added.
More functionalities can be added since the reservation system is an integral part of library, the checkin, checkout, hold functions can be added.
 back link in edit profile doesn'tfunction. the link_to function can be provided to redirect the page
The admin page functionalities can be modified for proper functioning.The admin page can be tested thorougly"
1,"only one relationship code written.
Browse into their model classes, no relationship syntax has been added.
When I tried to destroy a higher level object, the objects depend on it were not destroyed dependently.
ex. Universities should have many libraries. Libraries should have many book. Universities should have many students. Students should have a wishlist."
1,"Book to library relation is right and is many to one
The bookmarks have to be associated with users and books. One bookmark may have many bookmarks but each bookmark is associated with a student .
The bookmark can be seen as independent model with user and book as foreign key
The librarian has many to one relation with the libraries. This can be added"
1,"It's much better comparing with the first submission, using before action more often could simplify authentication yet be effective"
1,The code for functionality that is implemented is well written. But can be improved like creating two different function for performing two different logic
1,"Very few commits have been made by all of the teammates combined.
Code has not been consistently pushed to Github throughout the project duration. Only 8 commis in 3 days.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit.
2) Make more frequent commits."
1,"The UI for home page could not be viewed. Hence  couldn't be tested.The changes were pushed 8 times between Sept 28th to Oct 2nd hence yes the changes were pushed frequently. 
The unimplemented elements int he UI, could be removed to avoid confusions. For example, the search functionality in the book index page could be added after the functionality of search has been implemented
The user functionalities can be enhanced as follows
USER:
the manual migration to home index failed, so the sign up, log out functions could not be tested.
the use of device gem for sign up and authentication and maintenance of user functions can be extended to providing essential functionalities of diffferent user types:
1)Admin:
- create and view accounts of librarian and students.
-view books checked out
-view books overdue
2) librarian
- add , remove books from library
3)Student 
- request a book
-cancel a request"
1,no self tests are written. only auto generated controller tests. Better write tests before implementing code.
1,"Not much is developed yet, so no testing has been done.
Testing has not been implemented for any of the models or controllers yet.
Suggestion:
 Implement testing for any one model and one controller."
1,I am unable to sign up. It showing an error that the first and last name cannot be empty but there is no tab to enter the first and last name. I think you need to add the first name and last name text block in the index file.I unable to to view any functionality because i cannot login into the account. Also please add admin configuration in the readme file and any other specification that needs to be added.
1,"Readme does not exist.

Suggestions:

add a readme file"
1,"The readme.md file could be edited to describe the functionality of the application. The readme.md file could contain a short description about what the application does.And how to use it.
The UI for sign up shows 2 errors. this is because, two input fields , first name and last name are removed. In devise gem, the controller that's being redirected to by the sign up view page needs these attributes.This can be resolved by hiding the fields and giving default values. that way the user can sign up without providing first and last names.
Further readme.md file might be modified to provide credentials of admin and few users to ease testing
2 errors prohibited this user from being saved:

First name can't be blank
Last name can't be blank"
1,"The commit messages are not readable. Better write words stating what you have done in one commit.
README.md has nothing useful. Please give the admin username and password, the project's instruction or instruction to run your code."
1,"Not much code is written for the features. Not much good ruby and rails coding practices have been implemented, apart from the fact that proper scaffolds have been created.
 
Suggestions:
Add functionality to the system by adding features to it."
1,"Since the admin credentials are unknown, I couldn't login as admin. And since the sign up page cannot create a new user without first and last name, this is the feature in devise gem.
also going through the code I found that the edit is in the home page. and there are separate views called devise and user. Try to add the the functionalities of admin, librarian and student in the devise gem home page. that way we can save 3 more views and rendering would be done automatically by the device gem.
The log out function is in home page. Again I couldn't test since I'm not able to sign up.Id the route is directed to home page after signup, then the logout , function can be seen."
1,Code quality is dry as possible but most functionality is in controller which is opposite of functionality of thin controllrs and fat models.
1,They'd better add come comments in their code to make it more readable.
1,"Few of the edge cases pass and few do not.For example,There is no option for the admin to delete an existing student so ca't really see what happens.But,Admin can only be edited not deleted."
1,Book is not deleted in case is it checkout or on hold. But should be handled with proper error message. Student Delete option is not available for admin.
1,"Yes, the system does the tasks as they are supposed to be done. I was not able to find a way to test the Overdue books and student fines. Also, the extra credit task 1 seems to be implemented partially. When I tried to add a new book from the student account, it didn't allow me. But when I tried to edit the profile of one student from another student, I was able to do it."
1,"1) university should have a 1-to-n relationship with libraries, librarians and students.
2) student should have an n-to-1 relationship with university.
3) library should have a 1-to-n relationship with librarians and an n-to-1 relationship with university.
4) librarian should have an n-to-1 relationship with library and university."
1,"Though there are couple of relationships included,MAny relationships are missing.For example,Librarian has to belong to a library,which is not mentioned"
1,"Yes the team has committed changes on Github even in round 2. But I still feel that commits have not been used properly. For e.g. some commits have large number of line changes. (I saw about 17k line changes in one commit). Also, they have not used any branches in their git repo. Using different branches for different features might have been more helpful to get the commits done on regular basis."
1,"It would have been a better approach if branching had been used to develop different functionalities. Such as new barnches for admin, student, librarian etc. Every small change should have been committed rather than commiting big chunks of code."
1,"yes, they have considered the rails coding principals in implementation.
try to add more business logic to model than a controller."
1,"The interface of the working pages are intuitive and it is easy to use. Also, the redirect URL's are intuitive. However, since a couple of links were not operational like redirecting to the book search page or clicking the back button, implementing these functionalities is needed."
1,"The basic functionalities which were not working are as follows:
1. I could not Edit any of the libraries, not even the ones which were newly created. So it is not a dependency issue. 
2. I could not even delete the library. It gave me a 'not admin' popup (when I was signed as an admin). I triple checked from different browsers.
3. Librarian Show/Edit not working. Website crashes.
4. Admin cannot Create New Librarian/New Student. Throwing an error of field missing. The reason behind this I think is that the new librarian page in admin redirects to the scaffold generated new and not the devise generated sign up page for librarians/students. The devise generate page works just fine. These links should have been directed to that page.
5. Student Show/Edit links are not at all working.
6. Admin cannot logout.
7. Student cannot only edit email password (again, devise edit form).
8. Student View Books is not working (hence cannot test issue, hold, return).
9. Book search by date is not working (website crashes) for librarian and admin.
10. View Overdue link for librarian fails.
11. Cannot check whether the checked out link, student fine link, or hold request link are working since student can't even view books.
12. No logout option for the librarian.
Also one minor thing: In the admin page, the name of the libraries or universities in the ""view libraries"" and ""view librarians"" respectively, are not visible. The object internal ID is being displayed I think."
1,"The only model implemented is ""Books"" which does not have all attributes specified in the documentation like ""upload images.""  Hence no model is thoroughly tested as such. But I appreciate the fact that they have taken into consideration not creating books with the same ISBN."
1,"The interface has not been developed yet much. The URL gets you to the ""view books"" section directly without even asking to log in. It can be made much better by the 2nd evaluation round I'm sure. For example by first bringing up the log in page and then the Homepage/Books page."
1,All the information about books is displayed on the homepage without user log-in. The README file doesn't include admin account information so i could not find admin login credentials. I am unable to test any of the features of admin. Also the sign-up page did not specify user type. So the details of the librarian could not be checked as well.
1,"No functionalities added as of now except for Book CRUD. README.md is poorly maintained, should include screenshots of how the app structure flows."
1,"The project consists of the Book CRUD and the login functionality. The Book CRUD seems to have been generated by the scaffold command and hence complies with good Ruby coding practices. The login functionality is simple, but works. I would recommend using an authentication solution using ""devise"" as it will be full-proof. But the overall code is neatly indented and cleanly written."
1,It follows good coding practices to a great extent. Business logic is well separated from controllers. Just I feel that code from BorrowsController could have reduced in controller part and the applied business logic could have been shifted to corresponding model class and call model class methods by passing required params in controller.
1,"The team has tried to do testing of one model i.e. student model. But they have not tested it thoroughly. They have written just 2 test cases which I feel insufficient. Also, they have not tested any controller. Testing student model with student controller would have been a better choice. It is good that team has used the RSpec testing framework for the tests."
1,"The team used github very nicely. They used frequent commits even during round 2. But as I said in round 1 review, it would have been more helpful to them if the team had created multiple branches for multiple features. For e.g. they could have created different branches for bookmarks, hold_requests, email notifications etc. Also, some of the commit messages could have been more descriptive. ""Final debug"" this type of commit messages are bad choice. Messages should explain what does the change in the commit actually does. They should have mentioned which problem they were debugging."
1,"The committs have been made regulary on github. But it would have been better if the team had created multiple branches for multiple features. This would have made easier for them to track the progress of features. For e.g. they could have created different branches for admin functionalties, student functionalitie, book hold requests.checkout etc. Also, some of the commit messages could have been more descriptve. ""one version before submission"" this type of commit messages are bad choice. Messages should explain what does the change in the commit actually does."
1,Nice work is done on UI. It is easily navigable. Just some of the colors (like gray color in buttons background) need to be changed to make the content easily visible.
1,"Yes the team has followed some standard practices of ruby on rails. But some things I found to be new such as the admins_controller.rb was not there and instead of that there were multiple files in the controllers/admins folder. I think that is due to some gem used for authentication. Also, I feel that some more validations could have been added in the models."
1,"I failed to log in as an admin using the admin account given in Github. But an entry to signing up as a new admin works. I was able to to take actions like editing the admin's profile. But, it is better that the admin account is already preconfigured according to requirements of the project."
1,"The user interface is easy to understand and use. When you try to grab some information about books, libraries or users, you can easily sort them by different attributes, which is convenient.
But there is something needs to be improved. For example, every time I click ""show/edit"" from a booklist or student list, and back to the list, the ""show .. entries ""  in the top and ""previous .. next"" in the bottom repeated again and again on the page."
1,They have tested using the internally generated test filed using the scaffold command. I can see a few changes modifications made in that file as per their data. But they have not used RSpec as mentioned in the document.
1,1) when change url from https://ncsu-library-management.herokuapp.com/students/97/edit to https://ncsu-library-management.herokuapp.com/students/96/edit...it should show some notice about access restriciton
1,"The system works as per the requirements of the project. Great work!
However, the suggestion of validations on password field has not been set. Also, the feedback on redirection links has not been implemented.
 
Also, there are few functionalities which fails as follows -
 
- Number of hold requests for a book should be visible to every user
- Cover book image is not visible
- At a given time, N number of books can be assigned to a student based on educational level. However, in the project presented, the admin is able to change book limit for individual student which is not acceptable."
1,"Yes for most of case it works except below:
PG::ForeignKeyViolation: ERROR: update or delete on table ""students"" violates foreign key constraint ""fk_rails_4bcc9ba3a9"" on table ""holds"" DETAIL: Key (id)=(97) is still referenced from table ""holds""
Above error result when try to delete student and his entry is in hold table. So try to delete data from all the table where the student is associated"
1,"Boomark-Book should have an n-1 relationship. 
Although there isn't a university model, the library should belong to a university.
The librarian should have a one-to-one correspondence with the Library."
1,1) The code doesn't appear to be DRY. And the naming of methods should be better. (Camecase etc)
1,"(1) What will happen if the admin tries to delete a book that is issued?
It gets deleted from the all books table (which is incomplete) but not from the checked out books table.
(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?
The other students on the waiting list do no get the book. (nothing happens)
(3) Can Admin account be deleted?
No, it cannot.
(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?
No reservations are not deleted
The README.md should also cover how the system handles edge cases.
The README does not cover how the system handles edge cases."
1,"All 3 contributors have committed frequently throughout the duration developed the project in.
It could be better if the following suggestions are incorporated into the project.
Suggestions:
1) The commit messages should have a meaningful description of the added code/functionality in that commit."
1,"The UI is fairly easy to use & intuitive for easy navigation through the web app. Suggestions:
1. Add a back button on all pages to make navigation even better.
2. Some screenshots can be added to the readme to make it better."
1,"Good ruby coding practices have been followed.
 
Suggestions:
Better relations among classes (models) can be set up, such as:  library has many books
So if the library is deleted all is books are also deleted."
1,"The codebase doesn't appear DRY. Instead of creating separate controllers for different users, gems could have been used to enforce restrictions."
1,"1) What will happen if the admin tries to delete a book that is issued?

 The book was deleted even when it was issued, I think this operation should not have been possible if a book was already checked out.

(2) What will happen if a student is deleted who had books issued and there are other students waiting for the same book?

This case is not handled by the system.

 (3) Can Admin account be deleted?

No, the admin cannot be deleted.

(4) What will happen if admin tries to delete a student who has multiple pending book requests, will the reservations be deleted?

The student is deleted without the book count being updated! This should be raised as an notice and the student should not be deleted."
1,"The team has regularly committed to the GitHub. and have a whopping 156 commits. The Readme file is been well written. They have done a great job to keep the repo updated but I would like to suggest to them that please commit after completing one functionality, many of the commits I see have only 5-6 lines of addition."
1,"Yes, good coding practices have been followed. Most methods are self explanatory and have simple segregated logic."
1,"The same book can be added multiple times in his/her wish list.
Admin cannot see the list of students.
Student is able to sign up without selecting education level.
It would be a good idea to show students all the books and then keep a filter to see only those books that are in stock."
1,"Yes the team has been committing at almost regular intervals. They have also created some branches. But I feel rather than creating separate branches for views,yzhu48 etc, they should have created branches for different features implemented. (Like they have created branch named 'email'.) Similarly, they could have created different branches for admin functionalities, student functionalities, login etc."
1,Some of the file names were not as standard conventions that ruby follows. It was difficult to locate the code of some functionalities. For e.g. most of the admin controller functions are in a file admin/registrations_controller.rb
1,Admin Operations are on the top of the tab after admin sign in. Found it a little difficult to figure that out. I would suggest adding user operations links on the centre page.
1,"-The models can be organised more appropriately , inclusion of relations can be done only when it's necessary.
For example, the author model is redundant if we can update books model to include author as it's attribute.
-Further,the librarian model:



class Librarian < ApplicationRecord


 
has_one :email


 
has_one :name


 
has_one :password


 
has_one :library


 
end



these email, name, password and library can be added as fields to the model.
 
- the main relation between the library and the books. (eg: many books can be assigned to one library), should be included  along with the foreign key attribute.
-the relation between librarian and library should also be established."
1,"- Most of the code follows good ruby practices with methods performing single action
- Few controllers like book_request.rb has few cluttered methods. Most of the actions written in the controller methods can be moved to the individual models and directly called over controller as controllers must only handle functions linked to views
- Methods are named appropriately"
1,The UI for the homepage is clean and easy to understand. But the dashboard for a user is a bit confusing. Should better organize for all the user operation.
1,- The majority of the features handled. Could have handled exceptions like if a book ID doesn't exist show a default page instead of giving the error page.
1,A book can belong to a student and a librarian
1,1. book should have a 1-to-n relationship with book_history.2. book_history should have an n-to-1 relationship with library too.3. librarian should have an n-to-1 relationship with university.4. library should have a 1-to-n relationship with librarian and book_history.5. student should have a 1-to-n relationship with book_history.6. university should have a 1-to-n relationship with librarian too.
1,"yes, mapping is done on the book table itself. Could have used references"
1,"The code seems to be very well written for the most part. However, there is some scope for improvement in the sense that there is some additional logic in controllers that can be moved to the appropriate models."
1,"(1)The indentation of their code is 8 other than 2 !!!!
 (2) There are two different style for naming a method.
In models, student.rb has a method named self.remove_from_wish_list?
however, book_hold_tracker.rb has a method named self.handleSpecialCollectionRequest?
The traditional way for naming a method in ruby is the previous one. The latter one is the way Java used."
1,"Auto check out for hold requests missed a few edge cases, like when a student checks out something beyond his maximum issuance capacity, it should go to hold request and get checked out automatically."
1,"Works pretty much well.
Admin is to be a super user though, he can't approve hold requests on behalf of the librarian.
 
University field is free text, no mapping to existing universities."
1,"- There seems to be a glitch in book hold requests. The request gets sent correctly to the student however, the when the librarian tries to accept the request it says 'Max number of books limit reached!!!' which occurred even though I signed up as a new student and requested for the first book ever! I also thought at one place this is just a message displayed on the screen however, the transaction does not get reflected even in the 'books borrowing history' of the student.
- The student when signing up, is directly logged into the system without logging in. However, as per the requirement, there should have been an authentication happening just after signing up."
1,"-The relationship between librarian and library should be many to 1 however, I found an entry in the librarian table with library field as NIL which should not be allowed in the first case which makes the entry invalid.
- Rest of the mappings appear to look fine."
1,"it does add restriction towards removing books with borrow history, only if it's handled more elegant comparing with throwing an error page"
1,"The README.MD doesn't depicts any edge cases.
1. Admin wasn't able to delete the book that has been issued. The web page threw unknown error. You can provide some known/visible error to user for better understanding
2. If there's one book, two student was able checkout the same book. Relationship between books and student seems to have some issue. So deleting the student didn't matter
3. No admin cannot be deleted
4. Admin wasn't able to delete the student who has reservations.
5. Two students were able to hold same book even if the book count was 1. This happens if other student doesn't refresh the page when one students have already checkout the book
6. Admin was able to update book count even to 1 even if 2 books were already checked out
7. RBAC is not handled properly. Please use session only for particular user"
1,"Most of the issues are fixed but I found few issues
1. I created book in the morning but wasn't able to view image after 5-6 hours.
2. I was able to put numbers in language. Validation issue
3. When I create special collection, I was having a glitch for image getting attached
4. Search only work for one item i.e either title/category. If I put value on both it doesn't show me any book. Better disable options or use of dropdown so user won't be confused
5. Email works perfectly, nice :)
6. There was an error in page when admin approved the special book request and student immediately click on show. After refresh error was gone
7. Any student/librarian can access other students account by changing the url like https://secret-crag-83044.herokuapp.com/students/8/edit, https://secret-crag-83044.herokuapp.com/students/10/edit. RBAC is not implemented properly"
1,I can see the two members continuously been pushing the changes but I couldn't see commit from the third member. May be I am mistaken as they might have collaborated on one laptop
1,"Yes. The code is clean and readable. Some naming are not that proper. For example, booking history sometimes deal with something about checkout books."
1,"The changes have been pushed to the repository as and when required. However, I would recommend that the commit names be specific to the task done."
1,"-The user interface could be more attractive by making use of HTML and CSS.
- Certain features like Show Books, Show Libraries, Show students and show librarians could be rendered in a tabular form which would help enhance the user experience. Also links like Show, edit, delete could be replaced by bootstrap buttons which would beautify the UI even more.
- Also make use of navigation bars to display back, home and sign out links."
1,"-The admin is able to login, edit and logout correctly
- The code follows ""good ruby and rails"" practices only that I would recommend you guys to add comments wherever possible to make the code much more intuitive and comprehensible for new users. Not only that but also it would make it easier to make changes to a particular code block in case new functionalities need to be added"
1,"Maximum Borrow days can be set as negative while creating a library. Check can be put in place.
Issues like these can be tested in the Model and Controller test."
1,"The code is very well maintained. The MVC architecture is properly followed. The controller methods are clearly defined. Views and models a=does not interfere with the business logic. Thereby making the maintenance of the code easy. 
 
one thing to mention is that the commenting could be improved in the codes so as to clearly understand what each method is doing."
1,"Book page crashed after using student creating two books for same ISBN through url, there are some model constrain that needs to be done.."
1,"yes the changes were continuously pushed.
The readme file contains the list of things that needs to be implemented.
It could be modified to include the working functions.
The notes specified are clear and helps navigate through the app."
1,"I do not know what happened, but I couldn't find my first round review for this project now. So I just checked every function in this system again. And I find failing functionality as follow:
1. Admin could only edit user's name, email and password.
2. Sometimes, student couldn't checkout a book and it said something went wrong.
3. I created a book with a not-jpg/png file as image and it succeeded. 
And there are things not working/remaining:
1. Unit test a model and a controller
2. Dynamic Overdue Fine Calculation (only calculated when book returned) and displaying the list for admin/librarian
3. Sending email when book on hold is available for check out.
4. Sending email when special collection book on pending is approved by a librarian
5. Sign up with Google (Login in with google works! i.e. if a user has signed up normally, he'll be able to login with google in future)"
1,"There have been some validation like unique email, but no unit test for model and controller as they mentioned in the readme.md"
1,The cover image for the book should be checked whether it is picture.
1,"The student should only be able to check out book belongs to the library of his own school, this is not restricted. Also the email notification function when a book is returned is still not working. And the admin cannot see the book request. However, most of the functions work and easy to use."
1,"the addition of books , libraries should need some validation
this cannot be done before logging in.
the modules can be modified to add new important functionalities"
1,"the user interface is very friendly and the placement of attributes are goos. The sign up links could have been displayed in contrast.
the readme file has  details needed.
The admin should be able to edit his profile.
This can be done where all users are shown or as drop down as for other users."
1,"1) UI looks pretty decent and intuitive enough. 
2) All the major functionalities are put at the top for easy access directly to them which is a good thing.
3) ReadMe file could have a little more description of the usage."
1,"As of now, the student cannot add books. As mentioned in the readme file only CRUD operations can be tested. But the student can bookmark the books which is working correctly.
There is a google sign in feature included. But before using that we have to normally signup as a user and then we can sign in using the google. If this process is followed then the sign in is successful. But the whole point of sign in using Google/Facebook is to avoid the sign up process. So, may be in the future development this can be taken look at.
The team has tested controllers like bookmarks,libraries,sessions,students,home,books etc though models test has not been done according to my knowledge.
All the basic test case scenarios are covered.Everywhere, the creation/edit profile(edit for books)/update/deletion of accounts has been checked. But the other scenarios also can be covered like
-validation
-login/logout
-CRUD operations while logging in as a different user can be checked.
-Also, we can test the show and updation functionalities are working without logging in(updation should fail).
-Working of links & google sign in"
1,"- In places such as the search function, AND operators could have been used instead of using nested 'ifs'. Moreover, I think that the search function looks too complicated due those nested conditional statements. It would have even done the job if a SQL like query would have been written to check the incoming parameters against the required attribute field.
- I would suggest that you could have avoided nested if in many other places too and used the AND operator for the same."
1,"-Firstly, there is a glitch in view books. The books newly created by the admin should have been displayed in the 'view all books' section of each user but unfortunately, the view books is not able to do that. However, the books created by the librarian are all correctly displayed in the 'view all books' section after which a student can checkout the book. In other words, creation of a book by an admin isn't working correctly.
- The admin account can be deleted for this application however, the team members have mentioned in the readme that in order to prevent any malfunctions happening, DO NOT delete the admin account. Also a test hasn't been written for the same in order to avoid admin account deletion.
- There is also a problem in book request. There was a book having #copies=1. When multiple students requested for the same, the librarian got those requests on his dashboard. However, the librarian was able to approve both requests even though #copies would be 0 after the first approval. Since both requests were approved, the #copies value went to -1 in the database which is technically wrong. In other words, the librarian should have been notified that the request cannot be approved since the #copies has become 0 and the request must get pipe-lined."
1,"Sometimes, I am not able to create new books - ""We're sorry, but something went wrong."" is seen, instead of proper validation messages when I try to create a book. Sometimes I am able to create them.I would suggest that number of books available needs to be included somewhere for students to view."
1,"For the most part, the system handles the 1-to-1 and other relationships properly. If I delete a book which is already issued to some student, the entry disappears from the borrowing history and this change is reflected in the student's checked out book list. However, if I delete a user which has books issued, the code breaks since there is no relationship of books mentioned in user such as user has_many books."
1,"Most of the functionalities are working as expected but there are still some base errors.
 
Improvements:
> Admin login is working fine now.
> UI looks much better than round 1 and more intuitive. However, some of the things could have been improved like better error or warning messages or adding functionalities on page proportionate to the dimension of page. However, its still pretty good.
 
Errors:
> Creating a book thew me error.
> Still cant view any books as there doesn't seem to be any data and can't create a book either. Incase of data input error while creating a book, it should have shown validation error message instead of the whole app bugging out."
1,"The UI is pretty easy to use. I couldn't view the repository though, the link returned a 404. You should check that your repository isn't private."
1,Can not access github repo. I am willing to review this part again if the repo is accessible.
1,"Git repo seems to be private, I will check this review later to see if the repo has been made public. I am willing to review again, for this part."
1,Test cases have been written for the librarian controller and librarian model. I liked that the RSpec testing framework is used over rails' default one. But I feel that tests don't cover a lot of things. They have written just 5 cases for model and 3 cases for controllers. This is not sufficient to thoroughly test functionalities. A lot of functionalities are missed. For e.g. aa scenario in which librarian is created without the library should be tested and it should not create librarian object as library should be compulsory.
1,"1-to-n or n-to-n relationships have not been managed properly. They have added foreign keys to required fields but they have not mentioned ""belongs_to"" or ""has_one"" or ""has_many"" anywhere in the model files. This might lead to dangerous effects on data after some operations like delete which are included as a foreign key to other objects."
1,"The university can be made a new table, as the id can be used as FK for user, library tables.
The book table should use library id mapping instead of saving the library as string directly."
1,"Yes even in the round 2, the team has regularly used for code management and commits. But as I said earlier, they should have used branching. All of their work has been done on single branch. Using different branch for different functionalities might have been more helpful to them for debugging and version management."
1,"Yes the team has regularly used github and continuously committed code. But they have not used branching. They could have used different branches for different features such as admin functionalities, student functionalities, book hold/return etc."
1,See in additional comments
1,No README file has been submitted. The user interface is intuitive for the functionality that exists.
1,No login functionality available
1,"no root/welcome page after sign in.
 
had to hit and try urls in address bar to navigate in the app
 
tried destroying the university after creating a library under it, good that it prevented me from deleting, but the error page was not redirecting to a user friendly page.
 
books page showing library values as: ""#<Library:0x000055f5c37f9388>""
 
not able to access students or librarians page, hence not able to view books under my name or issue a new book etc
 
No search functionality of any sorts"
1,Easy to use but it only contains sign up and sign in for the user
1,Link not mentioned for the git.
1,Git hub link missing
1,git hub link not present. No
1,"1) Just trim the space in email string when you take as input because if i write ""  admin@lib.edu"" then it shows invalid credentials as compared to using ""admin@lib.edu"""
1,"1) Functionality of view all books to Student should be implemented and then provide option to checkout or add as bookmark.
2) Try to fix the issue of sign-up as librarian and it's functionality (http://enigmatic-badlands-15021.herokuapp.com/librarians/new )"
1,"working

Searching of book is working.
Student can login and log out and sign up
Student can edit own profile
On creation of new librarian a approval request getting generated 
librarian can edit own profile
special book is getting approved or dined but there is no workflow to create special book request
admin can view all books
admin can add librarian
admin can add new book


 
 
Not Working

I am not able to checkout book for student
No functionality to bookmark the book
No functionality to create hold request
No functionality to return checked out book
Unable to check overdue fine as i am  unable to checkout book
librarian not able to add new book
librarian not able to see books from all libraries
librarian not able to see book hold request
librarian not able to delete or edit existing book
librarian not able to views students with overdue fine
admin addition of new student form not designed well
admin not able to view checkout books"
1,"UI is improved a lot in this round. Basic functionalities such as Log In, Log Out, New Student account creation, see list of books, view books, search books, create librarian account etc are working fine. Some of the important features are still broken.  List of pieces which are still failing : - Book cover pic is not working. - Book delete not working. See screenshot here : https://snipboard.io/1ESPbV.jpg- New student creation has glitches. When I try to create a new student as an admin, I am redirected to an update page of some other student. See screen : https://snipboard.io/ypEdZh.jpg- Book borrow / check out not working. See screen : https://snipboard.io/13xAhH.jpg- Student Checkout History has glitches. - Librarian new account creation is not working. See screen : https://snipboard.io/giwBP1.jpg
- Librarian Approve piece not working. I don't see the list of librarians which are pending approvals. 
There are other minor issues as well. For instance,"
1,"(1) There is only one copy of a certain book in the library. 
What if someone want to borrow two copies of a same at the same time? A library should have many copies of a certain book. My suggestion is that you can add a count number attribute to the book model.
(2) A book's ISBN can be a string not a number!
(3) A book's image can not been seen after creation.
(4) We can create two books with same ISBN, not unique!
My suggestion is that we can modify the book model to be better to satisfy these conditions.
(5) Admin cannot see details like university of a student.
When login as a Admin, we cannot see other information of a student other than email and name.
 (6) Admin cannot create a new student.
When we login as a Admin, we click ""new student"" in the students page, we see the form for updating not creating.
(7) Library can be created without a university
If a library doesn't have a university, students from other university don't know whether they can borrow books from that university.
My suggestion is that we can modify the Library model to add more validations.
(8) Student can be created without a university or with a number as university name.
 When we sign up as a student, we can put a number into the university space, or even without a university keeping it blank. And when he/she borrows a book from the library not belongs to their university, the system will crash.
My suggestion is that when we sign up as a student, we can make the university attribute become a choice list in the fill-in form. So the user can only choose their university from some of preconfigured university to avoid bug. 
(9) A Librarian cannot add a book to his/her library
There's no entry for librarian to add a book
(10) A librarian cannot see the details of a book
When login as a librarian, click ""show"" on a book and then system will crash.
(11) Librarian cannot see borrowing history of a book in his/her library
There's no entry for borrowing history.
 (12) Student cannot see education level in their profile page.
(13) When a student edit his/her profile, he/she can edit their university, education level and overdue fines information.
A student can be able to edit their name, email and password only.
My suggestion is that we student edit profile, we should only show part of the form for updating.
 (14) Student and Admin cannot bookmark a book.
 There's no bookmark module
(15) Admin cannot edit the email of a student.
When login as Admin, click ""edit"" on a student, we cannot modify his/her email.
(16) Student cannot borrow a book.
Sign up a new student with email: test@ncsu.edu, name: test, password: 111111, university: NCSU
And then login as this student, click ""check out"" on a book, the system crash.
The strange point here is that Admin can still borrow books.
I believe that your library system implements borrowing function for students initially, however your model doesn't have dependent :destroy validation,
The most possible case is that after so many destroy operations, there are many attributes of books or other model become nil.
So in the view page, bugs come out and system crash.
Another possible case is there may be some bugs in borrow method. Because Admin can borrow successfully, but student cannot. Maybe the determination of role in borrow method has some bugs.
(17) Because a student cannot borrow a book, the functions below cannot test..
1: borrow at most N books according to their education level.
2: receive an email when successfully borrow a book.
3: cannot borrow a book if this book is not available or student reaches his/her max borrowing limit.
4: When returning a book, approve the next hold request on that book."
1,"Yes, there are improvements from the previous version. They fixed some issues in basic functionalities. But there are problems:-

Validation Error while saving/updating password field in student is not clear I am not able to set 3 character length password but 6 characters passwords are allowed. The message should indicate the minimum length of the password or it must be written in Readme file.
Admin is unable to create new student account.
Still after logging in with librarian account, ""Show"" action of the book throws error and I tried all the links to get to the index page of books from librarian account (e.g. All Books, Manage Books, Manage Library -> View Books in your Library). Also while creating/modifying book associated with the library the data is being stored properly but after each action error is thrown in UI.
They have implemented hold request for just single hold count on each book (i.e. only one student can make hold request). In that perspective librarian and admin could able to see the details of currently checked out and hold request students details but this has been not made clear in Readme file. Thus, system lacks full fledged hold request functionality. 
They have stated in Readme file that they had implemented Bookmark functionality but I am unable to find any links or pages in UI in student login for that. So bookmarks functionality is not completed. 
Admin unable to view checked out books list. When I try to click URL it throws error.
Student could edit his/her own overdue fine.
Whenever I click on return button while returning book it throws me standard error in UI although book gets actually returned successfully in backend."
1,"Overall all relationships are properly defined. There is some models which could be connected but are not like ""special collection requests"" could be connected with students and books model by defining ""has many"" and ""through"" relation."
1,"Once logged in as an admin, there was an Edit Profile with all the required fields for updating the profile details. It also had an option of canceling the account. I'd strongly suggest to remove this feature for the admin account as you should not be able to change admin details or delete the admin account."
1,"They handle with 1-to-n relationships properly. For example, library has many books and has many librarians. We can find this relationships in models and database. However , I haven't found any codes about n-to-n relationships in the work. It is totally OK to design that way. But the team has to make sure they can't create books before creating any libraries."
1,"All of the code including business logic is done in controllers and views only, no code written in Models.
All business logic should have been there in the Model module of the code."
1,"Few Observations:
1. Search is case sensitive for example: It works for apple but not Apple.
2.To create a book user has to fill some fields but in the language and published part we are not clear as to fill what and what the code is expected. It would be nice, if there is an indication of what to fill otherwise, it is  really difficult to create a book.
3.Admin cannot see the checked out books and books reserved.
4.Not able to create a librarian to check the edge cases of the application because only librarian can see the book reservations and can't try to delete the book to check the edge cases.And also, not able to test whether the librarian approval by admin is possible as management tab in the admin is not working.
5.Since there are no relationships defined, even though the libraries are deleted, the books are still available."
1,"Basic set of functionalities work. Some of the feedback given last time still needs to be considered.For example, when we try to edit the profile and then change our mind not to edit it and click on the back button, we get a message at the bottom saying that you are not authorized to do that. As an admin we can see the users only if we click on the account and there only the account info is displayed and when we click on the back link then only we can see the list of users which is kind of not flexible.But compared to last time the application has been improved drastically.Kudos to the team."
1,"In the book.rb, we can see tons of different languages stored inside the variable and the use of regular expressions that can be avoided.
comments can be included which will be easy for others to understand the coded.
Also, there are few controllers which are empty and no code is written in them.While Controllers like UsersController has code for bookmarks addition and removal which can be shifted to the books controllers making the functionality meaningful.
SOLID principles and DRY approach can be followed in the code. One method can have one task like if we are checking out a book, the user authentication check can be handled in a separate method."
1,"The DB holds all the required information, however, there are some issues with the design. The reference from a librarian or book to its library is stored as a string, not an integer for a foreign key. It is also problematic that a book appears to store all checkout times, return times, and users as a text field. There should be a separate record for book checkouts. Storing everything in a text field could be messy. Apart from this, the db design handled everything alright."
1,"This system seems not have any 1-to-n and n-to-n relationship in their model.
Browse into their model classes, no relationship syntax has been added.
When I tried to destroy a higher level object, the objects depend on it were not destroyed dependently.
ex. Universities should have many libraries. Libraries should have many book. Universities should have many students. Students should have a wishlist."
1,"There isn't any associations in models. 
It would be better if they add some associations in models.
For example, there should be a ""has_many :books"" in library.rb and a ""belongs_to :library"" in book.rb. And a library should have an admin, many librarian and many students."
1,"Couldn't see any kind of test cases for controllers/models except for auto generated code. Since, the functionality is not fully in, may be the test cases will be up for next review. But some of the useful test cases can be;
-Login functionality for different users.
-search functionality( which is not working yet)
-forgot password
-access of various resources depending upon the login type.
-sign in/Sign out/Sign up testing."
1,"- We can use seed for auto populating the data. Could see that,in file book.rb, all_valid _languages variable has been assigned more than 20 languages manually which is not needed.
-Some empty models and controllers can be seen.Code cleanup is always preferable. 
-It is better to have less business logic in the view as we are following MVC architecture and avoid the styling of code in the file show.html.erb.
-Good to follow SOLID principles and assign only single responsibility should be assigned to a particular class."
1,"Pros: Very clean UI
Cons: Can see un-intuitive headers on pages. Student shouldn't be able to delete books. Always asking for password update in edit student. Student should not be able to create new books. Student should not be able to create new library. Library deletion is a privileged functionality. Can delete books without logging in."
1,"The admin can log in and edit their profile information. Oddly, the edit page only allows the admin to have the role of a student or a librarian. The code mostly follows good Rails practices. One thing that could be improved is the code for validating books. All valid languages are stored in a giant array in the model book.rb. These should be stored in a database instead of being hardwired in so that they could be configured. Apart from that, the code seemed to follow best practices."
1,"I am not able to test edge cases as i am not able to use admin and librarian role. but in students yes, students edge cases like not able checkout more books that mentioned by university policy are working good. README.md file does not have that much of information about the project and edge cases. It could have been better with more details of navigation and edge cases."
1,"All relationships are well implemented. There's one concern though : A book has many borrowing records. I assume this is to implement history feature. However, it can be easily achieved by creating a one-to-one relation between borrowing_record and book. Meaning, a borrowing record could be a different table with a foreign key on book_id. There's no need to have many borrowing_records in a book. You can simply query borrowing records that match the book id to retrieve history of a particular book."
1,No navbar for some pages hence navigation is difficult.
1,"Some pages need back buttons, a navigation bar would be nice but isn't 100% necessary."
1,"yes, proper commit time to time was done for project"
1,"Yes, Team has done thorough testing of the of admin and librarian controller. Student were not able to search book and I was not able to checkout. It will be good if you can provide list of books in students controller and in front out that checkout button. I searched the book from librarian controller and searched with same name in student controller but it it didn't came up. This is a small thing, it can fixed. otherwise all the things were working well."
1,"Yes, everything is clearly defined where to move for next step and is easy to use. just putting some images and things will make it look better, but otherwise it is good to navigate"
1,There are not enough links to easily navigate through pages. A home and back bottons may help with this.
1,"Profile management is working well. That model and controller seems to be working fine.
Check out on normal books throws some error. undefined method `[]' for nil:NilClass. Please fix this.
Special collection book first goes to librarian for approval. That's nice. It would be great if the student user could also see the special item book he has requested.
Currently a student is able to modify the ISBN of a book. Please modify the code and apply access constraints."
1,"For the modules implemented so far, I believe that good practices have been the focus during implementation. However please review whether some functionalities can be clubbed up under a single name, eg: book_histories and book_requests.  Methods ""books_controller.rb"" are specially appreciated."
1,"Yes, the team has committed very frequently on Github even during round 2. They have used multiple branches for different purposes. But after round 1, they seem to have not used branches. Also, one commit is made on 14th October. Though it is done after the deadline, the overall use of Github is good."
1,Book gets deleted even when it is checked out. All the objects related to that book about checkout and hold requests get deleted automatically. The same thing happens for the student. All other edge cases seem to be work fine. I tested corner cases for hold requests and special collecton books too. They work fine.
1,The team has used RSpec testing framework to test the university model and controller. It is good that they have preferred RSpec over ruby default test framework. But the test cases for the model are not designed properly. only 2 tests have been written. More efforts should have been given to tests for the model too.
1,Source code link is broken hence cannot verify this.
1,Code Quality is almost good but controllers are fat and models are thin opposite of what we are advised.
1,"In the 1st round of review, none of the functionalities could be tested as nothing except student login was working (not even student sign up).
Now, however, most of the functionalities are working fine. I observed the following inconsistencies:
1. There are hold requests for book even when the book count is > 0 and the book is not a special collection book.
2. No message display on book
3. Book count does not increase after book is returned by the student 
4. I was able to edit student's university and education level which should not be allowed according to project description 
5. Admin isn't given the ability to approve special collection requests.
6. Admin isn't able to do what a student can (like he isn't able to checkout books)
7. A book can be edited and published date can be set to a future date, validation is missing
8. Librarian is able to edit library attributes without admin approval
9. There are different books with same ISBN"
1,"First I got confused by the model names Borrow and History, which of them refers to the borrow histories? These can cause ambiguity.
In the controller of Borrow, I saw `checkout.each do |bo|`, where I quite wonder why they use ""bo"" to map, does it stand for borrow, or book? The thing is that, if this code block is long enough, the implicit ""bo"" will definitely cause confusion.
Besides, they appear that they don't like to use ""word_word"" format of their method names, while the names of other methods that are automatically generated remains the original ones. For instance, in the controller of Borrow, both ""has_book_and_student?"" and ""holdrequest"" appear to be the name of methods, which are not accordance to an integrated discipline.
It looks like that the team members did not form an integrated habits on how to properly name their models, methods and variables manually."
1,"They have implemented basic functionalities very well.
Just the minor navigation issue is still there whenever I click on Sign Up button on home page it takes me to page to select user role in which I need to sign up, in that page there should be one ""Back"" navigation link to get to the home page for two reasons:-

Firstly, for smooth navigation if user change the mind in middle then Back button should be there in UI to take back to home page.
Secondly, as they have not swapped the positions of ""Login"" and ""Sign Up"" button on home page, by default when user enters login information and hit ""enter"" button, it triggers ""Sign Up"" button instead of ""Login"" and takes user to page where it is required to select user role for sign up and thus there should be back button on that page as user did not intend to sign up

Also, the notice messages are coming twice at some places like when I update librarian through admin login it appears twice."
1,"Overall relationships among entities are well defined and resultant DB design is pretty good.
Just one note that they could have added has_many ""students"" relationship in ""history"" as history table consists of many student ids who checked the book. To avoid automatic deletion of records from ""history"" table consisting of the student id for which particular student is deleted, they could have set dependent option as ""delete"" instead of by default destroy."
1,The admin student and librarian table can be merged into one table. A librarian belongs to library and is deleted once a library is deleted. But the librarian should not be deleted once a library is destroyed. He/She should be able to change his library.
1,"The naming of files is very clear and user can understand what is it meant for and code is readable. At some areas, for example, in bookmark controller, we need to handle things that are related to bookmark but we are also verifying whether the user is a student or not, which can be checked in the relevant controller or something like that.Can find this checks in some other areas too. So, since we need to follow DRY,these type of functionalities can be reused if once written somewhere.
We can see the multiple checks for not authorised to perform a particular action in the code. If the user is not authorised may be he should not be accessing such kind of functionalities. For example, if the user is not logged in, then he should not be able to edit the books/libraries/universities and that link can be hidden and thereby the check can be avoided multiple times."
1,"Most of part is good, but part like borrow which contains many functions have many verifications may contains many repeat parts. It would be a better choice to write same verification in one method, also seems much work are done by someone individually and there isn't much definition for code."
1,"1 Yes, Methods are concise and implement only in one functionality.
2 No
3 Access Priviledges has many nested calls, which can be reduced by appropriate session controller design"
1,"Reading the code takes some effort, more comments would be helpful"
1,"Yes its easy to follow. Just one minor point in the login page, the location of sign up and sign in button needs to be reversed or handled in code so that by default user hits ""enter"" in keyboard after entering credentials they gets logged in and not redirect to sign up page. Also there needs to be navigation button on sign up page to go back to home page if we don't want to proceed with sing up."
1,"Suggestion:
Team has added ""Test plan section"" properly and with details. This was completely missing in the first round review. Really appreciable work done by the team on this part. 
I would suggest if the team could add the exact files going to be affected for test case modification, it would be more elaborative. I would suggest to add them as well in the final document."
1,They have visualization which are some tables that screenshot from somewhere. The quality of the picture is not good which is not easy to read the context of the table. They should create the table by excel or word will help fix this problem.
1,"The team has made good use of visualizations. Would recommend using a visualization for DB design section as even with the example, it is unclear what the writers are trying to explain. The use case diagram looks good. One suggestion is to have this for other mentioned roles too."
1,"Scope of Improvement:
There is definitely some improvement after the first round review as I could see some screenshots added. But still, the team could have just improved it by adding some diagrams and flows.
I would suggest the team could add some UML diagrams like ""Use-Case"" or ""Sequence"" which will help the reader to understand the feature and proposed changes effectively and quickly."
1,They did add two screenshots of how the expected output is going to look like but i don't think that showcases all the objectives they are supposed to achieve. They can definitely add more visualizations.
1,"From what I can understand, the team has done good work on the design. It looks good. However, one suggestion is to explain it better in the DB design section as it was not very clear for me as a reviewer. The writers should know that the reviewers lack context in some cases. The writers should provide the context first."
1,"The design looks good. However, some changes can be made to make it better. First, the document should have an introduction to expertiza. This will help a new reviewer unfamiliar with expertiza to understand the document better. Secondly, the problem statement and ""what this project will add"" section seem redundant. They both have same information. I would suggest that it can be removed."
1,Only thing lagging in this wiki page is a flow diagram. Since this is a new feature I don't expect any screenshots of already existing problems and so on but they can give a basic flow diagram of their approach and a rough diagram of what the feature would look like when it is completely implemented.
1,"Scope of Improvement:
I couldn't find any diagram or flow in the document. Though the description is good and understandable, it would be better if you could add some flows which will provide better understanding to the reader."
1,The implementation seems fine for the required task but a little more technical can help in understanding it overall.
1,"Scope of Improvement:
I do not much agree with the concept of ""public"" and ""private"" review. I believe providing this option to the user will only restrict the scope towards the public review. There me some review which are private, but instructors will not be able to share them. I think the instructors should be given the full authority to share a review (At the end, they better know what to share or not). This is something the team could discuss with the mentor or professor."
1,"The team has listed the files they plan to change. 
I feel the changes look good. But more information could have made things clear as to what needs to be done in what model and controller
Even they could add they database schema plan."
1,Looks amazing with good formatting. Well done team. Add more to this section as you find changes required during implementation as the section is a little short.
1,"All the current design , its flaws and their design to rectify this issue. All the functionalities required was mentioned. The solution was not that detailed to the point of mentioning function names or classes to be included. They just wrote their solution and the files that may be affected by their implementation. Nothing regarding the classes or methods to be implemented was mentioned. They should expand more on what they intend to do."
1,"Please include visual aids like use case diagrams, application flow, class diagrams, etc."
1,"Apart from the good work, the team missed adding the Test plan and usage of diagrams. Since you are making changes in the model, you should have a test plan in place to make sure nothing breaks. There may be testcases in place already and you might just have to add onto them."
1,"The booking functionality does not work. so we dont know when a customer is booked in a tour. so corner cases related to booking not handled.
admin account can be deleted.
Tour is not allowe an end date before start date.
admin can delete customer bookmarked tours"
1,"Couldn't understand how they have handled this but there is 1 to 1 relationshi for booking and waitlist and no relation for tour and waitlist. Couldn't book the tour, thus donthave conclusive evidence"
1,The model handles those relationships.
1,"Yes, they use 7 models and the relationship between is pretty clear. These 7 models are all reasonable, user, tour, review, booking, bookmark and waitlist. use -tour, user-review, tour-booking, tour-bookmark are all 1-to-n. Tour- destination, tour-booking, tour-bookmark, tour-review are 1-to-n. Booking-waitlist is 1-to-1."
1,"Team has worked consistently. However, the number of commits by each member tells us different story. It's 19 vs 3 vs 51 commits to ""Vijayaganesh"""
1,"Before the first round, the team kept working. In round2, they used one day to fix several bugs and added some functions. I think the team is great enough to fix all the problems in one day and it's more efficient to work with communication."
1,One person seemed to do more work than the other and all the work seemed to happen on Friday.
1,"The code structure does follow ""good Ruby and Rails coding practices"""
1,"Going through the code in the Github I could see there was code and logics implemented in a nice flow all models and controllers, but apparently I was unable to open the app.
It is showing me something like ""the page you were looking for doesn't exist"" may be apparently some trouble with the deployment."
1,I don't have access to the github account.
1,May want to make a more thorough test plan instead of providing blanks to be filled after you start working. Will you have integration tests in addition to Rspec tests and live UI tests?
1,"Part of the write up in the Design Strategy section is a little confusing. All of the indented lines use a blue colored in circle as their bullet point, however I think it would be beneficial to switch it every other indent so you can easily tell which line you're reading."
1,"The design seems sound and is proposing good things, like moving code from the Topics tab to its own partial.  I'm not sure I agree with the assertion that as little JS as possible should be used because this is a RoR project; the requirements should drive the implementation choices."
1,"The wiki is very informative with the use of diagrams. The team has leveraged the diagrams from the project proposals to a large extent. The entity diagram's objective seemed like they wanted to show the database relationships, which could have very well been established without the column names of the tables. The presence of the column names makes the diagram seem overly complex and has a lot of unnecessary information which do not help the reader."
1,"Yes. I was able to understand their proposed changes. They mentioned everything with proper sections.
They have used easy language which makes stuff clear to understand.
Just issue I felt was it was way too big. The size of documentation if possible should have reduced."
1,"The design is well written and seems to have all of the required details.  The screen captures of the proposed changes are very helpful, especially the highlighting of the new widgets.  The document provides a lot of detail, possibly more than is necessary.  The entity relationship diagram is a bit large and has a lot of information in it that isn't relevant to this project; the contrast between the black and blue is a bit subtle.  The diagram could be left out altogether, I think, without losing any relevant information.  There are some grammatical errors in the writing, for instance ""By adding new such table we create many-to-many relationship between sign_up_topics and questionnaires tables..."" should be ""By adding this new table, we create a many-to-many relationship between the sign_up_topics and questionnaires tables...""  In any case, the document exceeded my expectations.  Nice job!"
1,"Tests plan has not been completely implemented at this point since the coding is not complete. The author mentions they plan on doing automated tests on the controllers that are affected.
 The author also mentions they will be performing manual testing of the UI where in they will check the features that have been proposed. They could maybe attach a screencast video showing the smooth working of the new bidding strategy. Also screenshots could help."
1,"The team makes great use of visuals by providing screenshots of the current views in Expertiza and how the view should appear after their changes are complete.  The placement of elements on the page appear very clean and are easy to read.  Also, the team included a diagram that shows how the models, controllers, and views are connected. 
The only criticism to mention is that the graphics are a little large for the page.  As a suggestion, the team should consider trimming (cropping) the images so they can easily be seen by the reader without the need to horizontally scroll.  Also, it would be nice to see highlights of the areas being changed."
1,"Their wiki does include a ""Test Plan"" section, in which they explain how they are going to improve the existing tests and add new ones. However, they don't list which specific files should be modified or added. I suggest they list the relevant testing files they plan to modify and/or add for each change they plan to make."
1,"Yes, the proposed design is the simplest way to implement required feature. As I stated above, I'm unable to determine whether this design was proposed by the previous team or by the current team, but it does appear is the simplest solution to record the grading history by creating new grading_history table in the DB with the following elements: instructor_id, assignment_id, grade_type, student_id, grade, comment, and timestamp. Assuming that there is no such or similar table record in the DB (I have not really looked), this would be the simplest and most adequate solution for the problem. It would not be the simplest solution if there was already such table existing in the DB record (or similar table) and creating additional table with similar fields would introduce inconsistency in the DB management, which is incorrect solution.
Hence, assuming that there are no such tables or similar tables in the DB, this is correct solution and in fact is the simplest solution. Please improve the document stating that there is no such similar table as grading_history exists in the DB."
1,There could be more UML diagrams like Use Case and Class diagrams.
1,"They have a great diagram that helps to explain their project. My only complaint is that their screenshots (in the ""Implementation"" section) have not been scaled and are way too big for the document (I have to scroll a lot in order to view the images). I suggest that they use an image resizer to shrink the images and then re-upload and re-insert them."
1,"The design iplements the same strategy used in the bidding of assignments. It seems less complex and the best strategy to follow. The author could maybe discuss another implementation of bidding and compare it with the one implemented in the assignment bidding but I think this is the best approach since the problem statement itself asks to implement the same strategy.
I liked how the author explains with the line ""The Delegation pattern will help us reduce the coupling of methods to their original class as we have components that seem to behave identically, but we realize that this situation can change in the future."" since they plans on reusing the same code as in assignment bidding."
1,"Design document is in great shape. Explanations are added at appropriate places and the document explains exactly what the team is trying to do. At the same time, few of the things mentioned in First phase could have been implemented. 
One suggestion would be inclusion of a section that tells us how differently the team is implementing the algorithm. The team has tried to explain some here ""Some discrepancies need additional attention."", it would be great if the team explains how exactly are they planning to implement these discrepancies
This section still needs some work to explain what the team is doing for better understanding. This section is directly copied from the Fall 2018 project, changing/adding few explanation would really help"
1,"The proposed design strategy is very well defined. It is sound and follows all the appropriate design principles. I appreciate how the author implements the usage of delegation strategy to show the proposed solution design.
The author very elaborately explains the problem statement and gives a clear understanding about the TTC principle for bidding instead of first come first serve principle which was in place earler. Some very good examples have been used to explain.
It would be great if a section with proposed code changes is also included where the author shows which parts of the code they wish to address and how. That would have helped in getting a better view. But even so, the author clearly mentions the controllers, model and view that will be affected in the proposed solution for the problem."
1,"The write up explains the how they implemented clearly. They had a few name changes done. The new names follow good practices and proper naming conventions.
When it comes to the whys, there are places were they have mentioned why they implemented the needed a certain way. For example, load_add_signup_topics is renamed to get_assignment_data. They have explained that they have done it to make it more intuitive.
For solution in problem 10, they have moved duplicate code to helper function but they have not explained why they did so. Maybe they thought it was self-explanatory. But adding such details would make the page even better."
1,"The design document incorporates most of the required sections. Proposed code changes could have been included and a Test plan on how they plan on testing UI and RSpec could have been briefliy explained. Other than that, a very good effort has been made on the docume"
1,The author provided flow diagrams about the method. It will be better to provide UML diagrams about the controller and mockups about the test.
1,"They have regularly committed their work but most of the commits towards the ends were just readme file changes. I can see their commit history, but they could have used better words to describe the functionality they added.  Other than that they have done good work."
1,"The authors do not go into detail about which methods they plan to add or modify.  Also, I think their proposed solution for the 'Inefficient calculation of conflicts' problem could be made more efficient.  The proposed solution relies on iterating through all previous reviews anytime a new review is added. This can be expensive for larges classes with many reviews.
One suggestion would be to keep a running value (or values) that gets updated once a new review is added to the system.  This way, a new review's score can simply be compared to this value(s) and iterating through all previous reviews will not be required. (Of course, this would require some logic to make sure the scores that are outside of the threshold are not included in the calculation of the stored value(s))."
1,"The team is going to use existing RSPec testing to determine if any of their code has broken anything as well as developing new RSPecs for their code. The team is not looking for Code Smell issues. They may want to run the Code Climate to ensure they have not added any new smells. in addition, they could also use Travis CI to further ensure their changes did not break the existing application."
1,The upper portion of the document is very well explained. I would work on adding to the test plan and the design principles.
1,"I see good visuals such as a work flow diagram which depicts the idea in a clear manner. Screenshots of the current review score pattern have been included which helps in understanding the problem statement. 
An UML diagram could help in getting a better understanding of the lower level workings of the proposed changes. 
 Author can also include an use case diagram"
1,"Unfortunately, there is only 1 diagram presented and I'm not sure what kind of diagram it is. I think it is just regular diagram to show MVC model for GradingHistory object that is going to be created. This diagram does not convey much of information, except showing MVC model, which is trivial information. Thus, I consider this as too high-level design and it does not provide enough details. The type of diagrams you are looking for is UML, Entity Relationship, Use case, Workflow, or Sequence diagrams are acceptable for your project and any of them would be very helpful for understanding your team design. Please include at least one UML diagram to show how the GradingHistory would interact with other objects in Expertiza to CRUD the history of grades submitted by instructors. Include Entity Relationship diagram to show how grades will be stored into and retrieved from the DB. Use case or Workflow diagrams are high-level, but very helpful to illustrate expected behavior of the feature that you are developing. Either way, current diagram is not enough for design document.
All the screenshots in the ""Expected View"" section are very helpful to envision how grading audit trial would look like on the web page and how grading history can be accessed by instructor. I would suggest to make screenshots a little smaller in the size and scale it down a little, since they currently take more than the entire page size. Please consider to resize them.
After examining the ""Proposed Solution"" section, I can conclude on the following:
1) Single diagram that is currently listed in the document does not help reader to understand the project. Please provide different types of diagrams I discussed above. Please make sure to include at least 1 UML diagram.2) Currently listed diagram in the document does not follow UML diagram conventions.3) Currently listed diagram is too high-level and does not provide enough details. If you still want to include high-level diagram to help a reader in better understanding the project, please use  Workflow or Use case diagram. Any of them would be sufficient for this project."
1,"The design explains the problem statement clearly. The scope of the solution is to send a mail when there is a major contrast in the review score. I liked how they plan on including the standard deviation in the review report to show if there is a major change. 
It would have been better if the design included how they plan on detecting the major change and the mailing if there is a major change. As a reader it would interest me more on how they wish to proceed with the solution
The author merely mentions the files to be changed and the addition of the standard deviation in the report. Proposed code changes and proposed solution could be worked upon."
1,The author has explained the changes to be made to the system in an overview. More clear explanation is required on how they plan on implementing their solution for the problem statement.
1,"Overall quality of of the explanations is very good. All changes described in the document are well-written and easy to follow. There some information is still missing in the design document, but even without it, it still easy to follow. There are few minor things I would like to point out that can be improved in the explanation part that would improve quality of the document.
In the ""Design"" section, the team stated the plan is to ""create a database called grading_history"". I think this is typo, you want to create table in the DB (not the DB itself). Also there is no need to discuss MVC design or creating a model, controller and a view. This is RoR project and if you create a table using scaffold, it will auto generate model, viewer and controller. No need to elaborate on it.
Also, please use at least one appropriate UML diagram and make sure it follows UML conventions (do not simply include boxes with arrows pointing to other boxes). You need to be specific as much as possible and provide as lower level of details that you cat get.
For the ""Testing Plan"" section, I like that 3 well-defined scenarios for functional testings were proposed. However, I do not think that these tests thoroughly cover all the proposed changes. Please make sure to test your changes thoroughly and appropriately using following test strategies for this project:
1. Code inspection2. Pass existing Rspec tests3. Write additional Rspec tests to test your feature4. Run some UI tests
All other proposed changes made it by the team appear to be clear and concise. Very nice work by the team!"
1,The authors employ a diagram showing how this feature is currently implemented in the system.  A diagram outlining their design would be helpful.
1,"The project purpose is clearly stated and easy to understand.  The design is thorough although as mentioned above, some things are unclear.  The testing plan could be fleshed out a bit more in terms of specific things the tests should be checking (e.g. model fields) rather than just checking whether given methods are called when a specified action is performed by the user.  The testing needs to verify that the correct information was indeed recorded."
1,"Although the key parts of the design document are present, the document does not have all the important information required to be in the document.
Project purpose is very well defined and the project's goal is well explained under the ""Problem statement"" section. It provides clear view on what the team is going to be working on.
Project design is discussed in the ""Proposed Solution"" section, where ""Expected View"" and ""Diagram"" are included. Unfortunately, provided diagram is too-high level and does not contain any important information. Please consider including at least one UML diagram to show how the GradingHistory would interact with other objects in Expertiza. This would also help to understand how CRUD is utilized for the history of grades submitted by instructors. Include Entity Relationship diagram to show how grades are going be stored into and retrieved from the DB. Utilize one of the high-level diagrams (Use case or Workflow), briefly illustrate expected behavior of the system with the feature you are working on.
""Testing Plan"" section is incomplete. There are only 3 functional test scenarios are developed and discussed in the document. These are not enough to test all the code changes that your team is going to do. Please include ""Rspec Testing"" section where you can state what test cases you develop to test the changes you made.  Also include ""UI Testing"" section where you can include steps to test grading audit trail from the UI. It would also help if you state that all existing Rspec tests pass.
Implementation details are missing. Please provide code snippets, or stubs to discuss all the changes to be implemented. If your team has already written the code, include screenshot of the code. Although, I really liked ""Files to be Modified"" and ""Files to be Added"" sections. These section provide clear explanations on how grading audit mechanism will be implemented. Unfortunately, it only misses low-level implementation details.
Please discuss any flaws and issues your team has found in the proposed design and implementation completed last semester by the different team. Why was not this included at all? Please list all the problems you found and make sure to indicate that proposed materials are used as references.
Probably have ""Conclusion"" section, where the team may conclude on the project as the whole.
Also, ""Team members"" section is missing."
1,"Unfortunately, I believe that the E1919 project is incomplete and it is not ready to be deployed per corresponding OSS project requirements. However, this is very good starting point for a future team to pick up and it certainly should not be redone from scratch by any means. I am sure that a lot of the Code Climate issues were resolved by the team and team has done great job by resolving the issues and spending time on this project. However, I list several big concern why their code is not ready to be deployed:
1. More than 60 (sixty) Unresolved Code Climate issues in the models with names starting from ""H"" through ""Sc"". Team did not fix all of the Code Climate smells that must fixed per corresponding OSS project requirement. I think future team can pick up on the left over work and resolve following issues that still remain in the models:
app/models/invitation.rb: Rename is_invited? to invited?: 73app/models/menu.rb: Method Menu#selected is defined at both app/models/menu.rb:44 and app/models/menu.rb:106app/models/metareview_response_map.rb: This file has 23 unresolved Code Climate issues that should be fixed. Seems that team completely skipped that file and decided not fix it. It has the following Code Climate smells:Use find_by instead of where.first: 59, 62, 65, 69;Use find_by instead of dynamic find_by_name: 61, 64;Specify an :inverse_of option: 2, 3;Unnecessary spacing detected: 59, 62, 65, 69;Line is too long. [163/160]: 56, [168/160]: 66;Redundant use of Object#to_s in interpolation: 63, 66, 70;Space inside string interpolation detected: 66;Unused method argument - session. If it's necessary, use _ or _session as an argument name to indicate that it won't be used: 55;Ternary operators must not be nested. Prefer if or else constructs instead: 15;Do not prefix reader method names with get_: 8, 34;Redundant else-clause: 18app/models/multiple_choice_checkbox.rb: Tagging a string as html safe may be a security risk: 29, 65; Similar blocks of code found in 2 locations. Consider refactoring: 33-37app/models/multiple_choice_radio.rb: Tagging a string as html safe may be a security risk: 26, 67; Similar blocks of code found in 2 locations. Consider refactoring: 30-34app/models/node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 15, 18; Rename is_leaf to leaf?: 28; Do not prefix reader method names with get_: 21, 37, 40, 43, 46, 49app/models/on_the_fly_calc.rb: Final newline missing: 99app/models/participant.rb: Identical blocks of code found in 2 locations. Consider refactoring: 144-148app/models/question.rb: Specify a :dependent option: 6; Do not prefix reader method names with get_: 43app/models/questionnaire_header.rb: Tagging a string as html safe may be a security risk: 15, 25; Identical blocks of code found in 3 locations. Consider refactoring: 19-23app/models/questionnaire_node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Rename is_leaf to leaf?: 55; Do not prefix reader method names with get_: 39, 43, 47, 51app/models/questionnaire_type_node.rb: Method get_children has 6 arguments (exceeds 4 allowed). Consider refactoring: 28; Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Do not prefix reader method names with get_: 20, 24app/models/quiz_question.rb: Tagging a string as html safe may be a security risk: 18app/models/quiz_response_map.rb: Do not prefix reader method names with get_: 12app/models/response.rb: Method concatenate_all_review_comments has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring: 110-114; Method add_table_rows has 6 arguments (exceeds 4 allowed). Consider refactoring: 256; Method display_as_html has 5 arguments (exceeds 4 allowed). Consider refactoring: 18; Tagging a string as html safe may be a security risk: 33; TODO found: 8; Useless assignment to variable - code and identifier. Use + instead of +=: 226, 253app/models/response_map.rb: Do not prefix reader method names with get_: 55app/models/review_assignment.rb: Line is too long. [173/160]: 112;app/models/review_response_map.rb: Do not prefix reader method names with get_: 16app/models/role.rb: Do not prefix reader method names with get_: 97, 113; Method Role#cache is defined at both app/models/role.rb:12 and app/models/role.rb:15app/models/scale.rb: Tagging a string as html safe may be a security risk: 18, 34, 74, 80
2. No tests performed on the code changes to verify that team did not break any existing functionalities and did not introduce new bugs in the code. Team needs to run all Rspec tests on all existing models and controllers and also develop new Rspec test cases to test their changes.Running Code Climate tool and Rubocop on the code does not guarantee correctness of code changes and do not test whether you code works as expected and does not break anything. It simply shows that your team has fixed reported issues. But was that fix correct in terms of effecting other functionalities? That is major missing information and work. Also team did not deploy their project for UI testings. Very a little information with regard to testing was added into the Wiki page."
1,"Yes, there were only two commits done by Rahul Sethi on April, 1 and one merge pull request during the review period (starting from March, 25-th through April, 1). I noticed that this is team's Stage 2 Pull Request (not really sure what happened during the first Pull Request). In following statements I will be based off the Stage 2 Pull request. There are 12 commits in total performed only by two team members and 10 of them are done at March 25 right before the deadline for the 1st submission. All 10 commits are completed by Vijaya Ganesh Mohan. So, I am not really sure where all the other commit history and why team decided to do Stage 2 Pull Request.
The last 2 commits done by Rahul is final changes on some of the code. However, I see that he changed multiple files in the following way:
html.html_safe
# safe_join(html)
Thus, reverting code to the point where it was before and commenting out solution for ""Tagging a string as html safe may be a security risk"" Code Climate Issue. Therefore, I suspect that this issue was not resolved properly.To fix this issue, your team should've used content_tag and tag helpers to create HTML tags. Then you can create HTML strings that are actually HTML safe and we minimize the possibility of XSS attacks.
I have a little concern about the following:1. Why is there Stage 2 Pull Request?2. Why did team create Pull Request to expertiza/master when per OSS project requirements specifications (and our mentor also clarified this), all Pull Requests must be created to expertiza/beta branch?"
1,"Since the goal of the project is to Fix Code Climate issues in models with names beginning with ""H"" through ""Sc"", I expect not to find problems in the code, but to see that all Code Climate issues reported on the models of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate what Code Climate issues are resolved, I cloned the team's Github repository from https://github.com/rahulsethi97/expertiza , pushed master branch to my own repository, registered it with my Code Climate account, and performed Code Climate validation on your code. All the steps that I done I listed below:
 
git clone https://github.com/rahulsethi97/expertiza.git
git pull
git remote rename origin upstream
git remote add origin https://github.com/my_github/expertiza_e1919.git
git push -u origin master
The following is the list all of unresolved Code Climate issues I found:
app/models/invitation.rb: Rename is_invited? to invited?: 73app/models/menu.rb: Method Menu#selected is defined at both app/models/menu.rb:44 and app/models/menu.rb:106app/models/metareview_response_map.rb: This file has 23 unresolved Code Climate issues that should be fixed. Seems that team completely skipped that file and decided not fix it. It has the following Code Climate smells:Use find_by instead of where.first: 59, 62, 65, 69;Use find_by instead of dynamic find_by_name: 61, 64;Specify an :inverse_of option: 2, 3;Unnecessary spacing detected: 59, 62, 65, 69;Line is too long. [163/160]: 56, [168/160]: 66;Redundant use of Object#to_s in interpolation: 63, 66, 70;Space inside string interpolation detected: 66;Unused method argument - session. If it's necessary, use _ or _session as an argument name to indicate that it won't be used: 55;Ternary operators must not be nested. Prefer if or else constructs instead: 15;Do not prefix reader method names with get_: 8, 34;Redundant else-clause: 18app/models/multiple_choice_checkbox.rb: Tagging a string as html safe may be a security risk: 29, 65; Similar blocks of code found in 2 locations. Consider refactoring: 33-37app/models/multiple_choice_radio.rb: Tagging a string as html safe may be a security risk: 26, 67; Similar blocks of code found in 2 locations. Consider refactoring: 30-34app/models/node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 15, 18; Rename is_leaf to leaf?: 28; Do not prefix reader method names with get_: 21, 37, 40, 43, 46, 49app/models/on_the_fly_calc.rb: Final newline missing: 99app/models/participant.rb: Identical blocks of code found in 2 locations. Consider refactoring: 144-148app/models/question.rb: Specify a :dependent option: 6; Do not prefix reader method names with get_: 43app/models/questionnaire_header.rb: Tagging a string as html safe may be a security risk: 15, 25; Identical blocks of code found in 3 locations. Consider refactoring: 19-23app/models/questionnaire_node.rb: Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Rename is_leaf to leaf?: 55; Do not prefix reader method names with get_: 39, 43, 47, 51app/models/questionnaire_type_node.rb: Method get_children has 6 arguments (exceeds 4 allowed). Consider refactoring: 28; Method get has 6 arguments (exceeds 4 allowed). Consider refactoring: 9; Do not prefix reader method names with get_: 20, 24app/models/quiz_question.rb: Tagging a string as html safe may be a security risk: 18app/models/quiz_response_map.rb: Do not prefix reader method names with get_: 12app/models/response.rb: Method concatenate_all_review_comments has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring: 110-114; Method add_table_rows has 6 arguments (exceeds 4 allowed). Consider refactoring: 256; Method display_as_html has 5 arguments (exceeds 4 allowed). Consider refactoring: 18; Tagging a string as html safe may be a security risk: 33; TODO found: 8; Useless assignment to variable - code and identifier. Use + instead of +=: 226, 253app/models/response_map.rb: Do not prefix reader method names with get_: 55app/models/review_assignment.rb: Line is too long. [173/160]: 112;app/models/review_response_map.rb: Do not prefix reader method names with get_: 16app/models/role.rb: Do not prefix reader method names with get_: 97, 113; Method Role#cache is defined at both app/models/role.rb:12 and app/models/role.rb:15app/models/scale.rb: Tagging a string as html safe may be a security risk: 18, 34, 74, 80
Unfortunately, there are more than 60 Code Climate issues that your team did not address in the models with names starting with ""H"" through ""Sc"". All of the above issues can easily be fixed and tested. For the ""Do not prefix reader method names with get_"" Code Climate issue, you just need to remove get prefix in the method and all the callers for that method. For the rest problems you can just follow hints that Code Climate provides you. For example, ""Line is too long"". Break that line into multiple lines.As you stated in the Wiki page ""some issues are ignored as they were breaking the rspec tests"" is not an excuse for not completing the project.
Unfortenatly, only app/models/metareview_response_map.rb file has 23 unresolved Code Climate issues.
Overall, there are some improvements made in the code for the models. However, not all Code Climate issues were properly resolved."
1,"Scope of Improvement:
Team has correctly mentioned ""why"" they have created the changes. But, the documentation lacks ""how"". Team has given a list of files modified but it is not readable/intuitive. 
 
Suggestion:
Team could create a table of code smell categories and files. So, one can track what code changes are done in files based on code smells."
1,"The wiki only partially explains how the authors did their work by providing only five examples of the Code Climate issues and specifying incomplete solution for them (please provide solution to the problem as code snippet or screenshot of the change). The solution is incomplete, because the Wiki discusses how the issues can be resolved, but does not provide solution itself in the form of code snippet or screenshot. The wiki only partially explains why the authors did the work resolving mentioned issues.
There must be more than five issues that the team has resolved in the code reported by Code Climate. The statement, ""And, there are many more code smells which needed a fix"", is not sufficient. Please specify all the issues you worked on and identify at least top 5 (five) of the most common/frequent issues (non-trivial) reported by Code Climate and give detailed information about them and how you fixed them. Trivial improvements, such as ""Extra empty line detected at method body"" or ""Line is too long"" can be left out. However, remember at least to mention them and indicate that they have been resolved.
The team should elaborate more in the wiki on how and why they have done the the work. Please consider the following list of improvements I provided below:
- May be start the Wiki page with ""Introduction"" section where you can briefly explain what your team is working on what is Expertiza and Climate Code instead of single ""About Expertiza"" section.
- In the ""Introduction"" section (if you decide to include it) you can address all new terms, such as Code Climate, code smells, and etc (even what is the code you are working on). That is where you can also briefly talk about what is Expertiza (create a sub-section for Expertiza instead of the whole section ""About Expertiza""). Do not forget to include useful links.
- Elaborate more on the issues that the team has resolved. List all of the issues that were resolved and identify top five the most frequent issues reported by Code Climate. Provide solution for most frequent issues with support of code samples or screenshots. Explain why did you use the approach that you did on fixing these issues.
- Do not include description on the trivial fixes since they do not contain any important issues a reader needs to know about.
- There is no Testing section. You need to include Test Plan section. Describe what testing strategies your team used to verify that your changes did not break any existing functionalities? Remember at least to run existing set of Rspec tests and report the results in the Wiki. Any changes you performed on the models must be tested with existing Rspec tests and ensure they still pass. 
- May be state any difficulties or issues the team has faced while working on the project? How the team handles such issues?
- Please mention (if any) remaining issues and further suggestions for improvements. Did the team has fixed ALL of the issues reported by Code Climate? Some of the reported issues are False Positive and etc?
- Please mention remaining issues and further suggestions for improvements.
- Include additional improvements section if your team has done such improvements (unrelated to Code Climate, e.g. renaming methods or variables).
- How did the team verified that issues reported by Code Climate are resolved. Make sure to elaborate on that.
- Include ""Conclusion"" section into your Wiki, where you can highlight all important points.
- ""Total Modifications"" section where you specify number of files changed (additions, and deletions) is unnecessary information. All this can be determined in the pull request. Although you can add this info in the ""Conclusion"" section if you want.
- May be include ""Team Member"" section if anyone in the future would have any questions regarding your fixes and improvements. Also you may provide more information on who worked on what issues?
Above are only suggestions and do not have to be completed. However, as a reader you appreciate having as much information as possible about someone's project."
1,"yes, the reasoning for a change such as adding inverse_of option is clearly explained. Changing names etc. to follow practices were also explained. One advice I have is to show what you changed it to, and maybe show the changes in git through screenshots."
1,"Overall, the Wiki page looks OK, but it must be improved and some missing information must be added to get full credit.
Great job on creating a section that talks about Expertiza. This gives an idea to the reader that the team worked on the Expertiza source code (may be you also need to say that explicitly as well). However, introduction to the Code Climate information is missing. Consider that some readers may be unaware of such tool and the wiki page does not explain what it is for and what it does. The ""Problem Statement"" section in the wiki states, ""There were code smells detected in the application by code climate ..."". Some readers may find this very confusing and abbreviated statement and since not everyone can understand what the exact meaning of ""code smells"" or ""code climate"". These terms are not addressed in the Wiki.
Try to elaborate more on the new terms (i.e. Code Climate, code smells, and etc). Perhaps creating new/additional section ""Introduction"" would be great filling for a missing information.
I liked very detailed write up in the ""Files Modified for this requirement"" section. However, this can be re-organized a little and moved up into the ""Project description"" or ""problem statement"" section in much more concise form, such as ""Files involved for this project are in the app/models directory with names beginning with 'H' through 'Sc'"". This is sufficient information for the reader to understand what files have been changed and worked on. No need to include the list of all the files.
""Problem Statement"" section with code smells examples is incomplete. You probably need to create additional section and name it ""Implementation"" (or something similar) where you provide examples of code smells and how you fixed them. Your team must include not only the code smells problems in the Wiki (that is what you have now), but also solution to them and some descriptions explaining your team approach and why this has been fixed the way it was. Providing code samples or screenshots for the proposed fixes over Code Climate issues and detailed information for each type of the Code Climate issue reported in the models files is necessary information in the Wiki. Try to fill in these gaps.
Also consider leaving out examples with code samples (or screenshots) for trivial fixes, such as ""Useless assignment of a variable"" or ""Line is too long"" and etc. These are trivial fixes and do not add any crucial information about the work you performed. You may include just a names of these issues into the separate section, for example ""List of Fixed Issues"" and indicating that these issues were resolved. This would be enough information for a reader about trivial fixes.
There is no Testing section where the team indicates their testing strategies performed to ensure integrity and validation of the code. How did you test your changes and ensured that your changes did not cause any problems/errors? How did your team validate that Code Climate issues were fixed? Please elaborate on this more.
After reviewing the Wiki page, I can conclude that crucial information is missing and the page must be improved. Please also mention (if any) issues your team faced while working on the project, further suggestions, improvements, conclusion and etc. Please see next section for more details."
1,"Unable to test completed work manually, since the team did not deploy their Expertiza project or did not provide information on their deployment in the submission. Please deploy your Expertiza project if you have not done it, so other reviewers and I may test it remotely on the deployment.
I am also unable to test the project locally on my VM since the team did not provide their working Git repository where they have all the changes. Please, at least provide me with your working Git repository, so I can pull the code and run it manually on the local VM environment for manual testing. (I was able to do so for the other team since they specified their git repository in the Wiki, although they did not deploy the project).
Also make sure that you perform manual testing as well that cover the changes you performed over the models files (again, running and passing Rspec tests does not guarantee validation of your changes). Manual testing is important part of the project and I suggest to document that in the wiki page."
1,"Not only that I should not see any relevant problems, but indeed all existing problems in the source code must be resolved per the project requirements (e.g. DRY, lines too long, code smells and etc.), especially if the team is assigned to resolve all code smells reported by Code Climate tool! Team has done great work on fixing all the code smells, refactoring and improving the code! I did not find new issues and code looks great!
However, the code that has been changed needs to be well-commented and documented. Please provide sufficient comments on some complex functionalities that you've improved.
1. I've noticed that team did great job on fixing files containing too long lines, replacing class variable @@variable with a class instance variable, changing where.first() method with more appropriate find_by() methods, and using guard clause instead of wrapping the code inside a conditional expression. Team also did great job eliminating extra whit spaces in the files.
2. DRY code is eliminated.
3. Needs more comments (for example, app/models/question.rb, app/models/rscore.rb files). Please provide comments explaining what code is doing.
4. Code follows the Ruby Style Guide. Well done!
5. There are no additional code smells or DRY code that I found besides what was reported by the Code Climate. On contrary these were fixed!
Overall, team did great work on the improvements and changes! But it obviously missing Test Plan and test strategies on the improved code!"
1,"Refactored code resolving Code Climate issues appears to be well written and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code (as expected), and pull request mostly contains refactored code that already existed in the repository.
Please note that build and Travis tests have failed for this pull request (all checks have failed also). There must be some changes that caused the builds to fail.
While looking at the changes in pull request, I noticed few very minor things that can be improved. Please consider to improve following items:
- Use new/latest Ruby format for hashes in the code that you changed (app/controllers/tree_display_controller.rb). Example, use ""{""directory"": node.directory}"" instead of old way  ""{""directory"" => node.directory}""
- I suspect that Code Climate issue ""Tagging a string as html sage may be a security risk"" was not addressed at all. Please contact your mentor for further assistance in resolving the issue. (My team and I had similar project and I noticed that you fixed ""Line is too long issue"", but did not fix security risk in the app/models/questionnaire_header.rb) file.
https://github.com/expertiza/expertiza/pull/1397/commits/1ceec18b5c8fc7200c98d776cce189d5972d68fe
- Remove commented out code (app/models/invitation.rb, app/models/menu_item.rb, app/models/multiple_choice_checkbox.rb, and etc). If this is not a comment and just unused code, delete it. Example:
https://github.com/expertiza/expertiza/pull/1397/commits/9b2673e88aa2317956f77505edabe975bbf320b4
- Please provide comments on some of the fixes and describe what code is doing after you modified it (believe it or not that is how you find if your changes are correct, i.e. code inspection). For example, changes in app/models/question.rb, app/models/rscore.rb all need to be well-commented and documented.
- There are few fixes team has made by renaming existing methods with more appropriate names (e.g. ""get_children"" into ""children"" ). I suspect this is related to fixing ""Do not prefix reader method names with get_"" Code Climate issue. New names are appropriate and these fixes are well handled by the team. Just make sure never use ""get_"" prefixes for getters and ""set_"" prefixes for setters and at the same time do not use built-in system key words (i.e. time, date and etc). Overall, well done.
https://github.com/expertiza/expertiza/pull/1397/commits/a718472aa85b051ed93c93c3e6a9016a2cfe0891
All other existing method and variables names within the scope of modified code are reasonable and should not be changed. There were only few cases when the team added new methods (submission_records_controller.rb). However, these are just CRUD methods. Keep in mind that this is not the case for some other variables and methods in the files that you modified. If variable or method names can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
1,"Since there is no ""Test Plan"" in the Wiki page, or any information related to Testing, the authors obviously did not cover tests nor convert them into automated tests. Moreover, I did not see new automated or Rspec tests added in the spec directory to test all the modified code and ensure it works as expected.
I see that no changes are done on the rspec/controller directory where all the Rspec test files located. This indicates that changes performed by the team to fix Code Climate issues did not have any effect on the existing Rspec tests and did not break them, which is a little suspicious since my team and my changes for Climate Code issues broke some of the existing Rspec tests and we had to fix them. I noticed that team did not verify correctness of their changes with existing Rspec tests in the controllers and models by running them and verifying that they all still pass, since this was not addressed in the Wiki and the team did not submit any video recordings with the running and passing tests.
Did the team at least verified changes with existing running/passing Rspec tests? Was the following command executed to perform validation:
bundle exec rspec spec/controllers spec/models
Team is required to verify all their changes by running controllers and models Rspec tests and making sure they still pass.
Please run existing Rspec tests and report the result (upload the video of running and passing Rspec test to submission board). If you have failed rspec test cases, you need to fix them.
If your team was not explicitly asked to write additional Rspec tests, indicate this in the write up. Record short live demo showing existing Rspec tests passing as indication that your team did not break any existing functionalities (although there is only ~53% test coverage).
Also, please explain your Test Plan in the write up as well."
1,"The team tried to implement few test cases. I didn't fully understand the implementation, I felt it would have been better if there's more explaination included regarding the test cases in the document"
1,The images at the top from the OSS topic could be optional or smaller. The timeline for each of the issues for the final project part are very nice and helpful in understanding what needs to  be done from start to end.
1,"Yes, I appreciate that the team has added a few flow-charts. But, what is not clear to me is that, the heading 'Process of solving the issues' is very vague and I do not exactly understand what issues the heading is denoting. They could have added what the issue is specifically."
1,I think they might use the document in the last project. I think it will be better to write a document about the current project separately. There are many details about last project.
1,The design is written great. It will be better to explain more about the pattern used.
1,"Yes they have explained everything well. As I suggested before, if they could remove the number of external links in their document and a brief explanation of the same instead, it would be even better."
1,"The changes to be made is not explained, because the changes have already been completed - at least that is how it looks from their implementation. If they do have something left to implement, they should create a paragraph to add those details."
1,"Scope of Improvement:
I couldn't see any improvement regarding the suggestion given during the previous review :
""The reason I chose to review this project was to understand reviewing something that you are not much in. As a novice reader, I find the use of too many technical terms in the project description/problem statement. Team could just improve upon explaining things in a much simpler way. Overall the explanations are thorough and all sections are covered.""
This thing could have been improved by the team."
1,"There are no visual aids. 
A design flow or any other UML diagram would have been of great help understanding the proposed solution."
1,"I do not agree with the team's opinion that ""Visual aids not applicable"". As per my understanding of the project, the project touches the workflow. So the team could add any UML diagram to represent existing workflow or any use-case diagram if applicable. I believe that adding a diagram will help the reader to understand the project quickly."
1,"The solution proposed is mentioned in ""too deep level"", where you have specified directly the files you would be interfacing(modifying). It would have been great if there were some explanation about functionality and solution in ""plain english"". Unless the reader has detailed knowledge of the project, it would be hard for them to draw sense out of it."
1,The overall quality is adequate. My one suggestion would be to reduce the number of links added in the description. It would be easier and more convenient for the readers to read a brief description explaining the concept instead. The frequency of the links can be reduced if possible.
1,"I think their explanations were very thorough. They even went above and beyond by answering common peer review questions on their wiki. However, I don't think keeping that section (answering common peer review questions) on the wiki past the peer review phase is a good idea. The purpose of the wiki is to explain your project, not ensure you get a good peer review grade. Also, I suggest fixing the typos/grammatical errors on the wiki so that it looks more professional."
1,"The changes mentioned by the author seem valid but I found it a little difficult to understand but in no way inadequate.
The reader has to read it a little carefully. The problem statement could have been explained in little more detail to give a good introduction to the entire problem. The remaining text becomes easy to understand once the problem description is clear. It would be better if the problem statement could have some previous context to it. A few more lines about AudioParam and how it is useful for Servo."
1,"Scope of improvement:
The reason I chose to review this project was to understand reviewing something that you are not much in. As a novice reader, I find the use of too many technical terms in the project description/problem statement. Team could just improve upon explaining things in much simpler way. Overall the explanations are thorough and all sections are covered."
1,"They do a good job of explaining the project purpose, project design, and testing plan. My only suggestion would be to make the link submitted to Expertiza the link for the entire wiki page (without the #... at the end). The reason for this is that the project purpose, design, etc. are explained at the beginning of the wiki, so if I were just looking at the ""Final Project"" section of the wiki, I would have no context and would not understand the purpose or design of the project."
1,The write up is good. Maybe contains too much information and is a cluttered. Having simple and brief information in certain topics would make this an easier read. (Adding bullets wherever possible)
1,"Compared to the first round, the team has improved a lot with respect to the code. Looks like the team has followed DRY principle and haven't added unnecessary functions. The only problem I had was following the code that they've written as the code walk-through is pretty unclear to me. I feel comments could have been added for the code or the code walk-through could have been more clear."
1,"According to me the code added for the new function doesn't seem to be long enough, i.e, cannot be refactored. The one thing that could have been improved in the project is the addition of the comments for the new code added. This would give a clear idea for anyone seeing the code for the first time. 
Along with that, the coding style also seems to be good with no bad namings as well."
1,"There is a portion in the page which has a little bit of code. But nowhere does it specify if they have done it,  or if it is part of the problem statement.
 
It would be great if the page followed a flow:
Problem statement->Steps to take->Implementation method"
1,"Although the writeup provides a lot of detail and goes in depth about the topic, it does it through hyperlinks. I would recommend taking a few of the information from those linked websites and directly quoting it in the writeup itself, this way the writeup itself will have more relevant content in itself."
1,The writeup is very descriptive in terms of what are they trying to do and helps the reader understand every terminology used in the project which can be appreciated. I personally think that they could have explained the Normal Build section in more detail. That was the only part that was hard to follow.
1,"The write up is very clear. Additional links describing certain topics makes it a little easier for the readers to get familiar about the project.
 
It would be better if they add the problem statement or tasks they have to finish to understand the project objective better."
1,The writeup is very clear and informative. It also gives introduction to new concepts being used for implementation. Though it is difficult to understand what the project exactly aims at. It would be better if they include a seperate section on the problem statement and the tasks that needs to be accomplished.
1,"The writeup is clear and explains adequately on what is to be done and how is it done. The project idea is very clear and is explained on the Wikipedia page along with the workflow of the project. For understanding, the authors have also given a brief idea and an introduction to the technologies used ""Rust"" and ""Servo"". However, the Wikipedia page only gives partial information (that is, what all is implemented until now) because of which it is not very clear as to what is to be exactly carried out in the project. I would suggest the team to include some more information on how to follow the code."
1,"The writeup was very well done, and it had detailed information about the entire project. I really enjoyed the fact that this team provided links to the Rust webpage, and even a Stack Overflow link which showed how Rust is the most loved language.
 
Two things I would like to point out are:
1. The Rust can be found ""here"" link is broken, it gives a 404 error. The hyperlink takes you to ""https://www.rust-lang.org/en-US/"", removing the en-US makes the link work. Try changing it to ""https://www.rust-lang.org/""
2. There is a small grammatical mistake in the line ""This would work aims to implement SetValueCurveAtTime()""."
1,"The manual testing part of the test plan is very well described and in good detail with some screenshots to show how a specific page would look in a different language. Moreover, the scenarios provided by the team explain the tests well. They could have added how they would perform rspec testing or which tools they would use to do these tests, but the current description is more than enough to account for that shortcoming."
1,"The use of use-case diagrams is a good choice. Only suggestions, reduce the size of the mock screens."
1,"Again, the core design is not shown in the document since it was provided by different team in the last semester. The team is only going to complete unfinished work started last semester. Based on the ""Implementation"" section, the team is happy with the initial design that was given (I guess team's mentor also reviewed previous work, and is aware of the design).
Based on the given document I cannot determine whether the design is as simple as possible. Use case diagrams show it to be simple, but these are too high-level diagrams that do not reveal implementation details and cannot be used to determine complexity of the design.
Since the team is convinced that previous changes are ""on the right track"", I assume that the design is in fact simple as it could be."
1,"The team has stated the problem statement, a design section which has the inclusion of previous work, addressed the issues but I personally felt that it has less content.
The team could have given more information on as to how they plan to overcome the challenges and what else can be achieved."
1,"There are no visual aids provided.
A few diagrams would have been helpful understanding the proposed flow/changes better."
1,"The team has not added any visual aids. No UML diagrams or screenshots have been put on the design document. 
I suggest the team to add a flowchart for the design flow to give a better idea on how will the implementation take place."
1,"I could not find any visual aid for the design doc. 
This was the only part missing I feel.
I suggest them to add some UML for their final submission which gives clear idea.
Or they could have pictured scenarios instead of writing them."
1,"I have checked the designs that are proposed by the authors. I don't think the authors did add any methods to the wrong class as per the documentation. The new design looks like it will change the previously implemented project to bring out a working functionality that passes all the edge test cases. The new design does not look complicated as the author tried to convey their understanding of the project in a simple defined structure. The new design may potentially increase the response time of the system as it depends if the internationalization is done predefined by the author or if a third party library is used to make the translation. Once the team starts working on the implementation then the design page can be updated with screenshots, design flow, etc."
1,"Although the team is able to identify the flaws they have not mentioned how they plan to implement it.
Since there is no coding done it is not possible to identify the smelly code of the team.
There should have given more information on which controllers, models, and views they plan to modify or add. In this way, it would have been easy for me to give any suggestions if needed."
1,"The proposed changes only mention files that are being changed. A much better approach would be to add some textual context to the changes for each file and how they possibly could lead to a solution as well as how they affect the performance of the application as a whole. Moreover, the doc lacks visual aids. Visual aids provide a nice touch and intuitive explanation to the proposed changes."
1,"Please do not mix your proposed changes (current work) and previously proposed changes (previous work) into single section you named ""Changes Proposed"". Right now it has both changes that were proposed previously and your currently proposed changes.
Overall quality of the explanations is OK, but can be improved a lot. The only explanation is provided, ""we are focusing only on the student views and propose changes in the following files..."" and there is a list of files.Please elaborate a little more what do you mean by ""focusing only on the student views"". Also, it would be good idea to add explanation to each listed file as follows: What this file is responsible for? Why and how this file is going to be modified? What goal would be achieved by proposed change to this fild? Try to give as many details as you can."
1,"The team has clearly mentioned the changes that are to be carried out in the report. 
The team has provided the details of all the files where changes will be implemented, directory wise. This clearly explains what the team is planning to do. 
I suggest the team to give some more information on the ""bugs"" and ""errors"" that are present in some of the files."
1,"The design doc lacks any visual aids, moreover the test plan does not incorporate any form of automated testing. The team should add rspec testing as one of the automated tests. In terms of visual aids there are many visual aids that can be used such as Activity diagram, ER diagram, Use Case Diagram, Data Flow Diagram, etc."
1,"Most of the functionalities required for this project are incorporated in the Wiki. Although, design and some helpful explanations are missing. For example, ""Internationalize every static string in the Rails framework in a way that it does not remove English strings from the code."" Please explain how it can be achieved? Also, per project requirement ""Focus on student views only"" statement is a little unclear and this functionality must be elaborated (please ask your mentor if you it is also unclear to your team). All functionalities that I stated, could be discussed with more details and even examples can be provided."
1,"The team has several sections in the design document which include an introduction of the topic, the problem statement, changes proposed and a section of a test plan. Although an implementation section is present, no information is provided. The team is yet to mention how they are going to carry out their task. The team has also not mentioned anything about the ""designs"" that will be followed.
The team has done a good job by providing several scenarios for testing which will make the reviewer's job very easy.  I suggest the team to mention how and why are they implementing the functionality in the design document."
1,"The design document is simple and easy to understand. The only missing part is visual aids. The team can incorporate some diagrams to help the readers understand the problem and the solution in a better way. On the whole, it is good."
1,"The document includes very detailed information about testing in the ""Test Plan"" section. Great work by team on writing up four different test scenarios on how internationalization should be tested. I would suggest to improve these scenarios and convert them actually into valid User Stories. For example,""As a student, I want to change default English language to Hindi so that I can understand my Assignments.""Also I believe that Test Plan is still incomplete. Is your team going to develop any Rspec test cases to test the feature? If not, explain why. What about feature tests per project requirements?
I also like how your team described the purpose of the project in the ""Problem Statement"" section and ""Internationalization"" section. It is clear what is the feature that the team is working on and what are the goals. Very good introduction! Also try to DRY in the ""Introduction"" and ""Problem Statement"" sections. You define and discuss Expertiza in both sections (""Expertiza is ...""). Including brief introduction into Expertiza software at the very beginning of the """"Introduction"" section is enough. Do not repeat the same statements in different sections.
Unfortunately, all the rest important information, such as project design with diagrams and screenshots is missing and needs to be created."
1,"Considering the given metrics for a complete document the project purpose and testing plan is added to the document but no project design has been added by the team. According to me, a design is the most important part which shows how implementation will take place.
I suggest the team to add some techniques used to carry out the implementation along with a design pattern which will be used."
1,"The design document is good enough. Maybe when the team starts to implement the functionality they might make update the page with relevant information. On the whole, it is good."
1,"The code is more concise and substantial redundancy is removed making it more readable and DRY. From the wiki, the documentation is also very good. I think that it is ready to be merged. One concern I have is that some methods in the controller are still very long! I'd suggest shortening those as well."
1,"The writeup shows how to test the rspec code, which was very easy to follow. However, I would suggest adding the tests you have added and how they increase the coverage (why did you add those tests?). Overall, the writeup is easy to follow and presents a problem-solution approach which makes it very readable."
1,The code written is decent. I would advise using the facade pattern more and not expose the complex code ..try to encapsulate it. The methods can be more DRY as well.
1,The write-up could be better by including code snippets which would help the readers to relate with what the project is all about and what changes have been made.
1,"I felt the write up was good but it could be improved by adding code to the page and explaining the changes which would enable the layman to understand it in a better way. Overall, good work team."
1,"I believe the project to a good starting place for future team to be picked up. The code overall looks cleaner, has smaller chunks of code in the functions. However, the code could be improved with better commenting and still some long functions such as create exist."
1,"The project is a refactor project with all the test cases passing, so the team claims implicitly that all the features work. However, with the question stating explicitly from the UI perspective, the team has not provided any video evidence of testing the functionality or hosted the code base. I would suggest that the team also screen capture the UI usage testing the features."
1,"The authors have done a good job in implementing the suggestions stated in the previous round. However, i believe the code could still be improved with even more comments and improving of functions such as create. The method is still over 40 lines long with scope for regex to replace the switch case statements"
1,"Overall, the code looks good and there does not appear to be any major issues.  It is difficult to tell if the code is DRYer, but it appears the team has removed a great deal of redundant or unneeded code.  However, the code could use a few more comments."
1,"I think that the code is very well written and ready to be deployed. Apart from the documentation changes that I mentioned above, I would feel more confident in the project if I could test the project myself. It would be great if the team could provide a VCL instance of the working project and a bit about how to test it."
1,"The write up has improved since the last review. They have added a test plan. I had commented that one section of the review mentioned that ""

Nothing special was happening in the copy_questionnaire_details method. Also, it needed to be placed into the model because of the nature of things happening inside it.

""
felt a little vague and needed some more explanation. That has not been improved. 
Also, there is an unrelated image in the beginning of the documentation. I am sure the authors must have been experimenting with how the wiki pages can be formatted to include images and that this was a test image but it needs to be deleted."
1,"Yes, it is reasonable as I dont see any obvious issues with it. But the testing could be done better rather than checking the previoustest cases that was already present."
1,This project has good refactoring but I think more test cases can be added by future teams
1,The write up is well written overall and there has been improvement. One suggestion is to include what exactly the questionnaires_controller does.
1,"The authors did a good job at documenting the tests passing in a video. The authors have made changes to the spec however, the change is very minor and more tests could be added for the newly refactored functions."
1,copy_questionaire_details can have more method calls to simplify the code and make it shorter. The method is commented in the header but I would advise more comments. The new names conform to ruby standards and I do not see any issues.
1,"THe names are reasonable however some names such as find_or_create_by could be replaced with something that doesn't include or in the name. An advice I have is to document what copy questionnaire details returns (the old one or the copy). Also, the create_quiz_question_choice has a lot of calls with different parameters. That could be condensed more."
1,"The writeup doesn't include test plan section. The test files are changed however there are minor changes and more cases could be explored, as well as adding new cases for the refactored code."
1,"The writeup explains the problem and the solution in sequence. I would elaborate on the logic more because it is not very clear  what the solution was. For example for problem 1, the name was misleading. However, why not use a more meaningful name rather than replace the use with an array indexing. Also, what was the reason for removing the other logic in the assign_instructor_id method? For testing, there can be more information on the wiki."
1,"The writeup seems very clean and well documented. The issues are mentioned in the beginning clearly. Great job! I can understand what the project does in general however it is missing some context needed to understand the rational of the project. I would advise more context on what the functionality is, as well as including the test in the wiki."
1,"Yes, the write up is crisp and to the point and it does explain how and why the authors did the work the way they did. They have considered all the design patterns that have to be and used them effectively in all the modules possible.  All the patterns followed were clear and were well defined and did not create any confusion.
But the team should have included more code snippets and explained hat changes they have made."
1,"The authors have done a good jib in identifying the problems in the code and attempted to remove non-used legacy methods and statements. The authors have even pulled-up the code to make it DRY. However, some functions are still a bit long such as create questionnaire. The switch case statements could be reduced used regex in places."
1,"The authors do a good job on identifying the problem and then mentioning the work done to address the problem. This makes the writeup easy to follow.
I would have liked to see some more writing on the changes done in the rpec files after the refactoring."
1,"The code appears to be well organized and seems DRY.  However, it could use a few additional comments."
1,"While no design patterns were mentioned, the team did explain their reasoning behind their changes.  It would be nice to see snippets of the old code and the new code."
1,"The write-up does not include a test plan section.
In the video of the tests, you only included tests running for the controller. Since you made changes to the model as well, I think you should have run those tests too."
1,"""Also, some parts of what was happening needed to be in the model."" I would have liked some explanation on what exactly motivated you to move the functionality to the model.
 
I liked how you made the code DRY er. Really shows that you read the entire controller."
1,The def copy_questionnaire function seems too long and i feel that more comments are needed otherwise it follows the ruby style guide
1,"The problems and solutions were well explained but if you listed the main objective of what the controller is actually doing, it would have given the reader a better idea of the context."
1,"I don't think so. There are some build failures that needs to be looked at.
But it definately doesnt need to be redone from the sratch. The team has put good amount of effort in the working of said features. A good starting point would be to see why the build is failing, revert back changes on the db files if they are not reqiured and see if the existing test cases work well."
1,The visual aids provided in the system are more than adequate in describing the changes to be performed in the system. The team could have added some textual explanation of the use case diagram but the other diagrams more than compensate for this small shortcoming. Great work :)
1,Based only on the visual aids provided the design looks extremely simple although a further explanation on the activity diagram would be more helpful.
1,Add more tests before deploying.
1,The write up was very clear and well written. Some of the explanation sounded repetitive.  But I would much rather have a verbose documentation than a vague and short one. My one problem is that is lacks the screenshots of test cases passing.
1,"UC diagram clearly describes new functionality. Why did you reproduce the ER diagram or the relevant tables? Unless you are making database changes, it is not really necessary to show these. Perhaps include a write up for these images if they are relevant."
1,"See above. Might also be simpler to make a search controller, as making very similar search methods on each model is not very DRY."
1,Will you need to add search methods to each model if all you need to do is call find with different criteria? ActiveRecord should already do most of that.
1,This project seems to implement a lot of new code and I am not sure how to test the working UI for it. It would have been helpful if the project was deployed on heroku or if the group show ed the working UI through screenshots or screencasts.
1,"The code looks fine. The tests have not been created yet, which is fine. They seem to have manually tested the code for now. The build is failing mostly due to changes in db migration which made changes to schema.rb. Rather than using `git add *`, look at each changes individually and then commit, that way you can avaoid unnecessary changes in the remote."
1,"The team made good use of visuals by providing well-designed images of the use cases, an ERD (Entity Relationship Diagram), and a database relevancy table.  Each image is very well organized and they are easy to read.
One suggestion for improvement would be to include images of the proposed final product that shows how the user will input the data."
1,I think that the test plan is sound but not detailed enough in some cases as to what is the difference that the team is performing in the new implementation.
1,"There are ample, well explained visual aids, although there could be some more context in the ER diagram. Also, another possible visual aid could be an activity diagram."
1,"The design seems to include most of the required functionality.  However, it seems like a couple of items might be missing from the proposed search fields (in the Proposed Code Changes section): (1) Allowing an instructor to filter assignments by course. (2) Allowing instructor to filter questionnaires by words. (3) Allowing instructor to filter assignments by participant."
1,"The design doc is complete and very thorough.  The only thing that might add some value (but isn't required) might be links to the previous team's work (design doc, existing videos, etc.)."
1,"Diagrams are used to here, but the pictures may need to be resized in order to view clearly. it's better to organize them and add some explanations"
1,You may not need to include the database diagrams if you aren't changing the database. UC diagram is nice.
1,"Adding searching to the models is a logical choice. However, I wonder if having a search controller would allow you to reuse more code, even though you think it does not seem RESTful. A potential advantage to a search controller is that you could have the desired model as a parameter. This would make it much easier to add searching for other models."
1,The use case diagram is neat and clear and I could get a picture of what is going on easily. The ER diagram in the data-base design covers pretty much everything required. I liked how the author also included the relevant tables. Maybe a data flow diagram could help.
1,"The design document seems to have all of the sections mentioned for this submission. Great job on the test plan as well were the author mentions how they plan on going about UI testing and RSpec. The problem statement, proposed solution, diagrams and test plan all seem to be very well written. Probably could include a design pattern strategy int"
1,"The team has included a Use Case diagram which helps the user to understand the project.
I would suggest the team to add a data flow diagram and mockups of the screens as it makes it easy for the reviewer to understand the flow of the data in the code."
1,"The design proposed by the team is the same as that of the work done by the previous team.
I could not find any section in the design doc focusing on the following issues:
 


Needs refactoring


UI needs to be improved (add labels to textboxes, not just hints)


Code is really hard to follow (add comments and modularize code).


I would suggest team to include design details for the code which would resolve the above mentioned issues."
1,"The document has a good flow to it. The document explains the project purpose, work flow, current scenario, required implementation and design very well. That being said, the document is missing the test plan. I suggest the team add the test plan section with references to the rspec files from the assignment allotment rspec files. This would help understand the complexities better."
1,I think the team did a great job overall with creating the design document. I think they would need to add a section for Test Plan. The team should create/modify RSpec automation testing to increase coverage of the Expertiza project as well as ensuring their code changes/additions did not break another feature.
1,"The explanations of the design elements that are present are good and the screen-shot mock-ups provide useful information, although they are a bit too large.  The design is missing minor details, like the specific views that will be modified to include the new widgets and how the fact that review bidding is enabled for an assignment will be stored in the database.  The design should also include the navigation to the bidding interface, as mentioned above."
1,"Suggestion:
Team could have mentioned the exact test cases which need to be modified. It's good to see that team has figured out some of the good edges cases and have correctly mentioned in the document. My suggestion will be to add a test case to ""check between minor edit and major edit correctly"" as this functionality will decide the correctness of the implementation."
1,"The document is clearly in much better state. The document clearly explains things the team wants to achieve, how is team trying to achieve among others. One suggestion would be inclusion of a section that tells us how differently the team is implementing the algorithm. The team has tried to explain some here ""Some discrepancies need additional attention."", it would be great if the team explains how exactly are they planning to implement these discrepancies.
 
Additionally, I guess that a project offered may not have any bidding and in turn no team will work on that problem statement, but in case of review, we need at least ""n"" number of reviews for each project (constructive reviews), how is this scenario being taken care of?"
1,"Yes, the design does include the test plan. However, the test plan is very vague and incomplete. It mentions only 2 new test cases related to editing a rubric and thus testing the feature. Are these enough for thorough testing of the feature? I do not think that 2 test cases can cover all possible case scenarios and test them. 
I understand that these tests would be done via Rspec testing, however, would there be any UI Testing or Manual testing done to test email notifications? There should be such tests as well.
In the Test Plan I would create two separate sections, for example, Rspec Testing and Manual (UI) Testing, where your team can elaborate on testing strategies, steps, and document the outcome on it. In Rspec testing strategy do not limit your testing to only 2 test case scenarios. Test as many as possible test case scenarios (even unexpected). Document everything so Expertiza software engineers can accept your code changes without questioning whether implemented feature works or not."
1,"There are only 2 diagrams, Use case and Data Flow diagram. As I mentioned in the first peer review, the Use case diagram is a high-level diagram that explain roles of the users, initiation of the rubric changes and corresponding regulated actions to handle such changes.
Data Flow diagram is slightly confusing and requires some word interpretation to interpret the diagram.
The diagram that clearly describes the changes to be made in the system is UML or similar type of the diagram, where names of the classes, methods and variables can be shown and documented. Also, there is a change in the DB, the team should include Entity Relationship Diagram. Unfortunately, at least 1 UML diagram is still missing (as I stated in the first peer review and it was not addressed).
Moreover, mock screenshots are also missing to illustrate under what conditions does the feature works and possible email notification content. Please include these once the project is completed."
1,"Yes, the proposed design appear to be sound and well-thought. It follows appropriate principles, but does not use any patterns due to simplicity of the implementation. Design describes the ""Major change"" and ""Minor change"" and what cases (for major changes) should be handled appropriately. Although, it is kind hard to follow the Data Flow Diagram, it clearly shows when regulation of rubrics while projects are in progress should take place.
The ""Proposed Code Changes"" sections does great job on explaining how such mechanism should work by providing code sample (or stubs). Overall, yes the design appears to sound.
I still believe 1 UML diagram is necessary along with ""Proposed Code Changes"" section that provides great low-level implementation details.
Moreover, the design is missing Workflow diagram to show high-level project overview, where it can illustrate when the feature to be implemented is utilized (provide if/else conditions that appropriately handled)."
1,"Yes, the team did really good job explaining the changes to be made in the system. The team did really good job on separation of concerns to implement the feature by proposing 2 phase design and implementation. Also the team did great job on breaking down required feature into multiple easier and more manageable implementation tasks that can be implemented in the multiple stages. For example, identifying whether a change of the rubric of a questionnaire is minor change or major change (only due to major change the feature should reset reviews and send email notifications).
Also, as I stated in the first peer review, the team did great job on providing code samples and stubs. That really showed that the team spent time thinking through the design and implementation.
Overall, I do believe all the changes are explained adequately. The document is only missing additional diagrams and well explained Test Plan. For the diagrams, please include at least 1 UML diagram with class, methods, variable names and their relationship."
1,"Overall quality of the explanations is good. Although, the more in-depth details are still needed to make the document clear.
I'm having hard time to understand ""Inefficient calculation of conflicts"" section and solution to that problem. Specifically, average of two scores 0 and 5 is 2.5 and if next submission has 2.5 score why should implementation consider it as a conflict? Isn't that how the conflict determined, by a threshold limit? How is the threshold generated? Does it include average. If yes, please explain how. Please elaborate on the threshold more in general.Also, the solution to the problem is unclear. The document states, ""Instead of relying on the average, we will iterate through all previous submission and will check conflict comparing them with the latest review."" So, your team's proposed implementation is to iterate through all (let's assume N) reviews and check each existing review against the new review. Hence, if the new review conflicts with every single N-th existing review, your solution is to send N number of emails? Or just 1 email?I do not think this is correct strategy to send N number of emails (each for N-th existing review). This  would be very inefficient and confusing. Also, I have doubts about sending only 1 email. What review would you include as being conflicting review (besides newly submitted one)? Definitely this sections requires a little more understanding.
Also, I'm a little unclear on the ""No separate view exist to show conflicts"" (it actually exists, not exist). Based on the screenshot I see that the page shows only one review. My understanding is that your team wants to render both conflicting reviews into the separate view. How would it look like? Is it two different reviews, side-by-side on the same page? Or is it going to be something else? Please, create such rendered page first and then include its mocked screenshot for additional clarity of your proposal. May be it would look too overwhelmed on complected and would require different approach?"
1,"Yes, the design mostly incorporates all of the functionalities required for this project. The document clearly states what functionalities must be added in the ""Problem Statement"", ""What needs to be done"" and ""Implementation"" (also adds high-level solution to the problem) sections. Very good work is done by the team to integrate proposed solution that has been done previously by different team (last semester) and team's own proposal, also considering the flaws of the proposed model. However, the design itself can slightly be improved by providing UML or E/R diagrams, which would help to clarify  implementation details for these functionalities. Although, the document contains workflow diagram, I think it is not enough for detailed explanation of the design.
Moreover, please consider implementation flaws that were reported to you (pull request is dirty, 107 Code Climate issues, and etc.) along with the flaws of the design you found.
Generally, all functionalities are discussed and properly addressed in the this design document."
1,"""Separate view will be created to address this issue"" is mentioned: what will this view look like? Would have benefited from mockups. The existing visual aids are still really helpful."
1,"The document did a great job at explaining the existing feature and how it operates. I believe the team should spend more time laying out their plan for improvement of the current feature as well as testing their changes. For instance, the Wiki has a Test Plan section that states the team will run existing RSpec tests. However, if the team adds new code to an existing model (i.e create a new method) or create a new model all togther, this would not have coverage in the existing RSpec. The team could state that they will add/modify RSPecs to have coverage of their new code."
1,"The team did a good job with the sections that were included with the document.  The problem tasks are clearly defined with well- explained solutions.  This team did an excellent job of creating diagrams that aid in explaining their design.  The team even included a test plan with some automated test.  However, the test section could use some additional details on how the tests will be performed and the code that will be used.  In the team's defense, it is a little early in the project to have test code developed since the code for the project itself has not been written.
 
While the document is very thorough, it is missing the names of the authors and a reference section."
1,"One small thing that was not clear is the feature that lets the instructor see what assignments a user has participated in. I looked at the Search For Assignments section and I saw some search filters like date_created, date_updated, but I didn't see user id as a filter mentioned in there. Since this is one of the core requirements, I feel you should mention this specifically in the Search for Assignments sections"
1,"I didn't understand the purpose of the ERD in your proposal. How are you using the ERD information to help your searches?
 
I also would've liked to see some mock-up of how you're plan on changing the views."
1,"Your explanation for how you're using automated testing makes it sound like you're writing tests after you write the code. Whether you're doing that or not, you can't make it sound like that.
 
As a personal note, I would've like to see the automated tests listed before the UI tests since that's generally the flow of testing."
1,"The team has tried their best to make use of visualizations. However, there are some serious concerns. The team used the name flowchart instead of an application flow diagram but have actually given an application flow. Flowchart is useful when there is a logic and decisions are made based on them. Please note this difference even though it may not be a big deal in this case. Probably a use case diagram would have made sense too."
1,"The team has mentioned all the types of tests that they will be doing. However, the team has not mentioned about any of the scenarios. Atleast a high level overview of some scenarios would help. The team also does not mention any of the scenarios for manual testing. The team could have used the previous team's teat cases for reference and built on it."
1,"The design appears simple enough. However, there is always scope of improvement. There hasn't been much discussed in the document about the implementation part as there may not be a concrete plan in place yet. This makes it hard to judge the design itself. The team should include more information in this perspective. From what is mentioned in the document, the team looks to be on the right track."
1,"Good job overall. As a reviewer, I would like to point out some problems. The introduction section is missing. It would be good to have an introduction section with other sections like expertiza and introduce the peer reviews before describing the problem statement. Even the problem statement fails to convey the message. However, reading the other section conveys what this team will be doing but the problem statement only conveys a part of what will be done. Please have a sentence about what is there and what needs to be done and the motivation behind it."
1,The team have tried to explain about the changes but I feel that the information provided wasn't describing the changes required to the system in detail. Rather they have extensively discussed about the working part. The team could include more information about what needs to be changed and where. Just an overview would be sufficient. Note that the files to be changed section has one line notes. This could be made more descriptive for instance.
1,"Views can also be tested automatically .But only manual testing is mentioned. Also, you could have mentioned scenarios that you are going to test in rspec tests for added methods in controllers. I would have liked to see the test plan a little more fleshed out."
1,The authors do not use any visual aids.  A diagram showing how expertiza will interact with the suggestion-detection API would be helpful.  A use case diagram would also be helpful.
1,I think the project purpose and project design is complete. They can give more details upon their testing plan. Like I am more interested on how they will do the performance testing and what is the metric they would be concentrating upon.
1,"They have explained their proposed changes and the files they are going to change for it.I feel there will be more files than they have mentioned.
They should explain how they are implementing their changes in more detail."
1,"The changes could be understood easily but might need more details. for example, 
""evaluate how much time this API is taking and if possible work a way out to improve it.""
could be more specific in the later doc."
1,Overall looks complete with little improvements necessary. Include a use case diagram or the final representation along with the flowchart. That's the missing part.
1,Test plan should be elaborate.The proposed changes can be refined to include more details. UML diagrams should be added along with mentioning the design
1,I think that the doc could be fleshed out more in terms of what changes you made and if there were any that you didn't expect. But as of now the doc looks good.
1,I think the Design Document is fairly complete at this point. They will need to come back at a later time and add in more details about what they changed once the feature is up and running. The only addition they could make at this point would be to address how they plan on covering verification of their code/changes. A Test Plan section could be added so the team can describe how they are going to add automated testing such as RSPec to increase coverage of the Expertiza project and to ensure their code is working as expected.
1,"The team did a good job with illustrations and diagrams for the Exiting Feature. However, there wasn't any diagrams or flow charts showing how the team was going to make improvements to the existing feature. I think a flow chart would do good to capture the thought process and flow of the future feature."
1,"The problem statement is good.  The design portion should include a diagram of what the UI will actually look like, not one with additional data that will not be included.  It should also describe how enabling the new ""debug"" option will be done. The testing plan should include more details, for instance ensuring that the data retrieved from the API actually corresponds to the question answer text.  If the comment text is not included in the analysis view, there's no way to ensure that the question answer text is what was actually sent to the API."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
Following are my observations:
1) ""book_tour"" method is found inside tour_controller, ideally it should be in bookings controller and method ""bookmark_tour"" is found in bookings controller ideally it should be in bookmarks_controller.
2) Method ""cancel_booking"" in Bookings controller performs more than one operation i.e. it updates the booking details and also updates the tour details. The code to update tour details is common and can be DRY'ed out.
3)Model ""User"" should have been named as ""Customer"" as ""User"" of the system can be admin, agents or customer and what I can see from the code is that ""user"" model is defined to implement customers model.
4) Also, the method ""cancel_booking"" has too many nested if-else blocks."
1,"user interface is very intuitive and easy to use. 
suggestion :
1. in admin login page, it would be nice to add a ""back"" button/link. for now we have to click ""back"" button of browser."
1,"I tried to use the app and following are my observations 
Customer:
1) When I logged in with the customers I was not able to ""search a tour"" and ""delete a customer""; hyperlink was deactivated.
2)Also, I was not able to edit customers profile.
3) When I clicked on ""My bookings"" i just found booking ID's, It would be good to have all the booking details.
4) I could not find any option to bookmark a tour.
5) Also, a customer can give reviews only for the tours that are already taken but I found the option to give reviews on the ""details"" page of the tour; ideally it should be included in ""My Bookings"" section.
6) I could not find any option to cancel bookings.
7)The UI to handle waitlist scenarios was very intuitive and found it very easy to use.
 
 Agent:
1)Not able to upload image while creating a tour.
2)Multiple Text field ""Name"" on Create a tours page.Also, number of seats in a tour should be numeric but it is accepting text.
3)When I listed tours through agents credential, there is option to ""book a tour"" and ""write reviews"". Ideally agent should be able to see all the customers who have bookmarked the tour and see reviews of the completed tour.
4)I could not find any option to edit a tour.
 
Admin:
1) link to edit an admin is deactivated.
 
Could not find any link to log out a user. Session Management, can be used to handle sign in and sign out functionalities."
1,"The code is easy to read and understand emphasizing on a good Ruby on Rails coding practice.
It would be better to have comments describing what the code is doing as I felt lost at some places.
Many functionalities of admin like editing his own profile,deleting a tour,user(customer/agent) and reviews is missing.Editing the profile is not available even for agent/customer should be present.
No Back/Logout option to come out of a session.
The validations for tour has a lot of problems.For instance I entered random text in the contact info while creating a tour and it accepted it."
1,"The writeup describes the reasoning and approaches used well.  I would note, however, that in some cases the code is actually changing the behavior of the application, which is strictly speaking not refactoring.  For instance, problem 1 now flashes an error for a previously allowed operation.  Problem 3 changed error message text.  Also, problem 6 simply added comments to a method that was seen as too long, which arguably does not solve the problem.  Problem 10 introduces the ""can_delete_topic?"" method which has side effects beyond simply returning a bool, which I believe is not really kosher.  A route was removed from routes.rb, which presumably also changes the application behavior."
1,"Looks like there maybe some residual TODO statements left in the code. For example in the ""def list"" method. There also seems to be quite of bit of unnecessary comments throughout the code."
1,There was no test plan section. Although as suggested above a video showing the passing of all test cases would be a great add.
1,The writeup provides detailed information about the different fixes performed by the author. More information regarding testing could be added such as a video of the rspec tests passing to prevent any issues being missed during refactoring.
1,"I sincerely believe that the team has made a great effort to put all their design choices into their documentation and I find the code to be explained in an easy manner. I like how the team has made use of a problem and solution format to drive their point home and the document is to the point.
However, I would like to point out a few issues.
1. The document fails to mention any testing that they have performed on their new code.
2. The implementation has not been hosted on any VCL or Heroku app, so testing their implementation is difficult for me as a reader."
1,"I'm not sure I personally like the @topic.update_attributes being such a long line setting multiple things at once. The old way of having each thing on its own line was more intuitive and easy to read.
Perhaps if keeping it the new way, each param can be put on it's own line and lined up, even if it's actually all one executable line of code."
1,"some methods are relatively long and may need to be split. For example, if-else statements are heavily used in the method and make it hard to follow the code."
1,"The test plan has been well explained. I have some concerns though. There are no actual test scenarios for rspec and capybara. At least an overview of those would have helped. Although the explanation is good and conveys to the reader what will be done, a little insight on actual cases could help provide more information. The manual tests are mentioned but more could be mentioned like testing what happens when tester unchecks all check boxes."
1,"I'm really happy that the team considered my suggestion in this perspective and have now included visualizations for the how the graphs would actually look. Good job. I do have to mention a few things though. The class performance graph is unclear on what it means or is a little conficonf. Please have axis labels for that. You can have axis labels for the class performance graph too even though it's already explicit. The design flow diagrams could have small descriptions on the arrows to make it easier to interpret the diagram. Also, if possible, the team could put in examples of graphs for each or some of the frameworks mentioned in the document."
1,They made use of visualizations here and there but i think they can add more figures to make their point more clear to understand instead of giving really lengthy writeup.
1,"The design documents and the explanations are too big, but other than that it is good. The only problem is most of the explanations were too big. They could have written it in short and provided external links to read more about them."
1,"The design looks neat and descriptive. All the sections are well described and look perfect. As a reviewer, I am making some suggestions, which I think would make this overall document absolutely perfect. First problem I see is that the introduction section is too long and reviewers do not like to read a lot of text right in the beginning of the document. I would suggest you to have sub sections within introduction like motivation and others. Second problem is that I feel that the section proposed changes shouldsbe under roject design section. Third problem is that the table of contents should be before introduction. I suggest having it before the Introduction section."
1,"The diagrams or figures that are used in the design are 1) representation of the previous implementation of functionality i.e. visualization to the instructor and 2) design flow in expertiza showing how the instructor will reach visualization page. The previous implementation diagram helped to understand how bad the system is in representing a bar graph. None of the diagrams are unnecessary, they are used to explain the flow. I think that the team could add a few diagrams about how the new functionality looks like though it is still not implemented, this would give the user a better understanding."
1,"There has been an honest attempt to include visual tools usign the current understandof the team. But it won't suffice for the final documentation. 
As I mentioned before a flow of MVC components can be more helpful.
The flow of UI can be shown using a screencast instead. 
The code changes can be explained using screenshots"
1,"The team has used enough visual aids which include a mock-up of their implementation and a flow chart of the design flow. 
Both the visualizations provide specific knowledge on what is to be carried out. The reasons for visual aids have also been provided. The flow chart of the design clearly gives an idea of what is to be carried out.
I would suggest the team to include more information on how the implementation will be carried out and mention it on the design document."
1,"The authors have not yet figured out/mentioned which all views and controllers they are willing to change. They have only figured the flow of UI which looks correct.
They have not mentioned any design/refactoring plans to remove smelly code or anythig that will potentially add smelly code () 
More feedback can be given once they come up with the final plan."
1,"The team should start with the existing code base in the merge request and see why it was not merged. eg. there are existing gems present to perform the tasks acquired by gems.
Some insights can be drawn from the previous implementation. There are a lot of things that are already completed in the previous implementation and the project does not need to start from the beginning. 
The team should rather concentrate on improving, refactoring and removing the merge issues."
1,"I like the documentation on the whole. It was simple and to the point. As I mentioned in above question, one suggestion is to add the diagram about how the new system is gonna look like. Apart from that everything is good. The authors are also advised to add the files where the changes are supposed to be made."
1,"The document does not have a lot of information for me to comment on the patterns and principles. I would suggest maybe to add about the way the code is written. 
However from their github page, I was able to see commits in assignments. rb model file. I am not sure what part of the code they committed but from whats there, the code seem to follow good coding practices."
1,They haven't incorporated any class diagrams but i think the screenshots they have attached helped me to easily visualize what the project is. It would have been much better if they had attached any UML diagrams.
1,"The test section of the document shows different test cases for the required functionality.
Some more test cases like the availability of Review icon even when the instructor is not teamed in it should also be checked."
1,The screenshots included shows about the different use cases of their feature which is very nice.The flow diagram of their logic or design pattern would have been nice to include in wiki page.
1,"They have just generally outlined the functionality to be tested as their test plan, but I would urge them to think upon more tests to test the code. Like RSpec tests."
1,The test plan is quite shallow as of now. They need to test the spec files and mention those accordingly. And give an exhaustive test case list with all edge cases.
1,They surely have improved from the last time. They have given a lot of pictorial descriptions to explain what all they are going to work upon and improvise. I think they can include more UML diagrams to explain the flow better and to summarize the tasks at one place.
1,They included screenshots to explain their problem. But they could have used flow charts UML and other visual aids to explain on them even more. It  would have helped with the understandability of the project.
1,"All the current design , its flaws and their design to rectify the problem in the problem statement. bUt they could have made it more simple by utilizing design patterns in them."
1,"Yes, the team does include a test plan, however, I found it to be shallow. The team has not specified which files they are going to test, and they have not stated the Rails framework they are going to use to test their implementation. Overall, I found the test plan to be lacking and should be explained in more detail."
1,"I found the visualizations to be decent. However, I would still have liked to see a use case diagram, or can E/R diagram or a UML diagram or an application flow diagram. The provided illustrations, however, provide information for me to understand what the team is trying to achieve here."
1,"Scope of Improvement:
The team has correctly mentioned some of the important edge cases. But I think adding the exact impacted files would have been more useful for the reader. Addition of impacted files helps to understand the exact test cases needs to modify. It also explains where new tests should be added. This is something I missed in the document."
1,"Suggestion:
Team has added screenshots which have now added more clarity to the design document. The screenshots were missing in the first round review.
The team could use UML diagrams which will put the functionality with better representation. Team could add Use-Case or Sequence diagram to elaborate on the features/future implementation."
1,"Yes, the team has written all the design problems and the solutions they're going to follow to fix these problems. However, they haven't added much about the patterns or principles that they're using. I suggest they add a bit about that to make their page complete."
1,"The team has included a test plan but the test plan looks very minimal, the team can extend it by including more test scenarios which add onto their document making it easy for the reader."
1,The team has included website snapshots but the team has not included any diagrams like UML or Activity in the document. My suggestion is to include them in the wiki page.
1,The design seems to be simple as the team included good explanations with diagrams but my suggestion is to include more code snippet explanations.
1,"The design follows all the appropriate principles, all the necessary patterns and the team has included necessary snapshots which makes it easy for the reader to map on the what is being explained. But one suggestion I would give to the team is to elaborate on the explanations."
1,"Yes, the authors have given good explanations in the wiki document but there are no diagrams. They should have included UML or DFD diagrams."
1,"I found the test plan to be inadequate as the plan includes statements which just describes ""what"" will be tested. A test plan would have been complete if the team had included ""what"" and ""how"" a functionality will be tested.
for example ""The score for the review should not change the score calculated from student reviews.""
The above statement does not explain what all things will be tested to verify the above-mentioned functionality."
1,"I liked the way the team divided the functionality and provided separate design for each task (makes easy for the reviewer to understand the design).
The design for task 3 could have been improved. I am not sure about this but instead of creating a new table to track the review_id numbers that are associated with instructor reviews an indicator (new column) in existing response could have been added.
The design would have been complete if the team would have mentioned the design principle/pattern used by them."
1,You should mention that you will test your controllers using RSpec instead of just manually testing the view.
1,The team did include the test plan which is rough. Some details could be added giving few scenarios.
1,The team did not insert class diagram but did include before and after pictures of the existing system and the features they are planning to implement. I suggest the team to add UML diagram or ER diagram which will enable the user to understand which files are modified.
1,Apart from any pictorial representation and some other stuff they have prepared a good design document. I think they could have given more information on how they will implement the functionalities. Like some design strategies they will use to implement this.
1,I couldn't find any UML or flow diagrams in the design document. I think they could have added a flow chart which will depict how they can categorize a student and an instructor doing  a review and a UML diagram depicting the functions that they need to implement.
1,"There are no UML diagram or chart explaining their project and their proposed design.
Some sort of pictorial representation or screenshots about their proposed design should be included."
1,"They have not really explained about how they are going to change the design and how will they add the required functionality.
Explanation about the solution for each problem should be found out and explained here."
1,"The problems are mentioned but the solutions are not enough and somewhat incomplete.
A lot of explanatory material regarding the existing functionality,proposed changes and the test plan can be added for the reader to understand how the project is trying to solve the problem given."
1,"The authors have not used any visual aid to represent their solution, I would highly recommend them to design a UML diagram so that the reader would be able to figure out what they are doing. They could have also mentioned details about how they plan to design the UI which would have been interesting to see."
1,"The authors have given just a brief idea of what they are going to implement. I would like to see more details. For example in the place where they have mentioned that instructor should be able to review any team that has submitted the assignment, they could have detailed more on which files they will be working on, what UI they will be trying to attain for implementing this function and so on."
1,The design doc need lot of work. They should provide more details as to how they are going to implement the whole design. As of now they have only the work that has to be done in the doc. But Im sure they will add the details in the upcoming submissions.
1,Their solution lags UML diagram or just a simple flow which would better explain what is the intention of the implementer. Here it is very difficult to get the picture of what the implementer is going to code.
1,"I don't really see an implementation design in the document. The solutions mentioned just speaks about an overview of what needs to be done. I think they need to dig a little deep in to the code to know where all they need to make code changes , or add files if any or make any schema related changes."
1,"The solution part is somehow vague and doesn't really describe their approach to solve the problems or rather what their implementation would be. Like mentioned above, a picture is worth a thousand words. Even a handwritten diagram would have helped here."
1,I like the way they have identified the problem areas that are pertinent to their project. I was expecting a picture to describe how would the problems when solved would culminate to the final aim of the project. The picture would better give an idea to the reviewer about what exactly is going on the implementer's mind.
1,They should include design implementation and testing plan which is not complete according to me. May be once they start coding they can update the wiki page in parallel.
1,"The document needs to have proposed changes, files identified, test plan and UML diagrams."
1,The solutions werent that detailed they mostly comprised of only one line and/or incomplete.   There was no diagrams or screenshots for more comprehension. Some solutions was t be put up later as well. They could expand more on their implementation.
1,"I did not find any useful visual aids. I suggest that the team include some diagrams in the code to improve their documentation. Some of them could include a use case diagram, a UML diagram, a workflow diagram, etc."
1,"Scope of Improvement:
 
The design document does not cover any diagram or flow. The project is straightforward to understand. But team could show existing flow or next flow via UML diagrams. This is something team could really add up to the document."
1,The design looks good. But I am unsure how it will impact the response time of the system. Team should make sure that the query logic they are going to add (if any) should be optimal and should not worsen the performance of the system.
1,"Scope of Improvement:
Though the team has done a great job in figuring out ""What to do"", the design document does not cover much ""How to do"" part. It would have been better if the team could have included what exactly technical changes they are going the make. team could have include any technical research done regarding the project."
1,"Suggestion:
Team could add the diagrams and flows in the document which will help reader to understand the existing functionality and suggested changes quickly.
Team could work on elaborating ""How"" part? (meaning how actually team is going to complete all tasks)"
1,The team has not included any diagrams in the design document and it makes it harder for the reader to understand what the team is trying to convey in the design document. Including a UML diagram would be a good update the team can work on.
1,"The design seems to be incomplete and the team should make sure they try to improve it. The new designs need detailed explanations on the implementation part. Also, there could be some gems that could simplify the process."
1,The team has mentioned good changes to the design but there could be more detailed explanations of the same. the team could include diagrams to explain what they want to convey.
1,"There is a lot of scope to improve the document, wrt to functionalities, explanations and diagrams, test plan, all these areas have to be updated by the team in their next submission."
1,"The team has done a good job in specifying the ""instructor icon ""  that would be used to indicate an instructor review as it clearly explains what is expected.
Apart from this, the team did not utilize any other visual aids to help the user to understand the project.  
I would suggest the team to use the visual aids from the writeups of the previous teams that worked on the same project in the past as it makes the functionality more clearer."
1,"I am unable to comment on the above-mentioned points as the team did not specify the changes that would be made to fix the issues. The solution mentioned are very much generalized and does not provide content which can be reviewed.
I would suggest the team to put some more effort in clearly explaining the approach and changes that would be implemented."
1,"The team has divided the functionality into various tasks and each task has a ""solution"" section which would indicate the changes that team would be implementing to fix the functionalities.
I found the explanation for the solution to be inadequate because the team did not mention the code that would be changed.
for e.g. ""Find another way of indicating the review is an instructor review."" : This statement doesn't provide sufficient information.
I would suggest the team to include all the codes changes with adequate comments explaining the reason behind each changes."
1,"The team has done a good job in dividing the functionality into various tasks but as per the requirement description ""This project was done last spring, but was not accepted because the code was too messy and added many special cases to various classes that would cause confusion later on"".
The major task of the team would be to fix all the issues mentioned in the ""comments"" sections and it would have been a good design if the team would have touched all the issues mentioned in the comments since that would the major part of the implementation."
1,"The team has mentioned the project purpose but I found it to be quite inadequate because it just explains the functionality. The main purpose of the project is to fix all the code issues which were identified on the code changes done by the previous teams.
The team needs to work on the project design as the current design mentioned in the writeups lacks in specifying the details. Also, the team needs to specify the design details to fix all the issues mentioned in the comments section.
As per the requirement document, most of the testing is already been done by the previous teams but it would be great if the team can utilize the same testing plan in the current writeup to verify all the changes."
1,"Expanding on your verbal explanations and adding visual aids would be helpful!
No testing plan stated."
1,No Travis CI did not pass. The controller and feature sections are failing. The controller is failing due to  Missing template sign_up_sheet/create. The feature section is failing due to each not being defined in child_nodes.
1,"The write-up is good. The team has clearly stated the problem statement and they've mentioned how every problem was solved and what changes were made in the code. The only problem that I found was that, nothing was mentioned about building and testing the code. This made it difficult for me to follow the instructions from elsewhere in order to test their code. So, instructions on that could have been added. Also, nothing was mentioned about some of the design principles they've followed."
1,"The write up is good in terms of readability and clarity of information in the contents.
My small suggestions would be to add more about how the tests work. And they could have mentioned what design pattern they followed, why they chose to solve the problems they way they did."
1,"Their writeup is decent and they do have some good implementations in their fixes. Using helper functions where the code was not DRY before was a good strategy to make it DRY. However, I did find some objections to their choices:
1. The team showed what solutions they implemented to fix the bugs in the code, however, they did not show a ""before and after scenario"" to argue why their code implementation is better now. Some of their code snippets are confusing as to what they are trying to accomplish in that code. 
2. They renamed ad_info to get_ad. However, I believe a more intuitive way to rename this would be get_ad_info, especially if we are not trying to use every ""ad"" information here."
1,"No tests were added and travis did not pass.  Since new methods were introduced, corresponding test cases should have been added."
1,"I found the code to fairly well written. I dispute some of their naming choices and the lack of testing documentation makes it harder to review. Some design choices, on the other hand, like the use of helper methods, are good. I believe that they tried to make their code as DRY as possible. I still believe some of the if-else statements in the controllers should be entirely moved to a helper function."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
Few Suggestions:
 I found there is too much logic included in the controller(specifically BookingsController) this can make future changes to code base difficult and error-prone.
There are some occurrences of ""puts"" in controllers and commented codes in views. Ideally, once the code is known not to be useful, it can be removed."
1,"Use Case Diagram is very high-level diagram and very helpful in understanding of the roles of each user and how rubric changes can be done (by instructor) and regulated by affecting each relevant user (who has already start review). Data Flow Diagram on the other hand is a little confusing to me and I did not follow it right away. After I thought it through and spend some time on it, it was clear. Therefore, it whether should be improved or followed by detail interpretation of the diagram. Also I think it would be good idea to add another high-level workflow diagram to indicate possible if/else conditions for regulating rubric changes instead of describing it within a text in the ""Proposed Code Changes"" section. This would really facilitate with high-level design understanding of the problem prior providing reader with UML diagram.
Unfortunately UML diagram is missing and I think it is required for this project considering the changes that needs to be done. Please create UML diagram and include it along with Use case, and Data Flow diagrams.Along with Use Case diagram may be add a screenshot on the page where and how instructor may change a rubric while assignment is in the progress. It is not necessary, but again this would give extra information that can be helpful to someone. Hence, after analyzing ""Design Diagrams"" sections, I can conclude on the following points:
1) All provided diagrams (Use Case Diagram and Data Flow Diagram) are helpful and necessary for project understanding. Although Data Flow Diagram is a little hard to follow. However, there are some diagrams that are missing: UML and workflow (optional) diagrams. Please, whether re-work Data Flow Diagram or provide some interpretation on it.2) I'm not sure about Data Flow Diagram. I do not think it follows standard diagram conventions (all of the lines have single headed arrows, not sure this is the case for Flow Diagram).3) Use case diagram is high-level, but it provides required and necessary information about the project to the user. I would also add another high-level workflow diagram for better project understanding."
1,"Code changes proposed by the team in the document are appropriate and follow good RoR coding practice. However, I would like to point out few minor things in the code that can be potentially risky if not handled correctly and some other general concerns unrelated to the execution of the program can be slightly be improved.
a) Variable name num_of_existed_questions can be changed into something more meaningful. For example, existed_questions_count or something similar. In general, try to avoid num_ prefix to any variable. b) The case when questionnaire_id is nil is not handled properly in the add_new_questions method. Make sure your code handles nil cases appropriately. For example, consider the following code changes:def add_new_questions  questionnaire_id = params[:id] unless params[:id].nil?  existed_questions_count = Questionnaire.find(questionnaire_id).questions.size unless questionnaire_id.nil?  # Handle situation appropriately if questionnaire_id is nil.
I do not see any other flaws weaknesses, or vulnerabilities in implementation. After reviewing design and proposed code changes, I can conclude the following:
1) both add_new_questions() and update() method are planned to be added and updated respectively in the questionnare_controller.rb file (QuestionnareController class). This is correct place (class) where methods must be added and updated. The rest of implementation is a matter of finding correct leverages/methods for performing the res of functionality (e.g., sending email notification and deleting reviews as necessary per project description).2) New design may potentially introduce bugs in case when questionnaire_id is nil and nil is not handled properly in the code. However, I already mentioned this above and proposed solution to it. So, there should not be any code ""smells"" introduced within proposed changes.3) No, on opposite, the new design is very easy to understand and follow. I believe that team has chosen the most appropriate design for this project. There is nothing complex about it. Good work!4) New design may potentially increase response time of the system. However, this is not due to complexity of algorithm or inappropriate design. If this is going to be the case and response time of the system is increase when rubric is changed while assignment is in progress, it is due to the fact that now system must do some extra work (determining if rubric is replaced or the items/questions are changed, retrieve previously done reviews and email these previously done reviews to reviewers). Unless all these tasks are handled by a separate thread, it is possible that these changes may potentially increase response time (which should be very negligible if code is implemented correctly).5) I think design document looks very good, it covers enough detailed information and includes all necessary information. Of course, it can be expended even more, but it does not need to. It only misses workflow diagram as I described above."
1,"Very clear and adequate explanation. I really like that some effort was made to think it through the problem, find appropriate solution that your team proposed, and break down solution into two different implementation phases with concrete examples (code snippets). Very well done.
The only confusing part of the entire design to me was Data Flow Diagram. If you do not want to change anything about that digram please at least provide some written explanations on how this diagram can be interpreted (provide some bullet points while walking through the diagram). I had to spend sometime until I understood it. However, if apposite explanation was given, it would be a lot easier to follow it.
Also please back up your design with a high-level workflow diagram to indicate possible if/else conditions for regulating rubric changes. This is really required to understand high level design prior providing reader with details implementation.
Furthermore, I noticed that not much was added into the Test Plan section. Please make sure to elaborate more on this section and test your changes appropriately with the following steps:
1. Code inspection2. Pass existing Rspec tests3. Write additional Rspec tests to test your feature4. Run some UI tests
I have no further concerns with other proposed changes made it by the team. Very nice work!"
1,"Yes, the design incorporates all of the functionality required for this Project (to regulate changing of rubrics while projects are in progress). Even more, the document breaks down required functionality into next level of granularity by identifying 2 design and implementation phases (""Identification of edit"" and ""Email Notification"") with detailed approach of each phase (including code snippet). Great work bu the team! Very well-written document that has all necessary information about the features the team is implementing. The document reflects precisely on what needs to be done and furthermore, provides explicit details on how it needs to be done (by obviously having it thoroughly thought).
The only minor improvement can be done over Data Flow Diagram. I found that diagram a little confusing and I had to sit on it for 10 minutes or so until I understood it (still I'm not really sure if I understood it correctly). I think it would be very good idea to include workflow diagram to reflect two possible case scenarios (if/else): i) If there is a change in the number of questions, and ii) if there is no changes in the number of questions (also splits into two cases: whether if there was really a change or there has been equal number of additions and deletions). It is not required, but it would be very helpful and you would not to write all this information explicitly. And this would also help to understand Data Flow Diagram.
Since all required functionalities are incorporated into the design, therefore, I can conclude that the team did not miss anything importation and completed an excellent job on providing details for each functionality to be implemented."
1,"Some important information is missing and needs to be added into the Design document. Although all the key parts of the design are present in the document.The ""Design Diagrams"" section is missing UML diagram and Data Flow Diagram is a little unclear to me (consider reworking it or adding interpretation of the diagram as a text below). Also consider adding workflow diagram to indicate possible if/else conditions for regulating rubric changes instead of describing it within a text in the ""Proposed Code Changes"" section.The rest of the project design section is clear and complete.
Project purpose stated at the beginning of the document is very clear, concise, and complete. No issues found there.
""Test Plan"" section is incomplete (not because information was not added, but because it does not cover required testing strategies). Please consider adding at least two sections within ""Test Plan"": ""Rspec Testing"" and ""UI Testing"". Also reflect on code inspection and how (if) it was done.
Include missing sections, such as ""Conclusion"", ""Team members"", ""References"" and etc.
Overall design this is very good design document! Great job!"
1,"Great job explaining test running process. However, Test plan is not explained well and I suggest explaining what files you intend to change and what new tests need to be added for refactoring."
1,This is a Mozilla project so I am not able to comment on a few questions. But the design proposed right now is just a small snippet which mirrors the implementation of the adapter.rs file. I was not able to see any specifics as to what the function does or what the intermediary calls do. They could have elucidated more on the same.
1,"1) By seeing their wiki page design document i can say that they have properly designed the function such as the BluetoothDiscoverSession and moreover this is a mozilla project.
2) I don't think their new design which has some functions will try to create more problem or bugs. They have designed it properly in a good way.
3) This is a Mozilla project, so there are no gems in this one.
4) This is a project for creating a new functioality and I dont think this involves optimizing response time
5) They could have spent some more time on writing some detailed explanation. But other than that i think this is good."
1,explanation are hard to follow. No preface about the issue proposed. I have no idea about BluetoothDiscoverySession either. So please spend some preface to explain and give the need for the project or an intro would be nice.
1,The code was not deployed to test the UI but the manual testing shows a working screenshot of the UI. I would suggest deploying or making a video.
1,The writeup is very descriptive and well written. The only suggestion I have is to explain more about the manual test since the code was not deployed. Also explain more on the strategy pattern in your scenario instead of a generic definition.
1,"I feel the code is ready to be deployed with a little modification that will help in improving the codeclimate responses. 
There is no need to redo it from scratch. Others might feel that some more refactoring can be done. For example, the naming conventions are improved keeping one thing in mind, the common goals can be self understandable, and not clog the function names. There can be many other directions of improving the  naming conventions such as -
The 'get_link_updated_at' function name does not make much sense or give idea of whatt it does.  - it could be changed to -> 'get_last_modified_link'
Many variable names could be refactored as well, not qouting examples as there are many.
But how much ever the team has done, it is functional, tested, working and improving piece of code which I appreciate."
1,"Write-up looks good. They have explained why they have refactored, what they have refactored.
They could have included a portion on why they 'have not' refactored certain functions, like what they thought made it a good function or pattern for not changing the existing code/name. I hope I make sense.
They claim to use strategy pattern, but I am not sure how. It would have been better if they had given a bit of description on which of their code implements strategy pattern and how.
To make the entire document more succinct, they could have added some more explaination to their screenshots, though they are self-understandable, but might not be so for someone who does not want to delve very deep into their code or implementation."
1,"Although there is a test plan section, it does not provide details about what is to be tested from a functional perspective.  While the team may not know at this point what classes and methods might be involved in the unit tests, the test plan could have included information about what user actions could be tested, e.g. enabling the questionnaires to vary by topic."
1,The good news is test coverage has slightly increased. Bad news is that there are shallow tests. Fix this by writing relevant expectations (not static contents like html code).
1,No testing link provided. Team should have deployed in an vcl instance to allow testing of changes by the team even though this a refactoring project.
1,"Looking at the pull request, I see that the build passed in Travis CI. However, there are unnecessary rspec gem require. Suggestion: remove it as it is already included. The expertiza-bot also suggests to avoid shallow tests by writing relevant expectations (not static contents like html code)."
1,"Team has discussed that they might not need any additional test cases. As the team is refactoring, they might need  more tests to be moved along, but this shouldn't affect the coverage in any way."
1,"as they are just merging the two files and as the two files does has its independent test plans the team has planned to go with the previous files, although I feel that they should come up with custom tests as the new controller is modified and does need testing, and the previous tests would not cover completely."
1,"Yes, throughout the design doc they make sure, they pay heeds to testing. I am sure they will figure it out better after the completion of coding phase. 
They have figured what they need to test but haven't laid out the exact plan.
They need to come up with the exact RSpec test they will implement and also manual testing including the visuals would be a good addition."
1,The design does include a test plan section but more information can be provided regarding the structure of the test among others.
1,The team mentions they are rearranging code which does not require test modifications. My suggestion is to add a screen recording showing the tests passing after implementing changes.
1,"Team has added 2 diagrams to explain the movement of import/export functionality from ""QuestionnaireController"" to ""ImportFileController"". This adds to the visualizing the project. However, addition of few data control or data flow diagrams might have helped. And also UML diagram to show various controllers using ""ImportFileController"" would also help in better understanding"
1,They have some visualization diagrams. The diagrams are very simple which is easy to read and understand. They could have more complex diagram to help explain their design work.
1,"The two visual aids provided in the wiki page are not clearly labeled and appear to be created in a disorganized/haphazard manner. Moreover, no explanation has been provided for each diagram and thus makes it difficult to understand it further. I would suggest to label each type of diagram, whether it is a use case diagram or a data flow diagram."
1,"5 point because they have made tremendous improvement from the last version. Hats off guys! The visualizations used are clear, to the point and precise. 
Something that can be added,
1) a flow of MVC component changed and the interaction with model and views are taken into consideration.
2) Use case diagram to explain the actual problem statement (though the team has done good justice to textual explanation)"
1,I have understood through the visual aids what function is controlled by the controllers . but it could have been labelled properly in a more professional way.
1,"Design appears simple. Team has considered not to make things overly generic and this is one of the highlight for the project. Yes, we need all the import/export to move from one file ""ImportFileController"" but as there are way too many places we have import/export, this might have made the team in making this more generic. But the team has considered only to make some stuff generic and leave the rest of the logic to corresponding module implementing import/export"
1,"The design appear is quite simple but not enough, they need more information on what they will change and how they make the changes. This will make the design more understandable."
1,Based only on the visual aids provided the design looks extremely simple although a further explanation on each visual aid would be more helpful.
1,"the does seem to be simple as the work is straight forward, and i feel that the design could be made more simpler or kept as it was and not combining the two controllers."
1,"The design appears to be straight forward. I don't think there is any other better way to generalize the functionality. The design explained very nicely as to what they will be removing and adding. 
The design could be explained in a more sophisticated manner after they have completed the coding by introducing the new exact routing process of controllers for each functionality. Right now, they only explain it for questionnaires_controller
More explanation of the code can be given, only diagrams won't suffice."
1,"It does appear simple, but I feel the latter part of the document is too simple. It needs more work. The export changes can be explained better so as to know what is actually happening. They mentioned they have not done a deep dive on this functionality yet, but a very brief outline of the functionality or a diagram could have been done. Overall, good document though"
1,"Yes, the document is well designed but one suggestion is to not put screenshots of code. Our mentor has advised us to avoid this practice and instead , paste the few lines of code"
1,"Yes, The explanations are explained properly. There are different cases mentioned and how the team is trying to pull out all the import/export functionality into ""ImportFileController"". Adding few more details on how the team is handling export functionality would be a addon. As the team hasn't started working on the Export functionality yet, this is completly fine at this moment"
1,"The authors explained what should be changed and what has been done before, but didn't talk too much how they gonna change in the design. They need to put more details on what they gonna do on the project."
1,The authors have adequately explained the changes made to the system although a bit more explanation on the visual aids and their types would have been very helpful.
1,"Yes, they have explained the existing problems and changes that they have already made and will be making all very clearly. 
Cutting 1 point because the team is yet to figure out some changes that need to be made. Here are few:
1. ImportFileHelper, the ImportTopicHelper, and the QuestionnaireHelper helper functions need to have a common implementation, they have not given a plan for the same. 
2. There seem to be a change in view - I do not completely understand what they meant by that and why they want it changed (point 4 in the section ""What needs to be changed"")"
1,"Yes, they have adequately explained what they intend to do. But the latter part of the document need a little work. Perhaps, that could be done after they finished the project"
1,no visual aids are post here and it's better to add them later.
1,"I could not find any evidence of visual tools, it would be great if the team could add some. Probably they are yet to figure it out.
Some basic examples of visual tools that would be helpful for readers are:
1) Basic structure of existing UI, and new UI if there would be any change (From reading their doc, it didn't seem like there would be a change in UI)
2) A flow diagram of MVC modules that would be called and used in order to implement the features.
3) A screenshot or screencast of the implementation in action"
1,"There are no visual aids. Also, the link published on which Expertiza is supposed to be running does not open."
1,Their designs are not listed in details and may need to add more details about it.
1,"The new design has a good motive. The team aims to correct the right things. It would be better if they mention the code blocks where they can change to make it more DRY and what are the if-else blocks that they targetted. Basically the doc needs to delve into the code and walk the reader through the actual changes. that has been/will be made.
The import export gem of active records can be used and the though some helpers are deleated, a helper for routing different controller in different way (polymorphism that they planned on) would probably require them to use a helper which they have not mentioned."
1,"Test plan is clearly explained by the team. There is an extensive list of cases that the team will need to test for the changes to be made. However, most of the cases added by the team already exists in ""expertiza/spec/controllers/grades_controller_spec.rb"" file. Mentioning again the same things things might not be helpful. Rather explaining the tests the team wants to add would make more sense. This also goes with the mock roles code snippet. It is the direct copy from the old file. The best option I would suggest is to come up  with a test design and explain how the team is trying to test them.
 
With respect to UI Test, team has discussed a test case for Github. Explaining a bit more might be helpful"
1,They seem to be improvising the previous pull request and not writing an entirely different functionality from scratch. So as such I don't see any mention of a design pattern but whatever they have suggested in the wiki page is quite understandable and they are trying to remove the code smells and adhere to the MVC architecture and DRY out the redundant code.
1,"Authors have used the Use case Diagram to explain their design. In both the use case diagrams added Instructor is the actor who is viewing the teammate review. However the Caption to the diagram shows us a different story. caption says "" Use Case diagram of two approaches to append 'GitHub contribution metric' in teammate review"", but the Use case diagram corresponds to the viewing of github metrics. It would be great if the Caption reflects the image being used to depict the Use case."
1,"At this moment, it is very hard to tell anything about the proposed design change. The major factor for this is, there is very limited information on how the team is making changes to the existing code base. For example
Move JavaScript Code
Problem: There are some JavaScript codes in inappropriate positions.

Solution: We need to replace JavaScript codes to 'assets' fold.
It is very hard for the reviewer to understand what changes the team is implementing. Also, the major design change of adding a new controller ""Github_Metrics_Controller"" is discussed in the document without much details on its implementation. Also, validating the reasons to add new model and how these models are attached to the existed ""Grades_Controller""  would be a great addition"
1,"There are some changes mentioned that can be explained more clearly.
for example - There are some JavaScript codes in inappropriate positions.
it will be better to understand if the team also give example as which place is inappropriate for the javascript code in the existing code base.
another example - They missed some testing for their newly added functions.
in the above line, it is not clear as who is referred to as 'They'. it is better to give brief info as who 'they' refer to and for which function they missed test cases."
1,"The document includes all of the right sections, but not in the right order.  The introduction section is good, but the Project Task section should be renamed to Project Tasks.  The text is a little disorganized as some of the text would fit better under a different section.  As an example, the text under Project Task might fit better under a separate section called Previous Work.  The Plan of Work section is a good start. However, it is missing many of the implementation details.  The Refactor and Improvements section should be moved inside of the Plan of work section.  The Test Plan section needs more details on how the code will be tested.  The References look good."
1,"The design doc has a done a justice to understanding the basic implementation they need to perform. 
They can still improve on it and as they go along the implementation they can add the code modifications and explain them in the documentation."
1,"Yes, the write-up is very good. They have added almost everything that's required. The only drawback in their write-up is not enough explanation for the code snippet that they've added. I suggest they add comments or explain the code a bit to make their write-up complete."
1,"The design looks simple. Their plan for the final project is understandable. If they could brief more on the steps in terms of the components involved such as PannerNode, StereoContext and so on, it would be even better"
1,"They have the standard Servo tests outlined in the test section. I'm not sure if they can have some explicit test in place to see the functioning of the DOM interface etc. So I am happy with the tests, They could have also mentioned this better in the document."
1,"Yes, I do not see any unexpected complications. There are simple flow charts to help visualize what the options are. But I would like to see more detailed explanation as to what exactly the function does, as stated in the previous answer. Also for the DOM interface for the StereoPannerNode, Im not sure as to what functionality is being executed from the design document."
1,"The design document appears to have the necessary information for the steps to be followed. In the implement an audio node message that is specific to OscillatorNode, I would have liked to see more details as to what exactly the function does and how their functionality is going to improve servo's functions. They have also not mentioned as to how they are going to solve their previous problem as that solution is still open in the pull request."
1,"Yes and no, because even though they have added details as to what has to be done to the system, Im not able to clearly see what functionality is being carried out by the functions they are working with. It would have been nice if they had explained more on StereoPannerNode, OscillatorNode etc so that the user gets a clearer grasp on what exact function the authors are working upon."
1,"I can see that they have explained things properly which makes me understand the concepts and what they are going to implement. Thus i feel that the design document is simple. But i think they could have created a new wiki page and display details only for this project instead of tagging along the previous project, because i felt that the design document was too big."
1,"Yes, the document contains test plan, but it only shows me how to run the test. It will be better to explain more details about the cases they test."
1,"The structure of the document is great. In the design document, it said that ""the project didn't use any design pattern since it's implementing methods."" I think they can introduce the design pattern about the controller."
1,It would be better if you could provide some details of the test.
1,"The design document looks good. It covers every point and has visualization. Only suggestion, can you reduce the code snippet to the part useful."
1,The explanation is good and easy to understand. Can add more details in the testing section.
1,I am still a little confused about the where this is all happening. Some more details would be useful for the reader.
1,They sound reasonable. I think those UML structures try to depict overall sense of understanding of their deliverable. However try adding more about mach tests instead of citing what does the readme does. I would like to see more content on testing for that matter.
1,I couldn't find any UML diagrams or any other diagrams to support the wiki page. They could have given some flow diagrams on how each functions they have to implement work. They could have used some depictions to explain how the project works.
1,I do not find any UML diagrams in the document. I think it would have definitely been better to list the functions that have to performed using a diagram. They could have explained how to create the DOM Interface or the backend for StereoPannerNode using a visual diagram. Could have made it easy to understand how they are planning to go about the implementation.
1,They said that there was no design pattern but some more information about how methods are being created would be helpful.
1,"The team has mentioned the next steps, but more details could have been given on how they're going to implement it."
1,"They have included all the functionalities they are supposed to do and they have also provided good explanation and samples they will use to implement the functionality. They could have  given more information on what the function must do. They have given how they will do it, but could have mentioned what it does, that way it could have been easy for the reviewers to understand."
1,explanation are hard to follow. No preface about the issue given. I have no idea about audio node either. So please atleast explain and give the need for the project or a intro would be nice.
1,"The authors have given an explanation as to what work they are trying to accomplish. I think it is to the point but as I stated before, would have loved to see more information as to what exactly the function performed."
1,The authors have added a section called the Planned work that explains more on the subsequent steps section that is given in the Mozilla documentation for their problem statement. They have given some details as to the file that they will be modifying but it would have been better if they had shown a representation as to exactly what changes they were going to implement. For example. the StereoPannerNode in the media crate is to be worked upon but no information is given as to what functions that it performs.
1,"The team has covered all the next steps that they're supposed to implement, but the team could elaborate more on how the implementation is going to be done."
1,Like i said before they still have to elaborate on how to implement the functions and what they do. They still need to work on the document to explain the project's core functionality.
1,"The test plan is included as expected. Good job. However, the content of test plan section looks vague and incomplete. There is some content in the test plan that really should be in an implementation section. The only relevant point mentioned is that the team will write cucumber and rspec tests. This looks a little vague to a reader. The team could have created some scenarios that they plan to test and described it here. Even though it's too early, the team could have atleat put in manual test scenarios."
1,"They have included a test plan section in their design document and have mentioned that they will use Cucumber and Rspec for testing.They have mentioned about the functionalities which is what I think they will be testing and it seems appropriate.
Some test examples for eg. for invalid inputs or self_review score not given by the student or some test cases could have been explained to show how they will be testing their methods would have been better."
1,"The team included several visuals of their project.  However, it is not clear if the visuals are completely correct nor do they appear to address every part of the problem.  It would have also been great if the team included images of how their proposed solution would appear to the end user."
1,"The authors seem to understand their problem statement well and have explained it beautifully. The implementation part is also described but looks the authors are yet to figure out how to make the changes as mentioned in the document. One suggestion would be to have a quick look at the code and give an overview of what changes the authors may be needed. After all, this is a design document. This is the only thing I felt was missing and rest of the things are well done by the team."
1,There is not much 'explained' under each functionality.  A small description under each task would have made the page better
1,"They have included the flow chart and use case diagrams which explains their logic very clearly.
Although screenshots can be added about the existing functionality as it will be better what they are going to change it to.
Flow of their formula could also have explained through some diagram for better explanation."
1,"The application flow and use case diagram convey the same message. Remove one.
Provide more details/explanation for the same."
1,"They have included almost all the information like the current process,proposed process with the design and the Test Plan.The test plan has some generic information.This could be improved and relevant tests related to the projects could be explained."
1,"Authors have tried explanaingthe rationale and the files they plan to change. However, at this stage there is less clear information on how the team is going to implement these changes. Also, some of the content needs to be explained a bit elaborately. For example: 
Additionally, Questionnaire relies on a helper that can import Question objects from a CSV and adjust the size of the associated QuestionAdvice
For reviewer, it is very hard to understand how the flow is explained. More explaination on what Question Advice and other things would help the reviewer to understand things clearly"
1,They have a good quality of the description of the project but need more details of the explanations of the project design part.
1,"The textual description of the project sufficiently describes the changes proposed by the team although a visual depiction of the changes, such as an use case diagram or a data flow diagram would be a more intuitive and detailed approach to explaining the proposed changes."
1,"Good plan so far, need more details around what is being refactored and how you are going to replace all the functionality you are removing."
1,"The proposed work by the authors is legit. The explaination is not hard to follow. But I think the team should expand on the part of ""proposed changes"". It would be a good way to take each of the functionalities that used to use import/export feature and explain them seperately on how they plan to handle it.
There can be a lot of addition which I will mention in the upcoming questions, then we can comment on the quality in a better manner. But for now, the documentation is explained in a very simple and basic language which is great."
1,"Overall the wiki page looks great. Some of the suggestions that can make this better are:
- Explaning how the team is trying to implement would be a great addon
- As the team is planning to change data route, it would be great addition to add data flow  diagram for every change
- How si the new code being added. what is the design pattern used? What changes is the team planning to make?"
1,"Their doc just starts with some layout. Still, need more details of each step and describe how it works."
1,"The only important part that is missing is the visual aids. You could add UMLs, Use case diagrams, data flow diagrams or activity diagrams to enhance the doc."
1,"the design document is fairly complete, test cases and the test plan are missing"
1,"The doc seems to be written with care. Although some parts are rough and there are no visual cues, but the solution seems to be plausible."
1,It's good. I think adding diagrams and code functions in the future will complete the wiki. Good job everyone.
1,I think the description of the project can be split into chunks. It could include the project purpose and design. There is no test plan.
1,"Very clear, with the exception of how this requirement was met: ""In addition, functions code can be optimized to ensure that it follows DRY principle""
Also, one unneeded method was commented out.  IMO it is preferable to remove such a method entirely rather than commenting it out."
1,"The writeup is good and has well structured. However, I felt that design pattern should have been above the implementation section which makes the reviewer look for what kind of design pattern they have implemented and then check for the same when looking at the refactored code. And same with screencast. It should have been above the implementation section."
1,There seem to be no tests required for this project.
1,they have added some graphs to show the relationship between variables/class
1,The names are definitely shortened which is good. However they still include the 'get' prefix where in most cases its not really needed. For example get_team_color can be replaced with team_color.
1,"The writeup includes before and after, and mentions the design pattern used. However, I would advise more explanation on the strategy pattern and concrete examples through screenshots. Overall good attempt!"
1,The written code is easy to read and understand and merges well with the existing code base. The function length can be improved and the DRY principles should be kept in mind. Some code get repeated which can be merged into a helper function.
1,They have given examples for the renaming the method names and adding comments to various functions which is good. However I felt they could have cut this down short by giving fewer examples and giving more examples for code optimization for implementing DRY principle which they mentioned in the problem statement.
1,"A high-level overview is given in regards to what was done and why it was done, but it is not explained on a case to case basis exactly why things were named as they were. I think significantly more detail can be given here."
1,"Authors have mentioned that the team has used Strategy Pattern in the last section of the wiki. Overall, there are just 28 lines of code added and I am not sure where this pattern has been used.  From the three partials changed, the method names are changed and in the helper file,  its mosly refactoring the method name and adding comments
 
Any inormation on how the team has used the Strategy pattern and why did they use this pattern would help the reviewer to understand the writeup in a better way."
1,"The test coverage was reduced by the changes. Also, there are a lot of code climate issues that came up. You can work on them to overcome that and it will help in improving it overall."
1,"The writeup mentions the changes performed but not the motivation behind it. Also regarding the Design principle, it just mentions the pattern but not the part where it was used. It would be easy if you could point out the part where you used the pattern in the writeup."
1,The writeup is very well written and it covers all the changes they performed but not the reason as to why a certain change was performed. Can include extra information regarding the reason for the changes.
1,"The project is not ready to be deployed. The biggest concern is the build failure. Also, the authors have not provided a VCL instance to test changes and not given screenshots in the documentation of them having tested those changes. This makes me a little apprehensive of deploying these changes. I do think that the work that has been done is worth while. It just needs a little more effort to make the build pass. I don't think that this warrants enough work that another team has to be assigned this project. If this team could just complete this since they already are familiar with the changes they made, that would be perfect."
1,"The write-up is clear and concise - it does the required job to make the reader understand the motive, goal and way of implementation of the project, however there are a lot of ways to improve it:
1) A demo of the working code could be given
2) A fllow of implementation could be shown to visually draw the MVC interactions used for the project 
3) The writeup could mention what more needs to be done to complete the project in its complete sense or any future refactoring needed.
Basically adding more visual components to it could have improved the quality of the wirteup"
1,The writeup is very explanatory but they have not added any snippets of their code showing where and what are the changes they made. It would make it much easier for the reader to find the issues and understand them.
1,The writeup is somewhat clear in explaining how and why (particularly which files were edited) in attempting to implement the objectives stated in the problem statement. Not clear if the email_list hash was the best route for implementing the review reminder email functionality.
1,"The writeup is very clean and explanatory. They have mentioned the ways they are trying to solve their problems. However, they did not add any snaps of what their code looks like after and before the changes, which i think would have explained their project in a better way than explaining the code in words."
1,"The problem statement clearly explains what is missing from the project, however I would say not to talk about possible solutions in the problem statement section as it can get confusing as to if it is a problem or just an interesting talking point.
The implementation section was well written and I had no issues understanding what was added to the Expertiza project by them. They have nice status checks along the section, along with the rest of the write-up helping the reader know what has been done and what still needs to be done."
1,It clearly explains all the functionalities that the work is related to. It also explains the functionalities that 'might' be possible source of error. The explaination is clear and intuitive. It could have been made better by  listing down all the places where email notifications are needed and then coming down to why they are only looking at the mentioned functionalities.
1,"The problem descriptions are not very clear. It takes a lot of effort to understand what the authors are trying to say when it can be said in a very simple manner. for eg: ""Including a specific link for the deadline reminders email functionality for reviewers"" is not at all clear. It will be much better understood if you say: ""Sending emails with links to reviews""
I like how you have mentioned how far along you have come to completing the task."
1,"The writeup is well-written; however I suggest they change the title of their wiki page to reflect the title of their project. It is currently just ""ahp project"" instead of ""Improve e-mail notifications"" or something like that. Other than that, their writeup seems comprehensive and gives a good description of the project."
1,No testing way has been described and I am unsure on how to proceed with manual testing. Steps to test needs to be added and deployment on herokuwould enable us to test the latest changes.
1,I really the like the additions to the code. I  would just like it better if you deleted the code by removing instead of commenting it out as I wrote earlier.
1,"More comments are needed and functions are occasionally too long. Not completely necessary to fix, however it would be nice."
1,more comments are needed.
1,"Few functions, like 'perform' in  delayed_mailer.rb seem to perform more that it should. In such cases the helper can be used.  The DRY principleshave correctly been used ad the naming scheme is good."
1,"Yes, it works as intended. The refactoring does not break working code.  - It is shown in the screenshots and the fact the build is successful is a good sign.
They also could have depict that using the screencast rather than only walking us through the code."
1,"The variable names and other stuff looks clear. I am not sure why the team used this line when compared to the previous version
['Super-Administrator', 'Administrator', 'Instructor', 'Teaching Assistant'].include? current_role_name
One major reason not to use this kind of coding is this line crosse 79 characters. The previous version that ran across various line was much easier to read and understand. In case, if you take up code review, you don't wnt long lines like these in your code"
1,"They have made the code modular like the update_assignment_form and made a number of small methods that this method is using which is as per the Ruby standards.They have put the code in helper which is good for a controller.
Some more Comments could be added in the code to explain what they are really doing like the methods they have modified."
1,"Yes, the latest build pass Travis CI tests. Great work by the team to ensure Travis CI passed. I see the following output in the Travis CI:
Finished in 6 minutes 0 seconds (files took 7.32 seconds to load)
79 examples, 0 failures, 22 pending

Finished in 6 minutes 38 seconds (files took 7.29 seconds to load)
122 examples, 0 failures, 24 pending

201 examples, 0 failures, 46 pendings

Done. Your build exited with 0.
There are no conflicts with the base branch and team's code changes done in in their repo in the beta branch. Again, great work! If there were any conflicts, team resolved it by synchronizing their beta branch with the expertiza/beta branch.
However, Expertiza-bot also reported 2 warnings (it reported no errors):
- You changed YAML (*.yml) or example (*.yml.example) files; please double-check whether this is necessary.
- You modified spec/factories/ folder; please double-check whether it is necessary.
That is something that needs to be checked and addressed with your mentor's help. Did you really change *.yml files? If not, then this is False Positive warning. If yes, why? Our team also faced some typical warnings and after contacting our mentor we were able to move forward by identifying them as False Positive. I suggest contacting your mentor and discuss the origin of these warnings and whether they need to resolved prior your work gets deployed onto production server (if you really have not changed *.yml files). If you did, you probably need to explain why and this would be required additional information in your Wiki page."
1,"The code is not ready to be deployed onto the production server until it will be clear why team made some additional changes in the unrelated files and why they are included it in the Pull Request. What is the purpose of all the following file changes and why commit message does not align with the changes:https://github.com/expertiza/expertiza/pull/1410/commits/43245cbbdf1926169f842949ca798141ac73be5c
To be clear, I see in the commit message:1. Update factories.rb:I see that in fact, the spec/factories/factories.rb file is modified. But I'm not really sure what is the purpose of this change? Is it required for popup_controller.rb?
2. Rename database.yml.example to database.yml:I do not see that database.yml.example is renamed to database.yml in this commit. Was it renamed and if it was, why? Either way, as I already pointed out in the 1st peer review, you should not rename the database.yml.example file into database.yml. The database.yml.example file is just sample for setting up database, and if you are missing database.yml file, then most likely you did not run ./setup.sh script. Did you follow the guide for setting up Expertiza:https://docs.google.com/document/d/1tXmwju6R7KQbvycku-bdXxa6rXSUN4BMyvjY3ROmMSw/editIn this guide you will find that setup.sh script is what setting up your database.yml file from database.yml.example. You should not do and manual renaming and especially pushing renamed files and include them in the Pull Request (if you done so, and if you have not done so, you commit message should not be misleading).
3. Rename secrets.yml.example to secrets.yml:The same concern as in the above example. You should not rename manually any of the example files. If you run the script, it should be sufficient to setup your environment. I do not see that secrets.yml.example file is renamed to secrets.yml in this commit as message states. Was it renamed and if it was, why? If it was not, the commit message is misleading.
4. Reset database.yml.example:What does ""reset"" mean? I believe you do not need to do anything else besides following the guide for setting up your Expertiza environment. You should not perform any additional actions on the database.yml.example file.
Moreover, in the Pull Request I see that there were additional changes in the app/controllers/popup_controller.rb file, which is expected. However, how did the team verify their changes and ensure that their changes do not break any existing functionalities and do not introduce bugs into the code?
 
I'd need more clarification from the team and in order to answer the question about their code deployment, I need to get answers on commits and code changes.
 
However, as soon as these changes can be clarified and properly tested, yes, this code would be ready to be deployed onto the production server."
1,"The Wiki page has been improved and some of my suggestions were considered and applied. I see that detailed ""Project Introduction"" was added with multiple sub-sections. It provides really clear outlined information about the project, what exactly team is trying to accomplish (""What needs to be done"" sub-section), how team is going to do that and by what means (""Running Tests"" sub-section) and what it takes to achieve the goal (""Files Involved"" sub-section).
Wiki already looked good in the 1st peer review, but after additional information was added and some of the information re-organized, it looks great! It appears to be concise and very informative. There is no conflicting information in it.
Although Wiki was improved, some of my suggestion were not addressed, for example,
- Move ""Team"" section with their team members to the end of the Wiki since this the least information reader needs to know and it is not as important as all other information there. Also provide emails of each team member.- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages? This is important because you want to make your tests clean.- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).- No edge-case scenarios were added in the Test Outline or Test Plan sections. You need to reconsider this.- Were there any changes done in the app/controllers/popup_controller.rb file. If yes, why and what changes?- Were there any challenges the team has faced while working on the project?
Above is all useful information, and can be included in the Wiki for students to read and learn. However, since most of improvements are completed, I am taking only 1 point off. Good work by the team!"
1,"Since this is testing project, I'd want to assume you do not need to change app/controllers/popup_controller.rb file (or any other application files), and you need to develop and add new test cases only in the spec/controllers/popup_controller_spec.rb file. However, based on the commits I found in the Pull Request, your team made some changes to the  app/controllers/popup_controller.rb and other files. For this matter, you probably should have deployed your Expertiza project onto Heroku or NCSU VCL and provide reviewers with clear instructions on how to perform UI Testing on the code changes you made in the app/controllers/popup_controller.rb file by using deployed Expertiza UI. This way reviewers can ensure that your code changes in the source code did not brake any existing functionalities and did not cause any other issues.
Yes, new Rspec tests cover most of scenarios, but missing some additional edge-case test scenarios. For example, while testing author_feedback_popup method. Why do not test @response_id with nil value (whenever respond_id does not exist). It is possible edge case scenario as follows:
describe '#author_feedback_popup' do
  context 'when response_id does not exist' do
    if 'does not get result' do
      ...
    end
  end
end
Additional tests should be added to test ALL possible scenarios. And certainly, it possible scenario when response_id does not exist.
Overall, if you intentionally changed the app/controllers/popup_controller.rb file (or any other application files), you should have deployed Exertiza project and come up with UI test cases allowing reviewer to ensure your code changes did not cause any problems and did not break any existing features."
1,"Yes, taking into account that this was the entire purpose of the Project (add Rspec tests for the popup_controller.rb to increase code coverage above 95%), the team add test cases into spec/controllers/popup_controller_spec.rb file.
Yes, the coverage also is increased to 96.41%. These results provided in the popup_controller_test.mp4 video attached to the submission. I also cloned your repo from https://github.com/YChen239/expertiza/tree/beta and executed following commands:
git clone https://github.com/YChen239/expertiza.git
git checkout beta
git pull
./setup.sh
bundle install
rake db:migrate
rspec spec/controllers/popup_controller_spec.rb
I obtained 96.39% code coverage on app/controllers/popup_controller.rb file. Great work!
All newly added tests cover variety of possible scenarios in the spec/controllers/popup_controller_spec.rb file. But unfortunately, I do not see variety of edge-case test scenarios. They all test expected behavior, what about unexpected? For example, while testing author_feedback_popup method. Why do not test @response_id with nil value (whenever respond_id does not exist). It it is unexpected, but possible edge-case scenario. Thus, you should be adding context in the describe author_feedback_popup method as follows:
describe '#author_feedback_popup' do
  context 'when response_id does not exist' do

  end
end
Otherwise, team did great work by achieving >96% code coverage on that file!"
1,"Most of the code changes done are in the spec/controllers/popup_controller_spec.rb file as expected, however, there are several additional changes in the unrelated files that I have doubts about. The team has done great work on writing and developing additional Rspec tests for the popup_controller.rb! I did not find any obvious issues or problems in the spec/controllers/popup_controller_spec.rb file. All newly tests appear to be written well and follow good coding style. I also checked Code Climate results on your Pull Requests and ensured that there are no new code smells introduced by your changes. Great work on this part!
In general, I can conclude the following based on my observations for the spec/controllers/popup_controller_spec.rb file:
 
1. There are no too long lines.2. There is no DRY code in the tests and no code that needs to be extracted into separate tests. All the code appears to be written well and concise. 3. Some test-cases still would need to have comments. All necessary information in comments is usefull.4. Code for all tests follows the Ruby Style Guide. Great work!5. There are no code smells nor DRY code that I could find.6. All created Rspec test cases have clear and well-written descriptions.
However, there are still variable names used in the mocked models that were not improved and lack of meaningful names. I suggested to change some variable names in the 1st code review, but since these are Rspec tests, I guess it is not that important. For example,
let(:student) { build(:student, id: 1, name: ""student"") }
let(:student2) { build(:student, id: 2, name: ""student2"") }
Unfortunately, ""student2"" variable name is not very meaningful and it can be changed to a more meaningful. What about ""bob_student""? But again, since these are spec tests code, it can be left as is.
More concerning issue to me, as I mentioned in the above section, there are some code changes and commit message that I am confused about. The following is a list of problems that I found with the recent commit:
1. I see code changes in the app/controllers/popup_controller.rb file were not properly commented. If you change source code, you must comment on these changes and explain what the code does after you changes. I see no comments on any changes in the popup_controller.rb file. For clarity reasons, also add information why these changes are made.2. Commit message for the ""Fix travis ci (#4)"" contains some comments about actions performed that I could not find in this commit. For example, ""Rename database.yml.example to database.yml"", or ""Rename secrets.yml.example to secrets.yml"", or ""Reset database.yml.example"". Were these actions performed? If yes, why cannot I find them in the commits for this Pull Request? If no, why is this commit message misleading and contains false information?
 
Overall, good work by the team on the popup_controller Rspec tests, but take some points off for missing necessary comments and unclear commit message."
1,"The Wiki does a great job on explaining how and why the team performed their work. Since the project is related only to test coverage improvements of the popup_controller, the team should not use any design principles or patterns. Only create and write additional Rspec tests to achieve at least 95% test coverage on the existing popup_controller.rb file.
Although team did great job on the write up, there are still some improvements can be made. The following is a list missing information, suggestions and information that can be reorganized:
- Elaborate more on the Expertiza project in the ""Introduction"" section.- What role does the popup_controller play in the Expertiza (you already explain this, but link this with the Expertiza project).- May be move ""Team"" section with their team members to the end of the Wiki since this the least information reader needs to know about.- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages?- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).- Include edge-case scenarios (if any) in the Test Outline or Test Plan sections. Per a given project (developing Rspec tests) your team must consider sone edge-case scenarios and report them in the Wiki. Also, I am unable to see in the Wiki whether the team tested invalid input parameters for the popup_controller. This may not add any test coverage, but performs necessary testing. Develop (if you have not done it so) additional Rspec tests for popup_controller to test it against invalid input parameters and briefly talk about it in the Wiki page.- You need to indicate an effect of your project on the app/controllers/popup_controller.rb file. How many changes did it require to have (if any). If there any changes you performed on the app/controllers/popup_controller.rb file, you need to run additional existing Rspec tests and integration tests to validate your changes and ensure it did not break any existing functionalities.- May be state any difficulties or issues the team has faced (if any) while working on the project.- Optional: May be mention any suggestions for further testing improvements. Identify files with the lowest test coverage and report it. Provide any suggestions on fixing it.
Above are only suggestions and do not have completed in your Wiki. However, the more relevant information you have there, the better any reader is informed on your project!"
1,"The Test Plan in the Wiki also includes ""Test Outline"" section. Well done and have complete information on the test strategies performed on the popup_controller.
- The team considered different pre-conditions: Role of the current user varies from being student, ta, (super) admin, and super instructor. Calculating the score with and without responses. Testing tone analysis given varies pre-conditions (answer does and does not exist, and etc.)- The team has also considered scenarios with different users of the same type (i.e. ""student"" and ""student2"" are both of student type). Great job on running some scenarios with different users but the same type of users.- I did not find any edge case scenarios in the given Test Plan. May be team needs to elaborate on them more. If the team did not write edge-cases Rspec tests, these need to be developed. Please include any related information about them in the Wiki page.- Unable to see if the team tested invalid input parameters in the popup_controller. That's something that can be included in the Wiki as well. If such tests were not considered, the team must develop such test cases.- All other ""general"" case scenarios were well covered by the team in the ""Test Outline"" section!
For Test Plan please also consider adding the following information:
- Indicate what type of messages you are testing in each method of the popup_controller. Is it  incoming/outgoing query or command messages?- Indicate whether you do or do not test private methods, sent to self messages, and outgoing query messages? Explain why? (Remember to reference ""The Magic Tricks of Testing"" by Sandy Metz).
I did not find any other missing information in the Test Plan. Overall, great job by the team with giving that many descriptions in the Wiki!"
1,"The Wiki page looks great! Very informative, concise and detailed write up with snippets of pseudo-code for testing developed for and performed on the popup_controller.rb file. Great job on explaining and getting straight to the point on what is the goal of the project and what the team attempts to achieve!
The ""Project Introduction"" section explains well what is the popup_controller and what it is responsible for. It also provides information on the given test coverage (prior the project implementation) and what is the goal of the project (achieve test coverage to at least 95%).
I like that the team specifies how the Rspec test can be run on the popup_controller and what files the project implementation involved.
The ""Test Plan"" section does a great job on reflecting how popup_controller 10 methods are going to be tested. It provides a mock models for testing various conditions in the popup_controller. The ""Test Outline"" also is very comprehensive section explaining how each method is going to be tested and under what conditions by providing pseudo-code.
Also having ""Conclusion"" section is very helpful to understand how integration tests is performed utilizing the Rspec written by the team in the popup_controller spec file.
After reviewing the Wiki page, I can conclude that it contains enough information to adequately indicate the work that has been done by the team. However, there could be some improvements made to elaborate more on the testing strategy and introduction section in general. For example, the Wiki does not address what is the Expertiza project. Try to elaborate on it a little more, indicate that popup_controller is part of the Expertiza (not only it is responsible for data preparation that is displayed to the user, but the entire project is related to Expertiza source code).
The ""Test Outline"" section should also indicate what is getting tested in each method (i.e. incoming/outgoing query or command messages). Indicate why certain messages or methods are not getting tested directly like others (remember not to test private methods, sent to self messages, and outgoing query messages). Please refer to ""The Magic Tricks of Testing"" by Sandy Metz.:https://www.youtube.com/watch?v=URSWYvyc42MInclude that video in the references as well.
Also it would be very informative if you provide some specific Rspec tests samples that you written as samples or screenshots. you are doing great job explaining high-level details and specifying strategy utilizing pseudo-code. However, try to go into a little more details and provide some code samples of the Rspec tests.
For more missing information, please see below section."
1,"I guess for your project, project deployment is optional. However, for manual testing of app/controllers/popup_controller.rb file (if it was modified), I suggest to deploy the project on Heroku or NCSU VCL. Team did not deploy their Expertiza project or did not provide information on their deployment in the submission.
For manual testing I used the same code that I cloned from forked repository ""https://github.com/YChen239/expertiza.git"". I did checkout ychen239 branch and ran the bundle server on my local environment. I performed short UI testing on the app/controllers/popup_controller.rb file and observe no issues in that file.
All existing functionalities in the controller seem to work properly! Great work.
This is completely optional: deploy Expertiza project on the Heroku or NCSU VCL."
1,"Team has done great work on writing Rspec tests! I did not find any obvious issues and also checked Code Climate results on your Pull Requests. There are no new code smells introduced by your changes. Great work! However, the Rspec that were developed need to be well-commented and documented. I did not find much comments in the spec/controllers/popup_controller_spec.rb file. Please provide sufficient comments on the test that you developed briefly explaining any necessary information (i.e. pre-conditions, edge-case, invalid input parameters) and other important information about the tests.
1. There are lines in the Rspec tests that are too long.2. There is no DRY code and no code that needs to be extracted into separate tests.3. Rspec tests in the spec/controllers/popup_controller_spec.rb file need some comments. Briefly in the comments provide any necessary information.4. Code for Rspec test follows the Ruby Style Guide. Great work!5. There are no code smells nor DRY code that I could find.
Overall, great work by the team on the popup_controller Rspec tests!"
1,"The context:
it 'build tone analysis heatmap' do...
is empty. You should either take it out or fill it in (for more test cases). Otherwise, your methods are appropriately sized and I could follow the code easily."
1,"There are few general points I would like to address on the code in the Pull Request and forked repository:
1. Your changes should not be done on the ""master"" branch (that's where I see most of the changes in the forked repositoryhttps://github.com/YChen239/expertiza/tree/master
2. You should not rename database.yml.example into database.yml file:https://github.com/expertiza/expertiza/pull/1398/commits/b2383543ad1fdea507fa5f30b9b5a5c4206b2a25The creation of the database.yml file should be part of the ""setup.sh"" script that you supposed to run as part of Expertiza installation. Did your team follow this guide:https://docs.google.com/document/d/1tXmwju6R7KQbvycku-bdXxa6rXSUN4BMyvjY3ROmMSw/editYou should not manually create or copy this file.
3. Travis CI build is failed on your pull request with the following errors reported here:https://travis-ci.org/expertiza/expertiza/builds/512099771?utm_source=github_status&utm_medium=notification""The command 'cp config/database.yml config/database.yml' failed and exited with 1 during .""Please make sure to follow the guide on setting up your expertiza project.
4. I cloned your code from forked repository ""https://github.com/YChen239/expertiza.git"", checkout branch ychen239, and manually ran ""rspec spec/controllers/popup_controller_spec.rb"" on the popup_controller file  to check the results and see the test coverage. This is result that I obtained:
Finished in 5.11 seconds (files took 9.52 seconds to load)15 examples, 0 failures
Test coverage has increased from 7.23% to 71.69%, which is expected and indicates that the team has performed their job.However, I could not get test coverage above 95% per the requirement specifications of your project.
5. Test coverage after running test locally on popup_controller only increased 71.69%. Please note that the same command running on the master branch breaks the code and gives the following error:
An error occurred while loading ./spec/controllers/popup_controller_spec.rb.Failure/Error: load_dependency(file) { result = super }
 
The following notes are related to code style on your changes, variable, method and class names, and other RoR coding practices:
- All created Rspec test cases have clear and well-written descriptions.- Variables names used in the mocked models can be improved and have more meaningful names. Consider improving the following:
let(:student) { build(:student, id: 1, name: ""student"") }let(:student2) { build(:student, id: 2, name: ""student2"") }
into the following Mock:
let(:alice_student) { build(:student, id: 1, name: ""alice"") }let(:bob_student) { build(:student, id: 2, name: ""bob"") }
Similar changes can improve the names on the mocked models."
1,"Missing Refactor ”action_allowed?” method and remove duplicate code part in the writeup.
Create method refactoring was not required as part of this."
1,"Everything in their writeup is clean and understandable. But in the introduction part, i felt like they explained some things which are not so important and are really silly to understand and did not need that amount of writeup they gave for those things. I think they can still optimize it."
1,"Why did you change files in the bin directory (such as bin/rails)? If this was unintended, you should remove these changes. You also may not need to send the .coffee and .scss files; you may want to remove these."
1,"In the account_requests_controller, the roles_for_request_sign_up method does not need a separate method.
In the users controller starting on line 60, shorten the comments a bit.
Remove commented code lines in the users_controller (line 252-4).
Long comments on 226 would be better placed in the wiki. Remove the project number indication from comments.
For pagination, is there a reason you pass options and not a number (that being the number of records to retrieve)? Why have the mapping on line 242?
Aside from small details and comment changes, code looks good!"
1,"Team has created the new test file based on the requirements for this project. As the team introduced new controller in ""account_requests_controller"", a corresponding Rspec file has been created and the tests from users_controller.rb has been moved here.
 
However, there is no additional test cases added by the team. As there has been quite a few changes in the way account is requested, adding few tests here would have made more sense."
1,The team has pushed the code to Beta Branch and have not synced with master to run Code Climate/Travis or other services. I would suggest team to read through Piazza post that tells how to sync the branches in GIT
1,"There was no code changes in the 2nd round. Also, the changes informed in the first round of reviews don't seem to be made into Author's work.
 
Additionally, the number of commits is too high. there have been numerous failed commits. I would suggest testing the code locally and then commiting only when you are sure that the code is running as expected
 
866fd44
 @kunalnarangtheone
Comment get user list for testing purpose
f8eb234
 @kunalnarangtheone
Comment get user list for testing purpose try 2
480cf9c
 @kunalnarangtheone
Comment get user list for testing purpose try 3
702c09a
 @kunalnarangtheone
Comment get user list for testing purpose try 3
e4f557d
 @kunalnarangtheone
Comment get user list for testing purpose try 4
a7dfd02
 @kunalnarangtheone
Comment get user list for testing purpose try 5
e9cd8ba
 nikitaparanjape
Merge branch 'debug' into beta
5a3fb0a
 @kunalnarangtheone
Comment get user list for testing purpose try 6
fc3c246
 @kunalnarangtheone
Comment get user list for testing purpose try 7
dec02d7
 @kunalnarangtheone
Comment get user list for testing purpose try 8
40c497"
1,"Code looks clean in most of the cases. Almost all the changes are done in a reasonable way.
 
One of the concern I have is the usage of Parameterized query in users_controller.rb file (line 197)
 @all_roles = Role.where('id in (?) or id = ?', role.get_available_roles, role.id)
As Ruby Active record in inherently uses parenthesized query and the usage in this context, this line may not be required."
1,"There are changes to the schema.rb file which should not have been included in the pull request. This file should have been skipped. Otherwise, the project seems to be ready to be merged."
1,"The build passed, but there are still 9 warnings on the pull request. Most of them are warnings that are not under the team's control such as more than 500 lines changed, but one or two of them such as ""Your pull request has many duplicated commit messages. Please try to squash similar commits. And using meaningful commit messages later."" could have been resolved."
1,"The writeup is good. They've mentioned the problem statement and they've added solutions for each and every problem. They've also added the test cases that need to be checked. The only problem is that, no information has been given regarding setting up the environment for Expertiza. I feel they could have added that to ease the work for the people reviewing."
1,All the tests have passed but a little more elaboration on what it is that they have tested would be helpful
1,"All the test cases have passed but they do not mention what exactly is being tested. If there is a little more elaboration on that, it would be perfect."
1,Able to view account request form and it reflects described changes. Perhaps for the final review you could create an instructor account with lots of users signed up so we can view the pagination?
1,"In the users_controller, you may want to transform the block comments on lines 60-68 into method comments and make them a bit shorter (for instance, lines 62 and 65 are not useful. Would belong in wiki but not in code comments).
On line 130 of the users_controller, is there something in the creation of the AssignmentQuestionnaire that sets the default notification value? Because that seems like a roundabout way to set that. Is there a better way?"
1,"In the account_requests_controller, maybe 'create_approved_user' should be 'create_user'. It looks like this function also has the rejection condition.
You refactored names of 'requested_users' and maybe you should do the same to the method 'create_requested_user_record'. You might want to make it 'create_account_request_record'.
The method 'foreign' does not have a very instructive name (unless that is a special syntax or convention). 'find_user_roles' may be a more informative name.
Personally, I lean in favor of 'get_role' over just 'role'."
1,"In the create method, on line 122 where prepared_mail is assigned, I think the method call is long. A suggestion is to have the method call with the parameters on multiple lines instead of having the method call all on one line."
1,"I really like the before and after pictures along with the written descriptions of the changes. The table of contents is also nice.
I think it would be great if there was an explanation of what the http://152.46.17.33:8080 link is for. I assume this is the example to test. Also to provide the login information (in case the reviewer forgets)."
1,The long functions could have been broken down to parts and called. The functions are moved around but not refactored. Comments have been added. And the code quality does seem decent.
1,"Since I could not find any test cases other than a few mentioned in the response_controller_spec.rb file, the authors have not converted the test plan into automated tests. More test cases need to be added to make sure that the functionality that is existing is not hindered in any way possible since that is a very important thing to be considered during refactoring."
1,"I didn't find any functions that are too long. No code was extracted to separate methods, but some code was removed. I would suggest the team to add more comments to the methods that are refactored since it gives the reviewer a better idea to understand what is being refactored in the code. After refactoring, the code still follows good Ruby Style Guide."
1,"The writeup did not have any section on what work they did and how they did it. I would suggest the team to include a section of ""Problem Statement"" which would list the tasks that need to be carried out. Because at times I had to go through the project description to understand the ideas of the project. Also, the team has not included a design pattern which must be added. I would also suggest the team to include ""Strategy Design"" pattern as it is used to DRY out the code."
1,No test plan found. Please add a test plan section to the wiki.
1,"The team has tried explaining why they are making copies of few files in the Design choices section. The teams explaination "" Even though the two forms happen to be the same right now, some time in the future, they may deviate. This option gives some flexibility to the accounts_controller to modify the form without affecting the User's form."" does not convince me.
 
The partials copied are not the entire files rather email, password etc. As an application, there is hardly any change that we make to these fields and if made, would like to see the changes on all the pages. Copying these partials misses out the advantage. In case, there needs to change these partials (say email form), I would see a same kind of change in the entire application. In my understanding, using the same partials would give us an edge when compared to copying the files"
1,"The team has copied the tests from user_controller Rspec file  and have tried running the test. Based on the screenshots, it looks like all the tests have passed.
 
As this is a new controller, I would suggest the team add a couppleof specific tests that trigger usage of account_request_controller in a specific way. Using the same tests may not cover all the voundary cases"
1,"Yes, writeup clearly explains one part of the project, that corresponds to Pagination of the User page. The reason to choose is clearly mentioned and the team provides enoughtinformation for the user to understand.
 
I would suggest explaining the problem statement at length (Separate all methods related to the workflow of a RequestedUser object). For a first time user, the explaination for user_controller needs to self sufficient. Also, as there was no RequestedUser controller, explaining the need of this object or how it is being handled and why do you need this to be moved out would help the reviewer to understand in much better way"
1,The write-up is clear. Each and every section explains what the issue is in the users controller and what approaches have been done to overcome the issues. The only suggestion that I have is to add a bit of information regarding what kind of tests have been performed.
1,Since the Travis CI build is not passed. The team should make some changes in the code to be working appropriately then it could be merged onto production server. It need not be done from scratch but there are few changes that must be made to pass the Build.
1,as both code climate and build failed. these things have to be handled before deploying or merging
1,The Travis CI bot shows that the build failed. It should have been updated after the first submission.
1,"I'm giving the benefit of the doubt on whether the automated test assignment_spec.rb passes.  I actually got an error beginning ""failed to load command: rspec"" when executing ""bundle exec rspec spec/..."", even though this works flawlessly on my team's code.  However, I don't have any reason to believe that this is the fault of the code.  Rather, every time I have tried to get a Rails project up and running, it has been quite bothersome (as noted further up in this review), and I simply lack the time to fight my way to a running state for several reviews.  The TAs are practiced in this and I'm sure they will execute the automated tests on every project."
1,The code was refactored and made DRY-er.  The only possible issue I see is confusing and long if conditionals.  I think creating a helper class containing methods with meaningful names for those conditionals might be helpful to understand what the code is doing better.
1,"Scope of Improvement:
There was no proper mention of the Rspec testing. This is something team could improve upon for the next round. I could see some of the commits related to Rspec which means the team has worked on it. It would be more presentable if the team could include the Rspec work in the document."
1,"The document did mention about the problems and the need for the project. It would have been more understandable if document focussed on ""why"" more than ""how""."
1,"The functions previously existing in another controller were moved to a newly created controller. All the methods are named as [CRUD]_<controller_name>. I can understand why there was a need fro this when all the methods were existing in the previous controller but now in the new controller, you can refactor the function names to [CRUD] only. That would make it a lot more in line with ruby on rails style of naming."
1,"I understood clearly the questions as well as the solutions implemented from the documentation.
The documentation could have been better formatted. (Also there are a few 'to be completed' remarks in the documentation)
I also would have liked to see a screenshot of all tests of both controllers successfully pass so that I would know that no functionality as broken because of creation of a new controller and changes to routes."
1,"I could not find any Test plan in the writeup but I checked response_controller_spec.rb and I can see few test cases written over there.
More test cases needs to be added to make sure existing functionality is not hampered."
1,"I think the code written in the controller is well written. Only suggestion I have is in the ""redirect"" method. There is a if params[:return]...else if params[:return]...else if params[:return]... code block section. Perhaps use a switch statement to have ""cleaner"" code."
1,"The writeup does not include any section to explain how and why the authors did their work. Also, the team has not included a design pattern section in their writeup for the implementation that is carried out. I would suggest the authors to include information from the project description."
1,"The writeup adequately explains the functionality of the work in the about section. The team is trying to refactor the model to make the code close to CRUD functionality. The team has not added a section for how and why the code is being refactored in the writeup. I would suggest the team to include a ""proposed approach"" section for refactoring the model."
1,"The team has made quite an effort to make the changes required but it seems that they faced more issues than they were hoping.
My biggest concern right now are the addition of test cases, that will help us analyze the written code in a better manner and help us to understand the missing chunks int the code.
The code also needs to be completed on certain dimentions like  - 'auto dropping' from wait list and preserving history, which are some major implementation that is remaining."
1,"I don't think this is ready to be deployed onto production server because for the main reason that they have errors and they have not fixed them yet. They have also not finished all their tasks assigned to them in this project. So, this can be a good starting place for a future team to pick up and complete the tasks assigned and also fix the errors present."
1,The code works for most part. My only concern is that it's not clear what kind of testing was done. I just think it needs to pass a set of automated tests before it's deployed to prod.
1,"Their writeup is good overall. Need some more details of the work, and how they solve the code problem."
1,"They have added very little explanation after their 2nd round.
It explains about in a very clear way how to recreate the Issue 98 but they have not explained in the write up their approach how they have solved it.They have not explained their code.
I think the write up could have been better with some more explanation and screenshots."
1,The writeup was well-written. They explained the improvements they made and how to recreate the issue they solved. My only complaint is that the writeup could have used more background information on the project rather than just assuming the reader knew what a certain Expertiza issue was.
1,The writeup could be improved a bit as to it could be well explained a bit in detail and more points could be given to explain the problem better.
1,"The writeup looks good to me. They have explained the motive and implementation well. Also a part on 'Other related issues found' is a great addition for a new bug/implementation like this one.
They do have a lot of scope to improve.
1) A test plan could be made more  full proof if they has added the automatic tests on the code that is modified.
2) A flow diagram of MVC model that was touched for this project could be included for better understanding of the implementation.
3) The document does not talk about the technicality of the changes done. Some major code snippets could be explained rather than only explaining the working of the project."
1,"Their report seems to be pretty straightforward and to the point when considered from project point of view, However i feel like they should have added a little bit of background like explanations about their project and should have talked a little bit of what the issues talk about because if i was a first time reader of their report, i wouldn't understand what the actual deal is, what are they trying to do and why they doing what they doing."
1,The team put some effort into the write-up. Creating sections outlining such things are recreating a known issue. I believe more time could had been spent discussing the problem more and how they went about resolving the issues they were able to fix.
1,"The team was regular in committing the changes, they have made considerable changes in the code done by the team, I found most of the commits were done only by a single person in the team, it would have been better if the work was divided among the teammates."
1,"Their code written style is good. No bad name, long functions. Probably need some more useful comments."
1,"The code they have written for solving the Issue#98 is pretty good and follows all the Ruby principles.They have made it neat and clean after their first submission.I still believe there could more more comments explaining their code.
They still have some issues not implemented."
1,"The code was written well. The code climate does not make much noise over the coding styles.
The db has been changed a lot, I am not sure how they will affect the other parts of the code. IT might cause some alarms. 
Some of the names have been refactored, like - remove_team_from_waitlist to remove_from_waitlist. Proper reason could be added along with proper test cases to make sure that related functionalities do not fails."
1,"For the code that was added by the team, it appears to be properly formed and variables named appropriately. I believe that some of the comments could have been removed as they are unnecessary. For instance, the comment above ""self.clear_waitlisted_teams_for_topic"" method in signed_up_team.rb"
1,"They have nicely explained the Issue#98 about how to recreate it and check that the waitlist is being cleared after the topic drop deadline has passed.I could not test it as they have not provided any deployed link for their project.
I believe they should explain the objective of their project in wiki so that other team members could understand what the project is about."
1,The writeup does not explain any of the authors' methodology. It just explains how to recreate certain issues that they are improving. I suggest that they add more detail on the design patterns they used and why.
1,"No, the writeup needs to go deeper while explaining it. They need to make the motive clear. It can be done by taking help from a design pattern or oodd pronciple mentioned in class. But the reason that it has not been done in the initial stage is because, it is solving an existing issue and I think there can be only one good way to acheive it which they have come up with.  The team can explain some more on what other solutions they had thought before and why they finally came up with the written solution."
1,"The writeup is pretty much in detail but as i mentioned earlier, they need to work on including details about the files they are working on and what are their functionalities in the expertiza as a whole."
1,"The writeup explained how to re-create the problem this project was addressing, but there weren't enough details about how the authors went about fixing the problems. There were bullet points specifying the things that were done, but the reasoning behind them was missing in half of the cases."
1,The team only gave an overall bullets of what was modified. The concept of how and why issues were resolved was not discussed.
1,"Based on I'm the class of ECE517 student, the write up clearly indicates the functionality the work is related to. I can understand what the project does. And how the project does what it does.
If I'm not familiar with expertiza, I need take some time to figure out what they are working. So, give a description of expertiza and how it related the work will be better."
1,"The writeup starts with the description of the modifications done under this project.
But they have not explained what is the objective for the project.
They have explained some Issue in detail how to check what they have implemented.They have not provided any deployed project link to check it.
I think they should update the wiki with all changes they have done with an explanation."
1,"The writeup clearly indicates what functionality the work is related to. However, it would be nice if they could add a section table of contents to the top of the writeup with hyperlinks so that the reader could easily navigate to a certain section. They give a good explanation of what they have done so far and what still needs to be done."
1,The writeup indirectly makes clear the functionality that the team in working on. I would suggest making a seperatesection like problem statement to make sure that the reader understands what the team tries to acheive.
1,The issues that are to be solved as a part of the project are explained in detail with proper specifications and also the issues they faced while solving them are also explained in an easy to understand way but i think they lack on explaining the controllers or the other files they are working with. As a new reader i would be unable to understand that part.
1,There is no link included to test the application. It would have been great if the application is deployed and a link is provided to test the application for required features.
1,"Yes, the features work as mentioned. It would have been more better if the testing site is also mentioned."
1,"1. The function is not too long.
2. The code don't need be extracted into separate method
3. There is a TODO issue found by code climate.
4. They have some issues of coding style about missing space 
5. There is a nissue of if usage when having a single-line body."
1,"Whatever code they have added does follow good Ruby Style guide.
They have included comments explaining their methods but I feel more comments need to be added as it was difficult to follow the code especially for the code they have copied from old pull request."
1,"(1) The code is written in precise and small
(2) The code does not need to be extracted to separate methods
(3) More comments can be given to make the code more readable and understandable by the user.
(4) The code does follow the Ruby style guide
(5)The code does accurate and does not repeat, the code is written is well commented and explained"
1,"For a couple of commits related to the drop topic deadlines, there were comments made on the commits, but the code itself could have had more comments about why that was done. Overall the code follows the Ruby conventions and is refactored well."
1,"the code that was added/modified appears to have unnecessary comments. For instance, s""ign_up_sheet_controller.rb"" has the comments ""Bobby"""
1,"They have renamed the methods to indicate of their functionality like update_is_waitlisted to remove_from_waitlist.They have added a field auto_dropped_from_waitlist which is somewhat weird and it not explained why they have added.I was not able to understand its functionality.
Code checking the assignment to be staggered deadline is duplicated which can be corrected."
1,The build and test fails right now. But they have implemented the requirements well and with some modifications they should be able to pass the builds. But the test has been manually done and made sure that the code works.
1,"I don't see where the team created new tests. The Travis CI is failing the controller section due "" SignUpSheetController#list"" because of unexpected arguments."
1,Only one test has been written. There is no test plan as such. I would definitely like to see some more tests or atleast explanation that all scenarios are covered in tests.
1,"There are not many changes in the structure of the Wiki since last time I've read it. The content was slightly updated, but the structure remained the same. There minor improvements, but team did not consider my suggestions to improve the Wiki.
Overall, as I mentioned in the 1st peer review, the Wiki page is well written and well structured. Team explains how the they have completed their work and why it has been completed. Great job providing all the details in the ""Implementation"" section by providing detailed information on code improvements and fixes as general case for 16 Code Climate issues! Great work! Great details along with screenshots from Git diff tool!
I see that team added ""Team Members"" section where they stated all team members. Great work! Also, a lot more information was added in the ""Implementation"" section by providing more examples and explaining the root cause of the issue and how it can be fixed. 
Unfortunately ""Testing"" section as important as implementation remained unchanged. No new information was added and existing information on testing is not enough to cover all Code Climate fixes. I strongly believe your team should spend more time on ""Testing"" section and not only in the Wiki page, but for the project completion. Again, runningbundle exec rspec spec/controllers/[p-z]*.rbdoes not guarantee correctness of your code changes and fixes on the controllers. For this project and amount of the code that you team has modified, the ""Testing"" section should be addressed more adequately and thoroughly.
All other sections appears to be completed and well organized! This is very informative wiki page. Great work!
There are still some suggestions I provided for this Wiki in the 1st peer review round to be improved, but remained as before:
- ""Introduction"" section can be re-organized to combine definitions of Expertiza, Climate Code and include all new terms such as code smells and etc.- Details about trivial solutions with screenshots still remain in the ""Implementation"" section, but should be removed to make the Wiki page clear and concise. Providing trivial solutions does not give any advantages.- Were there any difficulties or issues the team faced while working on the project? You should've stated how team handles such issues?- Mention all remaining Code Climate issues in the controllers and explain why you did not fix them. This is information is important and still missing.- Are there any further suggestions for improvements by the team?- Team did not elaborate on how they verified that issues reported by Code Climate are resolved with their fixes. What was the way of checking it?- ""Conclusion"" section is still missing with all important points of the project.- And of course, ""Testing"" section is still incomplete in my opinion. Any changes done on the controllers must be tested with full set of all Rspec tests. New Rspec tests should be developed and documented in the section.
Overall, the Wiki page appears to be completed."
1,"No, team did not add new Rspec test cases. No, the code coverage was not increased. Team has 1 failing test that they claim to be not responsible for and not required to fix:
$ bundle exec rspec spec/controllers/[p-z]*.rb
..........

Finished in 3 minutes 27.6 seconds (files took 7.21 seconds to load)
141 examples, 1 failure

Failed examples:

rspec ./spec/controllers/response_controller_spec.rb:70 # ResponseController#edit renders response#response page

Randomized with seed 6188
Unfortunately, such statement as ""We were not required to fix the issues for this controller"" is unexceptable. Let's assume that your code changes cause the App to crash on some of the functionalities not in the controllers, but caused by the controllers changes that you did. Would you be not required to fix that as well? In our team we consider all possibility for the errors and addressed each error responsibly and carefully. 
Team did very a little validation on the files that they changed by running Rspec tests on enclosed set of controllers [p-z]*.rb. This is slightly incorrect approach for testing your changes and verifying that your team did not break any existing functionalities or other Rspec tests. Team's Wiki page contains Testing section where they provide information on running existing Rspec tests. Team also provided recorded video where they run existing Rspec tests on set of files with names starting with P through Z.
Please consider the fact that some of the existing Rspec tests are integration tests, and not only Unit Tests. Hence, the tests that you run [p-z]*.rb are not enough to guarantee that your changes did not break any existing functionalities or did not cause any issues. You tested only controllers specs starting from P through Z, assuming that all tests in these specs are only Unit Tests controllers for corresponding files. This is wrong assumption. You should at least test all controllers and models as well, because models specs use some controllers to perform integration tests. Your team should execute at least the following command:
 
bundle exec rspec spec/controllers spec/models
and fix all of the issues regardless if it was caused by change or not. The above command runs tests on all controllers and models. Some models run integration tests that validate code in the controllers of your interest and since you changed the code in these controllers, models may fail. This would be wrong assumption to make that you are not required to fix models.
Moreover, I see that team did not write any additional Rspec tests to validate their changes even for controllers with P-Z names.  Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources on writing additional Rspec tests that directly tests all your changes in the controller. This would help to ensure integrity and validation of the code changes that your team is proposing over Code Climate issues. Otherwise, this becomes one of the biggest concern for not deploying your project into production server.
Since there are no new Rspec tests developed or written, subsequently, the code coverage cannot be adequately increased to reflect new tests rather than refactored code that was done by the team.
The following are suggestions for your team regarding testing:
1. Test all existing controllers as well as models by running bundle exec rspec spec/controllers spec/models command and fix all the failed test cases. You will be surprised but some of failures may caused by your changes.2. Develop additional 5-10 adequate and proper Rspec tests that can cover broad range of the controllers that your team has worked on. Without additional Rspec tests, there is no way to know for sure if your changes  did not cause any problems in the existing code. As I suggested in the first peer review, there are 3 types of tests that your team should have performed and report the results in the Wiki. I still suggest to complete them.3. Perform code inspection on your changes5. Run through a live demo in the Expertiza instance through the UI that runs over changed/improved code
After all of the testing steps performed and results are documented in the Wiki, only then it should give some confidence that your changes did not cause any issues and can be deployed into production server.
Also I see that team still did not deploy their project as I suggested in the first review (in fact most teams who worked on the Code Climate issues did not deploy their project and I'm not sure why). Running UI Expertiza instance is crucial part of testing. Did your team validate changes by running Expertiza instance and trying to perform some actions on it? There is no related information in the wiki with regard to UI testing.
Unfortunately, team could have taken multiple approaches to test and validate their changes, besides running existing Rspect tests on specific set of controllers. No such approaches were taken by the team. Therefore, testing is performed poorly by the team and it becomes the biggest concern not to deploy your changes without adequate testing."
1,"Unfortunately, Travis CI tests have failed with the following error(s):
$ bundle exec danger
........
Dangerfile:71: warning: already initialized constant Danger::Dangerfile::BIG_PR_MESSAGE
Dangerfile:45: warning: previous definition of BIG_PR_MESSAGE was here

Danger has failed this build. 
Found 1 error.
The command ""bundle exec danger"" failed and exited with 1 during.

Your build has been stopped.
5565:signal-handler (1554145229) Received SIGTERM scheduling shutdown...
Fortunately, our team faced the exact same Travis CI build failure, which indicates a possibility that neither of our teams introduced that issues. However, we contacted our mentor regarding this failure and verified with him our further actions. I'd suggest to do the same. Please contact your mentor and ensure that the Dangerfile failure is not caused by any of your changes.
There no conflicts of the team's branch with the base branch in the Pull Request and the team re-synced their beta development branch with the latest expertiza/beta branch on March, 27.
Expertiza-bot also reported 5 Warnings and 1 Error:
5 Warnings:
  - Your pull request is more than 500 LoC.
    Please make sure you did not commit unnecessary changes, such as schema.rb, node_modules, change logs.
  - Your pull request touches more than 30 files.
    Please make sure you did not commit unnecessary changes, such as node_modules, change logs.
  - Your pull request has many duplicated commit messages. Please try to squash similar commits.
    And using meaningful commit messages later.
  - You are using global variables ($) or class variables (@@); please double-check whether this is necessary.
  - There are code changes, but no corresponding tests.
    Please include tests if this PR introduces any modifications in behavior.
1 Error:
  - You are including debug code in your pull request, please remove it.
Again, fortunately my team faced the same warnings and the error, except ""There are code changes, but no corresponding tests..."" warning. We actually spent some of our time and resources on adding a lot of newly developed Rspec tests to validate all of our changes and make sure we did not break any existing functionality. Similarly, for all other warnings and the error, we contacted our mentor and clarified with him that the error is reported False Positive and we did not include any debug code in the Pull Request. I'd suggest to contact your mentor for that matter as well. Most likely the error reported is False Positive for your team well. All remaining warnings we decided to ignore at this point. Of course, we did not have any warning regarding missing tests.
The last warning suggests, that your team did not write additional Rspec tests to test your changes. Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources to validate all your changes by writing additional Rspec tests to validate all of your changes."
1,"Since the goal of the project is to Fix Code Climate issues in controllers with names beginning with P through Z, I expect not to find problems in the code, but to see that all Code Climate issues reported on the controllers of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate that all Code Climate issues are resolved, I cloned the team's Github repository from https://github.com/Ziweiwww/expertiza/tree/betahttps://github.com/Ziweiwww/expertiza.gitUsing beta branch registered it with my Code Climate account, and performed Code Climate validation on your cloned beta branch.
I'd like to confirm that your team did an amazing job! I found that your team missed only 3 Code Climate smells in the following files (probably unintentionally, which is totally fine):
app/controllers/popup_controller.rb: Block has too many lines. [35/25]: 139-143, [79/25]: 195-199app/controllers/reports_controller.rb: User controlled method execution: 17
Which is very negligent number of issues compare to the work that your team has completed. Of course, there are a lot of unresolved Code Climate issues in the questionnaires_controller.rb, review_mapping_controller.rb, response_controller.rb, signup_sheet_controller.rb, users_controller.rb. However, your team was explicitly asked to leave them out and do not fix them. Moreover, there some remaining Code Climate issues in the controllers with names starting with P through Z (e.g., Assignment Branch Condition size for [method name] is too high), but again your team has been explicitly told to ignore these issues. Amazing job fixing all, but 3 Code Climate issues in the controllers of your interest!
There were great improvements made in the code. All changes, fixes, modifications and refactoring of the code is acceptable and adequate. It appears to be well written code that follows good RoR coding practices.
The last minor suggestion for the future development:Please provide more comments on some of the fixes and describe what code is doing after you modified it (as I mentioned in the 1st review, this is how you find bugs in your code, i.e. code inspection). For example, changes in participants_controller.rb, popup_controller.rb, suggestion_controller.rb, reputation_web_service_controller.rb could be well-commented and documented.
All other issues that I reported during the 1st peer review period are resolved and I see no other issues! Great work!"
1,"There are lots of screenshots from the team's github that shows what was changed, but I would like to see an explanation in each case as to why it was changed, or how it was changed."
1,"No new Rspect tests are added and 1 existing test fails (141 passes and 1 fails). The ""Testing"" section in the wiki page explains how existing Rspec tests ran and one of them failed, and team is not responsible for fixing the issue. Although, I believe the team is responsible for any failures in the existing Rspec tests for the  controller as well as models, and I encourage the team to fix all the issues.
There are no additional/new automated or Rspec tests added per this project. Existing Rspec tests have about ~53% test coverage on the code and do not guarantee the correctness of all your changes.
Moreover, I see there are no changes performed on the rspec/controller directory where all the Rspec test files located. This indicates that changes performed by the team to fix Code Climate issues did not have any effect on the existing Rspec tests and did not break them, which is a little suspicious since my team and my changes for Climate Code issues broke some of the existing Rspec tests and we had to fix them. I see that team has verified correctness of their changes with existing running/passing Rspec tests in the controller by running through the tests with names starting with ""p"" thorough ""z"". Having changed files only in the controller with name starting with ""p"" through ""z"" does not guarantee that other files in the controller would be working properly. Team needs to do additional verification with all the controller Rspec tests, not only from ""p"" through ""z"". 
Also, the team needs to verify changes with existing running/passing Rspec tests in the models as well. Please run the following command on existing Rspec tests in the models and report the results:
bundle exec rspec spec/models
If your team was not explicitly asked to write additional Rspec test cases, indicate this in the write up. Good job on recording the video on running and passing Rspec tests in the controller, although controller is tested only partially, which does not guarantee that your changes did not break anything outside of the controller scope. Please consider full testing of your project."
1,"Are you sure you fixed the ""app/controllers/participants_controller.rb"" correctly? There was a block ""unless params[:participant].nil? then do something"". Meaning if params variable is NOT nil do something. However, your fix now returns UNLESS params[:participant].nil?. Should not it be ""return if params[:participant].nil?"", not unless!? Meaning if params variable is nil then return (not other way around) Please revise this code! There are a lot of similar changes that I have concern over. Here is the link for these fixes that I have concern over:
https://github.com/expertiza/expertiza/pull/1371/commits/f71c3cc899ccc0d1dfef4491f7e1afbc40a3be8f
https://github.com/expertiza/expertiza/pull/1371/commits/3199b764864d2d71cd5dca8ca6bbc2ad9ca5db01
Refactored code resolving Code Climate issues appears to be well written and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code (as expected), and pull request mostly contains refactored code that already existed in the repository.
However, while looking at the changes in the provided pull request, I noticed few very minor things that can be improved (please also double-check ""participants_controller.rb"" whether you fixed it correctly). Please consider following for improvements:
- Use new Ruby format for parameters that should be whitelisted for mass assignment (app/controllers/roles_controller.rb). Example, use ""without_protection: true"" instead of "":without_protection => true""
- Please provide comments on some of the fixes and describe what code is doing after you modified it (believe it or not that is how you find if your changes are correct, i.e. code inspection). For example, changes in participants_controller.rb, popup_controller.rb, suggestion_controller.rb, reputation_web_service_controller.rb
- Remove commented out code (site_controllers_controller.rb). If this is not a comment and just unused code, delete it.
https://github.com/expertiza/expertiza/pull/1371/commits/aef44be7320b65124a74f137f3f256cbc7d7d432
- Method name ""get_role"" should be renamed into ""role"" excluding the ""get_"" prefix. Instead you combined the method name into single word: ""getrole"". Consider fixing it:
https://github.com/expertiza/expertiza/pull/1371/commits/3e22a6ae1ff8f7587e664ae3d0b6370c9acd8639
There are few fixes team has made by renaming existing methods with more appropriate names (e.g. ""get_role"" into ""getrole""). I suspect this relates to fixing ""Do not prefix reader method names with get_"" Code Climate issue. However, the more appropriate name for method would be just removing ""get_"" prefix (renaming ""get_role"" method into ""role"").
All other existing method and variables names within the scope of modified code are reasonable and should not be changed. There were only few cases when the team added new methods (submission_records_controller.rb). However, these are just CRUD methods. Keep in mind that this is not the case for some other variables and methods in the files that you modified. If variable or method names can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
1,"Testing section needs to be improved. Please include all of testing strategies team used to verify integrity and correctness of the code. Provide enough information indicating how the code improvements/changes were verified and tested against new issues that could be caused by your implementation? List all relevant testing steps performed on the fixes that you have done.
Ensure to test your code changes/improvement with at least 3 following steps and include results/observations in the Wiki page:
1. Code inspection
2. Passing/fixing existing Rspec tests (you still need to fix ""response_controller"" test)
3. Running through a live demo in the Expertiza instance through the UI that runs over changed/improved code in the controller (you may even record a short live demo and submit it here)
The above test strategies are sufficient to ensure integrity of the code and indicates that you did not introduce new issues into the source code. Complete this information into Testing section."
1,"The Wiki page very well explain how the team has done their work and why the work was performed. Great job providing all the details! Since the work was performed is related to fixing Code Climate issues, the team did not use any design principles or patterns. The team simply attempted to fix the code smells (issues) reported by Code Climate tool and proposed these fixes via Pull Request.
Although team did great job on the write up, there are still some improvements can be made. The following is a list with suggestions, missing information, and information that is hard to follow:
- May be start the Wiki page with ""Introduction"" section where you can briefly explain what is Expertiza and Climate Code (although you're doing it but information can be more organized). 
- In the ""Introduction"" section (if you decide to include it) address all new terms, such as Code Climate, code smells, and etc. That is where you can also briefly talk about what is Expertiza (instead of ""About Expertiza""). Do not forget to include useful links.
- Great work on the ""Implementation"" section. However, consider removing trivial fixes since they do not contain any important issues readers needs to know about.
- May be state any difficulties or issues the team has faced while working on the project? How the team handles such issues?
- Please mention (if any) remaining issues and further suggestions for improvements. Did the team has fixed ALL of the issues reported by Code Climate?
- Additional improvements section if your team has done any would also be useful section to read about.
- How did the team verified that issues reported by Code Climate are resolved. Elaborate on that more. 
- Testing section is incomplete in my opinion. Try to elaborate more on the testing that your team has performed. What testing strategies your team used to verified that your changes did not break any existing functionalities? Simply stating, ""We passed all the Rspec tests except for 'response_controller', however, we were not required to fix the issues in for this controller"" is not enough. In fact, fixing broken issues in the Rspec tests is still part of your assignment. Any changes you performed on the controller must be tested against existing Rspec tests. 
- Include ""Conclusion"" section into your Wiki, where you can highlight all important points.
- May be include ""Team Member"" section if anyone in the future would have any questions regarding your fixes and improvements. Also you may provide more information on who worked on what issues?
Above are only suggestions and do not have to be completed in the Wiki. However, as a reader you appreciate having as much information as possible regarding the project some team was working on."
1,"Overall, the Wiki page looks great! Very detailed write up with screenshots of the proposed fixes over Code Climate issues and detailed information for each type of the Code Climate issue reported in the controller files. Great job on explaining what is Code Climate, since some readers may be unaware of such tool and what it does. Also I liked the fact that you listed all of issues reported by Code Climate! This clearly explains what the team has been working on.
However, in the Implementation section I suggest to remove some information regarding trivial fixes. For example, ""Line is too long"" or ""Space missing after colon"" and etc. These are trivial fixes and do not add any crucial information about the work you performed. Including these issues into the ""List of Issues"" and indicating that these issues were resolved is enough information.
Although, your project did not explicitly requested to perform testing, you did great job by including ""Testing"" section in the Wiki (but it still need to be improved, see next section comments). 
After reviewing the wiki page, I can conclude that there are still some improvements can be made to elaborate more on the project, (if any) faced issues, further suggestions and improvements, and testing part (the most crucial). Please see next section for more details."
1,"The writeup is very good. Great job highlighting the changes you made. To make the writeup better, you should explain the problem first, then the solution would make more sense."
1,"The content of the Wiki was improved since last time I read it. This improved version looks a lot better! Great work by the team spending time on documenting more useful information, such as ""Example"" and ""Results"" section! Team did great work by providing more details on the work that they completed. Unfortunately, ""Test Plan"" section still missing important information about testing. Great work on describing how Code Climate tool and Rubocop analyzed your code. However, these tools are not enough for thorough testing. Did team run Rspec tests on all models and controllers as well? Were any new Rspec Tests added to test your code changes? If not, why? All this missing information about Testing is the biggest improvement that should be done in the Wiki.
There are still some suggestions I provided for the Wiki in the 1st peer review round to be improved, but remained unimproved:
- Avoid including ""Files Modified for this requirement"" section. All this information can be found in the Pull Request.- State why not all Code Climate issues were resolved. What is your proposal to fix them?- Were there any challenges the team faced while working on the project? How did you handle them?- ""Test Plan"" section must be reorganized and all missing information about Rspec tests added. State output of running existing Rspec Tests. State why you did not write new Rspec tests to test your code changes. 
Overall, the Wiki page looks good even though some important information is still missing."
1,"Scope of Improvement:
Test writeup is missing. If your project does not demand test addtion/update, team could just mention why the feature does not demand testing."
1,"Write up looks clean and easy to understand. From the first round, team has made changes to the write up to make it more understandable.
 
I would still be interested in reading ""Proposed Solution"" section (removed in round 2). Task Identified section clearly explains what the team wants to do. The explanation for the solution taken could have been added for better understanding. 
 
At the end of the wiki, ""Design"" section has been introduced with no explanation what so ever. Was this due to the pressure of adding one into the project? I couldn't find where the team has used delegation pattern. It would have been great if the team explains more about the usage of this pattern in the project"
1,There are still changes that are to be made to the code. the code now doesn't pass the Travis CI build and the code is also not formatted according to Rust so I would encourage them to run rustfmt after writing code and before submitting the same for pull request again.
1,Writeup is simple and explanatory. I would have liked to see more details on what the problems faced while building were. I would have also liked to see more information on how they figured what to work on and how they approached the initial steps.
1,I tried to build the project from my system and it throws a few errors for me. They have also not made the changes proposed by the reviews of the pull request. So Im not able to verify the functionality. They have also not run the Web Platform tests as mentioned by one of the reviewer. I would have got a better grip on the project if they had completed the requirements or atleast given an idea of how to test the DOM interface.
1,There is a command given to test the build but there is no UI testing as its not an Expertiza project. It would have been better if the authors had evaluated how we could check if the DOM interface was working as expected.
1,Code written is done well and they seem to have answered the problem well. They need to accommodate the changes proposed by the reviewers and it should look better. I would also ha
1,"I think overall the write up looks in good standing. However, for me, since I did not work on the Servo application, it would be nice to have a broader introduction to the team's task, Servo, and the overall expectations to be achieved. The team did identify issues and how they were resolved, but me not being well versed in the subject, more details would been good."
1,"The team has added a lot of content during the second round, but I think it'd be easier for us to review if they add a bit more on what the problem actually is, and what are they doing to overcome the problem. For example, they could brief us a little on DOM interface for ConstantSourceNode, CreateConstantSource API for BaseAudio Context. Another problem I had was, not many instructions were given for how to build and run the project."
1,"Compared to the first round, the team has added code in many of the files and they've neither given bad names nor added complicated functions. However, I can't say more because there's not much explanation for the code, which makes it harder for me to understand what is actually going on. I feel comments could have been added for the code or a code walk-through could have been done on the Wiki page."
1,"This code makes significant improvement over what was there before. The team has done well to identify the trace of all the calling methods and rectify them. I would strongly support integrating these changes to the main branch. However as the team mentioned, one of their sub topics was really vast and needed changes in many places well beyond the scope of their problem statement. Hence they have not changed anything pertaining to that problem. That could be picked up by a future team."
1,"The writeup is fairly descriptive and code is well separated from the description. I would suggest more description on the testing section because at first glance there is not much description, and there is only code which leaves the reader confused. Also, the problem with the 'complete' method' is listed but I would suggest emphasizing the solution more."
1,The work that the team has done has been well explained in the documentation. I would prefer if entire contents of HTML files are not pasted in the documentation as it becomes really hard to go through the entire code. It would be better if you only give a link to the pull request. The person who is going to read the documentation will refer the files directly.
1,"Team has improved the writeup a lot from round 1. The suggestions that were given were implemented. Good work done on write up part.
 
Scope of Improvement/Suggestion:
There should not be too much code in the write-up. It is necessary that you convey what you have done. But I would not prefer to put long method codes in the documentation. This is something I feel team could improve upon."
1,The code is an improvement because long methods like complete was improved through refactoring. I would suggest removing html from models and adding more tests.
1,All the functionalities work very well. One thing that caused problem was that every time I tried to edit the tour the price automatically added a decimal value and then it gave me an error that integer required. The database expects a decimal value and validation is done of Integer.
1,"Overall Good Work:
In all the code, Ruby and Rails guidelines were followed.  Good Job team...!!!!
You could remove the logic for booking from the controller and put it into a model and then call this model into the controller. 
Rest of the implementation is really good."
1,"There is no explanation for the work the authors have proposed to do, it would have been interesting to see explanation on how the constant_source node works and why they are creating a DOM interface etc."
1,"The ""how"" was listed as a series of stops but the ""why"" was not addressed well. A little background info on OscillatorNode, PannerNode and other classes would have helped understand."
1,"The write up is clear. It needs more detail and information. 
Maybe they could add a link that gives more information on the servo browser that they are working on."
1,It is difficult to determine which files were modified for this project.  It would be helpful if the wiki listed specific files pertaining to each step.
1,The writeup doesn't really explain details of the implementation or design principals. The 'Initial steps' and 'Subsequent steps' sections would be more helpful if the steps were more descriptive.
1,They have given detailed description of what the project does and they have mentioned the two issues that they need to implement/fix. They need to implement two node types oscillatorNode and ConstantSourceNode. They have even given detailed information about initial and subsequent steps. However while in the introduction they could have mentioned more information about Servo possibly a external link to know more about it.
1,"Unfortunately, Travis CI tests have failed with the following error(s):
Failures:
  1) assignment function creation page is able to create with review visible to all reviewers
     Failure/Error:
       child_nodes.each do |node|
         initialize_fnode_update_children(params, node, tmp_res)
       end
     
     NoMethodError:
       undefined method `each' for """":String
     # ./app/controllers/tree_display_controller.rb:209:in `children_node_ng'
     # ./config/diagnostic.rb:11:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
	 
	 ..................
179 examples, 1 failure, 44 pendings
Took 320 seconds (5:20)
The command ""export DISPLAY=:99.0 && RUBYOPT=W0 bundle exec parallel_rspec spec/$TESTFOLDER 2> /dev/null"" exited with 1.
Although there is possibility that the failure is not caused by your changes, your team should have investigated the root cause of the failure and report it to your mentor or at least state it in your Wiki page. Did you try to re-sync with the latest beta branch per Zhewei Hu suggestion? If this issue was introduced in original beta branch, I assume that the fix is delivered by now.However, it could be that your team caused this issue even though all your Rspec tests has passed (I watched the video linked to youtube, great job on running these tests!). The error is caused by Capybara. Therefore, you must have validated all your changes with UI testing as well to make sure they did not break any existing functionalities.
There no conflicts of the team's branch with the base branch in the Pull Request. Although I suggest to re-sync your branch with the latest beta branch.
Expertiza-bot also reported 3 Warnings:
- Your pull request has many duplicated commit messages. Please try to squash similar 
  commits.
  And using meaningful commit messages later.
- You are using global variables ($) or class variables (@@); please double-check 
  whether this is necessary.
- There are code changes, but no corresponding tests.
  Please include tests if this PR introduces any modifications in behavior.
Again, this may not be your the issues your team introduced. You need to contact your mentor and discuss how these warning can be properly handled. These warning could have been addressed in the Wiki in write-up document.
The last warning suggests, that your team did not write additional Rspec tests to test your changes. Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources to validate all your changes by writing additional Rspec tests that tests your changes."
1,"Unfortunately, the project is incomplete and it is not ready to be deployed per corresponding OSS project. However, this is very good starting place for a future team to pick up and it should not be redone from scratch. I am sure that most of of the Code Climate issues were resolved by the team and team has done amazing job by resolving the issues. However, there are several reasons why their code is not ready to be deployed:
1. Lack of adequate and proper testing. Running ""bundle exec rspec spec/controllers"" does not guarantee correctness of code changes and fixes in the controllers. There are no new Rspec tests developed by the team to test code changes. Team did not deploy their project for UI testings. Very a little information with regard to testing was added into the Wiki page.
2. Unresolved and remaining Code Climate issues. Team did not fix all of the Code Climate smells that should have been fixed per corresponding OSS project. I think future team can pick up on left over work and resolve following issues that still remain in the controllers:
app/controllers/advice_controller.rb: Unprotected mass assignment:36; Use next to skip iteration:20-23app/controllers/application_controller.rb: Method ApplicationController#current_user_role? is defined at both app/controllers/application_controller.rb:26 and app/controllers/application_controller.rb:70;  Rename is_available to available?:97app/controllers/assessment360_controller.rb: Method populate_hash_for_all_students_all_reviews has 7 arguments (exceeds 4 allowed). Consider refactoring: 123-127; Similar blocks of code found in 2 locations. Consider refactoring: 52-58app/controllers/assignment_questionnaire_controller.rb: Unprotected mass assignment: 42app/controllers/assignments_controller.rb: Parameters should be whitelisted for mass assignment: 381; Convert if nested inside else to elsif: 371; Line is too long. [180/160]: 362; Use a guard clause instead of wrapping the code inside a conditional expression: 309, 359app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21; Useless protected access modifier: 99; protected (on line 99) does not make singleton methods protected. Use protected inside a class << self block instead: 101, 105, 118, 130app/controllers/automated_metareviews_controller.rb: Line is too long. [171/160]: 27app/controllers/badges_controller.rb: Unprotected mass assignment: 21; Inconsistent indentation detected: 27;app/controllers/bookmarks_controller.rb: Unprotected mass assignment: 66; Use %r around regular expression: 23, 24app/controllers/content_pages_controller.rb: Unprotected mass assignment: 54, 74app/controllers/controller_actions_controller.rb: Unprotected mass assignment: 42, 61; Useless assignment to variable - site_controller_id: 74; Prefer each over for: 102, 106, 112;app/controllers/due_date_controller.rb: Unprotected mass assignment: 48app/controllers/impersonate_controller.rb: Avoid too many return statements within this method: 68, 77, 88app/controllers/import_file_controller.rb: Avoid deeply nested control flow statements: 124-128, 145-146, 148-152; Similar blocks of code found in 2 locations. Consider refactoring: 102-106, 113-117, 208-212, 224-228; The use of eval is a serious security risk: 76, 93app/controllers/join_team_requests_controller.rb: Unprotected mass assignment: 48app/controllers/late_policies_controller.rb: Unprotected mass assignment: 66, 96app/controllers/markup_styles_controller.rb: Unprotected mass assignment: 28, 44app/controllers/menu_items_controller.rb: Unprotected mass assignment: 49, 57, 100, 117, 118, 129, 130; Similar blocks of code found in 2 locations. Consider refactoring: 112-116, 124-128
3. Wiki page still can be improved with suggested information that still missing.
These are my biggest 3 concerns with regard to why refactored/modified code is not ready to be deployed onto production server."
1,"Team did a good job validating that their changes did not break any existing functionalities or Rspec tests in the controllers! Team's Wiki page has section about running existing Rspec tests and team provided link to the youtube video where they provide brief demo on running existing Rspec tests.
However, these tests are not enough to guarantee that your changes did not break any existing functionalities. You tested only controllers specs assuming that all tests are only controllers Unit Tests. You should've tested models as well, because models specs use some controllers to perform integration tests. Your team should've execute at least the following command:
bundle exec rspec spec/controllers spec/models
 The above command runs models as well (although you did not change any models). Some models run integration tests that validate code in the controllers of your interest.
Moreover, I see that team did not write any additional Rspec tests to validate their changes.  Per requirements specifications of the OSS Project, ""For each project, you must write related tests."" Your team should have spent some time and resources on writing additional Rspec tests that directly tests all your changes. This would help to ensure integrity and validation of the code you are proposing over Code Climate issues.
Since there are no new tests developed or written, subsequently, the code coverage cannot be adequately increased to reflect new tests rather than refactored code that was done by the team.
The suggestion for your team regarding testing is to write additional 5-10 adequate and proper Rspec tests that can cover broad range of the controllers that your team has modified. Without additional Rspec tests, there is no way to know for sure if your changes  did not cause any problems in the existing code. As it was suggested by me in the first review, there are 4 types of tests that your team should have performed and report the results in the Wiki:
1. Code inspection2. Passing/fixing existing Rspec tests3. Write additional Rspec tests that run directly on the code that was modified4. Run through a live demo in the Expertiza instance through the UI that runs over changed/improved code
In addition your team should have developed new Rspec tests to be completely sure about your changes. After all of the testing steps performed and results are documented in the Wiki, only then it should give some confidence that your changes did not cause any issues.
Also I see that team still did not deploy their project as I suggested in the first review. Running UI of Expertiza instance with your code is one of the crucial parts testing. Did your team validate changes by running Expertiza instance and trying to perform some actions on it? There is no related information in the wiki with regard to UI testing.
Unfortunately, team could have taken multiple approaches to validate their changes, besides running existing Rspect tests on the controllers. But no such approaches were taken by the team. Therefore, testing is done very poorly."
1,"Yes, there were 10 commits during the review period starting from March 25-th. There are 77 total commits performed by the team. Unfortunately, all round 2 commits are done by the same person: Shuai Wang. In fact, I see that most of the work was done by 2 students: Shuai Wang and HHHarden. There were almost no contribution from the 3-rd person.
Also, at least 1 commit (the latest one) introduced new Code Climate issue:https://github.com/ece517-p3/expertiza/commit/20dc75ad09f64204133a65e2d4ef3f79854cbe27This introduced new Code Climate issue that I reported above: app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21
However, there was an attempt from the team to fix as many issues as possible during 2nd round. Good work for attempting it!"
1,"Since the goal of the project is to Fix Code Climate issues in controllers with names beginning with A through N, I expect not to find problems in the code, but to see that all Code Climate issues reported on the controllers of interest are resolved (except for the issues that the team was asked to ignore and document it in the Wiki). To validate that all Code Climate issues are resolved, I cloned the team's Github repository https://github.com/ece517-p3/expertiza.git , using master branch registered it with my Code Climate account, and performed Code Climate validation on it.
I found that some of Code Climate smells still exist in the project as they were not addressed properly, and some of them were introduce at later stage by team. I report them all as follows:
app/controllers/advice_controller.rb: Unprotected mass assignment:36; Use next to skip iteration:20-23app/controllers/application_controller.rb: Method ApplicationController#current_user_role? is defined at both app/controllers/application_controller.rb:26 and app/controllers/application_controller.rb:70;  Rename is_available to available?:97app/controllers/assessment360_controller.rb: Method populate_hash_for_all_students_all_reviews has 7 arguments (exceeds 4 allowed). Consider refactoring: 123-127; Similar blocks of code found in 2 locations. Consider refactoring: 52-58app/controllers/assignment_questionnaire_controller.rb: Unprotected mass assignment: 42app/controllers/assignments_controller.rb: Parameters should be whitelisted for mass assignment: 381; Convert if nested inside else to elsif: 371; Line is too long. [180/160]: 362; Use a guard clause instead of wrapping the code inside a conditional expression: 309, 359app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21; Useless protected access modifier: 99; protected (on line 99) does not make singleton methods protected. Use protected inside a class << self block instead: 101, 105, 118, 130app/controllers/automated_metareviews_controller.rb: Line is too long. [171/160]: 27app/controllers/badges_controller.rb: Unprotected mass assignment: 21; Inconsistent indentation detected: 27;app/controllers/bookmarks_controller.rb: Unprotected mass assignment: 66; Use %r around regular expression: 23, 24app/controllers/content_pages_controller.rb: Unprotected mass assignment: 54, 74app/controllers/controller_actions_controller.rb: Unprotected mass assignment: 42, 61; Useless assignment to variable - site_controller_id: 74; Prefer each over for: 102, 106, 112;app/controllers/due_date_controller.rb: Unprotected mass assignment: 48app/controllers/impersonate_controller.rb: Avoid too many return statements within this method: 68, 77, 88app/controllers/import_file_controller.rb: Avoid deeply nested control flow statements: 124-128, 145-146, 148-152; Similar blocks of code found in 2 locations. Consider refactoring: 102-106, 113-117, 208-212, 224-228; The use of eval is a serious security risk: 76, 93app/controllers/join_team_requests_controller.rb: Unprotected mass assignment: 48app/controllers/late_policies_controller.rb: Unprotected mass assignment: 66, 96app/controllers/markup_styles_controller.rb: Unprotected mass assignment: 28, 44app/controllers/menu_items_controller.rb: Unprotected mass assignment: 49, 57, 100, 117, 118, 129, 130; Similar blocks of code found in 2 locations. Consider refactoring: 112-116, 124-128
Unfortunately, there are more than 30 Code Climate issues that your team did not address on the controllers with names starting with A through Z. All of the above issues can easily be fixed and tested. For the ""Unprotected mass assignment"" issue your team could have used attr_accessible to limit mass assignment or explicitly whitelist all query parameters via permit to allow being used in mass assignment as follows:params.require(:args).permit(:arg1, :arg2, ...)This is the most frequent and also major issue that still needs to be resolved. For the rest problems you can just follow hints that Code Climate provides you. For example, ""Line is too long"". Break that line into multiple lines.
I also looked at some of your code and I see that some issues were introduced by the developers in your team:https://github.com/ece517-p3/expertiza/commit/20dc75ad09f64204133a65e2d4ef3f79854cbe27was committed at April 1 and changed find_by() to find_by_login at line 21.This introduced new issue that I reported above: app/controllers/auth_controller.rb: Use find_by instead of dynamic find_by_login: 21. You should've left find_by() and did not have to change it.
Overall, there are some improvements made on the code. However, not all Code Climate issues were properly resolved and some of them were introduced by the team at later point."
1,"I saw you have touched 6 files in total. But you have mentioned just one example of guard clause. You could have mentioned 3 to 4 examples to enlighten the readers. For example : I see you have changed a file ""lottery_controller.rb"" which could have been a good example to show on the wiki page --  Use the new Ruby 1.9 hash syntax."
1,"The wiki very briefly explains how the authors did the work by providing a single example with the Code Climate issues (Use a guard clause instead of wrapping the code inside a conditional expression). The wiki does not adequately explain why the authors did the work due to confusing terms (Code Climate, code smells, and etc.) There must be more issues that the team has resolved in the code source. Try to identify at least top 5 most frequent issues Code Climate reported, state these issues, provide solution to them with some brief explanation how and why team's solution approaches were used. Trivial improvements, such as ""Extra empty line detected at method body"" or ""line is too long"" can be left out. However, remember at least to mention them and indicate that they have been resolved.
The team should elaborate more in the wiki on how and why they have done the the work. Please consider the following list of improvements I provided below:
- Always start Wiki page with Introduction section where you can briefly explain what you're working on.
- In the Introduction section address all new terms, such as Code Climate, code smells, and even what is code you are working on? Is it Expertiza source code or something else? Briefly talk about what is Expertiza as well in the Introduction section. Do not forget to include useful links.
- In the ""Project Task"" elaborate more on the issues that the team has resolved. Provide code samples and explain why did you use that approach and it can be improved further (if it can).
- The ""Main issue files"" section is unclear. What exactly is the team trying to address there? If you want to demonstrate the main issue, do not just state the file names, provide these issues and explain what the issues.
- ""Typical Issues and Improvements"" section is what you are looking for in the entire wiki. This is good section, but not fully written yet. Try to provide more examples, and solutions with code samples as you have done. This will be very informative and descriptive.
- Testing section is completely empty. Try to elaborate more on the testing that your team has performed. What testing strategies your team used?
- Please state any difficulties or issues the team has faced while working on the project.
- Please mention any additional improvements if your team has done over the project (if any).
- Please mention remaining issues and further suggestions for improvements.
- Also have ""Conclusion"" section in your Wiki.
- May be move ""Project Team Member"" to the end of the wiki since this the least information reader needs to know about.
- May provide more information on who worked on what issues?"
1,You have added a Testing section but there is no content under it. You could have added rspec testing related to your files and also the code climate result after the modification in your files.
1,As such codeclimate assignments do not require extensive testing although the team should have downloaded and verified whether all test cases are passing using rspec. They could also make a video showing the test cases are passing.
1,"Test Plan section is missing. There is a ""Testing"" section header, but the body is completely empty and has no relevant information.
Please, update that section, fill it up with the testing strategies team used, and indicate how the code improvements/changes (fixes for Code Climate issues) were verified and tested against new issues that you could introduce? List all relevant testing steps performed on the fixes that you have done.
Ensure to test your code changes with at least 3 following steps:
1. Code inspection
2. Passing/fixing existing Rspec tests
3. Running through a live demo in the Expertiza instance through the UI that runs over changed/improved code"
1,"The write up is not elaborate.  The wiki does not give an overall idea of what Code climate issue is. From what I understood, there are many available code climate plugins such as Brakeman, Rubocop, each looks for issues in certain aspects of code. The team did not specify which plugins they used to identify the issues in the code. Though this is not a deal breaker, this would help the reader to appreciate the effort put in by the team."
1,"The authors have tried explaining the motive behind the proposed solution. There is no mention about the design principle or the pattern and I believe, we might not need one for this project. 
 
Explaining a bit more on how the solution can help in redution of Instructor's work or on what basis did the team finalize on this solution might help in easy understanding"
1,"I could not find any section of the writeup which explains why the authors came up with this approach or which design principle or pattern the team would be implementing.
It would have been a better approach if the team had specified the design principle in the ""Future works"" section (since most part of the implementation is yet to be completed) to indicate the plan of work."
1,"The work that the authors did was adequately explained. There is just probably a misplaced title ""definition , demo code and snapshots"""
1,"Authors work cannot be tested at this point. As this is a new feature, I believe deploying the solution on Heroku/VCL can help the reviewer to verify the feature. In case, this is a bottleneck, a short video can help the reviewer in better understanding"
1,"The writeup introduces the concepts (Servo/WebBluetooth) the team is going to work with and what their work to be done is (Refactoring vale from enum to trait). They have listed the steps to be followed and files to be worked with. The build procedure of the repository is also mentioned with which I was able to set up the environment. 
But that is all I was able to see in the wiki page, there were no details about how much progress the team has made with respect to the project and even in the links submitted I was not able to see any commits or pull requests. It would have been helpful if the team had mentioned the amount of progress/problems they are facing while implementing the above project."
1,"Very clear, with the exception of how this requirement was met: ""In addition, functions code can be optimized to ensure that it follows DRY principle"""
1,The wiki page surely explains the project description quite clearly. However I felt as if was reading the assignment page given to us by the professor. I thought you could have reworded it or skipped that part because I can read the same thing in the assignment document.
1,"The wiki page does not contain enough information on the project. Therefore, it does not fully indicate or reveal what functionality the work is related to. The wiki has very limited information regarding what the exact issues the team has faced, and attempted to resolve. What has team already resolved and what are the approaches of resolving issues?
The ""project task"" section in the wiki states, ""There is some code smells detected by the code climate"". This is very confusing and abbreviated statement and not everyone can understand what exactly is ""code smells"" and ""code climate"". These terms were not covered in the Wiki. Please, try to elaborate more on the work that has been done, fully address new terms, provide set of solutions the team has performed and list the issues the team has faced.
Below is the list of improvements that can be done over the Wiki page:
- Always start Wiki page with Introduction section where you can briefly explain what you're working on.
- In the Introduction section address all new terms, such as Code Climate, code smells, and even what is code you are working on? Is it Expertiza source code or something else? Briefly talk about what is Expertiza as well in the Introduction section. Do not forget to include useful links.
- In the ""Project Task"" elaborate more on the issues that the team has resolved. Provide code samples and explain why did you use that approach and it can be improved further (if it can).
- The ""Main issue files"" section is unclear. What exactly is the team trying to address there? If you want to demonstrate the main issue, do not just state the file names, provide these issues and explain what the issues.
- ""Typical Issues and Improvements"" section is what you are looking for in the entire wiki. This is good section, but not fully written yet. Try to provide more examples, and solutions with code samples as you have done. This will be very informative and descriptive.
- Testing section is completely empty. Try to elaborate more on the testing that your team has performed. What testing strategies your team used?
- Please state any difficulties or issues the team has faced while working on the project.
- Please mention any additional improvements if your team has done over the project (if any).
- Please mention remaining issues and further suggestions for improvements.
- Also have ""Conclusion"" section in your Wiki.
- May be move ""Project Team Member"" to the end of the wiki since this the least information reader needs to know about.
- May provide more information on who worked on what issues?
Above are only suggestions and do not have to be done in the exact the same order. However, as a reader you want to have as much information as possible on the project."
1,"Scope of Improvement:
Team could improve work on problem statement. It would be more understandable if the team could give examples of code smells within their observation and how team has fixed them."
1,I have added their repository to Code Climate analyzer. They have worked well on the code smells mentioned by the tool. I see they have fixed all the issues except for a few files for example menu_items_controller.rb which i am sure they should be done till the resubmission date.
1,"Team did not deploy their Expertiza project or did not provide information on their deployment in the submission. Please deploy your Expertiza project if you have not done so. Hence, other reviewers and I may test it remotely.
For testing purposes I used the git repo provided in the wiki page (https://github.com/ece517-p3/expertiza), pulled it and ran it locally (which I am not required to do).
I performed short live demo on the UI and can report that all of the existing functionalities in the controller seem to work properly. Although keep in mind that I am not able to run all possible UI scenarios to test your code changes. I did as much as possible to test controller files with names beginning with A through N.
Also, I've ran the following command to test your changes against existing Rspec tests:
bundle exec rspec spec/controllers spec/models
Unfortunately, existing Rspec tests in the controller and model are failing. Please fix them (that is part of your assignment/project). 
The following are results of the tests:
Finished in 37.61 seconds (files took 11.07 seconds to load)
119 examples, 1 failure, 2 pending
Failed examples:
rspec ./spec/controllers/tree_display_controller_spec.rb:130 # TreeDisplayController POST #children_node_ng returns a list of course objects(public) as json
Randomized with seed 33855"
1,"There should not be any issues mentioned here, since your team is assigned to resolve all code smells reported by Code Climate tool. In fact all existing such issues must be resolved by your changes and no issues should be introduced. Team has done great work (although, I see most of commits are done by 2 people, Shuai Wang, and HHHarden) on fixing all the code smells, refactoring and improving the code! No new issues are detected and code looks great! However, the code that has been changed needs to be well-commented. Please provide sufficient comments on some complex functionalities that you've improved.
1. I've noticed that code has been improved by the team removing some of DRY code and placing it into separate method (assessment360_controller.rb, defining new method calculate_avg_grade) and eliminating any lines in files that are too long. Great work!
2. DRY code is moved into separate methods.
3. Needs more comments (for example, import_file_controller.rb). Please provide such comments.
4. Code follows the Ruby Style Guide.
5. There are not code smells nor DRY code.
Overall, great work on changes, but it obviously missing Test Plan and test strategies on the improved code!"
1,"Refactored code resolving Code Climate issues appears to be well modified and follows good RoR coding practices. Due to the origin of the project (resolving Code Climate issues), there is not much of newly-added code, and pull request mostly contains refactored code that already existed in the repository. However, while looking at the changes in the pull request, I noticed few minor issues that can be resolved and improved. Please consider fixing them:
- Remove commented out code (assessment360_controller.rb, app/controllers/grades_controller.rb, and import_file_controller.rb). If this is not a comment, but just unused code, delete it.
- Use new Ruby format for parameters that should be whitelisted for mass assignment (assignments_controller.rb). Example, use ""without_protection: true"" instead of "":without_protection => true""
- Remove any white space added
- Please provide comments on some of the fixes and describe what code does after you modified it (believe it or not that is how you find if your changes are correct, code inspection).
All existing method and variables names within the scope of modified code are reasonable and should not be changed. However, keep in mind that this is not the case for the some other variables and methods on the files that you modified. If variable or method name can be improved in the file that you modify (not strictly the code that you modify, but the file), please do so."
1,The writeup doesn't explain all the issues. It should explain atleast the unique issues with a small description.
1,Either sync your code to trigger the Travis Build or document the result after RSpec testing that way we can identify if the refactoring broke the system.
1,"The writeup does a great job presenting the problem and shows the original code. However, the writeup does not emphasize the solution with concrete evidence of the changes made and why they made it. My suggestion would be to either screenshot changes in git, or add code to show a before and after since this is a refactoring project."
1,"Since there is no ""Test Plan"" in the Wiki page, the authors obviously did not cover tests nor convert them into automated tests. Moreover, I did not see new automated or Rspec tests added in order to test all the modified code.
Moreover, I see that no changes are done on the rspec/controller directory where all the test files located. This indicates that there are no changes or fixes for Code Climate issues that broke existing Rspec tests. Did the team at least verified changes with existing running/passing Rspec tests? Was the following command executed to perform validation:
bundle exec rspec spec/controllers spec/models
Please run existing Rspec tests and report the result (upload the video of running and passing Rspec test to submission board).
If your team was not explicitly asked to write additional Rspec test cases, indicate this in the writeup. Record short live demo showing existing Rspec tests passing as indication that your team did not break any existing functionalities (although there is only ~53% test coverage).
Explain your Test Plan in the write up."
1,"Yes, the problem statement section and About Criterion.rb section clearly explains why the authors did the work the way they did.
I could not find any section of the writeup which tells us about the design principles or patterns used by the team.
I would suggest the team to please include the design pattern used as it makes the code more understandable to the reviewer."
1,"The write-up for the project was well documented. First, the team gave a very well laid out table of contents followed by an adequate background on the purpose of their part of the project.  Then, the document discusses each problem that was given from the OSS document and their implemented solutions.  Each problem and solution set contained several screenshots and code snippets with good explanations. After the problem section, the team included their test plan and modifications made to the existing test cases.  Finally, the documentation is concluded with the names of the team members who contributed to the project.  
Two small areas of improvement that could have been made were to add more details about which files the code modifications were made and a separate Reference section with links to the project.  The team did a good job of explaining the code that was modified.  However, it is not clear which files were modified for each section of the provided code.  The file names are given at the beginning of the whole problem statement, but no within the individual tasks.
While the team did include links to the project's deployment page, GitHub page, and their latest pull request, it would still be great to see these links again the Reference section."
1,There is no mention of testing in the writeup. I would recommend adding how you changed the tests to reflect the things you have refactored. Ex. Added a test case to test a new method you added.
1,The write-up is neatly written with a clear understanding of what is done in the project. The problem statement is given and all the points in the problem statement are jotted down with solutins. What all tests have been performed are written clearly as well. Although it would be great if a design pattern had been taken and explained its implementation in refactoring. It could have been done after the round 1 reviews.
1,"I could not find any test plan section included in the writeup but I would suggest team to utilize ""criterion_spec.rb"" (spec file to test criterion.rb model) and include some additional test cases for each methods to verify negative cases."
1,"First of all, great job going into detail about what is wrong with the current implementation I think you need to provide more context to the user about what the criterion.rb is associated with, and what it does. You listed the methods and how the HTML should be separated into view (which I agree 100%) but my suggestion is to go a bit more in depth and explain a use case scenario about that function."
1,"What is in the writeup looks good and describes the issues being addressed well.  However, two sections only have headers and no body, and the proposed solution only provides a general plan on how to approach these issues, rather than concrete steps that have been taken.  The two empty sections need to be fleshed out and concrete solutions should be described."
1,"All the functionality has been mentioned related to the work. Although, the description could have been slightly more elaborate. Even so, the problem statement is understood and an idea of what the project does is stated."
1,"I wasnt able to locate the link on expertiza or the wiki. Since the spec files did not have changes, the test hasn't changed. One suggestion would be to include a test plan in the wiki and explain how to test."
1,"The criterion.rb still has a method called ""complete"" that is way too long and contains more HTML code. The html string addition is also not very DRY. My suggestion is to go over criterion.rb and break methods into smaller chunks. The redundant code can also be handled using other methods or even Procs. More comment is also needed. The code currently does not follow ruby guideline because HTML code is still in criterion.rb and it should be in views."
1,I would like to see more comments as it is not evident from the functions what exactly it does. There are functions left commented out. I would like you to delete them.
1,"It looks to me like the implementation is not really complete, but what's there looks more or less OK to me.  Code has been commented out; it would be better to simply remove it so the code isn't cluttered up with unnecessary comments."
1,No code to review. Cloned repo exist. Probably add more fn's and send for review.
1,The method names were kept the same. The method name makes sense. I would suggest you to add comments to explain what you are doing.
1,No code to review. Cloned repo exist. Probably please add more fn's and send for review.
1,"No code or implementation available. However they laid out some high level steps, breaking into identifiable code blocks would be helpful."
1,"Please explain what is the issue about. I would also appreciate if you could provide some background about ""standalone media backend implementation"". The references are not hyperlinked either so I would advise to improvise on that as well.
If someone with n background could start reading your wiki should be understandable. So probably starting from what is a webAudio would be helpful"
1,"The writeup is easy to read but is lacking in terms of explanation of how to test the functionality thoroughly. Out of 4 methods, 1 method has been implemented, that is, it is added to the view as partials. The change which is carried out is mentioned correctly. Also, the writeup explains the problem-solving approach and reasons to why it is carried out. I would suggest the authors refactor the method names, for example, the name ""edit"" does not give exact information about the method."
1,It would be great if you could run tests and put screenshots of your tests running successfully in the documentation.
1,"Scope of improvement:
I couldn't see any code addition related to testing. If the feature does not require testing, its always better to mention upfront in the feature documentation."
1,The write up is very impressive and well document. It was quite impressive to see the RSpec tests that were written to test their code.  One area that could be improved is the explanation behind why the actions in problem 7 were taken.
1,"As for tests, There are tests to check the output and pre-condition.
I would be good to check invalid inputs value as well."
1,"There is an issue with the existing assignments Staging deadline. On the main page of assignment staging deadline is different whereas in the particular assignment show page staging deadlines are different.
I think there is a sync issue with the update, which the team can look into as they have made some changes related to staging."
1,"All the test cases discussed in the Test Plan were converted into the Rspec tests! I was able to find each test that was discussed in the Test Plan of the Wiki in the spec/controllers/popup_controller_spec.rb file. Great work on completing these tests!
All the Rspec Tests passed. The results that I obtained vary from the results provided in the popup_controller_test.mp4 video attached to the submission. I was able to get the following results on the ychen239 branch with the latest code, and manually running ""rspec spec/controllers/popup_controller_spec.rb"":
Finished in 5.11 seconds (files took 9.52 seconds to load)15 examples, 0 failures
With the test coverage of 71.69% on the popup_controller.rb file. 
However, the popup_controller_test.mp4 video claims to have 17 passed examples with 96.41% test coverage on the same file.
I'm not sure why I get different results. However, the important part is that all of them are passing and no tests are missing. Great work!"
1,"The code which is added to the partials file is extracted correctly and also called in a few places. I would suggest the authors add comments to what the function does on the code too (even if it is written on the Wikipedia page) because it will be easy to follow what is the method exactly used for. The code does follow the Ruby Style Guide that is rendering a partial is carried out in a clean way. Whatever is implemented, does not ""smell"". So overall a good job for the work done. But would recommend the team to complete the other features too."
1,The testing models were all auto-generated. And no models/controllers carried out any of the testing functionalities. The lines of code are all generated by scaffold and nothing is added by developers. No testing is carried out by anyone. I would suggest the team to work on the testing of the models and controllers since that would give them a better idea on the implementation that needs to be carried out along with proper testing of the entire application.
1,"The team has done testing for some functionality. There are tests available for some of the functionality on the git repository, and those functionalities also work.
But could not find any page which is tested entirely(example - tour can be created, updated and destroyed by anyone which is partially correct, here accessibility can also be tested as what functionality should be available to a customer or an agent)."
1,"I did not find the Read me helpful. You can improve the readme file by adding the information about the implementations details about your project in a gist so it helps the reviewer check those implemented functionalities only. You should add details regarding the admin credentials in your read me file.
Adding a section of things yet to be implemented always helps!"
1,"The UI is basic and straight forward to use. The readme describes some code required to run the software, but is not thorough about it's use or caveats.
From a user perspective it seems to require some training to use. For example, I would expect to be able to book a tour via a link from the tours page, instead of going to a bookings page and having to enter a tour id. While the core functionality is there, it needs work to be usable."
1,"README do not have any information about how to access the app.
application's accessibility is above average, few improvements can be done - 
Every link is provided on the main page so, to access any page have to first access the home page which can be resolved if added in the header section for all pages(ex- as a nav-bar).
There are few links and functionality that can be removed for the customer(ex - can remove Add Tour, edit and delete tour functionality)"
1,"After reading the code. It is obvious that there are a lot of code didn't finish. As for me, the manifest part is unnecassary. The code for testing the seats can be put in model in booking. Model can be used to set the function of different object and it will be more clear to call function in controller and view.
 For using github, branch can be used for teammates to build the same project. It is more easier to do the project in branch and merge together. After finishing one function, you can commit it to github."
1,"The code generally follows good Rails practices. The flow between models, controllers and views is easy to understand. However, I would like to point out that the team should consider moving the logic from the controllers to the helpers. Also, it was advised to us to use Postgres SQL in the production environment which has not been done. Instead SQL Lite 3 has been used."
1,"Good practice of MVC pattern, but business logic should be stored in the model instead of the controller"
1,"The code is in line with the best coding practices of Ruby and Rails. However, addition of comments can always help in the understanding of a third person completely unaware of the code.
There a few points I would like to highlight : 
The password as well as password confirmation is visible which is a high security breach for any web page.
The customer is able to create,edit and destroy the tour. Along with fixing this I would suggest you to remove the buttons of Edit and Destroy the tour as well. I was also able to review a tour that I did not book/take.
I did not find the Admin email or password nor could so I was unable to test it's functionality.
As an agent I was able to destroy tours created by other agents. 
As an agent when I destroyed my own tour, I was still able to view the bookings made by the customers for that tour. Same case for the bookmarks. The bookmarks and booking functionality needs to be revisited and tested thoroughly. Agents should not be allowed to create a bookmark just view the bookmarks for the tours created by them. Agent should not be able to provide reviews.
Validations should be revisited as I could see dates till 31 in the drop-down for the start,end and deadline dates for the month of February.
On destroying the bookings as an agent or a customer for a different tour that I did not create or book respectively, it ends up giving an exception instead of a proper error message.
There are issues with the waitlist and seat booking logic. For example , I created a tour as an agent with 30 seats. Next I booked 20 seats as a customer. Then I booked another 10, 20 and 20 seats. So I got waitlist = false for the first two bookings and waitlist= false for the next two which is correct. But then when I destroyed my first booking , my fourth booking got confirmed instead of the third which is not inline with the First Come First Serve. So now I have 10 seats , waitlist = false, 20 seats , waitlist = true and 20 seats , waitlist = false. Next I went ahead and deleted the 10 seats booking. Both my 20 seats bookings got confirmed meaning i was able to overbook as the tour had only 30 seats."
1,"As a reader, the code logic is written clearly enough to understand except for few places(eg- manifest_controller.rb). I suggest adding comments for each customized function as to what it does. The business logic could be moved from the controller to the models. These tiny changes, and you're good to go."
1,"The code is structured to the MVC paradigm. Most code is in the controller, if possible move some code to the model."
1,"Some large chunks of code with no line breaks or comments explaining what's going on. Other than that, things look pretty good."
1,"Over all, the writeup has enough delivers. But for test explanation, the details are less. It will be better to give the framework of the test and give us some examples."
1,They mentioned the code climate issues they did not fix because the specs told them not to and the files that they did touch while fixing the issues. They mentioned the typical issue and they fix they used to solve the problem.
1,"The wiki is written good but say "" * Super useful file that aided in mocking variable"" could be explained why it useful. I am aware about factories and the requirement for mocking during sessions but unsure they are used in conjunction with anything else as well.
Also please link to the beta/master of your repo instead of file names. Can't figure out the commits and code's thats done by the team. ""The code we created can be found below. "" doesn't state what code test what lines/fn's explicitly"
1,There is a block of commented out code that should be removed.
1,"I am not able to find some test cases as what happens if all functionality work file for -course_student_grade_summary
I am also not able to find any test case that covers the last to unless conditions."
1,wiki page only indicates that all the method will be covered but the detailed test plan is not included.
1,"The writeup covers the method name in assignment360 controller which they need to write tests for, but not talk about the details of how they write the test."
1,"Each test is written well and no major changes need to be made.  However, some lines of code are too long.  They should be broken up into separate lines so that it fits in a text-editor or terminal better."
1,"The team only explained what tests they would be writing, what coverage they expect, and that they will be covering edge cases.  I would have liked to see what edge cases they were testing.  Also, what pre-conditions and invalid inputs are you testing?  The test plan could use expanding but it is off to a good start."
1,"The team explained what RSpec is and what it is used for.  They do a good job of describing BDD and TDD.  I would have liked to read more about how those principles tied into what they did.  For instance, how does their tests tie into BDD and TDD?  Also, how did they follow RSpec best practices in making their tests?  All things considered, they did a good job explaining how and why they did the work they did."
1,"The team clearly explained the background information for the project. However, one thing I would have liked to see was more information about the tests they implemented. Aside from trying to read the test names it's hard to understand what each test is trying to accomplish.  It is also unclear what the assessment360_controller is.  The team did do a good job of explaining the task expectations (i.e. 90% test coverage)."
1,"1. All the test is short enough
2. No code need to be spearated
3. Yes, more comments may needed(but for test project, I'm not sure whether it needs more comment.)
4. The code follows the Ruby Style
5.No"
1,"I think the mean considered most of the possibilities. Actually, for test project, all you need to do is to follow the logic in the controller, which I think the team did a good job. The only thing left is 'action_allowed?' method, which will not add coverage, but need to be tested."
1,"Actually, I think the write up covers everything I need to know but less details. It seems like in the controller, it has 'action allowed?' method, which may not increase the coverage, but I think it needs to be tested also."
1,"Yes, I can understand the project. But I think in the writeup, they lost some details of the project, like how they do the test, what is the test frame like and how many models they mocked, ect."
1,This code doesn't cover edge cases as this is not their requirement. Probably the question rubric should choose question based on the 'class' of the project. The coverage shows 96% but I have no way to test the previous code so all I could do is test their build.
1,The name do make sense. Another suggestion to compare two commits in github to showcase code change and add that to your wikipedia. This show total change in code and the names side by side. It took me over 30 mins in just going over each commit history to look for names from the main code to that of the change.
1,Please add what code you did in there. Probably commit comparison in screenshot would help. This would make it easy to evaluate your code in wiki.
1,"Excellent. I appreciate you for linking the blobs and codes. Its pain otherwise to browse on to the repo. I cant add all start unless you can compare the before and after in say ""course_student_grade_summary"". Please add what code you did in there. Probably commit comparison in screenshot would help."
1,"The authors have improved the code with most of the suggestions as stated in the previous question. However, i take away the one star because as a reader i would have liked a UML diagram or any relationship diagram convincing me that moving some functionality from assignment controller to the helper did not affect any other controller. If the team could have stated that there is no other controller using this helper method, or if other controllers did, then the team should invest a little time and understanding if their actions caused ripples in other controllers."
1,"The writeup is well defined. It has all the necessary fields needed.
However instead, of adding the screenshot of code adding the whole code snippet can be considered a good practice. The image sometimes is not very clear and hence the code snippet can be a better option.
Also they have mentioned about design pattern but that could have been in a separate section that makes it easy to locate information."
1,"looking at the code and changes in commit it does seem that the team has done the necessary task but it is not easy to clone and set up a new environment into my system for every project I do a review. Instead, I would recommend to either deploy such changed project on Heroku and provide a link or link a screencast showing the test cases running. It makes easy to check such stuff by a video rather than setting up the environment."
1,"Yes, the build did pass in Travis CI and I did not find any conflict that needed attention. I saw the commits they were good but again just the comment needed some good naming rest was good."
1,"Yes, after the first round the team did keep on committing the code and shows that the keep was constantly working on the project and has made significant work for refactoring the methods. 
Although the commits are high but I would suggest for better comments for the commits since I found many another test change named commits which is a bad practice to keep track of what was updated. If i want to revert the commit this will be very difficult to keep track of where to revert and where not to."
1,"Yes, there were several commits after round 1.
I would suggest the team to have better comments on the commits as I found many commits with the same message."
1,"Good write-up. The reasoning behind ignoring code smells is missing and in-depth analysis behind the reasons to ignore refactoring ""action_allowed?"" method missing. Please try to explain the reasons as it will benefit the reader in understanding better."
1,No testing link provided. Should have deployed in vcl to allow reviewers to test existing functionalities. The changes look fine when looking at the code.
1,"Build pass in Travis-CI. Small code smells, but most of them are fixed. Commits to db/schema.rb are not required for this project but this pull request has changes to schema.rb. Remove it. Also, please avoid using same names for commits. Preferably use an identifier number."
1,"They seem to have added tests and they showed that they pass. However, I do not think the test cases they mentioned were able to cover the range of this project. they could have added more."
1,"Looks like you accidentally changed the db/schema.rb file. You should undo these changes. Also, be sure to push to the right branch. After these fast fixes, changes should be good to merge."
1,"Proofread to dress up. Some places have grammatical errors such as no subject/verb agreement and lack of apostrophes (see Description of the current project section). Also, I do not think you are using the delegation pattern. The delegation pattern involves a wrapper class and a composition relationship (think about example with wrapping Java generic stack to create a ""pure"" stack). Using helper methods is not an example of the delegation pattern, although you may be delegating the task to a different method.
Content and overall message well organized and informative."
1,Please deploy project and create test users for UI tests.
1,"Build did pass Travis CI. (See message in writeup to ignore code climate issues.) No conflicts, but it is being merged into the wrong branch (you need to be pushing to the beta branch, not master)."
1,Clearly updated code to reflect first reviews and updated names for improvement. Overall this looks good! May want to remove some old comments.
1,"There is no video attached in the wiki (or submission) that shows the flow of the project. But as the test cases pass after the changes, I believe that the UI should work.
 
One suggestion that might have been implemented is to post a video that shows the flow of the program (maybe through the links that specifically goes through modified files). This might have shown the reviewer that the UI is working properly. Optional though"
1,"Team has undertaken the code changes as well as updating wiki in the second phase. My only concern is with multiple commits by a single teammate on a same file. There are exactly 19  commits on the same file (spec/controllers/assignments_controller_spec.rb) and all of them correspond to the same test. 
If the team is trying to check whether their small edits are functioning properly, I suggest them to test these locally, rather than committing for every edit. It also makes life of the developer who is merging easy and is easily trackable. This is not an issue though, just a improvement in the subsequent projects."
1,"The developers explain that none of the features of code flow is affected by the refactoring because of which the code-base has not been deployed. However, I suggest adding a video showing the usage of the UI."
1,"The team has done a good job in identifying long methods and refactoring them by breaking them up into multiple methods or pulling-up some code into the helper such as action allowed method in particular. The code has comments added which makes it an easier read. However, i would have suggested if the team would have explained if the helper method into which the code was pushed into was being used by other controllers. If so, how do we know if it doesn't impact other controllers"
1,"The way the modifications are made, seemed like there would be no modifications needed for the existing test plan as stated by the team in the write-up. However, just to attest this philosophy to a reader, I suggest addition of a video link showing that the existing tests pass along with a difference in coverage statistics."
1,"When I tried to manually test the features which were implemented while refactoring, all of them seem to be working correctly. I suggest the team could write some edge cases to ensure that they do not break the existing functionality of the code."
1,"Since no new tests have been written and test cases from another file are used as a reference, I am not able to check if the cases mentioned are converted into automated tests. I recommend the team to write more tests for the refactored methods."
1,"I could not find any Test cases in the TEST PLAN but the team had mentioned in the ""Testing Details"" section that they have used ""assignments_controller_spec.rb"" to make sure that no test cases were failing due to their changes.
if possible, I would suggest the team to add more test cases and include it into the TEST PLAN section."
1,"The documentation for the project is excellent.  First, the team provided a good background of the problem and the tasks that need to be completed to resolve the identified issues. Additionally, the team included links to the different files that were referenced in the document.  In the middle of the document, the team covers some of the helper files used in the project and their intended purpose.  Then, the team presents its test cases with no failures.  The paper was concluded with the names of the team members and a few sections for references.  The references provide links to their project on GitHub and two screencast sessions that show the results of their work.
It would be nice to have seen more of a division between each of the problem and solution sets.  Additionally, it would be helpful to provide a little more explanation about their solution that ties in the information related to the helper files."
1,"I can endrose this unless I have background on this
https://github.com/expertiza/expertiza/pull/1364
 
Please revise this and update the code base."
1,"https://github.com/expertiza/expertiza/pull/1364#issuecomment-477354426 appears that the code is not passing Travis.
 
Fails at rspec ./spec/models/role_spec.rb:13 # Role role instance to be valid scenario for student
 
Please feel free to send me a feedback revision notice if this is incorrect."
1,"The code is well-formed and appears DRY.  However, a few of the modified sections could use some extra comments for explanation."
1,The test plan shows the code that was used for some of the tests as well as the results.  Perhaps it would be better to swap the helper and the results sections so the results are shown at the end of the test section.
1,"The authors did explain the problems and what actions were taken to correct the previous code.  However, the problem section could be improved by adding descriptions indicating the snippets that refer to the old code and the modified code could be highlighted."
1,"The app behaves as expected mostly, I just wish there were better instructions about steps to follow to test the features that have been affected by these changes."
1,The DRY principle has been the main focus and followed well throughout the code. One thing that could be improve upon is adding more comments in the code in some of the refactoring process like the questionnaire controller.
1,"They have tested - test missing input, test bad input, test various acceptable forms of input, test scenarios that lead to ""true"" and to ""false"" return values.
They could have added more test cases about the preconditions."
1,"Yes, it has 'automated testing with RSPEC'. It's great to see all the test passed. They even write some new tests for the code. If the team can offer the coverage, it will be better."
1,I ran twice and it appears to be working okay.  The edge cases are not documented or added as comment into the code on what exactly each test they wrote do. I can infer from the code but it takes a toil and a lot of time to read and understand what they are through. Would appreciate if you could point what test exactly in each codebase and what each code test as wiki say so.
1,"Though the names make sense but another possible name for ""current_user_has_super_admin_privileges"" would be ""is_user_super_admin"" as its understood that 'user' does say 'current_user' and 'has' is past, use 'is'."
1,"Not surprise. Well laid documentation. However the question is the helper method may take out come functionality if the hierarchy of authorization is not required. 
say   ['Super-Administrator',
  'Instructor',
  'Teaching Assistant'].include? current_role_name, cant be made possible with present helper method. Since 'Administrator' would be in the hierarchy below 'Super-Administrator'. What you could do is to disallow if certain user type is not required in the hierarchy"
1,"There has been some lag in the testing. While creating a new tour, it would accept the alphabetic values in ""price"" field. Does not throw an error."
1,"Almost all of them were covered. However, I could see that ""Agent"" cant edit his/her profile."
1,"The README does not cover how the system handles edge cases; however, I tested with most of the aforementioned edge cases and the system behaved correctly.
Unfortunately, I was able to create a tour with an end date earlier than the start date, so that is why I took off a star."
1,"This project previously had little-to-nothing so it works much better than before!

Logging out creates an error page for all users
Photo uploading is still plain-text and not uploading
Tours usually have more than one location, so I would have more than Location1 as a text field
""NOT TODAY ISIS"" is probably not an appropriate error message for incorrect email/password combinations
Why can't a guest bookmark without entering # guests?
I was able to book more seats than available by editing a booking I made and increasing the number of seats"
1,"The system preforms the basic functions, it is not possible to log out from any user. (Ack that it is mentioned in the readme). I am able to book tours etc. but lot of edge cases don't seem to be handled."
1,"Users have no mapping to tours, even though it seems like they should"
1,"There is only one contributor to the project and I addressed this even during the last review, would have been nice to see the other teammates also contribute to the code source."
1,"Each method handles exactly one task, which is a good design strategy.I found that each method handles exactly one task, which is a good design strategy.The code is well organized. There are not much comments in the code, which i felt was a drawback. Names of some of the variables are also out of meaning making it hard to understand the working of code. Some of the code could've been implemented in models."
1,"The code doesn't use references while creating the tables but adds a separate column by a string (eg in reviews table). 1) As these references aren't present, it was not possible to carry out the functionality. All the testing and assignment was done in the models whereas I thought it would have been better to carry it all out in the controllers. 2) The naming seems fine in the project. 3) The problem I had was with the bulk of coding done in the models, other than that the code looks good. The way the functionalities are well split between functions in the models is actually good."
1,"It is possible to see a listing of the contributions to the project along with comments on those contributions.  However, it is not clear to tell by reading the comments on what changes were made to the project."
1,"The Tour model seems pretty well done, only a few date validations and destroy, + itinerary is missing"
1,Could add more tests for a model class.
1,Navigation involves going from page to page there is no major navigation bar.
1,"Yes the application has been deployed on heroku. 
YEs user interface is intuitive enough. An additional thing which could have been added is the borders to table on the home page. That would make it easy for us to distinguish between various fields."
1,"The interface is quite simple with a table on the home page that display's the display tours, instead of a login page it directly took me to a page where the tours are displayed. This might confuse the user."
1,"The user interface for the tours page works.  It is possible to view a tour, add a review, edit a tour, and delete a tour.  However, the site does not have users, it just lists the tours.  The controls, for the most part, are intuitive and works as described.  However, the booking / bookmark page is a little confusing.  Plus, the user is not able to specify the number of seats they desire for the tour.  The waitlist feature is not fully implemented."
1,Your readme is practically the assignment description. Add some value to it.
1,Probably should have decoupled booking from bookmark. Need to add log in and user functionality.
1,I can see the tours page on startup and it directly gives me an option to create a new tour and the reviews and bookings are the only other functionality that I can access but even that is not readily available on the front page. The concept of admin/agent/customers have not been implemented and that creates a lot of confusion when navigating the UI. It would have been better if the team had at least finished the admin functionality so that all the different tables could have been accessed from the same place.
1,"The code on GitHub looks OK.  However, there seems to be a great amount of commented code that is still being developed.  Also, it was observed a puts statement was used for testing purposes when logging or other alternatives should be used.  Best debugging practices are referenced in this video from week 4 here: https://www.youtube.com/watch?v=permo-RzbhQ"
1,Improve your RoR codebase please. Looks a lot of instance method instead of using ORM layer provider by Rails object
1,Probably should have separated booking and bookmark functionality.
1,"The code on git follows good Ruby on Rails convention. Though I see that only the tours, reviews and booking tables to be completed. The team might want to provide details as to how to check for the admin/agent/customer functionalities. Otherwise, as of now the naming of all attributes of the tables etc. seem to be okay."
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Booking is deleted (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Not able to test this, because I'm not able to see that there are customers waitlisted properly.  On a tour with 10 seats, booked 1 seat as first user.  Booked 10 seats as second user.  Both appeared to be accepted.  No indication that anything is waitlisted.  Tour now has ""Total seats: -1"".
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
Yes (incorrect behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Bookmarks removed (correct behavior)
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases.  README does not cover how the system handles edge cases."
1,"1) Success.
2) Success.
3) Success, but edit admin profile missing.
4) Fail. Successful in creating the tour.
5) Success.
Readme mentions a lot of gotchas but nothing about edge cases."
1,"There are tests for the controllers, but they do not thoroughly test functionality.  For instance, no test verifies whether a user session must exist.  On a side note, the controller code does not block unauthorized actions, but things like an unauthenticated call to create a tour do fail, presumably because of an attempt to call a method on a nil user object.  This is not optimal.  The model tests are just what was generated by rails--there is nothing to fail."
1,"None of the models have been tested thoroughly. The test files in the model are the same that have been auto-generated. The controllers have been tested but with very basic tests and not quite meaningful. The tests written are printing ""Success"" messages in case of a correct page redirect. I would suggest the team to write better validation test cases, which would, in turn, help the team to work better on an application. But basic test cases like system handling the case of a customer to use the same email twice has been validated correctly. The team could have worked better in testing the models too."
1,"In the code pushed on GitHub, only the user model is created. Therefore, the relationship of the user is maintained as a whole. This, in some cases, will not follow the relationships properly. It would have been a better option to create three separate models for a customer, agent and an admin. This is because it becomes easy and specific to define the relationships for various users. It is very important because sometimes, all the users in a system will not have the same rights towards the application. In other cases, like tours and reviews, these functionalities have been correctly implemented."
1,"The commits made on the GitHub repository are not very clear in the first place. This sometimes becomes very difficult for a developer to track the code and identify the changes made during a particular commit. Also, most of the commits have been contributed by a single person rather than the team. When considering commit changes in round 2, several commits and changes have been made. The app is made much better through the changes made after round 1. In case of some functionalities, the team has shown very good efforts as compared to the round 1 application. 
I would suggest the team to make use of all the team member and its contributors in the upcoming projects."
1,"The controllers looked good in terms of sticking mainly to the interaction between the views and the models.  At least some of the business logic that determines whether to book or waitlist a customer could have been put into the model.  The method name ""user_view?"" in the bookmark model is a bit unclear in terms of meaning and is a little redundant, because ""user"" is a parameter.  A better name might have been ""can_be_viewed_by?(user)"".  The structure of the code in the search model was elegant--one line per search parameter.  The ""bookmark(user)"" method name in the tour model could be made a bit clearer, although the purpose of the method is unclear even after looking at the code--it returns the bookmark associated with the user or false if there is no bookmark for that user.  Maybe call it ""bookmark_for(user)""?"
1,"The code is quite readable, that is the models, controllers and views have been correctly placed with proper code. It is easy to find the code of a particular function looking at the name of a file. When a spelling convention is considered, the team has done a good job. The models must be singular, which are in its place. In one particular case, ""bookeds_controller"" is set as a file name, which is a misspelling instead of ""booked_customer"". The same spelling error has been repeated in views too. In case of function calls, the team has taken careful measures to call the functions implemented correctly. But in case of a bookmark, that particular functionality has not been correctly implemented. In coding a particular method, no long and nested methods are called, that shows that the team has tried to work with simple method calling correctly."
1,"Not one model nor controller has been properly functioning , though the agent was able to open the page to create a tour, there was an issue with the tour being created and so the tour is not getting registered."
1,"The code on GitHub follows good ruby and rails coding practices. The code is readable and elegant. The work focuses more on the task and less on the technology. On the other hand, when maintainability of the code is considered, the GitHub could be maintained better. For example, when a particular commit is made to update the code, the comments could be more clear, in order to identify and keep a track of the changes in the future."
1,"The mapping relationship seems to be good enough for the functionalities to be implemented correctly. For example, the agent-tour relationship was found to be 1 to n appropriately. However, while implementing the waitlist functionality, booking model could be used instead of creating a separate one.  This would have been an effective technique since a whole separate model need not be created in that case."
1,Everything is well mapped and looks good. Except I'm not sure whether another bookings_waitlist.rb model was needed to add. You could have simply used the same bookings model to implement the waitlist functionality.
1,"The code is well constructed and easy to understand, however, I felt it would've been much readable if there were more comments to represent what each block of code does. The team has done a good job of evenly splitting the code into appropriate methods instead of stacking all the operations into an individual method. The naming convention they followed is also pretty straight hence making the code easy to follow."
1,"The code was found to be easy to read. Various format like email regex, password validation have been implemented properly. I found that one of the controller ""bookings controller"" has a long method with several nested blocks in the create function. This could have been avoided. Also, some other conditions in the controller could have been avoided using the helper method. Other than this, the rest of the code seems to be good.  I also didn't find any bad naming convention used in any of the files or folders all throughout the repository."
1,"I found the code easy to read and was not confused by the code structure.
 The email format regex /\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i is defined well in the model. 
The Bookings controller has long methods with many nested blocks in create method.
Could have used helper to reduce the conditions in controller.
Rest looks good"
1,"-The Admin Part. I can see the list of tours and customers. I can create tours and customers. 
-The Agent Part. I can create and edit tour. I can see the bookmarks from customer.
-The Customer Part. I can see the list and details of tour, but I can't book the tour. I think they might have the wrong link with booking. The link makes me go to booking list page.
-Others.

Couldn't sign in with Google account. When I click sign up wi google, it gives me 404 page. It might because the devise gem.
Couldn't search tour properly. Even when I search the tour that exists, the page went wrong."
1,"Most of the functions work well. One thing I'd like to point out is that the system should not let agent to decide whether a tour is completed/ in future/ cancelled. Instead of that, the system should decide that based on the date of a tour."
1,"The business logics are applied on the controller, while it would have been meaningful if implemented in the model.
For instance, in the bookings controller, the update and create methods are too long and the entire business logic is applied within those methods."
1,"The UI has a number of problems.But as written in README file,they haven't done the whole setup.So I really can't comment on this.
Even some of the links given in the README file are not working.
The README file needs to explain what is exactly implemented and what so that reviewer can check accordingly."
1,"The basic functions like booking a tour works, but again updating of a booking doesn't work and price is also negative for a particular tour. Search tours tab also leads to an error. 
The team might have implemented these functions (I can tell from the code) but the working is not testable since it renders an error for me. Please look into the same."
1,"Since all the code is kind of scattered among 5 branches, I'm having hard time to find the main branch. For purpose of this question, I am using all 5 branches to find answers. May be in future would be good idea to specify what branch is the main branch. Per my observations, I see the following:
Tour belongs to agent (many-to-1) and has many bookmarks and bookings (1-to-many). However, tour is missing relationships with customers (and also admin). Tour must have many customers (1-to-many), however, this is not handled. But instead I see that customer handles many bookings, bookmarks and reviews. This is how relationship with Tours is done.
User does not have any relationships with other tables. Models/user.rb only validates parameters. 
Agent has many tours (1-to-many). Correct.
Customer has many bookmarks, bookings, and reviews. Correct.
Booking belongs to customer and tour and has one review (1-to-1). That is how tour-booking-customer relationship is built. However, why does it have only 1 review? This design is already a little too complex and overextended. If booking has only one review, why don't make a review as column in the booking table instead of creating separate table? If this is not the case, then relationship is stated incorrectly.
Bookmark belongs to customer and tour. Correct.
Review belongs to customer, tour, booking. Correct, but booking has 1-to-1 relationship with Review. Why don't make review as column in booking?
Overall, I conclude that DB design could be improved although it would probably work for this app. First of all, the fundamental flaw is that you separated users into admin, agents, and customers. It would be a lot easier to have one table for all users and make relationships with other tables based on this one."
1,"The booking model is specified as has_one review. I did not understand the need for this. Nor was it specified in the requirements.
A lot of validations could have been done in tour.rb and in user.rb
Rest all relationships have been correctly established."
1,"There are 3 contributors and regular commits have been made, I would urge the team to push the final project onto the master so that the main app can be a bit more easily accessible."
1,"The code is clean, readable and follows good RoR coding practices to a certain extent.  Unfortunately, there are no substantial comments for any of the code and very a little documentation in the README (only admin credentials).
Controllers files are overwhelmingly bulked with ""if/elsif/else"" statements and contain some of the nested ""if"" statements. For example, the users_controller.rb file is too extensive and complex file that has way too many ""if/elsif/else"" statements. Method ""create"" that supposed to handle only one task, which is to create new user, instead does at least four tasks: 1) Check if the account already exists. 2) Check if passwords matches. 3) Checks if user is Customer. 4) Check if user is Agent. There no function calls to handle these tasks since it can be checked within a single line. I see that check the type of the user is necessary for the system, but it could have been done simpler way in the create. For example:
if user_params[:type] == ""Agent""
  create_agent()
end
Moreover, controllers/reviews_controller.rb has bulk of debug print statements (lines 27-34):
print ""\n#########################\n""
For debugging purposes, you must use logs as more reliable way instead of simple print statements.
Models files are almost empty; however, that's where all of the logic of the app should be stored. Please code all your logic in the models instead of controllers and views.
There are some bad naming in the project. The /controllers/bookmarks_controller.rb show the table named ""Array"" (line 8). What does this table mean? Array of what? In the views/tours/search.html.erb there are some variables with names ""avlseats_check"". What does this variable mean besides that it has something to do with available seats? Naming of variables should be done in better way."
1,"A lot of debugging code is left in the reviews controller. You could have cleaned that up! It just makes for easier reading.
In the Tours controller, you have definitions for a review, booking, bookmark etc. This defeats the purpose of having separate controllers for each! This looks more like a design issue than a coding issue.
Otherwise, the method definitions look clean!"
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
The team has defined four separate models for Agent, Admin and User and Customer. A single model User could have been used to implement all the individual functionalities.
I did not understand the need for the ""user"" model
I found the controllers to be heavily loaded with business logic. Logic can be moved to models or helper methods. Also, I could not find proper validations in models(for eg. there are no validations in tour.rb)
The are many if-else block in create method of bookings controller but I found code to be easy to understand."
1,"The code follows the best practices of Ruby and Rails. However adding comments can always help a third person to better understand the code and it's functionalities when he/she is completely unaware of the nitty-gritties.
Some essential points I would like to highlight - 
There is some issue with the profile page for both agent and customer. It throws an exception. You should also think of displaying a welcome message with the role mentioned ( admin or agent or customer) 
As a customer I was able to see the destroy, edit buttons for the tours which is wrong. Although I wasn't able to destroy the tour but showing the buttons itself is incorrect.  I can also see the New Tour button as a customer which is incorrect. On clicking on this button there is an exception.
The bookings tab should be improved by giving better names to each functionality. Because now I am confused what Booked and Waitlisted means? I as a customer should be typing the booked and waitlisted seats. Plus you can put a drop down on the Tours because it is cumbersome for a customer to write the tour name. Or you can give an option of Booking beside the tour only like you have given for bookmarking. 
I did not find the admin credentials anywhere so couldn't test it's functionalities. 
As an agent I was unable to to view the My Tours tab as it throws exception. In the Tours page I could only see the tour I created.  On creating a tour I was asked to enter the available and waitlisted seats which should not be the case instead you should populate those values in your code logic."
1,"Looking at the tours controller, it seems that generally good coding practices are being used. I think, however, some areas where print statements are being used, this could've been handled in the .html files in the views folder."
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Remove all the ""puts"" and ""prints"" statements form the app/controllers/tours_controller.rb as I suppose it is for debugging purposes.
print ""\n####################################\n""
For debugging purposes enter all relevant information into the logs. Utilize logs instead of simple print statements as you lose them when application stops.
2. app/controllers/users_controller.rb is a little too extensive that and can be considered to be too long for controller class. Avoid bulk of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and contain no logic whatsoever. Consider refactoring it. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
Other than that controllers files are very clean and follow good coding practices.
3. All of the Model files are empty. But that is where all your logic should be stored. Consider revising your logic part of implementation and bring it to the Model classes.
4. Views look good, but that's where all job to improve UI should be done. Please improve all the fields that require input from a user here in the Views."
1,"The code is only scaffolded models. Nothing has been written in the controllers.
I suspect that you have submitted the wrong git link."
1,"From what they have completed, I found code easy to read and they seem to have decent Ruby on Rails coding practices.
The code shows readability and maintainability which is an elegant way to code.
I could not find any validations in model. Validations can be added to prevent user form adding incorrect data.
seed.rb was entirely commented( it can be used to specify admin credentials.)"
1,The user has followed good naming conventions and the functionalities of the controllers were understandable. They have implemented separate controllers for users/agents/customers. I feel it could have been done with a single controller called users and they would have been able to save a lot of extra work.
1,I did not find the read me useful . You should work upon improving your read me file because it is the first thing a reviewer looks into to get a better idea of your implementation. It is okay to not implement features given the small time-frame but if you mention those in your read me file it saves a lot of time for the reviewer.
1,The user interface seems fairly intuitive. I would have appreciated it more if you had a book tour link in front of every tour instead of having it separate.
1,"1) when an admin tries to delete tours, all associated bookings and reviews of the tour are also deleted.
2) The person's bookings are not automatically cancelled. They have to manually cancel bookings and then only will the customer be able to delete their account.
3) Admin account cannot be deleted.
4) tour's start date, end date and book before date have been correctly validated.
5) When an admin deletes a customer, all their bookings are automatically deleted. 
6) The admin has very limited access. The admin cannot create new tours. bookings, bookmarks, reviews etc. The requirements document clearly mentions that the admin should be able to do everything that an agent or a customer are able to do. I think the problem with your code lies in the fact that you did access control by mainly creating three different databases, one for each role. The agent and the customer clearly had different functionality so that didn't pose a problem then. But when you go to the Admin, you can neither classify that as an agent or a customer because an admin has to be both.  I think that instead of dong this, you could have created a users database and added a field named role which would take the values ""Admin"", ""Agent"", ""Customer"". You could have done you access control based on this role."
1,"If an admin tries to delete a tour that has bookings, all the data for that particular tour is destroyed. The details of all the booking for every customer will also be destroyed. If a user is deleted who was enrolled for a tour, a message is displayed on the screen while deleting the user which says ""Please cancel all related bookings before delete account"". No, an admin cannot be deleted. Yes, a tour creation is possible which has an end date earlier than the start date. Yes, if a customer has bookmarked a certain tour and then later deleted, he/she will be removed from the corresponding interested customer's list too, but the same case is not possible for bookings of a customer."
1,Good Work: Most of the edge cases are implemented. But they are not documented in Readme.md
1,"(1) What will happen if the admin tries to delete tour that has bookings?
Booking is destroyed (correct behavior)
(2) What will happen if a user is deleted who was enrolled for a tour and there are customers waitlisted for the same tour?
Cannot delete such a user - ""Please cancel all related bookings before delete account""
(3) Can Admin account be deleted?
No (correct behavior)
(4) Can a tour have end date earlier than the start date.
No (correct behavior)
(5) What will happen if admin tries to delete a customer who has bookmarked several tours, will (s)he be removed from the corresponding interested customer’s list?
Cannot delete such a user - ""Please cancel all related bookings before delete account""
(6) You can come up with more edge-cases. If the system fails in some edge-cases, explain with enough details. The README.md should also cover how the system handles edge cases.
Did not come up with more edge-cases.  The README discusses several edge cases but not all possible edge cases (which I don't consider to be a problem for a project with this timeline)."
1,"They have handled the edge cases nicely. for example, changing the agent ID to null for a tour if the agent is deleted."
1,"I found that admin cannot booking a tour, at least I didn't find a way to book a tour with admin account.
Also for bookmark and reviews, the admin only can update/edit/delete, admin cannot create one of these."
1,"I think one of the very primary requirements of the system is that an admin can do everything an agent and a customer can do. This is completely missing in the project. 
The admin is able to do all the functions that are exclusively it's own. So can the agent and the customer. But when it comes to sharing functionality in the system, it is missing.
See point 6 in the next question's review for a detailed explanation on how you can resolve this."
1,"The system works as it is supposed to work. There are some minor issues like an admin profile cannot be updated. There was also one particular functionality where an admin wasn't able to view the reviews posted by the customer through its profile. That particular glitch has been updated. Apart from that, all the other functionalities seem to be in place. A customer is able to carry all the basic tasks like searching and booking a tour, an agent is able to list a tour and an admin is able to perform all the functionalities of a customer as well as an agent."
1,"The create and update method on books_controller are too long. Also, it has multiple tasks in these two methods. 
I didn't find any bad naming on the project"
1,"The name ""booking"" would be preferable to the name ""book"" for bookings, but that choice of name may be due to a lack of familiarity with the term ""booking"".  The books controller does seems to be doing a lot in the create and update methods; I also struggled with finding ways to separate out code, since there necessarily is a fairly tight coupling between what is happening in the model and what the ultimate outcome of these actions are and thus what needs to be presented to the user.  There is duplication between the admin, agent and customer models; perhaps a common ancestor class could have been created?"
1,"One of the good practice followed by the team would be to focus more on the technology rather than facing on the user interface, but the team has kept both of these in mind and implemented everything in a correct manner. The code shows readability and maintainability which is an elegant way to code. All the details have been taken care very minutely, including validations at several places. The code has handled one as well as multiple tasks. If there are multiple tasks, they have been handled by function calls. According to me, there is no bad naming in this project. Also, I couldn't find a code with long methods and several nested blocks. Overall a good job is done by the team."
1,"Overall Good Work:
Ruby guidelines are followed throughout the project.
The missing thing is - logic should be model rather than the controller. Eg . like the one for Booking"
1,"The team has been pushing all their changes regularly throughout the project period. The team has also created branches to carry out separate changes and then merged along the way as soon as a particular functionality is implemented correctly. GitHub is handled in a very good manner except for the messages for each commit. It would have been a perfect project according to me if only the messages had been correctly done. Each contributor has carried out work individually and pushed it, which shows that work is carried out regularly by every individual. This looks very positive on the team members and the team as a whole."
1,"The tours and bookmarks shown can be made better by just adding few details at listing page and you can add ""show more"" link which expands this."
1,"The controller validations look great. However, the model validations could be made more detailed by giving regular expressions to match an email rather than giving examples."
1,"I have to say that I am impressed with the UI in terms of look and feel.  One concern I have is with the search functionality: although it appears to be quite powerful, it might be a bit confusing for a casual, non-technical user.  I would suggest data-specific fields (name, date, available seats, price, etc.) and more basic functionality (for instance assume ""contains"" for strings instead of providing tons of options)  Also, the 'log in' link could be a bit more prominent; I didn't notice it at first and wondered if it was possible to log in at all.  The JavaScript used to manipulate the dates was pretty cool, but I would have chosen to use Rails' built-in date-field functionality because it is a little easier to use.  Creating a review was counter-intuitive in the sense that it needs to be done from the booking instead of from the tour details."
1,"The user interface is very easy to use. Very brilliant work is been carried out by the team by focusing on each and every functionality minutely. Starting from the home page to the tours, and its details everything looks perfect. All the details have been taken care very minutely, including validations at several places. The only minor problem faced was during the review. Finding an option to write a review for a completed tour is difficult. Once the review had been added, to view for the agent as well as an admin then can be an easy job. Kudos to the team for an amazing job!"
1,"I really liked that you took time to add some styling to the application.  This made the application feel friendly.
I also really liked that you have a menu drop-down, this made it easy to navigate.
A few things I noticed:
When filtering tours, it is possible to create nonsensical filters, such as ""Description less than 2"" or ""Availableseats contains apple"".  In the latter example, when I attempted to search, I was taken to a page that said ""We're sorry, but something went wrong."".
It is possible to edit an existing tour that is still in the future, to give it the status ""Completed"".  I would suggest either disabling this, or calculating the ""In Future"" versus ""Completed"" status, rather than allowing a user to explicitly set this status.
It is possible to create a tour with -1 seats.
When logged in as a customer, on the page titled ""Editing Booking"", I reduced my booking seats from 10 to 8 and clicked ""Update Booking"".  I saw a message ""something went wrong"".
Very well-written README file!"
1,"The interface is really pretty, as they have added styling to each element rather than just html fields. I did not find the necessity for a readme as the interface was very easy to understand. One thing I would suggest is to change homepage from signup to login, because I will sign up only once, but I will log in a lot of times."
1,"Bookmark model has belong_to has agent. It is unreasonable as a bookmark can only belong a tour and a customer. That is, when a corresponding tour or customer is deleted, the bookmark is deleted. However, a deletion of the agent should not delete the bookmark directly.
Furthermore, the schema file shows that the Bookmark table has only the agent_id as the foreign key which further provides evidence to the above mentioned anomaly."
1,"All given Edge cases were tested and there were problems found running following scenarios: 
1. Admin deletes tour that has bookings: All corresponding bookings for booked customers are also removed. Agent does not have this tour listed any longer. The system behaves properly and no issues observed. Passed!
2. User is deleted who was enrolled for a tour and there are customers wait listed for the same tour: None of the customers who wait listed in the same tour were moved from wait list into booked. I do not think deleting customer actually free up the seats that customer booked. For example, As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it placed that 1 seat into wait list as expected. After that I completely removed the Customer1 from the system (that customer had 5 seats reserved for the Tour). Hence, I expect Customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. This is again big bug. Hence, Failed!
3. Admin account cannot be deleted. Passed!
4. Yes, tour can have end date earlier than the start date. Failed: As Agent I can create a tour that has end date earlier than the start date. No validation is performed correctly.
5. If Admin deletes a customer who had bookmarked several tours: I am unable to see what is going to happen and whether the customer and his/her bookmarks are removed from the list of bookmarked customers for corresponding tours. This cannot be tested because as Agent I cannot see who bookmarked my tour. ""Agent Center"" page does not work, it results in error with ""NoMethodError in Hone#agenttourlist"" error displayed on the Web. I count this as Failed test case.
6. If Admin deletes agent that had listed tours: It breaks the App. Now as Admin (note that Admin deleted Agent1 from the system), or Agent2 I cannot view any tours anymore. As Admin or Agent2 I click on ""All Tours"" link placed at the bar on the top of the page. But it results in error ""NoMethodError in Tours#index"" error displayed on the Web. This test Failed. Please make sure you have correctly stated dependencies on delete action. This will not work if any Agent will be removed from the system.
README contains some edge-cases scenarios, but for above failed ones it did not work properly.
Therefore, out of 6 edge cases tests, 4 Failed and only 2 passed. Since 2/6 passed, I give 2/5 score for edge cases.
Unfortunately, no further code changes are allowed and there is no possibility to fix anything."
1,"I see some (only few) improvements since my first round peer review. The app was successfully deployed into the AWS Amazon. Well done. I also see that extra credit has been done and user can login now with Google account and the app sends an email when the status of the customer moves from waitlist to booked (however, your wait list functionality does not perform correctly. See point 14 below).
However, there are still bugs in the system that I reported in the peer review 1 period. Did you read my comments in peer review 1? Most of the issues are still not resolved. Below is the list of some issues that I still observe. Along with old issues I also noticed there are few new issues in the app that were introduced after peer review period 1.
1. As Admin I should NOT be able to change my preconfigured credentials. However, I can do that. Someone can easily mess up your admin user credentials.
2. As Admin I want to list new tour from Tours page (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/admin/tours/new). Filled in ALL the blanks and clicked ""Create Tour"". However, I see 2 errors prohibited this Tour from being saved: 1) Country can't be blank. 2) State can't be blank. But there are no Country neither State fields in the form. README file does not address this problem. You are missing country and state in this form. But if I create tour from ""All Tours"" page, it works fine.
3. As Admin or Agent I try to go to ""Agent Center"" by clicking on the link placed at the bar on the top of the page. But it results in error with ""NoMethodError in Hone#agenttourlist"" error displayed on the Web. This is pretty big bug unfortunately and users will not be happy to see it.
4. As Agent I want to view all the customers booked for any tours listed by me (their profile details except password). Unable to do it may be because all this information is stored in the ""Agent Center"" page that cannot be accessed. However, in tour page this information is not visible to the agent.
5. As Agent when I create new Tour, I should not enter/maintain number of available seats (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/admin/tours/new). Number of Available seats should be maintained by the system by finding the difference of total seats and seats that were booked by customers. Just completely change this form of the new tour with the form in the ""All Tours"" page.
6. Tour can be created having end date earlier than the start date.
7. As Agent I should not see ""Bookmark"" or ""Booking seats"" options for my own Tour. I am agent - not a customer.
8. As Customer I should be able to submit a review for a tour that that I've already taken. But I can submit a tour review for Tours that not I have not taken yet.
9. As Agent or Customer I want to edit my name. Although I can edit my profile, but I cannot edit my name!
10. As Agent or Customer I want to see a Wait List of each listed tour. This feature is not implemented or not easily found. Wait List of the tour is not visible to anyone! As Customer I can only see my own wait list for a particular tour.
11. Search functionality is not working. In the following page: (http://ec2-18-188-159-107.us-east-2.compute.amazonaws.com:3003/tours), I enter the name of the tour I want to find in the search box (""Search By Tour Name"") an click ""Search button, but nothing happens. I cannot display the tour that I am trying to find.
12. Search functionality must be implemented using filters, such as start date range, price range, tour name, slot availability, and locations visited during the tour (itinerary). At this point I only see that Tours can be searched by names, but this functionality does not work properly. (See point 9 above). Moreover, none of the filters were implemented.
13. As Customer I want to cancel partial number of reserved seats. If I have reserved 5 seats and trying to reduce it to 4. I choose ""Edit"" in the Booked seats section and enter 4. Then I click ""Booking seats"" button, but I creates additional reservation for me! Now I have 2 reservations! When I try to repeat that procedure, now it shows ""Entered seats greater than aval seats""! Basically, with update it creates new booking each time until it runs out of space in the Tour. This is a big bug that needs to be fixed.
14. Wait List functionality does not work! As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it placed that 1 seat into wait list as expected. After that I completely removed the Customer1 from the system (that customer had 5 seats reserved for the Tour). Hence, I expect Customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. This is again big bug.
15. As Admin I want to go to ""Customer Center"" by clicking on the link placed at the bar on the top of the page. But it results in error with ""NoMethodError in Hone#customercentert"" error displayed on the Web. This is pretty big bug unfortunately and users will not be happy to see it.
The above bugs are still not fixed and no improvements are done to eliminate them. In some cases system does not perform as it supposed to or expected to."
1,"Code is very well written. It is very readable. Only suggestion is that the create method has a lot of code and it can be reduced. Otherwise, it is nice."
1,"Overall, the code is clean, readable and follows good RoR coding practices to a certain extent. As I noticed several things in the peer review 1, some of them were actually worked on to improved code quality of the App.
a) All hard-coded values from controllers/users_controller.rb are gone. Good improvement.
b) controllers/books_controller.rb is a little too extensive file. It is overwhelmed with bulk of ""if/elsif/else"" statements in the controller (starting at lines 18 and all the way throughout the file). As I previously mentioned, controller should be as simple as possible and should not contain any logic. Refactoring was not done and even more complexity was added into the controller.
On the other hand, Models files that should contain all of the logic are pretty much empty. Indicating that most of the logic was performed in controllers and views, which is incorrect RoR paradigm.
Code is well commented in some places, but it is hard to follow. In some cases one method handles more than one task without additional function calls. For example, when new booking is getting created, it calls ""create"" method in the app/controllers/books_controller.rb file. However, instead of creating booking, it checks
1. Whether there are enough seats for a booking. The logic now has a lot of nested if/else statements inside of this if block. It updates available seats in the tour based on some logic and saves the booking info into books table
2. Whether there are not enough seats for a booking. This block also contains bunch of nested ""if/elsif/else"" statements that based on the choice perform different operations, such as if wait list is selected, add the booking info into wait list table. If continue is selected, book available seats and move the rest to wait list table. Then it updates book table and then it also updates tour table for available seats. If cancel is selected, it redirects to the tour page.
Therefore, a simple function that supposed to create a booking, handles at least five different tasks without doing any function calls. This makes the code very hard to read and follow.
The same applies for the ""update"" method call in the ""books_controller.rb"" file. It checks (line 181) if (booked seats - bookOld) > tours availabe seats it does something, else it does something different. Again, very complex and bad naming for variables.
 
There are some bad naming I found within the project:
1. bookOld - app/controllers/books_controller.rb, line 177
2. w - app/controllers/books_controller.rb, line 201
3. old_total_seat - app/controllers/tours_controller.rb, line 116
4. old_aval_seat -  app/controllers/tours_controller.rb, line 117
5. old_status - app/controllers/tours_controller.rb, line 118
There are some other minor issues with coding, mostly too many nested if/else blocks especially within controller.
Unfortunately, code quality still can be improved."
1,"Update and destory method in Bookings controller are too long. Similarly Update and book methods in Tour controller have multiple responsibilities handled in a single function.
The Book method could have been refactored to multiple function calls. Having long function calls is a bad coding practice as it hinders both code maintenance and modification."
1,"The code is well organized and easy to understand, however i felt it would've been much readable if there were more comments to represent what each block of code does. The team has done a good job of neatly dividing the code into appropriate methods instead of stacking all the operations into a single method. The naming convention they followed is also pretty accurate hence making the code easy to understand. I found long nesting in agents_controller.rb which i thought could've been avoided. The bookmarks_controller class takes care of the bookmarking tours."
1,"Variable names are clear and concise.
 
I really liked the copious use of custom flash notices!  This could really help the user when they make mistakes.  For example:
 
flash[:notice] = ""Cannot edit other customer's booking!""
 
A few things that I noticed:
 
In app/controllers/admin_controller.rb, the admin email and password is hard-coded.  I would suggest pre-populating the database with the admin user instead, and checking the log-in credentials against this pre-populated record.
 
I would suggest adding some more comments into the code to assist a reader of the code in understanding what methods are intended to do.
 
In app/helpers, there are many files that don't really do anything.  Ideally such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: the same problem probably exists in my own code!
 
I expected to see more code in app/models.  From my understanding, in an MVC project, the ""M"" should do a lot of the heavy lifting.  I would suggest moving any SQL queries into the applicable model."
1,"No, they seemed to have only worked on the project for about 5 days consecutively, but it was consecutive. Would be helpful if you had at least one extra branch to keep your master branch cleaner."
1,"The UI is very intuitive and the README provides the essential information about the required functionalities.
One suggestion is to use text field for phone numbers and prices instead of a number field."
1,The user interface is very well implemented with login forms and different colors for buttons for easy differentiation. I felt it would've been better if there was a back button or links to previous pages instead of using the browser's navigation buttons.
1,"Inspite of the fact UI does not carry points, the website created had a great interface. A 'back' feature or 'Home' button could be included as I was not able to login as both customer and agent. The read me file was very clear"
1,"While being logged it, it's confusing to ever be redirected to the login page. You should redirect the user to their role's landing homepage at root. Also, when you create a customer/admin account, it doesn't make sense to login as that newly created user. If an admin wants to create other users or tours, this is very inconvenient. There doesn't seem to be any way to edit admin information (such as name or email or password)."
1,"The CSS styling of the application was fantastic - definitely beyond what we did on my team to be honest.  This friendly and clear styling put me at ease and made me confident to poke around in the UI.
When I did start poking around, I came upon a few ""dead ends"".  For example, after modifying a tour, I was on a page which offered the options ""Logout"", ""Edit"", and ""Delete"".  It didn't seem that I could navigate from this point to anything I wanted to do.  I had to use my browser's back button to get back to a place where I could do more useful tasks. 
Another example is that after viewing a user, and clicking ""Back"", I was taken to a page which offered the options ""Sign In"", ""Sign Up"", and ""Log Out"".  Again I had to use my browser's back button to get back to a place where I could do more useful tasks. 
I would suggest adding to app/views/layouts/application.html.erb to provide common useful links regardless of which page the user is currently viewing.
I tried ""Can the admin create customer and agent accounts?"" but this looks like I was signing up as a new user, and after doing so I saw ""Greetings, Customer Q. Public"", indicating that I was no longer logged in as the user.  I would suggest adding an alternative way to create a new user, when you are the admin, that does not automatically log that new user in.
After this experience, I logged out, and found that I was not able to log back in as the admin - ""Invalid email or password."".  I noticed that the URL was now http://rails-p2.herokuapp.com/customer.  I would suggest having a log in page that is agnostic as to user type.
When I attempted to delete a user, I was instead taken to a page that showed me that user's details.
There were many tasks that it was not clear to me how to accomplish / whether they were implemented.  These can be seen by which checkmarks I have checked (or not) in the review.
When creating a new tour as an agent, I found that the ""Contact"" input was an integer, which confused me.  I would suggest making this free-form, or a drop-down of user names.
When logged in as an agent, I attempted to delete a tour that I created.  The delete button did not appear to do anything.
When logged in as a customer, I attempted to cancel partial number of reserved seats.  I went from (not sure of exact numbers) 99 to 98 seats.  Instead, my booking dropped all the way to 1 seat.
When logged in as a customer, after deleting a booking, I was taken to http://rails-p2.herokuapp.com/bookings/2, where I saw ""Henlo"" and no available links.
Overall, unfortunately I did not find the interface intuitive and easy to use, for the reason that it was often unclear to me how to get to a place I wanted to be, and I was often surprised by what I saw after clicking something.
The README file did offer a few tips, but none that helped with the issues I was experiencing."
1,It will be easy if you can mention the name of the test you performed. Had to check every file to see which was tested.
1,"I don't see the test function implemented as of now. So, maybe the group can finish the same before the final submission."
1,Some function calls can be made in users_controller rather than embedding code at one place. Everything else looks good. There were too many nested loops in tours_controller.
1,"The UI is simple and easy to use. There were certain features which, if added, can help in navigating such as giving the option to edit the booking via bookings page. Other than that, the application works very well. Good work!"
1,"controller testing is adequate, it seems that positive test cases are covered. It seems that more negative test cases could've been created, however. Model testing isn't very thorough."
1,"Partially intuitive. Some of the options, example booking ones [nothing, wait, continue, cancel] could make more sense by some description."
1,"This App is very attractive and I've already reviewed with very similar layout. Things to point that I really like this UI layout. Homepage is very intuitive (especially it includes Admin account and password, cannot miss it) and really easy to navigate from. I really like the top bar with all the links on the top. It makes IU very clean and very user-friendly for people who does not know what this App is about.
As mentioned all important links are on the top bar and UI looks very clean and not bulky with links.
Customer UI for creating/deleting tour reservations and cancelling partial number of reserved seats is a little unclear. For example, as Customer I want to cancel partial number of reserved seats. It was not clear how to do that. If I have reserved 5 seats and trying to cancel 1, I enter 1, choose ""Cancel"". Press ""Booking seats"", but I creates additional reservation for me. Now I have 2 reservations. This is something that needs to improved.
Also, there is important point, please deploy your App externally I had some problems getting it running with conflicts of existing gems on my system. Just try to make it easier for reviewers and graders."
1,"Code is written cleanly for the most part. In some instances, for example in the cancel method in the tours controller, the 'if' statement evaluating newSeatsAvailable is a bit long, and could likely have used some additional method calls."
1,"I would dynamically generate some of the view based on the user role. It doesn't make sense to show an agent to make a booking on the tour page, for instance. This will also make permission errors less likely to happen from the front-end, though you still need controller side validation if users make requests via something like Postman."
1,The user interface is self explanatory and team seems to have done a good job with reference to the same. The admin account and password is listed even when we log in as an agent and maybe the team should correct that as the agent should not be able to access the admin's details.
1,The code is very well written and it follows the principles of Good Ruby on Rails coding practices. One thing that I felt was that there were some mistakes in the comment and you can add some more comments and also the spacing is not consistent. It's not something important but it might help in making the code more readable.
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Remove hard-coded values from controllers/users_controller.rb
2. controllers/book_controller.rb is a little too extensive file. Avoid bulks of if/ elsif / else statements in the controller (lines 49 - 112). In fact, controller should be as simple as possible and should not contain any logic. Consider refactoring it. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
3. Model files look great
4. Views files look great"
1,"Within your controllers folder, you have an admin folder that enumerates the list of controllers again, accept you have an added ""valid_action"" method that checks whether you have permission. This is not a DRY way of doing this, and is confusing to follow as well. If you're looking for a way to handle permissions, I would recommend writing a check that validates that the current user has the proper role to conduct the action. You'd then only have to write the check once in each controller, and it would help clean up your work space by combining the more sparse files into one controller that's still centered around a resource."
1,"Rigorous testing has been carried out on the user controller and model. URL directed testing has been carried out in various files such as ""searches_controller_test"" and ""tours_controller_test"". Some more basic test cases like email uniqueness and validation, password limit validation could have also been implemented. This would have added better test cases as well as helped in running some basic functionalities too. Several test cases have been added to the rspec file."
1,"The specs for the user model look complete. The tests for the searches_controller look decent. Rather than have reviewing run the tests, you should state the results of the testing in the README."
1,The code is straightforward. Most of the functionalities seem to have been implemented. It would be great if most of the logic is put in the models.
1,"The UI is very easy to use but there is a minor issue I faced when I was using the application. When I press the home button on top right corner, it takes me to the sign up or login page, but when I again press my profile, I log back into my profile. This is a minor page directing issue and can easily be looked into by the team. I used the read me file for admin user ID and Password, however read me file gave a very informative introduction about the application."
1,"Looking specifically at the tours controller in the index method, it is very easily readable. There are some parts (for example in the waitlist method) where macros could have been used to more easily understand what's going on in your code, but otherwise it is quite good."
1,"I have to say the layout is very beautiful and I find you use bootstrap. I can find where is to sign up and login. But the problem is I don't know how to book and remark my tour. I saw there is controller in the code, maybe it is not complete or something. In README, it's great that you provide admin account and others mentioned in the documents(the other two team I make review didn't follow that). As the comment on piazza, it would be better to write the connection with link. This is also the problem of my team. I think it will make the whole README file more clear and understandable."
1,"From the code, I can see the effort in this project. There are a lot of commit here and whole team involved the work. The whole structure of code is nice and I can find the relationship between each object through the name of object. I t is easy to figure out how the code works. The only problem is that you haven't fully used model part. You can define functions in model instead of controller. It is more reasonable in MVC model and it will make the whole structure easy to work and maintain I think. All above is my understand of MVC model, FYI."
1,Your tours_controller and users_controller has way too much logic in it. According to Rails best practice you should move most of that logic to the model.
1,"Interface is decent. One suggestion I'd give is to add a 'Back' button to go to the previous or the required page. Also, I wasn't able to go past more than a few functionalities."
1,"There have been a good number of commits closer to the end of the project, I feel that is an appreciable thing. The ability to complete the project in time is something to be proud of. I'd suggest keeping this motivation from the beginning of the project from the next time and it would be a great thing."
1,"The tours controller index view contained logic to calculate the tour status based on date fields; ideally this would have been in the tour model instead.  The use of the ""access"" class variable in the reviews controller was creative, although maybe not particularly reader-friendly.  In general, the use of constants instead of literals would have been good in terms of the user roles: it's not clear which of the roles is represented by 1, 2, and 3.  The search functionality was implemented in an interesting way, by setting values in the session.  It would have been more straightforward to have the search form be submitted to the controller that actually initiates the search instead of a controller that populates values into the session and then redirects to the tours URL.  The booking model contained the logic for booking vs. waitlisting, which is preferable to having it be in the controller.  Here again was the use of integer literals to drive logic when constants would have made the code easier to understand.  There was also an ""if/elsif/elsif/elsif"" block which was driven entirely by the value of a single variable, so a case statement would have been a better fit.  The method was also rather large, so it would have been good to break it into smaller ones--the equivalent method in my project was also larger than ideal."
1,"The coding is in line with the syntax and semantics of Ruby and Rails. I liked the function names. My only problem was a lot of coding on enumerations and the reader could get confused as to what integer value corresponds to what state. So adding comments can always help. 
These are a few points which I still feel from the last review : 
I felt the UI was a bit mundane. You can implement some styling here and there to better the look of the Welcome page at-least.
On logging in as a customer, I was given an option to destroy and edit a tour which is not good. Although it does not allow me to edit or delete the tour but giving an option itself is wrong.
I was confused initially on where do I book seats for a specific tour. It took me a while to figure it out that this can be done via the show tab. You can modify the name of the button to ""View and Book"". Similar thing I found with Admins page where the profile page showed the list of customers and agents which is a bit unclear and not obvious from the button name.
I wanted to point out that when a customer deletes his/her profile I am redirected to the main page which prompts ""You are trying to login when not authorized."" where in if I log in with the same user profile I get a flash message saying ""Logged out successfully"" which should not be the case as I have already deleted the profile. I should be logged out of the page as soon as I hit delete profile.
I could not find a way where in I could cancel partial reservation as a customer."
1,"System appears to work well.
Tours should display the itinerary.
Having contact info as a phone number instead of a foreign key to user is awkward.
Admin cannot create users.
You should probably have a link to bookmarks and bookings from the tour index page not just the show page."
1,"The bookmytour function in Booking does not appear to be streamlined. What is the point of mode 4? Perhaps an ""allow waitlist for seats"" option would be better than 4 somewhat related cases. Also makes for sloppy code in the bookings controller.
For Tour filterOutResults, it might be better to pass a dict of search options and use the keys and values in the where statement. Current version with a bunch of if statements is sloppy and you could not easily add/remove search terms.
When creating a search, why do you store things in the session?"
1,"when admin tries to delete tour that has bookings then it is erased from customers list who booked for the tour and agents list who was responsible for this tour. If  a user has deleted the tour which he/she was enrolled for then customers in wait list are confirmed. admin account cannot be deleted. A tour cannot have end date earlier than start date. If the admin tries to delete a customer who has book marked several tours, then he/she is simply removed from customer's list. Unfortunately, README file doesn't cover how it handles edge cases atleast not to a full extent."
1,"1)Yes, each method handles only one task in most of the places. But, inside the tours controller, validations were added in the create and update methods. It would be better to implement them as separate functions and placing function calls within the controller.
2)Yes, controllers and models were implemented separately to address bookmark functionality. Also, a separate method call does the job"
1,"The interface was good in terms of being able to get to the various features from most pages.  It would be good to add the navigation links to the pages associated with the user profile.  Also, it would be good to send the user straight to their profile instead of a profile list if the user is not an admin.  The ""itineraries"" view was a bit confusing to me.  I believe that itineraries should be associated with specific tours, rather than being peers to tours."
1,"A lot of the business logic was in the model, which is good.  I believe the logic that filtered resources by user role would have ideally been put into the model as well."
1,"The readme file could have been made better by giving the reviewer a clear demarcation of what you have implemented and what you have not. Because the readme file suggests a lot of things that you have missed out. 
You can add a section always to state clearly what is left to implement."
1,"The coding is in line with the syntax and semantics of Ruby and Rails. I liked the fact that you have provided an option for the Role in the sign up page instead of giving 3 tabs on the main page. Nice Idea! 
However, these are a few points to improve upon : 
I felt the UI was a bit mundane. You can implement some styling here and there to better the look of the Welcome page at-least.
On logging in as a customer, I was given an option to destroy and edit a tour which is not good. Although it does not allow me to edit or delete the tour but giving an option itself is wrong.
I was confused initially on where do I book seats for a specific tour. It took me a while to figure it out that this can be done via the edit tab. This could be improved by listing the options of the customer of his/her privileges on the index page itself.
Another thing I noticed was I was able to create two customers with same email-id which should not occur as email id is supposed to be unique as per the requirements spec.
I wanted to point out that when a customer deletes his/her profile I am redirected to the main page where in if I log in with the same user profile I get a flash message saying ""Logged out successfully"" which should not be the case as I have already deleted the profile.
As an admin I was not able to view the list of customers or agents or was not able to delete a tour.
Also I was checking whether or not I am able to delete the admin account. And I could. You might want check on this immediately.
There are a few problems with the waitlist functionality. On cancelling an entire reservation, the wailisted people do not get confirmed. Also there a few cases where your available seats can become negative. (Basically it can number of bookings exceed total seats)"
1,May want some additional navigation links. See additional comments.
1,"the user interface could be improved.
ex - links can be placed on top of the page for ease of access.
-search options can be shown on the same page as tours for better search.
- a back/home option can be added on USERS page."
1,"Almost all the basic functionalities have been implemented by the team. In the agent module, an agent is given options to delete or edit tours created by other agents. However, it says we cannot edit them after pushing the button. But I felt this functionality could have been used to differentiate the tours created by the agents."
1,"Admins, agent options controller, customer options controller, options controller, welcome controller are all empty. They were perhaps scaffolded and they the team realized that they made a bad design decision by creating them and abandoned those controllers. I would suggest that you could just delete the controlled. You can un-scaffold the creation of controllers. If the command for scaffolding is
rails generate controller ...
the command to delete it is rails delete controller ..."
1,"I found the code to be written in a way that was easy to understand. The design itself is simplistic and does not tend to be overbearing. However, I do suggest that the team put comments in their work to better understand the functionalities."
1,Controllers tested; could add some testing to models.
1,"The user interface is very intuitive and easy to use. Additionally, the missing features have been highlighted in the README. Separating the role/user specific views and functionalities was a nice touch. However, there are chances of missing the bookmark and book buttons, because its at the very bottom of the page. I would suggest moving these buttons to the top or making them bigger."
1,"Yes the team has followed good rails coding practices. However few of the business logics can be moved to the models instead of the controllers, conforming to the MVC design pattern.."
1,The code for the most part is written clearly and readable. A user can understand the logic intended by the script on reading the code. The business logic though is still being performed in the controllers. Some functions such as create method of manifest controller is quite long with a lot of logic which could be broken into multiple methods
1,"-Yes, the code is clean and well structured. But I didn't see many methods except the basic method(create, show, new, destroy) 
-It's great for ""user"", ""customer"", ""bookmark""name. But there are some names like, ""manifests"" ""session"", are not that clear.
-In the controller, I don't think session controller is necessary. Devise gem can be used to generate user. Static_page controller is totally unnecessary. You can just add home page in views."
1,"start date doesn't not have to be before end date.
after sign up you should already be logged in.
There should be password confirmation
I should be able to try and book or waitlist more seats than the total seats."
1,"Ovearll looks clean, few of the possible issues I could find are:- Destroy in the tour is used to destroy tour and also to delete the image from the tour (uses same route and is implemented in the same function)- The user_from_params method from user_controller has variables storing
 redundant data. the values could have been directly saved to 
Clearance.configuration.user_model object rather than saving to email, 
password etc. variables. - The index method in the tour is used for querying search/all tours/waitlist/bookmark/booked tour - No controller corresponding to user_tour model. Most of the work is done by Tour controller.- Unnecessary looping structure in Reviews Controller. Logic could have been implemented using a single branching constraint

# GET /reviews/1/edit
def edit
if current_user.role != ""agent""
else
redirect_to home_url, notice: ""Agents cannot modify reviews""
end
end"
1,"The code conforms with good rails coding practices. However the business logic can be moved from the controller  to the model for better readability.
The variables are named meaningfully"
1,"The code can be more readable by being consistent in the use of new line between functions and blocks. Apart from readability, the code does a good job at implementing the functionalities."
1,"There seems to be a lot of extra logic in the controller when this should be delegated to the model. For example, you can write many of the functions to determine the validity of tours within the model itself, as well as functionality for adding references to other types of objects. Otherwise, it seems like you've tried to make your code DRY, which is important. Could be dryer by trying to combine the controller functionality of the different user types within one general controller. If you use inheritance, you can reference one table for login so you don't need 3 different views."
1,"The code followed most of the good coding practices for Ruby on Rails, all the modules are well sorted. However there are too many if-else conditions written which might slowdown the website. 
Tip : scaffold can be implemented instead of checking everything manually"
1,"Yes, the code commits are done from time to time for each feature although could work on the comments while commiting. For example I came across two commits update model and model update which is not very clear as to what the commits were for."
1,"Variable names are clear and concise.
I really liked the copious use of custom flash notices!  This could really help the user when they make mistakes.  For example:
flash[:notice] = ""Cannot edit other customer's booking!""
A few things that I noticed:
In app/controllers/admin_controller.rb, the admin email and password is hard-coded.  I would suggest pre-populating the database with the admin user instead, and checking the log-in credentials against this pre-populated record.
I would suggest adding some more comments into the code to assist a reader of the code in understanding what methods are intended to do.
In app/helpers, there are many files that don't really do anything.  Ideally such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: the same problem probably exists in my own code!
I expected to see more code in app/models.  From my understanding, in an MVC project, the ""M"" should do a lot of the heavy lifting.  I would suggest moving any SQL queries into the applicable model."
1,"The basic functionality works very well.
One thing I don't like is that you can't just list all tours. There is the search tours button, but it won't let you just not search anything."
1,"- Code Quality is pretty good. Follows good naming conventions and can understand what each function is doing when read through. 
- Schema wise, I see a bit of redundancy. For this project ""location"" was not needed to be a model and could have been implemented with Tour.
- If used OAth, by default user is given ""googleuser"" password. As they will be logging in using Google Key, this default password could have been removed or a random value that admin cannot see would have been a good option"
1,"The UI is very intuitive and easy to use. The README is a good read which assists a user when he/she may get stuck such as when I used my gmail account for Oauth. However, i was a little confused on how to check the reviews of the tours. I suggest showing the reviews of the tour when you hit ""show"" for a tour."
1,User interface is very nice and intuitive. It would have been great if you could have deployed it on some safer platforms. flazzle is unsecured and I will not prefer to signin google account this platform. But really good job done on UI side.
1,"Yes, it's easy and intuitive but I have a few suggestions and observations. I noticed that I'm already logged in when I opened the link after a day. It's a minor issue, but a suggestion would be to time out the session. Also another minor issue I noticed is that when I logged in as a user and wanted to edit my details in the profile, there's a password prompt that says ""leave blank if you don't want to change it"" but when I left it blank, I get a validation error that password can't be blank. Other than these, the UI is really good."
1,"I believe the overall coding objective was completed successfully! However, a lot of the logic is performed in the controller rather than the models. For instance, the search functionality contained a lot of business logic that was somewhat length. This may have lived better in tour model and just simple make a call to the tour model."
1,"Variable names are very concise and easy to read and understand.
The code presents an excellent Ruby on Rails practice.
However a few things which could be improved are:
Not able to create the Tour-Throwing the error for InvalidAuthencityToken.
""Show in app"" tab throws out an error.Either it should be removed or do what you suppose it should do.
The admin can't delete the customer review which it should be.It throws out an error ""Customer Review is an admin"".I can't understand this.
As an admin I was not able to look who all have booked a tour.
In tours the Dates show Time as well which I can't edit.
While creating a new Tour,I got the option for Customer Reviews for other tours which I find absurd here.
There is no demarcation of which tour is of which agent.
As an admin I am able to book tickets which should not be the case.Please check this.
 
Agents can't see the who have bookmarked their tours or who have booked."
1,This is the best GitHub repo I've seen till now. Everything is mentioned clearly and very well explained. Only suggestions I can give is the naming used for the model. Its not wrong but its easy to find the file if it contains only the function name and not the user+function.
1,"There were two repos uploaded. I checked the one with more recent commits
In all the code, Ruby and Rails guidelines were followed.  Good Job team...!!!!
You could remove the logic for booking from controller and put it into a model and then call this model in to the controller. 
Rest of the implementation is really good."
1,"The rspec model does not have enough test cases to fully test the model thoroughly. I would recommend testing the validations and controllers more extensively, and have more test cases to encompass a variety of use cases. Right now, it seems as if the controller only has one"
1,Majority of the code has been thoroughly tested except for validations which need to be tested in further detail. Cases such as ability to enter negative prices or seats may create larger problems in the database as well.
1,"GUI is simple and neat. You might want to use Bootstrap to make the GUI wonderful. Looks great if you use container on forms/show.html.erb files. Check  for buttons. These classes

:class => ""btn btn-success""

elevate UX"
1,The user interface is quite intuitive. A more detailed readme would anyway be very helpful.
1,"The user interface is very easy to use. Very brilliant work is been carried out by the team by focusing on each and every functionality minutely.
Initially I could not find option to edit customers profile as I got confused with the name ""Settings"". It would be very intuitive if a simple name like ""Edit Profile"" is used instead of ""Settings"".
 
README file is updated with all the required details."
1,"The UI was intuitive most of the time and the README was descriptive. There were some features that weren't obvious. Like, editing the profile name, is under ""Settings"" option. I feel it should be an option under the Profile link."
1,"Most of commits/work is done by one student (jwarren3). Parameter whitelisting is not used in all the controllers, resulting in applicaton accepting malicious paramters.  Few of the edit functionality doesn't check access. That would mean any body can send the request to that URL and can edit or destroy without having enough rights. You might want to check user_controller.rb and implement access control on major functions that involve some kind of data addition/destruction"
1,"The code follows majority of the RoR best practices.
Majority of the logic is present in the model keeping the controller light.
It is well packaged in gems with instructions in the gemfile.
The code could use virtual attributes to make things simpler but it is out of the scope of the project."
1,"The code follows good coding practices. The code was also very clean, readable and commented to enhance understandability. It would be better if the ocde was divided into proper modules - like helpers are used for creating methods like user authentication."
1,I feel the overall flow of the code was in accordance with Rails practices. The tours controller appeared to have quite a bit of logic in it for the search function. I would if this could be moved to the model instead?
1,"I poked around, just clicking semi-randomly among the links that were shown to me.  Here are some things that I noticed:
Clicking on ""View all Agents"" takes me to https://tranquil-cove-49961.herokuapp.com/agents/1, where I see ""We're sorry, but something went wrong.""  This bug should be addressed.
The home page offers links ""Edit | View all Customers | View all Agents"".  Clicking on ""View all Customers"" takes me to https://tranquil-cove-49961.herokuapp.com/customers/1 (shows me just one customer rather than all customers).  This was a bit confusing based on the name of the link.
This customer view offers links ""Edit | View Tours | View Bookings | View Bookmarks | Destroy | View Reviews"".  I think it would be ideal for the home page to include some of these options as well.
Clicking on ""View Bookings"" takes me to https://tranquil-cove-49961.herokuapp.com/bookings, where I see ""We're sorry, but something went wrong."".  This bug should be addressed.
Clicking on ""View Reviews"" takes me to https://tranquil-cove-49961.herokuapp.com/reviews/1, where I see ""The page you were looking for doesn't exist."".  This bug should be addressed.
Clicking on ""Log Out"" takes me to https://tranquil-cove-49961.herokuapp.com/logout, where I see ""The page you were looking for doesn't exist."".  This bug should be addressed.
It is possible to edit a tour, which takes place in the future, and to set that tour's status to ""Completed"".  Perhaps this option should be disabled if the tour start date is in the future.  Or, another option is to calculate the tour's ""In Future"" versus ""Completed"" status, rather than allowing a user to set it explicitly.
Clicking ""Destroy"" next to a listed tour shows you the tour rather than destroying it.  Same experience when attempting to destroy a customer account.  These bugs should be addressed.
I do not see any option to review a tour.  This could be included either in the tour ""index"" view or in the tour ""show"" view or in the reviews ""index"" view.  I think as long as you have some path to this functionality, it's fine.  The README file could clarify which place you chose to implement this.
There are other functionalities that I could not figure out how to accomplish / whether they were implemented.  I won't list all of them here.  They can be inferred from the review checkboxes where I answer questions of the form ""Can the... ?"".
I was not able to check any of the ""Can a customer... ?"" or ""Can an agent... ?"" questions because after logging in as the admin, I was unable to log out (and thus unable to log back in as an agent).
Overall, I admit I found the user interface confusing, in that I wasn't sure why I was seeing the links I was seeing, and I was often surprised by what I saw when following a link.
The README file contains only the admin credentials.  You may want to include lots more information in the README file to help a user understand how the UI is organized."
1,"- Cannot book more number of seats than the total seat. Error ->""Cannot Book and Wait list 60 seats with only 50 total seats in the tour.""    - Idealy, application should handle one user adding more seats- No user can see waitlisted bookings."
1,"As I understand it, Rails coding practices encourage putting practically all business logic into the model.  The logic dealing with bookings (model name 'book') and availability of seats, etc. was all in the 'book' controller when ideally it would have been in the book model instead.  In general, the models contained mostly just validation rules, like minimum length of fields, etc."
1,"Good use of Ruby Syntax and coding conventions.
Business logic should be in Model. Eg. Booking and wait-listing logic should be Booking.rb, its given in controller. Instead of this, you can create a model method and then call it from controller."
1,"For the most part, I found the code easy to understand.
Variable names were clear and concise.
A few things I noticed:
Many of the files in app/helpers don't really do anything.  Ideally, such ""dead code"" would be removed to keep a reader of the code from getting distracted.  Disclaimer: such ""dead code"" is probably present in my project as well!
There were a few places that had non-obvious code but were lacking in code comments that might help the reader, e.g. app/helpers/application_helper.rb.  I would suggest adding a comment above each method that briefly describes what that method is meant to do.
The email validation regex was duplicated 3 places in the code.  I would suggest centralizing this, perhaps in a helper."
1,"Scope of Improvement:
Overall code quality is good with below improvements needed:
1. In Booking Controller, I see some logic handling. You can keep entire logic in Model (Tough you have kept almost, but not 100%) and return some value Eg. some inter value or string and use this return value to show notice or redirect to another page
2. Some of the methods within Models are bigger. like Scope method in Tour_search.rb. Such methods can be divided into smaller methods.
But overall good work done."
1,"Yes, the team has tested the customer controller and model. The testing has been carried out for basic functionalities and not carried out thoroughly. The testing is carried out for a name which shouldn't be null and exist. An email address which should be in a proper format and unique too. Also testing for the password is carried out which has a validation set for a 6 character limit."
1,"Commits are on a regular interval with meaningful commit messages. There were only 3 branches in total, and it would be more effective if there were branches (possibly based on features) so that the flow is clear. The team posted their code throughout the project period and made use of issues on Github."
1,The testing for the tour model is pretty thorough and involves numerous test cases that validate the model. The controller test were also meaningful and had several cases. Some of the fields in the application could be tested more (such as specifying more seats than available in the waitlist page leads to a negative available seats).
1,The README file was extremely well explained and depicted everything implemented in a very informative manner. The application was user friendly and easy to navigate around. The UI could be slightly improved by implementing some bootstrap but the functionality was working perfectly so I guess that's okay.
1,"Has used basic GUI, that is neat and clean. Pretty easy to understand and flow eases out. Landing page is a bit cluttered on the top corner. Can you bootstrap and CSS to elevate UI/UX. Flow is elgantly constructed, can use with ease.
 
Usability: While canceling tour, popup has 2 options OK and Cancel.  It's a bit confusing because pressing ""cancel"" doesn't cancel the tour rather cancels the pop up. I understand that this is how pop up works, would be great if osme clear words are used."
1,"Team has pretty well ""tested"" tours and customer controller and models. 
Minute things were missed (explained in later section), which can be covered up quite quick."
1,Use of code in model is sufficient and carries validations. But you did violated and edge case with devise implementation. Admin can delete himself. Check the other team which they implemented.
1,"I really like the link placements and the use of "" | "" to separate the links.
You could remove the links for functionalities that you are not intend to provide like ""forgot password"" or May be its broken
Also if you could rename some link texts, it would enhance the user experience.
Eg. Customers with Bookmarks of my Tours -> My Bookmarks
User Page -> Profile or User ,   Tours Page -> Tours"
1,GitHub repo is not accessible. May be it is not a public repo. That is the reason admin credentials are not accessible.
1,"The admin login seems to be fixed as I can now log in as an admin. Creating a tour with empty field still results in an error, and I was not able to create a tour with valid format without getting errors (possibly due to the format of the data fields). The new tour creation would be easier if the date was a drop down menu. Admin cannot see accounts."
1,The DB design for this system is done properly and as far as i could see the relationships have been mapped properly. But one problem i found is that i can edit the customer account and in that i can select both agent and customer which shouldnt happen.
1,"One thing I noticed is that the tours controller contains code that interfaces with the database. I think that the SQL commands should belong in the models with a separate function so that the code between models and controllers is isolated. Similar situating in Bookings controller. Booking controller also has a lot of conditions that have very similar code, and can be DRYed out a bit more. The methods may also be smaller once similar functions are put into a method."
1,"Overall, the commit history documents changes made throughout the project period and I can see one pull request as well as branch. I would recommending making more branches as per feature and merging it to master so it is easier to see changes throughout the project period."
1,There seems to be contribution to the repository from only one member of the team who has updated git properly when the changes were added to the app. The others could also should feel free to push the functionalities added by them so that they can also get to work with a version control system.
1,Used unittest/functional instead of rspec. Please do testing with roles rather than just GETs. No models tested.
1,"The application is deployed on Heroku, and it is overall fairly intuitive. Readme could be more descriptive in terms of which field we need to fill in while booking a tour and making an account. Waitlist and Booking steps would also be beneficial as I was not able to do either. On the flip side, the UI is pretty good and looks modern. Sign up page is also simple and effective. Profile edit feature is a great and easy to update as well."
1,"One improvement you can make is isolate the SQL code to the models by making a function in the models, and including the filters such as the search in Tourscontroller. It is good practice to put the database code in models rather than the controller itself. Overall, DRY principle seems to be followed, and the code is easy to follow."
1,ToursController has a huge if statement in it. There has to be a more better way to do this. Maybe take advantage of DateTime class instead of using strings.
1,"It has followed pretty good practices, but felt some of the things could be refactored

Tours controller is clumsy. 'delete image' could've been handled in a controller which handles rest of the image functions.
'my tour' and 'set tour' and similar functions could've been added to helpers instead of controllers
Regarding the models, you can add validations here to check the fields before getting stored in the database. I can see that you have handled them in logic but it might be easier
I felt waitlist need not be that heavy because it is needed only for updating the booking. It can be added inside bookings controller itself
Regarding the views, so many validations and operations are preformed in views. For eg, validating the minimum length of the password. It is better to add validations in models and use views for rendering.

I can see that you have done a lot of work, but as a peer seeing the code for the first time it took a while to get used to the flow"
1,"The system properly handles all relationships among the tables. No obvious problems our found. All relationship data is found in the models files. For example,
User has many reviews, listings (for agent), bookmarks (for customers)m bookings, waitlists, tour (through listings, bookmarks, bookings, waitlists)
Tour has many reviews, photos, visits, bookmarks, bookings, waitlists, listings, starts_ats and etc.
I see that some tables in the system are unnecessary, such as starts_at. Since each tour has its own starting date and starting location, this relations is 1-to-1 and could be stored within Tour table. However, the team has chosen to do it different way. Give full credit since no obvious DB relationship errors are found."
1,"The code is clean and readable. Each method in the code is very well documented and commented, providing in some places references to different resources (e.g. open-stack and etc). The comments for each method describe in details how method works and what exactly it does.
Each method in the source code handles exactly one task and I was not able to find a code snippet where method would perform more than one designated task.
For example, adding the customer to the tours's interest customers is completed within single method call ""create"" in the app/controllers/bookmarks_controller.rb
All variables naming are good and reflect what they actually are used for.  For example, in the /app/models/review.rb there is a loop iterates over each entry in the Review table. Hence, each entry team named as ""review"", which reflects the entry in the table. There was one instance where name of a variable could be improved. In the /app/models/listing.rb, team used ""matching_user_id"" and ""matching_user_name"". Probably could be used simply as ""user_id"" and ""user_name"".
Some minor coding problems:
Looking at the controllers files, I've noticed that there are a lot of ""if/elsif/else"" statements, almost at every file. Probably, it is good idea to avoid bulks of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and should not contain any logic. Refactoring the code would fix this and may be bringing some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of ""if/else"" statements would be good practice. However, overall the code looks very clean and this is very minor thing to notice."
1,"It is extremely simple and straightforward, and I had no issues in testing out the features at all.
 
There is one thing I could suggest if I may, that the search fields were at the very bottom of the tours page. At first, there were a lot of tours and I did not realize that was where the search was, a better positioning would be a little nice. A user might not want to scroll through an entire list of tours to eventually reach the search bar."
1,"There are some test cases added to model tests and controller tests. For model tests, I think there should be more tests to thoroughly test the functionality. I would say the controller tests are good."
1,"Overall, code looks clean, and follows good RoR coding practices to a certain extent. I've noticed couple of things that can be done to improve code quality:
1. Avoid bulk of if/ elsif / else statements in the controller. In fact, controller should be as simple as possible and contain no logic whatsoever.
2. Keep all the logic in the Model.
3. app/controllers/tour_controller.rb is a little over-extensive, which makes it a bit complex. May be consider refactoring it. May be bring some of the methods out of the file, or create additional helper or even new model classes.
4. Model looks clean and with enough comments in it. I've noticed it has a way too many relationships with other tables. But this is your team's design, nothing can be done to improve it."
1,"User interface is intuitive and the README is very well documented.  Only recommendation might be to place the Bookmark button next to the Book button when tours are listed, but it's not a big deal."
1,"Interface is easy to use, but could be be better, One of the changes I felt like needed is giving a back button in all of these view pages in order to direct them back to the previous page would have been nice."
1,"I see some a lot of improvements since my first round peer review and some issues were addressed and fixed. I also see that one extra credit feature has been also completed and the app sends an email notification when the status of the customer moves from wait list to booked (however, in some cases wait list feature is not working as expected, please see below). Overall, very well done!
However, there are still bugs in the system that I reported in the peer review 1 period and not all of them were fixed and addressed accordingly. Some issues are still not resolved and can easily be reproduced. Below is the list of some issues that I still observe. Along with old issues I also noticed there are few new very minor problems that could have been adjusted (not real issues but would improve the App functionality).
1. In the Login page, I don't think user needs to choose who he/she is logging in as into the system. The system must identify if a user is Admin, Agent, or Customer without extra given information. In fact, I can login as Admin indicating that I am admin, but if I do not indicate this, log in fails.
2. As Admin I should NOT be able to change my preconfigured credentials. However, I can do that. Someone can easily mess up your admin user credentials by changing password or email you should avoid Admin from doing it.
3. As Admin when I create new User, it kicks me out of the App and makes me to re-login into the system again. Ad Admin I want to create new user and remain logged in the system. This is very minor thing and does not have to fixed. This is more for the Admin convenience.
4. Price for the tour must include cents. It is complains that 99.99 for example is not a valid price. It should've been changed to allow having 2 decimal digits.
5. As Agent when I create new Tour, it should not ask me Status of the Tour, unless I want to cancel it. Status of the tour must be determined in the run time by the system based on the start and end dates. Agent must not maintain the status of the Tour manually, unless he/she wants to cancel it. Again, this is minor note but could've been improved. 
6. Tour can be created having end date earlier than the start date.
7. The Review feature is not implemented. As I stated above in the DB design section. Reviews does not have any relationship with other tables, so it is not possible to retrieve any reviews. As any type of User I want to view reviews of any tours in the system. Unable to do since the feature is not implemented.
8. As Admin I want to delete reviews from the system that belong to the tour I listed. The Review feature is not fully implemented and therefore this cannot be done.
9. As Agent I must not see ""Cancel entire Booking"" and ""Cancel seats"" options when I view Booked Customers of my Tour. However, I do see these options and I can act upon them.
10. As Agent I want to view all reviews from customers. This feature is not fully implemented as DB design for Reviews is broken.
11. Search functionality is not implanted for Agent users. Only for Customers.
12. Search functionality works well for Customer, but it enforces customer to enter the start date and end date. Dates should be optional filters.
13. As Agent I want to see upon Customer seat cancellation, next Customer in wait list get enrolled. It works well in some scenarios, but it creates 2 different reservations for the same Customer. For example, if I am a customer and had 1 seat reserved and 1 seat in the wait list. If I moved from the wait list I see two different reservations for the same tour with 1 seat each. As it was stated in the peer review one period, it is minor note, but would be nice if it was fixed. Moreover, this functionality does not work for other scenarios. For example, As Customer1 I reserved 5 seats for 10 seat Tour. As Customer2 I tried to reserve 8 seats for the same Tour. It reserved 5 seats for the Tour and placed 3 seats in the wait list as expected. As Customer3 I tried to reserve 1 seat for the same Tour (already full) and it gave me an error: ""We're sorry, but something went wrong"". However, in the bookings for customer3, it shows that it place that customer3 into wait list. After that I completely removed the Customer1 from the system by Admin user (that customer had 5 seats reserved for the Tour). Hence, I expect customer2 3 wait list seats to be moved from the wait list into booked and I expect Customer3 1 wait list seat to be moved from the wait list into booked. However, neither of the customers 2 or 3 wait list seats were moved from wait list to booked. I triple checked this scenario and it fails for every time. 
14. One extra-credit functionality is implemented to receive email confirmation about seats moved from wait list to booked. However, the other one login with either LinkedIn/Google/Facebook account has not been implemented.
15. As Customer I want to book (wait list) seats on the full Tour. I choose 1 seat and in preference I choose ""book Available seats and add remaining to waitlist"". After clicking ""Create Booking"" it shows an error: ""We're sorry, but something went wrong"". However, in the bookings for that Customer it shows that it place that customer into wait list. It could be a bug.
Hence, there are still some issues that need to be addressed. It is not necessary 15 issues, since some of the above points are only suggestions and must not be implemented. However, some points are still refer to an issue in the system and were not properly addressed. I was glad to see that major issues were actually resolved and the App behavior was improved. Since there are still some issues within the App as described above, I give 3/5 points. However, the app behaves much better than it was in the peer review round one."
1,"All relationships among the tables are found in Models files and /db/schema.rb file. There are few problems that I found with current DB design that would make the App perform incorrectly or incomplete. Although proposed design is concise and there are no unnecessary tables are created, which makes this design simple and clean, it is missing few necessary relationships for the App to work as expected.
By examining the DB design I concluded that there was a separation of User into 3 (three) completely separate types Admin, Agent, and User with its own tables and relationships with other tables. This would probably make things a little harder, although this is not necessary wrong. It is still correct design, but for simplicity all the users should be represented within a single table User instead breaking into 3 separate tables. The issues I found as follows: 
Admin does not have any relationship with other tables. This draws attention and some questions on how Admin user interacts with other tables to retrieve information, if Admin acts on behalf of the Agent or Customer. This is not clear and probably design flaw that was overlooked by the team.
Agent has many tours. This is correct design indicating 1-to-many relationship. However, for the agent it is not enough information for full and correct performance of the App. Agent must also have 1-to-many relationship with Reviews through Tours, but this relationship is absent indicating that there is no way Agent would be able to retrieve reviews for his/her listed tours (and all the tours in general). This is indication of incomplete Review requirement, or it was implemented incorrectly.  
Customer has many bookmarks and bookings. This is correct design indicating 1-to-many relationship of customer with bookmarks and bookings. One customer may have multiple bookmarks and bookings.
Tour belongs to agent and has many bookmarks and bookings. This is correct design indicating many-to-1 relationship of Tours with Agent (one agent may have multiple tours). Also, since tour has many bookings and bookmarks, it indicates correct 1-to-many relationship of Tours with Booking and Bookmarks (Tour may have multiple bookings and bookmarks). However, this is not enough information for full and correct performance of the App. Tour must also have 1-to-many relationship with Reviews, but this relationship is absent indicating that there is no possible way to connect a Tour with its reviews. Thus, this is already alerting sign that reviews functionality would not work properly.
Both Booking and Bookmark belongs to customer and tour. Correct design indicating many-to-1 relationship of booking and bookmark with Customer and Tour. (Multiple bookmarks may belong to 1 customer and 1 tour; Multiple bookings may belong to 1 customer and 1 tour). No problems with this design.
Review does not have any relationship with other tables. This is very suspicious and indicating that no other table in the DB design can access reviews and use foreign key to make any type of relationship. This indicates that Review functionality were not implemented or implemented incorrectly.
Search also does not have any relationship with other tables. This is also alerting, but Search can be simple queries and do not have to maintain any relationship with other tables. Simply performing a DB query for a given data would suffice Search implementation in the project. So, this is not as alerting as Review functionality.
For incomplete design of Review, I give only score of 4/5."
1,"Overall, the code is clean, readable, easy to understand and follows good RoR coding practices to a certain extent. I pointed our several things in the peer review 1 that needs to be reworked, and I see that no improvements were done to clean code and improve code quality. Specifically, I pointed out
a) The controllers/bookings_controller.rb file is a little overloaded with bulk of ""if/elsif/else"" statements and some of them are are nested ""if/else"" statements, which makes reading a little harder to follow. As I mentioned, in general avoid bulks of ""if/elsif/else"" statements in the controller. Try to make your controller as simple as possible and move all the logic into Models. I see that the same ""if/else"" statements are there. 
b) The tours/index.html.erb is bulked with ""if/else"" statements and can be improved
On the other hand, Models files that should contain all of the logic are pretty much empty. They only contain relationship among the tables and validate input from the user. This indicates that most of the logic was performed in controllers and views, which is a little off with RoR paradigm.
Code is not commented at some places at all and with excess of ""if/else"" statements, it is a little hard to follow. In some cases one method handles more than one task without additional function calls. For example, when new booking is getting created, it calls ""create"" method in the app/controllers/books_controller.rb file. However, instead of simply creating booking as intended to, it handles a lot more tasks:
1. Checks if tour seats >= seats booked for this booking. If it is, it creates new booking.
2. If (1) is false, it check the preferences. If preferences are equal to ""Book available seats"" and tour seats > 0, it seats tour seats to 0 and booking status to 1. But if it equals to ""Book Available sears and add remaining to wait list"", it also handles the option with the wait list. Else if preferences are equal to ""Book only if all seats are available"", then it does additional task.
Therefore, a simple function that supposed to create a booking, handles at least 2 (depending on evaluation of if/else statements) different tasks without doing any additional function calls. This makes the code very hard to read and follow.
All these additional tasks could be refactored and some of the logic could be moved out of the controller into Models to keep things as simple as possible.
The same comments apply for tours/index.html.erb. This file is also a little overextended with ""if/else"" statements. Although this file has some comments, it still hard to read it. I understand that view of the Tours page depends on the user's role (since admin, agent, and customer will have different views of the tour), but still it could be done in more simplified way. May be create index file specifically for each user and render common parts?
 
There are only few instances in the code that I could find that have bad naming:
1. ""tp"" - app/controllers/bookings_controller.rb, line 72. What does tp mean?
2. num_1 - app/models/search.rb, line 3
3. num_0 - app/models/search.rb, line 4
 
There are some other minor issues with coding, mostly too many nested if/else blocks especially within controller. Also I see that for debugging purposes ""puts"" statements were actually used (controllers/bookings_controller.rb line 128). Although there is nothing wrong with it, but it is not good debugging practice. All of the print statements will be lost and it always better to rely on logs.
Other than what has been mentioned above, the code looks clean and readable. Due to problems mentioned above, I give 4/5 points."
1,"I believe that the code is messy and needs to be cleaned up in the following way:
1) The logic should be moved from the controller to the helper methods. A lot of conditional statement that has been implemented here make the controller code difficult to understand.
2) The code should be properly commented. I found the amount of comments to be lacking and hence I could not understand many parts of the program especially inside the controllers.
3) No helper method has been used to clean up the code other than the session helper. This, should be cleaned up in my opinion."
1,"For the most part, I found the code easy to read, and was not confused by the code organization!  A few suggestions:
The email format regex /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i is defined in the code in 3 places in app/models.  To be more ""DRY"", you could define this in just one place (perhaps in a helper).
There are 42 occurrences of ""<%#"" when I search in app/views.  Ideally once code is known not to be useful, it is removed rather than commented out.  This can make reading the code easier.
I was expecting to find more code in app/models.  My understanding is that in an MVC app, the ""M"" should do a lot of the heavy lifting."
1,"Regular commits. But only used master branch, should have utilized multiple branches when developing new feature."
1,"No, I did not see any controller being thoroughly tested, except default tests created by scaffold in the test/controllers. All of the test files are auto-generated by scaffold.
Neither any of the models were thoroughly tested. All of the test files are auto-generated by scaffold. Give 1 points for auto-generated files.
Please write additional test-cases where you test edge-case scenarios."
1,"Interface is simple, somewhat user-friendly and somewhat intuitive. I liked the home page ""Dream. Explore. Discover!!! Click the button to get started!""
However, as Customer and Agent it was a little inconvenient to navigate between pages. For example, as Customer when I made reservation for a tour I have 3 links available to me: Edit, Back and at the top right corner Home Page. ""Back"" link has some troubles. So, the only possible way to get out was using ""Home Page"". The same analogy for Agent. Using single link to Home Page is slightly inconvenient. Please consider adding more link for users' convenience. Let user have choice where he/she wants to go next. Also, finding Review section for customer who booked a tour (completed) was a little challenging. Please consider to rework that section a little."
1,"I believe that the UI is very bare bones and that is why it does not confuse me at all about what I need to do with the application. I can navigate easily to all parts of the application. 
However, the readme does not provide any instructions about how to navigate throughout the application which should contain information about navigating throughout the application."
1,Fairly easy to use; would recommend having a home button available across all views so you don't need to press back all the time. Pressing back can cause problems especially if resources you were accessing get deleted and no longer map to anything.
1,"The code looks clean and the logic is easy to understand. However, business logic should be in Model rather than Controller."
1,"The controllers/bookings_controller.rb file is a little overloaded with bulk if/else statements. In general, avoid bulks of if/ elsif / else statements in the controller (lines 3- -54)). Try to make your controller as simple as possible and move any logic out into Model. If it becomes too bulky, consider refactoring controller. May be bring some of the methods out of the file, or create additional helpers or even new model classes instead of bulk of if else statements.
Model look great.
But consider refactoring some Views files. For example, tours/index.html.erb has a lot of complexity with if statements.
I gave full credit because I know it is kind hard to keep track of all the things, especially in such short time. We are trying to make things just to work.
Otherwise, really good app."
1,"The code generally follows good Ruby and Rails practices. However, there are some suggestions that I would like to make:
1. Other than the session helpers, there is no code that has been moved from the controllers to the helpers. A good Rails practice would be to move the logic statements from the controllers to the helpers.
2. The same can be done with the views."
1,"There appears to be a lot of code in some of the controllers; The most pressing example is the bookings. You can create methods within the Model that handle this logic in order to simplify code, then save the object within the controller. I think it is a little odd to create new ""Search"" objects. It might be more intuitive and less wasteful to filter results dynamically using select with appropriate ruby blocks. I would also recommend abstracting common validations/attributes between your agent/admin/customer classes. This would help your code become DRYer. Also, agent should not be dependent on Tours, but tours should be dependent on Agent."
1,"For the most part, I found the code easy to read, and was not confused by the code organization!  A few suggestions:
The email format regex /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i is defined in the code in 3 places in app/models.  To be more ""DRY"", you could define this in just one place (perhaps in a helper).
There are 42 occurrences of ""<%#"" when I search in app/views.  Ideally once code is known not to be useful, it is removed rather than commented out.  This can make reading the code easier.
I was expecting to find more code in app/models.  My understanding is that in an MVC app, the ""M"" should do a lot of the heavy lifting."
1,Could move some of the code in the controller and views to the model classes.
1,"Yes, there were some improvements that I noticed while testing the site features in the review duration which included modifications to view list of all houses created by company of which realtor is a part. The program has scope for minimal improvements to make it function as needed."
1,The admin model performed mostly all the required specifications. The realtor and house hunter models could be made better.
1,"While a thorough controller test exists, there is no model test."
1,"The user interface has a very basic look and feel. The sign up links being on every page is not ideal. There should only be a log out link. Also, the company in the realtor page is showing the id, not the company's name. I suggest you use a drop down menu for the preferred contact of the house hunter who is signing up. It would be much more intuitive to have a single sign-in page for all users. There were also missing back buttons."
1,"There are some indentation issues, but otherwise the code has method names in line with convention over configuration and the spacing and line spacing are reasonable. Also, IDs should not be on the UI. The house hunters and realtors should not have to sign in after signing up."
1,"Overall this was a usable system. However, This app did not do a good job of keeping track of my session. Once I edited that admin account, I could not navigate via links to the home page and was also asked to sign-in again if I clicked ""admin sign-in"". Even if I signed up as a different user, my admin account was still signed into. I also was not logged-in upon signing-up as a Realtor or House-Hunter.
 
Some other comments are:

An Admin should be able to set the password for realtor or house-hunter. That is a security vulnerability. 
When I tried to use the ""Reset password link"", I get an error.
When creating a house as an Admin, I shouldn't have to know the ID of the company, I should be provided a drop-down of existing companies - the same way for how a realtor chooses a company to join.
Asking a realtor to choose or create a company before signing up is another security vulnerability - you leak the existing companies and allow someone who isn't a user of your system to create a company.
The Inquiry and Interest flow in this application is really well done."
1,"The code quality in this application looks good. I didn't see any extremely large methods, views were clean and simple, and controllers had one-to-one mappings with application-level functions. 
I do think I would encourage this team to consider using scopes in their models next time as I did not see many here."
1,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A use-case diagram will be useful to add.
1,"They have a paragraph saying what they are going to do, but it could be broken up into parts with images for better understanding"
1,"The document is well explained. Thus, it reduces complexity and makes itself appear quite easy for the user to understand. However, more diagrams and flowcharts would have helped even more."
1,"The authors have described 1-2 solutions of the problem. However, I would suggest them to include more about how these changes will be done and where are these changes going to occur, what files will be affected etc."
1,"The design includes all the functionalities required in the documentation: https://docs.google.com/document/d/1Br9hm-SWIvl5ibWSfRVjmiYTQl5j27l8slWhv2iUCqQ/edit# the main goal: to let the TA be able to review any team that has submitted the assignment is well stated.
I think some screenshots or other pictures will be more helpful while explaining the functionalities."
1,"They only presents a flow chart, it will be better if there is a UML diagram."
1,The current explanation talks only about changes in the view. It would be better if the solution is explained at greater depth.
1,"The test plan gives a black box testing view which is good and easy to understand. But it would be helpful to give more details about what functionalities are tested. Like a new DB table is added. So tests related to that and corner cases such as an old assignment gets removed , foreign key constraint so how will that test be conducted would make it better."
1,The UML Use Case diagram takes into consideration the system specifications and the manner in which the users interact with each other in the process. It makes it easy to analyze how the implementation can take place in the current scenario.
1,"The Use Case diagram added is drawn well and helps explaining the system.
Team could have added, screenshots of the Expertiza pages, that would have helped us understand whoch part of the system is changing well."
1,"The document contains a UML Use Case Diagram that analyze the system's requirements and describes the actors involved and the relationship between them. It helps to understand the overview of the project details.
However, it can certainly make use of a flow diagram in the Expected Flow section that gives more clarity about the sequence of actions. The flow diagram can follow from the use case diagram to show the tasks performed by the actors in a serial order."
1,Created a great visual aid which helps us explain the plan.
1,Would be nice to see a sample test plan
1,"No UML diagrams included in the document.
Please include application flow diagram, state diagram or sequence diagram or Use Case diagrams to make the document for readable."
1,"I think overall it looks good. However, a bit more low-level details may give better insight about such issues."
1,"Document is explained well with clear understanding of the issue.
Problem statement, design plan is explained well.
Team can work on adding test plans.
As well as well diagrams and screenshots to make the document more explanatory."
1,"Except for the test plan, the design doc seems to have all the important details. The team should add a test plan before starting in order to go for a test-driven development."
1,"The write up is good as I was able to understand the issue to be fixed and the implemented approach. 
I would like to suggest the team to standardize the size of their screenshots though."
1,"The design seems pretty good, but the solutions are a little bit unspecific. It would be better if there are more explanations about how to implement the solutions so that the reviews can give you more feedback."
1,Test plans are present but have not explained in detail. A brief description  of the use case with the test plan and RSpec would be perfect
1,"Make include more details for test plan, other than that, the wiki looks very good."
1,"The author has made a test plan, but it is ""reactive"" instead of ""proactive"". The test plan for the changes to be incorporated could be improved a bit further by further consideration about the usage scenario."
1,"There are some test plans in place and others will be done after the bugs are generated.
Suggestions: It would have been great to have screenshots of the test plans."
1,"The problems are described very nicely. When it comes to changes to be made, files to be modified are given. I feel more explanation needs to be given with respect to changes in these files for each problem stating why this file needs to be changed and what the impact will be."
1,"There are no diagrams present.
It would have been great if a screenshot of a test case or flow diagram was given."
1,"As for the designs proposed by the authors it proves to be a redundant check since there is a minimal amount of Design aspect in their doc. 
They haven't even defined an application flow. 
1. Nothing about adding a method to any class has been suggested. As per them most important things are going to be given in the final doc design. 
2. The design hasn't been implemented to the depth to make it a code let alone make it smelly. 
3. Nothing mentioned about the design to make it complicated and the piece of code which they would delve into to ascertain of any pre-existing gems for simplification. 
4. This too is hard to reach a conclusion on since not enough details to answer it with certainty. 
5. Yes. Absolutely, a much more thorough investigation should be carried out and relevant previous work exploration with help solve the cause."
1,"There are no solutions proposed. Just the issues are listed and explained.
A possible screenshot or a flow diagram would have been better to catch the proposed solution."
1,"Have covered almost all the issues, it would have been better if an implementation plan was provided."
1,"The authors talk about adding the tablesorter class to the html table and using javascript scripts for further action. There are no apparent problems with this strategy, however I would suggest for the team to elaborate and provide more details on the implementation. For example, it is not possible to understand what the javascript part will look like, how many functions will be used or how they will interact with html."
1,"The authors have taken efforts to identify the right places for making the identified changes. It seems that they have already done some changes.
Suggestions:
I feel that the proposed changes on a high level. You might want to go a level deeper to explain what will your changes be like. You might also consider adding use case for your changes."
1,"The proposed changes section of the wikipedia clearly mentions the column names the team would implement sort on. But, how they want to implement the sort could be explained a little more in detail. They mention they would use tablesorter JQuery, but I would suggest to add some sort of a pseudocode that would explain better how exactly does the sorting work."
1,The authors can add the project's purpose (why this feature is important/helpful). The authors have mentioned the plan to use tablesorter jQuery to sort the table but No design plan is included. I suggest the team to remove the introduction to expertiza since it was clearly mentioned in the requirements to not include it.
1,"The test plan has covered various cases and completely explainable in simple terms
Small suggestion, The first paragraph could have been itemized for easier understanding."
1,"They have explained every aspect of the project really well. Plus the video also show the changes they have done. One thing you can add is audio in your screencast videos, telling what is being done so that its easy for the user to understand."
1,"-This whole wiki is for expertiza you do not need to explain what it is in the introduction
-The snippet of code for issue 228 is an intimidating wall of text consider adding some new lines or splitting it up some
-Do not just but a whole code file on the wiki (_review_strategy.html.erb) if I want to read this I will find it on the repo."
1,"The project has been explained in great detail. Just feel instead of using issue numbers, if the team had explained the issue in brief before elaborating on it, that would have been great."
1,Maybe some more comments will be helpful.
1,Mostly looks good. Can change names like this is_selfreview_enabled to is_self_review_enabled and assignment_form_assignment_num_metareviews_allowed to assignment_form_assignment_num_meta_reviews_allowed. selfreview shouldn't be a single string.
1,I do feel the code can be deployed to the production server once a few test cases have been implemented by the team.
1,Only problem statement is explained and nothing about how the team will design the solution. Please add design and UML diagrams.
1,"The project design and the testing plans are well laid out.
Solution part does not have any description in it, says it will be given in the detailed design.
Could have given some idea on the solution with some flow diagram."
1,"Though the pull request has been passed, but the writeup does not explain the details of the implementation, like what sorting algorithm the team has implemented using jQuery etc. The design part of the writeup is very hollow, and needs further refinement."
1,"Yes, as per the solution provided, it does seem that the design incorporates the required functionality. It considers sorting on all the specified fields.
Suggestions:
Since you have mentioned the use of jQuery tablesorte, you may also add explanation as to what is tablesorter and try explaining atleast for one field (e.g. name) as to how does it work to sort the entries."
1,"Yes, their design seems to cover all the intended functionality requested for the project. But how the team will achieve the few not so straight-forward sorting such as the one indicated in ‘Author feedback report’ is not clear to conclude, their approach will achieve the intended functionality"
1,The authors provide a list of files that will be modified in the scope of this project and a high level overview of what needs to be done. The rationale behind using a tablesorter jQuery library and defining the code in the script seems reasonable but the team needs to discuss more details to further clarity the solution.
1,"I think that the authors have identified changes in the html.erb files, which looks right to me. As it only deals with the sorted view of instructor reports, the changes must go in the views part of the application. 
Suggestion:
You can try to add a bit of information on whether your changes include addition of new code, deletion of existing code, or just slightly modifying or extending the existing code and justify it.
Query:
Do you plan on creating  a drop-down like option to choose from which type of sorting is to be performed? If yes, it is an add-on user-friendly feature."
1,"Unfortunately the team has missed out on adding any visual aids to the document. I would suggest that where you list all the column names which would be sorted in each view, also add a screenshot of how that view looks at the present moment, and a low-fi sketch of how the view would look after the changes have been implemented."
1,"The authors have not included any diagrams.
Though the purpose and proposed changes are understood, the team could have mentioned use case diagrams or a flow chart explaining the flow of the functionality."
1,"Although screenshots are available on the Projects page, it would have been easier to visualize if the page mockups were added in the design document too."
1,"Although the write-up explains the things clearly, visual aids will leverage your proposed changes.
Suggestions:
You can include UML diagrams like use cases, application flow to elaborate more on your additional changes.
You can mock the changes ( editing html page to show proposed changes) which will really help in a better understanding of your design."
1,"Unfortunately no visual aids are provided in the design. I would suggest providing the simplified UML diagram that does not necessarily capture all of the classes that interact with the ones that will be modified by the team, but the ones that the team finds will be most relevant to the reader."
1,"The document mentions the tools of JQuery sorting table, in fact which API or any sample code that can be referenced to is expected in the document. Also, this project seems to focus on the view part of Expertiza, so the test plan should be more detailed, cover more edge case."
1,"The design document is comprehensive and covers most of the relevant topics.
General problem statement is defined clearly and then divided into multiple specific subtasks which will be addressed by the project.
The solution to the problem specifies the library that will be utilized in the implementation and classifies several types of sorting that needs to be done. This is followed by the files that will be modified in the scope of this project.
The primary problem is that the document does not provide any extensive discussion about the possible design decisions and implementation strategies. It is stated that scripts have been added at the top of the file to sort the contents of table. I would suggest elaborating on the specifics, what functions are called and how will the javascript function be tied to the html table contents."
1,"The team provided sufficient information on the project purpose and design. The test plan is adequate.

 

 

It would be better, to provide a solid reasoning for incorporating different sorting. Few sorting implementations, ie) by name and team are intuitive. But the need to sort the Author feedback report and teammate review report, in the way suggested by the team, the reasoning is not very apparent. Need more problem statement elaboration."
1,"The design document has clearly mentioned the problem statement and the subtasks that need to be performed. However, it looks a bit incomplete to me.
Suggestions:
Try adding what were your proposed approaches and a clear reasoning as to why did you choose a particular approach.
You can simply remove the statement on Expertiza, as the professor has clearly advised us to avoid doing it."
1,"The team has done a good job in listing down the project requirements and design. However I suggest the testing plan be improved. In place of giving steps on how a reviewer should test the project, the team should instead list how they wish to write tests for the functionality added, for example-: list down a dummy set of data in any one report view, mention how they would like to write a test for this. Say using capybara, and then how to corroborate the result from the view."
1,"It says what they will do, but it seems high level. Would appreciate some diagrams or mockups"
1,"The project purpose is stated in detail, in the Introduction part. Starting from the background and problem statement ( to improve the quality of report views""). The purpose is stated in five different small goals separately: make changes in view submissions, view scores, view review report, author feedback report and teammate review report five different parts. In terms of project purpose, it's comprehensive and detailed.
As for project design, it is carefully outlined in the ""Solution"" and ""Modification of files"" part. I think the project design might needs a bit more description, in terms of what steps needs to do first, and what steps needs to be done next. It seems that all the changes are for the UI, but is there any UI that can be served as a pattern, for the usage of others? Or is there any implementation of one UI dependent on the implementation of another? Here, I think there needs to be more detailed steps.
The testing plan includes detailed steps in terms of how to test the implementation as a  end user. I like it very much because it is both succinct and very intuitive. It will be good to add some sample pictures when the project is over and some pictures that display the functionality becomes available."
1,"No test plan added, they where missing the last time as well. You guys should add them telling how you exactly plan to test the changes you make, even if its a small change it should be mentioned how it was tested."
1,"No, it doesn't. 
Suggestion: Team should add a test plan which includes tests for testing the required changes."
1,As such the project description does not ask for any visualizations.  But visualization in terms of UML diagram or a CRC cards would have been a helpful way to make the description better.
1,The team has clearly defined the objective of the project. The have also stated the approach that they are about to use to solve the problem. They have also clearly added the schema for storing the time information that the user will spend on a particular review. The only thing the team could have added was to create a UML diagram defining the classes that are changed or added  and adding what attributes are added and what functions modified/added. The team haven't mentioned any design pattern as such but the proposed  plan explains the idea well.
1,"The design seems to follow appropriate principles and pattern. It is simple and clearly explains what needs to be done and where the changes will be made.
Suggestion: addition of screen mock-ups to document will help reviewers a lot."
1,the design design dicument seems to be written well and organised into nice categories so as to be easily readable. Though the team hasn't  made any changes since the last update. The team could have added a UML diagram and test plan in order to better explain the project.
1,They have included the flowchart of the flow of the functionality that is being added which seems to be designed properly and readable. Also database table whichthey are going to change is depicted. They could add Class Responsibility Collaborators cards to further illustrate the code changes they are about to make.
1,"As mentioned earlier, the flowchart and simple ER diagram are helpful, but I believe these changes would benefit greatly from having low-fi sketches, and actor diagrams instead of flow-charts."
1,It isn't clear what all the Review statistics will be shown in the column. If it is just the time spent then that's fine. But if there are other details as well then it needs to be explained how so much data will be shown in a single cell w/o affecting readability.
1,"The Introduction was a little confusing as to what this team is going to do. Rather the ""Objective of the project"" section is what clarifies the change the are doing and from that I was able to understand what already exists.
The Objective of the project section contains the proposed solutions when the proposed solutions ought to be a separate section."
1,The autosave feature is a pain right now and it is buggy(not sure if it is in the scope of this project) so an option can be given to choose autosave the data after a set of intervals like 5/10/15 mins
1,The design incorporates all the required functionalities. The team could have added Use cases or CRC cards to help convey which parts of code they plan to change and how. Overall the team conveys their objectives.
1,"everything looks great , you can add test plan for this as its a big change in functionalities."
1,the design document seems to be well written and detailed with respect to the objectives that need to be achieved. The team explains well the purpose and project design. they have included the database tables which will be modified. the team could add a testing plan to make the design document look complete.
1,"The write-up is very detailed as to what features have been implemented but lacks on explaining how they are implemented. It can be improved by adding how the features have been implemented, why they chose this logic to implement the features and how to test the code or show how they have tested the code."
1,"- The write-up does mention the files changed but misses out on adding code snippets.
- Little formatting inconsistencies found like ""-- Expertiza Project"" in the introduction, and a "":-"" only for Overview but none of the other headings.
- Looks like ""Separate the list of 'teamed with' students from the current tasks box"" needs to be a heading rather than plain text!
- Now we have created a separate table for assignments"" sounds ambiguous - does it mean a new database table or a html table..? Please be specific.
- ""A helper function was also added to format a string into multiple lines"" - please mention what the string is about (what it represents), what are these multiple lines that it is getting split into, and why you would want to split them.
- Test Cases are not stated. Test Plan does mention one as ""for example"" but the testing process could've been given a little more respect. :)"
1,"Yes, it works as intended.
It would be better if you could add a video recording of the flow/screenshots of the flow in the test plan."
1,The bug fixing does work according to the screenshots provided by the authors. They have provided a step by step screenshot of the issue that they have fixed. The authors haven't hosted their version of the expertiza so it is very difficult to actually check the functionality. They could have hosted expertiza on VCL or they could have put a screen cast of the working functionality to help in reviewing.
1,"It is given in wiki that most of your test cases depend on checking the output. However, like I mentioned in my last review, several test cases like the ones mentioned below can be automated. This is especially true as TDD is explicitly mentioned in your problem statement:
""Write the required tests before implementing/refactoring the methods in the above-mentioned classes"".

Add past due assignments to the student’s task list (on Student View).
Check for correction in due dates of assignments (when an assignment’s due date is edited, it should be appropriately moved from the “Past assignments” list to the “Current Assignments” list if needed)
On Student Task page, separate the list of 'teamed with' students from the current tasks box."
1,the team has implemented there testing plan and have been very thorough with there test cases. They seem to have considered a lot of cases and have implemented them in rspec. The only thing that they should do is use different commits for adding test cases.
1,"Team could have added test plan in wiki along with test covered and test description.
Also could have worked upon increasing test coverage."
1,"There have been only two commits - one on 30th Oct and second on 31st October. There have been no commits since. It would have been better if you people had given one more commit resolving the issues given by code climate, since most of them are trivial."
1,"The code written is following the Ruby on rails guidelines. The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a little more descriptive names for variables for example inside app/helpers/student_task_helper.rb  they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities. Also they have added to few commits for the amount of code change that they have done. The commit messages  are not descriptive enough about what changes have the authors committed."
1,"Code Snippet added. 
Still, Git link is not of the pull request.  
No link provided for the change. Either screencast or the URL of the deployed application would have been ideal."
1,"New code added is written well with DRY and no long or complicated functions.
I could see file updated has changes on line such as tab and space.
Team could work upon indentation."
1,The authors have documented the steps they did to solve the issues. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They should have  explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
1,It only explains how they did but not why they did. The various approach could have been mentioned in the WIKI.
1,"It feels like test plan only covers one aspect - ""changing of the background color for tasks as we approach the deadline.""
 
here are other aspects which can be automated for testing, perhaps by Rspec or the likes:

Add past due assignments to the student’s task list (on Student View). -- Verify if they are being added/saved
Check for correction in due dates of assignments (when an assignment’s due date is edited, it should be appropriately moved from the “Past assignments” list to the “Current Assignments” list if needed) --- Check if the functionality works.
On Student Task page, separate the list of 'teamed with' students from the current tasks box. -- test if this works
Write the required tests before implementing/refactoring the methods in the above-mentioned classe"
1,The writeup is clear. It is easy to understand what the project does. It would be better if you can put in more code details and major pieces that do the important logic.
1,"Writeup is readable and written properly.
Team could have added code snippet and pictures of changed or improved functionality.
Also team could work upon formatting and could also add links and references."
1,"Can not find any video or link or Ip address link to manually test the changes.
I would request team to deploy the changes so that we can test the system partially."
1,I feel some comments can be added before every function for the code to be understood better.
1,The functions seem to be implemented in a good manner and the code seems to be DRY.. In some cases though the authors could have improved as in the i app/helpers/student_task_helper.rb  file. In side the due_date_color method they could have used case expressions in Ruby instead of the if else logic implemented as that would be a more Ruby on Rails way of doing it. As it will reduce the lines of code as well as being a more elegant way of handling it.
1,"In due_date_color switch case would have been a better approach then if else if block.
Lots of code that is done in view can be moved to the controller. Follow MVC architecture."
1,"@all_task vs @student_tasks 
 
The name 'all_task' does not sound appropriate. It should be student_all_tasks.
 
1. all_tasks => student_all_tasks
 
2. student_tasks => student_available_tasks
 
3. current_student_tasks => student_current_tasks
4. past_student_tasks => student_past_tasks
 
 
Also, the filename will_paginate_array_fix.rb seems misleading to me. A better name would have been support_array_pagination.rb.
 
Also, I am not sure this file should be in the initializers, as it is just a require statement. May be this should be included in the places where the pagination is required, instead of loading it during app initialization."
1,"The variables, methods, and class names do seem to follow proper convention and are suggestive of the functionality they are being used for. In some cases they could have used a liitle more desciptive names for variables for example inside app/helpers/student_task_helper.rb  they could have used background_colour instead of rtn as a variable name in the due_date_color() method. It will become more readable for the reviewers to understand the functionalities."
1,"I could only see 3 commits with no significant file changes.
I would request team to add and contribute the changes as soon as possible.
With the present changed code, methods names and variables and class names are proper with reasonable naming conventions."
1,"Test plan is given a appreciable thought and team has also implemented test scenarios mainly in student_task_controller_spec.rb
Would suggest team to try and increase test coverage."
1,"Team has written test cases , but they need to few more rounds of testing, including positive test cases as well as negative test cases."
1,"Yes, the changes were committed throughout, but the commit messages could be a bit more descriptive."
1,"In general, the code of this system is clean and readable, but there are some problems in it. For example, author didn't handle the interest list properly. When a realtor wants to see the potential buyers of a house, it does not mean he wants to see all the hunters registered in the system. Besides, the realtor can not edit his own profile can change real estate company, because the edit method in the controller is not realized. And in models, some relationships shouldn't appear because one of the model is not created, such as the model house_hunters, which has many queries, but the model query is not created."
1,"Code is written properly. Simple and clean
Every function is simple and has distinguishing work.
Did not understand the need of creating MVC for search, photos separately. 
Many functionalities could have been merged together and made a defined solution.
Eg house search function could have been added in House MVC."
1,"Looking at your code on github , you guys are following good coding practices. Just at some places you have repeated you code, for example in /myaccounts/show.html.erb you are repeating alot of code. You can create one html file for the repeated code and call it based on the object or move the repeated code to a section and use it."
1,"The issues have been identified and documented clearly. However, a little more of explanation is required for the solutions proposed for issues 2 - 5. They seem to me at a very high level."
1,"I think that there is a huge scope for test plan improvisation. The current test plan is just a step-by-step procedure to test if the reviewer receives a mail fir conflicting reviews. The test plan should also include test cases to test whether the link is present in the email notification. Also, is the link correct and navigable?
The test plan should also cover the pits where the functionality may fail, so as to ensure smooth functioning of the system."
1,They did include a test plan. It would be better if they also test the instructor side.
1,some additional tests can be added
1,They have one scenario. maybe a few more could help better test their work
1,"There's a testing plan. Although the testing plan seems to cover the fuctionalities, it is not clearly stated. The tester should log in as what role? how to select a teams assignment and review it? How to log out and check the instructor's email? which instructor email should the tester check?
These questions should have been answered in the test plan."
1,"The visualization aids used currently are application flow diagram, and use cases. They are useful to understand the scenario of the problem statement.
However, a sequence or a communication diagram will really be beneficial to understand how the method interfaces with the other  methods. This will help identify if the new method impacts other functionalities and will portray the proposed solution efficiently."
1,"They used the UML diagrams, it really help me a lot when reading the wiki page. Maybe they can also make diagrams about the changes they are going to make."
1,"There are a lot of diagrams, but the application flow and the UML Diagram doesn't look very clear. We can hardly see the words in the UML Diagram.
Also, the diagrams seem to not fit each other. How does the application diagram and the Uml diagram connect to each other? There's no clear instructions.
Also, I don't think a screen shot of code in the design doc is a good idea. I think it could be better if the changes expected to be made can be described in a more abstract fashion."
1,"The design does appear to be simple, as they have not planned to modify any of the existing methods. Their new method will interact with Response, AssignmentQuestionnaire model, and then link the assignment to the review in the email.
However, they have not mentioned if they have planned any data structure/variable to store the assignment link and pass it on to the method where email notification will be sent. But, i suppose that storing it in a variable will suffice."
1,"The design is simple, although it could be better if it has more concrete examples."
1,"As they have provided a very high-level idea of their proposed solution, there is no pseudocode or any class diagram which helps explain the design adequately. You can improvise the design by including flow of the methods, to highlight how and where will your new method come into picture.
However, looking at the intended modifications, it seems that the changes follow DRY principles, and changes are not unnecessary. There is also no need of using any design patterns as per the required changes."
1,"Design does seem to be sound, but complex. As mentioned in the earlier review, I am unsure if looping over each review is the correct thing to do or not. Maybe the team discussed this with the mentor and decided against it as no new information has been added in the document.
If so, I would only suggest the team to include the complexity of the design in the document."
1,"The design is sound because it follows the problem statement and the instructions.
I doubt if it follows the DRY principle while looping through each review, because that might be already done in the Expertiza.
In terms of patterns, I think here it needs to use the factory pattern, altough it's not stated in the design."
1,"The design document contains all the necessary sections but fails to provide adequate explanation of the changes to be made. The authors have done a good job at explaining the current scenario, also identified the code where the changes are to be made.
They have identified the need of a new function and its purpose, but fail to provide a design of the intended changes, i.e. new functions or modifications in the functions, any need to use different variables etc.
The authors have not added any changes relevant to the previous suggestions."
1,"The new design does not talk about any methods or class definitions, thus I cannot comment on this.
Suggestion:
You can add more information on methods or any usage of design patterns in order to make the review effective and useful."
1,"It looks to me from the document that the authors are clear about their implementation.
Suggestion:
They can elaborate more by specifying how do they intend to store the URLs to the reviews, how are they identifying the two distinctly different reviews. They can also add a basic flow of their proposed solution. This will enhance the explanation."
1,yes build passed but there are many code climate warnings that can be easily cleaned up such as tips for refactoring and unassigned variables. A more careful look at the tool warnings was required.
1,The code is ready to be deployed in my opinion to the production server. The team could improve the quality of their code by visiting the code climate tests.
1,Yes the team added the test cases. 45/69 new lines have been covered in the  tests. good work. but I feel that they could have added additional -ve test cases.
1,"Test coverage has increased by a very small margin. More tests would have been better. There are only 2 tests. There are various other scenarios that could have been tested like missing or wrong attributes in request,email."
1,"The code has been written as per the coding standard. The code written by the team adheres to dry principle. However, as per my first review comments it is advisable to follow better naming conventions. The team could rename their function names such as the below one to something smaller such as get_time_diff. The code needs refactoring in names and addition of comments. 
 def get_time_diff_btw_due_date_and_now(due_date)"
1,"Yes the authors explain the existing solution and explain the drawbacks for in them. 
I would have liked to see a point wise comparison on how their solution overcomes the existing drawbacks. 
I would suggest not to hard code the mail text/subject in the code and use a config file instead. This will be easy to modify in future.
I would have liked if the authors added why they took sidekiq and not rabbitmq or celery"
1,The team have explained why and how they did the work they did. Feel they should elaborate more on the tests that they have implemented.
1,"Existing tests have been modified to changed to pass for the new implementation. 
News tests could have been added"
1,The team has leveraged the existing test cases to align with the changes implemented. It would have been more helpful to include the test cases in the write up as well.
1,"The wiki as well as a design document has been created for the write up which explains the refactoring requirements. The team has explained the technical aspects in a very detailed manner.
However, it would be helpful for users if the team could add more details about the functional aspects so that a end user can test the impact on the existing functionality due to the changes done."
1,"Yes features work as intended but I would like to see tests as well as testing case were job addition to queue fails. I understand this would be edge case and not likely to happen but still needs to be handled.
Other edge cases such as participant_mails is nil have been taken care of."
1,The authors work functions well but the code uses redundant/bad logic in some places. Code could have been put into methods and reused. The code functions as expected in almost all cases
1,Function length is good. General convention of having function length < 20 has been followed. What I found lacking was additional 2-3 lines of comments before each new function to understand what has been implemented.
1,more comments are needed for clearity .
1,"The team has followed Ruby coding standard. However, function names could be refactored for example the function ""get_time_diff_btw_due_date_and_now"" name is just too long and can be modified into ""get_time_diff"" or any other meaningful name.
Also, it is advisable to keep the function name singular or append the name with list; so instead of using ""find_participant_emails"" the team can use ""find_participant_email_list""."
1,"A few tests were added, though I'd like to see more tests regarding edge cases or invalid functionality."
1,The test plan briefly mentions the scenarios the team plans to test. They can add more about the test cases if possible.
1,As there are UI changes test plan is not required but a basic stepwise description of how to see the required output can be helpful
1,"The test plan is clear and effective but shallow. Manual testing is good, but more description should be provided for the automated testing."
1,The team have written a test plan. But I feel more test cases could have been written to test the edge cases. Also the team could have explained their test cases in more detail.
1,"The screenshots for the view are great, they help in understanding the problem statement and the solution. however the design document lacks use case or class diagrams on how extenral entity interacts with the system and gets response. 
Since the authors are using external api's it would have been good if they could give more details request and response"
1,"Though this project doesn't require any UML diagram as such. However, a flowchart showing the work flow would have made the design document better and efficient."
1,"There were mock-ups of the final result of the project however there were no UML diagrams. I think the UML diagrams are not necessary for this project since the flow of how the instructor will change the language is fairly simple and one can understand it by just reading the document.
Maybe they could have done a mock-up of how some of the other views would have looked like once the language has changed. Especially the pages with flash messages if any. Currently they have just shown the proposed changes on the page where the instructor will change the language."
1,Maybe add some design diagrams rather than just have screenshots.
1,"The design is simple- the authors have discussed the changes like allowing instructor to change language of a course and adding multi-language support in the design. One suggestion is that the authors could have described the difference between static and dynamic strings used in this context. Especially since they specify that only static strings will be translated, but dynamic strings will remain in English."
1,"The design is quite good. It clearly explains what needs to be done and where the changes will be made. However, the only suggestion would be to include more UML diagrams so that the design becomes more clear and understandable."
1,The design appears to be clear. The inclusion of a visual aid that shows how the control transfers from the view to controller to model and back to controller and view whenever the language is changed could have been shown to help readers better understand the design.
1,No design found on the wiki. Not sure if any design diagram is needed but a flow diagram to test the changes can be helpful.
1,"Yes authors have done well to explain the changes being done in the project. I think I wish they would have added is the details of languages they are supporting. 
 Also they do mention that they will add extra column to languages table, they could have pasted the new schema in the doc"
1,"The changes are clearly mentioned , they are very clear what and where to make changes. Only suggestion would be to include more about how these changes are going to be done."
1,The team have done a good job explaining their project. But I feel the team should have detailed their explanation of the implementation more. Also the test cases should have been included in more detail.
1,"The authors have included all the necessary sections of the design document. However, the document seems to be a very high-level explanation of the problem statement and proposed solutions.
Suggestion:
You can try elaborating more on the problem statement and the current scenario of the project. e.g. Try explaining what is the threshold for sending an email notification to the users."
1,"The team has an outline of the test plan and the test scenarios which they are planning to take care of. It would be suggested that the team takes care of all the exhaustive scenarios which are related to the functionality. They could also add the step wise description of the scenarios they have mentioned or the test cases they are planning to implement.
Test driven approach makes sure our code is exhaustive of all scenarios."
1,Yes the test plan is included but the test plan appears to be very shallow as it gives the which functionalities must be test but doesn't mentions it inform of test like what should be the actions taken when a certain condition arises it can be more clearly stated by mentioning the test cases in form of context and it statements
1,The current tests written are good but it would be good if the team had pointed out the corner cases as wel such as - what happens if the deadline for self-review is exceeded? Does that mean the peer-review scores cannot be seen? Or is a default score of 0 is set?
1,"The UML diagrams are detailed and explained well.
Suggestion: The application flow could be explained in points so that the reviewer has a clearer view of what is the sequence of events occurring."
1,"The team has very well explained the changes they are making in the project to achieve the functionality. However, they have not included any design explanation explicitly. They have not described the approach they have come with. It might be helpful if they could add the design approach as well in the wiki link so that its easier to understand the code changes by having a glance at the design pattern."
1,"The design does appear to be sound.
The team has put most of the use cases, actors and explained them well.
The screenshots of the UI are also present.
Suggestion: Could have explained the implementation a bit more in bullet points."
1,Yes the team seem to have a clear idea as to what must be done and how the result must look. It would be helpful if the team gave some insights as to how the composite score formula was decided as this is the heart of the project.
1,The design doc explains the project in detail. I would suggest that the description could be modified by removing redundancy to make the doc more succinct. Also what MVC files are being touched could have been mentioned.
1,"The application flow help understands how your design work, but maybe you can add more visual aids to help understand your design more easily."
1,"It would have been good to show the comparison of the scores calculated with the old model and the new model.
This will check if the proposed design is acceptable or just falls in the ""smell"" category."
1,They have mentioned the method to calculate the composite reviews. But where this method is planned to be added in Expertiza is unclear. This needs to be mentioned.
1,"No UML diagrams present. 
Suggestions: Although the wireframes make it really easier to understand how the end product will look like, the team could have mentioned a use case diagram, or a flowchart depicting the flow of the functionality."
1,There are mock-ups of the end result. But there are no other UML diagrams. There should have been some UML diagrams to help explain their design better as well as the flow of the implementation.
1,"The screen mockups were very nice. Good job! I would like to see a UML diagram for the implementation, i.e. how a reference to a static string in a view eventually maps to the correct yaml file. That would make the design more specific and clear."
1,"I do not think that the design will increase the response time of the system. The team also has mentioned about the API that they will use. Enough efforts have been taken to convey what is to be done and how the team will do it. 
Suggestions: No information about the methods that will be implemented has been given in the design document. Availability of such info would have been helpful."
1,need to edit test plan and add more test cases.
1,"The design encompasses all the features in the specification. It only indicates supporting one more language, though, whereas the design document specifies any language. It seems out of the scope of the project, but what if you used the Google's Cloud Translation API to translate the static strings at run time? Then you could support almost any language. There might be licensing issues though."
1,"The Design document states all the required things right from project design to test plan. The doc also specifies what all files will be changes along with how the functionality will look like once the project is deployed. 
Suggestion: I feel like the test plan should have been a bit more elaborate. The team did mention one scenario. I feel like there could have been many more. But, as all the required things are present, I am giving this post full stars."
1,"I think technical design lacks details. the section should be more detailed on how this internationalization will work, where will the string be kept.
what are the effective changes required across the project
test plan should have more tests"
1,The document is almost complete. Includes proper planning and demonstration. Only suggestion would be to include more about how the implementation would be done.
1,"The document clearly specifies the problem statement. It seems good enough. They have mentioned the API they are planning to use as well as the files to be modified. However, I would like more details on this API and how they plan to integrate it into their project."
1,"All parts are presented, but need little fore explanation in test plan part."
1,The team have done a good job explaining their project. But I feel the team should have detailed their explanation of the implementation more. Also more test cases should have been included in more detail.
1,A through test-plan is described. I do think Test Case-2 could be described more efficiently so that it is clear and easy to understand. Overall looks good.
1,"Yes the design includes the test plan. However, the test plan could have been more low level, instead of just writing 'it should' statements."
1,Yes the design is pretty good. The patterns followed avoids any duplication of code. But I had made a suggestion in Review One to take a look at Project 1843 and it's code. The problem statement is quite similar and the code could be reused. I don't see any mention of it. I hope you do take a look before starting to code as it will avoid any re-work.
1,"design is fine. some minor errors like no stop phase.Moreover no design patterns used.
Just flowcharts are provided.If some sequence diagram or use case diagrams were provided it would improve the design a lot."
1,"Both the problems and proposed changes are clearly detailed. My only suggestion is to put the description of the issue being solved in the same location as the solution to it, otherwise one has to scroll around the page to figure out which problem is being fixed."
1,The diagrams follow the conventions and are detailed and self explanatory. Suggestion : Test Plan is not so clear. Especially the second testcase where it is stated that the dates will be changed accordingly. What dates will be changed and how should be mentioned. A similar flow-chart  will make it very clear as to what you plan to test.
1,"The use of flowcharts describe the functioning of the project exceptionally.
Suggestion: Including screen mockups to your doc will add more weight to it."
1,"There is nothing wrong in current design. Looks good.
Suggestion: However Since I have already worked on a similar assignment so I know that similar issue has already been resolved for drop topic deadline. You can reuse the entire code and just change deadline type. Have a look at OSS project topic- 1843.  Check with the Professor once."
1,"Great efforts have been taken to convey what is to be done and how the team will do it. The design will definitely increase the response time.
Suggestion: Information about the methods that will be implemented is not given in the design document Availability of such info would have been helpful."
1,The Issue 2 explanation ans Issue 1 solution 2 explanation is a bit hard to follow or seems to be at a high level. It needs to be broken down. All other descriptions are easy to follow. It would have been more helpful if some screenshots of the tables or the screen shots of the screens were included.
1,"Design is very nicely explained with flowchart makes the design flow very clear. Suggestion : If a screenshot of actual screen where the change needs to be made is added, that would be perfect."
1,"The wiki explains the problem statement very well along with the proposed solution which seems reasonable. But the wiki does not include any test plans as of now. There are a few test cases which can be used to write the test plan, for eg. not adding drop deadline for the assignment itself and assigning each topic a drop deadline and check the behaviour of the system."
1,"The problem statements are much detailed, but they could be more concise.
The test plan could probably be elaborated for better explanation."
1,"The changes to be made to improve the existing system have been adequately explained in the design document. The filters by which the data needs to be curated have also been stated. However, it would be better if they started by giving a short description of the problem statement and then going into specifics."
1,"The explanations are good.
But a layout in the issue-solution form listed sequentially would have looked better."
1,"Yes, the functionalities are present.
It would have been good if the issues were listed sequentially following its solutions."
1,Yes all the requirements mentioned in the Problem Statement are considered. Also the corresponding solutions are explained . A flow diagram or screenshots explaining the solution jsut like the problem statement is explained would have been helpful.
1,"The problem statement is nicely explained with the help of flowchart. However some screenshot of the screens where changes need to be made as well a similar flow diagram for solution will be helpful. Test Plan is not stated in details. It just mentions Bullet Points.  In Test Driven Development, adequately defining the test cases is as important as developing a solution as per the problem statement. This should be corrected."
1,"The design document is good which covers every aspects from project purpose to the test cases . However, there are some things which I found incomplete. In the problem statement they should first of mention a proper definition  of what is meant by self review as the term is a bit ambiguous and in the flow diagram they have mentioned the flow which represents the UI aspect of the the project and not the flow of how the task would be implemented and thus the flow diagram must be changed"
1,"The design documents looks very crisp and clear.
The work flow, proposed solutions and test plans are all listed. Good work.
A screenshot or two of the test cases would have made it even better."
1,The design related information is missing. The team has mentioned the problem statement and application flow. They need to add UML diagrams and in the first stage at least the proposed changes are expected.
1,"There is an ER diagram helps the reviewer understand the relationship between different sets. Maybe more screenshot can be provided to show where is the search bar, etc."
1,"Just one ER diagram.
Add use case and activity/flow diagrams."
1,"I feel the diagram is more complex, team could have gone with some usecase/UML/CRC diagrams"
1,"The changes proposed by the authors are elaborate overall. They have defined the changes extensively. However, the ""Search for Reviews"" section could have elaborated more about the search functionality. The authors could have explained what could be searched and how the search functionality can be used a little more elaborately."
1,Team has given information on how it will work after the the project is done. Could have given more detail on Design using UML diagrams and Files invovled in the Project
1,it could be better if you tell in which files you'll be making those changes and if you'll create new functions or make change in existing functions.
1,"The explanations seem very clear. Although, splitting the ER diagram into 1 or 2 more sections would have made the design simple to understand in my opinion."
1,"The document clearly states what is missing and how they are planning to implement that thing , they state how many new criterion are they going to add to the search feature, However, I would suggest them to include how will they implement it. There is no explanation of how things will be done."
1,"There is no test plan included in the design document. Actually, there should be a lot of tests need to be done for this project. From the UI, controller to model, the project should include test plan cover all these aspects to make sure the function can work as intended."
1,The test plan section included in the design document does not provide any content. It could specify the various scenarios considered and describe how each functionality could be tested.
1,The team included a test plan section is the documentation which is currently blank. the team should include the automated and manual test scenarios in the document.
1,"There is only a title for test plan, which could be in a great detail."
1,"No. Team did not mentioned anything under Test Plan.Team should work on this part of project as well, as manual testing will not help to check all the corners of the complex project."
1,Please add a test plan to the documentation in order to make sure that the test plan is covering the code changes.
1,"UML and Class diagram are needed. 
If the screenshot of the same functionality was given then it would have been better."
1,The team has include the use case diagrams for all the scenarios related to the requirement. Some UI mockups would have helped othwewise great work.
1,The use case diagrams are understandable but I think images of web pages will make things more clear.
1,The design is simple and easy to understand. Could be better if implementing some code level design.
1,The design seems simple but it is unclear on the implementation section. The authors can add more on how they plan to add new code or modify existing implementations to achieve their goal.
1,Design concept seems promising but a brief introduction about how each module will be implemented for both reviewer and reviewee is missing.
1,"It looks like sound, but I think the authors could add some principles and patterns which they may use into wiki."
1,"Design doc does not explain the approach to resolve the issue to be taken well. As i could see only 2 lines of explanation.
Team should explain the design more clearly for naive users too.
Team has not used any design principle."
1,Design plan has not changed since I last reviewed. A bit more detail would still be nice
1,"The design seems good. However, it would be better if the author can mention the design principles and patterns followed in the documentation."
1,The explanation is adequate. I would suggest that the design of the doc be more explicit. It may include some sub titles and the font shoule be of different sizes to emphasize some parts.
1,Authors have given a brief description of the subclass of Questionnaire named SupplementaryReviewQuestionnaire that they are going to implement but it would have been better if they have provided how and what model dependency needs to implemented to achieve the goal.
1,The team has included all the details required to implement the given requirement. The documents lacks the changes the changes that will be made to the system and also the design of the changes. the document just included the list of files that will be changes to achieve the desired result.
1,"The authors have provided use cases for creating new subclass of Questionnaire, SupplementaryReviewQuestionnaire. However, more details can be added to the implementation section such as what new methods will be doing and test plans."
1,"The authors used a lot of charts for use cases, this is great, but they only explained a little for implementation, which could be explained in a great detail."
1,"Team did not explained project well with the description.
Diagrams do explain the approach, but for a reader to get the overview but text description is also important.
Team can work on adding text description.
Same had been suggested in the last review."
1,"The explanation is inadequate, needs more textual explanation of the problem and approach"
1,authors adequately explained the changes to be made to the system but it would have been better if they have provided how and what model dependency needs to be implemented to achieve the goal.
1,The flow charts are good and help a lot in understanding the work. Again. it would be better to explain the abbreviations.
1,"Diagrams for use cases are given properly, but the class diagram is missing."
1,Use case diagrams explain the requirements properly but no system design related diagram or mock ups are given.
1,"Team has majorly include diagrams for the code change and algorithm flows.
Team should add UML diagrams to explain flow of the application change, sequence of actions, actors involved."
1,The diagrams are very very large on the webpage. Consider making them half the size.
1,A use case diagram is provided in the documentation. The team should add a class diagram as well to give an idea of the low-level implementation.
1,The design has explained the use cases with proper diagrams but design to implement them is not absent.
1,"1. The grammar in introduction may need improvement to be more understandable.
2. For abbreviations, it would be better to give explanations to help others understand."
1,You can explain more on what actually are you planning to change.
1,"Design plan of the document only explains algorithm or flow for the code change.
Team should explain the changes from existing system  to proposed solution with some texts."
1,The quality is of explanation is good and easy to follow. The team might want to add some low-level details for the code changes.
1,"The deign gives some use cases for this project, but compared to all the functionality required for this project, it is not enough. More detailed description about the design of other things need to be added, such as model, view."
1,"Detailed design and test plan lacks. For introduction part, the explanation is not clear enough and a little bit confusing. It is better to add more explantation about what the project is and point out the exact purpose clearly."
1,the project describes the project requirement in detail. the project statement is clear. the team has also included the design/flow which they will be following in order to achieve the desired results. the testing strategy is currently missing from the wiki. the team should inlclude the test plan in the documentation.
1,Can elaborate more on the problem statement and the approach that you are planning to take
1,"Team needs to work upon adding more content in the document.
Project design needs to be explained more with text and bullets.
Team should add Test Plan."
1,"Test plan is blank...
The diagrams are good but a little more writing on what you are planning to do would have been nice"
1,"Their test plan includes a test case for successfully displaying the pop-up text message as JSON, and displaying suggestion metrics for the review segment( a block of review, a comment box). Try to include test cases where a review message is absent, i.e. the code should not break for empty review segment. Include a test case where review segment has a suggestion, and test if the output says ""Suggestion present"". Include a negative test case for the the suggestion, where a suggestion is not given by the reviewer, and test that the output says ""suggestion absent""."
1,"The design document has incorporated test plans, but they haven't been explained neatly. Only the skeleton for the tests has been provided, they've should have at least added one actual test code for the reviewer to verify."
1,The team has included test plan in Connextra format by including the feature specification and two scenarios- one happy path and one to capture the edge case of response generated with no text. No more test cases can be added to check if the team's part in the project is implemented well. Some test case scenarios that check the efficiency of the suggestion detection algorithm (for example: to detect review responses that generate the generalized suggestion for all the projects) can be included.
1,I think more tests can be added
1,"The visualization includes a screen mock-up ""Analyze""  button which will implement the algorithm and produce the output. However, there is no mock-up of the screen of what will the output be like. The flow diagram is highly redundant according to me, as it does not portray any additional information about the design. I would suggest them to provide a sequence diagram of the algorithm methods, so as to illustrate their changes."
1,"There were mock-ups of how the Analyze button would be displayed along side each rubric, however there is no mock-up for how the response would be displayed.Suggestions: I would like to see where and how would that response be displayed because from the flow diagram the response seems to be quite big. I would like to also know if the team is planing to display all the components of the response from the API or just a few."
1,"Yes, design seems fit. More insight required on the algorithm itself and how it will be implemented."
1,"The authors have explained the scope of the project pretty well. But as I mentioned in the earlier review, a whole paragraph on the background of expertiza is not required, one or two sentences would have sufficed."
1,"Wireframes have been given stating what the end product will look like. But I did not find any UML diagrams or tables. 
Suggestion: The team could have mentioned use case diagrams or a flow chart explaining the flow of the functionality."
1,"The authors have provided a mock up screen of the proposed solution. which clarifies how their solution will look like. However, the use of visual aids seems to be inadequate since, they have not added any class diagram, use-case or sequence diagram to elaborate their solution in depth.
Suggestion:
You might want to add a diagram for your proposed design pattern as suggested above to improvise your write-up"
1,It would be better to add more diagrams.
1,The screenshots posted give a clear picture of the intended output. It would be nice to have a design diagram.
1,The authors have provided a mock-up of their final design which seems pretty good. However what's missing is UML diagrams. Something that would help understand the flow of functionality would be useful.
1,"The team has included 2 screenshots of the review UI. The first one depicts the existing look and the 2nd one shows that they plan to include a new button that is responsible for analyzing the segmented text corresponding to each rubric where the student has reviewed and also display a pop-up message showing the results of suggestion metrics like volume, sentiment, suggestion, praise and criticism metrics. 
The team has also shown the user story in Connextra format and also described to scenarios- one happy path and one where no text is typed into the segmented text box input. 
The team could have made the document even more visually palatable with flow chars / UML diagrams for Use case or Sequence diagram to support the feature and the scenarios they plan to implement."
1,UML diagrams are not provided. Please add it.
1,"I do not think that the design will increase the response time of the system.
Suggestion: I did not find any details regarding about any methods that will be used to implement the functionality. That would have been useful. The test plan does mention  ViewSuggestionMetricsForReviewSegment though. If this is the method name then it does not follow snake casing."
1,More effort should be expended on the design.The current explanation talks only about changes in the view. It would be better if the solution is explained at greater depth.
1,"I think the files that the authors plan to modify seems to be quite appropriate. As to the 'smell' of the code that can be ascertained only when they have started writing the code. So far though the design seems sound.
There have however been no mention of the existence of any gems. I think the authors should explore that avenue as well as that would probably simplify their task. For example:- I found the gem sentimental that categorizes the phrases into positive, negative and neutral. I think this is something the authors can look into."
1,"A simple enough explanation has been provided for how the functionality will be working. 
Suggestion: I feel that the approach that the team will take to implement the functionality should have been explained more elaborately. For example what different possible methods will be implemented. Or how the web service will be used, or what kind of data the web service will provide for suggestion detection."
1,More explanation on how to proceed with the implementation could have been added. Could have also added technologies to be used.
1,"The authors have not specified any code changes as of now so I can't comment on it.
Suggestion:
You might want to add any API Adapter class you plan to implement to generalize the solution for any future API implementations."
1,changes are explained well. suggestion detection algorithm an be explained a bit more or how exactly you will be using it. probably some code snippets would help explaining that.
1,Please add more information on the NLP algorithm team is trying to use.
1,The explanation of how the received data will be stored/presented is something I would suggest the team to add. The design document also misses out on where the data will be presented in the view.
1,"The authors have provided a high level solution to the problem statement. 
They have mentioned that they are going to use an API for suggestion detection, but have not yet identified one.
Suggestion:
You can survey on the existing APIs and discuss about at least two of them in depth and specify which one you feel is more compatible with expertiza. This will improve your write-up significantly."
1,The design incorporates most of the functionality required. It would be nice to have a design diagram.
1,"The document specifies the problem statement and the ""analyze"" functionality they want to incorporate. However, the design document seems to be incomplete as they have not talked about the exact identified functionality i.e ""analyze"" and the design document section is empty.
Suggestion : You can talk about methods you want to add or existing methods you want to modify and how.
I think that you can remove the expertiza introduction section as mentioned by the professor."
1,"The design document contains some extra information, such as a whole paragraph about expertiza, which I think can be skipped and more importance should be put on the design part."
1,"The project documentation looks complete with clear details about the purpose- to enable the students to better analyze their review based on the suggestion metrics (like volume, sentiment, suggestion, praise and criticism metrics). They have delineated the design that includes the files that the team proposes to change (the view- app/views/response/response.html.erb and the partial app/views/submitted_content/_self_review.html.erb), the screenshot of the existing UI of the review section and how the UI would look after the project with the inclusion of a button to analyze and they have specified that a popup displaying the suggestion metrics will emerge when the button is clicked. 
I specifically like how the Test plan includes their feature in the Connextra format. They have mentioned 2 scenarios- one where the student clicks the button without entering text in which case the popup alerts the reviewer saying no text for analysis and the regular scenario when the user clicks the analyze button after entering text in which case the popup displays the suggestion metrics.
I wish to suggest an additional scenario where the user can intuitively test the quality of the suggestion metrics, based on the review input. Like for example, there can be test cases which show that the suggestion algorithm detects generic reviews that might be seemingly relevant to the topic but add no customization to the project being reviewed (like how some reviewers menially copy paste the same format of the review to all projects with just minor changes).
Overall the team has done a great job with the documentation and I look forward to see the implementation of this project in the upcoming review."
1,Good job on UI and test cases. Kindly add UML diagram.
1,The doc seems complete. All aspects of the problem statement are covered and test plan is also included. A UML diagram may prove to be useful.
1,It would have been better if a test plan covering changes made to the system was added to the design doc.
1,"The test plan is clear but shallow. Finer grain tests should be described, not simply functional tests."
1,"hough the team have explained their work pretty well, the have not included a test plan. It is an important part of the project and should be included"
1,It would have been better if some screenshots and UML diagrams was added to the design doc to better explain the functionality.
1,The design does not include any kind of diagram. It would have been better if a flowchart or a class diagram could have been included in the document.
1,"The current document does not include a visualization tool- inclusion of such a tool would have made the document more readable.  Nevertheless the link to the Wiki of the previous document includes a flow diagram that clearly outlines the code flow of how the control flows from the incorporation of OffScreenCanvas web IDL file to its Rust implementation in OffScreenCanvas.rs, to the DOM implementation and finally to the renderer."
1,A suggestion would be to add some visualization about what the offscreenCanvas does would be helpful.
1,It would be nice to see a mockup of the off-screen canvas.
1,"Though the team have explained their work pretty well, the team should think about adding a few diagrams to better help in the understanding of the project. Currently the team have not used any diagrams."
1,"The main thread behind the design seems to be reusing the existing code which provides the similar functionality. This is a great idea. It is consistent with the appropriate programming principles e.g. not reinventing the wheel. One suggestion would be for the authors to explain why the instance of the class, from which the relevant parts of code are going to be copied, is not directly used as this would be a more DRY approach. In a case if this is not possible, then providing a proper reasoning and justification would be helpful."
1,The high level view of the solution appears to be reasonable. The problem with this design is that there is no discussion present about any principles or patterns that are going to be utilized as part of the solution. I would suggest using certain keywords to make the decisions more clear to the reader. For example the authors talk about reusing the code of HTMLCanvasContextRendering2D and WebGLRenderingContext. It would be helpful if the concrete mechanism were specified. For example patterns like Decorator or Adapter would be relevant for this case.
1,"The authors do a great job of explaining the technical details and the api functionality of the requirements. Furthermore, they provide a list of files that are going to be changed in the scope of this project. However, the document would be more complete if the authors provided more details about specifics of changes. For example the description of high level changes pertaining to the OffscreenCanvasContextRendering2D is adequate, but it would be better if the authors elaborated on the code that is going to be filtered out."
1,The authors have adequately explained the changes made to the system. Ot would have been better if some visual modes are added.
1,"Yes, the authors have specified the changes that have already been implemented as a part of the OSS project and the proposed set of changes that are to be implemented as a part of the final project. Detailed information on the changes already made is available as a Wiki link to the previous document. This document clearly captures the implementation of the OffScreenCanvas Webidl and Rust files. The design document attached in this round encompasses the proposed design of- implementation of the OffScreenCanvasRenderingContext2D and enabling of the blob API for testing the code. The authors have also listed the files changed and to be changed, making it easier for the reviewers to keep track of the code on Github.
Though the text is lucid, lack of a visual tool- (like flow charts, tables or UML diagrams) to concisely illustrate the workflow might make it difficult for new readers to follow the functionalities proposed and the interlinking of various modules. So, one suggestion at this point is that the authors could have included a visual representation of the design. Apart from that, the document is well made and credits to the team."
1,"The team has well explained the problem statement along with the application flow which makes it easier to understand about the project. They has also described the method which discusses their proposed implementation. However, it would be helpful to add more details on the design approach they have chosen.
The team has also proposed a short test plan on a very high level, which makes senses as this is very early level of the project, but its suggested to add more diverse test cases to it as it would help in handling all the cases during the development of functionality of  self review extension."
1,"Visual aids are absent from the write-up.
Suggestions:
Use cases for email notification can be added.
Template/design of the new/modified email can be added. 
Any relevant design pattern diagram can be added."
1,This design is good. There are no visual aids. Maybe they can consider use it to make it more detailed.
1,Some screenshots of actual emails sent and proposed format of the new email would be helpful
1,"The team has not provided any visual representation of the work they propose to do. Perhaps the pseudocode mentioned above, could instead be shown as a set of diagrams showing an example for how this fucntionality would be handled when one say 1 Review has a score disparity of more than the threshold for existing 2-3 reviews.
The idea here is not to add working screenshots, but a Low-Fi diagram would also help in making the documentation visually more representative."
1,"Need improvements, can add design by adding UML diagrams and Test Plans. 
Technical details with class diagram to explain the code level implementation would have been better."
1,"The project purpose is well defined and clearly explains what this project aims to do. The team also identifies the strategies they wish to adopt to fix the issue. This explanation is clear and concise.
However, I would also suggest the team to add a basic test plan, on how they would test the functionality they add. Also I suggest them to list down the list of files they would be changing."
1,"The test plan covers all the reports and their creation, as well as data to be rendered using the new button added. You can try adding edge test cases, i.e. the code should not break if data is empty for a report. They have not yet posted the complete plan of testing, and plan to update as per the progress. I would suggest you to take time to define a testing strategy, as it will help in TDD which speeds up the process highly."
1,Test plan needs to be expanded to describe each unit/functional test team plans to write for each of the reports.
1,"Yes, they have improved the UML diagram from last round and it’s a standard class UML diagram. It’s very self-explanatory. Though the diagram under test plan should be clearer. Also, there could have been a sample report generated for reference."
1,"The mock UIs are well thought of and make navigation easier. A couple of suggestions:
- can add another mock UI showing the drop down.
- Some types of reports may not exist. If the drop down options are hard-coded, selecting an option might lead to a page with no content (this might be an existing issue I suspect). For every option, you could query for existence of at least one record before putting that option in the drop down."
1,"The test plan section is included, however, only the framework to be used is discussed. I would suggest them to include a little more brief description about what test cases they plan to include and work on."
1,The bar charts have been added to the design report. The visualizations have been added to views also and the screen shots have been added too. The only thing that I would like to add is that the bar charts could have been more descriptive. As in they could have added details for  x label and y label and also put legend. this will aid the user in quickly understanding what the chart is conveying.
1,"A flowchart and graph has been shown in the documentation. 
Suggestions: I feel that there should have been mockups of the screens where the functionality will actually appear. Team should have shown how the solution would look like on the expertiza page. There could have been use case diagrams too."
1,The design diagram is good and it would also be helpful to have a few screenshots of the current expertiza view.
1,"The team has attached a bar chart for visualization which helps in understanding their purpose.
Suggestion : More visual aids could have been added. The stacked bar chart as mentioned earlier . More mockups could have been added."
1,One flow chart and one chart graph are included. I find the chart incomplete and confusing too. I wasn't able to relate how this is going to help real scenario. The better way would be to use a use case diagram or take example of our current class programs.
1,The have included a detailed design flow representation and have also included the visualizations. The could have added Lo-Fi UI cards to depict changes to views which will help them visualize the changes and also help instructors in suggesting improvements at an early stage which will help reduce unnecessary code changes in latter stages of the project.
1,"The design looks good enough. It mostly deals with html.erb files to accommodate the graph and some database filtering in the controllers.I do not think that the design will increase the responses time of the system.
Suggestion: If the details regarding how the graph will be implemented or any gem will be used should have been given. I did not find any details regarding about any methods that will be used to implement the functionality. That too would have been useful."
1,The team has given a design flow that underlines the basic way in which they are planning to target the issue at hand. It can make use by giving an example as to how the output might look and the document must also describe the tools that would be used for achieving the task.
1,"The proposed solution sounds good. They haven't really mentioned the changes in turn of programmer language. I couldn't visualize how are they going to make changes. They have mentioned few html.erb file but I think they would need put a good amount of work to implement the new feature. I think the team could have been more precise in their approach, for example, they could have included what all new methods they need to add or modify the existing one."
1,"The changes proposed by the team include implementing a bar chart, stacked or single. Based upon the project description, it is advised that the team look for other alternatives like pie chart that would help to span the results with a minimal look."
1,The design includes a test plan. However the test plan has nothing related to tests or which test cases are going to be considered. It just explains the flow of how an instructor would reach the GitHub metrics data page.The team should at least mention which files are the test cases going to be written on and what functionalities are they going to test.
1,the team has mentioned all the files that will be changed and have also written a paragraph stating what are the proposed changes. The team could also document the changes that are being made to individual code files stating the changes done using code snippets and the reason why the changes are being made. Also they can talk about what design patterns principle are being used to incorporate the functionality that is being proposed. The team could also use CRC cards to depict the proposed code changes. This will not only help readers understand the report better but also help the team in dividing work between the team members and fast tracking the completion of project.
1,"The explanation is quite well documented such as including the flow chart , kind of bar graphs they would prefer and the files that they will update. Adding of screenshots of the flow of the website would make it more easy to understand for a leyman."
1,There are enough aids such as uml diagrams and screen shots. The authors explicitly mention that there are no db changes so no need of an er diagram. Although I would have liked some class level details to be mentioned in the document that would help to dig more about the design changes
1,"The use case diagram appears to be slightly incorrect. The symbol for an should be a stick figure not a rectangle. But that is a minor error. Also, the Use Case Diagram Details mention student as an actor but the diagram shows no instance of student as an actor. I think the Student as an actor shouldn't be included because in the current use case only the instructor is the primary actor and the assignment should have been submitted by the time the instructor views the scores, thus, requiring no involvement from the students at that point in time.Mention of Primary sequence in the Use Case Diagram Details seems highly unnecessary and potentially unrelated."
1,"The documentation covered almost everything from project purpose, design flow as well as some info on what files will be changed in the project. 
Suggestion: I feel that the test plan was a bit vague. Some more details should have been provided. For example- What all features will be tested. Or maybe some info about edge cases and different scenarios that will be covered."
1,The idea to involve instructors because of a 60 requests/hour limit may complicate the project. Another idea would be to update metrics with a round robin scheduling of GET requests.
1,"The document shows the flow of work really well.However, I would like to suggest to put more of test planning and the tools and technologies that will be used. This will enhance the quality of the document to a great extent."
1,"The design doc contains project purpose, project design and testing plan in the wiki.
The wiki contains mock visualizations which make it easy to understand the project proposal and how are they planning to do.
The design flow as a flow chart adds to the ease of understanding.
The test plan explains about the technologies that they are planning to use for testing.
Suggestion: 
The test plan could say what should be done in testing than just the technologies to be used for a particular part of code. For ed, we plan to have a dummy small data and see if the graphs output the visualizations correctly, if the sum id being counted to 100% of the class participation etc...
the stacked version could also have been represented for better understanding."
1,"The design appears to be sound for most part of it. The linking between the different sections seems appropriate.
The only issue I have is with the mock-up in the Design Details -> Second Change mock-up number 2. I think that the bar chart is being displayed for each and every day. I feel that is not only highly unnecessary but also would be very overwhelming for the instructor to process all this information because:-i) It is common knowledge that many students do not begin projects until a few days/weeks would have passed since the assignment is posted. So that would leave the initial few days of the bar chart empty with nothing valuable to show.ii) The duration of each project varies from project to project. Assignment 2 had a duration of about 20 -30 days. This would mean that there would be about 20 bar charts for each day which would be quite difficult for the TA/instructor to process for just one team let alone for so many other teams they need to evaluate.
Suggestions: Instead of providing bar chart for each day aggregate it to a bar chart for each week or one in 5 days. And then maybe towards the deadline or like a week before the deadline you could switch to 1 barchart per day. OR Provide an option to switch between the scaling of time periods like a week, 5 days, 1 day etc."
1,"Yes, they included some design principles, which is good. Maybe the authors could add some design patterns into wiki."
1,Yes. The team intends to use grade_controller to show github metric which would be a good place to implement this functionality. The idea to involve instructors because of a 60 requests/hour limit may complicate the project. Another idea would be to update metrics with a round robin scheduling of GET requests.
1,"The design seems to be good. It is still not very clear of the path for implementation or the files that they plan to add and the methods in said files however that is fine considering that this is just the initial stage and not much can be said since we haven't advanced to the implementation stage yet. 
The authors seem to doubt whether they are allowed to use any existing gem. I think they should go ahead and use the gems."
1,"The design is well explained.
Need clarification on below:
1) How will this GitHub metrics will be used to grade the student. So how will the final marks for a particular be calculated using the data from GitHub."
1,The authors mention gems that they could potentially use. but they do not mention where they'd be adding the associated code.
1,"They have listed various possibilities to get the task done. The Use Case and UML diagrams also help here.
Suggestion : Please add the places where you want to make/have made the changes."
1,"The authors do not mention the model they will be making additions to. I would suggest the team to consider a new controller, since adding new code to an existing controller may not be OO design."
1,"Yes the presence of use case diagrams and flow charts explaining the work flow is good. It would be nice if there were more uml diagrams such as sequence so show various class interactions. 
Presence of mockup screens is good. That helps in understanding what is being implemented. It would have been good if the authors put in more details about the validations that that propose in the system"
1,"The diagrams seems to be good for most of the part. One can understand the project by looking at the diagrams itself. However, in one of the instructor flow diagram, it's given that if the instructor's status is pending the instructor will set the limit to 10. That doesn't make sense. Why would the instructor himself/herself set the limit to 10. Isn't this the responsibility of the system itself to handle this or at the most the admin?
Suggestions: Change the 'yes' branch of is pending? to loop 10 times or somehow indicate that pending instructors can add only 10 students to an assignment."
1,"Yes, the design appears to be sound. There could be some rearrangement in the mock-up layout, e.g. text box for email address and 'Add' button could have the same horizontal alignment for a better user interface."
1,"The design seems to be sound. There are a lot of mention of which files will be modified however, as I said in the previous round, there is no mention of the layout of the existing database or if the changes they will make currently will change the database.
Suggestion: Team could mention what tables are present in the database of the Bacui project. I believe this will be really helpful since most of the reviewers are working on Expertiza projects and have no knowledge of Bacui projects. At the very least the team could mention which tables the project will be interacting with along with their structure."
1,Yes the authors have tried to explain what changes are required and what they plan to do however I feel that exact changes that they might be doing are missing. They could have listed most files that will need modification and if necessary new files that will be changed
1,"The document provided by the team is very detailed and includes all the requirements which are suggested by the Change Request. However, the team may change tone of the document as it is instructive  right now which seems like the change request description itself. The team might also add a wiki link for this document so that it could be included in the expertiza links of existing and ongoing changes and would be more reachable to a wider audience."
1,I meant to leave this blank. Kindly ignore the rating for this question as this project does not require any tests. All the changes made are CSS related.
1,"The authors provide some screenshot of the pages they need to change. It would be better if they provide more diagrams to explain their design, for example, a UML diagram about the relationship of all the class they need to change."
1,"The team has provided current system UI, but no expectations on the UI for this project. For an UI intensive project, I believe it’s essential to have at least a minimal wireframe that serves as the base for good design document so every stake-holder can be on the same page with regard to expectations."
1,"It’s an UI intensive project, so no specific design approaches are applicable. But the team should have put it more details into the document to elaborate the changes and they choice of tools under the bootstrap framework. Like a pill or navtab or navbar is going to be used to achieve a particular look, and if one of them, why the choice. Such details on decisions should be included in the design document."
1,"The design changes appear simple and clear. Only suggestion to the team would be to explain the design choices a little more. As mentioned above, give an example of how, where to use Bootstrap and Jumbotron."
1,The design is not clear enough. More details are needed.
1,Yes the document mainly talks about small changes at different places in the application that are being done. I think more implementation details with ample justification are missing. if the team is using certain apis why are they using should have been mentioned.
1,The authors only explain what needs to be changed but no specific steps. If would be better if they can provide more details about how will they implement the functions they mention in the document.
1,"For the ""manage participant"" part, the authors didn't explain how will they solve the issue that the ""add student"" button cannot work correctly after a user add a course. The document included other changes need to be made, but the explantation was not clear enough. The design used a lot of components in Bootstrap, but the authors didn't give any explantations to these components they would use and didn't give any diagrams to show what the changes will be like."
1,"Explanations are okay , there needs to be more detail on what is being done and how the final outlook view would be. As of now not much details have been put in the document. A before and after view would have adequately shown the impact the this work will make."
1,"The team have taken time to explain each functionality properly in the second round. They list all the changes that they wish to make in the views. However, I would suggest the team to also mark out (circle out) the area they wish to change in the screenshot of the view."
1,"Team has added most of the missing screenshots. There will be no design patterns involved in bootstrap so i'd say the document is now complete.
Only thing i would suggest is, since bacui may not have a wiki, this document can be moved to a wiki page of github repository."
1,"The test plan is shallow. It only state what features the team will test but how the features will be test, what and how many cases will be included are not clear. The team should expand the plan for each features they aim to test, including specific steps and different cases."
1,The testing appears to be pretty rigorous. They have taken into account cases when TA/instructor's scores should be excluded. The test cases could have been better described.
1,Team has done a good job in identifying the cases that needs to be tested. It will be an improvement if they can add details on how they plan to test each controller/view separately.
1,There are no UML diagrams. I would suggest them to include a test case diagram that can improve understandability.
1,Team has used screenshots to show the current scenario but any flowcharts/UML to describe how they are solving the problem is missing. Adding these will make the document easier for anyone not familiar the project understand it better
1,"No, the proposed UI changes are only mentioned and the diagrams in the wiki are of the current system. Use draw.io for mockups and drawings."
1,"I think you explained the change they want to make clear, but maybe you can state which file you want to make and how you guys want to change that file."
1,"The build does not pass, but only because of codeclimate issues. The code written by the team, in terms of logic is absolutely perfect.
But certain conventions were not followed, such as ""proper indentation was not followed"", ""DRY principle violated"". Although these have no impact on the functionality, these coding practices are industry convention and maybe the team would want to consider giving them equal importance for the next projects."
1,"The code is very well written as previously said. However, some test cases are still not passing and that may be troublesome if deployed onto production server. It would be a really nice opportunity for students in further classes take this up and improve the work so that they can complete the work which was left incomplete due to time constraints."
1,"The code can be readily merged into production.
1) I felt code climate failing not an issue, because their similar blocks of code were on spec files and deleting 2 different roles is the same functionality in the end.
Few places has indentation errors which can be fixed before merging.
As suggested earlier, removing the error for SQL and replacing with some form of alert box could be helpful for a future work."
1,"The writeup is well written. It covers almost all the work done. However, one suggestion would be to include more details about hoe the tests were done. I just one small portion dedicated to explanation of RSpec and not the work implemented."
1,"The writeup is short and precise - has everything that is needed for testing and understanding and kept the writeup small for better understanding.
They have mentioned about their DRY principle within ""Changes"" itself. Mentioning it as a separate sub topic will give more visibility is what I felt.
Other than that everything is self explanatory."
1,The write-up is well organized but it would have been better if some screenshots were uploaded along with the steps. That would have made the document easier to understand.
1,"Writeup is written well and explained properly with good indentation, content and screenshots.
Team could have explained test plan in more brief so as to understand number of test scenarios covered."
1,The test cases added by the team pass. But overall coverage has decreased. I would suggest the team to have added more test cases for the new lines added in the controllers.
1,"Team has added capybara test. but team could have worked upon improving test coverage.
Team can explain test description in test plan in wiki, step by step so as to understand what all test scenarios were covered."
1,"No new code was committed in the second round. I would have really appreciated it if the team could have taken the time to add comments, and fix some ""codeclimate"" issues."
1,"Could not see any commits after the last submission as functionalities were working fine, but team could have worked upon improving test coverage."
1,"Yes the design is as simple as possible. However they have only described the proposed design. They could have provided simple mock ups or samples,"
1,"The design is both simple and clear.
It should be better to add another step for the comparison of the instructor review and the student review. Both as a final examination and a testing."
1,"Yes, the design seems appropriate and suitable for the case. Maybe the author could specify the patterns they use in the document."
1,"I can't find any explanation for principles and patterns, maybe the authors should add them to wiki."
1,A brief description for the class level implementation would be better.
1,"1)     The diagram provided is a generalization for strategy pattern and more aligned to help give a simpler outlook
2)     The standards are not followed, as it should indicate the class type (as an interface) and the method implementations needed in the concrete classes
3)     The UML is high-level indication. More project specific diagram is needed"
1,"the authors have made it clear by including mock-up screen of the proposed solution. 
They have used class uml diagram for the newly identified sub-classes and hence, I think that they have made adequate use of visual aids.
Suggestion:
They can add use cases for the new feature."
1,"The teams implementation of a UML diagram seems to be a good way of representing the changes planned.The diagram could have been detailed with regards to the classes that are being added and modified. There should be attributes of each class , then the methods that are added or changed with the type of inputs to these methods and return types of these methods."
1,"More or less an A for effort, but I don't know if the UML is fine with so little in it because we don't care about what those classes do, or if we should care and there should be more about those classes and their states and behaviors."
1,The UML diagram shows the various subclasses clearly. It would have been better if it had also explained a few attributes/ methods.
1,"The team has done a good job with the UML diagram. However, in my opinion, it would be better if they can add details for all the classes in the diagram."
1,The design proposed by the team specifies an addition of a new button to the buttons tray from the existing UI. The button when clicked must bring a menu of additional reports. This functionality should consider the mapping to the review_mapping controller file that will implement the given features.
1,"It appears from the design that the authors have identified strategy pattern for implementation, which is a good design.
I think that they can talk more about the design by specifying an overview of the new controller, i.e. specifying the methods they plan to add."
1,"The explanations are provided as points which is very easy to follow and understand. Though, the need for the proposed UI change is not very clear to me. Few more details on actually how the strategy pattern is going to be incorporated in current code would have been insightful.
   The explanation on the test controller is ambiguous."
1,"The authors have done a good job by identifying the sub-classes they plan to add. It would be good to have an overview of the class definitions.
It is quite clear from the explanation that they plan to have different tasks depending upon the type of report to be removed."
1,"The test plan is present. It is broken down into separate sections for each of the five issues. Each section is further broken down into a manual and automated testing parts. While the sections for manual testing are comprehensive, the sections for automated tests are too general and do not provide a clear vision for what types of changes are going to be introduced.
I would suggest elaborating more on the technical side of the tests, for example specifying which spec files will be modified or whether or not the project will utilize RSpec."
1,"Test plan is included, but it makes many references to manual tests. The tests they state could be automated in a straight forward manner."
1,"The test plan section defines the steps needed to manually test the functionalities, but I would suggest the team to also include the logic they propose to use in the rspec tests, the objects they would mock etc."
1,The authors have provided a nice pictorial description of different strategies using a UML diagram. The could add CRC cards or use cases or the application flow diagrams which will aide in the report presentation.
1,"Could have included some screenshots. Otherwise, great work by the team on UML diagrams."
1,"The design incorporates the basic functionalities required that include refactoring the review_mapping_controller file, to extrapolate it's features to the reports_controller file. It must also mention the procedure that the team would follow to move the reports from response_report method to the controller file."
1,The visualization provided in the form of flow diagrams in very easy to understand. However ER diagrams of main DB tables could have been provided because it is difficult to understand the data flow and inter relation between tables.
1,"For each problem the authors display relevant chunks of code and discuss which parts need to be changed. Aside from the Issue #1072 all the solutions seem reasonable and simple.
One minor suggestion for improvement would be to use the .collect instead of the .each method for computing total_weight in validate_assignment_questionnaires_weights method."
1,"The authors have divided the design into sub-tasks which shows that they are very clear about their approach.
As per the problem statement, the added functionality seems complete to me.
Suggestion:  
You could include an application flow diagram to elaborate more on how your solution will work."
1,Yes the design is simple in nature and easy to understand. This can be attributed to the fact that their issues are quite simple in nature. They could have provided some simple UI mockups of the changes.
1,Fixes are simple adjustments to the current code. The last issue requires an addition of a full function but I think that it is appropriate to handle the bug fix as it pulls that responsibility out and keeps things nicely separated and associated for purpose.
1,"The team has efficiently described the problem statement and the need for undertaking such a project. Good effort. As it talks about refactoring, few more lines on the pain points of current design would have helped a great deal in appreciating the project.
The design selection is great. Apt to the problem and the UML diagram to visualize it, is helpful. The UML diagram should have been more descriptive on how the current code is to be modified to incorporate the proposed design pattern, as it was not easily to know, if this pattern would fit the current code.
Test plan is missing."
1,"You can add some more explaination of what exactly you'll do in issues like: 
Issue #1072 - Issue related to instructor's assignment participation. I felt information is missing here."
1,flowcharts are simple to understand but no design patterns used.some supporting class diagrams or sequence diagrams would be helpful.
1,"The project consists of five independent problems the scope of which is well-defined in the design document. The team provides visual diagrams in the solution descriptions which further improve the explanations of changes.
The fix for the Issue #1008 - ""Issue related to staggered deadline"" is backed up by a discussion about relevant db tables and corresponding part of code. One minor improvement would be for the authors to highlight the specific parts of code that are going to be changed in the updated block of code. Moreover, the solution to the Issue #1072 - ""Issue related to instructor's assignment participation"" is not specific enough, i.e. it is not clear which structures are going to be affected by the changes.
All in all, the document does a great job in explaining what changes are going to be introduced in the system."
1,"The design document coherently describes the project details including it's purpose and design. This helps to perceive implementation being carried out by the team to achieve the project goals. However, it could be improved by providing the test cases that have been carried out to get to the present state."
1,"The authors have done a great job at analyzing the problem statement and explaining clearly their proposed solution. I could easily understand the problem statement from the write-up. Well written.
However, the test plan is missing from the design document. 
Suggestion : 
You might want to add few success test cases and few edge test cases for removing reports."
1,The project goals are stated in a simple and precise manner. The design document is readable and easy to understand from. They have provided the reader with the background which states the need to do the refactoring. They can include or add file names which they are about to change.
1,The team has very well explained the Goals and separation of concerns. The team could have 'proposed' a way to test the implementation.
1,The doc contains almost everything in terms of design except for the test plan. You might want to add a test plan right away to go for a test-driven development.
1,"The design does include enough test plans.
The team has provided the code screenshots for the same.
Suggestion: Could have put links to the git code so that the wiki could have been short and precise."
1,"There is just one flow diagram which does explain the activities to happen.
There is no use case diagram with actors and all the uses cases expected.
Suggestion: The use case diagram would have given better clarity about the system"
1,Design is too detailed. I would suggest keeping it short and precise.
1,"The authors have explained well on what changes they want to make but it is unclear how it will be implemented. As I had suggested in my previous review, they can mention the expertiza files (controllers, views) involved."
1,"The design looks fine, team has provided the initial test plans.
A Lo-fi sketch is available as well.
The team could have put git links to the test plan code for better organization."
1,Less explanation on problem statement. Could have elaborated on the problem scenario and why changes needs to be made.
1,"The files to be changed have been properly listed.
I feel more explanation ought be given as to why these files have been modified and in what way."
1,"The wiki could have been organized better.
It looks a little messy. Not self explanatory.
The Use case does not have any actors in it.
Suggestion: Code screenshots could have been placed better"
1,Missing a UML. But loved the addition of the LoFI sketch.
1,The authors have put in a good amount of effort in creating LowFI sketch (table) of the Grade Summary view with mock data. They have included a rough prototype of the intended view with all student and assignment information. The documentation also shows the Manage Courses view which contains the 360 Assessment icon that links to the Grade Summary page. One suggestion is that the team could have touched upon some implementation detail like showing the code flow as a flowchart or even useful UML diagrams for usecases.
1,"The overall look of the page is well explained. However, I could not understand the back-end design plan, as in how/where the team will be adding such features in the code."
1,"This is the only place I found the authors could improve. There is no mention of the actual files that need to be modified. They have detailed out the change that they propose, but no mention of actual files and the code change. It would be further increase the clarity of the solution if you could include that too."
1,"The authors view of the final result is clear, but it is not yet clear on how the project is going to be implemented. i.e what files are going to be changed."
1,They might like to elaborate more on how they plan to use the hash of students to retrieve the specific information of the assignments. For eg. what models will you be using to query the DB.
1,"The authors have not specified any implementation specific detail pertaining to the specific controller classes that they propose to modify. So I am not in a position to comment if they are making changes in the wrong class or if it will make the code smelly.
The design looks precise and there is no need of any additional gems. 
The response time of the system should typically not take so long unless the view is rendering extraordinarily many student and assignment information. The team could implement an effective searching algorithm or use of an efficient data structure to store the student grade information. Or, they could possibly use filters to generate only relevant students (say under a specific course, year at a given University )
The authors have put in good effort in the design documentation except for minor additions (like code modifications, file changes and UML diagrams) which can be easily incorporated by the next review."
1,The explanation is good and more information on which files would be changed would be more helpful.
1,"The explanations are succinct. However, in the Controllers section, it is unclear which controller in expertiza project the authors are referring to. The authors could mention the name of the controller(s) they intend to change and also possible method(s) that might be added to it."
1,"The authors have proposed to create a view for Grade Summary with the details pertaining to the assignment grades, topics, review scores and total scores for each student which gets rendered when a 360 Assessment tab icon is clicked. This change seems logical. They have also depicted a LowFI sketch of the projected page and screenshot of a rough prototype. These changes seem logical to me. I wonder if they are going to reuse any existing code that they cited as prior work in the background. The documentation could have added specifics of the files that they wish to modify or create."
1,"The proposed changes look good, explanations are clear.
Also, mentioned the continuous talk with mentor to come up with a prototype.
Suggest you to include screenshots of some positive and negative tests in the future submissions."
1,"The design incorporates all the primary functionality, however adding a UML diagram would make it much better"
1,The design does incorporate all of the functionalities. One suggestion that I can give in the context of the design is that the documentation could have covered the list of files that they plan to work on and the current version of that code. They could have shown a UML diagram of the flow of activities for a lucid understandability
1,The design doc is clear and well written. The authors have done a great job explaining the project's purpose and their design plan with the use of LoFi sketch and prototype for the required view. I would suggest the team to include files that are involved for this project. Overall good work!
1,"This documentation is the first one to clearly give a background for the project, out of all the documentations that I have reviewed until now. Kudos to the team for taking that extra mile. They have clarified the purpose of this project under the Task heading as: to provide a holistic insight into the performance of each student in a class as an objective. The project design includes the view and controller section that projects the requirements of the project. I like how the team has listed all the information to be presented in the Grade Summary. The documentation finally contains the Test plan, where they propose to do controller tests to check if the correct model method is called and if the objects of appropriate datatype are returned and also if the correct view is rendered. They have also listed 2 feature tests to see if the correct information is being rendered on the view. The team could have added more such tests like: to test if the sorting functionality works fine"
1,"The design document looks really good.
All sections are properly described, screenshots included.
A possible uml or workflow diagram would have been appreciated."
1,"Yes, the design includes a test plan. I think the tests can be more descriptive, including 'what' is being tested and in 'which scenario' the test is being implemented."
1,The technical changes required are explained in depth but the usecase or the domain knowledge is not provides properly. This makes it difficult to understand the problem statement properly. Some high-level domain knowledge and requirements background will be helpful.
1,"One test case failing on travis. Once that is fixed, code can be merged."
1,"The Wiki is great, but I believe it's better to move the Testing framework part to front of the page."
1,"The code is well written. The dummies created are given proper and relevant names. However, I can not see much comments. I would suggest that inclusion of more comments would have enhanced the readability and efficiency of the project."
1,"I feel that they have achieved a 100% test coverage, although the design principles or patterns used haven't been listed. Listing that would help understand the testing strategy used."
1,"The test plan is too elaborate and doesn't exactly cover different pre-conditions, edge cases, invalid input values, and other possibilities under the corresponding headers. Please include this as it improves the readablity and understanding."
1,"The Wiki has all the relevant information though I feel it needs to be a bit more organized. The titles and order need to change. The content needs to be placed at proper places. For example, test plan lists all the test cases and code, which according to me should be covered in the implementation."
1,Overall the team has done good job in maintaining Ruby Style guide. The team could add more comments and reduce code redundancy in scores() method.
1,"There are some duplicate codes could substitute with ""before"" statement. For example, line 100 are exactly the same with line 108, it is better to use ""before"" even if there is only one line duplicate."
1,The team has a well composed design document. they have structured there design document into well written sub parts like design purpose and visualizations and files to be changed. They could have written there testing plan in a more elaborate manner by mentioning what kind of testing frame works will be used and what functionalities will be tested. The could have also added some use cases.
1,They have very well stated of about the purpose of their project. they have properly mentioned about the flow of their project which includes the flow chart for their project and also have specified of what kind of graphs they would prefer to show the visualization to the instructor. They have mentioned about how they will proceed in test case but haven't specified which files needs to be test inclusion of that would make the doc more complete
1,"Wrtie up clearly explains the project purpose, what changes needs to be made, however including a mock test plan would have been better."
1,"While the team did push changes to the project, there are 95 commits which are unnecessary. Instead of pushing every change to the final project, the team could have combined a few of the changes and pushed them all at once to make for better record of the changes made."
1,The interface is basic and no extra styling is done. But overall the web application is easy and intuitive to use. The Read me  file of the github repo should be updated to make it more   detailed to use.
1,"Yes, the team has explained their code and the reason for the additions made. However, for the issue #926, some more information about the Tablesorter and some additional comments would improve the writeup. Solutions to issue #718 and #971 are explained clearly and are easy to follow."
1,"The team has not included any test cases.
It would be easy to include the test cases on the  app/controllers/suggestion_controller for the update_feedback method that has been added.
Also the team may add some features test cases as most of the changes made are in html files.
The team can refer the existing features present in the .spec/features folder."
1,"The writeup s format on how they distinguished the features and explained solutions for each and everything is good.
First they give a bird's eye view of the problems and then deep diving into each problem with solution and screenshot is good.
The background explanation given could have been more specific towards their problem statement, rather than just about expertiza.
The images tend to occupy the entire page and its little difficult while going through it, a little foramatting could have made their page really good."
1,"There is no link provided to test the code manually. However from the video provided, I can infer that all the features have been implemented and are working properly. Issue #718 and #926 are working as expected.
In issue #971, I could see that the previous version of the 'add new topic' page had a topic description and topic category field which is not seen in the updated version.
Suggestion: The team could implement that or if already implemented, add that to the wiki page to reflect the way in which that is handled"
1,"Functions are of appropriate length and code is in proper methods.
However, no comments are provided what so ever."
1,"def create function in assignments controller seems to be long and could have been refactored.
Considering that they used most of the legacy code and most of their work was on UI, their part on ruby changes werent much"
1,"Ruby coding standard has been followed. Only one function has been added in controller as per requirement. Code follows DRY principle.
The team can add comments for the code added which would be useful to understand the code."
1,"Most of the variable names and function names are named based on proper convention.
Suggestion:
function addCreateTopicSection()This function name could be changed to maybe CreateTopic() or AddTopic()Apart form this, all other names look good"
1,"For the Ruby changes they have made, they have used intuitive names and used naming conventions as much as possible.
def update_feedback
 
Some places, the variable names are used in CamelCase whereas few places they werent used. Few variable names were directly used from legacy code, although refactoring could have been done.
curquestionnaire
quesparams . questArray"
1,"The code is clear and concise. The variable, method and class name choice is correct. 
One variable i feel can be changed is 
top_max_choosers can be renamed to topic_max_slots, as slots has been used in the function name as well and it will be more consisted"
1,"There a large set of variables that do not follow typical ruby naming convention. An example is that ""existAssignment"" should be ""exit_assignment"". Additionally, some names are not very helpful. For instance, the variable ""frm"" is used for a form, but why not just use ""form""? There is also a lot of javascript written directly on the page and are difficult to read and understand as there is missing method names or other non-intuitive variable names"
1,Test Plan is explained in detail. It covers Integration Testing and Functional checks. However some unit testing of the new models should also be covered.
1,Yes the Problem Statement and Design Approach sections explain clearly what the usecase is and what the authors think will be a good design to implement.The changes are clearly explained. Having some file names would be useful to review in detail.
1,"The Test plan seems to be covering most of the positive test cases. However, it doesn't seem to cover any negative test cases. Like if the student decides not to make the review public, its reviews shouldn't be shown to the TA/ Instructor."
1,some mock UI where this is going to be implemented would be helpful
1,"Team has added manual testing under test plan.
Team should also add automated test cases or brief plan on how they are going forward with automated testing of the changes."
1,"I think the design perfectly captures the view part. However, it looks a bit high level. I think more low level and model related details can be added. For e.g. what design pattern would be used, the tables that will be affected."
1,"The design document describes the problem statement, the approach towards the goal and the flow expected for the given issue. Certain improvements can be made to the introduction by providing a brief overview of the project details instead of introducing the Expertiza environment. The team plans on updating the test plan after implementation."
1,"The problem statements and design have been explained. But the team could have explained how they have planned to carry out the changes. Though this could be a vague idea, it could have been added. Likewise with the test plan too."
1,"The team has explained the problem statement well  and has done job in explaining the flow for every user with diagrams for them. However, the team needs to add the design approach and the testing plan for the project."
1,"The diagrams provided clearly explain the flow control of the proposed solutions. The team even mentions preconditions needed for the flow control.
the only suggestion I have is that the team could also add a low-fi sketch or screenshot of how the view would like after before/after Issue #1008 is fixed."
1,"The designs that the authors have proposed are consistent with the code and do not introduce any obvious problems.
However, the design decisions for issues #1017 and #1072 are missing and therefore cannot be assessed.
I would suggest including the discussion of the specific parts of the source code that are going to be addressed in this project. Posting the exact solution is not necessary."
1,"The team has provided solutions for all the issue but one. For issue#1017, the team has only provided a flow chart(description of the issue graphically) but the code which needs to be changed/added should be looked upon. 
 
Suggestion: The team can mention the way in which they attempt to tackle the issue by mentioning the files and the logic behind the proposed solution."
1,"I don't think the authors plan to add methods to the wrong class. They are modifying the right files.
The new design does not appear to potentially make the code ""smelly"".
But for few issues you haven't added any files which you'll be modifying, only the uml is given, you can add them before the final submission."
1,"I would appreciate a little more detail on bugs #1017 and #1072, which have a flow established, but no code snippets."
1,"The design is well though of however instead of writing the time difference logic, gems could have been used which are well tested and bug free."
1,"The design looks a bit complicated and will increase the response time of the system.
It can make the code smelly.
Too complicated code handled in issue 1 which could be refactored."
1,"Overall work is done good.
But Explanations are bit lengthy and somewhat hard to follow.
Ther is no need to mention the existing code.Which simplymmakes the documentation lengthier."
1,"A fix for the second and fourth issues is missing at the current moment. If this is included as in the other issues then the document will adequately propose solutions. Also, perhaps more elaboration on the 3rd fix on how the columns are not being copied over (I know the code is pasted but a simple worded explanation would be nice too)."
1,The explanations are well written and describe the workflow well. There could have been a little more detail in the explanation as some of the statements are very high level.
1,"For the bugs which have explanations, the proposed fixes and explanations of the problem are sound. I'd like more info on bugs #1017 and #1072, as they only have the flow."
1,"Its good, can be more elaborative. Also in sections where you have added the code changes, you ca add comments to the code as well for better understanding."
1,The issues are addressed thoroughly. But probablty the issue on staggered deadline needs to be handled carefully the solution might cause other code effects need to cover all the individuals involved
1,"The design incorporates all the functionality required.
Suggestion: Including screenshots or screen-mockups would make the document easier to understand."
1,"The project design is well presented and solves all issues. However, testing plan and project purpose are missing. You could have given at-least a basic high level overview of testing in the end, Overall good effort!"
1,"The design document is extremely well written. The project purpose is mentioned, although it looks similar to what is already mentioned in the Google design document. I would suggest the team to add their own understanding of the project, how this project is helpful to the system ? Why are these changes/project necessary ?
Additionally I would also suggest the team to add a test plan section to their documentation. Any bugs fixed need to be tested thoroughly for edge cases as well as core fucntionality."
1,Everything looks great as they have added the uml diagrams ad explained everything in detail. Test plan is missing which can be added as they are solving a lot of issues in this project.
1,"Following can be added. 
Project Introduction & Motivation
Description of Project"
1,"The team did a good job in explaining the problem statements for each issue and providing their proposed solutions.
The purpose of the project is clear from the document as is a composite of several independent issues.
The problem is that testing plan is missing from the project. I would suggest starting from the most basic test cases that check the functionality (e.g. one spec per issue) and then elaborating from there.
Moreover, while fixing some issues like #1008 and #1065 consists of a small modification to the existing code, there are other cases where the design decisions are not provided and it would be better for the team to include some justifications and possible discussions of design patterns.
The document extensively uses diagrams that depict application flows for each use case which is impressive."
1,"Yes, this is the best design I have reviewed. It has clearly explained the changes in steps. the formatting is great, and it's very well made with very good design details and objectives.
It also included the current scenario and a typical score table.
It should be great if there's an expected final outcome visualization as well."
1,"There is a webpage linked which is helpful, but I do not see any other visual aids. It would be better to have some screenshots to help the reader understand your project."
1,No diagrams included in the document. Adding some diagrams to explain what the system is and how the design will look like will be better.
1,There are quite a lot of commits meaning that the team could have grouped some of the changes together into one commit instead of commiting every small modification to make them more meaningful
1,The code quality is well written. Many of the functions are doing only one thing at a time. The only limitation I could observe is lack of comments in controller as well model.
1,"The code seems to be working good from the screencast.
My biggest concern was, if the link to deployment was given, it would have been easier to try the features.
Other than that, capybara test cases could have made it strong to go to the production server.
If they feature did work the way as it was shown in the screencast, it can be deployed to production."
1,"In my opinion Inquiries should belong to a user. One inquiry belongs to a user, and one user has many inquiries."
1,"I think this team did not correctly implement several database relationships. For instance, a House does not have many users, it has a single realtor (the realtor who posted it) and it might have many interested users (potential buyers), but that should have been via a through relationship. Another example is inquiries. An inquiry has one user for one house, not many users and many houses."
1,"Write up is good and self explanatory.
Test plan helped a lot in understanding how to test it.
As discussed in the earlier review, images could have been resized for better visibility. Was little difficult when one had to scroll along the page to view the entire image."
1,"Most of them are correct.
In inquiry, the mapping is wrong in my opinion. It says has_many :users, has_many :houses, inquiry belongs_to one house and one user who creates the inquiry."
1,"Yes, the team made commits regularly, but some commits whose name suggest changes to the code (not heroku deployment), were done after the deadline of 10th Oct.
If those changes were later reversed or not, cannot be ensured.
From the reviewer's perspective I would suggest not to add any changes at all after the deadline, as we shouldn't be bothered about looking at what change is done in each commit. Stick to the work you had as it would be graded appropriately by the instructors."
1,The code looks good but it has slightly long methods. The naming used also appears appropriate.
1,"No new test cases were added. The new code changes don't change the modify the existing code coverage.
The modifications were mostly on UI.
They could have added capybara testing."
1,"The logic in the code looks proper, still the code itself is hard to follow. Primarily because, a lot of functionality has been added in a method whose name suggests only partial functionality, and no comments have added anywhere.
Examples are-:
In applicatins_controller.rb, the methods get_realtor_nav_bar and get_hoousehunter_nav_bar make SQL queries and other functionalities.
In houses_controller.rb the show method also has a lot code that ideally should not belong in that method.
I would suggest to put such code in different methods, or name the method better. Do not shy away from creating 10 different methods if need be, it organises code much better and simpler to understand."
1,"I saw a lot of places were instance variables were used when the didn't need to be (ie using @var instead of just var in methods). I think naming seemed appropriate were I looked. This team made good use of helper functions and classes, though there were some rather large functions in those classes. I saw a lot of complicated views, which to indicates lack of separation of concerns. 
I would recommend being more diligent about the scope of variables and continue trying to push concerns/responsibilities to isolated classes and methods."
1,The team has done good manual testing but it would help to add few test in features to test the impact of the changes done in functionality of the project.
1,max_choosers name was not changed. As far as i understand it denotes the maximum number of slots and should be called max_slots. which is not changed. Apart from this code is good.
1,The write-up was good and clearly explains the issues faced and the code changed. It would have been much more clear if screenshots of git file changed were posted.
1,"The document straight away starts with the explanation of the project specifics without any background as to what was the whole purpose of doing this. Problem statement is very general, it could have been more specific as to what was the drawbacks of the existing implementation and how that can be resolved with the new changes. The doc also lacks a test plan. 
It is preferable for the doc to be written in expertiza wiki rather than the normal wiki."
1,"The code can definitely be deployed but once the 3 pending code climate issues(I believe the 3 are to be resolved by he mentor) and the Travis CI build have been rectified.
Suggestion: Rectify the Travis CI issues."
1,"The Travis CI build did not fail exactly but it did not pass either. It showed in progress. But when I clicked on the details, it showed that the test failed. 
Suggestion: Travis CI issue should have been rectified."
1,"No, there have been no new additions to the test cases since last round of review. The code coverage still remains the same as before, with an increase of 6.6%."
1,"The team has included a thorough testing plan but I couldn't find any commits to any of the rspec testing controllers. They could have added as per there test plan.
These tests could have been included
1) Login as Instructor4. Add a new assignment Assignment_Instructor4 under the course Course 617, Spring 2016.
2) Make student6400 as the participant of that assignment and logout.
using Capybara and Cucumber."
1,"Although I believe this project is ready to be merged into the branch, I would still like to make sure as to why their build is failing in Travis CI. Most likely it's not because of their own code, but as a suggestion the team should have also looked into this matter themselves, and explicitly stated somewhere in the wiki by getting clarification from the instructors."
1,"Unfortunately, the build failed in the second round. But, in my opinion this was not due to the team's mistake. The build failure says the two examples failed are in files ""assignment_spec.rb"" and ""assignment_participant_spec.rb"", both files which the team had no connection with. I could be wrong though.
As the build was passing and there tests were running in the first round, I am inclined to believe it was because of another team's incorrect code that this team pulled into their branch by mistake."
1,"It is pending while I am doing this review. When I click on it, it did not pass Travis CI, but it fails on tests on features, while this group is testing participant, it happened to our group as well, I assume it is not an issue with their code."
1,"Build is failing, they should solve that issue, then it is ready for production."
1,"A commit has been performed 4 days back , which isn't making any change to the code just the indentation, and since then build hasn't passed. You should check that out, it just an indentation issue i think. Format it using rubymine and push, it should work."
1,"An unnecessary commit has been performed because  of which build has failed, and i think it wasn't required as already code had 100% coverage. You should check that out, it just an indentation issue i think. Format it using rubymine and push, it should work.  A shorter video to explain the work has been added as well."
1,"The test plan is not adequate enough and a little bit ambiguous. For the checkbox part, there are many cases not included. For example, the checkbox is unchecked by default, in different cases, the checkbox will show or not. For the student side, 5 for each case is not clear enough and I cannot identify what the anticipated results for these cases should be."
1,All the tests have not been implemented. but the test plan has been described. Could have included more test cases to extensively test the system. Automated test could have been written.
1,"Manual test plan as of now.
Try to automate it if possible."
1,"The team has written steps that are required to test the system. However, they could improve this by adding test code that would test the basic functionality."
1,"The team has explained the manual testing process.
suggestion :
include how the ""Go"" functionality is actually tested in ruby .
Include edge cases for the testing functionality."
1,"Yes, the code is written really well."
1,"Yes, the  code seems well written and there was no issue with the naming or functions used. However, a few comments could be added to impersonating_as_admin."
1,"There's a test  plan. The test plan is deep and indeed tests the functionality.
It should be better if the test plan also includes another step between 4 and 5, in terms of how to make the step ""student can(or cannot) do the second review without the first one""."
1,"Team has not mentioned test cases that they are going to write.
Manual testing steps are mentioned.
Team should work on adding test cases, as manual test does not help to check  all the corners of the complex system well."
1,"The manual tests listed should adequately test the functionality, but information should be provided on automated testing."
1,The team has not used many diagrams to explain the changes made in the project. They have just explained using a simplified flowchart. No Use case or ER diagrams have been used to explain the changes made.
1,They had 2 diagrams. One for UI and one for the implementation. The implementation can me less words and more simple.
1,"The writeup does emphasize on how the issues are resolved, however lacks a reasoning as to why did they choose it. 
Suggestion:
It is hard to follow the code, as there is lack of comments. You can try to include meaningful comments for every function you have introduced. That will increase code readability"
1,"The flowchart included concisely explains the functionality they plan to add.
Suggestion: Add UML diagrams for Use case or sequence diagrams to explain their implementation design. This will make the design planned easier to follow."
1,"There's only one diagram, from the perspective of the user, in terms of how the functionality should be like. It does clearly describe the changes to be made to the system.
It should be better if there's another diagram, which explains the work flow, in terms of which files we need to do at each step, and what we need to do one step after another to implement the project."
1,"Team has added a flow diagram and system screenshots.
Team could added UML diagrams, so as to understand sequence of events or actors involved."
1,The authors have documented the steps they did to solve the issues in a clean manner. Although they haven't mentioned any particular design principles or design thinking that went on in solving the issues. They have explained all the functionalities of each file they have modified and stated why they have modified the particular file. One thing they could have added were class diagrams and dependency maps. Or some pictorial representation of the flow of each task which will help the reviewers and instructors to quickly catch up on their idea.
1,"The project is ready to be merged.
The source code is clearly structured and can be used for the future team to work on.
The project has 100% code coverage. 
In order to avoid potential problems of using AssignmentParticipant instance, participantSuper object is defined in factories.rb, which is an instance of Participant class.
The possible suggestions are to deconstruct #scores method and introduce 'context' constructs to enhance code documentation."
1,"Yes, the design is simple.
The design includes details in checking rounds: when it's bigger than or equal to 2, add the checkbox and otherwise do nothing.
However, I doubt if that's needed in design document. Since in the future if we need to do 3-round reviews, this 2 feature can be misleading."
1,The team has submitted a partial design and the part they have thought about is complete. The rest has not been thought through. Please consider the design for the logic necessary to show/hide the reviews for the students.
1,"The design lacked enough explanation about how will they deal with reviews when the box is  checked and unchecked. For the naming of the function and database, the name seems too long. It is better to make the name shorter and easy to understand."
1,"The design appears appropriate, but since it is shallow, it is hard to tell how sound it is. How will a user be prevented from requesting another review? Also, the naming seems to assume either one or two rounds. What about more than two rounds?"
1,"The authors have still only mentioned the UI side changes, i.e. adding a checkbox to control the functionality. They have not thought about the actual logic to limit the students from seeing the reviews. Please include this in the design as this completes the entire functionality."
1,"The authors gave enough explanations about the design for the UI parts. That is,  how will they design the UI and handle the problems related to UI, but they didn't give the design for how will they deal with the reviews differently when instructors check or uncheck the box. I cannot identify how can they check if the box is checked in the code, and how can they according to the status of the box to make sure the students can only update the previous reviews when the box is unchecked and students can require new reviews when the box is checked."
1,"Yes, it has the implementation plan of a checkbox, which allows the instructor to decide about review times. Since that is the only thing to be implemented, there's no more issues.
I think the diagram doesn't have very pretty look, it should be better if the screenshot can be smaller so that the fonts in the diagrams can be seen more clearly."
1,There are no visual aids given. Maybe some flow charts or screenshots can be added to help people understand the project.
1,"The design is clear at a high level but lacks detail. The report described what the project is, but how will this feature be implemented?"
1,It would be better to add some UML diagrams.
1,"Unfortunately there were no visual aids provided, even though they went through the plan in a good way but few diagrams would definitely help."
1,The flow diagram used is basically a pictorial representation of the problem statement and so it does not really add any more value. It would be really helpful if the authors could include a real flow diagram that shows the actual flow of events. The screenshots provided help us to understand what changes the authors are expecting in the UI.
1,"A flow chart is depicted in the documentation. However, other UML diagrams could have been represented to show the structure and the sequence of the project. The flow chart depicted is a little high level. The total capacity of the project could have been represented by more UML diagrams."
1,"The document contains a flow diagram that analyzes the system's requirements and expected flow.
However, it can certainly make use of other UML diagrams in the expected flow section to give more clarity about the requirements and the sequence of actions."
1,"No diagrams are present, would help reviewers better understand what is going on."
1,"Screenshots which were included was explanatory.
More figures such as logic flow, wireframes etc can be added for better understanding."
1,The diagrams is detailed and easy to understand. But it is a bit too long. The team can simplify it.
1,"The authors have included a flowchart which concisely explains the functionality that the authors are going to add. They have also included 2 screenshots of the UI, showing the end result in the 'after' image.
UML diagrams are not included. Please add, will give an understanding of how the implementation will be done."
1,"There's a flow chart about how the end result look like. But the flow chart only tells a user story. There's no detailed implementation plan in this flow chart.
3):  some diagrams are too high-level design and do not provide enough details. applies here."
1,"Team has added a diagram that explains the problem statement and its effects, very well.
Team could add UML diagrams to explain the application, changes, sequence of actions, state , actors involved."
1,Yes visual aid has been provided in the form of Flow charts and screen shots. UML could added.
1,The authors have talked about only the UI and not the underlying code. So it is difficult to assess the quality of the change. As far as the UI is concerned the authors have taken a right direction to place the checkbox. Providing further details about the proposed solution including the changes  needed in the controller code to support the UI change will help explain it.
1,The authors have added the methods in the right class. The code is refactored properly. Appropriate gems have been used. The new system does not increase the response time and is efficient. More effort could have been put in the documentation by providing more UML diagrams and also by designing a test plan.
1,"Code level details are not covered in the doc.
But the changes suggested follow the desired requirements."
1,"The team has not submitted code that should be added/implemented. 
Suggestion: the team can add code snippets in the documentation along with the file names in which the changes should be done."
1,The change is little and consists of only one html file. Shouldnt make the code smelly
1,They have included the initial design. It's suggested that they include more details about the design.
1,"No design has been yet proposed by the author, however the goal of the project has been well described. Most of the write-up is the same as mentioned in the Google doc.
Suggestion: Expand more on what changes need to be done in order to achieve the end result."
1,"I believe a lot more effort should be expeneded on the design. As being addressed above, there are a lot of questions that are not addressed at all in this document. The formatting is not nice either."
1,"There are no UML diagrams or screenshots.
Please include the same in the following submissions to make the design document stronger."
1,"Team can explain the algorithm they are going to follow or mention part of files they are going to make changes in.
As changes do not seem heavy , it should not increase system response time.
Team needs to put more efforts expended on the design and explain the efforts."
1,No visual aids are included. feel the team should include more visual aid to help the reader in understanding their problem and its implementation.
1,The authors have provided a minimal explanation of the changes to be made. They have mentioned about the UI changes and not discussed further. It would be good to include the underlying changes. The team has identified a view file under the potentially modified files. They have not explored the controller and other files that need to be modified in order to support this. A design document needs to holistically portray your design and so it will be great if such details could be included.
1,The changes are explained by the authors. The quality of the explanation can be improved. Authors could have explained the changes a little more elaborately. The explanation is a little high level.
1,"As stated above, it is difficult to understand the team's own solution to the given issue. The team could provide the paths to the files that they think should be changed. It would increase the readability of the documentation."
1,"The explanations were inadequate and could have been given more elaborately written.
The document just contains the details given in the user story document by professor.
More content can be added and the flow of logic can be added."
1,I think more effort should be expended on the design. The addition of MVC suggested in the solution is vaguely explained.
1,"They include the interface required. They should include more details about their design, like how to implement and what need to be changed."
1,"The authors have only mentioned about adding a checkbox field to the view. More changes will be required in order to enforce the deadlines on the students.
Suggestion: Add a section called Design Plan to the wiki and mention a rough idea of how you are going to approach the project."
1,"The changes being proposed here are not comprehensive. It just talks about adding an option ""allow students to join review later"" but it doesn't say how.
It also doesn't say whether it's a change in the administrator end or where.
Also, as being stated in the above question, is the underlying functionality already implemented, and there's just an UI change that remains to be done? If yes, where is the underlying functionality? In which file? How is it implemented? If not,  then the corresponding implementation is missing in this design document."
1,"Author does not explain the approach they are going to use. Team should add project purpose, project design to show case how they are going to tackle the issue."
1,"The proposed design looks fine for now, but more details are required in order to make a better judgement. So I think that more effort should be expended."
1,"There are no such design explanations on which I can improve or suggest on.
It would have been great if there were some more explanations."
1,"Since the document is mostly copy pasted from the problem statement, it covers what needs to be done. But it has not discussed about how it needs to be done. Adding the exact changes to be made makes it easier to understand the solution proposed."
1,"The team could explain the ""design""/solution in a more comprehensive way. The team has only pasted the description given in the google doc"
1,They include the interface required. They should include more details about how the functionality should be implemented.
1,"According to the project requirement https://docs.google.com/document/d/1Br9hm-SWIvl5ibWSfRVjmiYTQl5j27l8slWhv2iUCqQ/edit#heading=h.654oe3xw5p73 
The design has nearly copy pasted all the textual explanation from here, but there's a lot of details that are remained unexplained - is the underlying functionality already implemented, and there's just an UI change that remains to be done? If yes, where is the underlying functionality? In which file? How is it implemented? If not,  then the corresponding implementation is missing in this design document."
1,The design document looks incomplete with only the introduction and project purpose sections that are mostly copy pasted from the problem statement provided. The proposed design seems to be limited to just an image. Also please consider changing the title 'Do Some Changes' to 'Problem Statement' or something more appropriate.
1,"Problem statement and the expected flow are clearly explained.
I somehow feel that the name of this project and the requirements(problem statement) are not matching.
 
Other missing items:
Test plans
UML diagrams(except flow diagram).
Low-level design details."
1,"The project includes the problem statement. The team has described the problem statement in detail and has also provided visual aids. However, the team could have also included the way in which they implement these changes."
1,"The flowchart in the design doc explains their problem purpose clearly.
Few improvements could be :
The document didnt contain testing plan
Project purpose i.e, introduction can be more detailed"
1,"Yes, they include project purpose, project design. It would be better if they include the testing plan."
1,"I think the testing plan is missing, others are good."
1,"The project purpose is stated, but not extremely clearly. It seems that in the ""Introduction"" part, there's just copy-pasted messages from the question statement. The flowchart in the introduction part is good, but where should this checkbox be implemented? It seems that here it should only be implemented in the instructor/administrator end, instead of students end. But that's not clearly stated in the project purpose part.
The project design is also not very detailed. The title "" Do Some Changes"" doesn't seems to be very serious, but apart from that, the implementation details are also copy pasted from the online project requirements. the two picture of before and after illustration looks nice enough. It's good that the team has found some extra sources that would allow them to get this before and after picture. 
The testing plan is not stated at all..."
1,There is a lot of visual help which is good but project design could have been expanded upon more
1,The proposed changes sounds good to me. But as I mentioned screenshots help in a better understanding of the problem statement. Moreover a more detailed doc would have been better.
1,"More explanation regarding the solution would be helpful, explaining which files must be changed, etc."
1,"The authors could have listed out the issues followed by solutions with a diagram and some supporting screenshots.
This makes the review easier."
1,The team has suggested reasonable changes to address the problem statement but have not included any details. The team should elaborate on the implementation they plan to do.
1,"No, the design approach is very high-level over-view. An MVC design pattern is an obvious conclusion for incorporating any functionality in a web application, but more precise details of the design approach from the team can help the reader in a long way in gaining understanding."
1,"The design covers the functionalities but there seem to be no concrete solutions for the same.
Some more explanations was expected."
1,The team has discussed the solution which is required for fixing the issue but has not proposed any design for their approach. So the team should detail their implementation and design for the reader to know what they plan to implement.
1,"There is no problem statement mentioned in the design document. It directly dives into the implementation details. This does not help the reader is understanding the need for a project. There is no test plan, project purpose.
The team has tried to provide a design implementation details which is not very descriptive. More effort is needed to enable reader to understand the design better"
1,It would be better to include testing plan.
1,The design doc looks more or less complete given that it is just phase one of the project. I feel that some screenshots and a more detailed explanation would have been better.
1,Please submit your design plan and add some visual aids.
1,"Only the problem statement and proposed solution are present, it would be helpful to add the test plan asap."
1,"The design looks incomplete.
There are no diagrams or screenshots.
Could have added test plans as well."
1,The design document seems to be incomplete. The team have done a good job explaining their problem statement and have included their implementation in brief. If the team could build up on this and explain their implementation in more detail while adding a few diagrams to explain the work they plan to do would be great. Also the team have not mentioned any test cases they plan to implement.
1,"The authors have included a series of steps to perform the test and have provided screenshots, but do not cover other possibilities."
1,They wrote clear and adequate description and I can clearly understand what their project does.
1,"The writeup clearly explains the issues and the approach used to achieve the desired results.
Suggestion:
The authors should try to include the rspec test documentation, for the newly fixed issues."
1,"The wiki is well written and contains all required information regarding the project. The only scenario missing from the documentation is the scenario where the TA is assigned to a instructor , what will happen to the instructors impersonated students when the TA of the constructor login to the application. Apart from this , the team did a great work."
1,There aren't many visual aids used. It may be a good idea to do some mockups for this project.
1,Visual aids are missing entirely. No class diagrams are provided either. Tip: you could've provided simple charts or ER diagrams for the design
1,"There's no visual aids. 
I think other than a screenshot of a finalized result possible, a workflow diagram will also be useful the work design."
1,"There is an ""Assign grade"" link for everyone, but only ""Perform review"" for certain teams. 
But why doesn't ""Perform review"" appear for everyone? Or at least ""Update review"". (Not if a review has been submitted, at least until the next round starts.)  [This was confusing!  Do something that's clearer.]
 
Sol : The feature as understood from the past project is that 
Assign Grade is present for all teams. (Standardize the functionality)
Case 1 : No review performed yet -> Perform Review button
Case 2 : Review Started -> View Review button, Edit Review button 
Case 3 : Review Submitted, Deadline not crossed -> View Review button
Case 4 : Review Submitted, Deadline crossed -> Update Review button
 
Lets always have view review button once review has started, + change the update review name to edit (only available for instructors and TA’s) itself that should be clear i hope.
We will make changes in list_submissions.html.erb
 
Comments:
Case 3 and 4 buttons should be switched. If the deadline has been crossed, you should have the option to view the review. Otherwise, you should be able to edit the review."
1,"5), More effort should be expended on the design.
The solution is too high-end, abstract. Also, some screenshots being added would be a lot more helpful. And addressing the above issues will also increase the readability"
1,"The code is readable and no function is too long.
Suggestion:
The impersonating_as_admin? and impersonating_as_ta? function uses the same session variable, so you can try to declare it above these functions and reuse it to follow DRY principle"
1,"Writeup doesn't has a test plan but in the video they have tested a lot. Also please add audio as well in your video explaining what you are doing and why so that its easy for the user to understand, otherwise watching 23 minutes silent videos is just to much."
1,Write up doesnt include test plan. Good thing would be include the testing steps they have performed. Few screenshots would be helpful as well.
1,"Good, but lacks readability.
The code is directly copy-pasted in the approach section. You could have used the pseudo code with proper explanations.
The structure and formatting should be improved."
1,"The wiki is well written and contains all required information regarding the project. The screenshots can be included in the wiki and the code pasted in the documentation could be formatted. The team also need to inlcude the test plan section in the wiki. Apart from this , the team did a great work."
1,"Yes, the project is to do 2 things :
1. Stop teams from dropping assignments very late / close to deadline
2. Have different deadlines when assignments are done at different periods.
The wiki should be created on expertiza page and not on wikipedia site."
1,The information provided is good but the page is not organised and the code is confusing. Team should work on improving the format of content(the way they are representing info).
1,"The document lists all the problem and possible solutions, which is good. However, there could be more details to explain how to implement the solutions, for example, you can tell more about the changes will be made for the specific solution instead just listing the files need to be changed. Also, the testing plan should be added."
1,"none of the functions are too long
could find changes where DRY principle was violated
the code follows ruby convention and guidelines
Although the code is easy to follow , the team needs to add comments for the changes which is currently missing.
Good Job!"
1,The testing plan is not proper. Though the document is nicely presented it does not concentrate on all areas. I would suggest to systematically describe each step.
1,"Some functions have the same code deleted and added again which could've been avoided, like 
schema.rb line 105 & 110, lines 741-743 & 745-747 and more lines similarly in that file"
1,"The design doc is disorganized and difficult to follow. There are no sections for project purpose, project design, or project testing. Consider adding these sections to give order to the document. Also, red front against a white background can be an eye strain for some."
1,"All the names are intuitive and reasonable apart from ""drop_topic_deadline1"". The team need to change this variable name to something more precise other than that Good job following naming conventions!"
1,"The project purpose seems to be only a user story, that says what's the deficiencies of te corrent issues and a terse solution. I wonder if that's comprehensive enough. I would add some more details in terms of the purpose of each function being changed in a lower level. 
There' only a high-level solution , and which files to change  for the project design. They are not detailed enough. I would add some more plans in terms of how to make the change, when to do the change if the changes are inter-dependent.
There's no testing plans yet. But I think that should be stated."
1,A few comments could be included in code to make it more clear.
1,"The test plan is complete and covers all intended functionalities. They have also provided all necessary steps to test the functionality. Good documentation on test plan. As client-side changes using script is added, a latency test to verify system is not slow in responding to sorting can be included."
1,"The test plan is present. It consists of a set of functional tests described for each of the five views.
I would suggest elaborating on the technical side of tests, for example specifying which spec files will be modified or whether or not the project will utilize RSpec. Moreover, it would be better if the team provided a rationale for why it is sufficient to use only functional tests."
1,"The test plan has covered test cases for testing functionalities of sorting submissions table and review mappings per field. They can also include test plan for the edge cases of the system, like the code should not break when the submissions table is empty and show should probably display a flash message saying ""no entries to be sorted!"". In this way, try to add a few negative testing to improve your coverage.
This will make your code more rigid."
1,"I suggest the testing plan be improved. In place of giving steps on how a reviewer should test the project, the team should instead list how they wish to write tests for the functionality added.
The rspec could be something like expect(page).to have_content(sorted)"
1,"Yes, the team has made a very good testing plan, consisting of functional testing, which covers almost all of the use cases which have been added/modified. However, the author could have added code snippets of the same, instead of just discussing the proposed plan."
1,"The authors have included a UML diagram which explains a flow of the diagram
The document does not strike a balance in the use of visualization. It lacks at illustrating the changes using appropriate use-cases, mock-up screens to show the expected changes as opposed to the current scenario. The mock-up screen can include sorted values of the field whose headers you clicked upon.
Also, there is no need of other visualization aids such as class diagrams, as the modifications are limited to views."
1,"The flowchart added gives a good idea of the final outcome after implementation of the changes proposed.
Suggestion: A diagram explaining the plan of changes to be made will make the document easier to read."
1,"The screenshots of the expected result and the UML diagram are good,
But the screenshots can be smaller to make the page more user-friendly.
The UML diagram can be better if it's designed as a design plan diagram instead of a user diagram, which simply states how the reader is to approach this. Or it could be better if we have both."
1,"yes, the design is the simplest I could think about. But it doesn't include how to change the files. 
I think it can still be as simple and succinct if the modifications of files can be included.
On the other hand, the expected result seems to be too long. There's too many screenshots"
1,"The design document clearly specifies all the issues that are going to be addressed by this project. UI views are provided which help the reader to better understand the scope of the requirements. Moreover, the authors list the files that are going to be modified and the authors comprehensively describe how the jQuery tablesorter 2.0 library will be used for three types of sorting.
One minor improvement would be to highlight the parts associated with introduced changes that link html table with the library for better readability."
1,"The authors have explained about their changes neatly, including previous suggestions. They have added detailed description about tablesorter which they plan to implement. The tablesorter is used to sort data for multiple fields for a table, using multi-tbody sorting. They plan to use it in the grades and review_mapping views. They do not plan to implement in their drop-down, but display the sorted data itself on loading the page. 
The changes look more clear to me, as they have been able to implement the changes in the table view using multi-tbody sorting for submissions table.
I think that introduction to Expertiza is highly unnecessary and should be removed,"
1,"The authors have explained the changes to be made to the system, including screenshots of the tables, UML diagrams as well as all the files that will be modified.
Suggestion: Although all the details are explained well in the document, by writing the changes proposed to the files in bullet points or by using a diagram the document will be easier to read."
1,"Yes, the changes are well explained. There are a lot of pictures, snipped screen shots to help explain the changes to be made.
There's one issue that the screenshots are not very clear, since it's big. It would look better of the screenshots can be clearer."
1,"Proposed solution is correct, but as i have said in other comments, there should be a design present."
1,"There is a minor code climate error as mentioned above, similar code. An easy fix and you will be green with the climate check."
1,The travis test had failed and codeclimate shows indentation and other such minor errors. I think that the team just needs to work on the styling and following some Ruby guidelines and they are good to go.
1,"The overall purpose of the project, the need for mocks/stubs, and the scenarios of each test case are very well presented; however, there is little explanation about why certain tests were implemented in any particular fashion. It would be a nice addition to include a few of your test cases and explain your reasoning behind why/how you implemented that test case. Adding this would further clarify your design/testing plan choices and make for a fantastic read."
1,"All coding principles are followed.
//Add more comments."
1,"The code was well written and there was no issue with the naming or functions used. However, a few comments could be added to the current_team,new_team and team to make the code more readable."
1,"The code is written aptly and it does what it is supposed to do. However, code comments are missing."
1,The write up has most of the relevant information. The formatting could have been better. I would suggest the team to use a standard dimension for the screenshots they have added.
1,I did not understand why is it necessary to prohibit spaces in usernames. I believe the code could have been modified to work with spaces as well
1,"The how part is clear. As to the why part, thought they have clearly mentioned the the problem statement, i think a little bit more of an explanation could go into why is that actually a problem."
1,"The functions are not too long so the code doesn't have to be extracted into separate methods. More comments could have been added for easy understanding of the code. The code follows the Ruby style guide and the code looks refactored, statements ""unless"" keyword are written in a single line."
1,"The write up has been written well. There's obviously some additions possible to the write up. The code changes/additions have been shown, I would recommend description of why those changes/additions were made.
I would also suggest the team to standardize the size of their screenshots."
1,"Yes, I was able to understand the issue as well as the solution overall. But I couldn't understand why there is a need to append a team name to an assignment. It was just mentioned that it is done in other part of the code as well. Mentioning that would have given me a better idea."
1,The author's work is implemented well and is implemented as expected. Few edge cases can be written to test the code completely.
1,"Maybe add a class diagram, but newly added flowchart and database diagram make the design more clear."
1,"Yes, it seems like sound, however, the authors could add some principles and patterns into it."
1,"Yes, it seems very sound. They list what they are going to do in 4 fields."
1,"design looks clear, just need to add what files will be added, and what files will be modified to make the design more sound."
1,Documentation can be improved. Include more details about the controllers method team is planning to change/add.
1,"The team has provided screenshots to help understand the changes in the UI that need to be reflected. Moreover, the team has included proper steps in which every task is achieved."
1,"only screenshots of current web page, may need some diagram to show the design in the future."
1,There could be more visual aids to help reviewers get a better understanding of this project.
1,Need to include uml diagrams - try t include use case diagram to explain the flow of the solution and a class diagram to explain how you will be implementing the solution.
1,"There are ample screenshots of the UI to help the user understand the flow of the changes made. However, there aren't any UML diagrams that explain the use cases and the design of the newly added functionalities"
1,The test plan seems a little vague. Maybe the scenarios can be explained in a better way first and then given in bullets.
1,The team has not mentioned what method/s they are planning to change inside the controller.
1,"The authors have considered the requirements and accordingly designed their solutions. The proposed UI design looks very intuitive and the abstract understanding of the code seems to good. However, the implementation is required to say definitely if it makes the code smelly"
1,"The explanation is good, The images are very large on the screen and it is hard to spot the changes that you made, consider highlighting the changes to show them better."
1,i felt there was a need of adding more explanation. Add UML diagram so that it is easily understood
1,"The project purpose. design and test plan are all explicit and detailed. Just one suggestion that the structure can be more centralized. For example, the 2.3 and 3.3 may better be together, like Overview and Details, which I think may be more specific."
1,Could have added more explanation on the changes proposed by the team.
1,"The build seems to pass, but it would have been great if the test cases were explained better.
Maybe some screenshots or a video would have been easier to test."
1,"From the file diff in GitHub, it looks the code is in good shape. There were a few suggestions provided during round 1 review. If those could also be integrated, it would be better. The test cases are successfully running. But the functionality could not be tested due to lack for steps in the wiki."
1,"The code is functionally ready to be deployed in the production server, because it is sound and even passes the build of Travis CI. There are a few minor issues due to Cognitive Complexity of names of methods, lines of code and a few indentation errors. If they are fixed, the code is complete and will pass the build of codeclimate as well. The team has proceeded in the correct approach and there is no need for the project to be redone from scratch using a different approach."
1,"A better explanation on the test cases would have made sure that the code is ready.
I feel that some more tests need to be done before deploying the code."
1,"There has been some improvement in the content of the write-up, but not all suggestions have been incorporated. Adding more screenshots of the functionality, or a video of the project being explained will always be helpful."
1,"The write-up lacks screenshots/ relevant images/ screencast to explain the workflow of the project. This would increase the readability of the wikipage. Also, the team has added testplan and included description for the code presented in the wiki. These points were mentioned during the previous review which were picked up by the team. The team has done a good work in improving their writeup as compared to the previous version."
1,They should have included screenshots associated with the issue. it would help one understand the solution better
1,"The authors have added the screenshots from github which clearly shows the code change.
But since there are many changes, the explanation in the wiki is small.
A better way would have been to put the links to the git files where the changes are made and there could be more explanations instead. This would also reduce the size of the wiki."
1,"Works as intended. Could have elaborated a little more like a guidance in wiki. 
Was able to test the features. Works fine."
1,Everything is working
1,The system works as intended however the flow for system given in the wiki is quite confusing. The test cases were edited to cover all scenarios.
1,"Yes, the team has added test cases, the code for a couple of test cases are in the wiki in a separate section.
Again, it would have been better to explain the test cases a little more, may be using screenshots of successful test cases."
1,"The team has implemented proper functions and has used a proper naming convention. However, there is scope to add some comments. For ex: in the new method - get_feedback_assessments_for method which will return a feedback assessment, the team could have added some comments about the logic implemented. Apart from this, the code is concise and good coding and Ruby practices have been followed"
1,There is no change in the code in this round. The variable names and method names are intuitive. The code is well indented; some useful comments can be included to improve readability. The code is DRY.
1,"In the first round, which files were related to what issue was not mentioned. However, now they have edited the wiki to reflect the mentioned changes. Each file and its related functionality has been mentioned. Appreciated!"
1,"The test plan is completed. Just one suggestion that it can be more specific. For example, it may include some real test cases."
1,Test Plan too brief. Could add scenarios and description.
1,Even though few test cases have been provided I feel like it could have been more detailed with the steps involved in the testing.
1,"1) Document includes test plan.
2) However can include more test cases."
1,Several tests are listed and described. I would suggest adding more details for each test as there is some vagueness as to what each described action entails.
1,Yes the design includes a test plan in the end. This too is very abstract (about 5 lines total) and just states the use cases. Tip: use the 'it should' format or at least describe the simple manual testing that can be done.
1,Test plan is discussed in the write up. It could have been supported with some use-cases.
1,1) Create class diagram and UML diagram outlining the set of actions that the reviewer and the author can perform.
1,"They have a UML diagram which pretty much does it job. I am not in favor of the UI mockups they have put. They could have used any software for the same, which would have made it legible."
1,"The UI mockups are good. I'm not entirely sure that the UML diagram is effective, perhaps a better diagram style would work better."
1,The diagrams have been enlarged and are now visible. Good improvement. However I still feel that computer made mockups would have looked cleaner.
1,Diagram included in the implementation plan is confusing. A better way would have been to include a diagram to indicate the step by step flow.
1,"UI mockups and UML diagrams are descriptive. However, more information should be conveyed to how to solve the problem"
1,The design appears to be well made. However due to lack of more detail I am unable to judge it correctly. What changes need to be made in the files is not mentioned.
1,"It's a test project, so not applicable for production deployment. But the code can be merged as appropriate test for participant model. Any future teams can enhance the test with varied input scenarios."
1,"Yes, the test does covers 99% of the models variations. The team could have enhanced tests with varied inputs, such as for the handle method check. Even a more through test of the score method with different input data could have been done."
1,The authors have described the changes to be made. However these are very abstract and require some technical depth
1,There were few hand-made diagrams posted however I feel used of some other high-level UML diagrams and screenshots would have been better.
1,The problem statement could have been elaborated a bit more. One line doesnt seem enough here.
1,The document is well written Just that a UML diagram or something similar could have been included to make it clearer and easier for the reader to understand.
1,"Could have added UML diagrams, LoFi sketches and flowcharts."
1,"Good work on problem statement and implementation ideas. However, screenshots could have added. LoFi sketches and flowcharts missing."
1,"They used UI mockups to explain their implementation. Though, some UML diagrams like USE case would be preferred over this."
1,"The code is structured well and is straightforward to follow. Test blocks are succinct and contain one assertion per block.
The project has been greatly improved since the 1st round.
Naming and indentation issues have been fixed. Furthermore, significant work has been done for the code to be consistent with Code Climate.
One suggestion would be to elaborate on the #score method. Decomposition could be used to extract the common set up into a separate before(:each) block and test expectations using multiple 'it' statements as opposed to having everything asserted in one 'it' block."
1,"The hand drawn diagrams are good enough to explain the problem to others , next time they can update it with the actual page once its done."
1,The author has mentioned which files have to be changed but no mention has been made of how they are going to be changed. Could have expanded a bit more on that aspect
1,All good components of a design document are present. It would be nice to have the UI mockups without handwriting that may make it hard to read.
1,Would be good to include  high level overview of changes made in the files.
1,No uml diagrams present - can create a simple use case diagram to indicate the flow of the solution
1,"Good that you have used screenshots to explain the approach.
Include Use case and activity/flow diagrams also."
1,"The whole document is easy to understand and well-written.
Suggestion: It would be better to include what tools and technologies would be used in the project."
1,"Screenshot explains the functionality of project very well.It is really easier to understand how the end product will look like.
Suggestion: the team should include a flowchart depicting the flow of the functionality."
1,"This is one area where the authors could have improved. Even though there is a good amount of textual description and images, the authors could have added a snapshot of the code changes that they wanted to propose. This would make it clear as to the exact changes that you propose and further help answer this question."
1,"The design seems to be sound. I would like more details on the database of the Bacui projects seeing as most of us don't know what they look like given that most of us have worked on Expertiza projects. So, a short description of the different tables the project is going to interact with along with any and all modifications would really help understand IF there will be any possibility that the design would turn out to be non-DRY or smelly.I think the team is good on what gems are to be used."
1,I think their designs look complicated and there might be existing gems that can be simplified.
1,"The explanation is clear to follow but it could also include some more of the abstract design like UML diagrams, explanation of the use cases etc."
1,"The team has provided enough explanation about how they are going to work on this project. Overall quality of explanation is good. 
Suggestion: Include the purpose of implementing these functions/changes."
1,The authors have dine a good job of detailing the issues at hand and their proposed solution. UML diagrams like a flowchart could have been used to further clarify the working of the proposed design.
1,"Design document explains the entire project flow very well. The whole implementation plan is very well written which clearly explains how the team is planing to work on project. The idea of including screenshots which explains how the functionality will look like once all the implementation is done is what I liked the most.
Suggestion: Team should include test plan in the doc.The purpose of project should be explained more clearly. Overall, nice work!"
1,All the components are present in the wiki however more effort could have been made to make sure the formatting and overall structure follows a pattern. Some of the elements are haphazard and could have been redone. UI mockups are not clear. Good effort though!
1,"Unfortunately no visual aids are provided in the design. I would suggest providing the simplified UML diagram that does not necessarily capture all of the classes that interact with the ones that will be modified by the team, but the ones that the team finds will be most relevant to the reader."
1,The authors have not included any visual aid in this document. The wiki page of their previous project documentation has a flow chart that has the code flow that shows how the control flows from higher level interface- the specifications in the WebIDL to lower level physical renderer through the intermediate implementation of OffScreenCanvas on Rust and DOM.
1,Try to include use case diagram to indicate your flow and a class diagram of how you'll be implementing the solution.
1,Some more visual aids would better help the reviewers understand how the Offscreen canvas context would be different to the existing environment.
1,"No visual aids are present. Though the team have explained their work pretty well, the team should think about adding a few diagrams to better help in the understanding of the project."
1,"The document should expand on the design and make specific assertions about how the changes will be propagated. So far the idea behind the design is to utilize an existing code of HTMLCanvasContextRendering2D adding new functionality like blob API on top of that. One suggestion would be to elaborate on that and discuss how the new functionality will be merged with existing code, what patterns might be used to increase the efficacy and simplicity of the system."
1,"The functionalities that the authors plan to add seem logical as they plan to implement OffScreenCanvas as an efficient alternative to HTMLCanvas but with all the functionalities included.
 The authors have not discussed about the implementation of the proposed design yet, which I am expecting them to do in the next review.
The response time is expected to decrease with the incorporation of OffScreenCanvas because the rendering of the images in the canvas is done independently using web workers"
1,"As stated on previous comment, the design needs more explanation."
1,"The new design seems to violate the DRY principle. Copying an entire class and then editing it will likely cause problems as you will be using code you did not write and so will not understand as well as your own code. This is probably still a better design decision than writing the offscreen canvas from scratch, however, since it will take less time. Could you use delegation or extension to DRY out the implementation?"
1,"The relevant parts in the design doc include the listing of files that will be modified, description of OffscreenCanvasContextRendering2D and apis that need to be implemented for this class.
As stated, the team is planning to use the implementation of HTMLCanvasContextRendering2D. I would suggest to elaborate on how OffscreenCanvasContextRendering2D differs from HTMLCanvasContextRendering2D and provide a better feeling for the reader of how significant those differences are."
1,The authors have proposed changes in the OffscreenCanvasContextRendering2D.webidl by implementing it similar to HTMLCanvasContextRendering2D ; implement blob API and support webgl contexts as in WebGLRenderingContext. The explanations are quite convincing though a little more detail(including background specifications) would have made the documentation more cogent.
1,The design plan portion feels a bit lacking. I found myself wanting more detail about how and what they were going to copy between each implementation and the next. What's going to be filtered out? What's going to be added? I have no clue...
1,"You can mention that what are you going to do, inorder to acheive your goal. Like it is mentioned that ""As a part of the third project, we’ve already done with the implementation of OffscreenCanvas interface"" So how are you going to achieve the next implementation?"
1,"The document needs more details on the implementation of the OffscreenCanvasContextRendering2D, the support for WebGL contexts, and the Blob API. Also, what is a DOM and a Blob? Those terms should be defined in the design document in case any readers are unfamiliar with them."
1,"The design document covers a high level view of the required functionality. The concepts and motivations behind OffScreenCanvasContext2D are extensively discussed. Moreover, the document provides the files that are going to be changed by the team.
The main problem of this design is that there is no detailed explanation or examples of what the final expectations are. I would suggest giving more specific examples of how the proposed API should work and what may be the main challenges of the implementation."
1,"The document covers a number of important topics including the description of Servo, apis and concepts that are going to be used by the team in this project, problem statement, project build and proposed design.
However, the testing plan is not discussed. While the instances of testing is certainly mentioned in the document, e.g. ""specific functionalities could be tested by writing a custom html file and then running it the similar way."" and ""Finally, we’ll test our code by enabling the blob API."" the authors do not provide an extensive discussion of specifically what functionality is going to be tested.
I would suggest reducing the overall size of the initial sections which provide an overview of Servo project, Off Screen Canvas, Web workers and Web IDL. They introduce more verbosity to the document than necessary. Two or three descriptive sentences could be used instead. The reader could refer to a more detailed information through references.
Furthermore, the focus of the problem statement falls on the description of the OffscreenCanvas API making it somewhat redundant. It would be better to emphasize on flashing out the goal of the project and only later provide the reference to the technical details if necessary. Another suggestion would be for the team to identify and elaborate on the 'changes' that are going to be merged in servo."
1,The documentation states the purpose of the project as implementing OffScreenCanvas API for the Servo browser engine under the Problem Statement. It also includes the proposed design that specifies the flow of the project and the files that are interlinked. The testing plan has not been included in the current version of documentation. I expect that the team is working on it and will include it for the 2nd round after they start the implementation.
1,"No test plan, but the project purpose and design are decently well explored (especially if you look at the link to the first project page). I'd recommend pulling forward the diagrams and explanation to save your readers the effort of looking in another place."
1,"Controllers have a few test cases, models have none.
Some of the suggested test cases could be as follows-:
company_test.rb -> company should not be deleted if not owner of company (realtor should only be able to delete company if he created it)"
1,The team have done a good job explaining their problem statement and implementation. But the documentation does not include the testing plan. The team should write about the tests they plan to implement.
1,"Unfortunately the app has not been deployed on a cloud platform and neither is there any description in the readme file. I suggest to use heroku as your deployment platform. You may want to look into this video here = https://www.youtube.com/watch?v=5kVtmnZNC8w&feature=youtu.be
 
Also if you deploy in heroku, it does not support sqlite or mysql in production. Hence you will need to migrate your DB to postgres. Check out this link for help = https://devcenter.heroku.com/articles/sqlite3"
1,"Most of the tests passed. However, a small fraction of the tests have failed and the code needs to be modified to incorporate these changes"
1,"The code build passes the travis CI test and it has not  conflicts with the base branch. However, the team should resolve warnings."
1,"The code is written in a modular way but there are some errors as shown by the CI. If these are fixed, it can be merged with the main project"
1,I feel there are more number of test cases that need to be covered before deploying this in PROD.
1,Yes  I think with additional testing it can be deployed.
1,The writeup is good overall. But it would have been better if more code snippets were added along with explanation of why certain methods are obsolete.
1,"The writeup is clear and has illustrations to explain the flow. However, none of the code is added to the documentation. The project also only defines the test added but could add more details about the increase in coverage"
1,"I found the write up to be same.
There is more scope to improve it with more explanation and test cases, specially the links to the refactored codes could be added for the other teams to know."
1,"I feel that the project could cover more test cases which would have explained the functionality better.
The sql that has been mentioned, could have no results as well, so covering negative results would have been better."
1,The team has added tests and the coverage improved by a small percentage. More tests can be added to further improve coverage
1,"The team could have added more test cases as they have mentioned about refactoring the code.
The refactored code and the screenshots of the test cases would have been better to display in the wiki for future students."
1,"The code is more about refactoring which is mentioned in the wiki, but I do not see any of the code in which changes are made. Could have mentioned them in the wiki for better clarity."
1,It would be good if the functionality of the obsolete methods(that were removed during the refactoring) is mentioned; and also explain why they were obsolete.
1,Yes very well written. I would have given full marks if you would have added code snippet and screenshot of the before and after feature. Visually it would have been great to understand the changes quickly.
1,"The team has done great job by describing the approach and explaining same in detail by adding a pictorial representation of the pattern used. However, it would be more helpful if the team could add details about the names of the classes and the exact code changes done in the wiki page. As it would help anyone in future to understand what are the exact changes implemented.
In this way the comparing code with the original code in github can be avoided."
1,"Authors have converted test plan into an appropriate test case.
Suggestion:
 
The authors can improve the writeup if they elaborate more on the testing approach used for the newly added code."
1,"Since the project involved deletion of obsolete methods and SQL, it would be good to explicitly state in the test plan if there were any tests previously that used these methods/SQL. Also, if they are present they need to be modified."
1,Edge cases missing from the test case. Write more test cases with invalid input types. Example - give a string to an int type and raise an error accordingly.
1,"The test is added under the Test Added section and is well explained under the tabular form.
Could have produced a screenshot of the test, if it was a possibility to generate.
This helps the future teams to know what kind of test result to expect."
1,"Yes, the wiki does explain the functionalities well.
Could have been better to have more attributes in the subclasses in the diagram.
This could help the user know about the details of the strategy pattern used."
1,"No link to the application or a screencast of manual testing.
 
Suggestion:
You can try to add screenshots of the testing performed and attach it to the writeup"
1,"The features do work as per the mentioned functionalities.
There are some suggestions mentioned and would be good to include test cases for the same in future."
1,the code is well written but few more comments before every function could have made it easier to understand the code.
1,review_response_map - can be modularize. Extract the various finction and write new methods for each.
1,"Almost all variable and method names are well-defined.
Suggestion:
Try to refactor method 'render_report' in module ReportFormatterHelper by using hash instead of really long case when statements."
1,"The query is well mentioned but I would suggest the sql be mentioned in the below manner for code clarity.
Select ...
From table name
where condition;"
1,They discussed just 1 test case and did implement it. Some more corner cases can be thought of.
1,"The test is explained with the file used in the tabular form.
It would have been good to attach a screenshot of the test if possible."
1,The team has added test case for just one scenario. There is no test plan. It is advisable to add more test cases for all the methods in the sub classes to check if the existing functionality is not breaking.
1,"The UML diagram is good, but the diagram in the test plan is not very helpful; I'd suggest either another UML-ish diagram or just a bulleted list of the features from the Report Controller."
1,The doc is very well outlined but the team must have invested some amount in test cases. It would be really helpful to see how the new controller be tested and how the chosen pattern is able to help in the desired functionality.
1,"No, it does not since the approach is to have a new model with delegation I strongly recommend team to add test cases that ensure systems functionalities are working as it is"
1,The section is included by the content is empty. Simply listing steps in how you plan to test for correctness of your model additional would work here.
1,the team has included the diagrams related to current system analysis and the workflow.  A workflow explains the current design and its similarity with the existing flow used for topics biding. The team could have included some UI mock ups as well to show the views for better understanding.
1,The visuals are very helpful. More clear view of how delegation pattern is being used would have been appreciable.
1,"The UML diagrams are supposedly the best part of the writeup. Gives a very lucid and engaging representation of the underlying architecture if the system. Also, clearly depicts the understanding of the problem by the team."
1,Visualizations are great for helping to clarify system analysis and relations in this portion of the image. More images on the design and implementation would also be a great addition for further understanding.
1,I appreciate the thought of using Delegation pattern. More details on this would have been helpful. Also why was delegation pattern selected in particular?
1,"Yes, the design proposed by the author seem sound enough. However, the author has only given a high level view of the proposed design. The author should delve deeper into the concept more while describing the intended design."
1,The stated design seems to be appropriate. Following a close representation of the current project bidding structure would prove successful. It would have been beneficial to supply more details on how the design would be implemented and could help in the justification of the choices this team used.
1,A detailed explanation would have been better
1,"There is some explanation about the general idea of what needs to be added to implement the new functionality; however, there are several sections missing that give light to the details of implementation and how this is tested to ensure correctness. Adding a description of where and how this new model will be developed with the existing image would  be beneficial for a thorough understanding of the reader. This could also be achieved by rearranging the logic of the sections as sum sections elude to purpose and intent of implementation."
1,the team have explained the flow of models using data flow diagram and have explained the use case using the use case diagrams. some more designs regarding the approach of implementation can be added in the documentations such as sequence diagrams/class diagrams for new classes/modified classes.
1,"Could be better if you add the screens.
Only conventional flow of diagrams is present.
Adequate details."
1,"There is a good amount of Diagrams technicality in terms of the section of Workflow flow  and Models and thus we can say that it does slightly help get a sense of putting things into perspective. 
1. None. Both the diagrams seem important enough for the scope of the project and in conjunction with the intended functionalities.
2. The UML diagram is in line with the conventions and follows suite.
3. The diagrams are technically sound enough to define problem scenario."
1,"Though the author has not used UML diagram, but the author has used other forms of picrorial representation to convey what he meant to say. But, the team should definitely consider adding one or two i the future."
1,"As for the designs proposed by the authors it proves to be substantial since there is a good amount of Design aspect in their doc. 
Sure, they have defined an application flow, but that is all there is to it. 
1. Nothing about adding a method to any class has been suggested. Implementation section is left blank. 
2. The design hasn't been implemented to the depth to make it a code let alone make it smelly. 
3. Nothing mentioned about the design to make it complicated and the piece of code which they would delve into to ascertain of any pre-existing gems for simplification. 
4. This too is hard to reach a conclusion on since not enough details to answer it with certainty. 
5. Yes. Absolutely, a much more thorough investigation should be carried out and relevant previous work exploration with help solve the cause."
1,"As mentioned in the document, some of the proposed changes are not DRY, which I would like to see improved if possible."
1,Good explanation of the proposed changes. You may want to add it in a separate heading. Overall explanation quality is adequate.
1,"Changes are not proposed to a suitable extent as they have mostly elaborated on the problem statement. I say this because even though they have detailed diagrams and solutions in place, they have left important parts like tests and implementation empty.
It yet remains for them to implement them and explain in explicit details their action plan to arrive at the solution."
1,"Changes are not currently elaborated upon. There is a section labeled 'implementation"" that will house these details."
1,"It does list out all the functionality, but there seem to be no solutions for them.
An insight into the solutions to be implemented would be suggested."
1,"Testing plan is missing. Overall looks good. Can add snapshots.
Lists out all the functionalities
The project is complete and sound enough in its approach and the implementations."
1,There were no testcases and since they provided a screenshot of the desired work. I suppose it fulfills the requirement
1,"It seems you have all the needed sections(and then some!). You just need to rename them to project purpose, project design, and testing plan. For example, the section titled Testing should be renamed to Testing Plan."
1,"As mentioned earlier, they have not considered testing at all at this point and hence, we are assuming that they are to implement testing at a further point in the project. Of course, mentioning an approach to the testing framework and how they would be going about it would have helped."
1,"The wiki explains the problem statement well and proposes relevant solution . The team has done a great job on stating the design approach and has included diagrams for them. However, the team needs to add the testing plan for the project."
1,"Yes, they have explained why they did that way and it was clear.
They have compared and contrasted in each of their feature of ""Current Implementation"" and ""Solution"" which is a better way of showing what they implemented
One more suggestion would be, it would have been good if they showed the difference in their code snippets too for the current implementation vs Solution proposed."
1,Although the write up has all the details about how the work has been done and what solutions are proposed. There are no explanation about design principles.
1,"Yes, they surely have done a good job in mentioning the errors in the 1st part and the second part. But it is unclear why the 3rd fix is a problem or how they have combatted the 3rd fix in the first place. It just seems so that a screen shot has been put into place and they displayed a No Method Error popup. They have vaguely described the handling of the same, but doubts remain in the details or the changes in the code. In fact, no code screenshots have been put up for this case."
1,"The authors do a great job of explaining how they did their work, and but the why is sometimes not explained. That could be because it's largely self-explanatory."
1,"Unfortunately, no mention of the word ""test plan"" has even taken place in their whole doc. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository."
1,They have not created a wiki page but uploaded a doc file which explains the work they have done adequately
1,"Yes, the team has taken care of it by specially making a section of ""what it does"" as the introductory section of the doc so as to make us understand the goals of the project. They have even attached screenshots of the relevant changes they have in mind whilst explaining the error. Although, one questions the details in which they should have gone into explaining the errors and resolution. More mentioning of details is required."
1,The documentation is good but is missing the test plan and Instead of a word document write it on wiki.expertiza.ncsu.edu so its easier to search and refer.
1,"Although their documentation shows screenshots and their app is deployed on VCL, there was no testing plan/ how to test on application.
There was no screencast too. So it poses a difficulty on how to see.
But from the screenshots on the documentation, the features seem to work good."
1,"Yes, on manual testing, it leads to realization that the code has been suitably written as required by the functionalities and also the doc they have provided is the results that I get on following the procedure. Although, I would suggest that they look more into the test case 3 because how to go about testing it hasn't been explained by them."
1,"While some functionality works, the replace existing team functionality did not work when I tried using the examples in your write-up."
1,"The handle_duplicates function has a lot of white space and print statements left in it. It could've been chopped up into tiny sub-functions too, hypothetically."
1,"There are many places where ""puts"" statements are used where a logger statement should be used. There is also a set of if/else blocks that check to see if a variable is of a certain type, which could have been abstracted with an appropriate design pattern."
1,"New method names and variables are fine, however this team did not add a lot of new classes, methods, etc."
1,The Travis CI has passed.
1,"Yeah, the build has passed the Travis CI test and there were no conflicts found on the pull request."
1,"Nope, they have errors in their build too as indicated by Travis CI and this is the error message output by it "" Hey @ppvasude,
Something went wrong with the build.
TravisCI finished with status errored, which means the build failed because of something unrelated to the tests, such as a problem with a dependency or the build process itself.""
On checking the build logs I found that they errors in Bundle Install stage itself resulting from missing gems which they haven't resolved as a part of second submission."
1,"The code does its functionality, but it's not tested. 
My biggest concern would be to have the test cases written for it before the production version. 
It is a good starting place for a future team to pick up and just cover the test cases."
1,I think the project looks pretty close to be merge-ready and with a small amount of work on the coding styles and making sure all the PR checks pass the code can be deployed on the production server. It might however require some rigorous testing before getting merged.
1,"No, this code is not ready to be deployed since it fails in basic builds and just passes 5 out of 13 test cases which calls for reasonable concerns and traceback in the motivation of the teams approach. However, it does prove to be a good starting point for a future team to pick from where these people have left off."
1,"These fixes appear to be acceptable. Code Climate could be better, and debug code could be removed, but if the changes in the document are in the source, than I have no complaints."
1,Not ready to be deployed. Some changes needed along with addition of tests
1,"While the functionality is present, there are several debug statements in the code that need to be removed and tests need to be added."
1,Again wiki page is missing. They submitted a google doc for the same
1,"Writeup clearly explains what their use cases are and what solution they came up with.
There is a lack of background about it, how to test it from UI, test plan, test cases, DRY principle etc.
Their write up is not on wiki, which makes it difficult to download the file every time and check it.
Although it was pointed out during the first round, the team didn't change it , or they didn't update the wiki page which they created."
1,The write-up is very well written and documented. It is aided well with the the help of screenshots and proper labelling. The only small thing that I would like to suggest is the steps to reproduce or something similar so that the person not familiar with the expertiza can also reach to the desired place.
1,"Their writeup is still the same doc file they had uploaded in the first submission. Now, while it was a good progress in resolving some of their errors in their first submission, clearly it is insufficient to be considered adequate for the second submission seeing as no changes have been made to it."
1,"The code changes are very less, so not much to say about refactoring, DRY problems etc.
The code has ""put"" statements which are also pointed out by the code climate bot.Having put conditions is not a good coding style, the authors could have considered to remove the statements.
puts ""hi, im in import"" 
puts name.to_s
The authors could have debugged to see the flow of code, or remove them before committing."
1,"Overall, the code is very well-written and follows all the best coding practices. But what I feel is a few more comments could help in improving the readability of the code. Also, there were few console debug statements which were causing the code-climate checks to fails. These could be removed or logged into Rails log."
1,The code has been very well written and it follows all the coding practices. There could have been few more comments but other than that I don't see any other problem.
1,"Write-up includes everything the team has implemented. It clearly show the files which were involved to complete the project, background of the project and evrything. overall work done by the team is good but I feel that the test plan on the write-up page should be edited. The team should work on presenting their work to everyone in a good way."
1,"the team has made great improvement as compared to the last submission. The new code added has no bad names, long or complicated functions but there is lack of comments. the heading of the write-up pages explains what the test case is doing but there should be proper commenting done in the code too."
1,"Most are good, but the Test cases part just a combine of ""describe"" and ""it"" part of spec code. Could be replaced by a link of git."
1,"Yes good write up but would have like to see details on model. 
In test plan lines like "" two test cases for method "" are redundant. Can / should remove them"
1,"In the wiki, I really appreciated seeing the appropriate build statements next to the unit tests. It helped connect what each test was testing in my mind."
1,"No. I see there are some code was commented, which seems unnecessary, so just delete it."
1,Please add the test plan to the write-up.
1,"The writup includes the work done. However, there is no explanation about why that"
1,"The write up as well done. However, the write-up is missing the test plan."
1,Writeup is very clearly explained. Writeup clearly explains how they are doing their work but why team is following approach is not explained.
1,"Since it is a test rb file, there are not many variable need to be named. 
The ""it "" part at line 362 in the assignment_team_spec.rb file, ""get max num"" could be better if substitute with ""get maximum value"" or something like this, max num seems little bit wired."
1,Could be better if contain with more info about the test itself instead of the rb file they tested.
1,I would have liked to see more use of context in the tests and grouping of similar test methods in context.
1,"The submission is about adding tests to the project  and authors have done a great job of adding 92% code coverage. 
I would have liked to see more -ve test cases for example cases such as user with incorrect names. As of now the test cases only checks of the user name is present or not. How about the case where user name is such that it is not allowed. User class throws an exception or add method can. This could have been documented."
1,"The project is about adding tests to the a model. So this is okay but there is not sufficient background on the model itself. More details would be good for the uninitiated. 
Also they mention that the number of tests for the model were not sufficient. It would have been better if they would have quoted the code coverage numbers before and after."
1,"They added a few changes, could've listed more on Readme."
1,All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if.
1,"Project name could have been better.
Methods were kept small.
Comments were left out in some controllers/views.
If-else blocks weren't properly indented in some cases.
Hard-coded numbers were used for comparisons. A better way is to create enums representing different values(such as roles) and using those enums in code. This way, something like if role == 2 becomes if role == REALTOR and thus is more clear."
1,Comments and indentation at a couple of places can be update.
1,"I am honestly unsure how to rate this. Earlier the build was passing. Now Travis CI cumulatively says the build failed, but when you look at the build history, Job#6150.3 failed, but Job#6150.4 passed."
1,Build is failing probably because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
1,"No. This is not standards to add colors in the respective element. It becomes very hard to maintain or modify such changes in future. It would be better to move the style to a scss file and use a class-UI to make this change, which is clean and DRY"
1,"The code looks to be ready to be deployed on production, but would appreciate to have a few more tests run prior to it."
1,"The write up was well explained.
Test cases were with images of test cases in the UI.
The code could have a github screenshot or the link to the changed file for more clarity."
1,"The write up is short and to the point, it could have been formatted and arranged in a better way."
1,"Yes, the changes work as expected in the UI.
The test cases cover most of the scenarios.
Would have been good if there was some scope for negative test cases that could be explained."
1,The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand. Also the screenshots could be a little better.
1,"The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
(i) The writeup is well written and easy to read and well commented
(ii) It is adequately descriptive of the work done.
(iii) Explanation of reasons for the style of code and problem solving approach is lacking."
1,The writeup clearly explains the implementation details and why those changes were made. It is nicely articulated and leaves no ambiguity.
1,"Yes, the team has considered the two important and required test cases- 1) To check whether ""Assignments"" is not present in the Instructor view, and check the presence of ""Open Student View"" button in the flyout menu. Here, the team has also checked the precondition whether the user is viewing the correct page (tree_display/list) which is meant for the Instructor. 
2) To check the presence of ""Close Student View"" button for the instructor to return back to the default view and have the ""Assignment""  tab for students. 
Suggestion: The team could add a line to check whether the system returns back to the instructor page after clicking the ""Close Student View"" button. maybe include : ""expect(page).to have_current_path('/tree_display/list')"" ."
1,"""Switch to student view"" - But to which student?
Open and Close student view is handled on clicking it to switch the type of view.
Same changes (to delete session[:student_view]) need to be done on logout in auth_controller as well.I logged in as instructor6, clicked on ""Open Student View"" and logged out.
When I login again as instructor4, I must still see ""Open Student View"", but I see ""Close Student View"" while I'm not in the student view at all since I just logged in..."
1,"The features work correctly, as expected. The instructor login only has one ""Student View"" tab under the Manage menu. On clicking it the instructor is successfully redirected to the student view page which has the ""Close Student View"" button to redirect to the default view."
1,"The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality.
(i) The writeup is well written and easy to read. 
(ii) It is adequately descriptive of the work done. 
(iii) Explanation of reasons for the style of code and problem solving approach is lacking."
1,All the cases discussed in the Test Plan have been converted into automated tests.
1,"The team has implemented automated tests. There could be some addition to the test, which I have suggested above."
1,"Explains the testing functionality appropriately. As mentioned in Review one, technicalities are explained thoroughly but the functional knowledge required to understand what the test is doing and why it is doing what it does is missing. Along with mentioning what are the mappings and return values, proper explanation of what the test is written for will be more appropriate in a document."
1,"The writeup is excellent. Very carefully written, a lot of detailed explanation.
Some more background information about the functions can be more helpful, as well as syntax summation."
1,Write up is good but the explanation of plan of work could have included some points like the approach taken.
1,"I do not see any new commit after 5th November. In my opinion, some of the tests could be made more articulate in round 2."
1,"In documentation it mentions participant.rb model file is changed to for increasing code coverage. However the file is missing in the pull request generated. There is no mention about changes in the assignment_participant.rb file. But that is present in the pull request. It may be a name mismatch or some files are indeed missing. I pointed it out during the first review but changes are not incorporated currently.
The code overall looks good. Proper variable names are used. Commenting is required"
1,The motivation is not enough. It is a little bit simple and general. The team should add the introduction to the specific motivation for this project.
1,Need a bit of detailed explanation on 'why' and 'how'. Too many screenshots with little explanation in words.
1,"Yes, they surely have done a good job in mentioning the errors in the wiki doc. They have vaguely described the handling of the same, but doubts remain in the details or the changes in the code. Which means that a better job and a more technical description of how It is happening should be given so as to grasp a better understanding for the same."
1,Test plan documentation is missing currently. Plan will help to relate with the code and understand if things are tested appropriately and the response is as expected or not
1,There are not enough introductions about what the functionality of the class they will test and what it is used for. The team can introduce more about what expertiza is and what the role of the class will be test and its functions.
1,"The writeup has proper instructions but needs some improvements:
1. Explain the problem statement 
2. Explain 'why' you need the solution
3. Explain the steps you took.
The code snippets are added but could be improved by adding explanation of the tests. May be adding 1-2 lines can help."
1,"Yes, the team has taken care of it by specially making a section of what is the problem as the introductory section of the WIKI doc so as to make us understand the goals of the project. They have even attached code snaps of the relevant changes they have in mind whilst explaining the error. Although, one questions the details in which they should have gone into explaining the errors and resolution. More mentioning of details is required."
1,More details required regarding the functionality for which the test cases have been written.
1,The functionality has been written well. Though I do feel it would have been better if the test cases implemented had been explained in more detail as to what the do.
1,Including basic Understanding of the problem statement and work will help in manual testing.
1,"For each cases, it include too many things need to be test, it is better to separate them into different cases.
Also, the object used for this test seems not be put into the factory, it is better to make them into factory which is a good practice.
The use of context is not good enough."
1,"Please extract all ""let"" to avoid the repeat code."
1,"Some names are ambiguous, like pptn, I cannot know clearly what this name is for."
1,"Code follows standards but variable names can be better and more 'readable'. Another suggestion: declare ALL variables first then use those variables to call methods. When you add/declare variables in between method calls, it looks as though you 'forgot' to declare earlier and added them later. Just a thought !"
1,The tests have been added as per the test plan but some of them have not seemed to have passed. The team could have a look at the tests not passing and work on them.
1,The code has been merged in a good way and there have been no merge conflicts. The build did pass the Travis CI. The code climate test failed but those were small issues which can easily fixed by just revisiting the code.
1,"It is a testing project which aims at improving test coverage. So production deployment is not in question. However before merging the code to Master branch here are a few recommended changes.
1) Adding comments to improve readability and understanding for future use.
2) Avoid using comments like ""I swear this is the last one"". They do not explain anything about what you changed from your last commit and why. Proper professional comments are expected. All these comments should be refactored."
1,"I do believe the code could be deployed after a bit of refactoring is done as suggested by the code climate tests. But overall looking at only the functionality of the code, it is ready to be deployed"
1,"The description for the background, motivation and the deign is not very clear. The team can give more detailed introduction specific to this project."
1,The team has heeded to the advice given in the last round and explained their tests in a more detailed manner. I do feel that the write up is well written and covers almost all the important points of the project. But I do feel images showing their tests running successfully could be added to the results part of the writeup.
1,"The structure of codes is not very good, that is, for a ""it"" statement, there are two many things include in it to be tested. It is better to separate  the test cases clearly. Besides, the objects seem not store in factories properly."
1,"A huge improvement from Round 1. In round one not much code was submitted so this is a huge improvement. Keep it up.
I have a Suggestion: It is very important to have comments in the code which will help other readers understand your code or in this case understand what you have tested without having to look for any other documentation which explains it. (Code file should be self sufficient)"
1,"The unit tests affording 95% coverage is great, but the code climate and other build problems are a bit concerning. I think this could be pulled in with more attention from the developers."
1,"The coverage has increased from ~77% to ~94% which is impressive.
However, the previous issue was that #scores method of Participant was not called because the object that is being tested in this project is an instance of AssignmentParticipant class. This problem was handled by commenting out the #scores method of AssignmentParticipant so that Participant #scores method will be called instead. This breaks other parts of the code which depend on AssignmentParticipant's #scores implementation.
The solution to this problem is to either define a new Participant class instance in the factory or to define it in the test code itself."
1,The build did not pass Travis CI. The reason is because #scores method is commented out from the AssignmentParticipant class.
1,"The code consists of small methods that mostly test one thing. This results in high readability.
The team has made an extensive use of 'context' constructs which further enhance the code documentation.
Moreover, the team has improved the .sort_by_name method making it cleaner and easier to follow.
This was complemented by the fix of bad names that were present in the first round (e.g. stu1, p1 etc.).
One suggestion pertaining to the '#scores' block would be to use specific assertions of fields instead of testing the object via inspect method and comparing it to the string value."
1,"Authors could use empty? instead of checking unityId != ''. Another thing that the authors have taken care of ttml mails but what if the somone needs to non-html mails. 
attribute copy_of_all_emails does not look like a good name, it would be nice if they could rename it to email_copy_all or so this help in reader understand as well as in ide intellisense. 
Code coverage has decreased"
1,set_proposer is a setter but appears to be used as a getter.
1,"Comments in code are missing.
There are few lines that need to be removed but still exist, it would be nice to delete those eg #emails << assignment.instructor.email 
 Function length looks okay, most functions have len < 20 lines which is an acceptable number.
Since the code is implementing very specific issues over it has specific local changes. 
Other change are okay and ruby like"
1,The code is appropriate but additional comments would make the code much more readable
1,"Commented-out code should be removed (at least one example found in participant_spec.rb). Also, there are some indentation issues as well as other issues flagged by CodeClimate. Otherwise, the code seems to comply with the Ruby Style Guide and be fairly DRY."
1,Problem is well defined but the authors have listed 3 issues that need to be fixed but they have only provided 2 links in the problem statement. It will be nice if they can give the link to the third as well.
1,"The write-up is well written along with the screenshots attached for the code changes which helps in explaining the issues and changes made to solve those.  Just one suggestion, if you are explaining all the steps and redirection for some issues/changes please keep the content consistent for other issues/changes as well."
1,The background and problem statement are clear and concise. The description of the implementation is thorough but a little too detailed. It relies too much on the source code and not enough on figures and written explanation.
1,"Yes authors have an details about code changes that they have done and why they have done. I would have liked more emphasis on ""why"""
1,"More of what is done is explained. Also, steps to manually test the instance could have been included."
1,The 'why' part is missing for the code changes. What does each code line of change do? Maybe you'll can incorporate that.
1,"The writeup was fairly specific on how the solution was implemented, although more qualitative description should have replaced the source code dumps. The writeup barely explained why the improvements were needed, focusing on what was implemented."
1,No the build failure needs to be investigated. Some refactoring regarding the messaging should be done. instead of hard coding the mail it should be read from a config file.
1,A few changes to functions and their declaration have to be made to make the code production ready
1,"Write up is Okay, The test plan comes before solution / approach section . pls change the ordering. there is no reference section 
instead of putting screen shots of code it would be better if the authors had put code snippets"
1,"Writeup is decent. I felt that code should have been quoted rather than included pictures of as that would make it easier to modify.
The pngs weren't same size which appears to be negative that people  have commented on my work too."
1,"The write-up is very detailed as to what features have been implemented but lacks on explaining how they are implemented.
It can be improved by adding how the features have been implemented, why they chose this logic to implement the features."
1,"1) The write-up is comprehensive and clearly explained.
2) Should explain the test cases in more detail."
1,"The team added the test plan section but it was too short and did not explain all the test files created and/or modified. The implementation section could do without the many code dumps. Otherwise, the writeup was concise and effective."
1,"Was unable to test the work from UI , but the implementation looks okay. I would have liked some screen hots of mails and videos to be uploaded as references so that reviewers could look at them as well."
1,"Yes the team did add test cases but I am surprised on why the coverage numbers have fallen so much. This needs some investigation. 
I think good test cases were added as part of the work, i would have though liked to see more -ve test cases checking for the failure conditions"
1,"Code looks okay, changes suggested have not been implemented. I wanted to see more comments on ""why"" this is has been done, which is missing. 
Also strings checks for str != '' are still used and not .empty"
1,"The code was well written and looks dry. However, a few comments could be added to make the code more understandable."
1,"The code looks clean. Though I don't understand why you have used this line in the test for responses "" puts participant.response_maps"". I feel some of the code that isnt needed is commented out. Please remove this code as it was mentioned in the details. Naming and cnventions seem to be fine."
1,The test plan does not include details on preconditions or edge cases. I suggest the team to elaborate on Test Plan. Otherwise a good start.
1,"They have mentioned that they use ""factory"", but it hasn't been mentioned clearly how they use factories. It would be great if they can incorporate this in the Wiki."
1,"The Wiki is descriptive and covers the essentials of the project. In my opinion, I think the code for every test is not required. It is enough to explain the structure and code for one test, maybe and what each test is supposed to do for the rest of the tests. That should suffice."
1,A more through explanation of what each testcase does will be useful. Its documented well about what the testcase will return but not what it does. Mentioning that will be useful
1,The doc says participant.rb model is  changed. However that file is not currently committed. However assignment_participant model file is committed. Seems to be some mismatch at one of the places. Correcting it will help in understanding what work is done and how does it impact the functionality.
1,"The test plan could be more specific. For example ""Writing testing conditions for different functions"" doesn't indicate what strategies are being employed or what edge cases are being tested."
1,"Features implemented in this project work as intended. After running the code manually I am getting the same coverage as stated on the wiki page.
One problem is that the main object under test - participant is created using build method. factories.rb describes participant as an instance of AssignmentParticipant class.
There is a possibility that this is complicating test cases or will complicate them in the future.
The solution is to either define a new Participant class instance in the factory or to define it in the code itself."
1,"The code is concise and readable. It consists of mostly small methods that test one thing.
One exception is #.sort_by_name method where several assertions are made in one method. It would be better to use several 'it' statements and DRY out the code by utilizing before(:each) statement.
One further suggestion would be to shorten the code by using one array statements instead of individual expressions. For example replace:
stu1 = build(:student, name: ""Student1"")
stu2 = build(:student, name: ""Student2"")
 
stu3 = build(:student, name: ""Student3"")
with:
students = (0..2).map { |i| build(:student, name: ""Student#{i}"") }"
1,"Most of the naming is reasonable and follows standard Ruby practices. 
One problem is that code makes extensive use of variable names concatenated with numbers.
Example: allow(participant3).to receive(:topic).and_return(topic)
Here it is not clear what distinguishes participant3 from other participants and why it is special.
It would be better to avoid using contractions such as stu1 or p1 (.sort_by_name method, Line 130).
Furthermore, I would suggest using consistent indentation (for example .get_authorization method, Line 113)."
1,"Scenarios that are discussed in the wiki have comprehensive descriptions and justifications.
However, clearly a number of edge cases are not considered as the test coverage is ~77%.
 
I would suggest using mock objects which will both decouple tests from database and increase the overall coverage. 
For example mocking find_by method of TeamsUser would allow covering participant#team case:
allow(TeamsUser).to receive(:find_by).with(user: student).and_return(team)
 
Another minor issue is that wiki is missing some cases that are implemented in the code (#team, #fullname, #scores)."
1,"Authors describe the strategy they utilized for tackling the project and the detailed mechanics of each test case.
However, there is no mention of specific design decisions or patterns that were used in the implementation.
My suggestion is for the team to elaborate on technical decisions made for simplifying test cases for example the majority of mock objects is created at the beginning before every 'it' statement."
1,"Unfortunately, no tests were added. It would have been good if the team added test cases to check their UI changes."
1,No commit has been added since round 1. They should have fixed the build failure which is probably happening because they have pushed changes few extra changes in schema.rb which I don't think is required for this project.
1,"It was a simple UI color change, so not many categories are not applicable. the code can be DRY, by using the CSS file for styles. Also there is no need to add colors in bothand .  would suffice"
1,"The overall code quality is moderate. I would suggest the team to either use hexadecimal color codes or names, to ensure that the code remains consistent."
1,"Yes, the code change along with the screenshots does explain the ordeal, but the git screenshots and some more explanation would be well appreciated."
1,"The writeup clearly explain why the team did the work that they did. Good job on that.
The only thing I may have preffered to have as a reviwer is a detailed step by step instruction on how to view the changes made by the team in the app. This could be added in the wiki, or a short screencast could me made to help follow the steps."
1,"Team has used in-style tags to add CSS styling in HTML pages. They instead need to create an external CSS, define the styling there and use the class names in HTML tags. This provides styling maintainability throughout application."
1,"Project does not have test cases included, hence can not check further functionalities.
If team is not able to add test cases for exact change, team could add/mention test cases surrounding the change that lead to checking the changes in this merge."
1,"There is no separate test plan section, but the test functionality has been shown in the form of screenshots.
Could add it under the Testing header in the document so that the code and test would be separeated."
1,"The write up is well documented. There is a clear flow from the code change part to the screenshots of the implementation.
It would have been better if there was a screenshot of the code from git or a link to git so that the code changes would have been more defined as per the green and red colour.
Also, the code change could be explained more."
1,"The write up has not been formatted well, most of it consists of what can already be read from the OSS assignment specifications document. I would strongly suggest the team to include screenshots of their commits instead of using wiki code formatting."
1,"Writeup is written very neatly and in elaborated fashion with understandable images.
Team could have added Github Expertiza link and pull request link at the bottom of the wiki page.
Also references and credits."
1,The page is complete. Only thing which I mentioned is a good color combination is needed.
1,"I couldn't login to the deployed website since there were no credentials which I could use. Perhaps the wiki page should have included the credentials for logging into the deployed website. However, from the screenshots it seems that the functionality works."
1,"1. Code is simple and written efficiently without long functions, unnecessary looping or dead code.
2. Shown snippet itself is well modularized and no need to be written as separate methods
3. Code is well understandable.
4. Code does follow ruby style guide.
5. Code follows DRY principle."
1,"Code does follow the conventions.
Just that the comments could be better explained for the functionallity"
1,The color combination could be changed for buttons. Maybe for someone who has a difficulty while differentiating colors (me) faces a lot of problem.
1,The naming looks fine in html file. Although your pull request shows changes in schema.rb file which i don't think you have used any where or had to make changes int it. Probably is went through by default when you pushed your changes. You might want to revert that from the pull request. That way I think your build will also pass.
1,"There is a change in the colour code required, so there was not much of a naming convention to be followed here.
Dint find any instances in the attached code where name could be changed.
One instance of is_submitted could be changed to is_submitted?"
1,"Testing for the UI changes has not been done. Maybe they were not supposed to, but if they were, more documentation in the wiki would be helpful."
1,I could not see any mention of test cases in the wiki or github. Team could add/mention test cases surrounding the change that lead to checking the changes in this merge.
1,"UI is simple to follow. Enhancements mentioned below can simplify various tasks
1. Preferred contact method can be drop down with ""text, mail, phone"" options.
2. User role can be drop down with ""buyer and realtor""."
1,"The user interface is average. 
The good parts I found about UI are:
1. Error messages (while registering a new admin/house hunter/realtor/house/company) were helpful.
2. Front-end checks like mail and phone number size and type etc have been used properly.
3. Dropdown for companies while registering houses, for houses while submitting inquiruies etc are properly implemented and easy to use.
However, several very small changes would make the UI much better:
1. Allow a drop-down when signing up as roles
2. Add inquire a house or add a new house to interest list etc functionalituies at the top. If house list gets a few hundred rows long, user must scroll all the way down to access the functionalities.
3. Add message as to why login failed. Something as simple as ""Invalid credentials"" would suffice and let user know that the login is working but the password is incorrect."
1,Stress is given to MVC architecture. But proper comments in the code section can simplify the code understanding for other users.
1,"Everything seems good. You can move constants to a separate file and use them . For example where you are comparing ==""admin"" or ==""realtor"". You can either move them to a separate file or in database and use it."
1,"The models , views and controllers are well created. 

1)      You can seed data for the admin into your production environment. The command to do this on heroku is heroku run rails db:seed. You need to make changes in the db/seeds.rb file and add your admin credentials in the proper format in this file."
1,The write-up is pretty ambiguous and feels all cluttered up. Maybe elaborating on few lines and separating the one whole paragraph into bullet points under different headings would have made it more readable and clear.
1,Good description. I think with the use of headings and subcategories it will look good also need lot of conteent to mention the changes done
1,"The writeup gives a high level overview of the work done
Suggestion:
1. You can try to make the write-up more illustrative by discussing which refactoring principles were implemented in which files and how does it make a difference.
2. You can take help of code snippets to make it more understandable."
1,Even though the code has been refactored keeping in mind the coding standards but I think that there is still room for improvement in writing the test cases and the PR checks should be checked as well since they are failing. This is something that the next team could pickup and then the code could be ready to be deployed on the production server.
1,"The pull request still shows that the build fails. On observing the logs, there is only one build job which fails due to a ActionNotFound error for view_action method. This needs to be looked at."
1,"The code has been merged in a good way and there have been no merge conflicts so far which is commendable. However, the Travis CI was failing and the code climate check was failing too. This is something that the team must look into and make sure that the changes that they have made are consistent with the existing expertiza code."
1,"The authors have portrayed their work by adding many code snippets.
It is cumbersome to go through the entire code in the write-up.
A general approach towards refactoring principles used would have been impressive."
1,"The team has added screenshots on the submission page, which show that the UI is working as intended. 
However, it had been more clear had they made a screencast of the same."
1,The team has made sure to write the relevant test cases wherever possible. But the overall coverage has decreased. In my opinion the newly added test cases cover more or less the entire range of this project. But I think that they need to focus a bit more on the test casses.
1,The code is well written. It follows DRY principle. It would have been better if more comments were added.
1,"Most of the updated code is well written. Some functions could have been shortened. For example, in the set_display_type function, instead of writing a 'when' statement for each of the options, you could have stored them in a hashmap and set display type to that value if it exists in the hashmap."
1,The team needs to provide a list of sections including the test plan and unit test cases that would make it easy to refer to the pull request and the github code. They must also work on designing the wiki page making it easy to read and understand it.
1,"Not completely its lacking lot of informations, consider writing the code before and after the changes to explain the changes done"
1,"It was difficult at first to understand why they are doing what they are doing. I feel that the information is right there, it just needs better elaboration and description."
1,"The writeup states correctly the changes performed, but fails to provide a reasoning behind every change.
Suggestion:
You can include reasons behind choosing an approach, for atleast one refactoring code change"
1,The writeup should be written in a emore elaborative way clearly stating at the minimum - the problem statement; new implementation strategy; design principles; test plan and references.
1,The writeup does not have the Test Plan section. They need to include it by specifying the section that describes the pre conditions considered by the team while working on the refactor review on the different question types from the uiz feature.
1,"Unfortunately, no mention of the word ""test plan"" has even taken place in their whole Wiki page. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository."
1,The writeup can be improved to begin with a short description of the project backgound so that anyone reading the writeup can understand what the project is all about.
1,The code contributed does not follow the test rule in that the tests are made using create instead of build. The code functions do not implement much function and does not follow the Ruby style guide. The team should focus on getting the tests running by following the DRY principle.
1,"(1)Functions are still long, save choice and save quizes are the top two, consider increasing more internal methods"
1,"The functionalities relating to Questionnaire have been moved to Questionnaire from QuizQuestionnaire which is very helpful.
Suggestion:
1. You can try to create sub functions for code inside create and view, as they are really long functions"
1,"The variables, methods and class names used do not justify the features performed and do not implement the desired functionality expected. Also, the code added does not improve the coverage of the files. The team should look towards using appropriate names and provide desired code segments to get a high coverage."
1,The Test plan is not a part of the writeup. The team can improve upon this by following the general guidelines of writing the document. The test cases can be coherently designed following the Better Specs documentation. The team must have the test cases designed that span the required goals.
1,"The Travis CI test did not past. 
I did not find any test cases written.
Suggestion: Test cases should have been written as a part of the final deliverable."
1,"I do not think the code should be deployed. The test cases are not yet written and there are a few code climate issues. Due to the lack of test cases, the Travis CI build has also failed. 
Suggestion: Once they are resolved the code can be deployed. There is one remaining issue, but that could be done in the next iteration."
1,"I think that the team has done a great work for the future team to pick up. They can improve it by adding comments for newly defined functions.
Although, the pull request build has not passed, after fixing the conflicts, the new team can readily work ahead on the remaining issues."
1,"Two issues resolved seem like working pretty well and can be deployed in production.
Third unresolved issue is a good start for future team to pick up."
1,The write-up is well written and organised. Everything looks fine. The team should have mentioned about the approach taken to solve the mentioned problem statement which will make the implementation easier to understand.
1,"The writeup was well written and easy to understand. However, it would have been better if some steps accompanied the screenshots as to what was happening in each screenshot. That would have made the writeup even easier to understand."
1,The content is good and explanatory but the writing styles needs to be improved as there is inconsistency in the font size and font type.
1,"Write up is written well and it is understandable.
Images are not in proportion and not of same size and hence wiki page does not look steady.
Team can work on image size and image description and manual test plan in more detail."
1,It looks decent. The screenshots should be with the issue write up and not at the end
1,"The project was not deployed. The project should have been deployed.
However, the video that the team uploaded shows the 2 functionalities that they have implemented. And they work as intended.
Suggestion: One feature was not implemented (3rd issue) and should have been done as a part of the deliverable. And the project should have been deployed."
1,"The team did not add any test cases. 
The coverage did not increase as a result of that. 
Suggestion: Unit test cases should have been written as a part of the final deliverable."
1,"No additional commits were found considering one issue was still left to be implemented.
Suggestion: There should have been some commits present pertaining to test cases or at least the 3rd issue that was not implemented."
1,The code was already well-written . The team did a great work in following coding best practices. The team should have include code comments to make the code easier to understand.
1,Comments in the code would have been helpful to understand the flow.
1,"The writeup explains the problem statement well, but fails to explain the approach and just have pasted their code. It also fails to have a reasoning behind the approach they chose.
Suggestion:
1. The author can describe how they came up with an approach starting from analyzing the issue. This will remarkably improve the writeup.
2. The author can talk about atleast one more approach to fix the solution and explain why they chose a particular approach for implementation."
1,"Writeup is written well.
No design principle or pattern involved, But the approach taken is explained in detail, step by step.  
Team could add references and links."
1,What and how explained well but they explain the why behind their actions a bit more.
1,"I could not see any test plan.
Team could work on writing test plan and implementing the same for the issues resolved.
Also where team is failing to implement some functionality, as future scope, they can try design the solution and also test cases for the same,"
1,"The writeup is lucid enough to explain the details of the issue and how the system works after fixing it.
Suggestion:
1. The authors can add a section on testing, explaining about how the issue fix can be tested.
2. They can improve the readability by mentioning issue numbers (from document issued by the prof.) on the write-up. It will save time of the reader to go through the document and map which issue has been fixed."
1,"The wiki is well written and contains all required information for issue 1. The documentation for other issues still needs to be included. Apart from this , the team did a great work."
1,The writeup was written well enough to understand. Screenshots were also attached along with the steps making the documentation better. Can definitely understand what project does and how it is done.
1,"Writeup is written well. Understandable and clean explanation.
Team has explained the problem statement and issues well with good amount of pictures.
Team can improve on formatting."
1,"The Fixes Required part has been explained well with the cause of the issues.
But, more light could be shed on what the formative and summative rubrics are."
1,"After manual testing, issue 1 seems to be fixed and reflects the changes properly.
Nothing seems to be done to fix issues 2 and 3 of the problem statement.
Suggestion:
1. You can include any approach or design of functions to resolve remaining 2 issues in the writeup"
1,"The code is nicely written
3 More comments needed
5 Not DRY in one place (rubric array definition)
 
Suggestion:
 
1. Simply define a getRubricArray function to return the rubric array wherever required."
1,"The code is well written and very understandable
Newly defined function parameter name is self-explanatory
Suggestion:
1. Rubric Array can be declared outside the function, so as to follow DRY principle. 
2. Meaningful comments can be included for the function definition in tree_display.jsx, explaining what does the tree_display represent"
1,"Some checks fail in the build. But I feel that few checks are much intricate (one failed because of a score of 15.07/15) and can be neglected.
The TRAVIS CI Build error was faced by many teams too.
The namings are not unclear or ambiguous.
goto_controller('Questionnaires','3') goto_controller('Review','3')"
1,"Could not see test plan as well as automated test cases are not included
Team could work upon adding test cases to test the functionalities. That would make the issue resolution more robust."
1,"As its a test project, deployment to production may not be applicable. The code can be merged, but i would suggest few changes to DRY the code as the test seems slow, which is a scope for improvement."
1,"While the test coverage has increased to 100%, the team has made some changes to ""schema.rb"" file, this might cause a problem on other dependent modules. Hence, I feel it is risky to deploy it on production.
The project doesn't need to be started from scratch by the next team."
1,"The introduction to the scope of the project has been written neatly, but I feel the test plan should have been a little more elaborative, a short description of the tests would be nice to have."
1,"The wirteup is pretty good. It gives the test plan and all the test cases. Also, there is explanation of the test process and logic. Just one minor problem. 
The 29 tests provide 100% coverage of the lines in menu.rb. Before the project the coverage was only
It is an incomplete sentence."
1,"I had suggested changing the ambiguous or bad variable like temp, temp1. These changes have been incorporated. However comments missing. Adding these will improve the readability of the code and make it easy to refactor at a later stage as per requirements"
1,"The test plan should have come before the implementation details. I gave this suggestion in my previous review as well. Still, the documentation is well written overall. It's just a puzzling choice to put the test plan near the end."
1,The write up is good overall. I believe there could be more explanation or discussion into test cases not included in the design but otherwise a good wiki.
1,"Currently your team have 4 code climate issues that denote code redundancy as stated in the code comment above. Best just to bring those statements out to keep it as dry as possible. From what I can tell, none of the pull requests pass these requirements including my own teams so I am not sure what is the cause of this but I guess no one will be getting all the stars on this questions :)"
1,"The code is visually stunning. I am a great fan of the readibility. There are some instances of redundancy in the #controller_action / #site controller tests. Also in the #get_item/#get_menu. Would be easy to pull those out into a begin block. Otherwise, very lovely."
1,"The whole wiki page is complete and neat, while it might be easier to understand if they reorder the test plan with other parts of the page."
1,Their tests are very straight-forward and can be extended to test few edge cases
1,"1) No, they have modularized well.
2) No
3) They could have provided more comments on tests where they set nodes at few places.
4) They could have used factories more extensively, due to various mock data they might have needed to cover different inputs
5) Their code can be more DRY, as they seem to repeat instantiations in all places"
1,Rspec code looks good.Proper comments and good variable name usage are 2 things i will suggest to improve. Very good work overall.
1,"Does not apply much.But instead of using names like temp and temp 1, a more significant name which is self explanatory of its content will be useful."
1,"This doesn't apply here much as its just writing testcases. However some of the tests documented in Menu like Mean with role and without role are confusing. I had to look through the entire doc to figure out why is that written that way. It could be better to have comments as to why a particular test is written , what does it test and why is the expected output the way it is."
1,The pseudo-code test plan does a good job of explaining the functionality of the tests without being clogged up by implementation details. I do suggest putting it closer to the top of the wiki page though.
1,"There is no Test Plan section at this time. However, the authors did include some discussion of edge cases and the fact that the initialize function required testing of known success case and potential failure. I think that this is sufficient without the inclusion of a Test Plan section. I would suggest that since this rubric calls for the section to just rearrange the content of your current page. Also, include the additional edge cases that you have already tested for in the other functions possibly with some specific examples. This will allow for a more thorough Test Plan section."
1,"The testing of initialize is very well described with descriptions of how and why the tests were written in that particular fashion. However, all other tests are not discussed. When looking at the github it seems that there were many more tests that were not elaborated upon. The test descriptions were included at the bottom of the page but without explanation of implementation or purpose. It would be helpful to include more of the test cases. If anything, it would be a good idea to discuss them without the code inclusion like that of initialize because that section of the wiki is very well presented."
1,the realtor and house hunter controllers work as desired in most cases though there are some cases which need to be addressed. There is a need to validate the real estate creation form.
1,"Yes, it does explain but could have added more details to make it clear."
1,"http://152.46.18.195:8080
  is not working.
Also, the video is not running, Please upload in youtube."
1,"You could have made the empty method end on one line.
I think _args could be named args."
1,"Function, variable names are ok but there were ruby coding style issues like not using elsif blocks, not keeping code concise and not following ruby syntax. 
Scripts for converting non UTF-8 files is a good approach."
1,"Please make sure code like puts X is avoided. Remove them and commit the code again.
Builds are failing. See the Travis CI build details and code climate errors and fix them"
1,"The test plan section is really well written. However, pre-conditions, edge cases are not very well discussed and talked about.
I would suggest the team to add these into the wiki as well."
1,"Under 'tested methods' they have explained everything really nicely. The video is just to long, 22 minutes. You have have made it short."
1,The code is mostly clear and easy to follow. Test blocks are succinct and contain one assertion per block. One exception is the #score method. It could be improved by decomposition. The code for set up could be extracted into a separate before(:each) block and multiple 'it' statements could be used for testing expectations.
1,"Most of the source code is following standard Ruby practices. However, some cases could be improved.
There is a number of variable names that are concatenated with numbers for example user1, user2 etc.
While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. Moreover, indentation needs to be fixed to improve code readability."
1,"The authors mostly focus on how they did what they did, i.e. inner workings of each test suite.
Little to no discussion is provided on the overall decisions pertaining to design principles and patterns that have been utilized in this project.
For example, there are no instances of before(:each) blocks in the source code. This decision could be discussed and clarified in the wiki page."
1,yes all the test written passes. They could have written a test to check if self[:handle] is returned if no nil parameter is sent
1,"1) No all functions are reasonably long if not too short.
2) No all methods seem about right
3) no but the team could have provided some comments in the score test function, as multiple expects are included
4) The code follows ruby guidelines and they used factories efficiently
5) Yes the code is DRY, they have used after each method to achieve it"
1,The git link to the code repository is not provided.
1,"The given source code is ready for deployment. The object under test is fully covered and all of the test cases are implemented correctly. The build successfully passes Travis CI.
The future team will have no problems in picking up from here.
However, there is a room for further improvement when it comes to simplifying several test cases, especially the '.final_versions_from_reviewer' block. Moreover, 'xit' blocks need to be removed because the final version should not contain any tests that are in the pending state."
1,"Most of them are good, but some edge cases should be considered."
1,"The team has improved the writeup since the 1st round. The 1st round version consisted of the copied code from review_response_map.rb and review_response_map_spec.rb files.
This version clearly defines each test case and in some instances elaborates on the inner workings of the blocks for example "".import"" Method discussion.
However, design principles and patterns that were used in this project are still missing from the writeup. 
One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite."
1,"The writeup has  covered nearly everything we need. all the function details are in the writeup, as welll as each function.
However, I think there's too much code and not enough textual explanation."
1,"The test coverage on the diff in this pull request is 100.0% (50% is the threshold).
This pull request will bring the total coverage in the repository to 28.7% (-19.0% change). ---- seems like the coverage was reduced. Need to add some test cases to increase the coverage.
The above reason is why I have given 4. But I would definitely consider this as well ---- 

Overall coverage increased (+11.0%) to 47.72%"
1,"The command to run the test cases is given in the wiki.
Better thing would have been to provide the screenshots of the test cases and git links to the code to make the wiki more concise and well explained."
1,"The number of commits that are made after the 1st round is impressive.
The team has made a significant progress during the 2nd round, however I would suggest using more descriptive names for the commits so that it becomes easier for the reader to refer to them in the future."
1,"The source code is mostly written in a coherent way and is straightforward to follow. 
The 'context' blocks are extensively used which increases the project documentation.
The commented chunks of code blocks that were present in the 1st round are mostly removed. There are still a few instances left and I would suggest to remove them because they reduce the overall readability.
I would also suggest to decompose the 'it' block inside the '.final_versions_from_reviewer' by moving the common setup to a before(:each) block and spreading the assertions across several 'it' statements. 
Another improvement would be to remove the 'xit' code blocks because they only increase the clutter and do not add any value to the code. Adding one comment explaining why the blocks are no longer necessary would do the job."
1,"The code is written very well. There's some minor issues (sometimes there's duplicate ""allow""s. But actually in the same ""describe""  just one ""allow is enough.
On the other hand, there's no bad name, no hard-to-understand functions. Comments can be added just a little bit more to help people understand.
Some comments are not supposed to be there (such as discarded codes)"
1,"The wiki does not include any discussions about design principles or patterns that were used in the project. 
One thing that stands out in the code is that every mock object is defined at the start of the file. The team could provide a rationale for this decision and why it is superior to for example using different mocks for each separate test suite."
1,"All the functionalities are listed and code also attached for the same.
But, if the code changes were highlighted in color as in git, then its better comparable."
1,"The Test Plan is not defined formally in the wiki. Instead the reader has to reason about the provided code itself. Given test suite covers every method of the object under test. ~70% Coverage is achieved.
It would be better for the team to define the test plan and decouple it from the actual code. This could be done by firstly stating all the 'describe' constructs, methods that they are testing and secondly, elaborating by listing their descriptions."
1,"As this rubric calls for the need of a section - Test Plan, I suggest adding it and including the work done in that section along with why a particular test has been written."
1,"The wiki defines the primary goal of the project but it does not contain a discussion about the plan or strategy that is utilized to solve the problem. Raw code is copied from review_response_map.rb and review_response_map_spec.rb files, however this does not give the reader any useful information. 
I would suggest replacing the review_response_map.rb code with a short description of what the team needed to understand about the given code in order to write the test suite. Furthermore, the team can provide a listing of higher level method descriptions from review_response_map_spec.rb, what are the expectations and which mock objects are being used to achieve the result.
One minor improvement would be removing parts like Expertiza description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018/E1850._Write_unit_tests_for_review_response_map.rb#Background) because it is redundant in this context."
1,"Its a good write up, additionally you could try to explain method and test rather than including all the test cases"
1,"The wiki looks too long with a lot of code.
It does have all the code and test cases, but its better to have git links to each code and more explanation of the code used above it in the wiki.
This will help the readers to compare the changes in the code with the explanation parallelly."
1,"Code is nicely written and runs well. However, more edge cases should be included. For example, each function should be tested for a known success case and an edge case or potential failure."
1,"The source code is mostly following standard Ruby practices, but there is a room for improvement.
Firstly, the source contains large chunks of code blocks that are commented out. I would suggest removing those chunks as they reduce the overall readability. Given chunks can always be retrieved via commit history.
Secondly, some application level objects like Answer or Criterion are used to create corresponding instances as opposed to mocks. It would be better if the authors either used mocks or provided the reasoning for this decision."
1,"The code does follow all the standards and steps to cover all the test cases.
Could include some more comments to make the code self explanatory."
1,"There are some instances of variable names that are concatenated with numbers, for example answer2, questionnaire2 etc.
While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required. For example team could be used instead of team1 because that is the only Team instance variable in the source code."
1,"some improvements are required to deployed the code onto the production server. The code should included proper commenting so that if the future team picks up from this project, they could know what exactly the code is doing."
1,"The write was good and well-written. However, it would have been better if some screenshots were also present in the writeup. May be juxtaposing the screenshots of 'before and after' of fixing the issues. That would have made the write-up easier to understand."
1,The code seems to be fine but due to lack of comments a little hard to understand. It would have been better if there were some comments in get_due_date_data and addQuestionnaireTableRow.
1,"Yes, the team made commits  days ago, but then it seems that they didn't follow-up with the feedback they received on the pull request, as their were 7 issues, though of minor severity, which required fixing, and then there were no commits after that."
1,"The team did not attach the link for the github repo along with the other files submitted. This makes it difficult to comment upon the commits made. However, from the video link it can be seen that the test cases have improved to give a full path coverage."
1,"Code quality was not upto the mark. Firstly, there were 3 separate table for admins, realtors and househunter, which caused a lot of redundancy inside the application, as well as for the user using the product. Secondly, the lack of proper documentation made it very difficult to traverse through the code."
1,"Yes, the code was extremely clean and readable. The naming represented the task( such as: remove_from_interest_list, show_potential_buyers etc ) of the method and no extra load was carried by that method, except for the action assigned to the method. 
No methods were longer than necessary and no unnecessary nesting was present.
Though not major, a suggestion for the team is to avoid using pronouns or subjective references such as my_interest_list and houses_posted_by_me for method naming. Also, as methods are referred to as actions, naming should reflect an action, so add show in front of naming such as houses_posted_by_company"
1,The write up has some great information and snip its of code. It would have been a great addition to have included more discussion on the overall design of your test cases. Overall a nice wiki.
1,"This is where the project lacks the mos. The write-up isn't very informative, specially for an outsider. It states the points very shortly, without going into much depth. Also, the writeup bombards the user with lots of un-relevant information and pieces of code, which make it feel very long, although lacking significant content. The writeup could have been more detailed, and could have omitted the unnecessary parts, like dumping of code, and not explaining what it does."
1,The code is good because it covers the scenarios. But one thing that prevents the 5-star is that they do not have enough  commenting and seems to be not that detailed and careful in terms of the explanation.
1,"It is very difficult to recommend merging this code. Although it builds and appears to function correctly, it is not properly documented. It is difficult to tell how the code works and whether test cases introduced actually function as they intend."
1,It can be merged after fixing the code climate which has 7 issues(needs to follow the coding standards )and need to work upon the overall decreased code coverage.
1,Great job with your pull request and passing the Travis CI build. There are several code climate failures that could have been addressed many to deal with incorrect formatting and extra parenthesis or braces. Simple fixes so great job!
1,"Yes, the code did pass Travis CI successfully, but as mentioned earlier, the code did fail on 7 grounds, of low severity. This should have been fixed by the team, as the issues were very small, and required just minimal follow-up."
1,"For each method, there should be multiple test cases, but they put all tests for a method together wrap by a single it '.....' do, they should consider to add more it '......' do, to separate each test case, so the reader know what are they testing."
1,"The code is difficult to understand. There are cases where factories are used and then later replaced by mocks in the individual test cases. The code also does not appear to be DRY, as several of the mocks appear redundant in the context of the plethora of factories built."
1,"The writeup lists the task to be performed under the Work to be Done section. It enlists the criteria required to be achieved as part of the project submission. The team can adopt a workflow that can give details about how the team managed to reach the current implementation such as understanding the files involved, steps taken for setting the expertiza environment etc."
1,"Little explanation for the code is given. The only case in which code is explained comes in the section titled Test Plan under the subsection Mock Instance. Here, it is mentioned that the project uses mocks to aid in testing functionality. However, the code example is actually of factories, a different but related concept. It is unclear if this is a typo or a misunderstanding because in later code snippets mocks do appear."
1,This section of the wiki is currently missing. When you write this section be sure to state why you tested certain cases in a particular fashion accompanied with code examples so that the reader can clearly see what was done.
1,The writeup does not include the Test Plan section. It is suggested that the team add the section and include a number of different aspects such as specifying the edge cases and preconditions considered while working on the test cases.
1,"There is a section titled Test Plan. However, it does not seem to be a plan or give an outline for the development of the code. Instead it describes what the methods do, but shows the testing code for the method. This is confusing as no explanations are given for the coding design."
1,"The login / signup module seems to be well tested of all the other models and controllers in the program. But this module has a drawback. It deals with three tables, the realtors, the househunters and the admin. Due to this kind of segmentation, there is a repetition of data i the database, if any user would like to signup as both. Also, it would make it difficult to handle complexity as the application grows. According to me, its better to atleast cascade the tables of realtors and house hunters into one. 
The other functionalities are not wholly implemented, only the CRUD operations related to those are implemented, hence not much could be reviewed about testing."
1,There is not a specific Test Plan section in the wiki. There is a Work to be Done section that discusses the work that should be completed for project success. I would suggest rearranging or rename this section and continue to describe your plan of attack for testing.
1,The wiki document for the project does not provide enough details about the project and the task performed by the team. It contains of only a rough overview of the project at this stage. It does not reveal much about the functionality of the program.
1,The Write Up can be improved by explaining all the Methods which are tested
1,"The writeup is sufficient in itself, but not as exhaustive or easy to understand from the perspective if an outsider. The author could have elaborated more on the problem statement, and how it related with expertiza. Also, instead of directly jumping to the implementation, the author could have explained a little bit more about why and what was the approach taken by the author."
1,"I believe the wiki is not complete. However, the content that is included so far does aid in the explanation of the project purpose. More elaboration and completion of additional sections such as the testing design and implementation of tests will help to fully clarify the project purpose to the reader."
1,I could see only one person's commits. Each team member needs to contribute to Git.
1,The code written by the team includes the basic functionality needed to run the test cases. Some improvements might include keeping a function short like diving the import function into multiple contexts or reducing reduntant code by using the mock built.
1,"The code seems to set up a large list of factories only to then in many cases make these redundant by creating mocks for each test case. It is unclear what the code is trying to do and many of the test cases are large with many mocks with stubbed methods.
It would be helpful if explanation for the code was given. When using factories it is generally unnecessary to stub the all the methods of these factories as they are in fact actual instances of the class.
The code not very DRY. In many the cases the mocks and stubbed methods could be moved to a before_all or before_each block."
1,"Except the lack of comments in the code, the code seems to be perfectly fine. Could be improved in that scenario."
1,"As mentioned in the above comment, Add these describe and context statements to further comment on the purpose of your test cases. This makes it easier to understand the why the test is there, I also find that it helps to clarify to the developer that the test is necessary."
1,The functionality added to the pull request is reaonable and makes use of appropriate keywords. It could be improved by giving names according to convention like feed_ back_ review_response_map could just be feed_back as jt is part of the review response map model file.
1,"I cannot appraise this because I do not believe they did their development in the linked repo. There is only one commit, where all the functionality was added. I am inclined to say the team was not actively developing over the project period."
1,The team has not included a Test plan that models their tasks for running the test cases. It should list the overall procedure adopted by the team from scratch to getting the tests running.
1,"The code itself appears to be very clean. The lack of scaffolding (or the stripped down scaffolding that it presents) means there's a lot less dead code in the files. All the indentation and variable names appear to follow convention as well.
This cleanliness, on further inspection, appear to stem from the fact that the application frequently does not support needed functionality. The code that's there is clean though."
1,Many appropriate relationships are implemented. (a) companies(1) to houses(n) (b) house(1) to photo(1) and (c) house(1) to possible buyers(n) . I believe there should also be an association with how there a realtor can only belong to one company. This will ensure many necessary functional dependencies are in place for the required application flow. Keep the ones you have and continue to add missing associations as you go through the requirements check.
1,"The test scripts have been written, however the scripts could have been written in a more elaborate way to include all the test cases and not just the high level tests. For example, the system accepts an Invalid phone number which is less than 10 digits of length. All these test cases could have been written and tested"
1,From the Code DB Design looks fine. They have handled most of the relationships properly. Although I believe having different tables for admins/realtors/hunters/users/roles and role maps is un-necessary and just increases the complexity of the system.
1,"The belongs_to and has_many conditions have been set by the team on the model.rb files. But there are no foreign indexes on schema.db file. I would advise using; Model foreignModel_id:dataType:index with scaffold generate to add a foreign key and in case of devise generated tables I suggest creating a foreign key with a new migration. Here's a stackoverflow link that shows how to do that, https://stackoverflow.com/questions/16257116/adding-foreign-key-to-a-rails-model"
1,"Though the commits started late in the project's life, there were commits frequently and also after round 1. The commit messages could have been a little more descriptive to fully comprehend the commit changes."
1,Changes were committed only at the last moment at once. Please commit the changes as soon as development is complete and the code is tested.
1,"The code is clean and readable. Every method handles only one task. However there are two controllers for house hunters and realtors which I felt was redundant. These could have been merged and written in a single controller. There is no bad naming in the project, they have followed the naming conventions. There are no long methods. Methods have been written concisely and in a readable way."
1,recompany could have been just company
1,"Of the functionality the team have tried to to implement, the code quality is not poor. However, the arrangement of code is difficult to understand given that not all functionalities seem to have been implemented. The ""def after_sign_in_path_for"" function in the applications controller used by the devise gem, only takes realtor as a resource, I would advise using an if or case condition within the function to allow other users to login. Also, I was unable to find any implementation for making sure that only the inquiries specific to a real estate company be visible to a realtor, and similarly only the inquiries posted by a house hunter themselves be visible to the house hunter on that specific house. I would again suggest using some If or case statements in the show function of the inquiries controller to establish identity of current_user."
1,"The writeup needs significant improvement. ""No clear explanation is given as to which files are edited for which reason. Only file names are stated along with changes made. Why the changes were made and what do those changes correct is not given."" - This review was given by me last time,and no improvement has been made in this regard."
1,"yes good number of tests added coverage increased a but but i would like to see more -ve tests.
Mostly +ve test cases are covered in the tests"
1,The write-ups been written well. A small suggestion to the team would be to explain their solutions in more detail as it would better the understanding of what the project does. Also the team could use code snippets instead of screenshots of the code.
1,"Write up is good. Great job. However I could find few points that if rectified would make it even better. 
It would be good if the problem statement could list the issue (hyperlinks) that are being fixed. That would make it easier to navigate
Instead of pasting screen shot for solution it would have been good if few words detailing approach would be put. Post that screen shot could be put."
1,Yes the team added test cases and the overall test coverage has increased. But the team seem to have only modified the existing test cases. The team could have implemented test cases of their own.
1,"The code is really well written , there are no bad names. The functions are also easy to understand. However, I would suggest them to include more comments in the code so that it becomes clear for the person reading the code that what the function and changes are all bout."
1,"The code was well-written and no problem with long or bad names. But, no comments were present. Commenting would have made the code easier to understand. Also, refactoring was not done."
1,"The code is well written. Although as suggested earlier, the team has not added comments to the code. In the wiki page, the team displays of how the code was before and after. But, I still feel this is not adequate information for a layman to be able to follow line by line what the code does.
Adding comments in the code for future projects would be my best suggestion. Or, as an alternative, briefly explain in a line or 2 as to what the code does."
1,"The writeup includes their thinking methodology and why they arrived at that solution.
'Changes' under 'User Deletion' clearly explains what went wrong in the existing code and what should be added.
One suggestion would be, instead of showing 'Before' and 'After', they could have leveraged Git s UI version of + , - in red and green to have shown the differences. But 'before after ' way worked too !"
1,"The authors concisely explain the work they did. As a suggestion, I would ask them to include the tests written in the wikipedia page as well. The idea is for any reader to understand 100% what all happened in the project, without looking at the code."
1,"The test plan is missing in the wiki page. The content in this section could be the one suggested in the above comment, to just include all the test cases added and write a brief description about each."
1,"Yes, test plan is complete enough also team has explained the test plan technology to used to achieve it.
Good knowledge of Capybara testing.
Team could have added test scenarios for each issue step by step rather than single lines."
1,"The document clearly explains what was the problem and what was the solution they proposed.They have also compared and contrasted with the previous solution which is good.
They have talked about how different roles come into play with respect to security perspective and what the pros and cons of having/not having those roles.
Comparing the code changes gave a clearer view of the code changes.
One improvement could be in the 'background' part. 
Taking it as it was:
The majority of the project was related to solving issues regarding the deletion of Administrator and Instructor accounts. Administrator and Instructor are both account types that inherit behavior from User but are (1)handled and deleted in different codepaths. Furthermore, properties are used on a User that aren't on an Administrator, (2)such as team ids or course associations 
(1) The different codepaths could have been shown to get a better view (atleast a screenshot, considering it wasnt within the problem scope)
(2) Although, why these properties arent on Administrator is defined in the forthcoming sessions, it was little unclear while reading it. (It could have been quoted that 'as we will see it in the forthcoming sections')"
1,The writeup was written well enough to how and what the project does. The only suggestion is to include screenshots. That would make the write up even more easy to understand.
1,Well explained. Add screenshot of the changes which can help understand the change visually.
1,"method remove_instructor is written twice in the same file, delete it."
1,"I would only suggest you to add more comments to your code. I know that no comments were previously added for you to feed off of, but I guess a major aspect of these OSS projects is to add as many comments as possible to the existing code."
1,"As given in wiki for their test plan, 
The admin tests include building and deleting both Administrator and Instructor accounts using Capybara for testing the front-end web functionality.
it 'delete instructor successfully' do
it 'delete admin successfully' do
To test the role creation, Capybara was again used to check that the web page did not have any button for ""New Role"" and that navigating to the page manually resulted in an error.
it 'should not create a new role and redirect to index page when ""new"" method is called' do.
 
Although they havent explained the edge cases and negative inputs in the wiki, their test cases cover whatever has been discussed"
1,Include test cases for negative scenarios as well.
1,"The Menu test case violates the DRY principle. The team can make use of factories to get rid of code redundancy.
Overall good work!"
1,"The tests describe the code they are testing not the behavior/functionality. Like for
""In this scenario, the controller_action attribute of the menu item is unavailable. In this case, the expectation is that a customized path is assigned to the URL variable.""
This just specifies what variable is being updated and I have no idea what workflow it represents. This is at least a brittle description for a test. Suppose tomorrow the variable is removed or some function ends up calculating the value, while the test it self might pass if the change was passive, the description is now stale and will confuse any user trying to update the tests."
1,The code follows the DRY principle and the Ruby style guide for writing the test cases. The code could be improved by providing comments. The code contains optimum length methods and the variables and functions have been properly named.
1,"I felt the section ""conditions tested in menu"" could have been more verbose."
1,"The wiki for this project contains tons of useful information about testing and rspec. I am not sure that some of it needs to be explained to the current extent (example: what unit testing and TDD is or the environment set up). They are nice to include but maybe less as the purpose of the project is not to educate on those topics. Overall, this wiki did an outstanding job of describing the purpose of the project."
1,"The topic assigned to this team is Unit testing on menu.rb. So, they had to create Rspec tests for the methods in the model file menu.rb in the new file spec/models/menu_spec.rb. The team has precisely tested the functionalities of every method including all relevant scenarios (as contexts) of both the nested class Node and the enclosing class Menu.
The names used for mock objects and literals are intuitive and follow the Ruby's convention. There were a few issues regarding incorrect indentation and the verbosity of the spec code in the previous round. The team has rectified those in this round.
In my view, giving additional comments for code in rspec is superfluous as the tests are already embedded with information on what it intends to do through the use of 'describe', 'context' and 'it' methods. 
The code is DRY through the use of reusable mock objects like menu, nodes, site controllers, content pages, controller actions, items and roles which span across the entire block where it is defined. Additionally, the use of before(:each) method to initialize and set up these objects further DRY's up the spec for the methods."
1,Overall well written code. Use of factory bot reduces code redundancy in building test cases. The team could have reduced the code redundancy inthe menu method test example.
1,"Review 1 comments weren't addressed. Better name could have been used than ca_testx. Also scenarios test the code and not the behavior- instead of- ""when x happens, this method does this"" we have - ""x happens so y contains this"". This isn't maintainable as changes to implementation will break/stale out these tests."
1,"The code is almost perfect except for the lack of proper commenting. The author has not improved or updated the ocde since the last review, as the last commit was about 11 days back."
1,"The writeup starts off by introducing Servo- Mozilla's experimental high performance browser engine and Rust- which is a systems programming language with memory safety and concurrency used to build Servo. It then moves over to Web Audio API for handling audio operations inside audio context and allow modular routing, and a workflow for implementing Web Audio was clearly listed. It then flows into the scope of the project and the implementation. The graphical and mathematical representation of the sine, square, sawtooth and triangle waveform gave a solid conceptual foundation. The code snippet of the changes done in oscillator_node.rs and the new file oscillator.rs (created by the team) has also been included. The section Build that explains the procedure to install dependencies (Rust), step by step procedure for building and running the build was very useful to explore the project. The team had included the build instructions for Windows and Debian-based Linux. They could have augmented the build instructions for Mac OS X, which might save Mac Users from reading verbose instructions on the official documentation and instead refer to a single source (the wiki). The authors end the wiki by providing the test plan with examples of generated sine, square, sawtooth and triangle waveforms as audio files; pull request and references."
1,modify some to make it drier.
1,"The team has completed the missing code in the file oscillator_node.rs which generates different wave forms like sine, square, sawtooth and triangle. They then created the file oscillator.rs that generates objects and calls methods to run the different oscillator type examples. The code in both these Rust files have good comments that clearly explain what every snippet does and the significance of variables. This made it easy to follow the syntax and semantics of a new programming language like Rust (Rust is a systems programming language that focuses on memory safety and concurrency). The variable names used are intuitive and the code is well indented. 
One issue that I can point out here is that the code is lengthy and complex with a lot of redundancy; especially those that define the audio context, destination node, oscillator and a few other local variables in the file oscillator.rs are repeated for every oscillator waveform and can certainly be encapsulated in one function that can be called only once in the file."
1,"The operation works perfectly from UI as shown in the youtube screencast.
The App was not deployed anywhere (or the link was not posted), so couldnt test it by myself.
Application could have been deployed during the second review for better understanding and trying out how the feature works."
1,"The writeup overall is good, but they did change the problem related to test plan like I mentioned last time."
1,"The write up starts with introduction about Expertiza, Test Driven Development and Unit Testing. It then moves over to describing the problem statement, team members, test plan and implementation that contains detailed documentation on the procedure to set up the Expertiza environment, functionalities of Menu model, sample views , declaration of mock objects as test entries and finally the conditions tested on each of the method of the Node and Menu class.
The various methods tested on the Node class include initialize, setup, site_controller, controller_action, content_page and add_child. Similarly the methods tested on the Menu class include initialize, select, get_item, get_menu, selected, selected? and crumbs. 
The write up also includes the screenshot of the Rspec tests that were run. The screenshot of the SimpleCov coverage report is blurred and not readable. 
The write up ends with concluding remarks, learning outcomes and References.
Overall, the documentation was very precise and clear with all the information needed to understand the code on Github. The authors could have included and highlighted how to run the Rspec code since their project specifically deals with unit testing. Another apparent issue that I can point out is the quality of screenshot."
1,"The write-up is good, but it doesn't feel much refined or improvised after the initial edit. As mentioned above, the image isn't visible clearly, which means that it wasn't reviewed much after posting. But apart frm that, the flow of the write-up is very effective, in fact one of the best that I've reviewed. The concept of giving a higher lvel view, and then diving deeper into the implementation is very subtly applied."
1,"The Wiki should not include Conclusion and learning outcomes part, it is not a report of the project, but a page to show what the project itself is."
1,"The build can be definitely deployed once the Travis CI issue has been fixed.
Suggestion- Rectify the Travis CI issue."
1,"The team has worked on achieving the path coverage by taking the edge cases into consideration. But, as most of the builds have failed, it may need a working deployment for it to being deployed on the server."
1,Once travis build passes the project could be merged. I have seen specs in the existing code base that are very implementation dependent so this won't be an issue.
1,I believe this code is ready to be merged once the Travis CI passed.
1,"The team has created test cases for unit testing the model file menu.rb. The test cases are meaningful and are getting passed. Once the Capybara error quoted in the 3rd rubric gets fixed, the current code can be merged into the repository. Since the team's project is unit testing and does not concern modification or augmentation of any feature, there is no question of deployment to production server."
1,"Yes, if must be, they must need more test cases ot cover some edge cases."
1,"The travis CI test did not pass.
Suggestion: Rectify the Travis CI issue."
1,Travis CI build indicates that the tests have failed. The code climate issues in the Danger Bot also did not pass. The team must look towards cleaning up the code.
1,Travis build failing at ./spec/models/menu_spec.rb:120
1,The wiki page is divided into some great sections that provide details about the project. I appreciate that the team provided actual code snipits along with explanation of the test to afford the reader a deeper understanding. The first paragraph in the design section is a bit hard to follow. It would be helpful to have this explanation accompanied by the tests these stubs were associated with and/or the actual implementation of these stubs for a better grasp of their purpose. I would recommend combining the test and design sections for a easier flow of reading and following test implementations. Thank you for the Results section of the wiki that wraps up the project and is an easy point of reference for the reader to see the outcome of the project.
1,"The build #6205 of this project failed in Travis CI. 
I checked the conflicts and the failures that caused the build to fail, and they are:
1) assignment function creation page is able show tab due deadlines
     Failure/Error: JSON.parse(child_nodes)
     
     JSON::ParserError:
       A JSON text must at least contain two octets!
     # ./app/controllers/tree_display_controller.rb:96:in `child_nodes_from_params'
     # ./app/controllers/tree_display_controller.rb:207:in `children_node_ng'
     # ./config/diagnostic.rb:11:in `call'
     # ------------------
     # --- Caused by: ---
     # Capybara::CapybaraError:
     #   Your application server raised an error - It has been raised in your test code because Capybara.raise_server_errors == true
     #   /home/travis/build/expertiza/expertiza/vendor/bundle/ruby/2.2.0/gems/capybara-2.17.0/lib/capybara/session.rb:145:in `raise_server_error!'
Finished in 3 minutes 27.2 seconds (files took 7.04 seconds to load)
55 examples, 1 failure, 11 pending
Failed examples:
rspec ./spec/features/assignment_creation_spec.rb:233 # assignment function creation page is able show tab due deadlines
I also noticed that there were many features that are pending to be implemented (which do not affect the suite's status) They are:
 1) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner declining the invitation makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:29
  2) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner accepting the invitation when the team is not full makes requester joins the team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:34
  3) team invitation when current assignment is a team-based assignment with topics advertisement feature when team owner accepting the invitation when the team is already full makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:38
  4) team invitation when current assignment is a team-based assignment with topics on teams#list page (instructor end) shows a list of students who do not have a team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:62
  5) team invitation when current assignment is a team-based assignment with topics when a student access studet_task#list page of this assignment contains 'Your team' link on the page
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:14
  6) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) shows a list of students who do not have a team and team owner can invite these students by clicking the 'invite' buttons
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:44
  7) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee declining the invitation makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:47
  8) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee accepting the invitation when the team is not full makes invitee joins the team
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:52
  9) team invitation when current assignment is a team-based assignment with topics on student_teams#view page (student end) when invitee accepting the invitation when the team is already full makes team members remain the same as before
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:56
  10) team invitation when current assignment is not a team-based assignment when a student access studet_task#list page of this assignment does not contain 'Your team' link on the page
     # Not yet implemented
     # ./spec/features/team_invitation_spec.rb:68
  11) assignment function Due dates tab Able to create a new penalty policy
     # Temporarily skipped with xit
     # ./spec/features/assignment_creation_spec.rb:682


1) timestamps for student's submissions when current assignment is in submission stage when current participant does not submit anything yet displays due dates of current assignment in student_task#list page
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:14
  2) timestamps for student's submissions when current assignment is in submission stage after current participant has uploaded a file displays file names with its timestamps
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:23
  3) timestamps for student's submissions when current assignment is in submission stage after current participant has submitted a hyperlink displays hyperlinks with its timestamps
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:18
  4) timestamps for student's submissions when current assignment (with single review round) is in review stage after current participant finishes an author feedback displays a link named 'feedback' with its timestamps (you could redirect to that feedback by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:36
  5) timestamps for student's submissions when current assignment (with single review round) is in review stage after current participant reviews other's work displays a link named 'review' with its timestamps (you could redirect to that review by clicking the link) 
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:30
  6) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant finishes an author feedback displays a link named 'feedback' with its timestamps (you could redirect to that feedback by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:58
  7) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant reviews other's work in round 1 displays a link named 'review' with its round number (1) and timestamps (you could redirect to that review by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:45
  8) timestamps for student's submissions when current assignment (with multiple review round) is in review stage after current participant reviews other's work in round 2 displays a link named 'review' with its round number (2) and timestamps (you could redirect to that review by clicking the link)
     # Not yet implemented
     # ./spec/features/timestamps_for_students_submissions_spec.rb:51
  9) badge system when a student receives a very high review grades assigned by teaching staff (higher than 95 by default) assigns the 'Good reviewer' badge to this student on student_task#list page
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:25
  10) badge system in assignments#edit page has a tab named 'Badges'
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:13
  11) badge system in assignments#edit page when switching to 'Badges' tab allows instructor to change the thresholds of two badges (by default is 95) and save thresholds to DB
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:16
  12) badge system on participants#list page allows instructor to view badges assignment statuses of all participants
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:29
  13) badge system when a student receives a very high average teammate review grade (higher than 95 by default) assigns the 'Good teammate' badge to this student on student_task#list page
     # Not yet implemented
     # ./spec/features/badge_system_spec.rb:21
  14) expert review when current assignment with vary-rubric-by-round supports expert peer-review expert review feature works correctly
     # Not yet implemented
     # ./spec/features/expert_review_spec.rb:28
  15) expert review when current assignment with single review round supports expert peer-review expert review feature works correctly
     # Not yet implemented
     # ./spec/features/expert_review_spec.rb:14
  16) review mapping show error when assign both 2
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:83
  17) review mapping calculate reviewmapping from given review number per submission
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:102
  18) review mapping calculate review mapping from given review number per student
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:95
  19) review mapping show error when assign both 0
     # skip test on automated review mapping, too time consuming
     # ./spec/features/review_mapping_spec.rb:89"
1,"I am unable to find the file review_response_map_spec in the github repo that was supplied. However, there was a ruby file that was attached in the submission. The variable names are also clear and unambiguous. This file is incomplete but the tests that are complete seem to follow appropriate syntax and guidelines. I would suggest to add some describe and context blocks that would clarify the purpose of each test case rather than just have the it statement saying the name of the method being tested. Keep working to finish up the remaining tests in this fashion and it would be great."
1,"There must be some test cases that should have been covered according to Travis CI. Also the build has failed. However, the team claims that some of the tests are running locally. If some of these points are looked upon, the code would be ready to be deployed on the main server."
1,There is only 1 error and warning which can be rectified and fixed and then can be deployed. No need to be redone from scratch. Future team can fix it and merge to main branch.
1,"The wiki talk about what they have done throughly, it could be better if they have mention about how they do that."
1,"Since it's a test project, there are not much design patterns to follow, but they should list what tech they used to test the rb file."
1,"The Pull request shows that the code has failed all the checks. Therefore it should not be deployed. 
Suggestions: Rectify the code climate, Travis Build and the merge conflict that is being displayed on the Pull request(Gemfile.lock conflict) . Once done, the code could be deployed. Functionality is working fine, no doubt but build must not be deployed unless the above issues are resoled."
1,"I think User experience and code readability are as imp as producing a working code. So based on how urgent is the requirement for this functionality, I would prioritize refactoring the Notices and Display messages to more appropriately indicate what action was taken when we try to add a participant to the assignment or import using a CSV file. Secondly improving the comments as explained with an example in the first question."
1,"Needs some work, code climate changes, a bit of DRYness and a passing CI is needed."
1,"The writeup is written in a very verbose manner. They still haven't added the test plan which was missing. 
Suggestion: I feel that the test plan should have been added explicitly."
1,"Write up is really good. but little short. Could have been described with more details. Also, it would have been better if they ha uploaded the screencast of the work they had done."
1,"The write-up is clear , concise and explains the work done properly. Some screen shots would have been handy though"
1,"Team has added tests for assignment_participant model which they have changed. As the requirement was just testing one component, this is sufficient, however testing the controller would have been a more through Integration test."
1,"There were some issues which I reported regarding comments and Notice messages displayed to User which needs to be improved. But they haven't been incorporated. It is not a blocker but definitely an important change to improve User Experience and better code readability.
For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later."
1,"Yes, the writeup explains the problem statement the solution implemented. But snippets of code not added and screenshots missing too. Too many github links. Could just add some snippets to make it more readable."
1,"Code changes does not follow the DRY principle in atleast two places.
Also, the comments in the code are not helpful.
All code comments are like ""# E1834 Fall 18"" which does not explain what is the code does, it only says when the code was added. Such comments may be removed."
1,"The details regarding testing are mentioned in the writeup. But I did not find anything about the Test plan as such, in the writeup. The assignment_participant_spec contains a test. One edge case has been considered. I feel that the Test Plan should have been mentioned in the writeup explicitly."
1,The authors have mentioned the test they have performed but no specific plan is presented. However they have adequate details about what is done and what is tested and how will the corresponding changes look like. edge case descriptions could have been included
1,The writeup is thorough but screenshots could be added. The instructions are missing too. Rest all looks good.
1,The Wiki document clearly explains what work is done. One section for each issue. The deadline reminder functionality explains what code is changed but overall what the use-case is and what task needs to be performed could have been explained better.
1,The features work. However the notice messages could be improved to state exactly the action that is conducted. Eg. One of the notice message says either user is already added or it doesn't exist. Narrowing it down will be of great value.
1,"I feel that the code from line 64 to 76 could have been written in a separate function to avoid making the function submit_hyperlink from becoming so large. 
Additionally, the functionality inside the function review_reminder_email could have been separated into 2 different functions."
1,"The code changes in ""app/controllers/submitted_content_controller.rb""
line 60-78, could have been in a separate method, such as send ""email to reviewers"". That would make the controller code clean and clear.
 
 
Code changes does not follow the DRY principle in atleast two places.
1.  In app/mailers/delayed_mailer.rb, there is no need to duplicate the code. The code in the new method, review_reminder_email  has been copied from email_reminder. The email_reminder method can be used instead of creating a separate method altogether.
 
2. app/models/assignment_participant.rb and app/models/course_participant.rb uses a same code to send the emails via MailerHelper.send_mail_to_user , that can be put in one place, so that it can be reused in both the places."
1,"Looks good. Comments could be improved. For example, In submitted_content controller there is a comment which says sending email to users. However it is just a method call which redirects it to delayed_mailer.rb. So this should be properly mentioned as it will be helpful for someone refactoring or understanding the code later."
1,All ruby looping constructs followed to a good extent . Refactoring the code could be possible
1,There are some repetitions in the code which can be avoided by creating a helper function and calling that function from each place. But apart from that code is well thought out and implemented nicely.
1,"I did not find the test plan in the documentation. However, there were details mentioned about the tests that the team wrote. One Test related to the issue has been written in the assignment_participant_spec file. The test works works properly. I feel that the Test plan should have been explicitly mentioned in the documentation."
1,"The build has successfully passed the Travis CI test and there are no merge conflicts present in the pull request. However, there were a few code climate issues which I think can be easily fixed."
1,Few minor issues with the build which can be ignored.
1,"I believe this change that affects the system as a whole, needs more test to be performed in all affected tables and functions to be sure, no other part of the system is broken.My opinion is that, once all parts of the system test is done, corresponding to this centralized db change the code can be deployed to production."
1,"As It did not pass the test, it is not ready. For a future team, end of this project should be a good starting place."
1,"It can be deployed but first, it should be tested thoroughly."
1,"Yes the write up is good, if they were able to host it'd have been better for checking the work."
1,There were not any bad naming in round 1 as well. Comments could have been added for new additions which is still missing. There has been no DRY issues
1,Overall the code looks good with most of the coding standards being followed. However I think it lacks proper commenting and also there were few stray pieces of commented out code lying around. Adding few more comments and deleting unused code would be better.
1,"The write-up has detailed how the author has done the changes. But it fails to address why the particular direction was taken, in some cases. It would be good to elucidate on that as well.
In ' Solutions Implemented...' section, it would be good to include the names of the files before each code snippet and not just the description so that it is easier for the reader to relate."
1,"The team has explicitly mentioned the classes and the name of the files where they have made changes. However, i would suggest the team to add the filenames above code snippets that they have attached in the write-up. This would make it easier for the reader to follow the workflow."
1,Could have been more eloborate. No mention of design principles or patters used.
1,"The writeup mentions about the changes done in the code but not how and why it was done.
Instead, the team could explain each code change more and give a link to the code change(from github)"
1,The authors have just mentioned that the test cases were updated. It would be good if the code diff for the test case modification were also provided so that we get an idea about the kind of changes made.
1,The test plan does not look complete. It just says Fixed the existing test cases for the review feedback by a team instead of a team member. Could have mentioned the edge cases and how they tested it.
1,"The test plan section just states that the existing test cases for feedback per member is fixed to satisfy the new feedback per team implementation. It would have been effective if specific pre-conditions, edge cases, invalid input values etc are handled. For example, in this case the input with missing team id or one member teams can be used as good candidates to test the implementation."
1,The authors have considered various preconditions but edge cases are not tested. No test plan has been provided. Some tests have been edited to meet the new requirements. Many conditions have been checked using 'if else' cases which could have been more elegant.
1,"There is a separate testing section in the writeup, but it does not have much explanation.
Could have added a couple of test case explanations.
Also, a screenshot of a passed test case could work wonders."
1,"The team has written a well structured write-up, but it lacks depth in certain areas. There is need for more background on what an author feedback is. The project description gives a better idea. Please try to include details from there. The last sentence under the 'Motivation' head, ""You should change this to list the team’s collective feedback to its reviewers to a particular assignment"" is a bit confusing. Please rephrase the sentence so as to add clarity to it. 
 
Instructions on how to manually test the functionality is missing. It was difficult to figure out how to navigate to and test the functionality. It would be really helpful to add this in the wiki."
1,"The team has mentioned the problem statement and the methods which they have implemented to solve the problem.  However, there is a difficulty to follow the workflow since there are no screenshots attached or any video link provided. The team could improve this by adding a screenshot of the updated workflow below the changes shown in the writeup"
1,"I was able to understand what the project does to a certain extent. The writeup could have been more eloborate with views/snapshots of the page before and after the changes. 
It adequately indicated what functionality the work is related to."
1,"This project is on implementing a single rejoinder per team for reviews instead of per participant reviews and also makes the feedback link for reviews more accessible.
The writeup explained the background about Expertiza and the motivation for the project. It then moved on to list the tasks that were implemented and files that were modified in the project. It showed the current and new implementation clearly. The writeup, however, could have quoted the tests done using RSpec and the UI, instead of plainly mentioning the that the tests were modified to suit the current implementation."
1,The write up is okay but could be a bit more descriptive. Could have provided screen shots of the changes to help reader understand better. No initial instructions on where to get started.
1,"The explanation is quite good to tell what is the current and the required functionality.
The screenshots placed are not complete, as in they cut the code at the right end.
Instead I would suggest to placed the github link to the code changes, so that the wiki becomes shorter and you can explain each code change better in the wiki. Also, the reviewer can compare the code with your explanation properly if he has the link to the code."
1,"Difficult to test and review the work one since there were no screenshots provided. I was not able to find an instance of a review which could be submitted as a team but not by individual members of the team. Some of the webpages crash after clicking on a particular assignment to view the review report.
Suggestions: The team could explain steps to access the ""review view"", so that manual testing could be done. The team could create dummy assignments for testing. Maybe, adding screenshots would help in the process."
1,The author's work runs smoothly. It could have been better had they provided a short demo video. I could not figure out where were the changes made in the system. They could have written the navigation steps. Directly giving the flow without any context is tough to understand.
1,"The code seems to work for basic required functionality.
Need to add more number of edge cases with test results where there is a possibility of a failure and a look into the work around is required."
1,"The comments were sparse. Maybe, coming up with a few words before every method would make the project more understandable."
1,"The team has done well to follow the Ruby Style Guide and has ensured to keep the code DRY. However, my suggesstion is to add comments in the code for the reader to follow the code easily."
1,"The code has comments at the beginning of the functionality.
Could have added some more comments where the functions are larger for followup.
Can add why a certain change in the fetching process was made, so that next time it can be referred while coding further."
1,"grades_helper.rb:62
The parameter id is not descriptive enough. Please consider changing it to be more descriptive."
1,"A small suggestion , new_feedback --> author_new_feedback
The variables, methods and class names are aptly named. I could not find names which are not suggestive of functionality."
1,"Everything looks fine, except for a few places where there are issues with indentation."
1,All methods and variables are suggestive of the functionality. The vm_question_reponse table could have been named/edited to be named in a more descriptive way. I do not understand what is the meaning of VM.
1,"Naming looks fine.
Could probably have used is_submitted? instead of is_submitted."
1,No cases were mentioned in the Test Plan hence could not tell it is converted into automated tests. Please elaborate it.
1,Testing has been done well. Testing could have been more extensive. Currently the system only tests if the responses are correct for proper input. Blank or no input or failing cases should also have been tested.
1,"There aren't any test cases listed in the writeup.
Can explain the test cases a bit in the github commit message."
1,"The code passes for the Travis build as well as Danger Bot. However, it fails for code climate with 3 issues yet to be fixed. In totality, the pull request does satisfy the need to pass the required builds."
1,"The team gave fixtures for the issues exist, but to make deployment, it is better to add more tests to make sure the function work properly."
1,The feature implementation section is good to go. However the test cases can be improved on a lot. That doesn't mean that the test cases shouldn't be deployed.
1,"The code is almost perfect, apart from the code complexity issues, which in my view isn't very tough to fix. The project need not be done from scratch, and it is certainly a good starting place for future teams to pick up."
1,"The wiki provides enough introductions for this project. According to the wiki, I can get a clear insight about what the project is, what's the issues include in it, why the team do things as the way they said and the tests they give to make sure the functions work properly. However, the description for the first issue is not very clear and makes me confusing."
1,"Very impressed by writeup. One suggestion: Problem statement is not mentioned thoroughly however, solution is very well ellaborated with screenshots and code snippets."
1,"Overall the write up was not bad. Here were some of the things I believe that could be improved:
Problem Statement;Seems to be wrong. I believe it should be included in the background as it merely describes the files that they are supposed to work on."
1,"The write-up is very self explanatory. It successfully covers each and every aspect of the work done by the team, and also, to an extend, delvers what mindset they had while working o the project, which is very great. Just one sugestion is that, instead of simply dumping the files, they could have made a quick note of what the code in the file does. No one want to go through each and every line of code just to get an idea what it is meant to be."
1,"The team didn't no provide the link for the deployment, but according to the video they provided, the features worked well."
1,The test cases covers the required test scenarios and the system operates as intended. The video file submitted though seems to crash. A link could have helped.
1,"The writeup provides a gist of the project implementation stages. Though it does specifically include a test plan section, it has the list of tasks performed while testing for various scenarios as a part of the issues to be resolved section."
1,"Yes, the tests are thorough. Needs some formatting in the code."
1,Excellent writeup. The instructions were clear. The screenshots were apt. One suggestion: Could be shorter and precise.
1,"The writeup was clear enough to be understood by anyone familiar with developing or contributing on expertiza. It provided a high level view, and then dug deep into implmentation, which is great since it saves time, and also look concise. But for someone outside the domain of expertiza, it feels too sudden of a transition that it takes time and in many cases other resources to figure out why the author did what he did. But the overall flow and structure was very great."
1,"The team should add more comments for the codes include in the two issues, it is a little bit hard to follow what the author want to do without comments."
1,The code contributed by the author contains long functions which are adequate and consistent considering the amount of task that is carried by each function. The team could improve upon the comments to enable high understanding of the flow of code written. The code does follow the Ruby style guide and supports the DRY principle.
1,"Except the comments, everything seemed to be fine. The code seemed to lack proper comments, and as a result of which, it took several seconds to determine why the author did what he did. Apart from that, the code seemed perfect. Functions were sufficiently long, and code was DRY enough too."
1,The test code follows standards. Context messages can be shorter and precise.
1,"Yes, the login / signup module seems to be very well tested, considering the fact that all the three types of users (admins, househunters and realtors) are managed by using the same table. But, there's also a small functional bug. Even if I hadn't regisitered as a househunter or a realtor, I am able to switch back and forth between the roles, which is kind of counter-intuitive in many ways."
1,"The system works exactly how it is supposed to work.
I could not find any functionalities that are still failing. No bugs or error messages.
It would have been better if the realtor could send replies to inquiries directly from the application than opening a separate mail application."
1,"The system works well in most of the cases, except when the realtor creates his company, and then after successfully creating the company, he get's an option to edit his company details, but then when he clicks the edit button, it redirects to the homepage, and is unable to edit his company info unless he choses to belong to the particular company. A minor bug, but still breaks the consistency."
1,"The system has all the basic functionalities as per the program description. As per the last feedback, validation checks for invalid data has been added to the application. However, the system still does not have the null checks for field. 
For example: If a user creates a house without adding most of the details, the application breaks.
 https://housefocus.herokuapp.com/houses"
1,"The code is clean and readable, but there's only one suggestion. The page which lists houses (index) and search houses are handled by different controllers, whereas, they could have been easily integrated into one, without compromising code readability. It would have lead to a more integrated and a cohesive web app. In one or two instances, there were several functions performed within a function, which could have been better modularised too."
1,Code is well written. Functions are well defined. Some areas where it can be improved is moving the house search logic from controllers to the respective models.
1,"The code has been implemented in a modular way. However, there are few functions where Ruby naming conventions has not been followed for example :
""authenticateAdmin"" in UsersController class."
1,"Well, we can say that they have indeed tested the models they have defined in their README file on GitHub. The definitions of the functionalities in the 'db' folders and the controllers folder makes it very easy to follow how they have structured the code.
Also, the way the houses are added, the redirection the houses to the links such as CMU and NCSU websites is very intuitive and well thought out, and thus barring out a few minor mistakes in linking and page definitions the code has a good ability to run for the defined cases specially for the Admin to be failsafe. Only, one complaint though, the whole structure does crumble when one sees that they have allowed the admin to be DELETED. This is their biggest loophole."
1,"The login / signup module has lots of bugs. Like when a user tries to create an account with an already existing username, the application crashes. Also, a user cannot signup as both, a realtor and a househunter. Moreover, there isnt any validtion for the length of phone number, nor the validation for the email address is correct. (for example, it accepts aa@a as a valid email address). So yes, these functionalities in the login signup module could be improved, and these does not seem thoroughly tested. But the search functionality for the houses seemed to work pretty well, and as expected."
1,"It is surely a very intuitive user interface because the ease of navigation is generally very well defined and the routes.rb file in git hub makes the session linkage explicit. 
Even, so one does fail to understand the empty blanks on their login page since there aren't any blanks at all. So, we get easily confused on what to do. Sign up is not validated for any functionality be it user or admin or realtor and we don't know what to do. 
Luckily, the README File does resolve the dilemma and help us to follow the steps."
1,"The user interface looks pretty, is clean and intuitive. But the placement of menu buttons was rather ""not-obvious"". It took time for me to figure out login / signup buttons, and I also had to actively look for buttons to perform actions after signing-in, which isn't actually much user friendly. Though it may seemed cliche, but I think it is very user-friendly to have action buttons on the content of the web-page, rather than having them at the top inside the header. But apart from that, the simplicity and the look and feel was pretty good."
1,"The user interface lack multiple navigation functionalities such as it does have any cancel or back button. So, if a user tries to move back or cancel while creating a company, he would be stuck and would not be able to move to any other tab."
1,"The team has followed good ruby coding practices. All the code is neatly written and well indented. However, the code has no comments."
1,"The database schema, especially for the login / signup functionality is very well implemented, and includes lots of features that weren't asked for at the first place. So the extra hard-work is very well appreciated. The db design is very cohesive and seems fool-proof. The rest of the programs and the functionalities follow most of the principles for good ruby on rails coding practices. But, the one thing I find missing was the lack of proper documentation within the code. Given the short time frame, not having extensive documentation and comments within the code is excusable, but there were certain points where I had to go through the whole code to realize what;s happening, which could have been avoided if there was proper commenting inside the code."
1,"The code follows ruby and rails convention, but there are multiple commented files in the project such as logins.coffee and many more which have not been used in the application."
1,The build did not pass Travis CI. The reason is because #scores method is commented out from the AssignmentParticipant class.
1,Need to fix the build issues and code climate issues(bank lines and indentation errors).
1,"Though the code works well. The build does not pass. Also, some more edge cases will make the testing of the model complete."
1,"The write-up did cover about the efficiency of Servo to render webpages quickly and smoothly when compared to Mozilla's other rendering engines. Servo does this using parallel layout, styling, web-renders and constellation and in turn sandboxes the processes, threads and tasks that allows the browser to fail better, hence making it more robust and secure. It justified the use of Rust to rewrite C++ and effectively the browser as well."
1,The writeup includes the code used but it would help if the Wiki also explained how the authors came up with that solution
1,"The write-up has been written well including the problem statement, test cases, and the test result. However, I feel that information about tools such as 'Rspec' and concepts like ""BDD"" is not that necessary as the reader is most likely familiar with these concepts."
1,"The wiki page includes all the information. If they can add more details about how they test the methods, it would be better."
1,"writeup is comprehensive and very carefully written. A lot of details included.
I would suggest to add more examples, and more explanations of why there's such mock cases"
1,"The write-up gave a good introduction to the project by providing the background information about the Servo parallel web-engine project by Mozilla for web page rendering and Rust programming language to execute HTML5 and CSS3 parsers. It then highlighted the OffscreenCanvas API that can be used to generate frames and also return the rendered image using the transferToImageBitmap() method. The writeup covered how web workers can be used to implement OffscreenCanvas API to render images as an independent process isolated from the webpage. The problem statement of of creating OffscreenCanvas and OffscreenCanvasRenderingContext2d interfaces with OffscreenCanvas Constructor, properties (width and height) and getContext() method was defined. The use of Web IDL to describe interfaces for web browsers was briefed and that was followed by the code flow and the code snippet of the two Web IDL files namely- OffScreenCanvas.webidl and OffScreenCanvasRenderingContext2D.webidl
While the write-up was cogent and clearly explained the work done, it could have elaborated on the implementation of the methods like transferToImageBitmap() and how the interface is integrated into the system to render images in a webpage using an isolated web worker."
1,"Yes, the Wiki is clear and explains most aspects of the project but there could be a better explanation for the IDL files that were added and the corresponding changes that were made because of adding these files"
1,"The background sections were fairly clear, but the details could have been fleshed out more. Some description of the code would be better than a dump of the code."
1,The build fails and there are several issues and warnings that need to be fixed.
1,"No. The code needs to be cleaned up before it can be deployed. The build failure needs to be fixed. Also, as the project is not deployed, manual testing could not be done."
1,"If they can write more test cases to test their code and make sure their code does not have bugs, i think they can deploy their code onto server."
1,"I believe that code, as it stands, is not ready to be deployed. More comments are needed and the code is hard to understand, so even though the changes are small, one might need to see id the changes can be simplified. I believe testing can be more thorough too."
1,"Some improvements are required before deploying it to the main server. There are changes suggested by codeclimate which need to be looked upon. The future team must ensure to pass the build. There is scope for the new tests to be written and code that would improve the overall coverage. Overall, the team has done a commendable effort with respect to the difference in the first and second submission"
1,"Unsure in this regard since they neither have the deployment neither the GitHub link to their repository, and also the coverage and the Travis CI say otherwise. Even so, in their video they show in proof that everything runs. One does wonder though, how to test without actually having the links of the repo."
1,Once the issues with pull request are fixed it can be merged.
1,This code is ready to be deployed if they ensure that variables are renamed to resemble their actual functionality.  No big issues as such. Resolves the problems well.
1,"The code can be deployed once the Travis CI passes and there are some 6 minor warnings to be fixed in code climate. There are 4 failing and 1 successful checks, the team needs to make sure these checks pass in order to be able deploy the code onto the production server."
1,"The team had not added a link to the wiki during Round 1 of the review. 
'Issues to be fixed' section seems incomplete and not the right kind of writing. Please review and try to add more details on the issues that are being addressed.
Otherwise the wiki looks good with relevant diagrams and code snippets."
1,"The newly added code includes the attribute height, the getContext() and transferToImageBitmap() method in the OffscreenCanvas.webidl file.
The name height given for the attribute height for the Canvas makes complete sense. Similarly the name getContext() given for the method that returns the OffscreenRenderingContext is also intuitive. The name transferToImageBitmap is a little long which might be the code less readable if the method is called often. Instead the accessor convention of using getImageBitmap() feels more intuitive and also logical at the same time."
1,"It is very well written with a nice flow diagram.
The second video link on the wiki page is unavailable, which can be fixed/removed in case it is legacy."
1,"The team did not have a writeup in the last submission. In this submission, they do have a writeup with the problem statement, the files modified, approach to solving the problems, and test plan. This seems to be a significant improvement from the last submission. As for the screencast links, I think one link is absent and the other one is a YouTube video of the same project submitted last year. Please check this, I think you have added the wrong link.
I would also suggest that a references section needs to be added to the Wiki page so that the deployment, pull request and other project reference links are shown."
1,"The writeup is great. I could get all the info i needed to understand the problem. Could refine the describing issues section a bit as I could see sentences like "" Please take a look at the Github issue for suggestions on how to solve this."""
1,Everything works as per the video linked in google drive. A link to the same can be added on the wiki page.
1,The code is almost completed. Only a few final touches will make it ready to be deployed onto the production server. Maybe the future team can also work on it to achieve some more enhanced features.
1,I think that they need to fix some things that are mentioned by travis CI. Once they do that they are good to go.
1,"There can be a few changes incorporated to the code- especially the name mismatch of the web IDL and corresponding Rust file needs to be fixed. The unnecessary comments have to be removed. Moreover, the pull request shows that there are a few changes that have been requested and all checks have failed. So, the code can be merged and deployed only after these are incorporated."
1,"As suggested by the Mozilla team themselves, a few errors need to be rectified. The final code also needs to be formatted using rustfmt to make it consistent with the design"
1,"The team has added a new test to cover the functionality. But this test is failing. There could be an issue with the notice that is generated, as during run time it is set to nil and this is checked against the string provided in the test. The overall test coverage has decreased by 0.6%."
1,"Pull request failed the tests, so that must be fixed before merging."
1,The overall test coverage decreased by 0.6%. You could have added test cases to  response controller.rb and application helper.rb. These files have contributed the most to the decrement in test coverage.
1,"The code is well-structured and easy to follow. Styling and indentation are consistent. 
One major issue that was not addressed is that the object that is being tested is an instance of AssignmentParticipant as opposed to Participant. As a result, the team had to comment out the #scores method of AssignmentParticipant to hit the #scores method of Participant. One possible fix is to define a new participant instance in factories.rb.
One further suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method."
1,"Authors mostly discuss the technical parts of each test case, i.e. how it works and what functionality it is testing. There is almost no emphasis on any design decision or pattern.
There is a mention of mock objects being defined at the beginning of the test file, however the wiki does not elaborate on the reasoning behind those decisions.
Some improvements can be done by explicitly stating and justifying the structure of the code.
For example, discussion on why there are no instances of before(:each) statements and how defining every let statement once at the beginning of the file is superior to having that data defined for each test suite separately."
1,"Test plan is comprehensive and covers most of the edge cases. The test suite is achieving test coverage of 99%.
One minor issue is that wiki is missing two cases that are implemented in the code (#name, #fullname)."
1,"More edge cases can be included. For example, for Participant#team, can include a case when user does not exist."
1,"Authors explain the functionality of the test in wiki page pretty clearly, including participant_spec.rb, participant.rb and assignment_participant.rb. But there are not explain in video, it might be more convenient for reader to understand if authors add some short explanation in video."
1,"The primary objective of the project is defined clearly.
A comprehensive description is provided for technical steps needed to set up the environment and the functionality which is related to the test suite.
Furthermore, the team provides a detailed explanation of each test case along with the corresponding code.
My suggestion would be to remove or reduce parts like Expertiza, BDD and Rspec description (http://wiki.expertiza.ncsu.edu/index.php/CSC/ECE_517_Fall_2018_-_Project_E1852_Write_unit_tests_for_participant.rb#Expertiza) because they are redundant in this context."
1,The wiki is quite comprehensive and gives the build steps clearly. It could also include a more basic explanation in layman terms about what the OffScreenCanvas API does
1,This system doesn't have a UI I can view as it seems to be a browser add on.
1,Some parts of the code are still left to be implemented
1,"I don't see any tests added by this team, although they do mention that their code additions were not particularly testable except with the existing automatic tests, which they enabled."
1,"The code is well-formatted and structured very clearly. It is easy to follow the expressed intent. Every 'it' block is succinct and contains one assertion. Indentation and styling are consistent. 
One suggestion is to improve the expectation for method #scores by testing the attributes that are relevant in that context as opposed to checking the string value of #inspect method."
1,"The suggestions have not been improved. Comments aren't explanatory and does not give an idea about what the author intended to do. It would be good to include meaningful comments. Debug code is still in the commit. Even though we may used debug code like the puts statement, we should not commit these as they could create junk data in the application log. Please consider removing them."
1,"The code is well written but it can use comments to help explain what the code is doing. For e.g. the code below is hard to understand:
          if quesparams[:assignment][:directory_path] == """" and quesparams[:check_validate] == ""on""
            quesparams[:assignment][:directory_path] = ""#{quesparams[:assignment][:name]}_#{quesparams[
                :assignment][:id]}_#{quesparams[:assignment][:course_id]}""
          end"
1,"There are commits on a single day, that is yesterday. One suggestion would be to commit regular progress on the git."
1,"There are some functions long for example like scores , However, as this function is handling all the required cases hence , that length is quite valid and considerable"
1,The code has been modified to include the modifications requested (test cases added for failing scenarios and edge cases - two assignments with same name) in my previous review. Appreciated! Overall the code quality is good. Only some variable names are ambiguous for example: check_validate.  What does it validate? Name it like validate_same_name or validate_common_directory etc
1,"Naming conventions that are used in this project are clear, reasonable and follow standard Ruby practices.
There are some instances of variable names that are concatenated with numbers like topic1, topic2. While this approach can be justified in some cases, I would suggest using more descriptive names instead or arrays if multiple instances are required."
1,"Code looks good apart from a lot of commented code. If that is written by the team and was not already present, then it should be removed if not used before submitting pull requests."
1,"Write up isn't provided. I went through their git commit and the requirement for  issue #1201. There is a 'puts' statement in the controller. I feel that should be removed, you guys might have added it for debugging purposes, but it should be removed before committing. Also, not sure how the changes made are applicable to the problem at hand which is to check if assignments have the same name if I'm not wrong."
1,"Unfortunately, no mention of the word ""test plan"" has even taken place in their whole doc. So, it seems that they are yet to implement the testing functionalities in their project. Although, it would have been better if they had checked if the checks or the tests already existed in the first place in the git repository.  
 
Moreover, as a part of their project, one of their problem statements is in fact to write the tests for a specific problem scenario. I have reason to believe even that has not been done judging from the pull request."
1,Testing is absent in the project. This could have been because (by the looks of it) the issues were too small (only 20-30 lines code). Refer RSpec documentation to write tests. It is easy to follow.
1,"The features work as intended however I am having trouble navigating and checking what are the differences between the original system and the improved system. Could have made a demo video showing the improvements or a step guide to follow. They could have also provided some steps or a visual navigation guide to see the changes. For edge cases you could check what happens when assignments have same names, blank or whitespace containing names etc."
1,Manual testing seems an impossible task since it is not having a wiki doc itself which makes it impossible to have a specific design flow for the project in question to go ahead and check the program.
1,"Issue #1201
In the assignments_controller code, the team has checked in a puts statement (line 48) which looks like debug code. Even though these are helpful during the development phase, we need to remove them before finally pushing them.
Issue #391
The comment (assignments_controller.rb:85) is not descriptive enough. The author has commented out a method call. It would be beneficial to the person reading the code to understand the intention behind this. Please provide a detailed comment on why this was done.
Again the author has use a puts statement (_submitted_files.html.erb:29) which should not be committed and should only be used during development/debugging. Please remove the debug code."
1,I feel you guys should add a few comments for a third person to follow.
1,More comments are needed because I had trouble following what the code was doing in some places. The code follows Ruby Style Guide and is DRY in its design. Functions are small in size and naming conventions have been followed. Kudos!
1,"Issue #1201
Below is the change made in _general.html.erb
Directory name will be autogenerated if not provided. In the form of assignment name_id_course_id.
The last part could be modified to something with a bit more clarity. From the assignments_controller code it could be seen that the auto-generated directory name follows the format <assignment name>_<assignment id>_<course_id> which is not what is specified in the text.
There is a typo in the word 'autogenerated', it needs to be hyphenated as 'auto-generated'."
1,"I can guess the array 'quesparams' means question parameters, but this variable name is confusing, I think they should use question_param instead."
1,"The team has only made one significant change to the following file: app/controllers/assignments_controller.rb .
It is an if statement which is difficult to follow since the team has not written any comments for the same.
 
Suggestion: The team could add comments and screenshots for better understand of the workflow in the second submission"
1,Good work. Need to work on tests.
1,"On checking, the code, we find that, in agreement with @TravisBuddy, the code had a build error which seems to be unresolved, which is strange, and should have been looked into. Moreover, the overall coverage shows a good amount of increase which is good. But one must say that the details in the code changes as few as they seem have been to a good extent for the majority of the part and thus worth the merit."
1,"Names could have been better designed especially the 'quesparams' variable. I get no idea about what that variable is used for or what that implements. You can rename it to question_params, or duplicate_directory_params etc."
1,"The names are all proper. However, there are lines of code which are commented out. Cleaning up that would reduce the clutter."
1,"Could not see the Test Plan as write-up link has not been provided.
Looking at the code also, it seems as if no tests are written. It is always a good practice to follow TDD. Please write test cases to test the changes made."
1,"The code is written very cleanly. The only slight problem I found was the ""search"" method in Houses_controller is too long as it has a lot of nested if statements."
1,"Short methods - Good.
project structure - good.
I feel you haven't committed everything to GIT. Please check that."
1,"The UI is simple however, because of the lack of functionality cannot be assessed properly.
One suggestion would be to rename the label of 'back' button to 'logout' to make it more intuitive."
1,"As this project is in the early stages of development, the UI is minimal. The title is prominently displayed as a header on the home page and subsequent pages to clearly indicate what this application is ""Real Estate manager"". The login and signup links are clear as to purpose; however, the intent in the presence of the words ""Hello World"" beside them is unclear. Additionally, the login and signup page functionalities are easily interpreted. I would suggest that the user profile actually display what kind of user they are rather than a number that only has meaning to the system, as well as, a log out link/button in the header for a user as he/she traversed your application.
The README file only contains the fact that there is no pre-configured administrator. I would recommend including the suggested context from the Ruby generator and the project write up."
1,"Only user model in app/models, rest of the models such as house, realtor, real estate company are missing
Same with controllers.
 
In user model, could add validation for email format 
 
I would suggest user gem 'devise' for user management and 'rails_admin' for admin functionality. 
This helps as the gems taking control of implementation and the developers can concentrate on business logic
 If back is clicks on user edit , the user is logged out instead of going to profile page"
1,"There is only a single test file included with this application, sessions_controller_test. The functionality tested within this file attempts to cover starting a new user session. The test ensures that a new session is returned through an assertion statement equating to true. There are many additional functions of the sessions controller that should be tested including create, destroy, successful log in, etc. Making sure that each of these methods are functional will aid in the development of further successful application flows. I would recommend testing the basic models and their accompanying controllers before you begin implementing things such as house inquires and user responses."
1,"Your home page is very clear as to the application purpose. Unfortunately, I am unable to sign up as a new user or login with any of the pre-configured user accounts included in the Readme. I can, however, attempt to sign up and/or login but this information is never saved to the database for future access or the appropriate transitioning is not implemented.
I like that there are two options listed on the homepage to either sign up as a new user or to login in as a current user. This is convenient for navigation. Consider spacing these links for easier identification. I would also point out that the options in the drop down box included for selecting user type during sign up is a great idea. The third option, is a ambiguous as to its purpose. What does it mean to sign up as a realtor who is also shopping for a house? Perhaps you can just limit the options to Realtor or House Hunter. The functionality of searching homes should be included in the Realtor services. Keep up the work. Once the database is successfully receiving user details and/or the appropriate routes are assigned, additional functionalities should be easy to implement."
1,"Following are some of the relationships missing:
 
house hunter has_many inquiries
realtor has_one company"
1,"Most commits were done by one person which cannot be considered a good practice.
Naming of commits is done well, names are descriptive of the introduced changes.
I would suggest doing commits more often by dividing work into smaller chunks."
1,"There are no issues with code quality or naming. Code is clean and readable and follows Ruby on Rails practices. 
Most methods are short and do one specific task.
One possible improvement would be moving out authorization functionality from controller methods to separate functions."
1,A major portion of the project was completed in the first stage itself. Certain noticeable changes that the team implemented in this stage included setting up admin functionalities to view and destroy the realtor or househunter accounts.
1,"Some methods were long and there was a lot of commented-out code. There was at least one instance of bad indentation. Otherwise, the methods were overall fairly short and the naming was sensible."
1,"Code looks okay, but I found few features missing. As far as code is concerned found admin details hard coded in the code, this is a wrong way to do. 
 Could have used tables for better alignment"
1,"The type of user in the view user panel through admin login is unavailable, would it be possible for the team to have two separate views/controllers and CRUD functions on realtors and hunters?"
1,"The relationships have been set up properly in the model files as well as the schema. However, a destroy dependency in the model file would be a great addition;  has_many :enquiries, dependent::destroy"
1,"The code quality is fairly standard, the code practices DRY principles fairly well. I would suggest creating new controllers for managing house hunters and realtors from admin profile since, on creating a new realtor/house hunter the admin logs out and this seems like stop gap fix."
1,"Instead of writing role = 1. It would have cleaner if some constants were defined. Then, role = ADMIN would have been much clearer
The create method in users_controller.rb is very big and contains several if else statements. It should have been broken down into several sub-methods like create_realtor or create_house_hunter
 
I did not find any user wricomments in any"
1,All methods and classes are well designed and serve well defined functionality. Good job! Could have named the methods and variables a little better. Each function performs a single task. Every method is short and to the point i.e does not contain many nested blocks or if else conditions.
1,"The code has been implemented as per the Ruby standards of coding. 
However, the author has used numeric ids for role comparison which is difficult to map with the code. It would have been more meaningful if the author 
could use the names of role so that it could be easily understood.
Also, it could be more easier for the reader if the author could avoid lot of commented code.
Specially in main classes such as ""UsersController"". 
Instance from code for point 1:



if user.id == 19


 
current_user.role = 1


 
current_user.save


 
else


 
current_user.role = 0"
1,Intuitive UI. Could add a bit of bootstrap and CSS
1,"The team has effectively worked on multiple commits, yet these suggestions need to be followed
 
Suggestions:
 
1. Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline."
1,"You are following good coding practice. I have a suggestion that you can move realtors, admin and house hunters as childs of user. That is admin belongs to user, realtor belongs to user etc. Currently you have all the information in user model."
1,"Links to create new functionalities are all in place and working perfectly. However, I would like to suggest the overall redirection of the user to various places in the app would greatly improve user experience as using the back button again and again in the browser tends to become irritating after a while."
1,Testing for controllers has been completed. Unfortunately test cases for models were not worked on. A suggestion could be to test validation of inquiry if corresponding realtor or house hunter gets deleted.
1,Although branching strategy was followed. The commits mostly seem to be made on the second-last and last day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
1,"Overall, code is clean and readable. Naming and project structure is consistent with good practices.
One issue that stood throughout the code is that authorization is done directly in controller methods. It would be better if this common functionality was moved to a separate function call (e.g. validating user's role in houses_controller#create method)"
1,"The UI for the login page is the only thing that loads, as I'm unable to sign up. A suggestion for the future would be to provide a username and password for an account that is already created to be provided somewhere to ensure a reviewer can log in even if signing up does not work."
1,1. Switch role option is working for Admin too which is not supposed to be the case.
1,"Cannot upload the image to the house. And a realtor can create an inquiry which they should not. Also, the realtor should able to see the potential buyer for the house under their company, not only the house they create. The more button in the interest list does not work."
1,1. All realtors belonging to a company should not be allowed to delete the company. Instead only the realtor who created the company must be allowed to delete. Else it can be catastrophic.
1,"1. Switch role functionality could have been simplified. While logging there are two fields regarding roles. If a user forgets to mark yes for realtor, then switch role will be redundant. There is dependency between switch role and these fields. Both do the same functionality which results in code duplication.
2. A realtor should not be able to add inquiry, he should be able to reply to inquiry."
1,"I can see that there are multiple commits on a single day. This might imply that team members have worked remotely without using git.
Suggestions:
1. Make complete use of git when working remotely.
2. Keep pushing changes periodically to avoid any code loss and to have a timeline of changes.
3. Commit message carries great importance for the first level of code change analysis. So this has to explain the changes to a decent extent. Commit messages in this repository is vague; if they are meaningful, it reduces some effort in analysing the code timeline."
1,"The README file is developed to include all the necessary details about the project as a whole. Great work on documenting. The UI is simple with properly designed tabs. Few enhancements could include
1. The back button is missing in a few places which might be useful for easier navigation.
2. While creating a company, if size is modelled as a drop down to take a range of values then UI would be simpler."
1,"The team has a proper concern on MVC model. Each model/controller/view has a specific role which has not been repeated in other parts of the code.
 
Still, I am giving 3/5 because
1. The project has neglected DRY principle in many of the instances. This has resulted in a bulkier code.
2. As many authors say, a code looks good if it appears like reading a novel. This appearance of a novel like look is missing in many places which can grab other user's attention.
3. The code would have better readability if sufficient amount of comments are included in the code. Also, if the role of each model/controller/view is documented in the code file at the beginning then other contributors may feel easy to follow the code."
1,"The User Interface was working as described in the README file.  The UI functionality don't have any issues apart from the one noted in additional comments
If team would have given some assets/stylesheets config,  The UI would have been great on the looks as well"
1,"The login page is not made. All the admins information is listed on the first page which should not be allowed. It was difficult to understand if I was under the admin's page, realtor's or hunter's page."
1,"The user interface is done as it would be in a basic ruby application, which is good.
There is no login functionality, this is mentioned in the README which was helpful.
Some functionalities which could be improved are :

1)     1)  When I try to add a new house hunter from admin, I get a Contact Method is not included in the list error. As a user, I don’t know what kind of values your system is expecting in this field, so it might help to probably provide a dropdown selection element and put in your values there. In this way, the user will always select a value which your system is expecting. If there are a finite number of values, you can just hard code them into the html element, else pick it up from the db and populate your dropdown as such.
2)      2) When I click on back from the new househunter url, I am directed to show all house hunters url. You could improve this by updating the link-to for this back button by providing it with the user_url, or you could detect which is the current user logged in (Realtor/House Hunter/ Admin) and accordingly redirect to that role’s home page url."
1,"Overall the following things can be improved:
1) The primary key for the real estate company should be auto generated. This is done automatically by the rails framework, so maybe you can remove the code from the view which asks for the user to select the primary key while creating a company.
2) Whenever there is a reference to a foreign key in a model, you can validate and use that reference by following the format model_id, where model is the entity of your foreign key. Eg. If house has foreign key of realtor, realtor is the entity of your foreign key, hence you can reference the realtor as realtor_id in your house model. This is because rails follows convention over configuration, and this is the naming convention with respect to foreign keys."
1,"Yes, the code was written well but a lot of functionalities related to the session was not added."
1,The team has a very well documented history of commits.  The commit history seems to be well spaced over the entire period of the project development cycle. The team has commits in each of the submission periods and have kept on adding functionalities and updating documentation. The team could have updated their readme a little bit more and added information regarding all the functionalities being assigned to individual roles and how the user experience is set up. Also the team could have adde information on how to run tests in Readme.md file
1,"You are following good ruby coding practices. For some places where you are comparing for example in login_controller.rb
if params[:login][:email] == 'admin@admin' && params[:login][:password] == 'admin'
You can use a constant file where you can write these 'admin@admin.com' and use that constant. Its not a good practice to write it like this. Otherwise everything seems good."
1,"There are some really great controller tests included in this application. Most of the functions in each controller are tested to ensure that they are returning and routing to the appropriate pages. Unfortunately, there are no model tests implemented. Model tests should be written to test that the appropriate attributes and relationships of each model are implemented successfully. It will prove extremely helpful in the improved functionality of your application. Make your model tests look like the controller test and you will be doing great!"
1,"Not handled (1) - No actual link created between companies and users as user just stores the company name as a string. Instead, saving the company_id for the user will create a relation between them as the company_id will act as a foreign key. That way edge case example (1) can be handled.
Not handled (2) -  Realtor can edit/delete any house that (s)he created even if company changes.
Handled. When a user is deleted, (s)he is automatically deleted from potential buyer list of house.


The README.md does not cover how the system handles edge cases."
1,"Success in edge case testing is determined by the association of the module, to self or with other modules. Many edge cases in this application are dependent on relationships between modules. For example, because houses are not properly associated with realtors or companies, reassigning a realtor's company appears to have no affect. Administrators are not able to delete users or companies, but  I would image it would not throw an error. There are cases that I tested that dealt specifically around the models. Example: user accounts can be created with the same email accounts as long as they are of different user types. This and other edge cases of it type proved successful. It would be great to have edge case information listed in the ReadMe to clarify how these cases were dealt with. Again, implementing the necessary dependencies between models will help to eliminate many of these edge case issues."
1,"Deletion of House by admin is failing.
Privacy breach - As a user, I am able to see details of all other users. Only admin should be able to see details of other users.
Overall very good effort. If the above issues weren't there, I would have given full points."
1,"The application has really come a long way from the previous submission. I believe most of the page routes follow an appropriate application flow. There are several of the dependencies that are evidently not implemented do to the following observations: (1) Users are able to assign him/herself a Real Estate Company that doesn't exist in the system. This assignment should only be made with existing companies to fulfill the requirement of mapping a realtor to a single company. This missing dependency also reflects in the creation of houses. Realtors are able to create houses that are not listed with the company that the realtor is associated with. This association should be automatically made according to the company assigned to the realtor. (2) Users can be both a hunter and a realtor at the same time and can switch back and forth. How do you differentiate between a users abilities? Probably the best option would be to only allow users to be either a house hunter or a realtor. That would eliminate some of the ambiguities is associations and some unnecessary profile fields like house hunters having a real estate company. (3) Inquiries are not associated with houses. This posses an issue with knowing what property the house hunter is requesting information about. Overall, there have been great advances in your application since the first submit. Continue implementing those dependencies so that the required associations can hold."
1,"Not able to see the mapping between inquiries and houses. 
Also, not able to see mappings between potential buyers and houses. 
Did you forget to commit? Because the deployed version is working but GitHub doesn't have the latest code."
1,Unable to view the git repository. Git is truly your friend during development. Make a habit of really committing with useful commit messages and at appropriate feature development times. My team and I found that having different commits for each feature implementation gave many options for points in time that we could revert back to in the invent that something went awry.
1,"The git may very well contain the appropriate testing files; however, I am unable to view the due to the privacy settings of the repository. I would suggest that your try and test those models/controllers that have the most complexity to increase the level of confidence in your product. Make sure to test the validations and boundary cases thoroughly, especially model attributes that have restrictions on things such as length and type.  There are also several instances in the project where various users can accomplish the same tasks but with slight differences. It will be to your benefit to pay close attention in creating tests that can replicate these tasks."
1,"There was no link included to allow a reviewer access to the deployed application. When you are finally able to submit the appropriate working link, I would suggest having a README that contains the suggested Ruby content, along with, the information encouraged by the project write up.  Additionally, I would suggest having a person not participating in the course to take a look at your application. He/She may be able to offer a way to gauge the ease and effectiveness of your site. They may also offer valuable insight into feature placement and page flow."
1,GitHub link is not redirecting. Shows 404 not found. Please deploy the application on any of the platforms.
1,"Unfortunately, I am unable to view this Git Repository. This is, most likely, due to the fact that the repo is set to private and only available to those currently collaborating. I would suggest making the setting adjustment for the repo to be public so reviewers and TA's can grade the work that has been completed. When coding, take note of the stylistic norms of Ruby regarding method calls, parenthesis, and syntax best practices. Additionally, maintain a consistent indention scheme for ease of review."
1,"Unfortunately, most of the test cases failed while testing

The realtor does not get deleted from the system after the deletion of his/her respective real estate company.
The link to create new houses redirects to a different link, hence I was not able to create new houses and test certain cases
The inquiries submitted by the house hunter remain in the database even after the deletion of the house hunter
All the inquires of the particular house are shown to every realtor, which is not an ideal case

These are some of the cases that need attention. Owing to the work done on remainder of the project, these changes would be implemented easily with some effort"
1,Deleting company doesn't delete it's houses. No form of cascade delete present anywhere.
1,"The system performs all the desired functionalities. A shoutout to the idea for the auto filled inquiries. I really liked that feature where the inquiry is already filled after which the user gets an option to edit the inquiry. Some parts need improvement. For ex: The link ""new houses"" in the house list redirects to the  users/edit link. Its a minor issue which could be looked upon. The layout of the homepage for house-hunter can be fixed as links overlap each other. Also, the houses list shows edit/destroy options for the entire house list, that's a bug which needs fixing."
1,"Admin has a separate login url and cannot login from the same page as other users.
Admin panel could be made a little more user friendly by separating links on different lines."
1,Code looks good. The first cut for good too.  I still do not see code for models in model files if an additional gem has been used it would be good to mention that in readme
1,The team has a well documented history of commits. The team has been regular in updating the github repository. The team has kept on updating the repository through both the periods of the submission. The team also has used proper commit messages to document the commit history. The readme file has also been updated regularly and contains detailed report on the functionalities associated with each user role. Also the testing information has been updated on the repository. The team could have added information on how the tests can be run . The team could have added information on how to setup the environment after cloning the repository and what all dependency information is associated with the application. The readme file could have been more structured with proper titles and paragraphs.
1,"With a total of about 55 commits, the team has made more or less periodic commits. Labels for the commits could be better so it becomes more readable"
1,"Code mostly follows good styling guidelines but there are a couple of issues. I would suggest splitting nouns when naming classes (e.g. PotentialBuyer instead of Potentialbuyer). Spacing is inconsistent in some classes (househunter_controller.rb#search and houses_controller.rb#show).
There are some cases when decomposition and moving functionality into a separate method would make sense. For example in search method of househunter_controller.rb class, if statements could be moved to a separate method with a descriptive name. This would make code more readable.
There are instances where code is commented out (e.g. inquirydetails_controller.rb). Removing that commented chunk entirely would make code cleaner. Deleted chunk could always be referenced in git history."
1,code looks clean and neat. UI design looks very good and is elegant. Search functionality for the houses should have been in controllers and not in the model.
1,"3) The search method is a little long. Some of it could have been extracted to function calls.
 
Otherwise, the code looks good. Methods were short and names were sensible."
1,No testing has been done. I checked the RSpec folder (not present) and no changes have been made to the pre built testing files as well. You could have easily written the tests for the user model and controller just by looking at the cookbook application. Good job overall with the DB validations and checks in the application (for login/logout)
1,"https://pure-peak-85957.herokuapp.com/houses When this link is opened after registering as a realtor and adding a house, the application crashes. All other basic functionality works well. Great job with the design and methods! The flow of the application could be a bit more clear instead of just listing all the links in  one page."
1,"The code is much clean and readable. All the functions are short and crisp with proper indentation . However, mostly they have tried to embed the functionalities which could have been separate to be in the basic crud functions provided by rails. for eg. here , they haven't maintained a different function for the potential buyer , instead they have used a hash for it which is embedded in the show functionality of the house controller"
1,The basics test are written. Some application specific tests can be written.
1,"UI looks nice but I found the it to be a bit confusing. The relation between User, House Hunter and Realtor is not apparent. It would helpful if it could be explained in detail in the README file."
1,"The code is very well written, properly organised and good architecture. No repetition.
Cons
Application logic written in controllers, for example, house_controller, which can be ported to the respective models."
1,"Most of the functionalities are implemented. However, ""Not a valid URL"" Error message is prohibiting from editing companies under realtors even when given a valid URL. Not able to House Hunter from the users list through admin login. The following error message is displayed.

We're sorry, but something went wrong.

If you are the application owner check the logs for more information.
Upload picture UI could have been constructed better because the picture does not fit in the given space."
1,"The Facebook signup which wasn't working in the previous sign up works properly. The admin, realtor, customer functionalities are working fine and I can see a lot of improvement from the previous version. The realtor can send a receive queries by the customer. However, a small suggestion would be to ask a realtor for the company name while filling the sign up form. Apart from that, the system fulfills all the requirements of the project"
1,"Most functionalities are working great.
In the first round admin was missing some basic functionalities, now they are present and working.
One issue that I came across is that while admin is creating a new company, the system keeps raising an error saying that the website url is invalid and so the users cannot create new company. Maybe, there is something wrong with the validations of Company model. However, when realtor creates the company, this error does not occur."
1,User model doesn't have all has_many relations defined
1,"The commits were spread throughout the project duration, however the commit messages could have been more descriptive. The team still made commit changes in round 2 which shows they have proceeded with development."
1,Project name could have been better
1,"The user interface is very well designed, and the cleanest and the most user friendly among all that I've reviewed till now. The UI is very intuitive and the alternate shading of the lists improves legibility a lot. The only place where the UI was deficient was that it didn't seem consistent. The login / signup page had a different UI compared to other pages. I suppose improving consistency would increase user friendliness of the application to a lot of extent."
1,"Readme.md does not mention anything with respect to edge cases.
The linking is not intuitive. You have provided back buttons in quite a few places which redirect to that entities index.html.erb page instead of redirecting to the actual page I came from. Suggestion is put in a button for menu and link the menu to the starting page of the currently logged in entity. This will make things simpler."
1,"Interest list has not been implemented.
Please write a readme file in your repo to let us know the admin credentials
Please provide the deployment link"
1,"Not every member of team contributed.
Could see some commits after the deadline of round2."
1,The team did not seem to submit their changes throughout the project. The team have made changes only after round 1 and nothing on round 1. There are a total of 19 commits. It would have been better if the commits have been made with messages so that others can know what changes have been made in the project.
1,"The methods seem like the ones created by the scaffold command. Even for the views, there isn't any code for eg. to display house delete only to the realtor who has created it."
1,Model testing needs to be improved with more scenarios.
1,"I could not check if most of the edge cases work. All the ways I tried doing this failed:
Admin cannot destroy most of the users, admin cannot view/edit/destroy realtors, admin was unable to destroy househunter account I created ( it was also registered as a realtor acc ), 
When i destroyed the company, associated houses were also destroyed, and their associated inquiries and replies were deleted so that edge case has been taken care of.
 
I believe that maybe all the cases are taken care of, but I could nopt test them as their dependent functionalities are not working."
1,"There are several improvements over the last review. Dropdowns have been implemented, which make a huge improvement to the ease of use of the system. 
 
While the UI has become a lot better, there are several flaws: 
Admin is shown to be registered as a realtor, but cannot be redirected to the pages(househunter link works).
Househunter can set another hunter's interest liist by manipulating id. 
Househunter can edit companies.
Admin cannot destroy users, 
Admin can not create/edit/destroy a realtor - error page is shown.
Realtor can list houses even if not enrolled in a company
Admin can not destroy househunter.
Passwords are visible to admin,.
 
There are a few minor problems which, if dealt with, would make code even better: 
Proper error messgaes - while signing up with wrong password length, a heroku error shows up which makes it feel like the functionality isn't working, whereas the problem can be user's fault as they  could have entered only 4 digit pin. Let users know that they need to provide proper input.
 
Also, please do not ask passwords in a text field. A very simple change can go a long way."
1,Have implemented basic testing. Could add more application specific test cases.
1,I cannot get access to the interface and the readme is not provided. They should provide a readme file later to state how can I test the project.
1,"I'm docking some points here because Heroku doesn't appear to work. I think some malicious reviewer deleted the admin and the real estate company, and surprise! If a company doesn't exist, it doesn't let any user sign up. 
 
Please re-seed your database so I can test your app."
1,"UI doesn't have proper navigation in many pages. A suggestion would be to display the data in a more spaced out way, using html tables or such methods, as it looks very cramped and confusing."
1,"Comments from Round 1 are taken care of. 
 
Delete real estate company crashed.
View Inquiry lists inquiries from all houses, including ones that are not under the same company. These should not be accessible to the realtor. He should see only ones from houses in his company."
1,"1) If a house hunter is interested in a house, there should be only one entry specifying this interest in the database. In this app, the same house hunter can show multiple interests on the same house. This results to duplicates in db and must be handled.
2) After creating an inquiry, clicking on the Back link on the page should re-direct to /houses or which ever page was visited before creating an inquiry. This is not happening.
3) Founded year field of the company table takes any numeric value --- Founded: 465789
4) The house hunter is able to create a company which is not supposed to be an allowed operation. This happens when as a house hunter, I edit profile and choose to be realtor, I get an option to create a company but even without changing the role to realtor.
 5) Point 3 holds good for built year field of house table Builtyear: 7598
6) View inquiries feature is not working...throws an error."
1,The code looks great. It's all scaffolding and really lean view modifications.
1,"Same issues as of first review. Cannot delete company. Reason cited is 'dependent realtor exist'. I suggest that when a company is removed, realtor shouldn't have a company too. Because a realtor can exist without a company in his profile too!
Admin cannot edit his/her details"
1,Test is implemented only for model. No test is implemented for controllers.
1,"Along with the above improvements some of the things you might want to take care of are:
Even if a company is deleted the houses and inquires remain as it is. (Partial reason is the above bug which allows to create a house and post reply without being associated to any company).When I try to delete a house it shows application error. So not able to test if dependent child records for potential buyers and house hunters are deleted or not. For Realtor and HouseHunter Signup, it should be allowed to signup without specifying company or other details except name, email, password as per the usecase given. This is not allowed currently."
1,"There was no functionality implemented during 1st review. So there is a drastic improvement. However there are some functionalities which need further improvements.
1)Admin has no option to post or view houses.2)Admin is not able submit inquiry or reply to inquiries.3) Admin has no option currently to edit his profile. He should be able to edit his name. 4)Multiple Realtors and House Hunters can be created with the same email ID. There is no email or role validation. This will allow a lot of duplicate entries and the app will also be suseptible to attacks by robots. Can be improved by a 2 line validation code in model.5) Password should be encrypted. While entering the details too it should not be displayed as plain text. Can be improved by simply using type as password instead of text  in views. and applying encryption in model so that password is encrypted throughout the application6) Search House Functionality does not work when a new house is created. It shows the same old results.7)Also the description specifies Search by Price Range. But it has only one field to input price. This won't work if the user wants to see a house which is between 1000 to 3000 bucks or any house which is less then 3000 bucks. Since the app shows only houses greater then the price entered.8) Realtor is able to create a house even if he is not associated with a company. 9) Realtor is able to view potential buyers and reply to inquiries for all houses without being associated to a company. There should be a check to ensure that realtor is able to post a house only if he is associated with a company. Also the option to view potential buyers and reply to inquiries should only be enabled for houses which are associated with his company. In case of no company association he should be promted to associate himself with a company or create a new company first."
1,"The necessary functionalities are implemented. The README file explains how to access some of these functionalities also. However, the company listings appear even before the realtor chooses a company. This shouldn't happen"
1,"Test cases written and system is checked and positive testing is done properly.
Team could perform one round of testing and solve minute errors still present."
1,There is no functionality to edit a realtor's company.
1,"1) As far as I can tell, an admin cannot delete a real estate company.
2) Realtors don't appear to have real estate companies.
3) House Hunters do not seem to be able to make inquiries.
4) The README does not document any edge cases."
1,"If admin tries to delete company, corresponding houses gets deleted.
Similarly association between inquiry and other models handled well.
System goes into error when we try to create house without images, though houses gets created multiple times. (Realtors login)
Team could probability add null check for empty references."
1,"Since the first round, authors seem to have progressed a lot, and added most of the missing functionalities. However, following are some of them I found missing:
1.There is no potential buyer's list for a house that can be viewed by a realtor., however there is a link to the house inquiries.
2. I am not able to associate a company to my profile as a realtor. The realtor should be able to work for only one company, however, here I am able to add multiple companies, which should be restricted to admin only.
3. preconfigured admin - unable to login to the system as admin"
1,"1. User cannot sign up as both Realtor and Hunter, no role switching."
1,"Basic functionalities are working fine Except few.
Team could work on below functionalities.
1. System crashes when realtor tries to create house.
2. House hunter can create company.
3. When clicked on show company, system crashes.
4. Passwords are visible."
1,"The database handles all the relationships very well.
On the downside, there is a flaw in database design - keeping a single user table and single role type means the same email address can not be used for both realtor and house hunter profiles. You can either create separate tables or more than one columns to determine if the same email has more than one role."
1,"The realtor can exist without belonging to a company, this should be corrected as the realtor must belong to a company."
1,"Inquiries and house interest lists should not belong to companies. They belong to houses which belong to companies. Also, a user should not have many companies. This is possible with the database and model configuration. Otherwise, the relationships were properly implemented."
1,"Nicely implemented code. Used ruby delegations appropriately, and the code is very readable. 
However, a few things can be improved.  for eg, in inquiriy_replies_controller, flash[] is used to transfer data from the new method to the params method, which is not the correct way.
Also, I believe that the implementation can be made more efficient by reducing the number of database hits.
For example, in almost all the controllers, there are redundant database hits: User.find(session[:id]).role_type == ""buyer"" could have been identified during login. A second hit to identify the role type or any such info can be avoided. For a small test database, this would not show any performance decrease but as the records increase the pages will become exponentially slower.  
Maybe you can store these in memory [Session?], which would reduce time taken significantly at a small memory overhead."
1,"The functionalities of interest list and inquiries are implemented in a crude way, i.e. by creating a drop down for a listings. It becomes very tedious for the user to go and choose a house from hundreds of listings every time to just add it to a interest list. A better way would have been by creating an option of adding to the interest list where user can see all the listings.
Adding a user to interest list does not add the buyer a to a house's potential buyer's list. There is no option for viewing potential buyers."
1,"Code is written properly and followed DRY.
Each Function is handling single task.
Team understands MVC architecture very well, But i could see controller for every functionality , where in such functionalities could have been handled with mere methods in other main controllers."
1,"Deleting a house hunter does not work, possible error in deployment.
 
Edge cases
Company cannot be created without filling all details. This is implemented.
Session control : When user signs out from a page and then goes back, the profile page should not be shown (as he is signed out). This should be considered."
1,"There are some functionalities which needs to be implemented.
Areas you should focus on are destroy is not working correctly in some cases,application is getting crashed again and again. admin should not be deleted by user. how is house associated with a company is something which I was not able to understand."
1,DB seems well designed. I didn't see potential buyers. That will have a relation with house such that house has many potential buyers.
1,"Yes, the team has committed changes in round 2 also. Overall it looks like the codes were pushed to master and one go. Regularly committing the files could have been better."
1,"Regular commits were not done. Everything was committed in one commit which should be discouraged. Think about working professionally, you should be committing code ASAP and committing with proper commits and description. Commit also should not be all module at once but individual."
1,"Most of the code follows standards. 
But I was not able to verify the complex examples like adding house to interest list, email when a reply is given by realtor as it is not working.
In replies_controller.rb avoid using class variable and use instance variable."
1,All commits were on just 2 days before and on the day of submission. It will be helpful to keep committing code at the end of each day or every couple of days so that there is no major issue of merging at the end. Also it ensures that all team members are working on the same copy of code.
1,"sessions.rb
create method has 3 large code blocks for the three role types. It would have been better to create separate methods for each type"
1,"1. If the company that a realtor belongs to is deleted, his or her company will be the admin company, which I think may nit be the best choice. The company can be empty and in that case, the realtor should nit be able to list a house.
2. The inquiry should be able to show the hunter's name, not the code string."
1,"It would be more modular if realtors, house hunters and admin were a different table. Since they are clubbed under users table, there are many checks performed in most of the views.
Cannot identify user names, company names as IDs are displayed. It would be helpful if this can be modified."
1,There is a scope of improvement by eliminating multiple 'back' links on each page.
1,This UI is pretty good. It's fairly intuitive to follow. The only thing I'd recommend is to have a link to the signup page on your welcome screen.
1,"The User Interface is very intuitive. The idea to add a field for preferred contact is very smart and relevant. Displaying the number of registered users, however, seems irrelevant to the house hunter and realtor. Perhaps this can be a function of the admin account where it would be more relevant."
1,"UI is easy to use, a suggestion would be to display tables of data better, with better spacing (the list houses page for example has the columns cramped up together)"
1,"The team has implemented test for the user model and controller. However, it would make for better design if they used the RSpec Framework to do the test. More comprehensive test cases could be tested such as if the passwords of the user don't match."
1,"Admin cannot delete real estate companies, users or houses. I found that admin can delete these if they are not related to anything else, i.e. if there is a house which is not present in interest list, has no inquiries than it can be deleted. Ditto others.
I suspect that the error is thrown as the entry is being referenced in some other table as foreign key. This would imply that edge cases have not been implemented, or are for some reason not working on heroku."
1,The admin account can be deleted by the admin. This should not happen. The admin account should be indestructible.
1,"The system has all the required functionality. However, it would also be useful if the README file explained where some of the features are incorporated. For instance, the submit inquiry field is located on the show page for the houses. This is not immediately intuitive. It could help if that is mentioned in the README"
1,"Ruby guidelines are followed to good extent. Clean and legible code. A few things can be written in a more ""ruby like"" manner, like the index method of house controller. E.g. min_price = something if ... would be a better and more concise alternative. Models can have more validations. Other than that, code is well written."
1,"User Role-: Once a user is created, and goes to edit their profile, if they uncheck both roles there is no way for that user to get any role back. Their should be a check in the user table that both roles cannot be blank.
Also, unfortunately there is no mention of how the system handles edge cases in the Readme file"
1,"It seems evident that there are deletion issues for any resource/user that is already indexed on some other resource/user. The solution to that issue would be  adding a destroy dependency in model files, for example for house hunters, has_many :inquiries, dependent::destroy"
1,"Overall the code is written in an extremely clean and readable way. Having said that I would like to propose one suggestion which may help in future.
There's 2 instances where code has been added in the index function of controllers (namely houses_controller.rb & list_of_pot_buyers_controller.rb). After the if else condition if search exists or not, the main search logic in houses_controller.rb could be added to a new function by passing the search params to that function.
Similarly in list_of_pot_buyers_controller.rb, the SQL queries should be put in other functions say ""def generate_list_of_potential_buyers"""
1,"All basic functionality outlined by the test suite is working as expected with few corner case bugs. The filter functionality should have been more flexible to filter for a range of price and Sq ft, rather than try to match exact numbers provided which is not user friendly. Also the realtor signup should allow realtor to choose company from list available which is more user-friendly"
1,Db design doesn't have key reference and 1-1 or 1-many relationships in active records are missing but the same is implemented via code logic.
1,"The team has partially handled the relationships. 
Has_many:
They have aptly provided all the has_many relationships, such as RealEstateCompany has many houses, relators; A House Hunter has many interest and inquiry etc. One more relation should have been a relator has many houses under him.
Most of these relations are bi-directional associations, so there should ideally have been a belongs_to relation. Such as, if a Company has many realtors, then a relator belongs_company is an association. No such relations are found in code.
Also, as the realtor can only be linked to one company at a time, this calls for a has_one relation."
1,"The system does not portray good database design. First of all, there are two separate tables for enquiries and reply to enquiries, which is highly not normalised. Also, the fact that there are 3 separate tables for the three types of users is also very in-efficient and non-scalable. It does make an attempt to map the various relationships, but it seems it is not properly tested, and is prone to many bugs."
1,"The commits were not regular. The development cycle seems to be a rushed one, since the commits are too concentrated near the deadline, and too sparse in between them."
1,I don't think the test has been finished. the controller test file is basic empty and the same empty in the model test file.
1,"All the buttons which do what they say they do are quite good. Quite reasonably, I can click on these buttons and the expected behavior occurs. It's a little weird to have to select whether I want to log in as a house hunter, a realtor, or the admin at the login screen, and that it doesn't work without selecting the right user type.
 
Unfortunately, many buttons do not do what they say, or redirect the application to a dead page. Here are the functionalities which do not work:
1. Attempting to delete Real Estate Company makes you view Real Estate Company detailed info. Inquiries do the same.
2. Attempting to 'show' anything that's not a real estate company throws a 406.
3. As a realtor, I tried to Update/add company information and my change was rejected.
4. The List a House form has 'create company' as its submit button. 
 
There are also many things I expected to be able to do that there were not buttons or links for."
1,The UI is basic as of now. The 'show profile' link is broken.
1,"The user interface is very simple, clear and straightforward. But it lacks depth where it should have been extensive. For example, after signing up for the first time, the user is directed by to the login page to login again. This is not very user friendly, and is rather redundant. One must automatically sign in after creating an account. Also, the application should deduce whether I'm a realtor or a househunter or an admin from the email ID i entered. I should atleast now have to specify for househunter or realtor about my role."
1,"All users have their own model controllers. The code is following Ruby on Rails standards but there are some debug ""puts"" that should be removed."
1,The Code is structured as per basic rails norms. The CRUD operations operations actions could have followed the usual norms than custom actions defined. The routes config could have been more efficiently defined using match than defining each routes separately.
1,"Overall, the code looks fine.
Good code is self-documenting - So, your code could be improved by adding comments in all required places.
Make use of different logging options provided by ROR and avoid using ""puts"" in code."
1,I Don't see the GIT Link to comment on this. Requesting the Team to upload the GIT Link and Deployment URL in Expertiza instead of the Project Folders
1,"Only 4 commits, No Github link. Hard to review. Please update the Submission with a github link so other reviewers can maybe give some proepr feedback after testing the app."
